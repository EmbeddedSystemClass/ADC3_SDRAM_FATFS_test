
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003330  08016be0  08016be0  00026be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019f10  08019f10  00029f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019f18  08019f18  00029f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019f1c  08019f1c  00029f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  20000000  08019f20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000018fc  20000210  0801a130  00030210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001b0c  0801a130  00031b0c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 10 .debug_info   00049f72  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008152  00000000  00000000  0007a1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000026a8  00000000  00000000  00082308  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002370  00000000  00000000  000849b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000198f4  00000000  00000000  00086d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000c61b  00000000  00000000  000a0614  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000acc2f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000b32c  00000000  00000000  000accac  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000006c  00000000  00000000  000b7fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000e3  00000000  00000000  000b8044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016bc8 	.word	0x08016bc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08016bc8 	.word	0x08016bc8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2uiz>:
 8000c00:	004a      	lsls	r2, r1, #1
 8000c02:	d211      	bcs.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c08:	d211      	bcs.n	8000c2e <__aeabi_d2uiz+0x2e>
 8000c0a:	d50d      	bpl.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c14:	d40e      	bmi.n	8000c34 <__aeabi_d2uiz+0x34>
 8000c16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c22:	fa23 f002 	lsr.w	r0, r3, r2
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d102      	bne.n	8000c3a <__aeabi_d2uiz+0x3a>
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_d2f>:
 8000c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c48:	bf24      	itt	cs
 8000c4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c52:	d90d      	bls.n	8000c70 <__aeabi_d2f+0x30>
 8000c54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c74:	d121      	bne.n	8000cba <__aeabi_d2f+0x7a>
 8000c76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7a:	bfbc      	itt	lt
 8000c7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	4770      	bxlt	lr
 8000c82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8a:	f1c2 0218 	rsb	r2, r2, #24
 8000c8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c96:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ca0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cac:	ea40 000c 	orr.w	r0, r0, ip
 8000cb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb8:	e7cc      	b.n	8000c54 <__aeabi_d2f+0x14>
 8000cba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cbe:	d107      	bne.n	8000cd0 <__aeabi_d2f+0x90>
 8000cc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bxne	lr
 8000cd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_uldivmod>:
 8000ce0:	b953      	cbnz	r3, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce2:	b94a      	cbnz	r2, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	2800      	cmpeq	r0, #0
 8000cea:	bf1c      	itt	ne
 8000cec:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf4:	f000 b97a 	b.w	8000fec <__aeabi_idiv0>
 8000cf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d00:	f000 f806 	bl	8000d10 <__udivmoddi4>
 8000d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0c:	b004      	add	sp, #16
 8000d0e:	4770      	bx	lr

08000d10 <__udivmoddi4>:
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	468c      	mov	ip, r1
 8000d16:	460d      	mov	r5, r1
 8000d18:	4604      	mov	r4, r0
 8000d1a:	9e08      	ldr	r6, [sp, #32]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d151      	bne.n	8000dc4 <__udivmoddi4+0xb4>
 8000d20:	428a      	cmp	r2, r1
 8000d22:	4617      	mov	r7, r2
 8000d24:	d96d      	bls.n	8000e02 <__udivmoddi4+0xf2>
 8000d26:	fab2 fe82 	clz	lr, r2
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d00b      	beq.n	8000d48 <__udivmoddi4+0x38>
 8000d30:	f1ce 0c20 	rsb	ip, lr, #32
 8000d34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d4c:	0c25      	lsrs	r5, r4, #16
 8000d4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d52:	fa1f f987 	uxth.w	r9, r7
 8000d56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d5e:	fb08 f309 	mul.w	r3, r8, r9
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x6c>
 8000d66:	19ed      	adds	r5, r5, r7
 8000d68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d6c:	f080 8123 	bcs.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f240 8120 	bls.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aed      	subs	r5, r5, r3
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	fb00 f909 	mul.w	r9, r0, r9
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x98>
 8000d94:	19e4      	adds	r4, r4, r7
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	f080 810a 	bcs.w	8000fb2 <__udivmoddi4+0x2a2>
 8000d9e:	45a1      	cmp	r9, r4
 8000da0:	f240 8107 	bls.w	8000fb2 <__udivmoddi4+0x2a2>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 0409 	sub.w	r4, r4, r9
 8000dac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db0:	2100      	movs	r1, #0
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d061      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000db6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6034      	str	r4, [r6, #0]
 8000dbe:	6073      	str	r3, [r6, #4]
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xc8>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d054      	beq.n	8000e76 <__udivmoddi4+0x166>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	f040 808e 	bne.w	8000efe <__udivmoddi4+0x1ee>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xdc>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80fa 	bhi.w	8000fe0 <__udivmoddi4+0x2d0>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb65 0503 	sbc.w	r5, r5, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	46ac      	mov	ip, r5
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d03f      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000dfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b912      	cbnz	r2, 8000e0a <__udivmoddi4+0xfa>
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e0a:	fab7 fe87 	clz	lr, r7
 8000e0e:	f1be 0f00 	cmp.w	lr, #0
 8000e12:	d134      	bne.n	8000e7e <__udivmoddi4+0x16e>
 8000e14:	1beb      	subs	r3, r5, r7
 8000e16:	0c3a      	lsrs	r2, r7, #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e22:	0c25      	lsrs	r5, r4, #16
 8000e24:	fb02 3318 	mls	r3, r2, r8, r3
 8000e28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2c:	fb0c f308 	mul.w	r3, ip, r8
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x134>
 8000e34:	19ed      	adds	r5, r5, r7
 8000e36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x132>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	f200 80d1 	bhi.w	8000fe4 <__udivmoddi4+0x2d4>
 8000e42:	4680      	mov	r8, r0
 8000e44:	1aed      	subs	r5, r5, r3
 8000e46:	b2a3      	uxth	r3, r4
 8000e48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e54:	fb0c fc00 	mul.w	ip, ip, r0
 8000e58:	45a4      	cmp	ip, r4
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x15c>
 8000e5c:	19e4      	adds	r4, r4, r7
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x15a>
 8000e64:	45a4      	cmp	ip, r4
 8000e66:	f200 80b8 	bhi.w	8000fda <__udivmoddi4+0x2ca>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	eba4 040c 	sub.w	r4, r4, ip
 8000e70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e74:	e79d      	b.n	8000db2 <__udivmoddi4+0xa2>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	f1ce 0420 	rsb	r4, lr, #32
 8000e82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e8e:	0c3a      	lsrs	r2, r7, #16
 8000e90:	fa25 f404 	lsr.w	r4, r5, r4
 8000e94:	ea48 0803 	orr.w	r8, r8, r3
 8000e98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ea0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000eac:	fb01 f30c 	mul.w	r3, r1, ip
 8000eb0:	42ab      	cmp	r3, r5
 8000eb2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000eb6:	d909      	bls.n	8000ecc <__udivmoddi4+0x1bc>
 8000eb8:	19ed      	adds	r5, r5, r7
 8000eba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ebe:	f080 808a 	bcs.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec2:	42ab      	cmp	r3, r5
 8000ec4:	f240 8087 	bls.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	443d      	add	r5, r7
 8000ecc:	1aeb      	subs	r3, r5, r3
 8000ece:	fa1f f588 	uxth.w	r5, r8
 8000ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ed6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ede:	fb00 f30c 	mul.w	r3, r0, ip
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1e6>
 8000ee6:	19ed      	adds	r5, r5, r7
 8000ee8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eec:	d26f      	bcs.n	8000fce <__udivmoddi4+0x2be>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d96d      	bls.n	8000fce <__udivmoddi4+0x2be>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	443d      	add	r5, r7
 8000ef6:	1aeb      	subs	r3, r5, r3
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	e78f      	b.n	8000e1e <__udivmoddi4+0x10e>
 8000efe:	f1c1 0720 	rsb	r7, r1, #32
 8000f02:	fa22 f807 	lsr.w	r8, r2, r7
 8000f06:	408b      	lsls	r3, r1
 8000f08:	fa05 f401 	lsl.w	r4, r5, r1
 8000f0c:	ea48 0303 	orr.w	r3, r8, r3
 8000f10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f2a:	fa1f f883 	uxth.w	r8, r3
 8000f2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f32:	fb09 f408 	mul.w	r4, r9, r8
 8000f36:	42ac      	cmp	r4, r5
 8000f38:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x244>
 8000f42:	18ed      	adds	r5, r5, r3
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d243      	bcs.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	d941      	bls.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	441d      	add	r5, r3
 8000f54:	1b2d      	subs	r5, r5, r4
 8000f56:	fa1f fe8e 	uxth.w	lr, lr
 8000f5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x26e>
 8000f6e:	18e4      	adds	r4, r4, r3
 8000f70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f74:	d229      	bcs.n	8000fca <__udivmoddi4+0x2ba>
 8000f76:	45a0      	cmp	r8, r4
 8000f78:	d927      	bls.n	8000fca <__udivmoddi4+0x2ba>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	441c      	add	r4, r3
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba4 0408 	sub.w	r4, r4, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454c      	cmp	r4, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	464d      	mov	r5, r9
 8000f90:	d315      	bcc.n	8000fbe <__udivmoddi4+0x2ae>
 8000f92:	d012      	beq.n	8000fba <__udivmoddi4+0x2aa>
 8000f94:	b156      	cbz	r6, 8000fac <__udivmoddi4+0x29c>
 8000f96:	ebba 030e 	subs.w	r3, sl, lr
 8000f9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000fa2:	40cb      	lsrs	r3, r1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	40cc      	lsrs	r4, r1
 8000fa8:	6037      	str	r7, [r6, #0]
 8000faa:	6074      	str	r4, [r6, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e6f8      	b.n	8000da8 <__udivmoddi4+0x98>
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	e6e0      	b.n	8000d7c <__udivmoddi4+0x6c>
 8000fba:	45c2      	cmp	sl, r8
 8000fbc:	d2ea      	bcs.n	8000f94 <__udivmoddi4+0x284>
 8000fbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7e4      	b.n	8000f94 <__udivmoddi4+0x284>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	e7d7      	b.n	8000f7e <__udivmoddi4+0x26e>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	e791      	b.n	8000ef6 <__udivmoddi4+0x1e6>
 8000fd2:	4681      	mov	r9, r0
 8000fd4:	e7be      	b.n	8000f54 <__udivmoddi4+0x244>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	e778      	b.n	8000ecc <__udivmoddi4+0x1bc>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	443c      	add	r4, r7
 8000fde:	e745      	b.n	8000e6c <__udivmoddi4+0x15c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xe6>
 8000fe4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe8:	443d      	add	r5, r7
 8000fea:	e72b      	b.n	8000e44 <__udivmoddi4+0x134>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001002:	2235      	movs	r2, #53	; 0x35
 8001004:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001008:	220b      	movs	r2, #11
 800100a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <BSP_LCD_Init+0xcc>)
 800100e:	f240 121b 	movw	r2, #283	; 0x11b
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001016:	f240 2215 	movw	r2, #533	; 0x215
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <BSP_LCD_Init+0xcc>)
 800101e:	f240 121d 	movw	r2, #285	; 0x11d
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001026:	f240 2235 	movw	r2, #565	; 0x235
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800102c:	2100      	movs	r1, #0
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001030:	f000 fcae 	bl	8001990 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001036:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800103a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <BSP_LCD_Init+0xcc>)
 800103e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001042:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <BSP_LCD_Init+0xcc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <BSP_LCD_Init+0xcc>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <BSP_LCD_Init+0xcc>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <BSP_LCD_Init+0xd0>)
 8001078:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <BSP_LCD_Init+0xcc>)
 800107c:	f004 f8dc 	bl	8005238 <HAL_LTDC_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001086:	2100      	movs	r1, #0
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <BSP_LCD_Init+0xcc>)
 800108a:	f000 fba7 	bl	80017dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001090:	f003 ffb8 	bl	8005004 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <BSP_LCD_Init+0xd4>)
 800109c:	f002 fa4a 	bl	8003534 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2108      	movs	r1, #8
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <BSP_LCD_Init+0xd8>)
 80010a6:	f002 fa45 	bl	8003534 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80010aa:	f00f ff27 	bl	8010efc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <BSP_LCD_Init+0xdc>)
 80010b0:	f000 f8d8 	bl	8001264 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200004a4 	.word	0x200004a4
 80010c0:	40016800 	.word	0x40016800
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40022800 	.word	0x40022800
 80010cc:	20000000 	.word	0x20000000

080010d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <BSP_LCD_GetXSize+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <BSP_LCD_GetXSize+0x24>)
 80010da:	2134      	movs	r1, #52	; 0x34
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	3360      	adds	r3, #96	; 0x60
 80010e4:	681b      	ldr	r3, [r3, #0]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	2000026c 	.word	0x2000026c
 80010f4:	200004a4 	.word	0x200004a4

080010f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <BSP_LCD_GetYSize+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <BSP_LCD_GetYSize+0x24>)
 8001102:	2134      	movs	r1, #52	; 0x34
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3364      	adds	r3, #100	; 0x64
 800110c:	681b      	ldr	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	2000026c 	.word	0x2000026c
 800111c:	200004a4 	.word	0x200004a4

08001120 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001130:	f7ff ffce 	bl	80010d0 <BSP_LCD_GetXSize>
 8001134:	4603      	mov	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800113c:	f7ff ffdc 	bl	80010f8 <BSP_LCD_GetYSize>
 8001140:	4603      	mov	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800116c:	2307      	movs	r3, #7
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001170:	f7ff ffae 	bl	80010d0 <BSP_LCD_GetXSize>
 8001174:	4603      	mov	r3, r0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001178:	f7ff ffbe 	bl	80010f8 <BSP_LCD_GetYSize>
 800117c:	4603      	mov	r3, r0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800118a:	f004 f817 	bl	80051bc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	4911      	ldr	r1, [pc, #68]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3304      	adds	r3, #4
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	490c      	ldr	r1, [pc, #48]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80011b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3740      	adds	r7, #64	; 0x40
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200004a4 	.word	0x200004a4
 80011d8:	20000270 	.word	0x20000270
 80011dc:	20000000 	.word	0x20000000

080011e0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <BSP_LCD_SelectLayer+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
} 
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000026c 	.word	0x2000026c

08001200 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <BSP_LCD_SetTextColor+0x28>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <BSP_LCD_SetTextColor+0x2c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	2000026c 	.word	0x2000026c
 800122c:	20000270 	.word	0x20000270

08001230 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <BSP_LCD_SetBackColor+0x2c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4908      	ldr	r1, [pc, #32]	; (8001260 <BSP_LCD_SetBackColor+0x30>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3304      	adds	r3, #4
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000026c 	.word	0x2000026c
 8001260:	20000270 	.word	0x20000270

08001264 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <BSP_LCD_SetFont+0x2c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <BSP_LCD_SetFont+0x30>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	3308      	adds	r3, #8
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2000026c 	.word	0x2000026c
 8001294:	20000270 	.word	0x20000270

08001298 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <BSP_LCD_GetFont+0x24>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <BSP_LCD_GetFont+0x28>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	3308      	adds	r3, #8
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000026c 	.word	0x2000026c
 80012c0:	20000270 	.word	0x20000270

080012c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <BSP_LCD_Clear+0x48>)
 80012ce:	681c      	ldr	r4, [r3, #0]
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <BSP_LCD_Clear+0x48>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <BSP_LCD_Clear+0x4c>)
 80012d6:	2134      	movs	r1, #52	; 0x34
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	335c      	adds	r3, #92	; 0x5c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461d      	mov	r5, r3
 80012e4:	f7ff fef4 	bl	80010d0 <BSP_LCD_GetXSize>
 80012e8:	4606      	mov	r6, r0
 80012ea:	f7ff ff05 	bl	80010f8 <BSP_LCD_GetYSize>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	4632      	mov	r2, r6
 80012fc:	4629      	mov	r1, r5
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fc1a 	bl	8001b38 <LL_FillBuffer>
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	2000026c 	.word	0x2000026c
 8001310:	200004a4 	.word	0x200004a4

08001314 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	492d      	ldr	r1, [pc, #180]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800133a:	460b      	mov	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4403      	add	r3, r0
 8001344:	3304      	adds	r3, #4
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4403      	add	r3, r0
 8001354:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	491f      	ldr	r1, [pc, #124]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	88da      	ldrh	r2, [r3, #6]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	fb12 f303 	smulbb	r3, r2, r3
 8001374:	b29c      	uxth	r4, r3
 8001376:	f7ff feab 	bl	80010d0 <BSP_LCD_GetXSize>
 800137a:	4603      	mov	r3, r0
 800137c:	b298      	uxth	r0, r3
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4915      	ldr	r1, [pc, #84]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3308      	adds	r3, #8
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	4602      	mov	r2, r0
 8001396:	4621      	mov	r1, r4
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f987 	bl	80016ac <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff1b 	bl	8001200 <BSP_LCD_SetTextColor>
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000026c 	.word	0x2000026c
 80013d8:	20000270 	.word	0x20000270

080013dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	460b      	mov	r3, r1
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3308      	adds	r3, #8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4c14      	ldr	r4, [pc, #80]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4423      	add	r3, r4
 800141a:	3308      	adds	r3, #8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001420:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4423      	add	r3, r4
 8001434:	3308      	adds	r3, #8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	3307      	adds	r3, #7
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <BSP_LCD_DisplayChar+0x66>
 8001440:	3307      	adds	r3, #7
 8001442:	10db      	asrs	r3, r3, #3
 8001444:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001448:	18ca      	adds	r2, r1, r3
 800144a:	88b9      	ldrh	r1, [r7, #4]
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 faba 	bl	80019c8 <DrawChar>
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	2000026c 	.word	0x2000026c
 8001460:	20000270 	.word	0x20000270

08001464 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	460b      	mov	r3, r1
 8001474:	81bb      	strh	r3, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800147a:	2301      	movs	r3, #1
 800147c:	83fb      	strh	r3, [r7, #30]
 800147e:	2300      	movs	r3, #0
 8001480:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800148e:	e002      	b.n	8001496 <BSP_LCD_DisplayStringAt+0x32>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3301      	adds	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	617a      	str	r2, [r7, #20]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f6      	bne.n	8001490 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80014a2:	f7ff fe15 	bl	80010d0 <BSP_LCD_GetXSize>
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	494f      	ldr	r1, [pc, #316]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3308      	adds	r3, #8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01c      	beq.n	8001502 <BSP_LCD_DisplayStringAt+0x9e>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <BSP_LCD_DisplayStringAt+0x98>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12e      	bne.n	800152e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4843      	ldr	r0, [pc, #268]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	3308      	adds	r3, #8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	fb03 f301 	mul.w	r3, r3, r1
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	4413      	add	r3, r2
 80014f8:	83fb      	strh	r3, [r7, #30]
      break;
 80014fa:	e01b      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001500:	e018      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b299      	uxth	r1, r3
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4836      	ldr	r0, [pc, #216]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3308      	adds	r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	fb11 f303 	smulbb	r3, r1, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	83fb      	strh	r3, [r7, #30]
      break;
 800152c:	e002      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	83fb      	strh	r3, [r7, #30]
      break;
 8001532:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <BSP_LCD_DisplayStringAt+0xde>
 800153a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da1d      	bge.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001546:	e01a      	b.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	89b9      	ldrh	r1, [r7, #12]
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff43 	bl	80013dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4923      	ldr	r1, [pc, #140]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	889a      	ldrh	r2, [r3, #4]
 800156c:	8bfb      	ldrh	r3, [r7, #30]
 800156e:	4413      	add	r3, r2
 8001570:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
    i++;
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	3301      	adds	r3, #1
 800157c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2dc      	uxtb	r4, r3
 800158c:	f7ff fda0 	bl	80010d0 <BSP_LCD_GetXSize>
 8001590:	4605      	mov	r5, r0
 8001592:	8bb9      	ldrh	r1, [r7, #28]
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4403      	add	r3, r0
 80015a4:	3308      	adds	r3, #8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	fb03 f301 	mul.w	r3, r3, r1
 80015ae:	1aeb      	subs	r3, r5, r3
 80015b0:	b299      	uxth	r1, r3
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3308      	adds	r3, #8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	4299      	cmp	r1, r3
 80015ca:	bf2c      	ite	cs
 80015cc:	2301      	movcs	r3, #1
 80015ce:	2300      	movcc	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4023      	ands	r3, r4
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1b6      	bne.n	8001548 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000026c 	.word	0x2000026c
 80015e8:	20000270 	.word	0x20000270

080015ec <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015f8:	f7ff fe4e 	bl	8001298 <BSP_LCD_GetFont>
 80015fc:	4603      	mov	r3, r0
 80015fe:	88db      	ldrh	r3, [r3, #6]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	fb12 f303 	smulbb	r3, r2, r3
 8001606:	b299      	uxth	r1, r3
 8001608:	2303      	movs	r3, #3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff29 	bl	8001464 <BSP_LCD_DisplayStringAt>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	460b      	mov	r3, r1
 800162a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001632:	2134      	movs	r1, #52	; 0x34
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3348      	adds	r3, #72	; 0x48
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d116      	bne.n	8001670 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001648:	2134      	movs	r1, #52	; 0x34
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	335c      	adds	r3, #92	; 0x5c
 8001652:	681c      	ldr	r4, [r3, #0]
 8001654:	88bd      	ldrh	r5, [r7, #4]
 8001656:	f7ff fd3b 	bl	80010d0 <BSP_LCD_GetXSize>
 800165a:	4603      	mov	r3, r0
 800165c:	fb03 f205 	mul.w	r2, r3, r5
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4423      	add	r3, r4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b292      	uxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800166e:	e015      	b.n	800169c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001676:	2134      	movs	r1, #52	; 0x34
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	335c      	adds	r3, #92	; 0x5c
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	88bd      	ldrh	r5, [r7, #4]
 8001684:	f7ff fd24 	bl	80010d0 <BSP_LCD_GetXSize>
 8001688:	4603      	mov	r3, r0
 800168a:	fb03 f205 	mul.w	r2, r3, r5
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4423      	add	r3, r4
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	2000026c 	.word	0x2000026c
 80016a8:	200004a4 	.word	0x200004a4

080016ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <BSP_LCD_FillRect+0xec>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd8c 	bl	8001200 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2b      	ldr	r2, [pc, #172]	; (800179c <BSP_LCD_FillRect+0xf0>)
 80016ee:	2134      	movs	r1, #52	; 0x34
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3348      	adds	r3, #72	; 0x48
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d114      	bne.n	8001728 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <BSP_LCD_FillRect+0xf0>)
 8001704:	2134      	movs	r1, #52	; 0x34
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	335c      	adds	r3, #92	; 0x5c
 800170e:	681c      	ldr	r4, [r3, #0]
 8001710:	f7ff fcde 	bl	80010d0 <BSP_LCD_GetXSize>
 8001714:	4602      	mov	r2, r0
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	fb03 f202 	mul.w	r2, r3, r2
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4423      	add	r3, r4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e013      	b.n	8001750 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <BSP_LCD_FillRect+0xf0>)
 800172e:	2134      	movs	r1, #52	; 0x34
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	335c      	adds	r3, #92	; 0x5c
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	f7ff fcc9 	bl	80010d0 <BSP_LCD_GetXSize>
 800173e:	4602      	mov	r2, r0
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4423      	add	r3, r4
 800174e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	68fd      	ldr	r5, [r7, #12]
 8001756:	887e      	ldrh	r6, [r7, #2]
 8001758:	f8b7 8000 	ldrh.w	r8, [r7]
 800175c:	f7ff fcb8 	bl	80010d0 <BSP_LCD_GetXSize>
 8001760:	4602      	mov	r2, r0
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	1ad1      	subs	r1, r2, r3
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <BSP_LCD_FillRect+0xec>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	9100      	str	r1, [sp, #0]
 800177c:	4643      	mov	r3, r8
 800177e:	4632      	mov	r2, r6
 8001780:	4629      	mov	r1, r5
 8001782:	4620      	mov	r0, r4
 8001784:	f000 f9d8 	bl	8001b38 <LL_FillBuffer>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001792:	bf00      	nop
 8001794:	2000026c 	.word	0x2000026c
 8001798:	20000270 	.word	0x20000270
 800179c:	200004a4 	.word	0x200004a4

080017a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	6992      	ldr	r2, [r2, #24]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <BSP_LCD_DisplayOn+0x34>)
 80017bc:	f001 feba 	bl	8003534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80017c0:	2201      	movs	r2, #1
 80017c2:	2108      	movs	r1, #8
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <BSP_LCD_DisplayOn+0x38>)
 80017c6:	f001 feb5 	bl	8003534 <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200004a4 	.word	0x200004a4
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40022800 	.word	0x40022800

080017dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017e6:	4a64      	ldr	r2, [pc, #400]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	4a52      	ldr	r2, [pc, #328]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001876:	4a40      	ldr	r2, [pc, #256]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800188e:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80018be:	2310      	movs	r3, #16
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80018ce:	230e      	movs	r3, #14
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <BSP_LCD_MspInit+0x1a0>)
 80018da:	f001 fc81 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80018e8:	2309      	movs	r3, #9
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <BSP_LCD_MspInit+0x1a4>)
 80018f4:	f001 fc74 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80018f8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001902:	230e      	movs	r3, #14
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 800190e:	f001 fc67 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001912:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800191c:	230e      	movs	r3, #14
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <BSP_LCD_MspInit+0x1ac>)
 8001928:	f001 fc5a 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800192c:	23f7      	movs	r3, #247	; 0xf7
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001934:	230e      	movs	r3, #14
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 8001940:	f001 fc4e 	bl	80031e0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 8001956:	f001 fc43 	bl	80031e0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 800196a:	f001 fc39 	bl	80031e0 <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	; 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40021800 	.word	0x40021800
 8001984:	40022000 	.word	0x40022000
 8001988:	40022400 	.word	0x40022400
 800198c:	40022800 	.word	0x40022800

08001990 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 800199c:	2208      	movs	r2, #8
 800199e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a2:	22c0      	movs	r2, #192	; 0xc0
 80019a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a8:	2205      	movs	r2, #5
 80019aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019b6:	f004 fab9 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000288 	.word	0x20000288

080019c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <DrawChar+0x168>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4953      	ldr	r1, [pc, #332]	; (8001b34 <DrawChar+0x16c>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	88db      	ldrh	r3, [r3, #6]
 80019f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <DrawChar+0x168>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <DrawChar+0x16c>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001a10:	8a3b      	ldrh	r3, [r7, #16]
 8001a12:	3307      	adds	r3, #7
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da00      	bge.n	8001a1a <DrawChar+0x52>
 8001a18:	3307      	adds	r3, #7
 8001a1a:	10db      	asrs	r3, r3, #3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	8a3b      	ldrh	r3, [r7, #16]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e076      	b.n	8001b1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a30:	8a3b      	ldrh	r3, [r7, #16]
 8001a32:	3307      	adds	r3, #7
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da00      	bge.n	8001a3a <DrawChar+0x72>
 8001a38:	3307      	adds	r3, #7
 8001a3a:	10db      	asrs	r3, r3, #3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fb03 f302 	mul.w	r3, r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001a4a:	8a3b      	ldrh	r3, [r7, #16]
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da00      	bge.n	8001a54 <DrawChar+0x8c>
 8001a52:	3307      	adds	r3, #7
 8001a54:	10db      	asrs	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <DrawChar+0x98>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <DrawChar+0xa0>
 8001a5e:	e00c      	b.n	8001a7a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	617b      	str	r3, [r7, #20]
      break;
 8001a66:	e016      	b.n	8001a96 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	3201      	adds	r2, #1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
      break;
 8001a78:	e00d      	b.n	8001a96 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	3202      	adds	r2, #2
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e036      	b.n	8001b0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001a9c:	8a3a      	ldrh	r2, [r7, #16]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <DrawChar+0x168>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <DrawChar+0x16c>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fda0 	bl	800161c <BSP_LCD_DrawPixel>
 8001adc:	e012      	b.n	8001b04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <DrawChar+0x168>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4911      	ldr	r1, [pc, #68]	; (8001b34 <DrawChar+0x16c>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fd8c 	bl	800161c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	8a3a      	ldrh	r2, [r7, #16]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8c4      	bhi.n	8001a9c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	8a7a      	ldrh	r2, [r7, #18]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d884      	bhi.n	8001a30 <DrawChar+0x68>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000026c 	.word	0x2000026c
 8001b34:	20000270 	.word	0x20000270

08001b38 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b4c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <LL_FillBuffer+0x8c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <LL_FillBuffer+0x90>)
 8001b54:	2134      	movs	r1, #52	; 0x34
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3348      	adds	r3, #72	; 0x48
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d103      	bne.n	8001b6c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	e002      	b.n	8001b72 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <LL_FillBuffer+0x94>)
 8001b7c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b80:	f001 f896 	bl	8002cb0 <HAL_DMA2D_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b8e:	f001 f9ed 	bl	8002f6c <HAL_DMA2D_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10e      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001ba4:	f001 f8ce 	bl	8002d44 <HAL_DMA2D_Start>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001bae:	210a      	movs	r1, #10
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001bb2:	f001 f8f2 	bl	8002d9a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000022c 	.word	0x2000022c
 8001bc4:	2000026c 	.word	0x2000026c
 8001bc8:	200004a4 	.word	0x200004a4
 8001bcc:	4002b000 	.word	0x4002b000

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fc3b 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f011 fcd4 	bl	80135a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f011 fa2a 	bl	8013050 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	2000054c 	.word	0x2000054c

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000054c 	.word	0x2000054c

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_Delay+0x40>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3f7      	bcc.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000010 	.word	0x20000010

08001c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e031      	b.n	8001d06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f011 f9fb 	bl	80130b4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_ADC_Init+0x84>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa02 	bl	80020e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	ffffeefd 	.word	0xffffeefd

08001d14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x1a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e085      	b.n	8001e3a <HAL_ADC_Start+0x126>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d018      	beq.n	8001d76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6892      	ldr	r2, [r2, #8]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_ADC_Start+0x134>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <HAL_ADC_Start+0x138>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9a      	lsrs	r2, r3, #18
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d059      	beq.n	8001e38 <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_ADC_Start+0x13c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_ADC_Start+0x140>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11c      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	6892      	ldr	r2, [r2, #8]
 8001e08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e013      	b.n	8001e38 <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_ADC_Start+0x144>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_Start+0x124>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	6892      	ldr	r2, [r2, #8]
 8001e32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e36:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000003c 	.word	0x2000003c
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	fffff8fe 	.word	0xfffff8fe
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000

08001e5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e117      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x24c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d936      	bls.n	8001f12 <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d10a      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68d1      	ldr	r1, [r2, #12]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	0612      	lsls	r2, r2, #24
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	e037      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461c      	mov	r4, r3
 8001f00:	4623      	mov	r3, r4
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4423      	add	r3, r4
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f303 	lsl.w	r3, r0, r3
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	e023      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	400b      	ands	r3, r1
 8001f34:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4423      	add	r3, r4
 8001f52:	fa00 f303 	lsl.w	r3, r0, r3
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d824      	bhi.n	8001fac <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b05      	subs	r3, #5
 8001f78:	221f      	movs	r2, #31
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4003      	ands	r3, r0
 8001f82:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461c      	mov	r4, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b05      	subs	r3, #5
 8001fa2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8001faa:	e04c      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d824      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b23      	subs	r3, #35	; 0x23
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b23      	subs	r3, #35	; 0x23
 8001ff4:	fa04 f303 	lsl.w	r3, r4, r3
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	630b      	str	r3, [r1, #48]	; 0x30
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4003      	ands	r3, r0
 800201e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461c      	mov	r4, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b41      	subs	r3, #65	; 0x41
 800203e:	fa04 f303 	lsl.w	r3, r4, r3
 8002042:	4303      	orrs	r3, r0
 8002044:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d109      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002062:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d125      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <HAL_ADC_ConfigChannel+0x208>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b11      	cmp	r3, #17
 800207e:	d11c      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d111      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x264>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x268>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	0c9a      	lsrs	r2, r3, #18
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc90      	pop	{r4, r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	10000012 	.word	0x10000012
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40012300 	.word	0x40012300
 80020dc:	2000003c 	.word	0x2000003c
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020ee:	4b77      	ldr	r3, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	4974      	ldr	r1, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6851      	ldr	r1, [r2, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6912      	ldr	r2, [r2, #16]
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	6852      	ldr	r2, [r2, #4]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	6851      	ldr	r1, [r2, #4]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6892      	ldr	r2, [r2, #8]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6891      	ldr	r1, [r2, #8]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <ADC_Init+0x1ec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6891      	ldr	r1, [r2, #8]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6891      	ldr	r1, [r2, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	6892      	ldr	r2, [r2, #8]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	6892      	ldr	r2, [r2, #8]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	6891      	ldr	r1, [r2, #8]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6992      	ldr	r2, [r2, #24]
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01b      	beq.n	8002242 <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6852      	ldr	r2, [r2, #4]
 8002214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002228:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6851      	ldr	r1, [r2, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	3a01      	subs	r2, #1
 800223a:	0352      	lsls	r2, r2, #13
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	e007      	b.n	8002252 <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800225c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	69d2      	ldr	r2, [r2, #28]
 8002270:	3a01      	subs	r2, #1
 8002272:	0512      	lsls	r2, r2, #20
 8002274:	430a      	orrs	r2, r1
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6891      	ldr	r1, [r2, #8]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002296:	0252      	lsls	r2, r2, #9
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6891      	ldr	r1, [r2, #8]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6952      	ldr	r2, [r2, #20]
 80022ba:	0292      	lsls	r2, r2, #10
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <NVIC_SetPriorityGrouping+0x44>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0000 	.word	0x05fa0000

0800231c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002342:	4909      	ldr	r1, [pc, #36]	; (8002368 <NVIC_EnableIRQ+0x30>)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0b      	bge.n	8002398 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <NVIC_SetPriority+0x4c>)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	3b04      	subs	r3, #4
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002396:	e009      	b.n	80023ac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	4908      	ldr	r1, [pc, #32]	; (80023bc <NVIC_SetPriority+0x50>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	2201      	movs	r2, #1
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	401a      	ands	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002406:	2101      	movs	r1, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	1e59      	subs	r1, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff90 	bl	800236c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff2f 	bl	80022d4 <NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff44 	bl	800231c <NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff90 	bl	80023c0 <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5f 	bl	800236c <NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff37 	bl	8002338 <NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d106      	bne.n	8002508 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002506:	e005      	b.n	8002514 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e054      	b.n	80025e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7f5b      	ldrb	r3, [r3, #29]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f010 fe28 	bl	801319c <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	791b      	ldrb	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <HAL_CRC_Init+0xc4>)
 8002560:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	f022 0218 	bic.w	r2, r2, #24
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	e00c      	b.n	800258e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	461a      	mov	r2, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f834 	bl	80025ec <HAL_CRCEx_Polynomial_Set>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e028      	b.n	80025e0 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	795b      	ldrb	r3, [r3, #5]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	e004      	b.n	80025ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6912      	ldr	r2, [r2, #16]
 80025aa:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6952      	ldr	r2, [r2, #20]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6992      	ldr	r2, [r2, #24]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	04c11db7 	.word	0x04c11db7

080025ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80025f8:	231f      	movs	r3, #31
 80025fa:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 80025fc:	bf00      	nop
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <HAL_CRCEx_Polynomial_Set+0x2c>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	617a      	str	r2, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f2      	bne.n	80025fe <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b18      	cmp	r3, #24
 800261c:	d843      	bhi.n	80026a6 <HAL_CRCEx_Polynomial_Set+0xba>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <HAL_CRCEx_Polynomial_Set+0x38>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	080026a7 	.word	0x080026a7
 8002628:	080026a7 	.word	0x080026a7
 800262c:	080026a7 	.word	0x080026a7
 8002630:	080026a7 	.word	0x080026a7
 8002634:	080026a7 	.word	0x080026a7
 8002638:	080026a7 	.word	0x080026a7
 800263c:	080026a7 	.word	0x080026a7
 8002640:	080026a7 	.word	0x080026a7
 8002644:	0800269d 	.word	0x0800269d
 8002648:	080026a7 	.word	0x080026a7
 800264c:	080026a7 	.word	0x080026a7
 8002650:	080026a7 	.word	0x080026a7
 8002654:	080026a7 	.word	0x080026a7
 8002658:	080026a7 	.word	0x080026a7
 800265c:	080026a7 	.word	0x080026a7
 8002660:	080026a7 	.word	0x080026a7
 8002664:	08002693 	.word	0x08002693
 8002668:	080026a7 	.word	0x080026a7
 800266c:	080026a7 	.word	0x080026a7
 8002670:	080026a7 	.word	0x080026a7
 8002674:	080026a7 	.word	0x080026a7
 8002678:	080026a7 	.word	0x080026a7
 800267c:	080026a7 	.word	0x080026a7
 8002680:	080026a7 	.word	0x080026a7
 8002684:	08002689 	.word	0x08002689
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d90d      	bls.n	80026aa <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01f      	b.n	80026d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b07      	cmp	r3, #7
 8002696:	d90a      	bls.n	80026ae <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e01a      	b.n	80026d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	d907      	bls.n	80026b2 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e015      	b.n	80026d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 80026a6:	bf00      	nop
 80026a8:	e004      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026b2:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	6892      	ldr	r2, [r2, #8]
 80026c6:	f022 0118 	bic.w	r1, r2, #24
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff faa0 	bl	8001c30 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e099      	b.n	8002830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e00f      	b.n	800273e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff fa87 	bl	8001c30 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d908      	bls.n	800273e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e078      	b.n	8002830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e8      	bne.n	800271e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_DMA_Init+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4313      	orrs	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d117      	bne.n	8002802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f9e9 	bl	8002bbc <DMA_CheckFifoParam>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027fe:	2301      	movs	r3, #1
 8002800:	e016      	b.n	8002830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9a0 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 8002810:	4603      	mov	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	f010803f 	.word	0xf010803f

0800283c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002848:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <HAL_DMA_IRQHandler+0x258>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a92      	ldr	r2, [pc, #584]	; (8002a98 <HAL_DMA_IRQHandler+0x25c>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2208      	movs	r2, #8
 8002868:	409a      	lsls	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01a      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	f022 0204 	bic.w	r2, r2, #4
 800288e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2208      	movs	r2, #8
 8002896:	409a      	lsls	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	2201      	movs	r2, #1
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	2201      	movs	r2, #1
 80028cc:	409a      	lsls	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2204      	movs	r2, #4
 80028e4:	409a      	lsls	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2204      	movs	r2, #4
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0204 	orr.w	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2210      	movs	r2, #16
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d043      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d03c      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2210      	movs	r2, #16
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d018      	beq.n	800297e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d024      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
 800296a:	e01f      	b.n	80029ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
 800297c:	e016      	b.n	80029ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	f022 0208 	bic.w	r2, r2, #8
 800299a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2220      	movs	r2, #32
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 808e 	beq.w	8002ada <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8086 	beq.w	8002ada <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2220      	movs	r2, #32
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d136      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	f022 0216 	bic.w	r2, r2, #22
 80029f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	6952      	ldr	r2, [r2, #20]
 8002a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <HAL_DMA_IRQHandler+0x1da>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	f022 0208 	bic.w	r2, r2, #8
 8002a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	223f      	movs	r2, #63	; 0x3f
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d07d      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
        }
        return;
 8002a52:	e078      	b.n	8002b46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01c      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d108      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d030      	beq.n	8002ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
 8002a80:	e02b      	b.n	8002ada <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d027      	beq.n	8002ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e022      	b.n	8002ada <HAL_DMA_IRQHandler+0x29e>
 8002a94:	2000003c 	.word	0x2000003c
 8002a98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	f022 0210 	bic.w	r2, r2, #16
 8002ab8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d032      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d022      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2205      	movs	r2, #5
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d807      	bhi.n	8002b22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f2      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x2ca>
 8002b20:	e000      	b.n	8002b24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b46:	bf00      	nop
    }
  }
}
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop

08002b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3b10      	subs	r3, #16
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <DMA_CalcBaseAndBitshift+0x60>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d908      	bls.n	8002b90 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	1d1a      	adds	r2, r3, #4
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b8e:	e006      	b.n	8002b9e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	aaaaaaab 	.word	0xaaaaaaab
 8002bb4:	08019b78 	.word	0x08019b78
 8002bb8:	fffffc00 	.word	0xfffffc00

08002bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d11f      	bne.n	8002c16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d855      	bhi.n	8002c88 <DMA_CheckFifoParam+0xcc>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <DMA_CheckFifoParam+0x28>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c07 	.word	0x08002c07
 8002bec:	08002bf5 	.word	0x08002bf5
 8002bf0:	08002c89 	.word	0x08002c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d045      	beq.n	8002c8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e042      	b.n	8002c8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c0e:	d13f      	bne.n	8002c90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c14:	e03c      	b.n	8002c90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	d121      	bne.n	8002c64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d836      	bhi.n	8002c94 <DMA_CheckFifoParam+0xd8>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <DMA_CheckFifoParam+0x70>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c43 	.word	0x08002c43
 8002c34:	08002c3d 	.word	0x08002c3d
 8002c38:	08002c55 	.word	0x08002c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e02f      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d024      	beq.n	8002c98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c52:	e021      	b.n	8002c98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c5c:	d11e      	bne.n	8002c9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c62:	e01b      	b.n	8002c9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <DMA_CheckFifoParam+0xb4>
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d003      	beq.n	8002c76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c6e:	e018      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e015      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00e      	beq.n	8002ca0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      break;
 8002c86:	e00b      	b.n	8002ca0 <DMA_CheckFifoParam+0xe4>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e00a      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e008      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c90:	bf00      	nop
 8002c92:	e006      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c94:	bf00      	nop
 8002c96:	e004      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e002      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ca0:	bf00      	nop
    }
  } 
  
  return status; 
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e039      	b.n	8002d36 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f010 fa80 	bl	80131dc <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6852      	ldr	r2, [r2, #4]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d04:	f022 0107 	bic.w	r1, r2, #7
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_DMA2D_Init+0x90>)
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68c9      	ldr	r1, [r1, #12]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	ffffc000 	.word	0xffffc000

08002d44 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA2D_Start+0x1c>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e018      	b.n	8002d92 <HAL_DMA2D_Start+0x4e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f98a 	bl	8003094 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d056      	beq.n	8002e68 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002dba:	f7fe ff39 	bl	8001c30 <HAL_GetTick>
 8002dbe:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002dc0:	e04b      	b.n	8002e5a <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d023      	beq.n	8002e1c <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	f043 0202 	orr.w	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2221      	movs	r2, #33	; 0x21
 8002e06:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0a2      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d01a      	beq.n	8002e5a <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_DMA2D_PollForTransfer+0xa0>
 8002e2a:	f7fe ff01 	bl	8001c30 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad2      	subs	r2, r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d90f      	bls.n	8002e5a <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e083      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ac      	beq.n	8002dc2 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d061      	beq.n	8002f48 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e84:	f7fe fed4 	bl	8001c30 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002e8a:	e056      	b.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d02e      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	f043 0204 	orr.w	r2, r3, #4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2229      	movs	r2, #41	; 0x29
 8002ee6:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2204      	movs	r2, #4
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e032      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d01a      	beq.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_DMA2D_PollForTransfer+0x180>
 8002f0a:	f7fe fe91 	bl	8001c30 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad2      	subs	r2, r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90f      	bls.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e013      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0a1      	beq.n	8002e8c <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2212      	movs	r2, #18
 8002f4e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	3318      	adds	r3, #24
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA2D_ConfigLayer+0x34>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e071      	b.n	8003084 <HAL_DMA2D_ConfigLayer+0x118>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_DMA2D_ConfigLayer+0x124>)
 8002fc0:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b0a      	cmp	r3, #10
 8002fc8:	d003      	beq.n	8002fd2 <HAL_DMA2D_ConfigLayer+0x66>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b09      	cmp	r3, #9
 8002fd0:	d107      	bne.n	8002fe2 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e005      	b.n	8002fee <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11f      	bne.n	8003034 <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	43d2      	mvns	r2, r2
 8003002:	4011      	ands	r1, r2
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	430a      	orrs	r2, r1
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b0a      	cmp	r3, #10
 800301a:	d003      	beq.n	8003024 <HAL_DMA2D_ConfigLayer+0xb8>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d126      	bne.n	8003072 <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	68d2      	ldr	r2, [r2, #12]
 800302c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
 8003032:	e01e      	b.n	8003072 <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	69d1      	ldr	r1, [r2, #28]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	43d2      	mvns	r2, r2
 8003042:	4011      	ands	r1, r2
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	430a      	orrs	r2, r1
 8003048:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b0a      	cmp	r3, #10
 800305a:	d003      	beq.n	8003064 <HAL_DMA2D_ConfigLayer+0xf8>
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b09      	cmp	r3, #9
 8003062:	d106      	bne.n	8003072 <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68d2      	ldr	r2, [r2, #12]
 800306c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003070:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	ff03000f 	.word	0xff03000f

08003094 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8003094:	b480      	push	{r7}
 8003096:	b08b      	sub	sp, #44	; 0x2c
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030c0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	0410      	lsls	r0, r2, #16
 80030c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ca:	4302      	orrs	r2, r0
 80030cc:	430a      	orrs	r2, r1
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e0:	d174      	bne.n	80031cc <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d108      	bne.n	800311a <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	431a      	orrs	r2, r3
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	e053      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	431a      	orrs	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e048      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d111      	bne.n	800315c <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	0cdb      	lsrs	r3, r3, #19
 800313c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	0a9b      	lsrs	r3, r3, #10
 8003142:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	08db      	lsrs	r3, r3, #3
 8003148:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	02db      	lsls	r3, r3, #11
 8003152:	431a      	orrs	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	e032      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d117      	bne.n	8003194 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	0fdb      	lsrs	r3, r3, #31
 8003168:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	0cdb      	lsrs	r3, r3, #19
 800316e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	029b      	lsls	r3, r3, #10
 8003184:	431a      	orrs	r2, r3
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	03db      	lsls	r3, r3, #15
 800318a:	431a      	orrs	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	e016      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	0f1b      	lsrs	r3, r3, #28
 8003198:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	0d1b      	lsrs	r3, r3, #20
 800319e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	0b1b      	lsrs	r3, r3, #12
 80031a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	011a      	lsls	r2, r3, #4
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	431a      	orrs	r2, r3
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	031b      	lsls	r3, r3, #12
 80031ba:	431a      	orrs	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031ca:	e003      	b.n	80031d4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	60da      	str	r2, [r3, #12]
}
 80031d4:	bf00      	nop
 80031d6:	372c      	adds	r7, #44	; 0x2c
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e175      	b.n	80034ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8164 	bne.w	80034e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x4e>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b12      	cmp	r3, #18
 800322c:	d123      	bne.n	8003276 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d00b      	beq.n	80032ca <HAL_GPIO_Init+0xea>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032be:	2b11      	cmp	r3, #17
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b12      	cmp	r3, #18
 80032c8:	d130      	bne.n	800332c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 0201 	and.w	r2, r3, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80be 	beq.w	80034e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_GPIO_Init+0x320>)
 800336c:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_GPIO_Init+0x320>)
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b62      	ldr	r3, [pc, #392]	; (8003500 <HAL_GPIO_Init+0x320>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003382:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_GPIO_Init+0x324>)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_GPIO_Init+0x328>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d037      	beq.n	800341e <HAL_GPIO_Init+0x23e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_GPIO_Init+0x32c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d031      	beq.n	800341a <HAL_GPIO_Init+0x23a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a55      	ldr	r2, [pc, #340]	; (8003510 <HAL_GPIO_Init+0x330>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <HAL_GPIO_Init+0x236>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_GPIO_Init+0x334>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x232>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a53      	ldr	r2, [pc, #332]	; (8003518 <HAL_GPIO_Init+0x338>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x22e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_GPIO_Init+0x33c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x22a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_GPIO_Init+0x340>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x226>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_GPIO_Init+0x344>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x222>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	; (8003528 <HAL_GPIO_Init+0x348>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x21e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4e      	ldr	r2, [pc, #312]	; (800352c <HAL_GPIO_Init+0x34c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x21a>
 80033f6:	2309      	movs	r3, #9
 80033f8:	e012      	b.n	8003420 <HAL_GPIO_Init+0x240>
 80033fa:	230a      	movs	r3, #10
 80033fc:	e010      	b.n	8003420 <HAL_GPIO_Init+0x240>
 80033fe:	2308      	movs	r3, #8
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003402:	2307      	movs	r3, #7
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003430:	4934      	ldr	r1, [pc, #208]	; (8003504 <HAL_GPIO_Init+0x324>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_GPIO_Init+0x350>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <HAL_GPIO_Init+0x350>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_GPIO_Init+0x350>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <HAL_GPIO_Init+0x350>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_GPIO_Init+0x350>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_GPIO_Init+0x350>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_GPIO_Init+0x350>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_GPIO_Init+0x350>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f ae86 	bls.w	8003200 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	; 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40022000 	.word	0x40022000
 800352c:	40022400 	.word	0x40022400
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003568:	b08d      	sub	sp, #52	; 0x34
 800356a:	af0a      	add	r7, sp, #40	; 0x28
 800356c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e03e      	b.n	80035f6 <HAL_HCD_Init+0x90>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2203      	movs	r2, #3
 800357c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f010 f903 	bl	801378c <HAL_HCD_MspInit>

  /* Disable the Interrupts */
 __HAL_HCD_DISABLE(hhcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f004 fc6f 	bl	8007e6e <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	687e      	ldr	r6, [r7, #4]
 8003598:	466d      	mov	r5, sp
 800359a:	f106 0410 	add.w	r4, r6, #16
 800359e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ae:	1d33      	adds	r3, r6, #4
 80035b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	f004 fbf8 	bl	8007da8 <USB_CoreInit>

 /* Force Host Mode*/
 USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 fc66 	bl	8007e90 <USB_SetCurrentMode>

 /* Init Host */
 USB_HostInit(hhcd->Instance, hhcd->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	687e      	ldr	r6, [r7, #4]
 80035cc:	466d      	mov	r5, sp
 80035ce:	f106 0410 	add.w	r4, r6, #16
 80035d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035de:	e885 0003 	stmia.w	r5, {r0, r1}
 80035e2:	1d33      	adds	r3, r6, #4
 80035e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f004 fd7c 	bl	80080e4 <USB_HostInit>

 hhcd->State= HAL_HCD_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

 return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035fe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80035fe:	b590      	push	{r4, r7, lr}
 8003600:	b089      	sub	sp, #36	; 0x24
 8003602:	af04      	add	r7, sp, #16
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	4608      	mov	r0, r1
 8003608:	4611      	mov	r1, r2
 800360a:	461a      	mov	r2, r3
 800360c:	4603      	mov	r3, r0
 800360e:	70fb      	strb	r3, [r7, #3]
 8003610:	460b      	mov	r3, r1
 8003612:	70bb      	strb	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_HCD_HC_Init+0x2c>
 8003626:	2302      	movs	r3, #2
 8003628:	e076      	b.n	8003718 <HAL_HCD_HC_Init+0x11a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hhcd->hc[ch_num].do_ping = 0;
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	333d      	adds	r3, #61	; 0x3d
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3338      	adds	r3, #56	; 0x38
 8003656:	787a      	ldrb	r2, [r7, #1]
 8003658:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	3340      	adds	r3, #64	; 0x40
 800366a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800366c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	3339      	adds	r3, #57	; 0x39
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	333f      	adds	r3, #63	; 0x3f
 8003692:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	78bb      	ldrb	r3, [r7, #2]
 800369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a0:	b2d8      	uxtb	r0, r3
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	333a      	adds	r3, #58	; 0x3a
 80036b0:	4602      	mov	r2, r0
 80036b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	09db      	lsrs	r3, r3, #7
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	333b      	adds	r3, #59	; 0x3b
 80036d0:	4602      	mov	r2, r0
 80036d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	333c      	adds	r3, #60	; 0x3c
 80036e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	787c      	ldrb	r4, [r7, #1]
 80036f0:	78ba      	ldrb	r2, [r7, #2]
 80036f2:	78f9      	ldrb	r1, [r7, #3]
 80036f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4623      	mov	r3, r4
 8003706:	f004 fe49 	bl	800839c <USB_HC_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}

08003720 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_HCD_HC_Halt+0x1e>
 800373a:	2302      	movs	r3, #2
 800373c:	e00f      	b.n	800375e <HAL_HCD_HC_Halt+0x3e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f005 f883 	bl	800885a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_HCD_HC_SubmitRequest>:
                                            uint8_t ep_type,
                                            uint8_t token,
                                            uint8_t* pbuff,
                                            uint16_t length,
                                            uint8_t do_ping)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	70fb      	strb	r3, [r7, #3]
 800377a:	460b      	mov	r3, r1
 800377c:	70bb      	strb	r3, [r7, #2]
 800377e:	4613      	mov	r3, r2
 8003780:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	333b      	adds	r3, #59	; 0x3b
 8003792:	78ba      	ldrb	r2, [r7, #2]
 8003794:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	333f      	adds	r3, #63	; 0x3f
 80037a6:	787a      	ldrb	r2, [r7, #1]
 80037a8:	701a      	strb	r2, [r3, #0]

  if(token == 0)
 80037aa:	7c3b      	ldrb	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	3342      	adds	r3, #66	; 0x42
 80037c0:	2203      	movs	r2, #3
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e009      	b.n	80037da <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	440b      	add	r3, r1
 80037d4:	3342      	adds	r3, #66	; 0x42
 80037d6:	2202      	movs	r2, #2
 80037d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch(ep_type)
 80037da:	787b      	ldrb	r3, [r7, #1]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	f200 80d7 	bhi.w	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_HCD_HC_SubmitRequest+0x80>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	08003979 	.word	0x08003979
 80037f0:	08003865 	.word	0x08003865
 80037f4:	080038ef 	.word	0x080038ef
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 80037f8:	7c3b      	ldrb	r3, [r7, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 80c7 	bne.w	800398e <HAL_HCD_HC_SubmitRequest+0x226>
 8003800:	78bb      	ldrb	r3, [r7, #2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 80c3 	bne.w	800398e <HAL_HCD_HC_SubmitRequest+0x226>
    {
      if ( length == 0 )
 8003808:	8b3b      	ldrh	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	3351      	adds	r3, #81	; 0x51
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
      }

      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	3351      	adds	r3, #81	; 0x51
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	3342      	adds	r3, #66	; 0x42
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 800384c:	e09f      	b.n	800398e <HAL_HCD_HC_SubmitRequest+0x226>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	3342      	adds	r3, #66	; 0x42
 800385e:	2202      	movs	r2, #2
 8003860:	701a      	strb	r2, [r3, #0]
    break;
 8003862:	e094      	b.n	800398e <HAL_HCD_HC_SubmitRequest+0x226>

  case EP_TYPE_BULK:
    if(direction == 0)
 8003864:	78bb      	ldrb	r3, [r7, #2]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d120      	bne.n	80038ac <HAL_HCD_HC_SubmitRequest+0x144>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	3351      	adds	r3, #81	; 0x51
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_HCD_HC_SubmitRequest+0x12e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	440b      	add	r3, r1
 800388e:	3342      	adds	r3, #66	; 0x42
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }

    break;
 8003894:	e07c      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	3342      	adds	r3, #66	; 0x42
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]
    break;
 80038aa:	e071      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
      if( hhcd->hc[ch_num].toggle_in == 0)
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	3350      	adds	r3, #80	; 0x50
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_HCD_HC_SubmitRequest+0x170>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	3342      	adds	r3, #66	; 0x42
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    break;
 80038d6:	e05b      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	440b      	add	r3, r1
 80038e6:	3342      	adds	r3, #66	; 0x42
 80038e8:	2202      	movs	r2, #2
 80038ea:	701a      	strb	r2, [r3, #0]
    break;
 80038ec:	e050      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
  case EP_TYPE_INTR:
    if(direction == 0)
 80038ee:	78bb      	ldrb	r3, [r7, #2]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d120      	bne.n	8003936 <HAL_HCD_HC_SubmitRequest+0x1ce>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3351      	adds	r3, #81	; 0x51
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <HAL_HCD_HC_SubmitRequest+0x1b8>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3342      	adds	r3, #66	; 0x42
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 800391e:	e037      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1 ;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	3342      	adds	r3, #66	; 0x42
 8003930:	2202      	movs	r2, #2
 8003932:	701a      	strb	r2, [r3, #0]
    break;
 8003934:	e02c      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	3350      	adds	r3, #80	; 0x50
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_HCD_HC_SubmitRequest+0x1fa>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3342      	adds	r3, #66	; 0x42
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
    break;
 8003960:	e016      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	3342      	adds	r3, #66	; 0x42
 8003972:	2202      	movs	r2, #2
 8003974:	701a      	strb	r2, [r3, #0]
    break;
 8003976:	e00b      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>

  case EP_TYPE_ISOC:
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	3342      	adds	r3, #66	; 0x42
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
    break;
 800398c:	e000      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
    break;
 800398e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	440b      	add	r3, r1
 800399e:	3344      	adds	r3, #68	; 0x44
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	8b39      	ldrh	r1, [r7, #24]
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4403      	add	r3, r0
 80039b4:	3348      	adds	r3, #72	; 0x48
 80039b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state =   URB_IDLE;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	335c      	adds	r3, #92	; 0x5c
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0 ;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	334c      	adds	r3, #76	; 0x4c
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	3339      	adds	r3, #57	; 0x39
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	335d      	adds	r3, #93	; 0x5d
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	3338      	adds	r3, #56	; 0x38
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	18d1      	adds	r1, r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	f004 fdb6 	bl	8008594 <USB_HC_StartXfer>
 8003a28:	4603      	mov	r3, r0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop

08003a34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t i = 0 , interrupt = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 fb05 	bl	800805e <USB_GetMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	f040 80eb 	bne.w	8003c32 <HAL_HCD_IRQHandler+0x1fe>
  {
    /* avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f004 fae7 	bl	8008034 <USB_ReadInterrupts>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80e1 	beq.w	8003c30 <HAL_HCD_IRQHandler+0x1fc>
    {
      return;
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fade 	bl	8008034 <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a82:	d104      	bne.n	8003a8e <HAL_HCD_IRQHandler+0x5a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a8c:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 face 	bl	8008034 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa2:	d104      	bne.n	8003aae <HAL_HCD_IRQHandler+0x7a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003aac:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 fabe 	bl	8008034 <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d104      	bne.n	8003ace <HAL_HCD_IRQHandler+0x9a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003acc:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 faae 	bl	8008034 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d103      	bne.n	8003aea <HAL_HCD_IRQHandler+0xb6>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 faa0 	bl	8008034 <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afe:	d118      	bne.n	8003b32 <HAL_HCD_IRQHandler+0xfe>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b06:	461a      	mov	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b14:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f00f fece 	bl	80138b8 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fb7e 	bl	8008224 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fa7c 	bl	8008034 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b46:	d102      	bne.n	8003b4e <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f001 f8a9 	bl	8004ca0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 fa6e 	bl	8008034 <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d106      	bne.n	8003b70 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f00f fe8c 	bl	8013880 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f004 fa5d 	bl	8008034 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b84:	d136      	bne.n	8003bf4 <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f004 fe56 	bl	800883c <USB_HC_ReadInterrupt>
 8003b90:	60f8      	str	r0, [r7, #12]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e023      	b.n	8003be0 <HAL_HCD_IRQHandler+0x1ac>
      {
        if (interrupt & (1 << i))
 8003b98:	2201      	movs	r2, #1
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler (hhcd, i);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8ca 	bl	8003d60 <HCD_HC_IN_IRQHandler>
 8003bcc:	e005      	b.n	8003bda <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fc55 	bl	8004484 <HCD_HC_OUT_IRQHandler>
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d8d6      	bhi.n	8003b98 <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bf2:	615a      	str	r2, [r3, #20]
    }

        /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 fa1b 	bl	8008034 <USB_ReadInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d114      	bne.n	8003c32 <HAL_HCD_IRQHandler+0x1fe>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	6992      	ldr	r2, [r2, #24]
 8003c12:	f022 0210 	bic.w	r2, r2, #16
 8003c16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler (hhcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 ff8f 	bl	8004b3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	6992      	ldr	r2, [r2, #24]
 8003c28:	f042 0210 	orr.w	r2, r2, #16
 8003c2c:	619a      	str	r2, [r3, #24]
 8003c2e:	e000      	b.n	8003c32 <HAL_HCD_IRQHandler+0x1fe>
      return;
 8003c30:	bf00      	nop
    }
  }
}
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_HCD_Start+0x16>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e013      	b.n	8003c76 <HAL_HCD_Start+0x3e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f004 f8f6 	bl	8007e4c <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 fb3e 	bl	80082e8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_HCD_Stop+0x16>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e00d      	b.n	8003cb0 <HAL_HCD_Stop+0x32>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 ff21 	bl	8008ae8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f004 fae7 	bl	8008298 <USB_ResetPort>
 8003cca:	4603      	mov	r3, r0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	335c      	adds	r3, #92	; 0x5c
 8003cf0:	781b      	ldrb	r3, [r3, #0]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	334c      	adds	r3, #76	; 0x4c
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fb21 	bl	800837c <USB_GetCurrentFrame>
 8003d3a:	4603      	mov	r3, r0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f004 fb00 	bl	8008356 <USB_GetHostSpeed>
 8003d56:	4603      	mov	r3, r0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler   (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01a      	beq.n	8003dc2 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003daa:	4619      	mov	r1, r3
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	60cb      	str	r3, [r1, #12]
 8003dc0:	e094      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2320      	movs	r3, #32
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	e07f      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  }

  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d034      	beq.n	8003e6c <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	4619      	mov	r1, r3
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	335d      	adds	r3, #93	; 0x5d
 8003e34:	2205      	movs	r2, #5
 8003e36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	461a      	mov	r2, r3
 8003e46:	2310      	movs	r3, #16
 8003e48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	461a      	mov	r2, r3
 8003e58:	2308      	movs	r3, #8
 8003e5a:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 fcf8 	bl	800885a <USB_HC_Halt>
 8003e6a:	e03f      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d034      	beq.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8e:	4619      	mov	r1, r3
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f043 0302 	orr.w	r3, r3, #2
 8003ea2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 fcd4 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	440b      	add	r3, r1
 8003ed2:	335d      	adds	r3, #93	; 0x5d
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eea:	6093      	str	r3, [r2, #8]
  }

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d022      	beq.n	8003f48 <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	4619      	mov	r1, r3
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f043 0302 	orr.w	r3, r3, #2
 8003f22:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 fc94 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f44:	6093      	str	r3, [r2, #8]
         USB_HC_Halt(hhcd->Instance, chnum);
       }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
  }
}
 8003f46:	e299      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80c0 	beq.w	80040e0 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	78f9      	ldrb	r1, [r7, #3]
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4403      	add	r3, r0
 8003f78:	3348      	adds	r3, #72	; 0x48
 8003f7a:	6819      	ldr	r1, [r3, #0]
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	0158      	lsls	r0, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4403      	add	r3, r0
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003f8e:	1ac9      	subs	r1, r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4403      	add	r3, r0
 8003f9c:	334c      	adds	r3, #76	; 0x4c
 8003f9e:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	440b      	add	r3, r1
 8003fae:	335d      	adds	r3, #93	; 0x5d
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3358      	adds	r3, #88	; 0x58
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	333f      	adds	r3, #63	; 0x3f
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	333f      	adds	r3, #63	; 0x3f
 8004000:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8004002:	2b02      	cmp	r3, #2
 8004004:	d121      	bne.n	800404a <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004012:	4619      	mov	r1, r3
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f004 fc12 	bl	800885a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004042:	461a      	mov	r2, r3
 8004044:	2310      	movs	r3, #16
 8004046:	6093      	str	r3, [r2, #8]
 8004048:	e033      	b.n	80040b2 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	333f      	adds	r3, #63	; 0x3f
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d128      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406c:	4619      	mov	r1, r3
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004080:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	335c      	adds	r3, #92	; 0x5c
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	335c      	adds	r3, #92	; 0x5c
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f00f fc11 	bl	80138d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	78f9      	ldrb	r1, [r7, #3]
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4403      	add	r3, r0
 80040c2:	3350      	adds	r3, #80	; 0x50
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	f083 0301 	eor.w	r3, r3, #1
 80040ca:	b2d8      	uxtb	r0, r3
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	440b      	add	r3, r1
 80040d8:	3350      	adds	r3, #80	; 0x50
 80040da:	4602      	mov	r2, r0
 80040dc:	701a      	strb	r2, [r3, #0]
}
 80040de:	e1cd      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80e6 	beq.w	80042c4 <HCD_HC_IN_IRQHandler+0x564>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	4619      	mov	r1, r3
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f023 0302 	bic.w	r3, r3, #2
 8004118:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	335d      	adds	r3, #93	; 0x5d
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10a      	bne.n	8004146 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	335c      	adds	r3, #92	; 0x5c
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e0a6      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	335d      	adds	r3, #93	; 0x5d
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d10a      	bne.n	8004172 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	335c      	adds	r3, #92	; 0x5c
 800416c:	2205      	movs	r2, #5
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	e090      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	335d      	adds	r3, #93	; 0x5d
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d00a      	beq.n	800419e <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	440b      	add	r3, r1
 8004196:	335d      	adds	r3, #93	; 0x5d
 8004198:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800419a:	2b08      	cmp	r3, #8
 800419c:	d14c      	bne.n	8004238 <HCD_HC_IN_IRQHandler+0x4d8>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	440b      	add	r3, r1
 80041ac:	3358      	adds	r3, #88	; 0x58
 80041ae:	6819      	ldr	r1, [r3, #0]
 80041b0:	1c48      	adds	r0, r1, #1
 80041b2:	687c      	ldr	r4, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4423      	add	r3, r4
 80041be:	3358      	adds	r3, #88	; 0x58
 80041c0:	6018      	str	r0, [r3, #0]
 80041c2:	2903      	cmp	r1, #3
 80041c4:	d914      	bls.n	80041f0 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	3358      	adds	r3, #88	; 0x58
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	335c      	adds	r3, #92	; 0x5c
 80041ea:	2204      	movs	r2, #4
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e009      	b.n	8004204 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	440b      	add	r3, r1
 80041fe:	335c      	adds	r3, #92	; 0x5c
 8004200:	2202      	movs	r2, #2
 8004202:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800421a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004222:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e02d      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	335d      	adds	r3, #93	; 0x5d
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d122      	bne.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	335c      	adds	r3, #92	; 0x5c
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004278:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004280:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	461a      	mov	r2, r3
 80042a2:	2302      	movs	r3, #2
 80042a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	335c      	adds	r3, #92	; 0x5c
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f00f fb09 	bl	80138d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042c2:	e0db      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03d      	beq.n	8004356 <HCD_HC_IN_IRQHandler+0x5f6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	4619      	mov	r1, r3
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f043 0302 	orr.w	r3, r3, #2
 80042fa:	60cb      	str	r3, [r1, #12]
     hhcd->hc[chnum].ErrCnt++;
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	3358      	adds	r3, #88	; 0x58
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4403      	add	r3, r0
 800431c:	3358      	adds	r3, #88	; 0x58
 800431e:	6019      	str	r1, [r3, #0]
     hhcd->hc[chnum].state = HC_XACTERR;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	335d      	adds	r3, #93	; 0x5d
 8004330:	2206      	movs	r2, #6
 8004332:	701a      	strb	r2, [r3, #0]
     USB_HC_Halt(hhcd->Instance, chnum);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f004 fa8c 	bl	800885a <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	461a      	mov	r2, r3
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	6093      	str	r3, [r2, #8]
}
 8004354:	e092      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8087 	beq.w	800447c <HCD_HC_IN_IRQHandler+0x71c>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	333f      	adds	r3, #63	; 0x3f
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d12c      	bne.n	80043de <HCD_HC_IN_IRQHandler+0x67e>
       hhcd->hc[chnum].ErrCnt = 0;
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	3358      	adds	r3, #88	; 0x58
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
       hhcd->hc[chnum].state = HC_NAK;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	335d      	adds	r3, #93	; 0x5d
 80043a8:	2203      	movs	r2, #3
 80043aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	4619      	mov	r1, r3
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 fa3f 	bl	800885a <USB_HC_Halt>
 80043dc:	e045      	b.n	800446a <HCD_HC_IN_IRQHandler+0x70a>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	333f      	adds	r3, #63	; 0x3f
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HCD_HC_IN_IRQHandler+0x6aa>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	440b      	add	r3, r1
 8004402:	333f      	adds	r3, #63	; 0x3f
 8004404:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8004406:	2b02      	cmp	r3, #2
 8004408:	d12f      	bne.n	800446a <HCD_HC_IN_IRQHandler+0x70a>
       hhcd->hc[chnum].ErrCnt = 0;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	3358      	adds	r3, #88	; 0x58
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
       if (!hhcd->Init.dma_enable)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d121      	bne.n	800446a <HCD_HC_IN_IRQHandler+0x70a>
         hhcd->hc[chnum].state = HC_NAK;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	440b      	add	r3, r1
 8004434:	335d      	adds	r3, #93	; 0x5d
 8004436:	2203      	movs	r2, #3
 8004438:	701a      	strb	r2, [r3, #0]
         __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	4619      	mov	r1, r3
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f043 0302 	orr.w	r3, r3, #2
 800445a:	60cb      	str	r3, [r1, #12]
         USB_HC_Halt(hhcd->Instance, chnum);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f004 f9f8 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004476:	461a      	mov	r2, r3
 8004478:	2310      	movs	r3, #16
 800447a:	6093      	str	r3, [r2, #8]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	bd90      	pop	{r4, r7, pc}

08004484 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044bc:	461a      	mov	r2, r3
 80044be:	2304      	movs	r3, #4
 80044c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	4619      	mov	r1, r3
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f043 0302 	orr.w	r3, r3, #2
 80044e2:	60cb      	str	r3, [r1, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
  }
}
 80044e4:	e326      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d041      	beq.n	8004580 <HCD_HC_OUT_IRQHandler+0xfc>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004508:	461a      	mov	r2, r3
 800450a:	2320      	movs	r3, #32
 800450c:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	333d      	adds	r3, #61	; 0x3d
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 8307 	bne.w	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[chnum].do_ping = 0;
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	440b      	add	r3, r1
 8004534:	333d      	adds	r3, #61	; 0x3d
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	440b      	add	r3, r1
 8004548:	335c      	adds	r3, #92	; 0x5c
 800454a:	2202      	movs	r2, #2
 800454c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	4619      	mov	r1, r3
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f043 0302 	orr.w	r3, r3, #2
 800456e:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f004 f96e 	bl	800885a <USB_HC_Halt>
}
 800457e:	e2d9      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d03f      	beq.n	8004616 <HCD_HC_OUT_IRQHandler+0x192>
    hhcd->hc[chnum].state = HC_NYET;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	440b      	add	r3, r1
 80045a4:	335d      	adds	r3, #93	; 0x5d
 80045a6:	2204      	movs	r2, #4
 80045a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1;
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	440b      	add	r3, r1
 80045b8:	333d      	adds	r3, #61	; 0x3d
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0;
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	3358      	adds	r3, #88	; 0x58
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	4619      	mov	r1, r3
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f004 f92c 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	461a      	mov	r2, r3
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	6093      	str	r3, [r2, #8]
}
 8004614:	e28e      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004628:	2b00      	cmp	r3, #0
 800462a:	d022      	beq.n	8004672 <HCD_HC_OUT_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	4619      	mov	r1, r3
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f004 f8ff 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800466e:	6093      	str	r3, [r2, #8]
}
 8004670:	e260      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d035      	beq.n	80046f4 <HCD_HC_OUT_IRQHandler+0x270>
      hhcd->hc[chnum].ErrCnt = 0;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	3358      	adds	r3, #88	; 0x58
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a8:	4619      	mov	r1, r3
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 f8c7 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	461a      	mov	r2, r3
 80046da:	2301      	movs	r3, #1
 80046dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	335d      	adds	r3, #93	; 0x5d
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
}
 80046f2:	e21f      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02b      	beq.n	8004762 <HCD_HC_OUT_IRQHandler+0x2de>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	461a      	mov	r2, r3
 8004718:	2308      	movs	r3, #8
 800471a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	4619      	mov	r1, r3
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f004 f887 	bl	800885a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	440b      	add	r3, r1
 800475a:	335d      	adds	r3, #93	; 0x5d
 800475c:	2205      	movs	r2, #5
 800475e:	701a      	strb	r2, [r3, #0]
}
 8004760:	e1e8      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d055      	beq.n	8004824 <HCD_HC_OUT_IRQHandler+0x3a0>
    hhcd->hc[chnum].ErrCnt = 0;
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	3358      	adds	r3, #88	; 0x58
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	440b      	add	r3, r1
 800479a:	335d      	adds	r3, #93	; 0x5d
 800479c:	2203      	movs	r2, #3
 800479e:	701a      	strb	r2, [r3, #0]
    if ( hhcd->hc[chnum].do_ping == 0)
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	333d      	adds	r3, #61	; 0x3d
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d114      	bne.n	80047e0 <HCD_HC_OUT_IRQHandler+0x35c>
      if (hhcd->hc[chnum].speed == HCD_SPEED_HIGH)
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	440b      	add	r3, r1
 80047c4:	333c      	adds	r3, #60	; 0x3c
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HCD_HC_OUT_IRQHandler+0x35c>
        hhcd->hc[chnum].do_ping = 1;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	333d      	adds	r3, #61	; 0x3d
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	4619      	mov	r1, r3
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f004 f825 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2310      	movs	r3, #16
 8004820:	6093      	str	r3, [r2, #8]
}
 8004822:	e187      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02b      	beq.n	8004892 <HCD_HC_OUT_IRQHandler+0x40e>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	4619      	mov	r1, r3
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f003 fff8 	bl	800885a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	335d      	adds	r3, #93	; 0x5d
 800487a:	2206      	movs	r2, #6
 800487c:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	461a      	mov	r2, r3
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	6093      	str	r3, [r2, #8]
}
 8004890:	e150      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d035      	beq.n	8004914 <HCD_HC_OUT_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	4619      	mov	r1, r3
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f003 ffc1 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	461a      	mov	r2, r3
 80048e6:	2310      	movs	r3, #16
 80048e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	461a      	mov	r2, r3
 80048f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	440b      	add	r3, r1
 800490c:	335d      	adds	r3, #93	; 0x5d
 800490e:	2208      	movs	r2, #8
 8004910:	701a      	strb	r2, [r3, #0]
}
 8004912:	e10f      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8104 	beq.w	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	4619      	mov	r1, r3
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 0302 	bic.w	r3, r3, #2
 800494c:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	440b      	add	r3, r1
 800495c:	335d      	adds	r3, #93	; 0x5d
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d12c      	bne.n	80049be <HCD_HC_OUT_IRQHandler+0x53a>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	440b      	add	r3, r1
 8004972:	335c      	adds	r3, #92	; 0x5c
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	333f      	adds	r3, #63	; 0x3f
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b02      	cmp	r3, #2
 800498c:	f040 80bb 	bne.w	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
        hhcd->hc[chnum].toggle_out ^= 1;
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	78f9      	ldrb	r1, [r7, #3]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4403      	add	r3, r0
 80049a0:	3351      	adds	r3, #81	; 0x51
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f083 0301 	eor.w	r3, r3, #1
 80049a8:	b2d8      	uxtb	r0, r3
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	3351      	adds	r3, #81	; 0x51
 80049b8:	4602      	mov	r2, r0
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e0a3      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NAK)
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	335d      	adds	r3, #93	; 0x5d
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d10a      	bne.n	80049ea <HCD_HC_OUT_IRQHandler+0x566>
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	335c      	adds	r3, #92	; 0x5c
 80049e4:	2202      	movs	r2, #2
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e08d      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	335d      	adds	r3, #93	; 0x5d
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d10a      	bne.n	8004a16 <HCD_HC_OUT_IRQHandler+0x592>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	440b      	add	r3, r1
 8004a0e:	335c      	adds	r3, #92	; 0x5c
 8004a10:	2202      	movs	r2, #2
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e077      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	440b      	add	r3, r1
 8004a24:	335d      	adds	r3, #93	; 0x5d
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d10a      	bne.n	8004a42 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	440b      	add	r3, r1
 8004a3a:	335c      	adds	r3, #92	; 0x5c
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e061      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	440b      	add	r3, r1
 8004a50:	335d      	adds	r3, #93	; 0x5d
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b06      	cmp	r3, #6
 8004a56:	d00a      	beq.n	8004a6e <HCD_HC_OUT_IRQHandler+0x5ea>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	440b      	add	r3, r1
 8004a66:	335d      	adds	r3, #93	; 0x5d
 8004a68:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d14b      	bne.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3358      	adds	r3, #88	; 0x58
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	1c48      	adds	r0, r1, #1
 8004a82:	687c      	ldr	r4, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4423      	add	r3, r4
 8004a8e:	3358      	adds	r3, #88	; 0x58
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	2903      	cmp	r1, #3
 8004a94:	d914      	bls.n	8004ac0 <HCD_HC_OUT_IRQHandler+0x63c>
        hhcd->hc[chnum].ErrCnt = 0;
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3358      	adds	r3, #88	; 0x58
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	335c      	adds	r3, #92	; 0x5c
 8004aba:	2204      	movs	r2, #4
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e009      	b.n	8004ad4 <HCD_HC_OUT_IRQHandler+0x650>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	335c      	adds	r3, #92	; 0x5c
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b12:	461a      	mov	r2, r3
 8004b14:	2302      	movs	r3, #2
 8004b16:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	335c      	adds	r3, #92	; 0x5c
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f00e fed0 	bl	80138d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}

08004b3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	61fb      	str	r3, [r7, #28]
  uint8_t                       channelnum =0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	76fb      	strb	r3, [r7, #27]
  uint32_t                      pktsts;
  uint32_t                      pktcnt;
  uint32_t                      temp = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]

  temp = hhcd->Instance->GRXSTSP ;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	0c5b      	lsrs	r3, r3, #17
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b7a:	60bb      	str	r3, [r7, #8]

  switch (pktsts)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d003      	beq.n	8004b8a <HCD_RXQLVL_IRQHandler+0x4e>
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	f000 8082 	beq.w	8004c8c <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8004b88:	e083      	b.n	8004c92 <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d07f      	beq.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
 8004b90:	7efa      	ldrb	r2, [r7, #27]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3344      	adds	r3, #68	; 0x44
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d074      	beq.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	7efa      	ldrb	r2, [r7, #27]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3344      	adds	r3, #68	; 0x44
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f003 fa0d 	bl	8007fe0 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;
 8004bc6:	7efa      	ldrb	r2, [r7, #27]
 8004bc8:	7ef9      	ldrb	r1, [r7, #27]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4403      	add	r3, r0
 8004bd6:	3344      	adds	r3, #68	; 0x44
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4419      	add	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4403      	add	r3, r0
 8004bea:	3344      	adds	r3, #68	; 0x44
 8004bec:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8004bee:	7efa      	ldrb	r2, [r7, #27]
 8004bf0:	7ef9      	ldrb	r1, [r7, #27]
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4403      	add	r3, r0
 8004bfe:	334c      	adds	r3, #76	; 0x4c
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4419      	add	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4403      	add	r3, r0
 8004c12:	334c      	adds	r3, #76	; 0x4c
 8004c14:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8004c16:	7efb      	ldrb	r3, [r7, #27]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HCD_RXQLVL_IRQHandler+0x160>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d031      	beq.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8004c2c:	7efb      	ldrb	r3, [r7, #27]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c42:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c4a:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8004c4c:	7efb      	ldrb	r3, [r7, #27]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	461a      	mov	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8004c5e:	7efa      	ldrb	r2, [r7, #27]
 8004c60:	7ef9      	ldrb	r1, [r7, #27]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4403      	add	r3, r0
 8004c6e:	3350      	adds	r3, #80	; 0x50
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f083 0301 	eor.w	r3, r3, #1
 8004c76:	b2d8      	uxtb	r0, r3
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	440b      	add	r3, r1
 8004c84:	3350      	adds	r3, #80	; 0x50
 8004c86:	4602      	mov	r2, r0
 8004c88:	701a      	strb	r2, [r3, #0]
    break;
 8004c8a:	e001      	b.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8004c90:	bf00      	nop
  }
}
 8004c92:	bf00      	nop
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	1ff80000 	.word	0x1ff80000

08004ca0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cc8:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d113      	bne.n	8004cfc <HCD_Port_IRQHandler+0x5c>
  {
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10a      	bne.n	8004cf4 <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	6992      	ldr	r2, [r2, #24]
 8004ce8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004cec:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f00e fdd4 	bl	801389c <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f043 0302 	orr.w	r3, r3, #2
 8004cfa:	60fb      	str	r3, [r7, #12]

  }

  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d142      	bne.n	8004d8c <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f043 0308 	orr.w	r3, r3, #8
 8004d0c:	60fb      	str	r3, [r7, #12]

    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d126      	bne.n	8004d66 <HCD_Port_IRQHandler+0xc6>
    {
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d113      	bne.n	8004d48 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d2a:	d106      	bne.n	8004d3a <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f003 fa76 	bl	8008224 <USB_InitFSLSPClkSel>
 8004d38:	e011      	b.n	8004d5e <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4618      	mov	r0, r3
 8004d42:	f003 fa6f 	bl	8008224 <USB_InitFSLSPClkSel>
 8004d46:	e00a      	b.n	8004d5e <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d106      	bne.n	8004d5e <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = (uint32_t)60000;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d56:	461a      	mov	r2, r3
 8004d58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004d5c:	6053      	str	r3, [r2, #4]
        }
      }
      HAL_HCD_Connect_Callback(hhcd);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f00e fd9c 	bl	801389c <HAL_HCD_Connect_Callback>
 8004d64:	e012      	b.n	8004d8c <HCD_Port_IRQHandler+0xec>

    }
    else
    {
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d7a:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	6992      	ldr	r2, [r2, #24]
 8004d86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d8a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d103      	bne.n	8004d9e <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f043 0320 	orr.w	r3, r3, #32
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004da4:	461a      	mov	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e07e      	b.n	8004ec4 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f00e fa1e 	bl	801321c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2224      	movs	r2, #36	; 0x24
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6852      	ldr	r2, [r2, #4]
 8004e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	6892      	ldr	r2, [r2, #8]
 8004e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d107      	bne.n	8004e2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6892      	ldr	r2, [r2, #8]
 8004e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	e006      	b.n	8004e3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6892      	ldr	r2, [r2, #8]
 8004e36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d104      	bne.n	8004e4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	4b1c      	ldr	r3, [pc, #112]	; (8004ecc <HAL_I2C_Init+0x118>)
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	68d2      	ldr	r2, [r2, #12]
 8004e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6911      	ldr	r1, [r2, #16]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6952      	ldr	r2, [r2, #20]
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6992      	ldr	r2, [r2, #24]
 8004e80:	0212      	lsls	r2, r2, #8
 8004e82:	430a      	orrs	r2, r1
 8004e84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	69d1      	ldr	r1, [r2, #28]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6a12      	ldr	r2, [r2, #32]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	02008000 	.word	0x02008000

08004ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d138      	bne.n	8004f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e032      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	6811      	ldr	r1, [r2, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d139      	bne.n	8004ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e033      	b.n	8004ff6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2224      	movs	r2, #36	; 0x24
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e000      	b.n	8004ff6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0c7      	b.n	80051ae <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f00e f922 	bl	801327c <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	6992      	ldr	r2, [r2, #24]
 800504a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800504e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	6991      	ldr	r1, [r2, #24]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6850      	ldr	r0, [r2, #4]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005068:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6912      	ldr	r2, [r2, #16]
 800506e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005070:	430a      	orrs	r2, r1
 8005072:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	4b4e      	ldr	r3, [pc, #312]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 8005080:	400b      	ands	r3, r1
 8005082:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	6891      	ldr	r1, [r2, #8]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6990      	ldr	r0, [r2, #24]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4302      	orrs	r2, r0
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68d9      	ldr	r1, [r3, #12]
 80050ac:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 80050ae:	400b      	ands	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	68d1      	ldr	r1, [r2, #12]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6a10      	ldr	r0, [r2, #32]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4302      	orrs	r2, r0
 80050cc:	430a      	orrs	r2, r1
 80050ce:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6919      	ldr	r1, [r3, #16]
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 80050dc:	400b      	ands	r3, r1
 80050de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	6911      	ldr	r1, [r2, #16]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4302      	orrs	r2, r0
 80050fa:	430a      	orrs	r2, r1
 80050fc:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 800510a:	400b      	ands	r3, r1
 800510c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	6951      	ldr	r1, [r2, #20]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4302      	orrs	r2, r0
 8005128:	430a      	orrs	r2, r1
 800512a:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800514a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800514e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4302      	orrs	r2, r0
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005166:	4302      	orrs	r2, r0
 8005168:	430a      	orrs	r2, r1
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005176:	f042 0204 	orr.w	r2, r2, #4
 800517a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005186:	f042 0202 	orr.w	r2, r2, #2
 800518a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	6992      	ldr	r2, [r2, #24]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	f000f800 	.word	0xf000f800

080051bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80051bc:	b5b0      	push	{r4, r5, r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_LTDC_ConfigLayer+0x1a>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e02c      	b.n	8005230 <HAL_LTDC_ConfigLayer+0x74>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2134      	movs	r1, #52	; 0x34
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f81f 	bl	8005254 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bdb0      	pop	{r4, r5, r7, pc}

08005238 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005246:	b2db      	uxtb	r3, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527c:	4413      	add	r3, r2
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	01db      	lsls	r3, r3, #7
 800528c:	4413      	add	r3, r2
 800528e:	3384      	adds	r3, #132	; 0x84
 8005290:	461a      	mov	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	01db      	lsls	r3, r3, #7
 800529c:	440b      	add	r3, r1
 800529e:	3384      	adds	r3, #132	; 0x84
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052a6:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	01db      	lsls	r3, r3, #7
 80052b2:	4413      	add	r3, r2
 80052b4:	3384      	adds	r3, #132	; 0x84
 80052b6:	4619      	mov	r1, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c8:	4413      	add	r3, r2
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e0:	4413      	add	r3, r2
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	4413      	add	r3, r2
 80052f2:	3384      	adds	r3, #132	; 0x84
 80052f4:	461a      	mov	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	01db      	lsls	r3, r3, #7
 8005300:	440b      	add	r3, r1
 8005302:	3384      	adds	r3, #132	; 0x84
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800530a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	4413      	add	r3, r2
 8005318:	3384      	adds	r3, #132	; 0x84
 800531a:	4619      	mov	r1, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800532a:	4413      	add	r3, r2
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4313      	orrs	r3, r2
 8005332:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	01db      	lsls	r3, r3, #7
 800533e:	4413      	add	r3, r2
 8005340:	3384      	adds	r3, #132	; 0x84
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4619      	mov	r1, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	01db      	lsls	r3, r3, #7
 800534e:	440b      	add	r3, r1
 8005350:	3384      	adds	r3, #132	; 0x84
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	01db      	lsls	r3, r3, #7
 8005364:	4413      	add	r3, r2
 8005366:	3384      	adds	r3, #132	; 0x84
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	01db      	lsls	r3, r3, #7
 8005396:	4413      	add	r3, r2
 8005398:	3384      	adds	r3, #132	; 0x84
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	01db      	lsls	r3, r3, #7
 80053a6:	4413      	add	r3, r2
 80053a8:	3384      	adds	r3, #132	; 0x84
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	4413      	add	r3, r2
 80053bc:	3384      	adds	r3, #132	; 0x84
 80053be:	4619      	mov	r1, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053c6:	461a      	mov	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	4413      	add	r3, r2
 80053e2:	3384      	adds	r3, #132	; 0x84
 80053e4:	461a      	mov	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4619      	mov	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	440b      	add	r3, r1
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	01db      	lsls	r3, r3, #7
 8005406:	4413      	add	r3, r2
 8005408:	3384      	adds	r3, #132	; 0x84
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	01db      	lsls	r3, r3, #7
 800541c:	4413      	add	r3, r2
 800541e:	3384      	adds	r3, #132	; 0x84
 8005420:	4619      	mov	r1, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	01db      	lsls	r3, r3, #7
 800542c:	4413      	add	r3, r2
 800542e:	3384      	adds	r3, #132	; 0x84
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <LTDC_SetConfig+0x348>)
 8005434:	4013      	ands	r3, r2
 8005436:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	01db      	lsls	r3, r3, #7
 8005442:	4413      	add	r3, r2
 8005444:	3384      	adds	r3, #132	; 0x84
 8005446:	4619      	mov	r1, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	4313      	orrs	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	01db      	lsls	r3, r3, #7
 800545e:	4413      	add	r3, r2
 8005460:	3384      	adds	r3, #132	; 0x84
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	01db      	lsls	r3, r3, #7
 800546e:	4413      	add	r3, r2
 8005470:	3384      	adds	r3, #132	; 0x84
 8005472:	461a      	mov	r2, r3
 8005474:	2300      	movs	r3, #0
 8005476:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4413      	add	r3, r2
 8005484:	3384      	adds	r3, #132	; 0x84
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 8005496:	2304      	movs	r3, #4
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e01b      	b.n	80054d4 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 80054a4:	2303      	movs	r3, #3
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	e014      	b.n	80054d4 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d00b      	beq.n	80054ca <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d007      	beq.n	80054ca <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d003      	beq.n	80054ca <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054c6:	2b07      	cmp	r3, #7
 80054c8:	d102      	bne.n	80054d0 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 80054ca:	2302      	movs	r3, #2
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e001      	b.n	80054d4 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 80054d0:	2301      	movs	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	01db      	lsls	r3, r3, #7
 80054de:	4413      	add	r3, r2
 80054e0:	3384      	adds	r3, #132	; 0x84
 80054e2:	461a      	mov	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	440b      	add	r3, r1
 80054f0:	3384      	adds	r3, #132	; 0x84
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	4413      	add	r3, r2
 8005506:	3384      	adds	r3, #132	; 0x84
 8005508:	4618      	mov	r0, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
 8005514:	041a      	lsls	r2, r3, #16
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	1acb      	subs	r3, r1, r3
 8005520:	69f9      	ldr	r1, [r7, #28]
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	3303      	adds	r3, #3
 8005528:	4313      	orrs	r3, r2
 800552a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	01db      	lsls	r3, r3, #7
 8005536:	4413      	add	r3, r2
 8005538:	3384      	adds	r3, #132	; 0x84
 800553a:	4619      	mov	r1, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	01db      	lsls	r3, r3, #7
 8005546:	4413      	add	r3, r2
 8005548:	3384      	adds	r3, #132	; 0x84
 800554a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554c:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <LTDC_SetConfig+0x34c>)
 800554e:	4013      	ands	r3, r2
 8005550:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	4413      	add	r3, r2
 800555e:	3384      	adds	r3, #132	; 0x84
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	01db      	lsls	r3, r3, #7
 8005572:	4413      	add	r3, r2
 8005574:	3384      	adds	r3, #132	; 0x84
 8005576:	461a      	mov	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4619      	mov	r1, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	440b      	add	r3, r1
 8005584:	3384      	adds	r3, #132	; 0x84
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6013      	str	r3, [r2, #0]
}
 800558e:	bf00      	nop
 8005590:	3724      	adds	r7, #36	; 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	fffff8f8 	.word	0xfffff8f8
 80055a0:	fffff800 	.word	0xfffff800

080055a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <HAL_PWREx_EnableOverDrive+0x98>)
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_PWREx_EnableOverDrive+0x98>)
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_PWREx_EnableOverDrive+0x98>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055c6:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d2:	f7fc fb2d 	bl	8001c30 <HAL_GetTick>
 80055d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055d8:	e009      	b.n	80055ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055da:	f7fc fb29 	bl	8001c30 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055e8:	d901      	bls.n	80055ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e022      	b.n	8005634 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d1ee      	bne.n	80055da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055fc:	4a10      	ldr	r2, [pc, #64]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005606:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005608:	f7fc fb12 	bl	8001c30 <HAL_GetTick>
 800560c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800560e:	e009      	b.n	8005624 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005610:	f7fc fb0e 	bl	8001c30 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561e:	d901      	bls.n	8005624 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e007      	b.n	8005634 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005630:	d1ee      	bne.n	8005610 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40023800 	.word	0x40023800
 8005640:	40007000 	.word	0x40007000

08005644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e25c      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8087 	beq.w	8005776 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005668:	4b96      	ldr	r3, [pc, #600]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b04      	cmp	r3, #4
 8005672:	d00c      	beq.n	800568e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005674:	4b93      	ldr	r3, [pc, #588]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b08      	cmp	r3, #8
 800567e:	d112      	bne.n	80056a6 <HAL_RCC_OscConfig+0x62>
 8005680:	4b90      	ldr	r3, [pc, #576]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568c:	d10b      	bne.n	80056a6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800568e:	4b8d      	ldr	r3, [pc, #564]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d06c      	beq.n	8005774 <HAL_RCC_OscConfig+0x130>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d168      	bne.n	8005774 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e236      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ae:	d106      	bne.n	80056be <HAL_RCC_OscConfig+0x7a>
 80056b0:	4a84      	ldr	r2, [pc, #528]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056b2:	4b84      	ldr	r3, [pc, #528]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e02e      	b.n	800571c <HAL_RCC_OscConfig+0xd8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0x9c>
 80056c6:	4a7f      	ldr	r2, [pc, #508]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056c8:	4b7e      	ldr	r3, [pc, #504]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	4a7c      	ldr	r2, [pc, #496]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056d4:	4b7b      	ldr	r3, [pc, #492]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e01d      	b.n	800571c <HAL_RCC_OscConfig+0xd8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCC_OscConfig+0xc0>
 80056ea:	4a76      	ldr	r2, [pc, #472]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056ec:	4b75      	ldr	r3, [pc, #468]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	4a73      	ldr	r2, [pc, #460]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056f8:	4b72      	ldr	r3, [pc, #456]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e00b      	b.n	800571c <HAL_RCC_OscConfig+0xd8>
 8005704:	4a6f      	ldr	r2, [pc, #444]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005706:	4b6f      	ldr	r3, [pc, #444]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4a6c      	ldr	r2, [pc, #432]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005712:	4b6c      	ldr	r3, [pc, #432]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fc fa84 	bl	8001c30 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800572c:	f7fc fa80 	bl	8001c30 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1ea      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0xe8>
 800574a:	e014      	b.n	8005776 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fc fa70 	bl	8001c30 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005754:	f7fc fa6c 	bl	8001c30 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1d6      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005766:	4b57      	ldr	r3, [pc, #348]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x110>
 8005772:	e000      	b.n	8005776 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d069      	beq.n	8005856 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005782:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578e:	4b4d      	ldr	r3, [pc, #308]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b08      	cmp	r3, #8
 8005798:	d11c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x190>
 800579a:	4b4a      	ldr	r3, [pc, #296]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_RCC_OscConfig+0x17a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e1aa      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4941      	ldr	r1, [pc, #260]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057c0:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4313      	orrs	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d2:	e040      	b.n	8005856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d023      	beq.n	8005824 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057dc:	4a39      	ldr	r2, [pc, #228]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057de:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fc fa22 	bl	8001c30 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f0:	f7fc fa1e 	bl	8001c30 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e188      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005802:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580e:	492d      	ldr	r1, [pc, #180]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005810:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
 8005822:	e018      	b.n	8005856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005824:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fc f9fe 	bl	8001c30 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005838:	f7fc f9fa 	bl	8001c30 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e164      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584a:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d038      	beq.n	80058d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d019      	beq.n	800589e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800586c:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fc f9db 	bl	8001c30 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800587e:	f7fc f9d7 	bl	8001c30 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e141      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005890:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x23a>
 800589c:	e01a      	b.n	80058d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80058a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058aa:	f7fc f9c1 	bl	8001c30 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b0:	e00a      	b.n	80058c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b2:	f7fc f9bd 	bl	8001c30 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d903      	bls.n	80058c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e127      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
 80058c4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c8:	4b94      	ldr	r3, [pc, #592]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1ee      	bne.n	80058b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80a4 	beq.w	8005a2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e2:	4b8e      	ldr	r3, [pc, #568]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ee:	4a8b      	ldr	r2, [pc, #556]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058f0:	4b8a      	ldr	r3, [pc, #552]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6413      	str	r3, [r2, #64]	; 0x40
 80058fa:	4b88      	ldr	r3, [pc, #544]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800590a:	4b85      	ldr	r3, [pc, #532]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d118      	bne.n	8005948 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005916:	4a82      	ldr	r2, [pc, #520]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 8005918:	4b81      	ldr	r3, [pc, #516]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005922:	f7fc f985 	bl	8001c30 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800592a:	f7fc f981 	bl	8001c30 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b64      	cmp	r3, #100	; 0x64
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e0eb      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x31a>
 8005950:	4a72      	ldr	r2, [pc, #456]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005952:	4b72      	ldr	r3, [pc, #456]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
 800595c:	e02d      	b.n	80059ba <HAL_RCC_OscConfig+0x376>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x33c>
 8005966:	4a6d      	ldr	r2, [pc, #436]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005968:	4b6c      	ldr	r3, [pc, #432]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	6713      	str	r3, [r2, #112]	; 0x70
 8005972:	4a6a      	ldr	r2, [pc, #424]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005974:	4b69      	ldr	r3, [pc, #420]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	6713      	str	r3, [r2, #112]	; 0x70
 800597e:	e01c      	b.n	80059ba <HAL_RCC_OscConfig+0x376>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b05      	cmp	r3, #5
 8005986:	d10c      	bne.n	80059a2 <HAL_RCC_OscConfig+0x35e>
 8005988:	4a64      	ldr	r2, [pc, #400]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 800598a:	4b64      	ldr	r3, [pc, #400]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	6713      	str	r3, [r2, #112]	; 0x70
 8005994:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005996:	4b61      	ldr	r3, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	e00b      	b.n	80059ba <HAL_RCC_OscConfig+0x376>
 80059a2:	4a5e      	ldr	r2, [pc, #376]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059a4:	4b5d      	ldr	r3, [pc, #372]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	6713      	str	r3, [r2, #112]	; 0x70
 80059ae:	4a5b      	ldr	r2, [pc, #364]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059b0:	4b5a      	ldr	r3, [pc, #360]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d015      	beq.n	80059ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fc f935 	bl	8001c30 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fc f931 	bl	8001c30 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e099      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e0:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0ee      	beq.n	80059ca <HAL_RCC_OscConfig+0x386>
 80059ec:	e014      	b.n	8005a18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ee:	f7fc f91f 	bl	8001c30 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fc f91b 	bl	8001c30 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e083      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a0c:	4b43      	ldr	r3, [pc, #268]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ee      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4a3f      	ldr	r2, [pc, #252]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a20:	4b3e      	ldr	r3, [pc, #248]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d06f      	beq.n	8005b12 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a32:	4b3a      	ldr	r3, [pc, #232]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d067      	beq.n	8005b0e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d149      	bne.n	8005ada <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a46:	4a35      	ldr	r2, [pc, #212]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a48:	4b34      	ldr	r3, [pc, #208]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc f8ed 	bl	8001c30 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a5a:	f7fc f8e9 	bl	8001c30 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e053      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a78:	4928      	ldr	r1, [pc, #160]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	019b      	lsls	r3, r3, #6
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	061b      	lsls	r3, r3, #24
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005aa8:	4b1c      	ldr	r3, [pc, #112]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab2:	f7fc f8bd 	bl	8001c30 <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aba:	f7fc f8b9 	bl	8001c30 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e023      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x476>
 8005ad8:	e01b      	b.n	8005b12 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fc f8a3 	bl	8001c30 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fc f89f 	bl	8001c30 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e009      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x4aa>
 8005b0c:	e001      	b.n	8005b12 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40007000 	.word	0x40007000

08005b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0ce      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 020f 	and.w	r2, r3, #15
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d210      	bcs.n	8005b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4966      	ldr	r1, [pc, #408]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4c:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f023 020f 	bic.w	r2, r3, #15
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5a:	4b62      	ldr	r3, [pc, #392]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0b6      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d020      	beq.n	8005bba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b84:	4a58      	ldr	r2, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b86:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b9c:	4a52      	ldr	r2, [pc, #328]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba8:	494f      	ldr	r1, [pc, #316]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4b4f      	ldr	r3, [pc, #316]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d040      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	4b46      	ldr	r3, [pc, #280]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d115      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07d      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be6:	4b40      	ldr	r3, [pc, #256]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e071      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf6:	4b3c      	ldr	r3, [pc, #240]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e069      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c06:	4938      	ldr	r1, [pc, #224]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f023 0203 	bic.w	r2, r3, #3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c18:	f7fc f80a 	bl	8001c30 <HAL_GetTick>
 8005c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c20:	f7fc f806 	bl	8001c30 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e051      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 020c 	and.w	r2, r3, #12
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d1eb      	bne.n	8005c20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c48:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d910      	bls.n	8005c78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4923      	ldr	r1, [pc, #140]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c58:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f023 020f 	bic.w	r2, r3, #15
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 020f 	and.w	r2, r3, #15
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e030      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c84:	4918      	ldr	r1, [pc, #96]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ca2:	4911      	ldr	r1, [pc, #68]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb6:	f000 f81d 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8005cba:	4601      	mov	r1, r0
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005cc8:	5cd3      	ldrb	r3, [r2, r3]
 8005cca:	fa21 f303 	lsr.w	r3, r1, r3
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8005cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f00d fc64 	bl	80135a0 <HAL_InitTick>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	08019c34 	.word	0x08019c34
 8005cf0:	2000003c 	.word	0x2000003c

08005cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	b087      	sub	sp, #28
 8005cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60fa      	str	r2, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	617a      	str	r2, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8005d08:	2200      	movs	r2, #0
 8005d0a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0c:	4a51      	ldr	r2, [pc, #324]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d0e:	6892      	ldr	r2, [r2, #8]
 8005d10:	f002 020c 	and.w	r2, r2, #12
 8005d14:	2a04      	cmp	r2, #4
 8005d16:	d007      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x34>
 8005d18:	2a08      	cmp	r2, #8
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	f040 8090 	bne.w	8005e42 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d22:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d24:	613b      	str	r3, [r7, #16]
       break;
 8005d26:	e08f      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d28:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8005d2a:	613b      	str	r3, [r7, #16]
      break;
 8005d2c:	e08c      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d2e:	4a49      	ldr	r2, [pc, #292]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d30:	6852      	ldr	r2, [r2, #4]
 8005d32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005d36:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d38:	4a46      	ldr	r2, [pc, #280]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d3a:	6852      	ldr	r2, [r2, #4]
 8005d3c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	d023      	beq.n	8005d8c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d44:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	099b      	lsrs	r3, r3, #6
 8005d4a:	f04f 0400 	mov.w	r4, #0
 8005d4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	ea03 0301 	and.w	r3, r3, r1
 8005d5a:	ea04 0402 	and.w	r4, r4, r2
 8005d5e:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8005d60:	fb02 f104 	mul.w	r1, r2, r4
 8005d64:	2200      	movs	r2, #0
 8005d66:	fb02 f203 	mul.w	r2, r2, r3
 8005d6a:	440a      	add	r2, r1
 8005d6c:	493b      	ldr	r1, [pc, #236]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8005d6e:	fba3 0101 	umull	r0, r1, r3, r1
 8005d72:	1853      	adds	r3, r2, r1
 8005d74:	4619      	mov	r1, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f04f 0400 	mov.w	r4, #0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4623      	mov	r3, r4
 8005d80:	f7fa ffae 	bl	8000ce0 <__aeabi_uldivmod>
 8005d84:	4603      	mov	r3, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e04c      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d8c:	4a31      	ldr	r2, [pc, #196]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d8e:	6852      	ldr	r2, [r2, #4]
 8005d90:	0992      	lsrs	r2, r2, #6
 8005d92:	4611      	mov	r1, r2
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005d9c:	f04f 0600 	mov.w	r6, #0
 8005da0:	ea05 0501 	and.w	r5, r5, r1
 8005da4:	ea06 0602 	and.w	r6, r6, r2
 8005da8:	4629      	mov	r1, r5
 8005daa:	4632      	mov	r2, r6
 8005dac:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8005db0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8005db4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005db8:	4651      	mov	r1, sl
 8005dba:	465a      	mov	r2, fp
 8005dbc:	46aa      	mov	sl, r5
 8005dbe:	46b3      	mov	fp, r6
 8005dc0:	4655      	mov	r5, sl
 8005dc2:	465e      	mov	r6, fp
 8005dc4:	1b4d      	subs	r5, r1, r5
 8005dc6:	eb62 0606 	sbc.w	r6, r2, r6
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4632      	mov	r2, r6
 8005dce:	0194      	lsls	r4, r2, #6
 8005dd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005dd4:	018b      	lsls	r3, r1, #6
 8005dd6:	1a5b      	subs	r3, r3, r1
 8005dd8:	eb64 0402 	sbc.w	r4, r4, r2
 8005ddc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005de0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005de4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8005de8:	4643      	mov	r3, r8
 8005dea:	464c      	mov	r4, r9
 8005dec:	4655      	mov	r5, sl
 8005dee:	465e      	mov	r6, fp
 8005df0:	18ed      	adds	r5, r5, r3
 8005df2:	eb46 0604 	adc.w	r6, r6, r4
 8005df6:	462b      	mov	r3, r5
 8005df8:	4634      	mov	r4, r6
 8005dfa:	02a2      	lsls	r2, r4, #10
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	4621      	mov	r1, r4
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f04f 0400 	mov.w	r4, #0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	f7fa ff60 	bl	8000ce0 <__aeabi_uldivmod>
 8005e20:	4603      	mov	r3, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	3301      	adds	r3, #1
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3e:	613b      	str	r3, [r7, #16]
      break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e44:	613b      	str	r3, [r7, #16]
      break;
 8005e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e48:	693b      	ldr	r3, [r7, #16]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	40023800 	.word	0x40023800
 8005e58:	00f42400 	.word	0x00f42400
 8005e5c:	017d7840 	.word	0x017d7840

08005e60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e66:	681b      	ldr	r3, [r3, #0]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	2000003c 	.word	0x2000003c

08005e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e7c:	f7ff fff0 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005e80:	4601      	mov	r1, r0
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	0a9b      	lsrs	r3, r3, #10
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	4a03      	ldr	r2, [pc, #12]	; (8005e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e8e:	5cd3      	ldrb	r3, [r2, r3]
 8005e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	08019c44 	.word	0x08019c44

08005ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ea4:	f7ff ffdc 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005ea8:	4601      	mov	r1, r0
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	0b5b      	lsrs	r3, r3, #13
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	4a03      	ldr	r2, [pc, #12]	; (8005ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb6:	5cd3      	ldrb	r3, [r2, r3]
 8005eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	08019c44 	.word	0x08019c44

08005ec8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	220f      	movs	r2, #15
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ed8:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0203 	and.w	r2, r3, #3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	08db      	lsrs	r3, r3, #3
 8005f02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <HAL_RCC_GetClockConfig+0x60>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 020f 	and.w	r2, r3, #15
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40023c00 	.word	0x40023c00

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d012      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f54:	4a69      	ldr	r2, [pc, #420]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f56:	4b69      	ldr	r3, [pc, #420]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f5e:	6093      	str	r3, [r2, #8]
 8005f60:	4966      	ldr	r1, [pc, #408]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f62:	4b66      	ldr	r3, [pc, #408]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005f76:	2301      	movs	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d017      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f86:	495d      	ldr	r1, [pc, #372]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f88:	4b5c      	ldr	r3, [pc, #368]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa4:	d101      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d017      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fc2:	494e      	ldr	r1, [pc, #312]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005ffe:	2301      	movs	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 808b 	beq.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006010:	4a3a      	ldr	r2, [pc, #232]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006012:	4b3a      	ldr	r3, [pc, #232]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601a:	6413      	str	r3, [r2, #64]	; 0x40
 800601c:	4b37      	ldr	r3, [pc, #220]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006024:	60bb      	str	r3, [r7, #8]
 8006026:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006028:	4a35      	ldr	r2, [pc, #212]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800602a:	4b35      	ldr	r3, [pc, #212]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006034:	f7fb fdfc 	bl	8001c30 <HAL_GetTick>
 8006038:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603c:	f7fb fdf8 	bl	8001c30 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e355      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800604e:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800605a:	4b28      	ldr	r3, [pc, #160]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006062:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d035      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	429a      	cmp	r2, r3
 8006076:	d02e      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006078:	4b20      	ldr	r3, [pc, #128]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006080:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006082:	4a1e      	ldr	r2, [pc, #120]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800608e:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800609a:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060a0:	4b16      	ldr	r3, [pc, #88]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d014      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fb fdc0 	bl	8001c30 <HAL_GetTick>
 80060b0:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b2:	e00a      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b4:	f7fb fdbc 	bl	8001c30 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e317      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0ee      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e2:	d111      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80060e4:	4805      	ldr	r0, [pc, #20]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060f2:	4b04      	ldr	r3, [pc, #16]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060f4:	400b      	ands	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	6083      	str	r3, [r0, #8]
 80060fa:	e00b      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060fc:	40023800 	.word	0x40023800
 8006100:	40007000 	.word	0x40007000
 8006104:	0ffffcff 	.word	0x0ffffcff
 8006108:	4ab0      	ldr	r2, [pc, #704]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800610a:	4bb0      	ldr	r3, [pc, #704]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006112:	6093      	str	r3, [r2, #8]
 8006114:	49ad      	ldr	r1, [pc, #692]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006116:	4bad      	ldr	r3, [pc, #692]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006122:	4313      	orrs	r3, r2
 8006124:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b00      	cmp	r3, #0
 8006130:	d010      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006132:	4aa6      	ldr	r2, [pc, #664]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006134:	4ba5      	ldr	r3, [pc, #660]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800613a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800613e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006142:	49a2      	ldr	r1, [pc, #648]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006144:	4ba1      	ldr	r3, [pc, #644]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006146:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006160:	499a      	ldr	r1, [pc, #616]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006162:	4b9a      	ldr	r3, [pc, #616]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006182:	4992      	ldr	r1, [pc, #584]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006184:	4b91      	ldr	r3, [pc, #580]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061a4:	4989      	ldr	r1, [pc, #548]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061c6:	4981      	ldr	r1, [pc, #516]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061c8:	4b80      	ldr	r3, [pc, #512]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061e8:	4978      	ldr	r1, [pc, #480]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ea:	4b78      	ldr	r3, [pc, #480]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f023 0203 	bic.w	r2, r3, #3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800620a:	4970      	ldr	r1, [pc, #448]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620c:	4b6f      	ldr	r3, [pc, #444]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f023 020c 	bic.w	r2, r3, #12
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800622c:	4967      	ldr	r1, [pc, #412]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800622e:	4b67      	ldr	r3, [pc, #412]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800624e:	495f      	ldr	r1, [pc, #380]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006250:	4b5e      	ldr	r3, [pc, #376]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006270:	4956      	ldr	r1, [pc, #344]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006272:	4b56      	ldr	r3, [pc, #344]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006292:	494e      	ldr	r1, [pc, #312]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006294:	4b4d      	ldr	r3, [pc, #308]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062b4:	4945      	ldr	r1, [pc, #276]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b6:	4b45      	ldr	r3, [pc, #276]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80062d6:	493d      	ldr	r1, [pc, #244]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d8:	4b3c      	ldr	r3, [pc, #240]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062f8:	4934      	ldr	r1, [pc, #208]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062fa:	4b34      	ldr	r3, [pc, #208]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800631a:	492c      	ldr	r1, [pc, #176]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800631c:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006338:	d101      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 800633a:	2301      	movs	r3, #1
 800633c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 800634a:	2301      	movs	r3, #1
 800634c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800635a:	491c      	ldr	r1, [pc, #112]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800637c:	4913      	ldr	r1, [pc, #76]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006384:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d005      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063a2:	f040 80d8 	bne.w	8006556 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 80063a6:	4a09      	ldr	r2, [pc, #36]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063a8:	4b08      	ldr	r3, [pc, #32]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063b0:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b2:	f7fb fc3d 	bl	8001c30 <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063ba:	f7fb fc39 	bl	8001c30 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b64      	cmp	r3, #100	; 0x64
 80063c6:	d903      	bls.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e196      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80063cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063d0:	4b6c      	ldr	r3, [pc, #432]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1ee      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d021      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11d      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063f0:	4b64      	ldr	r3, [pc, #400]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063fe:	4b61      	ldr	r3, [pc, #388]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006404:	0e1b      	lsrs	r3, r3, #24
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800640c:	495d      	ldr	r1, [pc, #372]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	019a      	lsls	r2, r3, #6
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	431a      	orrs	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	071b      	lsls	r3, r3, #28
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800644a:	2b00      	cmp	r3, #0
 800644c:	d02e      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006456:	d129      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006458:	4b4a      	ldr	r3, [pc, #296]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800645a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006466:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646c:	0f1b      	lsrs	r3, r3, #28
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006474:	4943      	ldr	r1, [pc, #268]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	019a      	lsls	r2, r3, #6
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	071b      	lsls	r3, r3, #28
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8006494:	493b      	ldr	r1, [pc, #236]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006496:	4b3b      	ldr	r3, [pc, #236]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800649c:	f023 021f 	bic.w	r2, r3, #31
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	3b01      	subs	r3, #1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01d      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064b8:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064be:	0e1b      	lsrs	r3, r3, #24
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064cc:	0f1b      	lsrs	r3, r3, #28
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064d4:	492b      	ldr	r1, [pc, #172]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	019a      	lsls	r2, r3, #6
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	431a      	orrs	r2, r3
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	071b      	lsls	r3, r3, #28
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d011      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006500:	4920      	ldr	r1, [pc, #128]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	019a      	lsls	r2, r3, #6
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	071b      	lsls	r3, r3, #28
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006524:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006526:	4b17      	ldr	r3, [pc, #92]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800652e:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006530:	f7fb fb7e 	bl	8001c30 <HAL_GetTick>
 8006534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006536:	e008      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006538:	f7fb fb7a 	bl	8001c30 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b64      	cmp	r3, #100	; 0x64
 8006544:	d901      	bls.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0d7      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800654a:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b01      	cmp	r3, #1
 800655a:	f040 80cd 	bne.w	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006560:	4b08      	ldr	r3, [pc, #32]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006568:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656a:	f7fb fb61 	bl	8001c30 <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006570:	e00a      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006572:	f7fb fb5d 	bl	8001c30 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b64      	cmp	r3, #100	; 0x64
 800657e:	d903      	bls.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0ba      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006584:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006588:	4b5e      	ldr	r3, [pc, #376]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006594:	d0ed      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02e      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d12a      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065be:	4b51      	ldr	r3, [pc, #324]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065cc:	4b4d      	ldr	r3, [pc, #308]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d2:	0f1b      	lsrs	r3, r3, #28
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065da:	494a      	ldr	r1, [pc, #296]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	019a      	lsls	r2, r3, #6
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	071b      	lsls	r3, r3, #28
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80065fa:	4942      	ldr	r1, [pc, #264]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065fc:	4b41      	ldr	r3, [pc, #260]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006602:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	3b01      	subs	r3, #1
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d022      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006628:	d11d      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800662a:	4b36      	ldr	r3, [pc, #216]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006630:	0e1b      	lsrs	r3, r3, #24
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006638:	4b32      	ldr	r3, [pc, #200]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	0f1b      	lsrs	r3, r3, #28
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006646:	492f      	ldr	r1, [pc, #188]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	019a      	lsls	r2, r3, #6
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	431a      	orrs	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	061b      	lsls	r3, r3, #24
 800665a:	431a      	orrs	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	071b      	lsls	r3, r3, #28
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d028      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006672:	4b24      	ldr	r3, [pc, #144]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	0e1b      	lsrs	r3, r3, #24
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006680:	4b20      	ldr	r3, [pc, #128]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800668e:	491d      	ldr	r1, [pc, #116]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	019a      	lsls	r2, r3, #6
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	431a      	orrs	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	061b      	lsls	r3, r3, #24
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	071b      	lsls	r3, r3, #28
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066ae:	4915      	ldr	r1, [pc, #84]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066b0:	4b14      	ldr	r3, [pc, #80]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ce:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d0:	f7fb faae 	bl	8001c30 <HAL_GetTick>
 80066d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066d8:	f7fb faaa 	bl	8001c30 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b64      	cmp	r3, #100	; 0x64
 80066e4:	d901      	bls.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e007      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f6:	d1ef      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40023800 	.word	0x40023800

08006708 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e025      	b.n	8006768 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f00c ff2b 	bl	801358c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f001 fa19 	bl	8007b80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	461a      	mov	r2, r3
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	f001 fa83 	bl	8007c64 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_SDRAM_Read_32b+0x20>
 800678c:	2302      	movs	r3, #2
 800678e:	e028      	b.n	80067e2 <HAL_SDRAM_Read_32b+0x72>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d101      	bne.n	80067a8 <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
 80067a6:	e01c      	b.n	80067e2 <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b05      	cmp	r3, #5
 80067b2:	d10e      	bne.n	80067d2 <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 80067b4:	2301      	movs	r3, #1
 80067b6:	e014      	b.n	80067e2 <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	3304      	adds	r3, #4
 80067ca:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ef      	bne.n	80067b8 <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_SDRAM_Write_32b+0x24>
 800680e:	2302      	movs	r3, #2
 8006810:	e02a      	b.n	8006868 <HAL_SDRAM_Write_32b+0x7a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d101      	bne.n	800682e <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
 800682c:	e01c      	b.n	8006868 <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b05      	cmp	r3, #5
 8006832:	d002      	beq.n	800683a <HAL_SDRAM_Write_32b+0x4c>
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b04      	cmp	r3, #4
 8006838:	d10e      	bne.n	8006858 <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 800683a:	2301      	movs	r3, #1
 800683c:	e014      	b.n	8006868 <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3304      	adds	r3, #4
 800684a:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3304      	adds	r3, #4
 8006850:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	3b01      	subs	r3, #1
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1ef      	bne.n	800683e <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d101      	bne.n	8006890 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800688c:	2302      	movs	r3, #2
 800688e:	e018      	b.n	80068c2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 fa5f 	bl	8007d64 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d104      	bne.n	80068b8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2205      	movs	r2, #5
 80068b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80068b6:	e003      	b.n	80068c0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e01d      	b.n	8006918 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f00c fd3d 	bl	8013370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f000 fa4b 	bl	8006da4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	68d2      	ldr	r2, [r2, #12]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b02      	cmp	r3, #2
 800696a:	d122      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d11b      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f06f 0202 	mvn.w	r2, #2
 8006982:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9e5 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 800699e:	e005      	b.n	80069ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f9d7 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9e8 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d122      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d11b      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f06f 0204 	mvn.w	r2, #4
 80069d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9bb 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 80069f2:	e005      	b.n	8006a00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9ad 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9be 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d122      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d11b      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0208 	mvn.w	r2, #8
 8006a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f991 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006a46:	e005      	b.n	8006a54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f983 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f994 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d122      	bne.n	8006aae <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d11b      	bne.n	8006aae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f06f 0210 	mvn.w	r2, #16
 8006a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2208      	movs	r2, #8
 8006a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f967 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006a9a:	e005      	b.n	8006aa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f959 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f96a 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0201 	mvn.w	r2, #1
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f00c f9dd 	bl	8012e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae4:	2b80      	cmp	r3, #128	; 0x80
 8006ae6:	d10e      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d107      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fb07 	bl	8007114 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d10e      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d107      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 faf0 	bl	8007114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d10e      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b40      	cmp	r3, #64	; 0x40
 8006b4e:	d107      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f918 	bl	8006d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d10e      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0220 	mvn.w	r2, #32
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 faba 	bl	8007100 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e0c8      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4b60      	ldr	r3, [pc, #384]	; (8006d4c <HAL_TIM_ConfigClockSource+0x1b8>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d077      	beq.n	8006cd8 <HAL_TIM_ConfigClockSource+0x144>
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d80e      	bhi.n	8006c0a <HAL_TIM_ConfigClockSource+0x76>
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	f000 808a 	beq.w	8006d06 <HAL_TIM_ConfigClockSource+0x172>
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d802      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x68>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d07e      	beq.n	8006cf8 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8006bfa:	e099      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	f000 8089 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x180>
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	f000 808d 	beq.w	8006d22 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8006c08:	e092      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006c0a:	2b70      	cmp	r3, #112	; 0x70
 8006c0c:	d016      	beq.n	8006c3c <HAL_TIM_ConfigClockSource+0xa8>
 8006c0e:	2b70      	cmp	r3, #112	; 0x70
 8006c10:	d804      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x88>
 8006c12:	2b50      	cmp	r3, #80	; 0x50
 8006c14:	d040      	beq.n	8006c98 <HAL_TIM_ConfigClockSource+0x104>
 8006c16:	2b60      	cmp	r3, #96	; 0x60
 8006c18:	d04e      	beq.n	8006cb8 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8006c1a:	e089      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x96>
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d024      	beq.n	8006c72 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8006c28:	e082      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6899      	ldr	r1, [r3, #8]
 8006c34:	4b46      	ldr	r3, [pc, #280]	; (8006d50 <HAL_TIM_ConfigClockSource+0x1bc>)
 8006c36:	400b      	ands	r3, r1
 8006c38:	6093      	str	r3, [r2, #8]
    break;
 8006c3a:	e079      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	6899      	ldr	r1, [r3, #8]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f000 f9e1 	bl	8007012 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <HAL_TIM_ConfigClockSource+0x1b8>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	609a      	str	r2, [r3, #8]
    break;
 8006c70:	e05e      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6899      	ldr	r1, [r3, #8]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f000 f9c6 	bl	8007012 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	6892      	ldr	r2, [r2, #8]
 8006c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c94:	609a      	str	r2, [r3, #8]
    break;
 8006c96:	e04b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6859      	ldr	r1, [r3, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f000 f92d 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2150      	movs	r1, #80	; 0x50
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 f98e 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006cb6:	e03b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	6859      	ldr	r1, [r3, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f000 f950 	bl	8006f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2160      	movs	r1, #96	; 0x60
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f97e 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006cd6:	e02b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	6859      	ldr	r1, [r3, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f000 f90d 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2140      	movs	r1, #64	; 0x40
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f96e 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006cf6:	e01b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f967 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d04:	e014      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2110      	movs	r1, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f960 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d12:	e00d      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2120      	movs	r1, #32
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f959 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d20:	e006      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2130      	movs	r1, #48	; 0x30
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f952 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	fffeff88 	.word	0xfffeff88
 8006d50:	fffefff8 	.word	0xfffefff8

08006d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a47      	ldr	r2, [pc, #284]	; (8006ed8 <TIM_Base_SetConfig+0x134>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d00f      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a44      	ldr	r2, [pc, #272]	; (8006edc <TIM_Base_SetConfig+0x138>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a43      	ldr	r2, [pc, #268]	; (8006ee0 <TIM_Base_SetConfig+0x13c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d007      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a42      	ldr	r2, [pc, #264]	; (8006ee4 <TIM_Base_SetConfig+0x140>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a41      	ldr	r2, [pc, #260]	; (8006ee8 <TIM_Base_SetConfig+0x144>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d101      	bne.n	8006dec <TIM_Base_SetConfig+0x48>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <TIM_Base_SetConfig+0x4a>
 8006dec:	2300      	movs	r3, #0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a34      	ldr	r2, [pc, #208]	; (8006ed8 <TIM_Base_SetConfig+0x134>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d02b      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e12:	d027      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a31      	ldr	r2, [pc, #196]	; (8006edc <TIM_Base_SetConfig+0x138>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d023      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a30      	ldr	r2, [pc, #192]	; (8006ee0 <TIM_Base_SetConfig+0x13c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d01f      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a2f      	ldr	r2, [pc, #188]	; (8006ee4 <TIM_Base_SetConfig+0x140>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01b      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <TIM_Base_SetConfig+0x144>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d017      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a2d      	ldr	r2, [pc, #180]	; (8006eec <TIM_Base_SetConfig+0x148>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d013      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a2c      	ldr	r2, [pc, #176]	; (8006ef0 <TIM_Base_SetConfig+0x14c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00f      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <TIM_Base_SetConfig+0x150>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00b      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <TIM_Base_SetConfig+0x154>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d007      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a29      	ldr	r2, [pc, #164]	; (8006efc <TIM_Base_SetConfig+0x158>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a28      	ldr	r2, [pc, #160]	; (8006f00 <TIM_Base_SetConfig+0x15c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d101      	bne.n	8006e68 <TIM_Base_SetConfig+0xc4>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <TIM_Base_SetConfig+0xc6>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <TIM_Base_SetConfig+0x134>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_Base_SetConfig+0x110>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <TIM_Base_SetConfig+0x144>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d101      	bne.n	8006eb8 <TIM_Base_SetConfig+0x114>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <TIM_Base_SetConfig+0x116>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	615a      	str	r2, [r3, #20]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400
 8006ee0:	40000800 	.word	0x40000800
 8006ee4:	40000c00 	.word	0x40000c00
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800
 8006ef8:	40001800 	.word	0x40001800
 8006efc:	40001c00 	.word	0x40001c00
 8006f00:	40002000 	.word	0x40002000

08006f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f023 0201 	bic.w	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f023 030a 	bic.w	r3, r3, #10
 8006f48:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b087      	sub	sp, #28
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006ff0:	887b      	ldrh	r3, [r7, #2]
 8006ff2:	f043 0307 	orr.w	r3, r3, #7
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	609a      	str	r2, [r3, #8]
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007030:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	021a      	lsls	r2, r3, #8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	431a      	orrs	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4313      	orrs	r3, r2
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	609a      	str	r2, [r3, #8]
} 
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800706c:	2302      	movs	r3, #2
 800706e:	e03d      	b.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a19      	ldr	r2, [pc, #100]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
} 
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40010000 	.word	0x40010000
 80070fc:	40010400 	.word	0x40010400

08007100 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e043      	b.n	80071c2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f00c f950 	bl	80133f4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	; 0x24
 8007158:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f9c3 	bl	80074f8 <UART_SetConfig>
 8007172:	4603      	mov	r3, r0
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e022      	b.n	80071c2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc25 	bl	80079d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	6852      	ldr	r2, [r2, #4]
 8007194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	6892      	ldr	r2, [r2, #8]
 80071a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fcac 	bl	8007b18 <UART_CheckIdleState>
 80071c0:	4603      	mov	r3, r0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b088      	sub	sp, #32
 80071ce:	af02      	add	r7, sp, #8
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	4613      	mov	r3, r2
 80071d8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d175      	bne.n	80072d6 <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_UART_Transmit+0x2c>
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e06e      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_UART_Transmit+0x3e>
 8007204:	2302      	movs	r3, #2
 8007206:	e067      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2221      	movs	r2, #33	; 0x21
 800721a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800721e:	f7fa fd07 	bl	8001c30 <HAL_GetTick>
 8007222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8007234:	e032      	b.n	800729c <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2200      	movs	r2, #0
 8007250:	2180      	movs	r1, #128	; 0x80
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f906 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e03a      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	d110      	bne.n	800728e <HAL_UART_Transmit+0xc4>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10c      	bne.n	800728e <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007284:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3302      	adds	r3, #2
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	e006      	b.n	800729c <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1c6      	bne.n	8007236 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2200      	movs	r2, #0
 80072b0:	2140      	movs	r1, #64	; 0x40
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f8d6 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e00a      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e000      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80072d6:	2302      	movs	r3, #2
  }
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	f040 80ac 	bne.w	800745a <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_UART_Receive+0x2e>
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e0a4      	b.n	800745c <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_UART_Receive+0x40>
 800731c:	2302      	movs	r3, #2
 800731e:	e09d      	b.n	800745c <HAL_UART_Receive+0x17c>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2222      	movs	r2, #34	; 0x22
 8007332:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007336:	f7fa fc7b 	bl	8001c30 <HAL_GetTick>
 800733a:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	88fa      	ldrh	r2, [r7, #6]
 8007348:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007354:	d10e      	bne.n	8007374 <HAL_UART_Receive+0x94>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d105      	bne.n	800736a <HAL_UART_Receive+0x8a>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007368:	e028      	b.n	80073bc <HAL_UART_Receive+0xdc>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	22ff      	movs	r2, #255	; 0xff
 800736e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007372:	e023      	b.n	80073bc <HAL_UART_Receive+0xdc>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <HAL_UART_Receive+0xb8>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d104      	bne.n	800738e <HAL_UART_Receive+0xae>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	22ff      	movs	r2, #255	; 0xff
 8007388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800738c:	e016      	b.n	80073bc <HAL_UART_Receive+0xdc>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	227f      	movs	r2, #127	; 0x7f
 8007392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007396:	e011      	b.n	80073bc <HAL_UART_Receive+0xdc>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073a0:	d10c      	bne.n	80073bc <HAL_UART_Receive+0xdc>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <HAL_UART_Receive+0xd4>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	227f      	movs	r2, #127	; 0x7f
 80073ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073b2:	e003      	b.n	80073bc <HAL_UART_Receive+0xdc>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	223f      	movs	r2, #63	; 0x3f
 80073b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073c2:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80073c4:	e039      	b.n	800743a <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	2200      	movs	r2, #0
 80073e0:	2120      	movs	r1, #32
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f83e 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e034      	b.n	800745c <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	d112      	bne.n	8007422 <HAL_UART_Receive+0x142>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10e      	bne.n	8007422 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	b29a      	uxth	r2, r3
 8007410:	8b7b      	ldrh	r3, [r7, #26]
 8007412:	4013      	ands	r3, r2
 8007414:	b29a      	uxth	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	3302      	adds	r3, #2
 800741e:	60bb      	str	r3, [r7, #8]
 8007420:	e00b      	b.n	800743a <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	60ba      	str	r2, [r7, #8]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	6812      	ldr	r2, [r2, #0]
 800742c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800742e:	b2d1      	uxtb	r1, r2
 8007430:	8b7a      	ldrh	r2, [r7, #26]
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	400a      	ands	r2, r1
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1bf      	bne.n	80073c6 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e000      	b.n	800745c <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007474:	e02c      	b.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d028      	beq.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <UART_WaitOnFlagUntilTimeout+0x30>
 8007484:	f7fa fbd4 	bl	8001c30 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	1ad2      	subs	r2, r2, r3
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	429a      	cmp	r2, r3
 8007492:	d31d      	bcc.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	6892      	ldr	r2, [r2, #8]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e00f      	b.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69da      	ldr	r2, [r3, #28]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	401a      	ands	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d0c3      	beq.n	8007476 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007504:	2310      	movs	r3, #16
 8007506:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8007508:	2300      	movs	r3, #0
 800750a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800750c:	2300      	movs	r3, #0
 800750e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6819      	ldr	r1, [r3, #0]
 8007536:	4baa      	ldr	r3, [pc, #680]	; (80077e0 <UART_SetConfig+0x2e8>)
 8007538:	400b      	ands	r3, r1
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	430b      	orrs	r3, r1
 800753e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	6852      	ldr	r2, [r2, #4]
 800754a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68d2      	ldr	r2, [r2, #12]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	6892      	ldr	r2, [r2, #8]
 800756c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	430a      	orrs	r2, r1
 8007574:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a9a      	ldr	r2, [pc, #616]	; (80077e4 <UART_SetConfig+0x2ec>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d11f      	bne.n	80075c0 <UART_SetConfig+0xc8>
 8007580:	4b99      	ldr	r3, [pc, #612]	; (80077e8 <UART_SetConfig+0x2f0>)
 8007582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	2b03      	cmp	r3, #3
 800758c:	f200 813e 	bhi.w	800780c <UART_SetConfig+0x314>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0xa0>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075b5 	.word	0x080075b5
 80075a0:	080075af 	.word	0x080075af
 80075a4:	080075bb 	.word	0x080075bb
 80075a8:	2301      	movs	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]
 80075ac:	e12e      	b.n	800780c <UART_SetConfig+0x314>
 80075ae:	2302      	movs	r3, #2
 80075b0:	75fb      	strb	r3, [r7, #23]
 80075b2:	e12b      	b.n	800780c <UART_SetConfig+0x314>
 80075b4:	2304      	movs	r3, #4
 80075b6:	75fb      	strb	r3, [r7, #23]
 80075b8:	e128      	b.n	800780c <UART_SetConfig+0x314>
 80075ba:	2308      	movs	r3, #8
 80075bc:	75fb      	strb	r3, [r7, #23]
 80075be:	e125      	b.n	800780c <UART_SetConfig+0x314>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a89      	ldr	r2, [pc, #548]	; (80077ec <UART_SetConfig+0x2f4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d130      	bne.n	800762c <UART_SetConfig+0x134>
 80075ca:	4b87      	ldr	r3, [pc, #540]	; (80077e8 <UART_SetConfig+0x2f0>)
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	f003 030c 	and.w	r3, r3, #12
 80075d4:	2b0c      	cmp	r3, #12
 80075d6:	f200 8119 	bhi.w	800780c <UART_SetConfig+0x314>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <UART_SetConfig+0xe8>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	08007615 	.word	0x08007615
 80075e4:	0800780d 	.word	0x0800780d
 80075e8:	0800780d 	.word	0x0800780d
 80075ec:	0800780d 	.word	0x0800780d
 80075f0:	08007621 	.word	0x08007621
 80075f4:	0800780d 	.word	0x0800780d
 80075f8:	0800780d 	.word	0x0800780d
 80075fc:	0800780d 	.word	0x0800780d
 8007600:	0800761b 	.word	0x0800761b
 8007604:	0800780d 	.word	0x0800780d
 8007608:	0800780d 	.word	0x0800780d
 800760c:	0800780d 	.word	0x0800780d
 8007610:	08007627 	.word	0x08007627
 8007614:	2300      	movs	r3, #0
 8007616:	75fb      	strb	r3, [r7, #23]
 8007618:	e0f8      	b.n	800780c <UART_SetConfig+0x314>
 800761a:	2302      	movs	r3, #2
 800761c:	75fb      	strb	r3, [r7, #23]
 800761e:	e0f5      	b.n	800780c <UART_SetConfig+0x314>
 8007620:	2304      	movs	r3, #4
 8007622:	75fb      	strb	r3, [r7, #23]
 8007624:	e0f2      	b.n	800780c <UART_SetConfig+0x314>
 8007626:	2308      	movs	r3, #8
 8007628:	75fb      	strb	r3, [r7, #23]
 800762a:	e0ef      	b.n	800780c <UART_SetConfig+0x314>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a6f      	ldr	r2, [pc, #444]	; (80077f0 <UART_SetConfig+0x2f8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d11c      	bne.n	8007670 <UART_SetConfig+0x178>
 8007636:	4b6c      	ldr	r3, [pc, #432]	; (80077e8 <UART_SetConfig+0x2f0>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007640:	2b10      	cmp	r3, #16
 8007642:	d00f      	beq.n	8007664 <UART_SetConfig+0x16c>
 8007644:	2b10      	cmp	r3, #16
 8007646:	d802      	bhi.n	800764e <UART_SetConfig+0x156>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <UART_SetConfig+0x160>
 800764c:	e0de      	b.n	800780c <UART_SetConfig+0x314>
 800764e:	2b20      	cmp	r3, #32
 8007650:	d005      	beq.n	800765e <UART_SetConfig+0x166>
 8007652:	2b30      	cmp	r3, #48	; 0x30
 8007654:	d009      	beq.n	800766a <UART_SetConfig+0x172>
 8007656:	e0d9      	b.n	800780c <UART_SetConfig+0x314>
 8007658:	2300      	movs	r3, #0
 800765a:	75fb      	strb	r3, [r7, #23]
 800765c:	e0d6      	b.n	800780c <UART_SetConfig+0x314>
 800765e:	2302      	movs	r3, #2
 8007660:	75fb      	strb	r3, [r7, #23]
 8007662:	e0d3      	b.n	800780c <UART_SetConfig+0x314>
 8007664:	2304      	movs	r3, #4
 8007666:	75fb      	strb	r3, [r7, #23]
 8007668:	e0d0      	b.n	800780c <UART_SetConfig+0x314>
 800766a:	2308      	movs	r3, #8
 800766c:	75fb      	strb	r3, [r7, #23]
 800766e:	e0cd      	b.n	800780c <UART_SetConfig+0x314>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a5f      	ldr	r2, [pc, #380]	; (80077f4 <UART_SetConfig+0x2fc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d11c      	bne.n	80076b4 <UART_SetConfig+0x1bc>
 800767a:	4b5b      	ldr	r3, [pc, #364]	; (80077e8 <UART_SetConfig+0x2f0>)
 800767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007680:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d00f      	beq.n	80076a8 <UART_SetConfig+0x1b0>
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d802      	bhi.n	8007692 <UART_SetConfig+0x19a>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <UART_SetConfig+0x1a4>
 8007690:	e0bc      	b.n	800780c <UART_SetConfig+0x314>
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d005      	beq.n	80076a2 <UART_SetConfig+0x1aa>
 8007696:	2bc0      	cmp	r3, #192	; 0xc0
 8007698:	d009      	beq.n	80076ae <UART_SetConfig+0x1b6>
 800769a:	e0b7      	b.n	800780c <UART_SetConfig+0x314>
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]
 80076a0:	e0b4      	b.n	800780c <UART_SetConfig+0x314>
 80076a2:	2302      	movs	r3, #2
 80076a4:	75fb      	strb	r3, [r7, #23]
 80076a6:	e0b1      	b.n	800780c <UART_SetConfig+0x314>
 80076a8:	2304      	movs	r3, #4
 80076aa:	75fb      	strb	r3, [r7, #23]
 80076ac:	e0ae      	b.n	800780c <UART_SetConfig+0x314>
 80076ae:	2308      	movs	r3, #8
 80076b0:	75fb      	strb	r3, [r7, #23]
 80076b2:	e0ab      	b.n	800780c <UART_SetConfig+0x314>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a4f      	ldr	r2, [pc, #316]	; (80077f8 <UART_SetConfig+0x300>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d120      	bne.n	8007700 <UART_SetConfig+0x208>
 80076be:	4b4a      	ldr	r3, [pc, #296]	; (80077e8 <UART_SetConfig+0x2f0>)
 80076c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076cc:	d012      	beq.n	80076f4 <UART_SetConfig+0x1fc>
 80076ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d2:	d802      	bhi.n	80076da <UART_SetConfig+0x1e2>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <UART_SetConfig+0x1f0>
 80076d8:	e098      	b.n	800780c <UART_SetConfig+0x314>
 80076da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076de:	d006      	beq.n	80076ee <UART_SetConfig+0x1f6>
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e4:	d009      	beq.n	80076fa <UART_SetConfig+0x202>
 80076e6:	e091      	b.n	800780c <UART_SetConfig+0x314>
 80076e8:	2300      	movs	r3, #0
 80076ea:	75fb      	strb	r3, [r7, #23]
 80076ec:	e08e      	b.n	800780c <UART_SetConfig+0x314>
 80076ee:	2302      	movs	r3, #2
 80076f0:	75fb      	strb	r3, [r7, #23]
 80076f2:	e08b      	b.n	800780c <UART_SetConfig+0x314>
 80076f4:	2304      	movs	r3, #4
 80076f6:	75fb      	strb	r3, [r7, #23]
 80076f8:	e088      	b.n	800780c <UART_SetConfig+0x314>
 80076fa:	2308      	movs	r3, #8
 80076fc:	75fb      	strb	r3, [r7, #23]
 80076fe:	e085      	b.n	800780c <UART_SetConfig+0x314>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a3d      	ldr	r2, [pc, #244]	; (80077fc <UART_SetConfig+0x304>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d120      	bne.n	800774c <UART_SetConfig+0x254>
 800770a:	4b37      	ldr	r3, [pc, #220]	; (80077e8 <UART_SetConfig+0x2f0>)
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007718:	d012      	beq.n	8007740 <UART_SetConfig+0x248>
 800771a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771e:	d802      	bhi.n	8007726 <UART_SetConfig+0x22e>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <UART_SetConfig+0x23c>
 8007724:	e072      	b.n	800780c <UART_SetConfig+0x314>
 8007726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772a:	d006      	beq.n	800773a <UART_SetConfig+0x242>
 800772c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007730:	d009      	beq.n	8007746 <UART_SetConfig+0x24e>
 8007732:	e06b      	b.n	800780c <UART_SetConfig+0x314>
 8007734:	2301      	movs	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
 8007738:	e068      	b.n	800780c <UART_SetConfig+0x314>
 800773a:	2302      	movs	r3, #2
 800773c:	75fb      	strb	r3, [r7, #23]
 800773e:	e065      	b.n	800780c <UART_SetConfig+0x314>
 8007740:	2304      	movs	r3, #4
 8007742:	75fb      	strb	r3, [r7, #23]
 8007744:	e062      	b.n	800780c <UART_SetConfig+0x314>
 8007746:	2308      	movs	r3, #8
 8007748:	75fb      	strb	r3, [r7, #23]
 800774a:	e05f      	b.n	800780c <UART_SetConfig+0x314>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2b      	ldr	r2, [pc, #172]	; (8007800 <UART_SetConfig+0x308>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d120      	bne.n	8007798 <UART_SetConfig+0x2a0>
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <UART_SetConfig+0x2f0>)
 8007758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007764:	d012      	beq.n	800778c <UART_SetConfig+0x294>
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	d802      	bhi.n	8007772 <UART_SetConfig+0x27a>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <UART_SetConfig+0x288>
 8007770:	e04c      	b.n	800780c <UART_SetConfig+0x314>
 8007772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007776:	d006      	beq.n	8007786 <UART_SetConfig+0x28e>
 8007778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800777c:	d009      	beq.n	8007792 <UART_SetConfig+0x29a>
 800777e:	e045      	b.n	800780c <UART_SetConfig+0x314>
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
 8007784:	e042      	b.n	800780c <UART_SetConfig+0x314>
 8007786:	2302      	movs	r3, #2
 8007788:	75fb      	strb	r3, [r7, #23]
 800778a:	e03f      	b.n	800780c <UART_SetConfig+0x314>
 800778c:	2304      	movs	r3, #4
 800778e:	75fb      	strb	r3, [r7, #23]
 8007790:	e03c      	b.n	800780c <UART_SetConfig+0x314>
 8007792:	2308      	movs	r3, #8
 8007794:	75fb      	strb	r3, [r7, #23]
 8007796:	e039      	b.n	800780c <UART_SetConfig+0x314>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a19      	ldr	r2, [pc, #100]	; (8007804 <UART_SetConfig+0x30c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d135      	bne.n	800780e <UART_SetConfig+0x316>
 80077a2:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <UART_SetConfig+0x2f0>)
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80077ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b0:	d012      	beq.n	80077d8 <UART_SetConfig+0x2e0>
 80077b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b6:	d802      	bhi.n	80077be <UART_SetConfig+0x2c6>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <UART_SetConfig+0x2d4>
 80077bc:	e026      	b.n	800780c <UART_SetConfig+0x314>
 80077be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c2:	d006      	beq.n	80077d2 <UART_SetConfig+0x2da>
 80077c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80077c8:	d01e      	beq.n	8007808 <UART_SetConfig+0x310>
 80077ca:	e01f      	b.n	800780c <UART_SetConfig+0x314>
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
 80077d0:	e01c      	b.n	800780c <UART_SetConfig+0x314>
 80077d2:	2302      	movs	r3, #2
 80077d4:	75fb      	strb	r3, [r7, #23]
 80077d6:	e019      	b.n	800780c <UART_SetConfig+0x314>
 80077d8:	2304      	movs	r3, #4
 80077da:	75fb      	strb	r3, [r7, #23]
 80077dc:	e016      	b.n	800780c <UART_SetConfig+0x314>
 80077de:	bf00      	nop
 80077e0:	efff69f3 	.word	0xefff69f3
 80077e4:	40011000 	.word	0x40011000
 80077e8:	40023800 	.word	0x40023800
 80077ec:	40004400 	.word	0x40004400
 80077f0:	40004800 	.word	0x40004800
 80077f4:	40004c00 	.word	0x40004c00
 80077f8:	40005000 	.word	0x40005000
 80077fc:	40011400 	.word	0x40011400
 8007800:	40007800 	.word	0x40007800
 8007804:	40007c00 	.word	0x40007c00
 8007808:	2308      	movs	r3, #8
 800780a:	75fb      	strb	r3, [r7, #23]
 800780c:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007816:	d16c      	bne.n	80078f2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b08      	cmp	r3, #8
 800781c:	d854      	bhi.n	80078c8 <UART_SetConfig+0x3d0>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <UART_SetConfig+0x32c>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007849 	.word	0x08007849
 8007828:	08007865 	.word	0x08007865
 800782c:	08007881 	.word	0x08007881
 8007830:	080078c9 	.word	0x080078c9
 8007834:	08007897 	.word	0x08007897
 8007838:	080078c9 	.word	0x080078c9
 800783c:	080078c9 	.word	0x080078c9
 8007840:	080078c9 	.word	0x080078c9
 8007844:	080078b3 	.word	0x080078b3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007848:	f7fe fb16 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 800784c:	4603      	mov	r3, r0
 800784e:	005a      	lsls	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	441a      	add	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007860:	82bb      	strh	r3, [r7, #20]
      break;
 8007862:	e034      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007864:	f7fe fb1c 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 8007868:	4603      	mov	r3, r0
 800786a:	005a      	lsls	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	441a      	add	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	82bb      	strh	r3, [r7, #20]
      break;
 800787e:	e026      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	085a      	lsrs	r2, r3, #1
 8007886:	4b51      	ldr	r3, [pc, #324]	; (80079cc <UART_SetConfig+0x4d4>)
 8007888:	4413      	add	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007892:	82bb      	strh	r3, [r7, #20]
      break;
 8007894:	e01b      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007896:	f7fe fa2d 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 800789a:	4603      	mov	r3, r0
 800789c:	005a      	lsls	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	441a      	add	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	82bb      	strh	r3, [r7, #20]
      break;
 80078b0:	e00d      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	82bb      	strh	r3, [r7, #20]
      break;
 80078c6:	e002      	b.n	80078ce <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	74fb      	strb	r3, [r7, #19]
      break;
 80078cc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80078ce:	8abb      	ldrh	r3, [r7, #20]
 80078d0:	f023 030f 	bic.w	r3, r3, #15
 80078d4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d6:	8abb      	ldrh	r3, [r7, #20]
 80078d8:	105b      	asrs	r3, r3, #1
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	897b      	ldrh	r3, [r7, #10]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	897a      	ldrh	r2, [r7, #10]
 80078ee:	60da      	str	r2, [r3, #12]
 80078f0:	e067      	b.n	80079c2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d861      	bhi.n	80079bc <UART_SetConfig+0x4c4>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <UART_SetConfig+0x408>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007925 	.word	0x08007925
 8007904:	08007945 	.word	0x08007945
 8007908:	08007965 	.word	0x08007965
 800790c:	080079bd 	.word	0x080079bd
 8007910:	08007981 	.word	0x08007981
 8007914:	080079bd 	.word	0x080079bd
 8007918:	080079bd 	.word	0x080079bd
 800791c:	080079bd 	.word	0x080079bd
 8007920:	080079a1 	.word	0x080079a1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681c      	ldr	r4, [r3, #0]
 8007928:	f7fe faa6 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	441a      	add	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	fbb2 f3f3 	udiv	r3, r2, r3
 800793e:	b29b      	uxth	r3, r3
 8007940:	60e3      	str	r3, [r4, #12]
      break;
 8007942:	e03e      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681c      	ldr	r4, [r3, #0]
 8007948:	f7fe faaa 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	441a      	add	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	fbb2 f3f3 	udiv	r3, r2, r3
 800795e:	b29b      	uxth	r3, r3
 8007960:	60e3      	str	r3, [r4, #12]
      break;
 8007962:	e02e      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	0859      	lsrs	r1, r3, #1
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <UART_SetConfig+0x4d8>)
 8007970:	440b      	add	r3, r1
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	6849      	ldr	r1, [r1, #4]
 8007976:	fbb3 f3f1 	udiv	r3, r3, r1
 800797a:	b29b      	uxth	r3, r3
 800797c:	60d3      	str	r3, [r2, #12]
      break;
 800797e:	e020      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681c      	ldr	r4, [r3, #0]
 8007984:	f7fe f9b6 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	441a      	add	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	fbb2 f3f3 	udiv	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	60e3      	str	r3, [r4, #12]
      break;
 800799e:	e010      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6852      	ldr	r2, [r2, #4]
 80079a8:	0852      	lsrs	r2, r2, #1
 80079aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6852      	ldr	r2, [r2, #4]
 80079b2:	fbb1 f2f2 	udiv	r2, r1, r2
 80079b6:	b292      	uxth	r2, r2
 80079b8:	60da      	str	r2, [r3, #12]
      break;
 80079ba:	e002      	b.n	80079c2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	74fb      	strb	r3, [r7, #19]
      break;
 80079c0:	bf00      	nop
    }
  }

  return ret;
 80079c2:	7cfb      	ldrb	r3, [r7, #19]

}
 80079c4:	4618      	mov	r0, r3
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	01e84800 	.word	0x01e84800
 80079d0:	00f42400 	.word	0x00f42400

080079d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	6852      	ldr	r2, [r2, #4]
 80079f2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	6852      	ldr	r2, [r2, #4]
 8007a14:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	6852      	ldr	r2, [r2, #4]
 8007a36:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6812      	ldr	r2, [r2, #0]
 8007a56:	6852      	ldr	r2, [r2, #4]
 8007a58:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	6892      	ldr	r2, [r2, #8]
 8007a7a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	6892      	ldr	r2, [r2, #8]
 8007a9c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01a      	beq.n	8007aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	6852      	ldr	r2, [r2, #4]
 8007abe:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad2:	d10a      	bne.n	8007aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	6852      	ldr	r2, [r2, #4]
 8007ade:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	6852      	ldr	r2, [r2, #4]
 8007b00:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b2a:	f7fa f881 	bl	8001c30 <HAL_GetTick>
 8007b2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d10e      	bne.n	8007b5c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff fc89 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e00c      	b.n	8007b76 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d027      	beq.n	8007bea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4b2f      	ldr	r3, [pc, #188]	; (8007c60 <FMC_SDRAM_Init+0xe0>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007bb0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007bb6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007bbc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007bc2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007bc8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007bce:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007bd4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007bda:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e032      	b.n	8007c50 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bf6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007c00:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007c06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <FMC_SDRAM_Init+0xe0>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007c2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007c30:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007c36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007c3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	ffff8000 	.word	0xffff8000

08007c64 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d02e      	beq.n	8007cdc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c8a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007c9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007ca4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007cae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007cb8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007cc2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	609a      	str	r2, [r3, #8]
 8007cda:	e039      	b.n	8007d50 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <FMC_SDRAM_Timing_Init+0xfc>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d0e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007d28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007d32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	ff0f0fff 	.word	0xff0f0fff

08007d64 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d7c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007d86:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007da8:	b084      	sub	sp, #16
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	f107 0014 	add.w	r0, r7, #20
 8007db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d11e      	bne.n	8007dfe <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <USB_CoreInit+0xa0>)
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8007de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d105      	bne.n	8007df6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f940 	bl	800807c <USB_CoreReset>
 8007dfc:	e00c      	b.n	8007e18 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f936 	bl	800807c <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d10b      	bne.n	8007e36 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f043 0206 	orr.w	r2, r3, #6
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f043 0220 	orr.w	r2, r3, #32
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e42:	b004      	add	sp, #16
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	ffbdffbf 	.word	0xffbdffbf

08007e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f043 0201 	orr.w	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d106      	bne.n	8007ebc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	e008      	b.n	8007ece <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8007ece:	2032      	movs	r0, #50	; 0x32
 8007ed0:	f7f9 feba 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	019b      	lsls	r3, r3, #6
 8007ef2:	f043 0220 	orr.w	r2, r3, #32
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a09      	ldr	r2, [pc, #36]	; (8007f28 <USB_FlushTxFifo+0x48>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d901      	bls.n	8007f0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e006      	b.n	8007f1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d0f0      	beq.n	8007efa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	00030d40 	.word	0x00030d40

08007f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4a09      	ldr	r2, [pc, #36]	; (8007f6c <USB_FlushRxFifo+0x40>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d901      	bls.n	8007f50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e006      	b.n	8007f5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d0f0      	beq.n	8007f3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	00030d40 	.word	0x00030d40

08007f70 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	460b      	mov	r3, r1
 8007f80:	71fb      	strb	r3, [r7, #7]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8007f8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d11d      	bne.n	8007fd2 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 8007f96:	88bb      	ldrh	r3, [r7, #4]
 8007f98:	3303      	adds	r3, #3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da00      	bge.n	8007fa0 <USB_WritePacket+0x30>
 8007f9e:	3303      	adds	r3, #3
 8007fa0:	109b      	asrs	r3, r3, #2
 8007fa2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e00f      	b.n	8007fca <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	031a      	lsls	r2, r3, #12
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d3eb      	bcc.n	8007faa <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8007ff2:	88fb      	ldrh	r3, [r7, #6]
 8007ff4:	3303      	adds	r3, #3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da00      	bge.n	8007ffc <USB_ReadPacket+0x1c>
 8007ffa:	3303      	adds	r3, #3
 8007ffc:	109b      	asrs	r3, r3, #2
 8007ffe:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	e00b      	b.n	800801e <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	3301      	adds	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3304      	adds	r3, #4
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	429a      	cmp	r2, r3
 8008024:	d3ef      	bcc.n	8008006 <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 8008026:	68bb      	ldr	r3, [r7, #8]
}
 8008028:	4618      	mov	r0, r3
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  return v;
 8008050:	68fb      	ldr	r3, [r7, #12]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0301 	and.w	r3, r3, #1
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4a13      	ldr	r2, [pc, #76]	; (80080e0 <USB_CoreReset+0x64>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d901      	bls.n	800809a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e01b      	b.n	80080d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	daf2      	bge.n	8008088 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f043 0201 	orr.w	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <USB_CoreReset+0x64>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d901      	bls.n	80080c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e006      	b.n	80080d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d0f0      	beq.n	80080b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	00030d40 	.word	0x00030d40

080080e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080e4:	b084      	sub	sp, #16
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	f107 001c 	add.w	r0, r7, #28
 80080f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080fc:	461a      	mov	r2, r3
 80080fe:	2300      	movs	r3, #0
 8008100:	6013      	str	r3, [r2, #0]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	2b03      	cmp	r3, #3
 8008112:	d10f      	bne.n	8008134 <USB_HostInit+0x50>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800811a:	d00b      	beq.n	8008134 <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f043 0304 	orr.w	r3, r3, #4
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e00a      	b.n	800814a <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f023 0304 	bic.w	r3, r3, #4
 8008148:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
 800814a:	2110      	movs	r1, #16
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fec7 	bl	8007ee0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff feea 	bl	8007f2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0; i < cfg.Host_channels; i++)
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	e015      	b.n	800818a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFF;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	461a      	mov	r2, r3
 800816c:	f04f 33ff 	mov.w	r3, #4294967295
 8008170:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817e:	461a      	mov	r2, r3
 8008180:	2300      	movs	r3, #0
 8008182:	60d3      	str	r3, [r2, #12]
  for (i = 0; i < cfg.Host_channels; i++)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	6a3a      	ldr	r2, [r7, #32]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	429a      	cmp	r2, r3
 8008190:	d8e5      	bhi.n	800815e <USB_HostInit+0x7a>
  }

  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1);
 8008192:	2101      	movs	r1, #1
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8a7 	bl	80082e8 <USB_DriveVbus>

  HAL_Delay(200);
 800819a:	20c8      	movs	r0, #200	; 0xc8
 800819c:	f7f9 fd54 	bl	8001c48 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFF;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ac:	615a      	str	r2, [r3, #20]

  if(USBx == USB_OTG_FS)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081b4:	d10a      	bne.n	80081cc <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2280      	movs	r2, #128	; 0x80
 80081ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60 << 16)& USB_OTG_NPTXFD) | 0x80);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a14      	ldr	r2, [pc, #80]	; (8008210 <USB_HostInit+0x12c>)
 80081c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a13      	ldr	r2, [pc, #76]	; (8008214 <USB_HostInit+0x130>)
 80081c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80081ca:	e00a      	b.n	80081e2 <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x200;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100 << 16)& USB_OTG_NPTXFD) | 0x200);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a10      	ldr	r2, [pc, #64]	; (8008218 <USB_HostInit+0x134>)
 80081d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a0f      	ldr	r2, [pc, #60]	; (800821c <USB_HostInit+0x138>)
 80081de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f043 0210 	orr.w	r2, r3, #16
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699a      	ldr	r2, [r3, #24]
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <USB_HostInit+0x13c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800820c:	b004      	add	sp, #16
 800820e:	4770      	bx	lr
 8008210:	00600080 	.word	0x00600080
 8008214:	004000e0 	.word	0x004000e0
 8008218:	01000200 	.word	0x01000200
 800821c:	00e00300 	.word	0x00e00300
 8008220:	a3200008 	.word	0xa3200008

08008224 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008236:	461a      	mov	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824c:	4619      	mov	r1, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]

  if (freq ==  HCFG_48_MHZ)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d107      	bne.n	8008276 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800826c:	461a      	mov	r2, r3
 800826e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008272:	6053      	str	r3, [r2, #4]
 8008274:	e009      	b.n	800828a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	2b02      	cmp	r3, #2
 800827a:	d106      	bne.n	800828a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008282:	461a      	mov	r2, r3
 8008284:	f241 7370 	movw	r3, #6000	; 0x1770
 8008288:	6053      	str	r3, [r2, #4]
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USB_ResetPort>:
  * @retval HAL status
  * @note : (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80082b0:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082b8:	461a      	mov	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c0:	6013      	str	r3, [r2, #0]
  HAL_Delay (100);                                /* See Note #1 */
 80082c2:	2064      	movs	r0, #100	; 0x64
 80082c4:	f7f9 fcc0 	bl	8001c48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082ce:	461a      	mov	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d6:	6013      	str	r3, [r2, #0]
  HAL_Delay (10);
 80082d8:	200a      	movs	r0, #10
 80082da:	f7f9 fcb5 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008304:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <USB_DriveVbus+0x3e>
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d107      	bne.n	8008326 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800831c:	461a      	mov	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008324:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800832c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008330:	d10a      	bne.n	8008348 <USB_DriveVbus+0x60>
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d107      	bne.n	8008348 <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800833e:	461a      	mov	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008346:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	0c5b      	lsrs	r3, r3, #17
 800836c:	f003 0303 	and.w	r3, r3, #3
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	b29b      	uxth	r3, r3
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	461a      	mov	r2, r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	70fb      	strb	r3, [r7, #3]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70bb      	strb	r3, [r7, #2]
 80083b2:	4613      	mov	r3, r2
 80083b4:	707b      	strb	r3, [r7, #1]

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c2:	461a      	mov	r2, r3
 80083c4:	f04f 33ff 	mov.w	r3, #4294967295
 80083c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083ca:	7d3b      	ldrb	r3, [r7, #20]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	f200 8086 	bhi.w	80084de <USB_HC_Init+0x142>
 80083d2:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <USB_HC_Init+0x3c>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	08008495 	.word	0x08008495
 80083e0:	080083e9 	.word	0x080083e9
 80083e4:	08008455 	.word	0x08008455
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f4:	461a      	mov	r2, r3
 80083f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80083fa:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;

    if (epnum & 0x80)
 80083fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	da11      	bge.n	8008428 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4413      	add	r3, r2
 800840c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008410:	4619      	mov	r1, r3
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008424:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 8008426:	e055      	b.n	80084d4 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800842e:	d051      	beq.n	80084d4 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843c:	4619      	mov	r1, r3
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4413      	add	r3, r2
 8008446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008450:	60cb      	str	r3, [r1, #12]
    break;
 8008452:	e03f      	b.n	80084d4 <USB_HC_Init+0x138>

  case EP_TYPE_INTR:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008460:	461a      	mov	r2, r3
 8008462:	f240 639d 	movw	r3, #1693	; 0x69d
 8008466:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
 8008468:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800846c:	2b00      	cmp	r3, #0
 800846e:	da33      	bge.n	80084d8 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	4619      	mov	r1, r3
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4413      	add	r3, r2
 8008486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008490:	60cb      	str	r3, [r1, #12]
    }

    break;
 8008492:	e021      	b.n	80084d8 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4413      	add	r3, r2
 800849c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a0:	461a      	mov	r2, r3
 80084a2:	f240 2325 	movw	r3, #549	; 0x225
 80084a6:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
 80084a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	da15      	bge.n	80084dc <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084bc:	4619      	mov	r1, r3
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80084d0:	60cb      	str	r3, [r1, #12]
    }
    break;
 80084d2:	e003      	b.n	80084dc <USB_HC_Init+0x140>
    break;
 80084d4:	bf00      	nop
 80084d6:	e002      	b.n	80084de <USB_HC_Init+0x142>
    break;
 80084d8:	bf00      	nop
 80084da:	e000      	b.n	80084de <USB_HC_Init+0x142>
    break;
 80084dc:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084e4:	4618      	mov	r0, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	2101      	movs	r1, #1
 80084f2:	fa01 f202 	lsl.w	r2, r1, r2
 80084f6:	4313      	orrs	r3, r2
 80084f8:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	4619      	mov	r1, r3
 8008514:	787b      	ldrb	r3, [r7, #1]
 8008516:	059b      	lsls	r3, r3, #22
 8008518:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 800851c:	78bb      	ldrb	r3, [r7, #2]
 800851e:	02db      	lsls	r3, r3, #11
 8008520:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8008524:	431a      	orrs	r2, r3
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8008526:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800852a:	2b00      	cmp	r3, #0
 800852c:	da02      	bge.n	8008534 <USB_HC_Init+0x198>
 800852e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008532:	e000      	b.n	8008536 <USB_HC_Init+0x19a>
 8008534:	2300      	movs	r3, #0
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 8008536:	431a      	orrs	r2, r3
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8008538:	7c3b      	ldrb	r3, [r7, #16]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d102      	bne.n	8008544 <USB_HC_Init+0x1a8>
 800853e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008542:	e000      	b.n	8008546 <USB_HC_Init+0x1aa>
 8008544:	2300      	movs	r3, #0
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8008546:	431a      	orrs	r2, r3
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 8008548:	7d3b      	ldrb	r3, [r7, #20]
 800854a:	049b      	lsls	r3, r3, #18
 800854c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8008550:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8008552:	8b3b      	ldrh	r3, [r7, #24]
 8008554:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 8008558:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 800855a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800855c:	7d3b      	ldrb	r3, [r7, #20]
 800855e:	2b03      	cmp	r3, #3
 8008560:	d110      	bne.n	8008584 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	4619      	mov	r1, r3
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008582:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop

08008594 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af02      	add	r7, sp, #8
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
  static __IO uint32_t tmpreg = 0;
  uint8_t  is_oddframe = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	757b      	strb	r3, [r7, #21]
  uint16_t len_words = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	827b      	strh	r3, [r7, #18]
  uint16_t num_packets = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	82fb      	strh	r3, [r7, #22]
  uint16_t max_hc_pkt_count = 256;
 80085ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085b2:	823b      	strh	r3, [r7, #16]

  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ba:	d02b      	beq.n	8008614 <USB_HC_StartXfer+0x80>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	791b      	ldrb	r3, [r3, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d127      	bne.n	8008614 <USB_HC_StartXfer+0x80>
  {
    if((dma == 0) && (hc->do_ping == 1))
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10b      	bne.n	80085e2 <USB_HC_StartXfer+0x4e>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	795b      	ldrb	r3, [r3, #5]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d107      	bne.n	80085e2 <USB_HC_StartXfer+0x4e>
    {
      USB_DoPing(USBx, hc->ch_num);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fa49 	bl	8008a70 <USB_DoPing>
      return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e123      	b.n	800882a <USB_HC_StartXfer+0x296>
    }
    else if(dma == 1)
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d115      	bne.n	8008614 <USB_HC_StartXfer+0x80>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f6:	4619      	mov	r1, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800860c:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2200      	movs	r2, #0
 8008612:	715a      	strb	r2, [r3, #5]
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d019      	beq.n	8008650 <USB_HC_StartXfer+0xbc>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1) / hc->max_packet;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	8912      	ldrh	r2, [r2, #8]
 8008624:	4413      	add	r3, r2
 8008626:	3b01      	subs	r3, #1
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	8912      	ldrh	r2, [r2, #8]
 800862c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008630:	82fb      	strh	r3, [r7, #22]

    if (num_packets > max_hc_pkt_count)
 8008632:	8afa      	ldrh	r2, [r7, #22]
 8008634:	8a3b      	ldrh	r3, [r7, #16]
 8008636:	429a      	cmp	r2, r3
 8008638:	d90c      	bls.n	8008654 <USB_HC_StartXfer+0xc0>
    {
      num_packets = max_hc_pkt_count;
 800863a:	8a3b      	ldrh	r3, [r7, #16]
 800863c:	82fb      	strh	r3, [r7, #22]
      hc->xfer_len = num_packets * hc->max_packet;
 800863e:	8afb      	ldrh	r3, [r7, #22]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	8912      	ldrh	r2, [r2, #8]
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	461a      	mov	r2, r3
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	611a      	str	r2, [r3, #16]
 800864e:	e001      	b.n	8008654 <USB_HC_StartXfer+0xc0>
    }
  }
  else
  {
    num_packets = 1;
 8008650:	2301      	movs	r3, #1
 8008652:	82fb      	strh	r3, [r7, #22]
  }
  if (hc->ep_is_in)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	78db      	ldrb	r3, [r3, #3]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <USB_HC_StartXfer+0xd8>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 800865c:	8afb      	ldrh	r3, [r7, #22]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	8912      	ldrh	r2, [r2, #8]
 8008662:	fb02 f303 	mul.w	r3, r2, r3
 8008666:	461a      	mov	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867a:	4619      	mov	r1, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8008684:	8afb      	ldrh	r3, [r7, #22]
 8008686:	04db      	lsls	r3, r3, #19
 8008688:	4618      	mov	r0, r3
 800868a:	4b6a      	ldr	r3, [pc, #424]	; (8008834 <USB_HC_StartXfer+0x2a0>)
 800868c:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800868e:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	7a9b      	ldrb	r3, [r3, #10]
 8008694:	075b      	lsls	r3, r3, #29
 8008696:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800869a:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800869c:	610b      	str	r3, [r1, #16]

  if (dma)
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00a      	beq.n	80086ba <USB_HC_StartXfer+0x126>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	785b      	ldrb	r3, [r3, #1]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b2:	461a      	mov	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bf0c      	ite	eq
 80086ca:	2301      	moveq	r3, #1
 80086cc:	2300      	movne	r3, #0
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	757b      	strb	r3, [r7, #21]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	4619      	mov	r1, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086f6:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008706:	4619      	mov	r1, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	7d7a      	ldrb	r2, [r7, #21]
 800871a:	0752      	lsls	r2, r2, #29
 800871c:	4313      	orrs	r3, r2
 800871e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a41      	ldr	r2, [pc, #260]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008732:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008734:	4b40      	ldr	r3, [pc, #256]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800873c:	4a3e      	ldr	r2, [pc, #248]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 800873e:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	78db      	ldrb	r3, [r3, #3]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d006      	beq.n	8008756 <USB_HC_StartXfer+0x1c2>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008748:	4b3b      	ldr	r3, [pc, #236]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008750:	4a39      	ldr	r2, [pc, #228]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	e005      	b.n	8008762 <USB_HC_StartXfer+0x1ce>
  }
  else
  {
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008756:	4b38      	ldr	r3, [pc, #224]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800875e:	4a36      	ldr	r2, [pc, #216]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008760:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008762:	4b35      	ldr	r3, [pc, #212]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800876a:	4a33      	ldr	r2, [pc, #204]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 800876c:	6013      	str	r3, [r2, #0]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877c:	461a      	mov	r2, r3
 800877e:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6013      	str	r3, [r2, #0]

  if (dma == 0) /* Slave mode */
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d14e      	bne.n	8008828 <USB_HC_StartXfer+0x294>
  {
    if((hc->ep_is_in == 0) && (hc->xfer_len > 0))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	78db      	ldrb	r3, [r3, #3]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d14a      	bne.n	8008828 <USB_HC_StartXfer+0x294>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d046      	beq.n	8008828 <USB_HC_StartXfer+0x294>
    {
      switch(hc->ep_type)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	79db      	ldrb	r3, [r3, #7]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d830      	bhi.n	8008804 <USB_HC_StartXfer+0x270>
 80087a2:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <USB_HC_StartXfer+0x214>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	080087dd 	.word	0x080087dd
 80087b0:	080087b9 	.word	0x080087b9
 80087b4:	080087dd 	.word	0x080087dd
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (hc->xfer_len + 3) / 4;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	3303      	adds	r3, #3
 80087be:	089b      	lsrs	r3, r3, #2
 80087c0:	827b      	strh	r3, [r7, #18]

        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80087c2:	8a7a      	ldrh	r2, [r7, #18]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d91c      	bls.n	8008808 <USB_HC_StartXfer+0x274>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80087da:	e015      	b.n	8008808 <USB_HC_StartXfer+0x274>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	3303      	adds	r3, #3
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	827b      	strh	r3, [r7, #18]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 80087e6:	8a7a      	ldrh	r2, [r7, #18]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d90a      	bls.n	800880c <USB_HC_StartXfer+0x278>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	619a      	str	r2, [r3, #24]
        }
        break;
 8008802:	e003      	b.n	800880c <USB_HC_StartXfer+0x278>

      default:
        break;
 8008804:	bf00      	nop
 8008806:	e002      	b.n	800880e <USB_HC_StartXfer+0x27a>
        break;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <USB_HC_StartXfer+0x27a>
        break;
 800880c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	68d9      	ldr	r1, [r3, #12]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	785a      	ldrb	r2, [r3, #1]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	b298      	uxth	r0, r3
 800881c:	2300      	movs	r3, #0
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4603      	mov	r3, r0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff fba4 	bl	8007f70 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	1ff80000 	.word	0x1ff80000
 8008838:	2000030c 	.word	0x2000030c

0800883c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFF);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	b29b      	uxth	r3, r3
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]

  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	0c9b      	lsrs	r3, r3, #18
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00b      	beq.n	800889a <USB_HC_Halt+0x40>
     (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	0c9b      	lsrs	r3, r3, #18
 8008892:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 8008896:	2b02      	cmp	r3, #2
 8008898:	d170      	bne.n	800897c <USB_HC_Halt+0x122>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a6:	4619      	mov	r1, r3
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088ba:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d146      	bne.n	8008954 <USB_HC_Halt+0xfa>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d2:	4619      	mov	r1, r3
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088e6:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f4:	4619      	mov	r1, r3
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008908:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008916:	4619      	mov	r1, r3
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4413      	add	r3, r2
 8008920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800892a:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008938:	d81e      	bhi.n	8008978 <USB_HC_Halt+0x11e>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800894c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008950:	d0ec      	beq.n	800892c <USB_HC_Halt+0xd2>
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8008952:	e085      	b.n	8008a60 <USB_HC_Halt+0x206>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4413      	add	r3, r2
 800895c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008960:	4619      	mov	r1, r3
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008974:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8008976:	e073      	b.n	8008a60 <USB_HC_Halt+0x206>
          break;
 8008978:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800897a:	e071      	b.n	8008a60 <USB_HC_Halt+0x206>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008988:	4619      	mov	r1, r3
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899c:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d146      	bne.n	8008a3a <USB_HC_Halt+0x1e0>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b8:	4619      	mov	r1, r3
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089da:	4619      	mov	r1, r3
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ee:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fc:	4619      	mov	r1, r3
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a10:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a1e:	d81e      	bhi.n	8008a5e <USB_HC_Halt+0x204>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a36:	d0ec      	beq.n	8008a12 <USB_HC_Halt+0x1b8>
 8008a38:	e012      	b.n	8008a60 <USB_HC_Halt+0x206>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a46:	4619      	mov	r1, r3
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a5a:	600b      	str	r3, [r1, #0]
 8008a5c:	e000      	b.n	8008a60 <USB_HC_Halt+0x206>
          break;
 8008a5e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a90:	461a      	mov	r2, r3
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	04db      	lsls	r3, r3, #19
 8008a96:	4619      	mov	r1, r3
 8008a98:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <USB_DoPing+0x74>)
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa0:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ab8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ac0:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	1ff80000 	.word	0x1ff80000

08008ae8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	613b      	str	r3, [r7, #16]
  uint32_t value;

  USB_DisableGlobalInt(USBx);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff f9ba 	bl	8007e6e <USB_DisableGlobalInt>

    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 8008afa:	2110      	movs	r1, #16
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff f9ef 	bl	8007ee0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff fa12 	bl	8007f2c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75fb      	strb	r3, [r7, #23]
 8008b0c:	e01f      	b.n	8008b4e <USB_StopHost+0x66>
  {

    value = USBx_HC(i)->HCCHAR ;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b24:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b34:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b42:	461a      	mov	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b0f      	cmp	r3, #15
 8008b52:	d9dc      	bls.n	8008b0e <USB_StopHost+0x26>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0; i <= 15; i++)
 8008b54:	2300      	movs	r3, #0
 8008b56:	75fb      	strb	r3, [r7, #23]
 8008b58:	e034      	b.n	8008bc4 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]

    value |= USB_OTG_HCCHAR_CHDIS;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b70:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b78:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b80:	60fb      	str	r3, [r7, #12]

    USBx_HC(i)->HCCHAR = value;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6013      	str	r3, [r2, #0]
    do
    {
      if (++count > 1000)
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	3301      	adds	r3, #1
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ba0:	d80c      	bhi.n	8008bbc <USB_StopHost+0xd4>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bb8:	d0ec      	beq.n	8008b94 <USB_StopHost+0xac>
 8008bba:	e000      	b.n	8008bbe <USB_StopHost+0xd6>
        break;
 8008bbc:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	d9c7      	bls.n	8008b5a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFF;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff f933 	bl	8007e4c <USB_EnableGlobalInt>
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <disk_status+0x30>)
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	79fa      	ldrb	r2, [r7, #7]
 8008c08:	4905      	ldr	r1, [pc, #20]	; (8008c20 <disk_status+0x30>)
 8008c0a:	440a      	add	r2, r1
 8008c0c:	7a12      	ldrb	r2, [r2, #8]
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4798      	blx	r3
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000338 	.word	0x20000338

08008c24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	4a0d      	ldr	r2, [pc, #52]	; (8008c6c <disk_initialize+0x48>)
 8008c36:	5cd3      	ldrb	r3, [r2, r3]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d111      	bne.n	8008c60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	4a0b      	ldr	r2, [pc, #44]	; (8008c6c <disk_initialize+0x48>)
 8008c40:	2101      	movs	r1, #1
 8008c42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	4a09      	ldr	r2, [pc, #36]	; (8008c6c <disk_initialize+0x48>)
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	79fa      	ldrb	r2, [r7, #7]
 8008c52:	4906      	ldr	r1, [pc, #24]	; (8008c6c <disk_initialize+0x48>)
 8008c54:	440a      	add	r2, r1
 8008c56:	7a12      	ldrb	r2, [r2, #8]
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000338 	.word	0x20000338

08008c70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c70:	b590      	push	{r4, r7, lr}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <disk_read+0x3c>)
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	689c      	ldr	r4, [r3, #8]
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4a07      	ldr	r2, [pc, #28]	; (8008cac <disk_read+0x3c>)
 8008c90:	4413      	add	r3, r2
 8008c92:	7a18      	ldrb	r0, [r3, #8]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	47a0      	blx	r4
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000338 	.word	0x20000338

08008cb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008cb0:	b590      	push	{r4, r7, lr}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	4a0a      	ldr	r2, [pc, #40]	; (8008cec <disk_write+0x3c>)
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	68dc      	ldr	r4, [r3, #12]
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	4a07      	ldr	r2, [pc, #28]	; (8008cec <disk_write+0x3c>)
 8008cd0:	4413      	add	r3, r2
 8008cd2:	7a18      	ldrb	r0, [r3, #8]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	47a0      	blx	r4
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000338 	.word	0x20000338

08008cf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	603a      	str	r2, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <disk_ioctl+0x38>)
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	79fa      	ldrb	r2, [r7, #7]
 8008d0e:	4906      	ldr	r1, [pc, #24]	; (8008d28 <disk_ioctl+0x38>)
 8008d10:	440a      	add	r2, r1
 8008d12:	7a10      	ldrb	r0, [r2, #8]
 8008d14:	79b9      	ldrb	r1, [r7, #6]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	4798      	blx	r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000338 	.word	0x20000338

08008d2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3301      	adds	r3, #1
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d3c:	89fb      	ldrh	r3, [r7, #14]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	b21a      	sxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b21b      	sxth	r3, r3
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	b21b      	sxth	r3, r3
 8008d4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3303      	adds	r3, #3
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	3202      	adds	r2, #2
 8008d74:	7812      	ldrb	r2, [r2, #0]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	3201      	adds	r2, #1
 8008d82:	7812      	ldrb	r2, [r2, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7812      	ldrb	r2, [r2, #0]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d94:	68fb      	ldr	r3, [r7, #12]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	887a      	ldrh	r2, [r7, #2]
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	887b      	ldrh	r3, [r7, #2]
 8008dbc:	0a1b      	lsrs	r3, r3, #8
 8008dbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	887a      	ldrh	r2, [r7, #2]
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	0a1b      	lsrs	r3, r3, #8
 8008df2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	0a1b      	lsrs	r3, r3, #8
 8008e04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	701a      	strb	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00d      	beq.n	8008e66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	617a      	str	r2, [r7, #20]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	1c51      	adds	r1, r2, #1
 8008e54:	6139      	str	r1, [r7, #16]
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	607b      	str	r3, [r7, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f1      	bne.n	8008e4a <mem_cpy+0x1a>
	}
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e72:	b480      	push	{r7}
 8008e74:	b087      	sub	sp, #28
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	617a      	str	r2, [r7, #20]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	607b      	str	r3, [r7, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f3      	bne.n	8008e82 <mem_set+0x10>
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008ea6:	b480      	push	{r7}
 8008ea8:	b089      	sub	sp, #36	; 0x24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	61fa      	str	r2, [r7, #28]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	61ba      	str	r2, [r7, #24]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	1acb      	subs	r3, r1, r3
 8008ed2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <mem_cmp+0x40>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0eb      	beq.n	8008ebe <mem_cmp+0x18>

	return r;
 8008ee6:	697b      	ldr	r3, [r7, #20]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3724      	adds	r7, #36	; 0x24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008efe:	e002      	b.n	8008f06 <chk_chr+0x12>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3301      	adds	r3, #1
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <chk_chr+0x26>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d1f2      	bne.n	8008f00 <chk_chr+0xc>
	return *str;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d009      	beq.n	8008f4c <lock_fs+0x22>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f003 f916 	bl	800c16e <ff_req_grant>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <lock_fs+0x22>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <lock_fs+0x24>
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00d      	beq.n	8008f84 <unlock_fs+0x2e>
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	2b0c      	cmp	r3, #12
 8008f6c:	d00a      	beq.n	8008f84 <unlock_fs+0x2e>
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	2b0b      	cmp	r3, #11
 8008f72:	d007      	beq.n	8008f84 <unlock_fs+0x2e>
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d004      	beq.n	8008f84 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f003 f90a 	bl	800c198 <ff_rel_grant>
	}
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e029      	b.n	8008ff4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008fa0:	4a27      	ldr	r2, [pc, #156]	; (8009040 <chk_lock+0xb4>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	4413      	add	r3, r2
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01d      	beq.n	8008fea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fae:	4a24      	ldr	r2, [pc, #144]	; (8009040 <chk_lock+0xb4>)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	4413      	add	r3, r2
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d116      	bne.n	8008fee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008fc0:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <chk_lock+0xb4>)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3304      	adds	r3, #4
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d10c      	bne.n	8008fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fd4:	4a1a      	ldr	r2, [pc, #104]	; (8009040 <chk_lock+0xb4>)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	4413      	add	r3, r2
 8008fdc:	3308      	adds	r3, #8
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d102      	bne.n	8008fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fe8:	e007      	b.n	8008ffa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fea:	2301      	movs	r3, #1
 8008fec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d9d2      	bls.n	8008fa0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d109      	bne.n	8009014 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <chk_lock+0x80>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d101      	bne.n	8009010 <chk_lock+0x84>
 800900c:	2300      	movs	r3, #0
 800900e:	e010      	b.n	8009032 <chk_lock+0xa6>
 8009010:	2312      	movs	r3, #18
 8009012:	e00e      	b.n	8009032 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d108      	bne.n	800902c <chk_lock+0xa0>
 800901a:	4a09      	ldr	r2, [pc, #36]	; (8009040 <chk_lock+0xb4>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4413      	add	r3, r2
 8009022:	330c      	adds	r3, #12
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902a:	d101      	bne.n	8009030 <chk_lock+0xa4>
 800902c:	2310      	movs	r3, #16
 800902e:	e000      	b.n	8009032 <chk_lock+0xa6>
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000318 	.word	0x20000318

08009044 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800904a:	2300      	movs	r3, #0
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	e002      	b.n	8009056 <enq_lock+0x12>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3301      	adds	r3, #1
 8009054:	607b      	str	r3, [r7, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d806      	bhi.n	800906a <enq_lock+0x26>
 800905c:	4a09      	ldr	r2, [pc, #36]	; (8009084 <enq_lock+0x40>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	4413      	add	r3, r2
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f2      	bne.n	8009050 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b02      	cmp	r3, #2
 800906e:	bf14      	ite	ne
 8009070:	2301      	movne	r3, #1
 8009072:	2300      	moveq	r3, #0
 8009074:	b2db      	uxtb	r3, r3
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20000318 	.word	0x20000318

08009088 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e01f      	b.n	80090d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009098:	4a41      	ldr	r2, [pc, #260]	; (80091a0 <inc_lock+0x118>)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	011b      	lsls	r3, r3, #4
 800909e:	4413      	add	r3, r2
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d113      	bne.n	80090d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80090aa:	4a3d      	ldr	r2, [pc, #244]	; (80091a0 <inc_lock+0x118>)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	4413      	add	r3, r2
 80090b2:	3304      	adds	r3, #4
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d109      	bne.n	80090d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80090be:	4a38      	ldr	r2, [pc, #224]	; (80091a0 <inc_lock+0x118>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	4413      	add	r3, r2
 80090c6:	3308      	adds	r3, #8
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d006      	beq.n	80090e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3301      	adds	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d9dc      	bls.n	8009098 <inc_lock+0x10>
 80090de:	e000      	b.n	80090e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d132      	bne.n	800914e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e002      	b.n	80090f4 <inc_lock+0x6c>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d806      	bhi.n	8009108 <inc_lock+0x80>
 80090fa:	4a29      	ldr	r2, [pc, #164]	; (80091a0 <inc_lock+0x118>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	4413      	add	r3, r2
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1f2      	bne.n	80090ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d101      	bne.n	8009112 <inc_lock+0x8a>
 800910e:	2300      	movs	r3, #0
 8009110:	e040      	b.n	8009194 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	4922      	ldr	r1, [pc, #136]	; (80091a0 <inc_lock+0x118>)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	440b      	add	r3, r1
 800911e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	491e      	ldr	r1, [pc, #120]	; (80091a0 <inc_lock+0x118>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	440b      	add	r3, r1
 800912c:	3304      	adds	r3, #4
 800912e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	695a      	ldr	r2, [r3, #20]
 8009134:	491a      	ldr	r1, [pc, #104]	; (80091a0 <inc_lock+0x118>)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	440b      	add	r3, r1
 800913c:	3308      	adds	r3, #8
 800913e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <inc_lock+0x118>)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	4413      	add	r3, r2
 8009148:	330c      	adds	r3, #12
 800914a:	2200      	movs	r2, #0
 800914c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <inc_lock+0xe0>
 8009154:	4a12      	ldr	r2, [pc, #72]	; (80091a0 <inc_lock+0x118>)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	4413      	add	r3, r2
 800915c:	330c      	adds	r3, #12
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <inc_lock+0xe0>
 8009164:	2300      	movs	r3, #0
 8009166:	e015      	b.n	8009194 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d108      	bne.n	8009180 <inc_lock+0xf8>
 800916e:	4a0c      	ldr	r2, [pc, #48]	; (80091a0 <inc_lock+0x118>)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	4413      	add	r3, r2
 8009176:	330c      	adds	r3, #12
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	e001      	b.n	8009184 <inc_lock+0xfc>
 8009180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009184:	4906      	ldr	r1, [pc, #24]	; (80091a0 <inc_lock+0x118>)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	440b      	add	r3, r1
 800918c:	330c      	adds	r3, #12
 800918e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20000318 	.word	0x20000318

080091a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d825      	bhi.n	8009204 <dec_lock+0x60>
		n = Files[i].ctr;
 80091b8:	4a17      	ldr	r2, [pc, #92]	; (8009218 <dec_lock+0x74>)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	011b      	lsls	r3, r3, #4
 80091be:	4413      	add	r3, r2
 80091c0:	330c      	adds	r3, #12
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80091c6:	89fb      	ldrh	r3, [r7, #14]
 80091c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091cc:	d101      	bne.n	80091d2 <dec_lock+0x2e>
 80091ce:	2300      	movs	r3, #0
 80091d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80091d2:	89fb      	ldrh	r3, [r7, #14]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <dec_lock+0x3a>
 80091d8:	89fb      	ldrh	r3, [r7, #14]
 80091da:	3b01      	subs	r3, #1
 80091dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091de:	4a0e      	ldr	r2, [pc, #56]	; (8009218 <dec_lock+0x74>)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	4413      	add	r3, r2
 80091e6:	330c      	adds	r3, #12
 80091e8:	89fa      	ldrh	r2, [r7, #14]
 80091ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <dec_lock+0x5a>
 80091f2:	4a09      	ldr	r2, [pc, #36]	; (8009218 <dec_lock+0x74>)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	4413      	add	r3, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	737b      	strb	r3, [r7, #13]
 8009202:	e001      	b.n	8009208 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009204:	2302      	movs	r3, #2
 8009206:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009208:	7b7b      	ldrb	r3, [r7, #13]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20000318 	.word	0x20000318

0800921c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	e010      	b.n	800924c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800922a:	4a0d      	ldr	r2, [pc, #52]	; (8009260 <clear_lock+0x44>)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	4413      	add	r3, r2
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	429a      	cmp	r2, r3
 8009238:	d105      	bne.n	8009246 <clear_lock+0x2a>
 800923a:	4a09      	ldr	r2, [pc, #36]	; (8009260 <clear_lock+0x44>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	4413      	add	r3, r2
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d9eb      	bls.n	800922a <clear_lock+0xe>
	}
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20000318 	.word	0x20000318

08009264 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	78db      	ldrb	r3, [r3, #3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d034      	beq.n	80092e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7858      	ldrb	r0, [r3, #1]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009288:	2301      	movs	r3, #1
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	f7ff fd10 	bl	8008cb0 <disk_write>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009296:	2301      	movs	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	e022      	b.n	80092e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d217      	bcs.n	80092e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	789b      	ldrb	r3, [r3, #2]
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	e010      	b.n	80092dc <sync_window+0x78>
					wsect += fs->fsize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	4413      	add	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7858      	ldrb	r0, [r3, #1]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092ce:	2301      	movs	r3, #1
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	f7ff fced 	bl	8008cb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d8eb      	bhi.n	80092ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d01b      	beq.n	800933c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff ffad 	bl	8009264 <sync_window>
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d113      	bne.n	800933c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7858      	ldrb	r0, [r3, #1]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800931e:	2301      	movs	r3, #1
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	f7ff fca5 	bl	8008c70 <disk_read>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009332:	2301      	movs	r3, #1
 8009334:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ff87 	bl	8009264 <sync_window>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d158      	bne.n	8009412 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b03      	cmp	r3, #3
 8009366:	d148      	bne.n	80093fa <sync_fs+0xb2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	791b      	ldrb	r3, [r3, #4]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d144      	bne.n	80093fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3334      	adds	r3, #52	; 0x34
 8009374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009378:	2100      	movs	r1, #0
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fd79 	bl	8008e72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3334      	adds	r3, #52	; 0x34
 8009384:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009388:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fd08 	bl	8008da2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3334      	adds	r3, #52	; 0x34
 8009396:	4921      	ldr	r1, [pc, #132]	; (800941c <sync_fs+0xd4>)
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fd1d 	bl	8008dd8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3334      	adds	r3, #52	; 0x34
 80093a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80093a6:	491e      	ldr	r1, [pc, #120]	; (8009420 <sync_fs+0xd8>)
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fd15 	bl	8008dd8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3334      	adds	r3, #52	; 0x34
 80093b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	4619      	mov	r1, r3
 80093bc:	4610      	mov	r0, r2
 80093be:	f7ff fd0b 	bl	8008dd8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3334      	adds	r3, #52	; 0x34
 80093c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7ff fd01 	bl	8008dd8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7858      	ldrb	r0, [r3, #1]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ee:	2301      	movs	r3, #1
 80093f0:	f7ff fc5e 	bl	8008cb0 <disk_write>
			fs->fsi_flag = 0;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2200      	movs	r2, #0
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff fc74 	bl	8008cf0 <disk_ioctl>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <sync_fs+0xca>
 800940e:	2301      	movs	r3, #1
 8009410:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	41615252 	.word	0x41615252
 8009420:	61417272 	.word	0x61417272

08009424 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	3b02      	subs	r3, #2
 8009432:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	1e9a      	subs	r2, r3, #2
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d801      	bhi.n	8009444 <clust2sect+0x20>
 8009440:	2300      	movs	r3, #0
 8009442:	e008      	b.n	8009456 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	895b      	ldrh	r3, [r3, #10]
 8009448:	461a      	mov	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	fb03 f202 	mul.w	r2, r3, r2
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	4413      	add	r3, r2
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b086      	sub	sp, #24
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d904      	bls.n	8009482 <get_fat+0x20>
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	699a      	ldr	r2, [r3, #24]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d802      	bhi.n	8009488 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009482:	2301      	movs	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	e08c      	b.n	80095a2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009488:	f04f 33ff 	mov.w	r3, #4294967295
 800948c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d045      	beq.n	8009522 <get_fat+0xc0>
 8009496:	2b03      	cmp	r3, #3
 8009498:	d05d      	beq.n	8009556 <get_fat+0xf4>
 800949a:	2b01      	cmp	r3, #1
 800949c:	d177      	bne.n	800958e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	085b      	lsrs	r3, r3, #1
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0a5b      	lsrs	r3, r3, #9
 80094b4:	4413      	add	r3, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	6938      	ldr	r0, [r7, #16]
 80094ba:	f7ff ff17 	bl	80092ec <move_window>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d167      	bne.n	8009594 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	60fa      	str	r2, [r7, #12]
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4413      	add	r3, r2
 80094d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	0a5b      	lsrs	r3, r3, #9
 80094e0:	4413      	add	r3, r2
 80094e2:	4619      	mov	r1, r3
 80094e4:	6938      	ldr	r0, [r7, #16]
 80094e6:	f7ff ff01 	bl	80092ec <move_window>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d153      	bne.n	8009598 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4413      	add	r3, r2
 80094fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	461a      	mov	r2, r3
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4313      	orrs	r3, r2
 8009506:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <get_fat+0xb6>
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	091b      	lsrs	r3, r3, #4
 8009516:	e002      	b.n	800951e <get_fat+0xbc>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800951e:	617b      	str	r3, [r7, #20]
			break;
 8009520:	e03f      	b.n	80095a2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	0a1b      	lsrs	r3, r3, #8
 800952a:	4413      	add	r3, r2
 800952c:	4619      	mov	r1, r3
 800952e:	6938      	ldr	r0, [r7, #16]
 8009530:	f7ff fedc 	bl	80092ec <move_window>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d130      	bne.n	800959c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009548:	4413      	add	r3, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff fbee 	bl	8008d2c <ld_word>
 8009550:	4603      	mov	r3, r0
 8009552:	617b      	str	r3, [r7, #20]
			break;
 8009554:	e025      	b.n	80095a2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	09db      	lsrs	r3, r3, #7
 800955e:	4413      	add	r3, r2
 8009560:	4619      	mov	r1, r3
 8009562:	6938      	ldr	r0, [r7, #16]
 8009564:	f7ff fec2 	bl	80092ec <move_window>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d118      	bne.n	80095a0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800957c:	4413      	add	r3, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fbec 	bl	8008d5c <ld_dword>
 8009584:	4603      	mov	r3, r0
 8009586:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800958a:	617b      	str	r3, [r7, #20]
			break;
 800958c:	e009      	b.n	80095a2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e006      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009594:	bf00      	nop
 8009596:	e004      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009598:	bf00      	nop
 800959a:	e002      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800959c:	bf00      	nop
 800959e:	e000      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095a0:	bf00      	nop
		}
	}

	return val;
 80095a2:	697b      	ldr	r3, [r7, #20]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b089      	sub	sp, #36	; 0x24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095b8:	2302      	movs	r3, #2
 80095ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	f240 80d6 	bls.w	8009770 <put_fat+0x1c4>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	f240 80d0 	bls.w	8009770 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d073      	beq.n	80096c0 <put_fat+0x114>
 80095d8:	2b03      	cmp	r3, #3
 80095da:	f000 8091 	beq.w	8009700 <put_fat+0x154>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	f040 80c6 	bne.w	8009770 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	61bb      	str	r3, [r7, #24]
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	4413      	add	r3, r2
 80095f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	0a5b      	lsrs	r3, r3, #9
 80095fa:	4413      	add	r3, r2
 80095fc:	4619      	mov	r1, r3
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7ff fe74 	bl	80092ec <move_window>
 8009604:	4603      	mov	r3, r0
 8009606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009608:	7ffb      	ldrb	r3, [r7, #31]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 80a9 	bne.w	8009762 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	1c59      	adds	r1, r3, #1
 800961a:	61b9      	str	r1, [r7, #24]
 800961c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009620:	4413      	add	r3, r2
 8009622:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00d      	beq.n	800964a <put_fat+0x9e>
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b25b      	sxtb	r3, r3
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	b25a      	sxtb	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	b25b      	sxtb	r3, r3
 8009642:	4313      	orrs	r3, r2
 8009644:	b25b      	sxtb	r3, r3
 8009646:	b2db      	uxtb	r3, r3
 8009648:	e001      	b.n	800964e <put_fat+0xa2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	0a5b      	lsrs	r3, r3, #9
 8009660:	4413      	add	r3, r2
 8009662:	4619      	mov	r1, r3
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fe41 	bl	80092ec <move_window>
 800966a:	4603      	mov	r3, r0
 800966c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800966e:	7ffb      	ldrb	r3, [r7, #31]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d178      	bne.n	8009766 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009680:	4413      	add	r3, r2
 8009682:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <put_fat+0xea>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	091b      	lsrs	r3, r3, #4
 8009692:	b2db      	uxtb	r3, r3
 8009694:	e00e      	b.n	80096b4 <put_fat+0x108>
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	b25b      	sxtb	r3, r3
 800969c:	f023 030f 	bic.w	r3, r3, #15
 80096a0:	b25a      	sxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	b25b      	sxtb	r3, r3
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	b25b      	sxtb	r3, r3
 80096ae:	4313      	orrs	r3, r2
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	70da      	strb	r2, [r3, #3]
			break;
 80096be:	e057      	b.n	8009770 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	4413      	add	r3, r2
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff fe0d 	bl	80092ec <move_window>
 80096d2:	4603      	mov	r3, r0
 80096d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096d6:	7ffb      	ldrb	r3, [r7, #31]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d146      	bne.n	800976a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80096ea:	4413      	add	r3, r2
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	b292      	uxth	r2, r2
 80096f0:	4611      	mov	r1, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fb55 	bl	8008da2 <st_word>
			fs->wflag = 1;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	70da      	strb	r2, [r3, #3]
			break;
 80096fe:	e037      	b.n	8009770 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	09db      	lsrs	r3, r3, #7
 8009708:	4413      	add	r3, r2
 800970a:	4619      	mov	r1, r3
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fded 	bl	80092ec <move_window>
 8009712:	4603      	mov	r3, r0
 8009714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009716:	7ffb      	ldrb	r3, [r7, #31]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d128      	bne.n	800976e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009730:	4413      	add	r3, r2
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fb12 	bl	8008d5c <ld_dword>
 8009738:	4603      	mov	r3, r0
 800973a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800973e:	4323      	orrs	r3, r4
 8009740:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009750:	4413      	add	r3, r2
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff fb3f 	bl	8008dd8 <st_dword>
			fs->wflag = 1;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	70da      	strb	r2, [r3, #3]
			break;
 8009760:	e006      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009762:	bf00      	nop
 8009764:	e004      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009766:	bf00      	nop
 8009768:	e002      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800976a:	bf00      	nop
 800976c:	e000      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800976e:	bf00      	nop
		}
	}
	return res;
 8009770:	7ffb      	ldrb	r3, [r7, #31]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3724      	adds	r7, #36	; 0x24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd90      	pop	{r4, r7, pc}

0800977a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b088      	sub	sp, #32
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d904      	bls.n	80097a0 <remove_chain+0x26>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	429a      	cmp	r2, r3
 800979e:	d801      	bhi.n	80097a4 <remove_chain+0x2a>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e04b      	b.n	800983c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00c      	beq.n	80097c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	69b8      	ldr	r0, [r7, #24]
 80097b2:	f7ff fefb 	bl	80095ac <put_fat>
 80097b6:	4603      	mov	r3, r0
 80097b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80097ba:	7ffb      	ldrb	r3, [r7, #31]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <remove_chain+0x4a>
 80097c0:	7ffb      	ldrb	r3, [r7, #31]
 80097c2:	e03b      	b.n	800983c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fe4b 	bl	8009462 <get_fat>
 80097cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d031      	beq.n	8009838 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <remove_chain+0x64>
 80097da:	2302      	movs	r3, #2
 80097dc:	e02e      	b.n	800983c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d101      	bne.n	80097ea <remove_chain+0x70>
 80097e6:	2301      	movs	r3, #1
 80097e8:	e028      	b.n	800983c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80097ea:	2200      	movs	r2, #0
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	69b8      	ldr	r0, [r7, #24]
 80097f0:	f7ff fedc 	bl	80095ac <put_fat>
 80097f4:	4603      	mov	r3, r0
 80097f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80097f8:	7ffb      	ldrb	r3, [r7, #31]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <remove_chain+0x88>
 80097fe:	7ffb      	ldrb	r3, [r7, #31]
 8009800:	e01c      	b.n	800983c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	3b02      	subs	r3, #2
 800980c:	429a      	cmp	r2, r3
 800980e:	d20b      	bcs.n	8009828 <remove_chain+0xae>
			fs->free_clst++;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	791b      	ldrb	r3, [r3, #4]
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	b2da      	uxtb	r2, r3
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	429a      	cmp	r2, r3
 8009834:	d8c6      	bhi.n	80097c4 <remove_chain+0x4a>
 8009836:	e000      	b.n	800983a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009838:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10d      	bne.n	8009876 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d004      	beq.n	8009870 <create_chain+0x2c>
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	699a      	ldr	r2, [r3, #24]
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	429a      	cmp	r2, r3
 800986e:	d81b      	bhi.n	80098a8 <create_chain+0x64>
 8009870:	2301      	movs	r3, #1
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	e018      	b.n	80098a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff fdf2 	bl	8009462 <get_fat>
 800987e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d801      	bhi.n	800988a <create_chain+0x46>
 8009886:	2301      	movs	r3, #1
 8009888:	e070      	b.n	800996c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d101      	bne.n	8009896 <create_chain+0x52>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	e06a      	b.n	800996c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	699a      	ldr	r2, [r3, #24]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	429a      	cmp	r2, r3
 800989e:	d901      	bls.n	80098a4 <create_chain+0x60>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	e063      	b.n	800996c <create_chain+0x128>
		scl = clst;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	3301      	adds	r3, #1
 80098b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d807      	bhi.n	80098cc <create_chain+0x88>
				ncl = 2;
 80098bc:	2302      	movs	r3, #2
 80098be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d901      	bls.n	80098cc <create_chain+0x88>
 80098c8:	2300      	movs	r3, #0
 80098ca:	e04f      	b.n	800996c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80098cc:	69f9      	ldr	r1, [r7, #28]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff fdc7 	bl	8009462 <get_fat>
 80098d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00e      	beq.n	80098fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d003      	beq.n	80098ea <create_chain+0xa6>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d101      	bne.n	80098ee <create_chain+0xaa>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	e03e      	b.n	800996c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d1da      	bne.n	80098ac <create_chain+0x68>
 80098f6:	2300      	movs	r3, #0
 80098f8:	e038      	b.n	800996c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80098fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80098fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009900:	69f9      	ldr	r1, [r7, #28]
 8009902:	6938      	ldr	r0, [r7, #16]
 8009904:	f7ff fe52 	bl	80095ac <put_fat>
 8009908:	4603      	mov	r3, r0
 800990a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d109      	bne.n	8009926 <create_chain+0xe2>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d006      	beq.n	8009926 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009918:	69fa      	ldr	r2, [r7, #28]
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6938      	ldr	r0, [r7, #16]
 800991e:	f7ff fe45 	bl	80095ac <put_fat>
 8009922:	4603      	mov	r3, r0
 8009924:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d116      	bne.n	800995a <create_chain+0x116>
		fs->last_clst = ncl;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	695a      	ldr	r2, [r3, #20]
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	3b02      	subs	r3, #2
 800993c:	429a      	cmp	r2, r3
 800993e:	d804      	bhi.n	800994a <create_chain+0x106>
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	1e5a      	subs	r2, r3, #1
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	791b      	ldrb	r3, [r3, #4]
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	711a      	strb	r2, [r3, #4]
 8009958:	e007      	b.n	800996a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d102      	bne.n	8009966 <create_chain+0x122>
 8009960:	f04f 33ff 	mov.w	r3, #4294967295
 8009964:	e000      	b.n	8009968 <create_chain+0x124>
 8009966:	2301      	movs	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800996a:	69fb      	ldr	r3, [r7, #28]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	3304      	adds	r3, #4
 800998a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	0a5b      	lsrs	r3, r3, #9
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	8952      	ldrh	r2, [r2, #10]
 8009994:	fbb3 f3f2 	udiv	r3, r3, r2
 8009998:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	1d1a      	adds	r2, r3, #4
 800999e:	613a      	str	r2, [r7, #16]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <clmt_clust+0x3a>
 80099aa:	2300      	movs	r3, #0
 80099ac:	e010      	b.n	80099d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d307      	bcc.n	80099c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	617b      	str	r3, [r7, #20]
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	3304      	adds	r3, #4
 80099c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80099c4:	e7e9      	b.n	800999a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80099c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4413      	add	r3, r2
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	371c      	adds	r7, #28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099f2:	d204      	bcs.n	80099fe <dir_sdi+0x22>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <dir_sdi+0x26>
		return FR_INT_ERR;
 80099fe:	2302      	movs	r3, #2
 8009a00:	e063      	b.n	8009aca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <dir_sdi+0x46>
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d902      	bls.n	8009a22 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10c      	bne.n	8009a42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	8912      	ldrh	r2, [r2, #8]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d301      	bcc.n	8009a38 <dir_sdi+0x5c>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e048      	b.n	8009aca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	61da      	str	r2, [r3, #28]
 8009a40:	e029      	b.n	8009a96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	895b      	ldrh	r3, [r3, #10]
 8009a46:	025b      	lsls	r3, r3, #9
 8009a48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a4a:	e019      	b.n	8009a80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6979      	ldr	r1, [r7, #20]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff fd06 	bl	8009462 <get_fat>
 8009a56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d101      	bne.n	8009a64 <dir_sdi+0x88>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e032      	b.n	8009aca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d904      	bls.n	8009a74 <dir_sdi+0x98>
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	699a      	ldr	r2, [r3, #24]
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d801      	bhi.n	8009a78 <dir_sdi+0x9c>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e028      	b.n	8009aca <dir_sdi+0xee>
			ofs -= csz;
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d2e1      	bcs.n	8009a4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009a88:	6979      	ldr	r1, [r7, #20]
 8009a8a:	6938      	ldr	r0, [r7, #16]
 8009a8c:	f7ff fcca 	bl	8009424 <clust2sect>
 8009a90:	4602      	mov	r2, r0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <dir_sdi+0xcc>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e010      	b.n	8009aca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	69da      	ldr	r2, [r3, #28]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	0a5b      	lsrs	r3, r3, #9
 8009ab0:	441a      	add	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	441a      	add	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	3320      	adds	r3, #32
 8009ae8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <dir_next+0x28>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009af8:	d301      	bcc.n	8009afe <dir_next+0x2c>
 8009afa:	2304      	movs	r3, #4
 8009afc:	e0aa      	b.n	8009c54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 8098 	bne.w	8009c3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	8912      	ldrh	r2, [r2, #8]
 8009b24:	4293      	cmp	r3, r2
 8009b26:	f0c0 8088 	bcc.w	8009c3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	61da      	str	r2, [r3, #28]
 8009b30:	2304      	movs	r3, #4
 8009b32:	e08f      	b.n	8009c54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	0a5b      	lsrs	r3, r3, #9
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	8952      	ldrh	r2, [r2, #10]
 8009b3c:	3a01      	subs	r2, #1
 8009b3e:	4013      	ands	r3, r2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d17a      	bne.n	8009c3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f7ff fc88 	bl	8009462 <get_fat>
 8009b52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d801      	bhi.n	8009b5e <dir_next+0x8c>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e07a      	b.n	8009c54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d101      	bne.n	8009b6a <dir_next+0x98>
 8009b66:	2301      	movs	r3, #1
 8009b68:	e074      	b.n	8009c54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699a      	ldr	r2, [r3, #24]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d858      	bhi.n	8009c26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d104      	bne.n	8009b84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	61da      	str	r2, [r3, #28]
 8009b80:	2304      	movs	r3, #4
 8009b82:	e067      	b.n	8009c54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7ff fe59 	bl	8009844 <create_chain>
 8009b92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <dir_next+0xcc>
 8009b9a:	2307      	movs	r3, #7
 8009b9c:	e05a      	b.n	8009c54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <dir_next+0xd6>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e055      	b.n	8009c54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d101      	bne.n	8009bb4 <dir_next+0xe2>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e04f      	b.n	8009c54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff fb55 	bl	8009264 <sync_window>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <dir_next+0xf2>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e047      	b.n	8009c54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3334      	adds	r3, #52	; 0x34
 8009bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff f94f 	bl	8008e72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	6979      	ldr	r1, [r7, #20]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff fc22 	bl	8009424 <clust2sect>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
 8009be6:	e012      	b.n	8009c0e <dir_next+0x13c>
						fs->wflag = 1;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2201      	movs	r2, #1
 8009bec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff fb38 	bl	8009264 <sync_window>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <dir_next+0x12c>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e02a      	b.n	8009c54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	3301      	adds	r3, #1
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	895b      	ldrh	r3, [r3, #10]
 8009c12:	461a      	mov	r2, r3
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d8e6      	bhi.n	8009be8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad2      	subs	r2, r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009c2c:	6979      	ldr	r1, [r7, #20]
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff fbf8 	bl	8009424 <clust2sect>
 8009c34:	4602      	mov	r2, r0
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4c:	441a      	add	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff feb4 	bl	80099dc <dir_sdi>
 8009c74:	4603      	mov	r3, r0
 8009c76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d12b      	bne.n	8009cd6 <dir_alloc+0x7a>
		n = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	4619      	mov	r1, r3
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f7ff fb2f 	bl	80092ec <move_window>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11d      	bne.n	8009cd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2be5      	cmp	r3, #229	; 0xe5
 8009ca0:	d004      	beq.n	8009cac <dir_alloc+0x50>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d102      	bne.n	8009cc0 <dir_alloc+0x64>
 8009cba:	e00c      	b.n	8009cd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff ff05 	bl	8009ad2 <dir_next>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0d7      	beq.n	8009c82 <dir_alloc+0x26>
 8009cd2:	e000      	b.n	8009cd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009cd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d101      	bne.n	8009ce0 <dir_alloc+0x84>
 8009cdc:	2307      	movs	r3, #7
 8009cde:	75fb      	strb	r3, [r7, #23]
	return res;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	331a      	adds	r3, #26
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7ff f817 	bl	8008d2c <ld_word>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d109      	bne.n	8009d1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	3314      	adds	r3, #20
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff f80c 	bl	8008d2c <ld_word>
 8009d14:	4603      	mov	r3, r0
 8009d16:	041b      	lsls	r3, r3, #16
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	331a      	adds	r3, #26
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	b292      	uxth	r2, r2
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff f82f 	bl	8008da2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d109      	bne.n	8009d60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f103 0214 	add.w	r2, r3, #20
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	0c1b      	lsrs	r3, r3, #16
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	f7ff f821 	bl	8008da2 <st_word>
	}
}
 8009d60:	bf00      	nop
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009d72:	2304      	movs	r3, #4
 8009d74:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009d7c:	e03c      	b.n	8009df8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6938      	ldr	r0, [r7, #16]
 8009d86:	f7ff fab1 	bl	80092ec <move_window>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d136      	bne.n	8009e02 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009da2:	2304      	movs	r3, #4
 8009da4:	75fb      	strb	r3, [r7, #23]
 8009da6:	e031      	b.n	8009e0c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	330b      	adds	r3, #11
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009db4:	73bb      	strb	r3, [r7, #14]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7bba      	ldrb	r2, [r7, #14]
 8009dba:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2be5      	cmp	r3, #229	; 0xe5
 8009dc0:	d011      	beq.n	8009de6 <dir_read+0x7e>
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc6:	d00e      	beq.n	8009de6 <dir_read+0x7e>
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b0f      	cmp	r3, #15
 8009dcc:	d00b      	beq.n	8009de6 <dir_read+0x7e>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	f023 0320 	bic.w	r3, r3, #32
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	bf0c      	ite	eq
 8009dd8:	2301      	moveq	r3, #1
 8009dda:	2300      	movne	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	461a      	mov	r2, r3
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d00f      	beq.n	8009e06 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fe72 	bl	8009ad2 <dir_next>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d108      	bne.n	8009e0a <dir_read+0xa2>
	while (dp->sect) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1be      	bne.n	8009d7e <dir_read+0x16>
 8009e00:	e004      	b.n	8009e0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009e02:	bf00      	nop
 8009e04:	e002      	b.n	8009e0c <dir_read+0xa4>
				break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009e0a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <dir_read+0xb0>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	61da      	str	r2, [r3, #28]
	return res;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e30:	2100      	movs	r1, #0
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fdd2 	bl	80099dc <dir_sdi>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <dir_find+0x24>
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	e03e      	b.n	8009ec4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6938      	ldr	r0, [r7, #16]
 8009e4e:	f7ff fa4d 	bl	80092ec <move_window>
 8009e52:	4603      	mov	r3, r0
 8009e54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d12f      	bne.n	8009ebc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <dir_find+0x4e>
 8009e6a:	2304      	movs	r3, #4
 8009e6c:	75fb      	strb	r3, [r7, #23]
 8009e6e:	e028      	b.n	8009ec2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	330b      	adds	r3, #11
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	330b      	adds	r3, #11
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10a      	bne.n	8009ea8 <dir_find+0x86>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a18      	ldr	r0, [r3, #32]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3324      	adds	r3, #36	; 0x24
 8009e9a:	220b      	movs	r2, #11
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	f7ff f802 	bl	8008ea6 <mem_cmp>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fe11 	bl	8009ad2 <dir_next>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0c5      	beq.n	8009e46 <dir_find+0x24>
 8009eba:	e002      	b.n	8009ec2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009ebc:	bf00      	nop
 8009ebe:	e000      	b.n	8009ec2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ec0:	bf00      	nop

	return res;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009eda:	2101      	movs	r1, #1
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff febd 	bl	8009c5c <dir_alloc>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d11c      	bne.n	8009f26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f7ff f9fa 	bl	80092ec <move_window>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d111      	bne.n	8009f26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	2220      	movs	r2, #32
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe ffb1 	bl	8008e72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a18      	ldr	r0, [r3, #32]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3324      	adds	r3, #36	; 0x24
 8009f18:	220b      	movs	r2, #11
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	f7fe ff88 	bl	8008e30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2201      	movs	r2, #1
 8009f24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d04e      	beq.n	8009fe6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009f50:	e021      	b.n	8009f96 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	1c59      	adds	r1, r3, #1
 8009f5a:	6179      	str	r1, [r7, #20]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d100      	bne.n	8009f6a <get_fileinfo+0x3a>
 8009f68:	e015      	b.n	8009f96 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	2b05      	cmp	r3, #5
 8009f6e:	d101      	bne.n	8009f74 <get_fileinfo+0x44>
 8009f70:	23e5      	movs	r3, #229	; 0xe5
 8009f72:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	2b09      	cmp	r3, #9
 8009f78:	d106      	bne.n	8009f88 <get_fileinfo+0x58>
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	613a      	str	r2, [r7, #16]
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	4413      	add	r3, r2
 8009f84:	222e      	movs	r2, #46	; 0x2e
 8009f86:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	613a      	str	r2, [r7, #16]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	4413      	add	r3, r2
 8009f92:	7bfa      	ldrb	r2, [r7, #15]
 8009f94:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b0a      	cmp	r3, #10
 8009f9a:	d9da      	bls.n	8009f52 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	3309      	adds	r3, #9
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	7ada      	ldrb	r2, [r3, #11]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	331c      	adds	r3, #28
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fecf 	bl	8008d5c <ld_dword>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	3316      	adds	r3, #22
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fec6 	bl	8008d5c <ld_dword>
 8009fd0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	80da      	strh	r2, [r3, #6]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	0c1b      	lsrs	r3, r3, #16
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	809a      	strh	r2, [r3, #4]
 8009fe4:	e000      	b.n	8009fe8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009fe6:	bf00      	nop
}
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3324      	adds	r3, #36	; 0x24
 800a004:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a006:	220b      	movs	r2, #11
 800a008:	2120      	movs	r1, #32
 800a00a:	68b8      	ldr	r0, [r7, #8]
 800a00c:	f7fe ff31 	bl	8008e72 <mem_set>
	si = i = 0; ni = 8;
 800a010:	2300      	movs	r3, #0
 800a012:	613b      	str	r3, [r7, #16]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	2308      	movs	r3, #8
 800a01a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	617a      	str	r2, [r7, #20]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4413      	add	r3, r2
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a02a:	7ffb      	ldrb	r3, [r7, #31]
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d94e      	bls.n	800a0ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a030:	7ffb      	ldrb	r3, [r7, #31]
 800a032:	2b2f      	cmp	r3, #47	; 0x2f
 800a034:	d006      	beq.n	800a044 <create_name+0x54>
 800a036:	7ffb      	ldrb	r3, [r7, #31]
 800a038:	2b5c      	cmp	r3, #92	; 0x5c
 800a03a:	d110      	bne.n	800a05e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a03c:	e002      	b.n	800a044 <create_name+0x54>
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3301      	adds	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	4413      	add	r3, r2
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b2f      	cmp	r3, #47	; 0x2f
 800a04e:	d0f6      	beq.n	800a03e <create_name+0x4e>
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b5c      	cmp	r3, #92	; 0x5c
 800a05a:	d0f0      	beq.n	800a03e <create_name+0x4e>
			break;
 800a05c:	e038      	b.n	800a0d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a05e:	7ffb      	ldrb	r3, [r7, #31]
 800a060:	2b2e      	cmp	r3, #46	; 0x2e
 800a062:	d003      	beq.n	800a06c <create_name+0x7c>
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d30c      	bcc.n	800a086 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	2b0b      	cmp	r3, #11
 800a070:	d002      	beq.n	800a078 <create_name+0x88>
 800a072:	7ffb      	ldrb	r3, [r7, #31]
 800a074:	2b2e      	cmp	r3, #46	; 0x2e
 800a076:	d001      	beq.n	800a07c <create_name+0x8c>
 800a078:	2306      	movs	r3, #6
 800a07a:	e044      	b.n	800a106 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a07c:	2308      	movs	r3, #8
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	230b      	movs	r3, #11
 800a082:	61bb      	str	r3, [r7, #24]
			continue;
 800a084:	e022      	b.n	800a0cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a086:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da04      	bge.n	800a098 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a08e:	7ffb      	ldrb	r3, [r7, #31]
 800a090:	3b80      	subs	r3, #128	; 0x80
 800a092:	4a1f      	ldr	r2, [pc, #124]	; (800a110 <create_name+0x120>)
 800a094:	5cd3      	ldrb	r3, [r2, r3]
 800a096:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a098:	7ffb      	ldrb	r3, [r7, #31]
 800a09a:	4619      	mov	r1, r3
 800a09c:	481d      	ldr	r0, [pc, #116]	; (800a114 <create_name+0x124>)
 800a09e:	f7fe ff29 	bl	8008ef4 <chk_chr>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <create_name+0xbc>
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	e02c      	b.n	800a106 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a0ac:	7ffb      	ldrb	r3, [r7, #31]
 800a0ae:	2b60      	cmp	r3, #96	; 0x60
 800a0b0:	d905      	bls.n	800a0be <create_name+0xce>
 800a0b2:	7ffb      	ldrb	r3, [r7, #31]
 800a0b4:	2b7a      	cmp	r3, #122	; 0x7a
 800a0b6:	d802      	bhi.n	800a0be <create_name+0xce>
 800a0b8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ba:	3b20      	subs	r3, #32
 800a0bc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	613a      	str	r2, [r7, #16]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	7ffa      	ldrb	r2, [r7, #31]
 800a0ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a0cc:	e7a6      	b.n	800a01c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <create_name+0xf4>
 800a0e0:	2306      	movs	r3, #6
 800a0e2:	e010      	b.n	800a106 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2be5      	cmp	r3, #229	; 0xe5
 800a0ea:	d102      	bne.n	800a0f2 <create_name+0x102>
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2205      	movs	r2, #5
 800a0f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	330b      	adds	r3, #11
 800a0f6:	7ffa      	ldrb	r2, [r7, #31]
 800a0f8:	2a20      	cmp	r2, #32
 800a0fa:	d801      	bhi.n	800a100 <create_name+0x110>
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	e000      	b.n	800a102 <create_name+0x112>
 800a100:	2200      	movs	r2, #0
 800a102:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a104:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	08019b80 	.word	0x08019b80
 800a114:	08016be0 	.word	0x08016be0

0800a118 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a12c:	e002      	b.n	800a134 <follow_path+0x1c>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	3301      	adds	r3, #1
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b2f      	cmp	r3, #47	; 0x2f
 800a13a:	d0f8      	beq.n	800a12e <follow_path+0x16>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b5c      	cmp	r3, #92	; 0x5c
 800a142:	d0f4      	beq.n	800a12e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2200      	movs	r2, #0
 800a148:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b1f      	cmp	r3, #31
 800a150:	d80a      	bhi.n	800a168 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2280      	movs	r2, #128	; 0x80
 800a156:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a15a:	2100      	movs	r1, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fc3d 	bl	80099dc <dir_sdi>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
 800a166:	e043      	b.n	800a1f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a168:	463b      	mov	r3, r7
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff ff3f 	bl	8009ff0 <create_name>
 800a172:	4603      	mov	r3, r0
 800a174:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d134      	bne.n	800a1e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff fe50 	bl	8009e22 <dir_find>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a18c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00a      	beq.n	800a1aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b04      	cmp	r3, #4
 800a198:	d127      	bne.n	800a1ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d122      	bne.n	800a1ea <follow_path+0xd2>
 800a1a4:	2305      	movs	r3, #5
 800a1a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a1a8:	e01f      	b.n	800a1ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d11c      	bne.n	800a1ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	799b      	ldrb	r3, [r3, #6]
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d102      	bne.n	800a1c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a1c0:	2305      	movs	r3, #5
 800a1c2:	75fb      	strb	r3, [r7, #23]
 800a1c4:	e014      	b.n	800a1f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fd86 	bl	8009cea <ld_clust>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1e4:	e7c0      	b.n	800a168 <follow_path+0x50>
			if (res != FR_OK) break;
 800a1e6:	bf00      	nop
 800a1e8:	e002      	b.n	800a1f0 <follow_path+0xd8>
				break;
 800a1ea:	bf00      	nop
 800a1ec:	e000      	b.n	800a1f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1ee:	bf00      	nop
			}
		}
	}

	return res;
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b087      	sub	sp, #28
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a202:	f04f 33ff 	mov.w	r3, #4294967295
 800a206:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d031      	beq.n	800a274 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e002      	b.n	800a21e <get_ldnumber+0x24>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	3301      	adds	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b20      	cmp	r3, #32
 800a224:	d903      	bls.n	800a22e <get_ldnumber+0x34>
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b3a      	cmp	r3, #58	; 0x3a
 800a22c:	d1f4      	bne.n	800a218 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	2b3a      	cmp	r3, #58	; 0x3a
 800a234:	d11c      	bne.n	800a270 <get_ldnumber+0x76>
			tp = *path;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	60fa      	str	r2, [r7, #12]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	3b30      	subs	r3, #48	; 0x30
 800a246:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b09      	cmp	r3, #9
 800a24c:	d80e      	bhi.n	800a26c <get_ldnumber+0x72>
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	429a      	cmp	r2, r3
 800a254:	d10a      	bne.n	800a26c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d107      	bne.n	800a26c <get_ldnumber+0x72>
					vol = (int)i;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	3301      	adds	r3, #1
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	e002      	b.n	800a276 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a270:	2300      	movs	r3, #0
 800a272:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a274:	693b      	ldr	r3, [r7, #16]
}
 800a276:	4618      	mov	r0, r3
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
	...

0800a284 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	70da      	strb	r2, [r3, #3]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f04f 32ff 	mov.w	r2, #4294967295
 800a29a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff f824 	bl	80092ec <move_window>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <check_fs+0x2a>
 800a2aa:	2304      	movs	r3, #4
 800a2ac:	e038      	b.n	800a320 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3334      	adds	r3, #52	; 0x34
 800a2b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fd38 	bl	8008d2c <ld_word>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d001      	beq.n	800a2cc <check_fs+0x48>
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e029      	b.n	800a320 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2d2:	2be9      	cmp	r3, #233	; 0xe9
 800a2d4:	d009      	beq.n	800a2ea <check_fs+0x66>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2dc:	2beb      	cmp	r3, #235	; 0xeb
 800a2de:	d11e      	bne.n	800a31e <check_fs+0x9a>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a2e6:	2b90      	cmp	r3, #144	; 0x90
 800a2e8:	d119      	bne.n	800a31e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3334      	adds	r3, #52	; 0x34
 800a2ee:	3336      	adds	r3, #54	; 0x36
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe fd33 	bl	8008d5c <ld_dword>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a2fc:	4a0a      	ldr	r2, [pc, #40]	; (800a328 <check_fs+0xa4>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d101      	bne.n	800a306 <check_fs+0x82>
 800a302:	2300      	movs	r3, #0
 800a304:	e00c      	b.n	800a320 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3334      	adds	r3, #52	; 0x34
 800a30a:	3352      	adds	r3, #82	; 0x52
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe fd25 	bl	8008d5c <ld_dword>
 800a312:	4602      	mov	r2, r0
 800a314:	4b05      	ldr	r3, [pc, #20]	; (800a32c <check_fs+0xa8>)
 800a316:	429a      	cmp	r2, r3
 800a318:	d101      	bne.n	800a31e <check_fs+0x9a>
 800a31a:	2300      	movs	r3, #0
 800a31c:	e000      	b.n	800a320 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a31e:	2302      	movs	r3, #2
}
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	00544146 	.word	0x00544146
 800a32c:	33544146 	.word	0x33544146

0800a330 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b096      	sub	sp, #88	; 0x58
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f7ff ff58 	bl	800a1fa <get_ldnumber>
 800a34a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	da01      	bge.n	800a356 <find_volume+0x26>
 800a352:	230b      	movs	r3, #11
 800a354:	e236      	b.n	800a7c4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a356:	4aac      	ldr	r2, [pc, #688]	; (800a608 <find_volume+0x2d8>)
 800a358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a35e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <find_volume+0x3a>
 800a366:	230c      	movs	r3, #12
 800a368:	e22c      	b.n	800a7c4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800a36a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a36c:	f7fe fddd 	bl	8008f2a <lock_fs>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <find_volume+0x4a>
 800a376:	230f      	movs	r3, #15
 800a378:	e224      	b.n	800a7c4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a37e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	f023 0301 	bic.w	r3, r3, #1
 800a386:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01a      	beq.n	800a3c6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fc2b 	bl	8008bf0 <disk_status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a3a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10c      	bne.n	800a3c6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d007      	beq.n	800a3c2 <find_volume+0x92>
 800a3b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3b6:	f003 0304 	and.w	r3, r3, #4
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a3be:	230a      	movs	r3, #10
 800a3c0:	e200      	b.n	800a7c4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e1fe      	b.n	800a7c4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fc23 	bl	8008c24 <disk_initialize>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e1e7      	b.n	800a7c4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d007      	beq.n	800a40a <find_volume+0xda>
 800a3fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3fe:	f003 0304 	and.w	r3, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a406:	230a      	movs	r3, #10
 800a408:	e1dc      	b.n	800a7c4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a40e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a412:	f7ff ff37 	bl	800a284 <check_fs>
 800a416:	4603      	mov	r3, r0
 800a418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a41c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a420:	2b02      	cmp	r3, #2
 800a422:	d14b      	bne.n	800a4bc <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a424:	2300      	movs	r3, #0
 800a426:	643b      	str	r3, [r7, #64]	; 0x40
 800a428:	e01f      	b.n	800a46a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a438:	4413      	add	r3, r2
 800a43a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	3304      	adds	r3, #4
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d006      	beq.n	800a454 <find_volume+0x124>
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	3308      	adds	r3, #8
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fc86 	bl	8008d5c <ld_dword>
 800a450:	4602      	mov	r2, r0
 800a452:	e000      	b.n	800a456 <find_volume+0x126>
 800a454:	2200      	movs	r2, #0
 800a456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a45e:	440b      	add	r3, r1
 800a460:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a466:	3301      	adds	r3, #1
 800a468:	643b      	str	r3, [r7, #64]	; 0x40
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d9dc      	bls.n	800a42a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a470:	2300      	movs	r3, #0
 800a472:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <find_volume+0x150>
 800a47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a47c:	3b01      	subs	r3, #1
 800a47e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a488:	4413      	add	r3, r2
 800a48a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a48e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a492:	2b00      	cmp	r3, #0
 800a494:	d005      	beq.n	800a4a2 <find_volume+0x172>
 800a496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a49a:	f7ff fef3 	bl	800a284 <check_fs>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	e000      	b.n	800a4a4 <find_volume+0x174>
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a4a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d905      	bls.n	800a4bc <find_volume+0x18c>
 800a4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d9e1      	bls.n	800a480 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	d101      	bne.n	800a4c8 <find_volume+0x198>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e17d      	b.n	800a7c4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d901      	bls.n	800a4d4 <find_volume+0x1a4>
 800a4d0:	230d      	movs	r3, #13
 800a4d2:	e177      	b.n	800a7c4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	3334      	adds	r3, #52	; 0x34
 800a4d8:	330b      	adds	r3, #11
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fc26 	bl	8008d2c <ld_word>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e6:	d001      	beq.n	800a4ec <find_volume+0x1bc>
 800a4e8:	230d      	movs	r3, #13
 800a4ea:	e16b      	b.n	800a7c4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	3334      	adds	r3, #52	; 0x34
 800a4f0:	3316      	adds	r3, #22
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fc1a 	bl	8008d2c <ld_word>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <find_volume+0x1e0>
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	3334      	adds	r3, #52	; 0x34
 800a506:	3324      	adds	r3, #36	; 0x24
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe fc27 	bl	8008d5c <ld_dword>
 800a50e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a514:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a522:	789b      	ldrb	r3, [r3, #2]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d005      	beq.n	800a534 <find_volume+0x204>
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	789b      	ldrb	r3, [r3, #2]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d001      	beq.n	800a534 <find_volume+0x204>
 800a530:	230d      	movs	r3, #13
 800a532:	e147      	b.n	800a7c4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	789b      	ldrb	r3, [r3, #2]
 800a538:	461a      	mov	r2, r3
 800a53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a548:	b29a      	uxth	r2, r3
 800a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	895b      	ldrh	r3, [r3, #10]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d008      	beq.n	800a568 <find_volume+0x238>
 800a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a558:	895b      	ldrh	r3, [r3, #10]
 800a55a:	461a      	mov	r2, r3
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	895b      	ldrh	r3, [r3, #10]
 800a560:	3b01      	subs	r3, #1
 800a562:	4013      	ands	r3, r2
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <find_volume+0x23c>
 800a568:	230d      	movs	r3, #13
 800a56a:	e12b      	b.n	800a7c4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	3334      	adds	r3, #52	; 0x34
 800a570:	3311      	adds	r3, #17
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fbda 	bl	8008d2c <ld_word>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	891b      	ldrh	r3, [r3, #8]
 800a584:	f003 030f 	and.w	r3, r3, #15
 800a588:	b29b      	uxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <find_volume+0x262>
 800a58e:	230d      	movs	r3, #13
 800a590:	e118      	b.n	800a7c4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	3334      	adds	r3, #52	; 0x34
 800a596:	3313      	adds	r3, #19
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe fbc7 	bl	8008d2c <ld_word>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a5a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d106      	bne.n	800a5b6 <find_volume+0x286>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	3334      	adds	r3, #52	; 0x34
 800a5ac:	3320      	adds	r3, #32
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fbd4 	bl	8008d5c <ld_dword>
 800a5b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	3334      	adds	r3, #52	; 0x34
 800a5ba:	330e      	adds	r3, #14
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fbb5 	bl	8008d2c <ld_word>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a5c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <find_volume+0x2a0>
 800a5cc:	230d      	movs	r3, #13
 800a5ce:	e0f9      	b.n	800a7c4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a5d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d4:	4413      	add	r3, r2
 800a5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5d8:	8912      	ldrh	r2, [r2, #8]
 800a5da:	0912      	lsrs	r2, r2, #4
 800a5dc:	b292      	uxth	r2, r2
 800a5de:	4413      	add	r3, r2
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d201      	bcs.n	800a5ee <find_volume+0x2be>
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	e0ea      	b.n	800a7c4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f6:	8952      	ldrh	r2, [r2, #10]
 800a5f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <find_volume+0x2dc>
 800a604:	230d      	movs	r3, #13
 800a606:	e0dd      	b.n	800a7c4 <find_volume+0x494>
 800a608:	20000310 	.word	0x20000310
		fmt = FS_FAT32;
 800a60c:	2303      	movs	r3, #3
 800a60e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a618:	4293      	cmp	r3, r2
 800a61a:	d802      	bhi.n	800a622 <find_volume+0x2f2>
 800a61c:	2302      	movs	r3, #2
 800a61e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a628:	4293      	cmp	r3, r2
 800a62a:	d802      	bhi.n	800a632 <find_volume+0x302>
 800a62c:	2301      	movs	r3, #1
 800a62e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	1c9a      	adds	r2, r3, #2
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a63e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a640:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a644:	441a      	add	r2, r3
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a64a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	441a      	add	r2, r3
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d11e      	bne.n	800a69a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	3334      	adds	r3, #52	; 0x34
 800a660:	332a      	adds	r3, #42	; 0x2a
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fb62 	bl	8008d2c <ld_word>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <find_volume+0x342>
 800a66e:	230d      	movs	r3, #13
 800a670:	e0a8      	b.n	800a7c4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	891b      	ldrh	r3, [r3, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <find_volume+0x34e>
 800a67a:	230d      	movs	r3, #13
 800a67c:	e0a2      	b.n	800a7c4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a680:	3334      	adds	r3, #52	; 0x34
 800a682:	332c      	adds	r3, #44	; 0x2c
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fb69 	bl	8008d5c <ld_dword>
 800a68a:	4602      	mov	r2, r0
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	647b      	str	r3, [r7, #68]	; 0x44
 800a698:	e01f      	b.n	800a6da <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	891b      	ldrh	r3, [r3, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <find_volume+0x376>
 800a6a2:	230d      	movs	r3, #13
 800a6a4:	e08e      	b.n	800a7c4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ac:	441a      	add	r2, r3
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a6b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d103      	bne.n	800a6c2 <find_volume+0x392>
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	e00a      	b.n	800a6d8 <find_volume+0x3a8>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	699a      	ldr	r2, [r3, #24]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	4413      	add	r3, r2
 800a6cc:	085a      	lsrs	r2, r3, #1
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a6d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a6e4:	0a5b      	lsrs	r3, r3, #9
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d201      	bcs.n	800a6ee <find_volume+0x3be>
 800a6ea:	230d      	movs	r3, #13
 800a6ec:	e06a      	b.n	800a7c4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	615a      	str	r2, [r3, #20]
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	695a      	ldr	r2, [r3, #20]
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	2280      	movs	r2, #128	; 0x80
 800a702:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d149      	bne.n	800a7a0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	3334      	adds	r3, #52	; 0x34
 800a710:	3330      	adds	r3, #48	; 0x30
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fb0a 	bl	8008d2c <ld_word>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d140      	bne.n	800a7a0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a720:	3301      	adds	r3, #1
 800a722:	4619      	mov	r1, r3
 800a724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a726:	f7fe fde1 	bl	80092ec <move_window>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d137      	bne.n	800a7a0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	2200      	movs	r2, #0
 800a734:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	3334      	adds	r3, #52	; 0x34
 800a73a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe faf4 	bl	8008d2c <ld_word>
 800a744:	4603      	mov	r3, r0
 800a746:	461a      	mov	r2, r3
 800a748:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d127      	bne.n	800a7a0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	3334      	adds	r3, #52	; 0x34
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fb01 	bl	8008d5c <ld_dword>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <find_volume+0x49c>)
 800a75e:	429a      	cmp	r2, r3
 800a760:	d11e      	bne.n	800a7a0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	3334      	adds	r3, #52	; 0x34
 800a766:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe faf6 	bl	8008d5c <ld_dword>
 800a770:	4602      	mov	r2, r0
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <find_volume+0x4a0>)
 800a774:	429a      	cmp	r2, r3
 800a776:	d113      	bne.n	800a7a0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	3334      	adds	r3, #52	; 0x34
 800a77c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe faeb 	bl	8008d5c <ld_dword>
 800a786:	4602      	mov	r2, r0
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78e:	3334      	adds	r3, #52	; 0x34
 800a790:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fae1 	bl	8008d5c <ld_dword>
 800a79a:	4602      	mov	r2, r0
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a7a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a7a8:	4b0a      	ldr	r3, [pc, #40]	; (800a7d4 <find_volume+0x4a4>)
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <find_volume+0x4a4>)
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <find_volume+0x4a4>)
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a7bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7be:	f7fe fd2d 	bl	800921c <clear_lock>
#endif
	return FR_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3758      	adds	r7, #88	; 0x58
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	41615252 	.word	0x41615252
 800a7d0:	61417272 	.word	0x61417272
 800a7d4:	20000314 	.word	0x20000314

0800a7d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d01a      	beq.n	800a81e <validate+0x46>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d016      	beq.n	800a81e <validate+0x46>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d011      	beq.n	800a81e <validate+0x46>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	88da      	ldrh	r2, [r3, #6]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	889b      	ldrh	r3, [r3, #4]
 800a804:	429a      	cmp	r2, r3
 800a806:	d10a      	bne.n	800a81e <validate+0x46>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe f9ee 	bl	8008bf0 <disk_status>
 800a814:	4603      	mov	r3, r0
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d005      	beq.n	800a82a <validate+0x52>
		*fs = 0;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800a824:	2309      	movs	r3, #9
 800a826:	73fb      	strb	r3, [r7, #15]
 800a828:	e00f      	b.n	800a84a <validate+0x72>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fb77 	bl	8008f2a <lock_fs>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <validate+0x6e>
 800a842:	230f      	movs	r3, #15
 800a844:	e002      	b.n	800a84c <validate+0x74>
		res = FR_OK;			/* Valid object */
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a866:	f107 0310 	add.w	r3, r7, #16
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff fcc5 	bl	800a1fa <get_ldnumber>
 800a870:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	2b00      	cmp	r3, #0
 800a876:	da01      	bge.n	800a87c <f_mount+0x28>
 800a878:	230b      	movs	r3, #11
 800a87a:	e048      	b.n	800a90e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a87c:	4a26      	ldr	r2, [pc, #152]	; (800a918 <f_mount+0xc4>)
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a884:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00f      	beq.n	800a8ac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a88c:	69b8      	ldr	r0, [r7, #24]
 800a88e:	f7fe fcc5 	bl	800921c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	4618      	mov	r0, r3
 800a898:	f001 fc5d 	bl	800c156 <ff_del_syncobj>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <f_mount+0x52>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	e033      	b.n	800a90e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00f      	beq.n	800a8d2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	330c      	adds	r3, #12
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f001 fc29 	bl	800c11a <ff_cre_syncobj>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <f_mount+0x7e>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e01d      	b.n	800a90e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4910      	ldr	r1, [pc, #64]	; (800a918 <f_mount+0xc4>)
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <f_mount+0x94>
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d001      	beq.n	800a8ec <f_mount+0x98>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	e010      	b.n	800a90e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a8ec:	f107 010c 	add.w	r1, r7, #12
 800a8f0:	f107 0308 	add.w	r3, r7, #8
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fd1a 	bl	800a330 <find_volume>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	7dfa      	ldrb	r2, [r7, #23]
 800a904:	4611      	mov	r1, r2
 800a906:	4618      	mov	r0, r3
 800a908:	f7fe fb25 	bl	8008f56 <unlock_fs>
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000310 	.word	0x20000310

0800a91c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b098      	sub	sp, #96	; 0x60
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <f_open+0x18>
 800a930:	2309      	movs	r3, #9
 800a932:	e1b4      	b.n	800ac9e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a93a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a93c:	79fa      	ldrb	r2, [r7, #7]
 800a93e:	f107 0110 	add.w	r1, r7, #16
 800a942:	f107 0308 	add.w	r3, r7, #8
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff fcf2 	bl	800a330 <find_volume>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 8191 	bne.w	800ac7e <f_open+0x362>
		dj.obj.fs = fs;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	f107 0314 	add.w	r3, r7, #20
 800a966:	4611      	mov	r1, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fbd5 	bl	800a118 <follow_path>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d11a      	bne.n	800a9b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a97c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a980:	b25b      	sxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	da03      	bge.n	800a98e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a986:	2306      	movs	r3, #6
 800a988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a98c:	e011      	b.n	800a9b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	bf14      	ite	ne
 800a998:	2301      	movne	r3, #1
 800a99a:	2300      	moveq	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f107 0314 	add.w	r3, r7, #20
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe faf0 	bl	8008f8c <chk_lock>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	f003 031c 	and.w	r3, r3, #28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d07f      	beq.n	800aabc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d017      	beq.n	800a9f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a9c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d10e      	bne.n	800a9ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a9cc:	f7fe fb3a 	bl	8009044 <enq_lock>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d006      	beq.n	800a9e4 <f_open+0xc8>
 800a9d6:	f107 0314 	add.w	r3, r7, #20
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fa76 	bl	8009ecc <dir_register>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	e000      	b.n	800a9e6 <f_open+0xca>
 800a9e4:	2312      	movs	r3, #18
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	f043 0308 	orr.w	r3, r3, #8
 800a9f0:	71fb      	strb	r3, [r7, #7]
 800a9f2:	e010      	b.n	800aa16 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a9f4:	7ebb      	ldrb	r3, [r7, #26]
 800a9f6:	f003 0311 	and.w	r3, r3, #17
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <f_open+0xea>
					res = FR_DENIED;
 800a9fe:	2307      	movs	r3, #7
 800aa00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa04:	e007      	b.n	800aa16 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa06:	79fb      	ldrb	r3, [r7, #7]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <f_open+0xfa>
 800aa10:	2308      	movs	r3, #8
 800aa12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aa16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d168      	bne.n	800aaf0 <f_open+0x1d4>
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d063      	beq.n	800aaf0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aa28:	f006 fb18 	bl	801105c <get_fattime>
 800aa2c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa30:	330e      	adds	r3, #14
 800aa32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe f9cf 	bl	8008dd8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3c:	3316      	adds	r3, #22
 800aa3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe f9c9 	bl	8008dd8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	330b      	adds	r3, #11
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff f948 	bl	8009cea <ld_clust>
 800aa5a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa60:	2200      	movs	r2, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff f960 	bl	8009d28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6a:	331c      	adds	r3, #28
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe f9b2 	bl	8008dd8 <st_dword>
					fs->wflag = 1;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	2201      	movs	r2, #1
 800aa78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aa7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d037      	beq.n	800aaf0 <f_open+0x1d4>
						dw = fs->winsect;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa84:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800aa86:	f107 0314 	add.w	r3, r7, #20
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fe73 	bl	800977a <remove_chain>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800aa9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d126      	bne.n	800aaf0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fc20 	bl	80092ec <move_window>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aab6:	3a01      	subs	r2, #1
 800aab8:	611a      	str	r2, [r3, #16]
 800aaba:	e019      	b.n	800aaf0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aabc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d115      	bne.n	800aaf0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aac4:	7ebb      	ldrb	r3, [r7, #26]
 800aac6:	f003 0310 	and.w	r3, r3, #16
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aace:	2304      	movs	r3, #4
 800aad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aad4:	e00c      	b.n	800aaf0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <f_open+0x1d4>
 800aae0:	7ebb      	ldrb	r3, [r7, #26]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <f_open+0x1d4>
						res = FR_DENIED;
 800aaea:	2307      	movs	r3, #7
 800aaec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aaf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d128      	bne.n	800ab4a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aaf8:	79fb      	ldrb	r3, [r7, #7]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ab12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bf14      	ite	ne
 800ab22:	2301      	movne	r3, #1
 800ab24:	2300      	moveq	r3, #0
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe faa9 	bl	8009088 <inc_lock>
 800ab36:	4602      	mov	r2, r0
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <f_open+0x22e>
 800ab44:	2302      	movs	r3, #2
 800ab46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ab4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f040 8095 	bne.w	800ac7e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7ff f8c5 	bl	8009cea <ld_clust>
 800ab60:	4602      	mov	r2, r0
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab68:	331c      	adds	r3, #28
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe f8f6 	bl	8008d5c <ld_dword>
 800ab70:	4602      	mov	r2, r0
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	88da      	ldrh	r2, [r3, #6]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	79fa      	ldrb	r2, [r7, #7]
 800ab8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3330      	adds	r3, #48	; 0x30
 800aba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe f960 	bl	8008e72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d060      	beq.n	800ac7e <f_open+0x362>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d05c      	beq.n	800ac7e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	895b      	ldrh	r3, [r3, #10]
 800abd0:	025b      	lsls	r3, r3, #9
 800abd2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	657b      	str	r3, [r7, #84]	; 0x54
 800abe0:	e016      	b.n	800ac10 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe fc3b 	bl	8009462 <get_fat>
 800abec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800abee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d802      	bhi.n	800abfa <f_open+0x2de>
 800abf4:	2302      	movs	r3, #2
 800abf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800abfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d102      	bne.n	800ac08 <f_open+0x2ec>
 800ac02:	2301      	movs	r3, #1
 800ac04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	657b      	str	r3, [r7, #84]	; 0x54
 800ac10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d103      	bne.n	800ac20 <f_open+0x304>
 800ac18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d8e0      	bhi.n	800abe2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d127      	bne.n	800ac7e <f_open+0x362>
 800ac2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d022      	beq.n	800ac7e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe fbf1 	bl	8009424 <clust2sect>
 800ac42:	6478      	str	r0, [r7, #68]	; 0x44
 800ac44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d103      	bne.n	800ac52 <f_open+0x336>
						res = FR_INT_ERR;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac50:	e015      	b.n	800ac7e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac54:	0a5a      	lsrs	r2, r3, #9
 800ac56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac58:	441a      	add	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	7858      	ldrb	r0, [r3, #1]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6a1a      	ldr	r2, [r3, #32]
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	f7fd ffff 	bl	8008c70 <disk_read>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <f_open+0x362>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ac7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d002      	beq.n	800ac8c <f_open+0x370>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ac92:	4611      	mov	r1, r2
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe f95e 	bl	8008f56 <unlock_fs>
 800ac9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3760      	adds	r7, #96	; 0x60
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b08e      	sub	sp, #56	; 0x38
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
 800acb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f107 0214 	add.w	r2, r7, #20
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff fd86 	bl	800a7d8 <validate>
 800accc:	4603      	mov	r3, r0
 800acce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800acd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d107      	bne.n	800acea <f_read+0x44>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	7d5b      	ldrb	r3, [r3, #21]
 800acde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ace2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <f_read+0x58>
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe f92f 	bl	8008f56 <unlock_fs>
 800acf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acfc:	e13d      	b.n	800af7a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	7d1b      	ldrb	r3, [r3, #20]
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <f_read+0x72>
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2107      	movs	r1, #7
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe f921 	bl	8008f56 <unlock_fs>
 800ad14:	2307      	movs	r3, #7
 800ad16:	e130      	b.n	800af7a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	f240 811c 	bls.w	800af66 <f_read+0x2c0>
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ad32:	e118      	b.n	800af66 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 80e4 	bne.w	800af0a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	0a5b      	lsrs	r3, r3, #9
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	8952      	ldrh	r2, [r2, #10]
 800ad4c:	3a01      	subs	r2, #1
 800ad4e:	4013      	ands	r3, r2
 800ad50:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d139      	bne.n	800adcc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	633b      	str	r3, [r7, #48]	; 0x30
 800ad66:	e013      	b.n	800ad90 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d007      	beq.n	800ad80 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	4619      	mov	r1, r3
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7fe fdfc 	bl	8009974 <clmt_clust>
 800ad7c:	6338      	str	r0, [r7, #48]	; 0x30
 800ad7e:	e007      	b.n	800ad90 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7fe fb6a 	bl	8009462 <get_fat>
 800ad8e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d809      	bhi.n	800adaa <f_read+0x104>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2202      	movs	r2, #2
 800ad9a:	755a      	strb	r2, [r3, #21]
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2102      	movs	r1, #2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe f8d8 	bl	8008f56 <unlock_fs>
 800ada6:	2302      	movs	r3, #2
 800ada8:	e0e7      	b.n	800af7a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d109      	bne.n	800adc6 <f_read+0x120>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	755a      	strb	r2, [r3, #21]
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2101      	movs	r1, #1
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe f8ca 	bl	8008f56 <unlock_fs>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e0d9      	b.n	800af7a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adca:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	4619      	mov	r1, r3
 800add4:	4610      	mov	r0, r2
 800add6:	f7fe fb25 	bl	8009424 <clust2sect>
 800adda:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <f_read+0x150>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2202      	movs	r2, #2
 800ade6:	755a      	strb	r2, [r3, #21]
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2102      	movs	r1, #2
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe f8b2 	bl	8008f56 <unlock_fs>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e0c1      	b.n	800af7a <f_read+0x2d4>
			sect += csect;
 800adf6:	69ba      	ldr	r2, [r7, #24]
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4413      	add	r3, r2
 800adfc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	0a5b      	lsrs	r3, r3, #9
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d03e      	beq.n	800ae88 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ae0a:	69fa      	ldr	r2, [r7, #28]
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	4413      	add	r3, r2
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	8952      	ldrh	r2, [r2, #10]
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d905      	bls.n	800ae24 <f_read+0x17e>
					cc = fs->csize - csect;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	895b      	ldrh	r3, [r3, #10]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	7858      	ldrb	r0, [r3, #1]
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae2e:	f7fd ff1f 	bl	8008c70 <disk_read>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d009      	beq.n	800ae4c <f_read+0x1a6>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	755a      	strb	r2, [r3, #21]
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2101      	movs	r1, #1
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe f887 	bl	8008f56 <unlock_fs>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e096      	b.n	800af7a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	7d1b      	ldrb	r3, [r3, #20]
 800ae50:	b25b      	sxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	da14      	bge.n	800ae80 <f_read+0x1da>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6a1a      	ldr	r2, [r3, #32]
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	1ad2      	subs	r2, r2, r3
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d20d      	bcs.n	800ae80 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6a1a      	ldr	r2, [r3, #32]
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	025b      	lsls	r3, r3, #9
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae70:	18d0      	adds	r0, r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3330      	adds	r3, #48	; 0x30
 800ae76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f7fd ffd8 	bl	8008e30 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	025b      	lsls	r3, r3, #9
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ae86:	e05a      	b.n	800af3e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a1a      	ldr	r2, [r3, #32]
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d038      	beq.n	800af04 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	7d1b      	ldrb	r3, [r3, #20]
 800ae96:	b25b      	sxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	da1d      	bge.n	800aed8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	7858      	ldrb	r0, [r3, #1]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a1a      	ldr	r2, [r3, #32]
 800aeaa:	2301      	movs	r3, #1
 800aeac:	f7fd ff00 	bl	8008cb0 <disk_write>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d009      	beq.n	800aeca <f_read+0x224>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	755a      	strb	r2, [r3, #21]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2101      	movs	r1, #1
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe f848 	bl	8008f56 <unlock_fs>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e057      	b.n	800af7a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	7d1b      	ldrb	r3, [r3, #20]
 800aece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	7858      	ldrb	r0, [r3, #1]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aee2:	2301      	movs	r3, #1
 800aee4:	69ba      	ldr	r2, [r7, #24]
 800aee6:	f7fd fec3 	bl	8008c70 <disk_read>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d009      	beq.n	800af04 <f_read+0x25e>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	755a      	strb	r2, [r3, #21]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2101      	movs	r1, #1
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe f82b 	bl	8008f56 <unlock_fs>
 800af00:	2301      	movs	r3, #1
 800af02:	e03a      	b.n	800af7a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af12:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800af18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d901      	bls.n	800af24 <f_read+0x27e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	4413      	add	r3, r2
 800af34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af36:	4619      	mov	r1, r3
 800af38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af3a:	f7fd ff79 	bl	8008e30 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800af3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af42:	4413      	add	r3, r2
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	441a      	add	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	619a      	str	r2, [r3, #24]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af58:	441a      	add	r2, r3
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f47f aee3 	bne.w	800ad34 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2100      	movs	r1, #0
 800af72:	4618      	mov	r0, r3
 800af74:	f7fd ffef 	bl	8008f56 <unlock_fs>
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3738      	adds	r7, #56	; 0x38
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b08c      	sub	sp, #48	; 0x30
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	607a      	str	r2, [r7, #4]
 800af8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f107 0210 	add.w	r2, r7, #16
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff fc18 	bl	800a7d8 <validate>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800afae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d107      	bne.n	800afc6 <f_write+0x44>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	7d5b      	ldrb	r3, [r3, #21]
 800afba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800afbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d009      	beq.n	800afda <f_write+0x58>
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fd ffc1 	bl	8008f56 <unlock_fs>
 800afd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afd8:	e173      	b.n	800b2c2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	7d1b      	ldrb	r3, [r3, #20]
 800afde:	f003 0302 	and.w	r3, r3, #2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d106      	bne.n	800aff4 <f_write+0x72>
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2107      	movs	r1, #7
 800afea:	4618      	mov	r0, r3
 800afec:	f7fd ffb3 	bl	8008f56 <unlock_fs>
 800aff0:	2307      	movs	r3, #7
 800aff2:	e166      	b.n	800b2c2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	699a      	ldr	r2, [r3, #24]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	441a      	add	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	f080 814b 	bcs.w	800b29c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	43db      	mvns	r3, r3
 800b00c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b00e:	e145      	b.n	800b29c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 8101 	bne.w	800b220 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	0a5b      	lsrs	r3, r3, #9
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	8952      	ldrh	r2, [r2, #10]
 800b028:	3a01      	subs	r2, #1
 800b02a:	4013      	ands	r3, r2
 800b02c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d14d      	bne.n	800b0d0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10c      	bne.n	800b056 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b044:	2b00      	cmp	r3, #0
 800b046:	d11a      	bne.n	800b07e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2100      	movs	r1, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fbf9 	bl	8009844 <create_chain>
 800b052:	62b8      	str	r0, [r7, #40]	; 0x28
 800b054:	e013      	b.n	800b07e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	4619      	mov	r1, r3
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7fe fc85 	bl	8009974 <clmt_clust>
 800b06a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b06c:	e007      	b.n	800b07e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f7fe fbe4 	bl	8009844 <create_chain>
 800b07c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 8110 	beq.w	800b2a6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d109      	bne.n	800b0a0 <f_write+0x11e>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2202      	movs	r2, #2
 800b090:	755a      	strb	r2, [r3, #21]
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2102      	movs	r1, #2
 800b096:	4618      	mov	r0, r3
 800b098:	f7fd ff5d 	bl	8008f56 <unlock_fs>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e110      	b.n	800b2c2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a6:	d109      	bne.n	800b0bc <f_write+0x13a>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	755a      	strb	r2, [r3, #21]
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fd ff4f 	bl	8008f56 <unlock_fs>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e102      	b.n	800b2c2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d102      	bne.n	800b0d0 <f_write+0x14e>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	7d1b      	ldrb	r3, [r3, #20]
 800b0d4:	b25b      	sxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da1d      	bge.n	800b116 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	7858      	ldrb	r0, [r3, #1]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a1a      	ldr	r2, [r3, #32]
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f7fd fde1 	bl	8008cb0 <disk_write>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d009      	beq.n	800b108 <f_write+0x186>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	755a      	strb	r2, [r3, #21]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fd ff29 	bl	8008f56 <unlock_fs>
 800b104:	2301      	movs	r3, #1
 800b106:	e0dc      	b.n	800b2c2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	7d1b      	ldrb	r3, [r3, #20]
 800b10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b110:	b2da      	uxtb	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	69db      	ldr	r3, [r3, #28]
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f7fe f980 	bl	8009424 <clust2sect>
 800b124:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d109      	bne.n	800b140 <f_write+0x1be>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2202      	movs	r2, #2
 800b130:	755a      	strb	r2, [r3, #21]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2102      	movs	r1, #2
 800b136:	4618      	mov	r0, r3
 800b138:	f7fd ff0d 	bl	8008f56 <unlock_fs>
 800b13c:	2302      	movs	r3, #2
 800b13e:	e0c0      	b.n	800b2c2 <f_write+0x340>
			sect += csect;
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	4413      	add	r3, r2
 800b146:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	0a5b      	lsrs	r3, r3, #9
 800b14c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d041      	beq.n	800b1d8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	4413      	add	r3, r2
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	8952      	ldrh	r2, [r2, #10]
 800b15e:	4293      	cmp	r3, r2
 800b160:	d905      	bls.n	800b16e <f_write+0x1ec>
					cc = fs->csize - csect;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	895b      	ldrh	r3, [r3, #10]
 800b166:	461a      	mov	r2, r3
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	7858      	ldrb	r0, [r3, #1]
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	69f9      	ldr	r1, [r7, #28]
 800b178:	f7fd fd9a 	bl	8008cb0 <disk_write>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d009      	beq.n	800b196 <f_write+0x214>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	755a      	strb	r2, [r3, #21]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2101      	movs	r1, #1
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fd fee2 	bl	8008f56 <unlock_fs>
 800b192:	2301      	movs	r3, #1
 800b194:	e095      	b.n	800b2c2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6a1a      	ldr	r2, [r3, #32]
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	1ad2      	subs	r2, r2, r3
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d215      	bcs.n	800b1d0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6a1a      	ldr	r2, [r3, #32]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	025b      	lsls	r3, r3, #9
 800b1b4:	69fa      	ldr	r2, [r7, #28]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1bc:	4619      	mov	r1, r3
 800b1be:	f7fd fe37 	bl	8008e30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	7d1b      	ldrb	r3, [r3, #20]
 800b1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	025b      	lsls	r3, r3, #9
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b1d6:	e044      	b.n	800b262 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6a1a      	ldr	r2, [r3, #32]
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d01b      	beq.n	800b21a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	699a      	ldr	r2, [r3, #24]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d215      	bcs.n	800b21a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	7858      	ldrb	r0, [r3, #1]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	f7fd fd38 	bl	8008c70 <disk_read>
 800b200:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b202:	2b00      	cmp	r3, #0
 800b204:	d009      	beq.n	800b21a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2201      	movs	r2, #1
 800b20a:	755a      	strb	r2, [r3, #21]
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2101      	movs	r1, #1
 800b210:	4618      	mov	r0, r3
 800b212:	f7fd fea0 	bl	8008f56 <unlock_fs>
 800b216:	2301      	movs	r3, #1
 800b218:	e053      	b.n	800b2c2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b228:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	429a      	cmp	r2, r3
 800b234:	d901      	bls.n	800b23a <f_write+0x2b8>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b248:	4413      	add	r3, r2
 800b24a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24c:	69f9      	ldr	r1, [r7, #28]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fd fdee 	bl	8008e30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	7d1b      	ldrb	r3, [r3, #20]
 800b258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b262:	69fa      	ldr	r2, [r7, #28]
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	4413      	add	r3, r2
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	699a      	ldr	r2, [r3, #24]
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	619a      	str	r2, [r3, #24]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	429a      	cmp	r2, r3
 800b280:	bf38      	it	cc
 800b282:	461a      	movcc	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	60da      	str	r2, [r3, #12]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	441a      	add	r2, r3
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f47f aeb6 	bne.w	800b010 <f_write+0x8e>
 800b2a4:	e000      	b.n	800b2a8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b2a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	7d1b      	ldrb	r3, [r3, #20]
 800b2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd fe4b 	bl	8008f56 <unlock_fs>
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3730      	adds	r7, #48	; 0x30
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b086      	sub	sp, #24
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f107 0208 	add.w	r2, r7, #8
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fa7c 	bl	800a7d8 <validate>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d16d      	bne.n	800b3c6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7d1b      	ldrb	r3, [r3, #20]
 800b2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d067      	beq.n	800b3c6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	7d1b      	ldrb	r3, [r3, #20]
 800b2fa:	b25b      	sxtb	r3, r3
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da1a      	bge.n	800b336 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	7858      	ldrb	r0, [r3, #1]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1a      	ldr	r2, [r3, #32]
 800b30e:	2301      	movs	r3, #1
 800b310:	f7fd fcce 	bl	8008cb0 <disk_write>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <f_sync+0x5e>
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2101      	movs	r1, #1
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fd fe19 	bl	8008f56 <unlock_fs>
 800b324:	2301      	movs	r3, #1
 800b326:	e055      	b.n	800b3d4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7d1b      	ldrb	r3, [r3, #20]
 800b32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b330:	b2da      	uxtb	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b336:	f005 fe91 	bl	801105c <get_fattime>
 800b33a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f7fd ffd1 	bl	80092ec <move_window>
 800b34a:	4603      	mov	r3, r0
 800b34c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d138      	bne.n	800b3c6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b358:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	330b      	adds	r3, #11
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	320b      	adds	r2, #11
 800b362:	7812      	ldrb	r2, [r2, #0]
 800b364:	f042 0220 	orr.w	r2, r2, #32
 800b368:	b2d2      	uxtb	r2, r2
 800b36a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	461a      	mov	r2, r3
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	f7fe fcd6 	bl	8009d28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f103 021c 	add.w	r2, r3, #28
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7fd fd25 	bl	8008dd8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3316      	adds	r3, #22
 800b392:	6939      	ldr	r1, [r7, #16]
 800b394:	4618      	mov	r0, r3
 800b396:	f7fd fd1f 	bl	8008dd8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3312      	adds	r3, #18
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fd fcfe 	bl	8008da2 <st_word>
					fs->wflag = 1;
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fd ffca 	bl	8009348 <sync_fs>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7d1b      	ldrb	r3, [r3, #20]
 800b3bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	7dfa      	ldrb	r2, [r7, #23]
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fd fdc2 	bl	8008f56 <unlock_fs>
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7ff ff70 	bl	800b2ca <f_sync>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d11d      	bne.n	800b430 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f107 0208 	add.w	r2, r7, #8
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7ff f9eb 	bl	800a7d8 <validate>
 800b402:	4603      	mov	r3, r0
 800b404:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d111      	bne.n	800b430 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	4618      	mov	r0, r3
 800b412:	f7fd fec7 	bl	80091a4 <dec_lock>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2100      	movs	r1, #0
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fd fd93 	bl	8008f56 <unlock_fs>
#endif
		}
	}
	return res;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b086      	sub	sp, #24
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <f_opendir+0x14>
 800b44a:	2309      	movs	r3, #9
 800b44c:	e06a      	b.n	800b524 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b452:	f107 010c 	add.w	r1, r7, #12
 800b456:	463b      	mov	r3, r7
 800b458:	2200      	movs	r2, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe ff68 	bl	800a330 <find_volume>
 800b460:	4603      	mov	r3, r0
 800b462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d14f      	bne.n	800b50a <f_opendir+0xd0>
		obj->fs = fs;
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7fe fe4f 	bl	800a118 <follow_path>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d13d      	bne.n	800b500 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	db12      	blt.n	800b4b6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	799b      	ldrb	r3, [r3, #6]
 800b494:	f003 0310 	and.w	r3, r3, #16
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	f7fe fc20 	bl	8009cea <ld_clust>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	609a      	str	r2, [r3, #8]
 800b4b0:	e001      	b.n	800b4b6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b4b2:	2305      	movs	r3, #5
 800b4b4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d121      	bne.n	800b500 <f_opendir+0xc6>
				obj->id = fs->id;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	88da      	ldrh	r2, [r3, #6]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fe fa88 	bl	80099dc <dir_sdi>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d114      	bne.n	800b500 <f_opendir+0xc6>
					if (obj->sclust) {
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00d      	beq.n	800b4fa <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b4de:	2100      	movs	r1, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fd fdd1 	bl	8009088 <inc_lock>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d105      	bne.n	800b500 <f_opendir+0xc6>
 800b4f4:	2312      	movs	r3, #18
 800b4f6:	75fb      	strb	r3, [r7, #23]
 800b4f8:	e002      	b.n	800b500 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	2b04      	cmp	r3, #4
 800b504:	d101      	bne.n	800b50a <f_opendir+0xd0>
 800b506:	2305      	movs	r3, #5
 800b508:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <f_opendir+0xdc>
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	7dfa      	ldrb	r2, [r7, #23]
 800b51a:	4611      	mov	r1, r2
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fd fd1a 	bl	8008f56 <unlock_fs>
 800b522:	7dfb      	ldrb	r3, [r7, #23]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f107 0208 	add.w	r2, r7, #8
 800b53a:	4611      	mov	r1, r2
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff f94b 	bl	800a7d8 <validate>
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d115      	bne.n	800b578 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d006      	beq.n	800b562 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fd fe23 	bl	80091a4 <dec_lock>
 800b55e:	4603      	mov	r3, r0
 800b560:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2100      	movs	r1, #0
 800b572:	4618      	mov	r0, r3
 800b574:	f7fd fcef 	bl	8008f56 <unlock_fs>
#endif
	}
	return res;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
 800b58a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f107 0208 	add.w	r2, r7, #8
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff f91f 	bl	800a7d8 <validate>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d126      	bne.n	800b5f2 <f_readdir+0x70>
		if (!fno) {
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7fe fa15 	bl	80099dc <dir_sdi>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]
 800b5b6:	e01c      	b.n	800b5f2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fe fbd4 	bl	8009d68 <dir_read>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d101      	bne.n	800b5ce <f_readdir+0x4c>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10e      	bne.n	800b5f2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7fe fcaa 	bl	8009f30 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b5dc:	2100      	movs	r1, #0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7fe fa77 	bl	8009ad2 <dir_next>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d101      	bne.n	800b5f2 <f_readdir+0x70>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	7bfa      	ldrb	r2, [r7, #15]
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fd fcac 	bl	8008f56 <unlock_fs>
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b092      	sub	sp, #72	; 0x48
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b614:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b618:	f107 030c 	add.w	r3, r7, #12
 800b61c:	2200      	movs	r2, #0
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe fe86 	bl	800a330 <find_volume>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b62a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f040 8099 	bne.w	800b766 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	695a      	ldr	r2, [r3, #20]
 800b63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	3b02      	subs	r3, #2
 800b644:	429a      	cmp	r2, r3
 800b646:	d804      	bhi.n	800b652 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	695a      	ldr	r2, [r3, #20]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	e089      	b.n	800b766 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d128      	bne.n	800b6b0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b65e:	2302      	movs	r3, #2
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b666:	f107 0314 	add.w	r3, r7, #20
 800b66a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fd fef8 	bl	8009462 <get_fat>
 800b672:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d103      	bne.n	800b684 <f_getfree+0x7c>
 800b67c:	2301      	movs	r3, #1
 800b67e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b682:	e063      	b.n	800b74c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	2b01      	cmp	r3, #1
 800b688:	d103      	bne.n	800b692 <f_getfree+0x8a>
 800b68a:	2302      	movs	r3, #2
 800b68c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b690:	e05c      	b.n	800b74c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <f_getfree+0x96>
 800b698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69a:	3301      	adds	r3, #1
 800b69c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d3db      	bcc.n	800b666 <f_getfree+0x5e>
 800b6ae:	e04d      	b.n	800b74c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	637b      	str	r3, [r7, #52]	; 0x34
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d113      	bne.n	800b6f2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	63ba      	str	r2, [r7, #56]	; 0x38
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	f7fd fe0a 	bl	80092ec <move_window>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b6de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d131      	bne.n	800b74a <f_getfree+0x142>
							p = fs->win;
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	3334      	adds	r3, #52	; 0x34
 800b6ea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b6ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d10f      	bne.n	800b71a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b6fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fc:	f7fd fb16 	bl	8008d2c <ld_word>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <f_getfree+0x104>
 800b706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b708:	3301      	adds	r3, #1
 800b70a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	3302      	adds	r3, #2
 800b710:	633b      	str	r3, [r7, #48]	; 0x30
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	3b02      	subs	r3, #2
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
 800b718:	e010      	b.n	800b73c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b71a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b71c:	f7fd fb1e 	bl	8008d5c <ld_dword>
 800b720:	4603      	mov	r3, r0
 800b722:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d102      	bne.n	800b730 <f_getfree+0x128>
 800b72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72c:	3301      	adds	r3, #1
 800b72e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	3304      	adds	r3, #4
 800b734:	633b      	str	r3, [r7, #48]	; 0x30
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	3b04      	subs	r3, #4
 800b73a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73e:	3b01      	subs	r3, #1
 800b740:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1bd      	bne.n	800b6c4 <f_getfree+0xbc>
 800b748:	e000      	b.n	800b74c <f_getfree+0x144>
							if (res != FR_OK) break;
 800b74a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b750:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b756:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75c:	7912      	ldrb	r2, [r2, #4]
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fd fbf1 	bl	8008f56 <unlock_fs>
 800b774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3748      	adds	r7, #72	; 0x48
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b780:	b590      	push	{r4, r7, lr}
 800b782:	b09d      	sub	sp, #116	; 0x74
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	607a      	str	r2, [r7, #4]
 800b78a:	603b      	str	r3, [r7, #0]
 800b78c:	460b      	mov	r3, r1
 800b78e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b790:	2301      	movs	r3, #1
 800b792:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b794:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b798:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b79a:	f107 030c 	add.w	r3, r7, #12
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fd2b 	bl	800a1fa <get_ldnumber>
 800b7a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	da02      	bge.n	800b7b2 <f_mkfs+0x32>
 800b7ac:	230b      	movs	r3, #11
 800b7ae:	f000 bc0d 	b.w	800bfcc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b7b2:	4a94      	ldr	r2, [pc, #592]	; (800ba04 <f_mkfs+0x284>)
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d005      	beq.n	800b7ca <f_mkfs+0x4a>
 800b7be:	4a91      	ldr	r2, [pc, #580]	; (800ba04 <f_mkfs+0x284>)
 800b7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b7d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fd fa22 	bl	8008c24 <disk_initialize>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b7e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <f_mkfs+0x76>
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e3ea      	b.n	800bfcc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b7f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b7fa:	f003 0304 	and.w	r3, r3, #4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <f_mkfs+0x86>
 800b802:	230a      	movs	r3, #10
 800b804:	e3e2      	b.n	800bfcc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b806:	f107 0214 	add.w	r2, r7, #20
 800b80a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b80e:	2103      	movs	r1, #3
 800b810:	4618      	mov	r0, r3
 800b812:	f7fd fa6d 	bl	8008cf0 <disk_ioctl>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10c      	bne.n	800b836 <f_mkfs+0xb6>
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d009      	beq.n	800b836 <f_mkfs+0xb6>
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b828:	d805      	bhi.n	800b836 <f_mkfs+0xb6>
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	1e5a      	subs	r2, r3, #1
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	4013      	ands	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <f_mkfs+0xba>
 800b836:	2301      	movs	r3, #1
 800b838:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b83a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b83e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <f_mkfs+0xce>
 800b846:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d809      	bhi.n	800b862 <f_mkfs+0xe2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b854:	d805      	bhi.n	800b862 <f_mkfs+0xe2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	1e5a      	subs	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4013      	ands	r3, r2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <f_mkfs+0xe6>
 800b862:	2313      	movs	r3, #19
 800b864:	e3b2      	b.n	800bfcc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b866:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b884:	fb02 f303 	mul.w	r3, r2, r3
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <f_mkfs+0x114>
 800b890:	230e      	movs	r3, #14
 800b892:	e39b      	b.n	800bfcc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b894:	f107 0210 	add.w	r2, r7, #16
 800b898:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b89c:	2101      	movs	r1, #1
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fd fa26 	bl	8008cf0 <disk_ioctl>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <f_mkfs+0x12e>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e38e      	b.n	800bfcc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b8ae:	7afb      	ldrb	r3, [r7, #11]
 800b8b0:	f003 0308 	and.w	r3, r3, #8
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <f_mkfs+0x13c>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e000      	b.n	800b8be <f_mkfs+0x13e>
 800b8bc:	233f      	movs	r3, #63	; 0x3f
 800b8be:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d201      	bcs.n	800b8cc <f_mkfs+0x14c>
 800b8c8:	230e      	movs	r3, #14
 800b8ca:	e37f      	b.n	800bfcc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b7f      	cmp	r3, #127	; 0x7f
 800b8d8:	d801      	bhi.n	800b8de <f_mkfs+0x15e>
 800b8da:	230e      	movs	r3, #14
 800b8dc:	e376      	b.n	800bfcc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b80      	cmp	r3, #128	; 0x80
 800b8e2:	d901      	bls.n	800b8e8 <f_mkfs+0x168>
 800b8e4:	2313      	movs	r3, #19
 800b8e6:	e371      	b.n	800bfcc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b8e8:	7afb      	ldrb	r3, [r7, #11]
 800b8ea:	f003 0302 	and.w	r3, r3, #2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00d      	beq.n	800b90e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b8f2:	7afb      	ldrb	r3, [r7, #11]
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d004      	beq.n	800b906 <f_mkfs+0x186>
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	d103      	bne.n	800b90e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b906:	2303      	movs	r3, #3
 800b908:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b90c:	e009      	b.n	800b922 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b90e:	7afb      	ldrb	r3, [r7, #11]
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <f_mkfs+0x19c>
 800b918:	2313      	movs	r3, #19
 800b91a:	e357      	b.n	800bfcc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b91c:	2302      	movs	r3, #2
 800b91e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b926:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d13c      	bne.n	800b9a8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b92e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b930:	2b00      	cmp	r3, #0
 800b932:	d11b      	bne.n	800b96c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	0c5b      	lsrs	r3, r3, #17
 800b938:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b93a:	2300      	movs	r3, #0
 800b93c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b93e:	2301      	movs	r3, #1
 800b940:	66bb      	str	r3, [r7, #104]	; 0x68
 800b942:	e005      	b.n	800b950 <f_mkfs+0x1d0>
 800b944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b946:	3301      	adds	r3, #1
 800b948:	64bb      	str	r3, [r7, #72]	; 0x48
 800b94a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b950:	4a2d      	ldr	r2, [pc, #180]	; (800ba08 <f_mkfs+0x288>)
 800b952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d007      	beq.n	800b96c <f_mkfs+0x1ec>
 800b95c:	4a2a      	ldr	r2, [pc, #168]	; (800ba08 <f_mkfs+0x288>)
 800b95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b964:	461a      	mov	r2, r3
 800b966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b968:	429a      	cmp	r2, r3
 800b96a:	d9eb      	bls.n	800b944 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b970:	fbb2 f3f3 	udiv	r3, r2, r3
 800b974:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	3302      	adds	r3, #2
 800b97a:	009a      	lsls	r2, r3, #2
 800b97c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b97e:	4413      	add	r3, r2
 800b980:	1e5a      	subs	r2, r3, #1
 800b982:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b984:	fbb2 f3f3 	udiv	r3, r2, r3
 800b988:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 32;	/* Number of reserved sectors */
 800b98a:	2320      	movs	r3, #32
 800b98c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b98e:	2300      	movs	r3, #0
 800b990:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b998:	4293      	cmp	r3, r2
 800b99a:	d903      	bls.n	800b9a4 <f_mkfs+0x224>
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	4a1b      	ldr	r2, [pc, #108]	; (800ba0c <f_mkfs+0x28c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d952      	bls.n	800ba4a <f_mkfs+0x2ca>
 800b9a4:	230e      	movs	r3, #14
 800b9a6:	e311      	b.n	800bfcc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b9a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d11b      	bne.n	800b9e6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	0b1b      	lsrs	r3, r3, #12
 800b9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9bc:	e005      	b.n	800b9ca <f_mkfs+0x24a>
 800b9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9ca:	4a11      	ldr	r2, [pc, #68]	; (800ba10 <f_mkfs+0x290>)
 800b9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d007      	beq.n	800b9e6 <f_mkfs+0x266>
 800b9d6:	4a0e      	ldr	r2, [pc, #56]	; (800ba10 <f_mkfs+0x290>)
 800b9d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d9eb      	bls.n	800b9be <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ee:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d90c      	bls.n	800ba14 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba02:	e012      	b.n	800ba2a <f_mkfs+0x2aa>
 800ba04:	20000310 	.word	0x20000310
 800ba08:	08019c00 	.word	0x08019c00
 800ba0c:	0ffffff5 	.word	0x0ffffff5
 800ba10:	08019c10 	.word	0x08019c10
				} else {
					fmt = FS_FAT12;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ba1a:	6a3a      	ldr	r2, [r7, #32]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	4413      	add	r3, r2
 800ba22:	3301      	adds	r3, #1
 800ba24:	085b      	lsrs	r3, r3, #1
 800ba26:	3303      	adds	r3, #3
 800ba28:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ba2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ba2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba2e:	4413      	add	r3, r2
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba38:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 1;						/* Number of reserved sectors */
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ba3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba48:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ba4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba4e:	4413      	add	r3, r2
 800ba50:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ba52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba56:	fb02 f203 	mul.w	r2, r2, r3
 800ba5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba5c:	441a      	add	r2, r3
 800ba5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba60:	4413      	add	r3, r2
 800ba62:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	4413      	add	r3, r2
 800ba6a:	1e5a      	subs	r2, r3, #1
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	425b      	negs	r3, r3
 800ba70:	401a      	ands	r2, r3
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ba78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d108      	bne.n	800ba92 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ba80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba84:	4413      	add	r3, r2
 800ba86:	657b      	str	r3, [r7, #84]	; 0x54
 800ba88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba8c:	4413      	add	r3, r2
 800ba8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba90:	e006      	b.n	800baa0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ba92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba9c:	4413      	add	r3, r2
 800ba9e:	653b      	str	r3, [r7, #80]	; 0x50
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800baa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baa2:	011a      	lsls	r2, r3, #4
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	441a      	add	r2, r3
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d901      	bls.n	800bab6 <f_mkfs+0x336>
 800bab2:	230e      	movs	r3, #14
 800bab4:	e28a      	b.n	800bfcc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baba:	1ad2      	subs	r2, r2, r3
 800babc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800babe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bac0:	fb01 f303 	mul.w	r3, r1, r3
 800bac4:	1ad2      	subs	r2, r2, r3
 800bac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac8:	1ad2      	subs	r2, r2, r3
 800baca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800bad2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d10f      	bne.n	800bafa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d80a      	bhi.n	800bafa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d105      	bne.n	800baf6 <f_mkfs+0x376>
 800baea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baec:	085b      	lsrs	r3, r3, #1
 800baee:	607b      	str	r3, [r7, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d144      	bne.n	800bb80 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800baf6:	230e      	movs	r3, #14
 800baf8:	e268      	b.n	800bfcc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bafa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d133      	bne.n	800bb6a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d91e      	bls.n	800bb4a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d107      	bne.n	800bb22 <f_mkfs+0x3a2>
 800bb12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d803      	bhi.n	800bb22 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bb1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	607b      	str	r3, [r7, #4]
 800bb20:	e033      	b.n	800bb8a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bb22:	7afb      	ldrb	r3, [r7, #11]
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800bb32:	e02a      	b.n	800bb8a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d105      	bne.n	800bb46 <f_mkfs+0x3c6>
 800bb3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	607b      	str	r3, [r7, #4]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d91e      	bls.n	800bb84 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bb46:	230e      	movs	r3, #14
 800bb48:	e240      	b.n	800bfcc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d80a      	bhi.n	800bb6a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d105      	bne.n	800bb66 <f_mkfs+0x3e6>
 800bb5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	607b      	str	r3, [r7, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b80      	cmp	r3, #128	; 0x80
 800bb64:	d910      	bls.n	800bb88 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bb66:	230e      	movs	r3, #14
 800bb68:	e230      	b.n	800bfcc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bb6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d10c      	bne.n	800bb8c <f_mkfs+0x40c>
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d907      	bls.n	800bb8c <f_mkfs+0x40c>
 800bb7c:	230e      	movs	r3, #14
 800bb7e:	e225      	b.n	800bfcc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bb80:	bf00      	nop
 800bb82:	e6ce      	b.n	800b922 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb84:	bf00      	nop
 800bb86:	e6cc      	b.n	800b922 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb88:	bf00      	nop
			pau = au;
 800bb8a:	e6ca      	b.n	800b922 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bb8c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bb8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb90:	461a      	mov	r2, r3
 800bb92:	2100      	movs	r1, #0
 800bb94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb96:	f7fd f96c 	bl	8008e72 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bb9a:	220b      	movs	r2, #11
 800bb9c:	49bc      	ldr	r1, [pc, #752]	; (800be90 <f_mkfs+0x710>)
 800bb9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba0:	f7fd f946 	bl	8008e30 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	330b      	adds	r3, #11
 800bba8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd f8f8 	bl	8008da2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	330d      	adds	r3, #13
 800bbb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	330e      	adds	r3, #14
 800bbc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbc2:	b292      	uxth	r2, r2
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fd f8eb 	bl	8008da2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	3310      	adds	r3, #16
 800bbd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	f103 0211 	add.w	r2, r3, #17
 800bbdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d002      	beq.n	800bbea <f_mkfs+0x46a>
 800bbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	e000      	b.n	800bbec <f_mkfs+0x46c>
 800bbea:	2300      	movs	r3, #0
 800bbec:	4619      	mov	r1, r3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	f7fd f8d7 	bl	8008da2 <st_word>
		if (sz_vol < 0x10000) {
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbfa:	d208      	bcs.n	800bc0e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	3313      	adds	r3, #19
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	b292      	uxth	r2, r2
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fd f8cb 	bl	8008da2 <st_word>
 800bc0c:	e006      	b.n	800bc1c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	3320      	adds	r3, #32
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fd f8de 	bl	8008dd8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	3315      	adds	r3, #21
 800bc20:	22f8      	movs	r2, #248	; 0xf8
 800bc22:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	3318      	adds	r3, #24
 800bc28:	213f      	movs	r1, #63	; 0x3f
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd f8b9 	bl	8008da2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	331a      	adds	r3, #26
 800bc34:	21ff      	movs	r1, #255	; 0xff
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd f8b3 	bl	8008da2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	331c      	adds	r3, #28
 800bc40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fd f8c8 	bl	8008dd8 <st_dword>
		if (fmt == FS_FAT32) {
 800bc48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d131      	bne.n	800bcb4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800bc56:	f005 fa01 	bl	801105c <get_fattime>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f7fd f8ba 	bl	8008dd8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	3324      	adds	r3, #36	; 0x24
 800bc68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd f8b4 	bl	8008dd8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	332c      	adds	r3, #44	; 0x2c
 800bc74:	2102      	movs	r1, #2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fd f8ae 	bl	8008dd8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	3330      	adds	r3, #48	; 0x30
 800bc80:	2101      	movs	r1, #1
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd f88d 	bl	8008da2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	3332      	adds	r3, #50	; 0x32
 800bc8c:	2106      	movs	r1, #6
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fd f887 	bl	8008da2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	3340      	adds	r3, #64	; 0x40
 800bc98:	2280      	movs	r2, #128	; 0x80
 800bc9a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	3342      	adds	r3, #66	; 0x42
 800bca0:	2229      	movs	r2, #41	; 0x29
 800bca2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	3347      	adds	r3, #71	; 0x47
 800bca8:	2213      	movs	r2, #19
 800bcaa:	497a      	ldr	r1, [pc, #488]	; (800be94 <f_mkfs+0x714>)
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fd f8bf 	bl	8008e30 <mem_cpy>
 800bcb2:	e020      	b.n	800bcf6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800bcba:	f005 f9cf 	bl	801105c <get_fattime>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f7fd f888 	bl	8008dd8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	3316      	adds	r3, #22
 800bccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcce:	b292      	uxth	r2, r2
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fd f865 	bl	8008da2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	3324      	adds	r3, #36	; 0x24
 800bcdc:	2280      	movs	r2, #128	; 0x80
 800bcde:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	3326      	adds	r3, #38	; 0x26
 800bce4:	2229      	movs	r2, #41	; 0x29
 800bce6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	332b      	adds	r3, #43	; 0x2b
 800bcec:	2213      	movs	r2, #19
 800bcee:	496a      	ldr	r1, [pc, #424]	; (800be98 <f_mkfs+0x718>)
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fd f89d 	bl	8008e30 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcfc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd f84e 	bl	8008da2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800bd06:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd10:	f7fc ffce 	bl	8008cb0 <disk_write>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <f_mkfs+0x59e>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e156      	b.n	800bfcc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800bd1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d140      	bne.n	800bda8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	1d9a      	adds	r2, r3, #6
 800bd2a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd2e:	2301      	movs	r3, #1
 800bd30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd32:	f7fc ffbd 	bl	8008cb0 <disk_write>
			mem_set(buf, 0, ss);
 800bd36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd38:	461a      	mov	r2, r3
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3e:	f7fd f898 	bl	8008e72 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800bd42:	4956      	ldr	r1, [pc, #344]	; (800be9c <f_mkfs+0x71c>)
 800bd44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd46:	f7fd f847 	bl	8008dd8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd50:	4953      	ldr	r1, [pc, #332]	; (800bea0 <f_mkfs+0x720>)
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd f840 	bl	8008dd8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7fd f837 	bl	8008dd8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bd70:	2102      	movs	r1, #2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fd f830 	bl	8008dd8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fd f80d 	bl	8008da2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	1dda      	adds	r2, r3, #7
 800bd8c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd90:	2301      	movs	r3, #1
 800bd92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd94:	f7fc ff8c 	bl	8008cb0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bda0:	2301      	movs	r3, #1
 800bda2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bda4:	f7fc ff84 	bl	8008cb0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800bda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdaa:	2100      	movs	r1, #0
 800bdac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdae:	f7fd f860 	bl	8008e72 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800bdb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdb4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdba:	e04b      	b.n	800be54 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800bdbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d113      	bne.n	800bdec <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800bdc4:	f06f 0107 	mvn.w	r1, #7
 800bdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdca:	f7fd f805 	bl	8008dd8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	f04f 31ff 	mov.w	r1, #4294967295
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fc fffe 	bl	8008dd8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	3308      	adds	r3, #8
 800bde0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fc fff7 	bl	8008dd8 <st_dword>
 800bdea:	e00b      	b.n	800be04 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800bdec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d101      	bne.n	800bdf8 <f_mkfs+0x678>
 800bdf4:	4b2b      	ldr	r3, [pc, #172]	; (800bea4 <f_mkfs+0x724>)
 800bdf6:	e001      	b.n	800bdfc <f_mkfs+0x67c>
 800bdf8:	f06f 0307 	mvn.w	r3, #7
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be00:	f7fc ffea 	bl	8008dd8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800be04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be06:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800be08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	4293      	cmp	r3, r2
 800be0e:	bf28      	it	cs
 800be10:	4613      	movcs	r3, r2
 800be12:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800be14:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800be18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be1e:	f7fc ff47 	bl	8008cb0 <disk_write>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <f_mkfs+0x6ac>
 800be28:	2301      	movs	r3, #1
 800be2a:	e0cf      	b.n	800bfcc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800be2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be2e:	461a      	mov	r2, r3
 800be30:	2100      	movs	r1, #0
 800be32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be34:	f7fd f81d 	bl	8008e72 <mem_set>
				sect += n; nsect -= n;
 800be38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be3c:	4413      	add	r3, r2
 800be3e:	667b      	str	r3, [r7, #100]	; 0x64
 800be40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800be48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1dc      	bne.n	800be08 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800be4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be50:	3301      	adds	r3, #1
 800be52:	64bb      	str	r3, [r7, #72]	; 0x48
 800be54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be58:	429a      	cmp	r2, r3
 800be5a:	d3af      	bcc.n	800bdbc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800be5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800be60:	2b03      	cmp	r3, #3
 800be62:	d101      	bne.n	800be68 <f_mkfs+0x6e8>
 800be64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be66:	e000      	b.n	800be6a <f_mkfs+0x6ea>
 800be68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be6a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800be6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	4293      	cmp	r3, r2
 800be72:	bf28      	it	cs
 800be74:	4613      	movcs	r3, r2
 800be76:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800be78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800be7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be82:	f7fc ff15 	bl	8008cb0 <disk_write>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00d      	beq.n	800bea8 <f_mkfs+0x728>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e09d      	b.n	800bfcc <f_mkfs+0x84c>
 800be90:	08016bf0 	.word	0x08016bf0
 800be94:	08016bfc 	.word	0x08016bfc
 800be98:	08016c10 	.word	0x08016c10
 800be9c:	41615252 	.word	0x41615252
 800bea0:	61417272 	.word	0x61417272
 800bea4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800bea8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800beaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beac:	4413      	add	r3, r2
 800beae:	667b      	str	r3, [r7, #100]	; 0x64
 800beb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800beb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800beb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1d6      	bne.n	800be6c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800bebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d103      	bne.n	800bece <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800bec6:	230c      	movs	r3, #12
 800bec8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800becc:	e010      	b.n	800bef0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed4:	d303      	bcc.n	800bede <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800bed6:	2306      	movs	r3, #6
 800bed8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800bedc:	e008      	b.n	800bef0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800bede:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d101      	bne.n	800beea <f_mkfs+0x76a>
 800bee6:	2304      	movs	r3, #4
 800bee8:	e000      	b.n	800beec <f_mkfs+0x76c>
 800beea:	2301      	movs	r3, #1
 800beec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800bef0:	7afb      	ldrb	r3, [r7, #11]
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d15b      	bne.n	800bfb2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800befa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800befc:	461a      	mov	r2, r3
 800befe:	2100      	movs	r1, #0
 800bf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf02:	f7fc ffb6 	bl	8008e72 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fc ff46 	bl	8008da2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bf1c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	2200      	movs	r2, #0
 800bf22:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	3301      	adds	r3, #1
 800bf28:	2201      	movs	r2, #1
 800bf2a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	3302      	adds	r3, #2
 800bf30:	2201      	movs	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	3303      	adds	r3, #3
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800bf44:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	441a      	add	r2, r3
 800bf4c:	4b21      	ldr	r3, [pc, #132]	; (800bfd4 <f_mkfs+0x854>)
 800bf4e:	fba3 1302 	umull	r1, r3, r3, r2
 800bf52:	1ad2      	subs	r2, r2, r3
 800bf54:	0852      	lsrs	r2, r2, #1
 800bf56:	4413      	add	r3, r2
 800bf58:	0b5b      	lsrs	r3, r3, #13
 800bf5a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	3305      	adds	r3, #5
 800bf60:	22fe      	movs	r2, #254	; 0xfe
 800bf62:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	3306      	adds	r3, #6
 800bf68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf6a:	0892      	lsrs	r2, r2, #2
 800bf6c:	b2d2      	uxtb	r2, r2
 800bf6e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	3307      	adds	r3, #7
 800bf7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf7c:	b2d2      	uxtb	r2, r2
 800bf7e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	3308      	adds	r3, #8
 800bf84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fc ff26 	bl	8008dd8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	330c      	adds	r3, #12
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4611      	mov	r1, r2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fc ff1f 	bl	8008dd8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800bf9a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfa4:	f7fc fe84 	bl	8008cb0 <disk_write>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <f_mkfs+0x832>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e00c      	b.n	800bfcc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800bfb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2100      	movs	r1, #0
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fc fe98 	bl	8008cf0 <disk_ioctl>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <f_mkfs+0x84a>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e000      	b.n	800bfcc <f_mkfs+0x84c>

	return FR_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3774      	adds	r7, #116	; 0x74
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd90      	pop	{r4, r7, pc}
 800bfd4:	0515565b 	.word	0x0515565b

0800bfd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bfee:	4b1f      	ldr	r3, [pc, #124]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800bff0:	7a5b      	ldrb	r3, [r3, #9]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d131      	bne.n	800c05c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bff8:	4b1c      	ldr	r3, [pc, #112]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800bffa:	7a5b      	ldrb	r3, [r3, #9]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	461a      	mov	r2, r3
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c002:	2100      	movs	r1, #0
 800c004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c006:	4b19      	ldr	r3, [pc, #100]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c008:	7a5b      	ldrb	r3, [r3, #9]
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	4a17      	ldr	r2, [pc, #92]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c016:	4b15      	ldr	r3, [pc, #84]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c018:	7a5b      	ldrb	r3, [r3, #9]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	461a      	mov	r2, r3
 800c01e:	4b13      	ldr	r3, [pc, #76]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c020:	4413      	add	r3, r2
 800c022:	79fa      	ldrb	r2, [r7, #7]
 800c024:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c028:	7a5b      	ldrb	r3, [r3, #9]
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	b2d1      	uxtb	r1, r2
 800c030:	4a0e      	ldr	r2, [pc, #56]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c032:	7251      	strb	r1, [r2, #9]
 800c034:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c036:	7dbb      	ldrb	r3, [r7, #22]
 800c038:	3330      	adds	r3, #48	; 0x30
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	3301      	adds	r3, #1
 800c044:	223a      	movs	r2, #58	; 0x3a
 800c046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	3302      	adds	r3, #2
 800c04c:	222f      	movs	r2, #47	; 0x2f
 800c04e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	3303      	adds	r3, #3
 800c054:	2200      	movs	r2, #0
 800c056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	371c      	adds	r7, #28
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	20000338 	.word	0x20000338

0800c070 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c07a:	2200      	movs	r2, #0
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ffaa 	bl	800bfd8 <FATFS_LinkDriverEx>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800c0a4:	4b15      	ldr	r3, [pc, #84]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0a6:	7a5b      	ldrb	r3, [r3, #9]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01e      	beq.n	800c0ec <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	3b30      	subs	r3, #48	; 0x30
 800c0b4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	4a10      	ldr	r2, [pc, #64]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d013      	beq.n	800c0ec <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	4a0d      	ldr	r2, [pc, #52]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0d4:	4413      	add	r3, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800c0da:	4b08      	ldr	r3, [pc, #32]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0dc:	7a5b      	ldrb	r3, [r3, #9]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0e6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20000338 	.word	0x20000338

0800c100 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800c108:	2100      	movs	r1, #0
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff ffc0 	bl	800c090 <FATFS_UnLinkDriverEx>
 800c110:	4603      	mov	r3, r0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	4603      	mov	r3, r0
 800c122:	6039      	str	r1, [r7, #0]
 800c124:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 800c126:	2300      	movs	r3, #0
 800c128:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c12a:	f107 0308 	add.w	r3, r7, #8
 800c12e:	2101      	movs	r1, #1
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f8a8 	bl	800c286 <osSemaphoreCreate>
 800c136:	4602      	mov	r2, r0
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	bf14      	ite	ne
 800c144:	2301      	movne	r3, #1
 800c146:	2300      	moveq	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	60fb      	str	r3, [r7, #12]

    return ret;
 800c14c:	68fb      	ldr	r3, [r7, #12]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f936 	bl	800c3d0 <osSemaphoreDelete>
    return 1;
 800c164:	2301      	movs	r3, #1
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c17a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f8a0 	bl	800c2c4 <osSemaphoreWait>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <ff_req_grant+0x20>
  {
    ret = 1;
 800c18a:	2301      	movs	r3, #1
 800c18c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c18e:	68fb      	ldr	r3, [r7, #12]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f8df 	bl	800c364 <osSemaphoreRelease>
}
 800c1a6:	bf00      	nop
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b085      	sub	sp, #20
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c1bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1c0:	2b84      	cmp	r3, #132	; 0x84
 800c1c2:	d005      	beq.n	800c1d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c1c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3303      	adds	r3, #3
 800c1ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e4:	f3ef 8305 	mrs	r3, IPSR
 800c1e8:	607b      	str	r3, [r7, #4]
  return(result);
 800c1ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bf14      	ite	ne
 800c1f0:	2301      	movne	r3, #1
 800c1f2:	2300      	moveq	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c206:	f001 fbeb 	bl	800d9e0 <vTaskStartScheduler>
  
  return osOK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c212:	b087      	sub	sp, #28
 800c214:	af02      	add	r7, sp, #8
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685c      	ldr	r4, [r3, #4]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c226:	b29e      	uxth	r6, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff ffbd 	bl	800c1ae <makeFreeRtosPriority>
 800c234:	4602      	mov	r2, r0
 800c236:	f107 030c 	add.w	r3, r7, #12
 800c23a:	9301      	str	r3, [sp, #4]
 800c23c:	9200      	str	r2, [sp, #0]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	4632      	mov	r2, r6
 800c242:	4629      	mov	r1, r5
 800c244:	4620      	mov	r0, r4
 800c246:	f001 fa69 	bl	800d71c <xTaskCreate>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d001      	beq.n	800c254 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	e000      	b.n	800c256 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800c254:	68fb      	ldr	r3, [r7, #12]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c25e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b084      	sub	sp, #16
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <osDelay+0x16>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	e000      	b.n	800c276 <osDelay+0x18>
 800c274:	2301      	movs	r3, #1
 800c276:	4618      	mov	r0, r3
 800c278:	f001 fb7c 	bl	800d974 <vTaskDelay>
  
  return osOK;
 800c27c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c286:	b580      	push	{r7, lr}
 800c288:	b084      	sub	sp, #16
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d110      	bne.n	800c2b8 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800c296:	2203      	movs	r2, #3
 800c298:	2100      	movs	r1, #0
 800c29a:	2001      	movs	r0, #1
 800c29c:	f000 fcc0 	bl	800cc20 <xQueueGenericCreate>
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d005      	beq.n	800c2b4 <osSemaphoreCreate+0x2e>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 fd10 	bl	800ccd4 <xQueueGenericSend>
    return sema;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	e000      	b.n	800c2ba <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800c2b8:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c2d8:	2380      	movs	r3, #128	; 0x80
 800c2da:	e03c      	b.n	800c356 <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e6:	d103      	bne.n	800c2f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	e009      	b.n	800c304 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d006      	beq.n	800c304 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <osSemaphoreWait+0x40>
      ticks = 1;
 800c300:	2301      	movs	r3, #1
 800c302:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c304:	f7ff ff6b 	bl	800c1de <inHandlerMode>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d017      	beq.n	800c33e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c30e:	f107 0308 	add.w	r3, r7, #8
 800c312:	461a      	mov	r2, r3
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 f824 	bl	800d364 <xQueueReceiveFromISR>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d001      	beq.n	800c326 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c322:	23ff      	movs	r3, #255	; 0xff
 800c324:	e017      	b.n	800c356 <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d013      	beq.n	800c354 <osSemaphoreWait+0x90>
 800c32c:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <osSemaphoreWait+0x9c>)
 800c32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	e00a      	b.n	800c354 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c33e:	2300      	movs	r3, #0
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	2100      	movs	r1, #0
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fef5 	bl	800d134 <xQueueGenericReceive>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d001      	beq.n	800c354 <osSemaphoreWait+0x90>
    return osErrorOS;
 800c350:	23ff      	movs	r3, #255	; 0xff
 800c352:	e000      	b.n	800c356 <osSemaphoreWait+0x92>
  }
  
  return osOK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	e000ed04 	.word	0xe000ed04

0800c364 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c370:	2300      	movs	r3, #0
 800c372:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c374:	f7ff ff33 	bl	800c1de <inHandlerMode>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d016      	beq.n	800c3ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c37e:	f107 0308 	add.w	r3, r7, #8
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fe43 	bl	800d010 <xQueueGiveFromISR>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d001      	beq.n	800c394 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c390:	23ff      	movs	r3, #255	; 0xff
 800c392:	e017      	b.n	800c3c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d013      	beq.n	800c3c2 <osSemaphoreRelease+0x5e>
 800c39a:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <osSemaphoreRelease+0x68>)
 800c39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	e00a      	b.n	800c3c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fc8e 	bl	800ccd4 <xQueueGenericSend>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d001      	beq.n	800c3c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c3be:	23ff      	movs	r3, #255	; 0xff
 800c3c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c3d8:	f7ff ff01 	bl	800c1de <inHandlerMode>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c3e2:	2382      	movs	r3, #130	; 0x82
 800c3e4:	e003      	b.n	800c3ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f001 f83f 	bl	800d46a <vQueueDelete>

  return osOK; 
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	4619      	mov	r1, r3
 800c40c:	f000 fc08 	bl	800cc20 <xQueueGenericCreate>
 800c410:	4603      	mov	r3, r0
#endif
}
 800c412:	4618      	mov	r0, r3
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c428:	2300      	movs	r3, #0
 800c42a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <osMessagePut+0x1e>
    ticks = 1;
 800c436:	2301      	movs	r3, #1
 800c438:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c43a:	f7ff fed0 	bl	800c1de <inHandlerMode>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d018      	beq.n	800c476 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c444:	f107 0210 	add.w	r2, r7, #16
 800c448:	f107 0108 	add.w	r1, r7, #8
 800c44c:	2300      	movs	r3, #0
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f000 fd42 	bl	800ced8 <xQueueGenericSendFromISR>
 800c454:	4603      	mov	r3, r0
 800c456:	2b01      	cmp	r3, #1
 800c458:	d001      	beq.n	800c45e <osMessagePut+0x42>
      return osErrorOS;
 800c45a:	23ff      	movs	r3, #255	; 0xff
 800c45c:	e018      	b.n	800c490 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d014      	beq.n	800c48e <osMessagePut+0x72>
 800c464:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <osMessagePut+0x7c>)
 800c466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	e00b      	b.n	800c48e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c476:	f107 0108 	add.w	r1, r7, #8
 800c47a:	2300      	movs	r3, #0
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 fc28 	bl	800ccd4 <xQueueGenericSend>
 800c484:	4603      	mov	r3, r0
 800c486:	2b01      	cmp	r3, #1
 800c488:	d001      	beq.n	800c48e <osMessagePut+0x72>
      return osErrorOS;
 800c48a:	23ff      	movs	r3, #255	; 0xff
 800c48c:	e000      	b.n	800c490 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3718      	adds	r7, #24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	e000ed04 	.word	0xe000ed04

0800c49c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c49c:	b590      	push	{r4, r7, lr}
 800c49e:	b08b      	sub	sp, #44	; 0x2c
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c4b6:	2380      	movs	r3, #128	; 0x80
 800c4b8:	617b      	str	r3, [r7, #20]
    return event;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	461c      	mov	r4, r3
 800c4be:	f107 0314 	add.w	r3, r7, #20
 800c4c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c4ca:	e054      	b.n	800c576 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4da:	d103      	bne.n	800c4e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4e2:	e009      	b.n	800c4f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d006      	beq.n	800c4f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <osMessageGet+0x5c>
      ticks = 1;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c4f8:	f7ff fe71 	bl	800c1de <inHandlerMode>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d01c      	beq.n	800c53c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c502:	f107 0220 	add.w	r2, r7, #32
 800c506:	f107 0314 	add.w	r3, r7, #20
 800c50a:	3304      	adds	r3, #4
 800c50c:	4619      	mov	r1, r3
 800c50e:	68b8      	ldr	r0, [r7, #8]
 800c510:	f000 ff28 	bl	800d364 <xQueueReceiveFromISR>
 800c514:	4603      	mov	r3, r0
 800c516:	2b01      	cmp	r3, #1
 800c518:	d102      	bne.n	800c520 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c51a:	2310      	movs	r3, #16
 800c51c:	617b      	str	r3, [r7, #20]
 800c51e:	e001      	b.n	800c524 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c520:	2300      	movs	r3, #0
 800c522:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d01d      	beq.n	800c566 <osMessageGet+0xca>
 800c52a:	4b15      	ldr	r3, [pc, #84]	; (800c580 <osMessageGet+0xe4>)
 800c52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	e014      	b.n	800c566 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c53c:	f107 0314 	add.w	r3, r7, #20
 800c540:	1d19      	adds	r1, r3, #4
 800c542:	2300      	movs	r3, #0
 800c544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c546:	68b8      	ldr	r0, [r7, #8]
 800c548:	f000 fdf4 	bl	800d134 <xQueueGenericReceive>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d102      	bne.n	800c558 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c552:	2310      	movs	r3, #16
 800c554:	617b      	str	r3, [r7, #20]
 800c556:	e006      	b.n	800c566 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <osMessageGet+0xc6>
 800c55e:	2300      	movs	r3, #0
 800c560:	e000      	b.n	800c564 <osMessageGet+0xc8>
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	461c      	mov	r4, r3
 800c56a:	f107 0314 	add.w	r3, r7, #20
 800c56e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	372c      	adds	r7, #44	; 0x2c
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd90      	pop	{r4, r7, pc}
 800c57e:	bf00      	nop
 800c580:	e000ed04 	.word	0xe000ed04

0800c584 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c588:	f001 fe22 	bl	800e1d0 <xTaskGetSchedulerState>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d001      	beq.n	800c596 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800c592:	f000 fa51 	bl	800ca38 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c596:	bf00      	nop
 800c598:	bd80      	pop	{r7, pc}

0800c59a <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b084      	sub	sp, #16
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800c5a2:	f001 fa67 	bl	800da74 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f007 fc74 	bl	8013e94 <malloc>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5b0:	f001 fa6e 	bl	800da90 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
	if( pv )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d006      	beq.n	800c5da <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800c5cc:	f001 fa52 	bl	800da74 <vTaskSuspendAll>
		{
			free( pv );
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f007 fc67 	bl	8013ea4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800c5d6:	f001 fa5b 	bl	800da90 <xTaskResumeAll>
	}
}
 800c5da:	bf00      	nop
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f103 0208 	add.w	r2, r3, #8
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f103 0208 	add.w	r2, r3, #8
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f103 0208 	add.w	r2, r3, #8
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c616:	bf00      	nop
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c622:	b480      	push	{r7}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	689a      	ldr	r2, [r3, #8]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	601a      	str	r2, [r3, #0]
}
 800c678:	bf00      	nop
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69a:	d103      	bne.n	800c6a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	e00c      	b.n	800c6be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	3308      	adds	r3, #8
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	e002      	b.n	800c6b2 <vListInsert+0x2e>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	60fb      	str	r3, [r7, #12]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d9f6      	bls.n	800c6ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	601a      	str	r2, [r3, #0]
}
 800c6ea:	bf00      	nop
 800c6ec:	3714      	adds	r7, #20
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr

0800c6f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	b085      	sub	sp, #20
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	6892      	ldr	r2, [r2, #8]
 800c70c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	6852      	ldr	r2, [r2, #4]
 800c716:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d103      	bne.n	800c72a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	689a      	ldr	r2, [r3, #8]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	1e5a      	subs	r2, r3, #1
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
	...

0800c74c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3b04      	subs	r3, #4
 800c75c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3b04      	subs	r3, #4
 800c76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	f023 0201 	bic.w	r2, r3, #1
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	3b04      	subs	r3, #4
 800c77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c77c:	4a0c      	ldr	r2, [pc, #48]	; (800c7b0 <pxPortInitialiseStack+0x64>)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3b14      	subs	r3, #20
 800c786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3b04      	subs	r3, #4
 800c792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f06f 0202 	mvn.w	r2, #2
 800c79a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3b20      	subs	r3, #32
 800c7a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	0800c7b5 	.word	0x0800c7b5

0800c7b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7ba:	4b0e      	ldr	r3, [pc, #56]	; (800c7f4 <prvTaskExitError+0x40>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c2:	d00b      	beq.n	800c7dc <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	b672      	cpsid	i
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	b662      	cpsie	i
 800c7d8:	607b      	str	r3, [r7, #4]
 800c7da:	e7fe      	b.n	800c7da <prvTaskExitError+0x26>
 800c7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e0:	b672      	cpsid	i
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	b662      	cpsie	i
 800c7f0:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800c7f2:	e7fe      	b.n	800c7f2 <prvTaskExitError+0x3e>
 800c7f4:	20000014 	.word	0x20000014
	...

0800c800 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <pxCurrentTCBConst2>)
 800c802:	6819      	ldr	r1, [r3, #0]
 800c804:	6808      	ldr	r0, [r1, #0]
 800c806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	f380 8809 	msr	PSP, r0
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f04f 0000 	mov.w	r0, #0
 800c816:	f380 8811 	msr	BASEPRI, r0
 800c81a:	4770      	bx	lr
 800c81c:	f3af 8000 	nop.w

0800c820 <pxCurrentTCBConst2>:
 800c820:	2000034c 	.word	0x2000034c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop

0800c828 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c828:	4806      	ldr	r0, [pc, #24]	; (800c844 <prvPortStartFirstTask+0x1c>)
 800c82a:	6800      	ldr	r0, [r0, #0]
 800c82c:	6800      	ldr	r0, [r0, #0]
 800c82e:	f380 8808 	msr	MSP, r0
 800c832:	b662      	cpsie	i
 800c834:	b661      	cpsie	f
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	df00      	svc	0
 800c840:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c842:	bf00      	nop
 800c844:	e000ed08 	.word	0xe000ed08

0800c848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c84e:	4b2c      	ldr	r3, [pc, #176]	; (800c900 <xPortStartScheduler+0xb8>)
 800c850:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	22ff      	movs	r2, #255	; 0xff
 800c85e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	b2db      	uxtb	r3, r3
 800c866:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c868:	79fb      	ldrb	r3, [r7, #7]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c870:	b2da      	uxtb	r2, r3
 800c872:	4b24      	ldr	r3, [pc, #144]	; (800c904 <xPortStartScheduler+0xbc>)
 800c874:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c876:	4b24      	ldr	r3, [pc, #144]	; (800c908 <xPortStartScheduler+0xc0>)
 800c878:	2207      	movs	r2, #7
 800c87a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c87c:	e009      	b.n	800c892 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c87e:	4b22      	ldr	r3, [pc, #136]	; (800c908 <xPortStartScheduler+0xc0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3b01      	subs	r3, #1
 800c884:	4a20      	ldr	r2, [pc, #128]	; (800c908 <xPortStartScheduler+0xc0>)
 800c886:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c888:	79fb      	ldrb	r3, [r7, #7]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	005b      	lsls	r3, r3, #1
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c892:	79fb      	ldrb	r3, [r7, #7]
 800c894:	b2db      	uxtb	r3, r3
 800c896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c89a:	2b80      	cmp	r3, #128	; 0x80
 800c89c:	d0ef      	beq.n	800c87e <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c89e:	4b1a      	ldr	r3, [pc, #104]	; (800c908 <xPortStartScheduler+0xc0>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	021b      	lsls	r3, r3, #8
 800c8a4:	4a18      	ldr	r2, [pc, #96]	; (800c908 <xPortStartScheduler+0xc0>)
 800c8a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8a8:	4b17      	ldr	r3, [pc, #92]	; (800c908 <xPortStartScheduler+0xc0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8b0:	4a15      	ldr	r2, [pc, #84]	; (800c908 <xPortStartScheduler+0xc0>)
 800c8b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8bc:	4a13      	ldr	r2, [pc, #76]	; (800c90c <xPortStartScheduler+0xc4>)
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <xPortStartScheduler+0xc4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8c8:	4a10      	ldr	r2, [pc, #64]	; (800c90c <xPortStartScheduler+0xc4>)
 800c8ca:	4b10      	ldr	r3, [pc, #64]	; (800c90c <xPortStartScheduler+0xc4>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c8d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8d4:	f000 f8d2 	bl	800ca7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8d8:	4b0d      	ldr	r3, [pc, #52]	; (800c910 <xPortStartScheduler+0xc8>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8de:	f000 f8e9 	bl	800cab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8e2:	4a0c      	ldr	r2, [pc, #48]	; (800c914 <xPortStartScheduler+0xcc>)
 800c8e4:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <xPortStartScheduler+0xcc>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c8ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8ee:	f7ff ff9b 	bl	800c828 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800c8f2:	f7ff ff5f 	bl	800c7b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	e000e400 	.word	0xe000e400
 800c904:	20000344 	.word	0x20000344
 800c908:	20000348 	.word	0x20000348
 800c90c:	e000ed20 	.word	0xe000ed20
 800c910:	20000014 	.word	0x20000014
 800c914:	e000ef34 	.word	0xe000ef34

0800c918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	b672      	cpsid	i
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	b662      	cpsie	i
 800c932:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c934:	4b0f      	ldr	r3, [pc, #60]	; (800c974 <vPortEnterCritical+0x5c>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3301      	adds	r3, #1
 800c93a:	4a0e      	ldr	r2, [pc, #56]	; (800c974 <vPortEnterCritical+0x5c>)
 800c93c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c93e:	4b0d      	ldr	r3, [pc, #52]	; (800c974 <vPortEnterCritical+0x5c>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d110      	bne.n	800c968 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c946:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <vPortEnterCritical+0x60>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00b      	beq.n	800c968 <vPortEnterCritical+0x50>
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	b672      	cpsid	i
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	b662      	cpsie	i
 800c964:	603b      	str	r3, [r7, #0]
 800c966:	e7fe      	b.n	800c966 <vPortEnterCritical+0x4e>
	}
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	20000014 	.word	0x20000014
 800c978:	e000ed04 	.word	0xe000ed04

0800c97c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c982:	4b12      	ldr	r3, [pc, #72]	; (800c9cc <vPortExitCritical+0x50>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10b      	bne.n	800c9a2 <vPortExitCritical+0x26>
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	b672      	cpsid	i
 800c990:	f383 8811 	msr	BASEPRI, r3
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	b662      	cpsie	i
 800c99e:	607b      	str	r3, [r7, #4]
 800c9a0:	e7fe      	b.n	800c9a0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c9a2:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <vPortExitCritical+0x50>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	4a08      	ldr	r2, [pc, #32]	; (800c9cc <vPortExitCritical+0x50>)
 800c9aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9ac:	4b07      	ldr	r3, [pc, #28]	; (800c9cc <vPortExitCritical+0x50>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d104      	bne.n	800c9be <vPortExitCritical+0x42>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9be:	bf00      	nop
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20000014 	.word	0x20000014

0800c9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9d0:	f3ef 8009 	mrs	r0, PSP
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	4b15      	ldr	r3, [pc, #84]	; (800ca30 <pxCurrentTCBConst>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	f01e 0f10 	tst.w	lr, #16
 800c9e0:	bf08      	it	eq
 800c9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ea:	6010      	str	r0, [r2, #0]
 800c9ec:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800c9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c9f4:	b672      	cpsid	i
 800c9f6:	f380 8811 	msr	BASEPRI, r0
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	b662      	cpsie	i
 800ca04:	f001 f9a0 	bl	800dd48 <vTaskSwitchContext>
 800ca08:	f04f 0000 	mov.w	r0, #0
 800ca0c:	f380 8811 	msr	BASEPRI, r0
 800ca10:	bc08      	pop	{r3}
 800ca12:	6819      	ldr	r1, [r3, #0]
 800ca14:	6808      	ldr	r0, [r1, #0]
 800ca16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1a:	f01e 0f10 	tst.w	lr, #16
 800ca1e:	bf08      	it	eq
 800ca20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca24:	f380 8809 	msr	PSP, r0
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop

0800ca30 <pxCurrentTCBConst>:
 800ca30:	2000034c 	.word	0x2000034c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop

0800ca38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	b672      	cpsid	i
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	b662      	cpsie	i
 800ca52:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca54:	f001 f8ba 	bl	800dbcc <xTaskIncrementTick>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d003      	beq.n	800ca66 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca5e:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <xPortSysTickHandler+0x40>)
 800ca60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	2300      	movs	r3, #0
 800ca68:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	e000ed04 	.word	0xe000ed04

0800ca7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca80:	4a08      	ldr	r2, [pc, #32]	; (800caa4 <vPortSetupTimerInterrupt+0x28>)
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <vPortSetupTimerInterrupt+0x2c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4909      	ldr	r1, [pc, #36]	; (800caac <vPortSetupTimerInterrupt+0x30>)
 800ca88:	fba1 1303 	umull	r1, r3, r1, r3
 800ca8c:	099b      	lsrs	r3, r3, #6
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca92:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <vPortSetupTimerInterrupt+0x34>)
 800ca94:	2207      	movs	r2, #7
 800ca96:	601a      	str	r2, [r3, #0]
}
 800ca98:	bf00      	nop
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	e000e014 	.word	0xe000e014
 800caa8:	2000003c 	.word	0x2000003c
 800caac:	10624dd3 	.word	0x10624dd3
 800cab0:	e000e010 	.word	0xe000e010

0800cab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cac4 <vPortEnableVFP+0x10>
 800cab8:	6801      	ldr	r1, [r0, #0]
 800caba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cabe:	6001      	str	r1, [r0, #0]
 800cac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cac2:	bf00      	nop
 800cac4:	e000ed88 	.word	0xe000ed88

0800cac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800cace:	f3ef 8305 	mrs	r3, IPSR
 800cad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b0f      	cmp	r3, #15
 800cad8:	d915      	bls.n	800cb06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cada:	4a18      	ldr	r2, [pc, #96]	; (800cb3c <vPortValidateInterruptPriority+0x74>)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4413      	add	r3, r2
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cae4:	4b16      	ldr	r3, [pc, #88]	; (800cb40 <vPortValidateInterruptPriority+0x78>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	7afa      	ldrb	r2, [r7, #11]
 800caea:	429a      	cmp	r2, r3
 800caec:	d20b      	bcs.n	800cb06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf2:	b672      	cpsid	i
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	b662      	cpsie	i
 800cb02:	607b      	str	r3, [r7, #4]
 800cb04:	e7fe      	b.n	800cb04 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb06:	4b0f      	ldr	r3, [pc, #60]	; (800cb44 <vPortValidateInterruptPriority+0x7c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb0e:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <vPortValidateInterruptPriority+0x80>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d90b      	bls.n	800cb2e <vPortValidateInterruptPriority+0x66>
 800cb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1a:	b672      	cpsid	i
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	b662      	cpsie	i
 800cb2a:	603b      	str	r3, [r7, #0]
 800cb2c:	e7fe      	b.n	800cb2c <vPortValidateInterruptPriority+0x64>
	}
 800cb2e:	bf00      	nop
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	e000e3f0 	.word	0xe000e3f0
 800cb40:	20000344 	.word	0x20000344
 800cb44:	e000ed0c 	.word	0xe000ed0c
 800cb48:	20000348 	.word	0x20000348

0800cb4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10b      	bne.n	800cb78 <xQueueGenericReset+0x2c>
 800cb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb64:	b672      	cpsid	i
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	b662      	cpsie	i
 800cb74:	60bb      	str	r3, [r7, #8]
 800cb76:	e7fe      	b.n	800cb76 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800cb78:	f7ff fece 	bl	800c918 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb84:	68f9      	ldr	r1, [r7, #12]
 800cb86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb88:	fb01 f303 	mul.w	r3, r1, r3
 800cb8c:	441a      	add	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2200      	movs	r2, #0
 800cb96:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	68f9      	ldr	r1, [r7, #12]
 800cbac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbae:	fb01 f303 	mul.w	r3, r1, r3
 800cbb2:	441a      	add	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	22ff      	movs	r2, #255	; 0xff
 800cbbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	22ff      	movs	r2, #255	; 0xff
 800cbc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d114      	bne.n	800cbf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d01a      	beq.n	800cc0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3310      	adds	r3, #16
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f001 f936 	bl	800de4c <xTaskRemoveFromEventList>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d012      	beq.n	800cc0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbe6:	4b0d      	ldr	r3, [pc, #52]	; (800cc1c <xQueueGenericReset+0xd0>)
 800cbe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	e009      	b.n	800cc0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	3310      	adds	r3, #16
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7ff fcf0 	bl	800c5e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3324      	adds	r3, #36	; 0x24
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff fceb 	bl	800c5e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc0c:	f7ff feb6 	bl	800c97c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc10:	2301      	movs	r3, #1
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	e000ed04 	.word	0xe000ed04

0800cc20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08a      	sub	sp, #40	; 0x28
 800cc24:	af02      	add	r7, sp, #8
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10b      	bne.n	800cc4c <xQueueGenericCreate+0x2c>
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	b672      	cpsid	i
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	b662      	cpsie	i
 800cc48:	613b      	str	r3, [r7, #16]
 800cc4a:	e7fe      	b.n	800cc4a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d102      	bne.n	800cc58 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	61fb      	str	r3, [r7, #28]
 800cc56:	e004      	b.n	800cc62 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	fb02 f303 	mul.w	r3, r2, r3
 800cc60:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	3348      	adds	r3, #72	; 0x48
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7ff fc97 	bl	800c59a <pvPortMalloc>
 800cc6c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00b      	beq.n	800cc8c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	3348      	adds	r3, #72	; 0x48
 800cc78:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc7a:	79fa      	ldrb	r2, [r7, #7]
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	4613      	mov	r3, r2
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f000 f805 	bl	800cc96 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800cc8c:	69bb      	ldr	r3, [r7, #24]
	}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3720      	adds	r7, #32
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	607a      	str	r2, [r7, #4]
 800cca2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d103      	bne.n	800ccb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	69ba      	ldr	r2, [r7, #24]
 800ccae:	601a      	str	r2, [r3, #0]
 800ccb0:	e002      	b.n	800ccb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	69b8      	ldr	r0, [r7, #24]
 800ccc8:	f7ff ff40 	bl	800cb4c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cccc:	bf00      	nop
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08e      	sub	sp, #56	; 0x38
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cce2:	2300      	movs	r3, #0
 800cce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10b      	bne.n	800cd08 <xQueueGenericSend+0x34>
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	b672      	cpsid	i
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	b662      	cpsie	i
 800cd04:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd06:	e7fe      	b.n	800cd06 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d103      	bne.n	800cd16 <xQueueGenericSend+0x42>
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d101      	bne.n	800cd1a <xQueueGenericSend+0x46>
 800cd16:	2301      	movs	r3, #1
 800cd18:	e000      	b.n	800cd1c <xQueueGenericSend+0x48>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10b      	bne.n	800cd38 <xQueueGenericSend+0x64>
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	b672      	cpsid	i
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	b662      	cpsie	i
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
 800cd36:	e7fe      	b.n	800cd36 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d103      	bne.n	800cd46 <xQueueGenericSend+0x72>
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d101      	bne.n	800cd4a <xQueueGenericSend+0x76>
 800cd46:	2301      	movs	r3, #1
 800cd48:	e000      	b.n	800cd4c <xQueueGenericSend+0x78>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10b      	bne.n	800cd68 <xQueueGenericSend+0x94>
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	b672      	cpsid	i
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	b662      	cpsie	i
 800cd64:	623b      	str	r3, [r7, #32]
 800cd66:	e7fe      	b.n	800cd66 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd68:	f001 fa32 	bl	800e1d0 <xTaskGetSchedulerState>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d102      	bne.n	800cd78 <xQueueGenericSend+0xa4>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <xQueueGenericSend+0xa8>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e000      	b.n	800cd7e <xQueueGenericSend+0xaa>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10b      	bne.n	800cd9a <xQueueGenericSend+0xc6>
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	b672      	cpsid	i
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	b662      	cpsie	i
 800cd96:	61fb      	str	r3, [r7, #28]
 800cd98:	e7fe      	b.n	800cd98 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd9a:	f7ff fdbd 	bl	800c918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d302      	bcc.n	800cdb0 <xQueueGenericSend+0xdc>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d129      	bne.n	800ce04 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb6:	f000 fb77 	bl	800d4a8 <prvCopyDataToQueue>
 800cdba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d010      	beq.n	800cde6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	3324      	adds	r3, #36	; 0x24
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f001 f83f 	bl	800de4c <xTaskRemoveFromEventList>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d013      	beq.n	800cdfc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cdd4:	4b3f      	ldr	r3, [pc, #252]	; (800ced4 <xQueueGenericSend+0x200>)
 800cdd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	e00a      	b.n	800cdfc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d007      	beq.n	800cdfc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cdec:	4b39      	ldr	r3, [pc, #228]	; (800ced4 <xQueueGenericSend+0x200>)
 800cdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cdfc:	f7ff fdbe 	bl	800c97c <vPortExitCritical>
				return pdPASS;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e063      	b.n	800cecc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d103      	bne.n	800ce12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce0a:	f7ff fdb7 	bl	800c97c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e05c      	b.n	800cecc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800ce18:	f107 0314 	add.w	r3, r7, #20
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f001 f879 	bl	800df14 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce22:	2301      	movs	r3, #1
 800ce24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce26:	f7ff fda9 	bl	800c97c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce2a:	f000 fe23 	bl	800da74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce2e:	f7ff fd73 	bl	800c918 <vPortEnterCritical>
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce38:	b25b      	sxtb	r3, r3
 800ce3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3e:	d103      	bne.n	800ce48 <xQueueGenericSend+0x174>
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce54:	d103      	bne.n	800ce5e <xQueueGenericSend+0x18a>
 800ce56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce5e:	f7ff fd8d 	bl	800c97c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce62:	1d3a      	adds	r2, r7, #4
 800ce64:	f107 0314 	add.w	r3, r7, #20
 800ce68:	4611      	mov	r1, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f001 f878 	bl	800df60 <xTaskCheckForTimeOut>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d124      	bne.n	800cec0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce78:	f000 fc0e 	bl	800d698 <prvIsQueueFull>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d018      	beq.n	800ceb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce84:	3310      	adds	r3, #16
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	4611      	mov	r1, r2
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 ffb8 	bl	800de00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce92:	f000 fb99 	bl	800d5c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce96:	f000 fdfb 	bl	800da90 <xTaskResumeAll>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f47f af7c 	bne.w	800cd9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cea2:	4b0c      	ldr	r3, [pc, #48]	; (800ced4 <xQueueGenericSend+0x200>)
 800cea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	e772      	b.n	800cd9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ceb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceb6:	f000 fb87 	bl	800d5c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceba:	f000 fde9 	bl	800da90 <xTaskResumeAll>
 800cebe:	e76c      	b.n	800cd9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec2:	f000 fb81 	bl	800d5c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cec6:	f000 fde3 	bl	800da90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ceca:	2300      	movs	r3, #0
		}
	}
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3738      	adds	r7, #56	; 0x38
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	e000ed04 	.word	0xe000ed04

0800ced8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b08e      	sub	sp, #56	; 0x38
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10b      	bne.n	800cf08 <xQueueGenericSendFromISR+0x30>
 800cef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef4:	b672      	cpsid	i
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	b662      	cpsie	i
 800cf04:	627b      	str	r3, [r7, #36]	; 0x24
 800cf06:	e7fe      	b.n	800cf06 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d103      	bne.n	800cf16 <xQueueGenericSendFromISR+0x3e>
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <xQueueGenericSendFromISR+0x42>
 800cf16:	2301      	movs	r3, #1
 800cf18:	e000      	b.n	800cf1c <xQueueGenericSendFromISR+0x44>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10b      	bne.n	800cf38 <xQueueGenericSendFromISR+0x60>
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	b672      	cpsid	i
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	b662      	cpsie	i
 800cf34:	623b      	str	r3, [r7, #32]
 800cf36:	e7fe      	b.n	800cf36 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d103      	bne.n	800cf46 <xQueueGenericSendFromISR+0x6e>
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d101      	bne.n	800cf4a <xQueueGenericSendFromISR+0x72>
 800cf46:	2301      	movs	r3, #1
 800cf48:	e000      	b.n	800cf4c <xQueueGenericSendFromISR+0x74>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10b      	bne.n	800cf68 <xQueueGenericSendFromISR+0x90>
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	b672      	cpsid	i
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	b662      	cpsie	i
 800cf64:	61fb      	str	r3, [r7, #28]
 800cf66:	e7fe      	b.n	800cf66 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf68:	f7ff fdae 	bl	800cac8 <vPortValidateInterruptPriority>
	__asm volatile
 800cf6c:	f3ef 8211 	mrs	r2, BASEPRI
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	b672      	cpsid	i
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	b662      	cpsie	i
 800cf84:	61ba      	str	r2, [r7, #24]
 800cf86:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cf88:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d302      	bcc.n	800cf9e <xQueueGenericSendFromISR+0xc6>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	d12c      	bne.n	800cff8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfae:	f000 fa7b 	bl	800d4a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d112      	bne.n	800cfe2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d016      	beq.n	800cff2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc6:	3324      	adds	r3, #36	; 0x24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 ff3f 	bl	800de4c <xTaskRemoveFromEventList>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00e      	beq.n	800cff2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00b      	beq.n	800cff2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	e007      	b.n	800cff2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	b25a      	sxtb	r2, r3
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cff2:	2301      	movs	r3, #1
 800cff4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cff6:	e001      	b.n	800cffc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cff8:	2300      	movs	r3, #0
 800cffa:	637b      	str	r3, [r7, #52]	; 0x34
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3738      	adds	r7, #56	; 0x38
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08e      	sub	sp, #56	; 0x38
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10b      	bne.n	800d03c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	b672      	cpsid	i
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	b662      	cpsie	i
 800d038:	623b      	str	r3, [r7, #32]
 800d03a:	e7fe      	b.n	800d03a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00b      	beq.n	800d05c <xQueueGiveFromISR+0x4c>
 800d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d048:	b672      	cpsid	i
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	b662      	cpsie	i
 800d058:	61fb      	str	r3, [r7, #28]
 800d05a:	e7fe      	b.n	800d05a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <xQueueGiveFromISR+0x5c>
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <xQueueGiveFromISR+0x60>
 800d06c:	2301      	movs	r3, #1
 800d06e:	e000      	b.n	800d072 <xQueueGiveFromISR+0x62>
 800d070:	2300      	movs	r3, #0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10b      	bne.n	800d08e <xQueueGiveFromISR+0x7e>
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	b672      	cpsid	i
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	b662      	cpsie	i
 800d08a:	61bb      	str	r3, [r7, #24]
 800d08c:	e7fe      	b.n	800d08c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d08e:	f7ff fd1b 	bl	800cac8 <vPortValidateInterruptPriority>
	__asm volatile
 800d092:	f3ef 8211 	mrs	r2, BASEPRI
 800d096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09a:	b672      	cpsid	i
 800d09c:	f383 8811 	msr	BASEPRI, r3
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	f3bf 8f4f 	dsb	sy
 800d0a8:	b662      	cpsie	i
 800d0aa:	617a      	str	r2, [r7, #20]
 800d0ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d0ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d92b      	bls.n	800d11a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d112      	bne.n	800d104 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d016      	beq.n	800d114 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	3324      	adds	r3, #36	; 0x24
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 feae 	bl	800de4c <xTaskRemoveFromEventList>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00e      	beq.n	800d114 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00b      	beq.n	800d114 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2201      	movs	r2, #1
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	e007      	b.n	800d114 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d108:	3301      	adds	r3, #1
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	b25a      	sxtb	r2, r3
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d114:	2301      	movs	r3, #1
 800d116:	637b      	str	r3, [r7, #52]	; 0x34
 800d118:	e001      	b.n	800d11e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d11a:	2300      	movs	r3, #0
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
 800d11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d120:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3738      	adds	r7, #56	; 0x38
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08e      	sub	sp, #56	; 0x38
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d142:	2300      	movs	r3, #0
 800d144:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10b      	bne.n	800d168 <xQueueGenericReceive+0x34>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d154:	b672      	cpsid	i
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	b662      	cpsie	i
 800d164:	627b      	str	r3, [r7, #36]	; 0x24
 800d166:	e7fe      	b.n	800d166 <xQueueGenericReceive+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <xQueueGenericReceive+0x42>
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <xQueueGenericReceive+0x46>
 800d176:	2301      	movs	r3, #1
 800d178:	e000      	b.n	800d17c <xQueueGenericReceive+0x48>
 800d17a:	2300      	movs	r3, #0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10b      	bne.n	800d198 <xQueueGenericReceive+0x64>
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	b672      	cpsid	i
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	b662      	cpsie	i
 800d194:	623b      	str	r3, [r7, #32]
 800d196:	e7fe      	b.n	800d196 <xQueueGenericReceive+0x62>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d198:	f001 f81a 	bl	800e1d0 <xTaskGetSchedulerState>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <xQueueGenericReceive+0x74>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <xQueueGenericReceive+0x78>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <xQueueGenericReceive+0x7a>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10b      	bne.n	800d1ca <xQueueGenericReceive+0x96>
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	b672      	cpsid	i
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	b662      	cpsie	i
 800d1c6:	61fb      	str	r3, [r7, #28]
 800d1c8:	e7fe      	b.n	800d1c8 <xQueueGenericReceive+0x94>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ca:	f7ff fba5 	bl	800c918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d046      	beq.n	800d268 <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1e0:	68b9      	ldr	r1, [r7, #8]
 800d1e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e4:	f000 f9ca 	bl	800d57c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d121      	bne.n	800d232 <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	1e5a      	subs	r2, r3, #1
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d104      	bne.n	800d208 <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d1fe:	f001 f903 	bl	800e408 <pvTaskIncrementMutexHeldCount>
 800d202:	4602      	mov	r2, r0
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d027      	beq.n	800d260 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d212:	3310      	adds	r3, #16
 800d214:	4618      	mov	r0, r3
 800d216:	f000 fe19 	bl	800de4c <xTaskRemoveFromEventList>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d01f      	beq.n	800d260 <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800d220:	4b4f      	ldr	r3, [pc, #316]	; (800d360 <xQueueGenericReceive+0x22c>)
 800d222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	e016      	b.n	800d260 <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d236:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00f      	beq.n	800d260 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d242:	3324      	adds	r3, #36	; 0x24
 800d244:	4618      	mov	r0, r3
 800d246:	f000 fe01 	bl	800de4c <xTaskRemoveFromEventList>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800d250:	4b43      	ldr	r3, [pc, #268]	; (800d360 <xQueueGenericReceive+0x22c>)
 800d252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d256:	601a      	str	r2, [r3, #0]
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800d260:	f7ff fb8c 	bl	800c97c <vPortExitCritical>
				return pdPASS;
 800d264:	2301      	movs	r3, #1
 800d266:	e077      	b.n	800d358 <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d103      	bne.n	800d276 <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d26e:	f7ff fb85 	bl	800c97c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d272:	2300      	movs	r3, #0
 800d274:	e070      	b.n	800d358 <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d106      	bne.n	800d28a <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800d27c:	f107 0314 	add.w	r3, r7, #20
 800d280:	4618      	mov	r0, r3
 800d282:	f000 fe47 	bl	800df14 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d286:	2301      	movs	r3, #1
 800d288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d28a:	f7ff fb77 	bl	800c97c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d28e:	f000 fbf1 	bl	800da74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d292:	f7ff fb41 	bl	800c918 <vPortEnterCritical>
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d29c:	b25b      	sxtb	r3, r3
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d103      	bne.n	800d2ac <xQueueGenericReceive+0x178>
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2b2:	b25b      	sxtb	r3, r3
 800d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b8:	d103      	bne.n	800d2c2 <xQueueGenericReceive+0x18e>
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2c2:	f7ff fb5b 	bl	800c97c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2c6:	1d3a      	adds	r2, r7, #4
 800d2c8:	f107 0314 	add.w	r3, r7, #20
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 fe46 	bl	800df60 <xTaskCheckForTimeOut>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d131      	bne.n	800d33e <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2dc:	f000 f9c6 	bl	800d66c <prvIsQueueEmpty>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d025      	beq.n	800d332 <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d108      	bne.n	800d300 <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 800d2ee:	f7ff fb13 	bl	800c918 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 ff88 	bl	800e20c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800d2fc:	f7ff fb3e 	bl	800c97c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	3324      	adds	r3, #36	; 0x24
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 fd79 	bl	800de00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d30e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d310:	f000 f95a 	bl	800d5c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d314:	f000 fbbc 	bl	800da90 <xTaskResumeAll>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f47f af55 	bne.w	800d1ca <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 800d320:	4b0f      	ldr	r3, [pc, #60]	; (800d360 <xQueueGenericReceive+0x22c>)
 800d322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d326:	601a      	str	r2, [r3, #0]
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	e74b      	b.n	800d1ca <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d334:	f000 f948 	bl	800d5c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d338:	f000 fbaa 	bl	800da90 <xTaskResumeAll>
 800d33c:	e745      	b.n	800d1ca <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800d33e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d340:	f000 f942 	bl	800d5c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d344:	f000 fba4 	bl	800da90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d34a:	f000 f98f 	bl	800d66c <prvIsQueueEmpty>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	f43f af3a 	beq.w	800d1ca <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d356:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3738      	adds	r7, #56	; 0x38
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	e000ed04 	.word	0xe000ed04

0800d364 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08e      	sub	sp, #56	; 0x38
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <xQueueReceiveFromISR+0x2e>
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	b672      	cpsid	i
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	b662      	cpsie	i
 800d38e:	623b      	str	r3, [r7, #32]
 800d390:	e7fe      	b.n	800d390 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d103      	bne.n	800d3a0 <xQueueReceiveFromISR+0x3c>
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <xQueueReceiveFromISR+0x40>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e000      	b.n	800d3a6 <xQueueReceiveFromISR+0x42>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10b      	bne.n	800d3c2 <xQueueReceiveFromISR+0x5e>
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	b672      	cpsid	i
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	b662      	cpsie	i
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	e7fe      	b.n	800d3c0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3c2:	f7ff fb81 	bl	800cac8 <vPortValidateInterruptPriority>
	__asm volatile
 800d3c6:	f3ef 8211 	mrs	r2, BASEPRI
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	b672      	cpsid	i
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	b662      	cpsie	i
 800d3de:	61ba      	str	r2, [r7, #24]
 800d3e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d3e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d02f      	beq.n	800d452 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3fc:	68b9      	ldr	r1, [r7, #8]
 800d3fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d400:	f000 f8bc 	bl	800d57c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	1e5a      	subs	r2, r3, #1
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d40c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d414:	d112      	bne.n	800d43c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d016      	beq.n	800d44c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	3310      	adds	r3, #16
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fd12 	bl	800de4c <xTaskRemoveFromEventList>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00e      	beq.n	800d44c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00b      	beq.n	800d44c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2201      	movs	r2, #1
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	e007      	b.n	800d44c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d440:	3301      	adds	r3, #1
 800d442:	b2db      	uxtb	r3, r3
 800d444:	b25a      	sxtb	r2, r3
 800d446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d44c:	2301      	movs	r3, #1
 800d44e:	637b      	str	r3, [r7, #52]	; 0x34
 800d450:	e001      	b.n	800d456 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d452:	2300      	movs	r3, #0
 800d454:	637b      	str	r3, [r7, #52]	; 0x34
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d462:	4618      	mov	r0, r3
 800d464:	3738      	adds	r7, #56	; 0x38
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b084      	sub	sp, #16
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10b      	bne.n	800d494 <vQueueDelete+0x2a>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	b672      	cpsid	i
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	b662      	cpsie	i
 800d490:	60bb      	str	r3, [r7, #8]
 800d492:	e7fe      	b.n	800d492 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f000 f917 	bl	800d6c8 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f7ff f88f 	bl	800c5be <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d4a0:	bf00      	nop
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10d      	bne.n	800d4e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d14d      	bne.n	800d56a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 ff10 	bl	800e2f8 <xTaskPriorityDisinherit>
 800d4d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	605a      	str	r2, [r3, #4]
 800d4e0:	e043      	b.n	800d56a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d119      	bne.n	800d51c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6898      	ldr	r0, [r3, #8]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	f006 fcf0 	bl	8013ed8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	689a      	ldr	r2, [r3, #8]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d500:	441a      	add	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	689a      	ldr	r2, [r3, #8]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d32b      	bcc.n	800d56a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	609a      	str	r2, [r3, #8]
 800d51a:	e026      	b.n	800d56a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	68d8      	ldr	r0, [r3, #12]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d524:	461a      	mov	r2, r3
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	f006 fcd6 	bl	8013ed8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	68da      	ldr	r2, [r3, #12]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d534:	425b      	negs	r3, r3
 800d536:	441a      	add	r2, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68da      	ldr	r2, [r3, #12]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	429a      	cmp	r2, r3
 800d546:	d207      	bcs.n	800d558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d550:	425b      	negs	r3, r3
 800d552:	441a      	add	r2, r3
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	d105      	bne.n	800d56a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	3b01      	subs	r3, #1
 800d568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	1c5a      	adds	r2, r3, #1
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d572:	697b      	ldr	r3, [r7, #20]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3718      	adds	r7, #24
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d018      	beq.n	800d5c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68da      	ldr	r2, [r3, #12]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d596:	441a      	add	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d303      	bcc.n	800d5b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68d9      	ldr	r1, [r3, #12]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6838      	ldr	r0, [r7, #0]
 800d5bc:	f006 fc8c 	bl	8013ed8 <memcpy>
	}
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5d0:	f7ff f9a2 	bl	800c918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5dc:	e011      	b.n	800d602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d012      	beq.n	800d60c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3324      	adds	r3, #36	; 0x24
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 fc2e 	bl	800de4c <xTaskRemoveFromEventList>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5f6:	f000 fd15 	bl	800e024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d606:	2b00      	cmp	r3, #0
 800d608:	dce9      	bgt.n	800d5de <prvUnlockQueue+0x16>
 800d60a:	e000      	b.n	800d60e <prvUnlockQueue+0x46>
					break;
 800d60c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	22ff      	movs	r2, #255	; 0xff
 800d612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d616:	f7ff f9b1 	bl	800c97c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d61a:	f7ff f97d 	bl	800c918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d626:	e011      	b.n	800d64c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d012      	beq.n	800d656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3310      	adds	r3, #16
 800d634:	4618      	mov	r0, r3
 800d636:	f000 fc09 	bl	800de4c <xTaskRemoveFromEventList>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d640:	f000 fcf0 	bl	800e024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d644:	7bbb      	ldrb	r3, [r7, #14]
 800d646:	3b01      	subs	r3, #1
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d64c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d650:	2b00      	cmp	r3, #0
 800d652:	dce9      	bgt.n	800d628 <prvUnlockQueue+0x60>
 800d654:	e000      	b.n	800d658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	22ff      	movs	r2, #255	; 0xff
 800d65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d660:	f7ff f98c 	bl	800c97c <vPortExitCritical>
}
 800d664:	bf00      	nop
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d674:	f7ff f950 	bl	800c918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d102      	bne.n	800d686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d680:	2301      	movs	r3, #1
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e001      	b.n	800d68a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d68a:	f7ff f977 	bl	800c97c <vPortExitCritical>

	return xReturn;
 800d68e:	68fb      	ldr	r3, [r7, #12]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3710      	adds	r7, #16
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6a0:	f7ff f93a 	bl	800c918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d102      	bne.n	800d6b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	60fb      	str	r3, [r7, #12]
 800d6b4:	e001      	b.n	800d6ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6ba:	f7ff f95f 	bl	800c97c <vPortExitCritical>

	return xReturn;
 800d6be:	68fb      	ldr	r3, [r7, #12]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	e016      	b.n	800d704 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d6d6:	4a10      	ldr	r2, [pc, #64]	; (800d718 <vQueueUnregisterQueue+0x50>)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	4413      	add	r3, r2
 800d6de:	685a      	ldr	r2, [r3, #4]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d10b      	bne.n	800d6fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d6e6:	4a0c      	ldr	r2, [pc, #48]	; (800d718 <vQueueUnregisterQueue+0x50>)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d6f0:	4a09      	ldr	r2, [pc, #36]	; (800d718 <vQueueUnregisterQueue+0x50>)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	4413      	add	r3, r2
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	605a      	str	r2, [r3, #4]
				break;
 800d6fc:	e005      	b.n	800d70a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3301      	adds	r3, #1
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b07      	cmp	r3, #7
 800d708:	d9e5      	bls.n	800d6d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d70a:	bf00      	nop
 800d70c:	3714      	adds	r7, #20
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	20000550 	.word	0x20000550

0800d71c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08c      	sub	sp, #48	; 0x30
 800d720:	af04      	add	r7, sp, #16
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	603b      	str	r3, [r7, #0]
 800d728:	4613      	mov	r3, r2
 800d72a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d72c:	88fb      	ldrh	r3, [r7, #6]
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4618      	mov	r0, r3
 800d732:	f7fe ff32 	bl	800c59a <pvPortMalloc>
 800d736:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00e      	beq.n	800d75c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d73e:	2054      	movs	r0, #84	; 0x54
 800d740:	f7fe ff2b 	bl	800c59a <pvPortMalloc>
 800d744:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	631a      	str	r2, [r3, #48]	; 0x30
 800d752:	e005      	b.n	800d760 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d754:	6978      	ldr	r0, [r7, #20]
 800d756:	f7fe ff32 	bl	800c5be <vPortFree>
 800d75a:	e001      	b.n	800d760 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d75c:	2300      	movs	r3, #0
 800d75e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d013      	beq.n	800d78e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d766:	88fa      	ldrh	r2, [r7, #6]
 800d768:	2300      	movs	r3, #0
 800d76a:	9303      	str	r3, [sp, #12]
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	9302      	str	r3, [sp, #8]
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f000 f80e 	bl	800d79e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d782:	69f8      	ldr	r0, [r7, #28]
 800d784:	f000 f88c 	bl	800d8a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d788:	2301      	movs	r3, #1
 800d78a:	61bb      	str	r3, [r7, #24]
 800d78c:	e002      	b.n	800d794 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d78e:	f04f 33ff 	mov.w	r3, #4294967295
 800d792:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d794:	69bb      	ldr	r3, [r7, #24]
	}
 800d796:	4618      	mov	r0, r3
 800d798:	3720      	adds	r7, #32
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b088      	sub	sp, #32
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	60f8      	str	r0, [r7, #12]
 800d7a6:	60b9      	str	r1, [r7, #8]
 800d7a8:	607a      	str	r2, [r7, #4]
 800d7aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d7b6:	440b      	add	r3, r1
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4413      	add	r3, r2
 800d7bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	f023 0307 	bic.w	r3, r3, #7
 800d7c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	f003 0307 	and.w	r3, r3, #7
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00b      	beq.n	800d7e8 <prvInitialiseNewTask+0x4a>
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	b672      	cpsid	i
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	b662      	cpsie	i
 800d7e4:	617b      	str	r3, [r7, #20]
 800d7e6:	e7fe      	b.n	800d7e6 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	61fb      	str	r3, [r7, #28]
 800d7ec:	e012      	b.n	800d814 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	7819      	ldrb	r1, [r3, #0]
 800d7f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	3334      	adds	r3, #52	; 0x34
 800d7fe:	460a      	mov	r2, r1
 800d800:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	4413      	add	r3, r2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d006      	beq.n	800d81c <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	3301      	adds	r3, #1
 800d812:	61fb      	str	r3, [r7, #28]
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	2b0f      	cmp	r3, #15
 800d818:	d9e9      	bls.n	800d7ee <prvInitialiseNewTask+0x50>
 800d81a:	e000      	b.n	800d81e <prvInitialiseNewTask+0x80>
		{
			break;
 800d81c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	2200      	movs	r2, #0
 800d822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d828:	2b06      	cmp	r3, #6
 800d82a:	d901      	bls.n	800d830 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d82c:	2306      	movs	r3, #6
 800d82e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d83a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83e:	2200      	movs	r2, #0
 800d840:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d844:	3304      	adds	r3, #4
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe feeb 	bl	800c622 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	3318      	adds	r3, #24
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fee6 	bl	800c622 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85e:	f1c3 0207 	rsb	r2, r3, #7
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d86a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	2200      	movs	r2, #0
 800d870:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	2200      	movs	r2, #0
 800d876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	68f9      	ldr	r1, [r7, #12]
 800d87e:	69b8      	ldr	r0, [r7, #24]
 800d880:	f7fe ff64 	bl	800c74c <pxPortInitialiseStack>
 800d884:	4602      	mov	r2, r0
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d896:	bf00      	nop
 800d898:	3720      	adds	r7, #32
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
	...

0800d8a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8a8:	f7ff f836 	bl	800c918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8ac:	4b2a      	ldr	r3, [pc, #168]	; (800d958 <prvAddNewTaskToReadyList+0xb8>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	4a29      	ldr	r2, [pc, #164]	; (800d958 <prvAddNewTaskToReadyList+0xb8>)
 800d8b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8b6:	4b29      	ldr	r3, [pc, #164]	; (800d95c <prvAddNewTaskToReadyList+0xbc>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d109      	bne.n	800d8d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8be:	4a27      	ldr	r2, [pc, #156]	; (800d95c <prvAddNewTaskToReadyList+0xbc>)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8c4:	4b24      	ldr	r3, [pc, #144]	; (800d958 <prvAddNewTaskToReadyList+0xb8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d110      	bne.n	800d8ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d8cc:	f000 fbce 	bl	800e06c <prvInitialiseTaskLists>
 800d8d0:	e00d      	b.n	800d8ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d8d2:	4b23      	ldr	r3, [pc, #140]	; (800d960 <prvAddNewTaskToReadyList+0xc0>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d109      	bne.n	800d8ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8da:	4b20      	ldr	r3, [pc, #128]	; (800d95c <prvAddNewTaskToReadyList+0xbc>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d802      	bhi.n	800d8ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d8e8:	4a1c      	ldr	r2, [pc, #112]	; (800d95c <prvAddNewTaskToReadyList+0xbc>)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d8ee:	4b1d      	ldr	r3, [pc, #116]	; (800d964 <prvAddNewTaskToReadyList+0xc4>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	4a1b      	ldr	r2, [pc, #108]	; (800d964 <prvAddNewTaskToReadyList+0xc4>)
 800d8f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	409a      	lsls	r2, r3
 800d900:	4b19      	ldr	r3, [pc, #100]	; (800d968 <prvAddNewTaskToReadyList+0xc8>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4313      	orrs	r3, r2
 800d906:	4a18      	ldr	r2, [pc, #96]	; (800d968 <prvAddNewTaskToReadyList+0xc8>)
 800d908:	6013      	str	r3, [r2, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d90e:	4613      	mov	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	4413      	add	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4a15      	ldr	r2, [pc, #84]	; (800d96c <prvAddNewTaskToReadyList+0xcc>)
 800d918:	441a      	add	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	3304      	adds	r3, #4
 800d91e:	4619      	mov	r1, r3
 800d920:	4610      	mov	r0, r2
 800d922:	f7fe fe8b 	bl	800c63c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d926:	f7ff f829 	bl	800c97c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d92a:	4b0d      	ldr	r3, [pc, #52]	; (800d960 <prvAddNewTaskToReadyList+0xc0>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00e      	beq.n	800d950 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d932:	4b0a      	ldr	r3, [pc, #40]	; (800d95c <prvAddNewTaskToReadyList+0xbc>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d207      	bcs.n	800d950 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d940:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <prvAddNewTaskToReadyList+0xd0>)
 800d942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	2000044c 	.word	0x2000044c
 800d95c:	2000034c 	.word	0x2000034c
 800d960:	20000458 	.word	0x20000458
 800d964:	20000468 	.word	0x20000468
 800d968:	20000454 	.word	0x20000454
 800d96c:	20000350 	.word	0x20000350
 800d970:	e000ed04 	.word	0xe000ed04

0800d974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d97c:	2300      	movs	r3, #0
 800d97e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d018      	beq.n	800d9b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d986:	4b14      	ldr	r3, [pc, #80]	; (800d9d8 <vTaskDelay+0x64>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00b      	beq.n	800d9a6 <vTaskDelay+0x32>
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	b672      	cpsid	i
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	b662      	cpsie	i
 800d9a2:	60bb      	str	r3, [r7, #8]
 800d9a4:	e7fe      	b.n	800d9a4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d9a6:	f000 f865 	bl	800da74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fd3f 	bl	800e430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9b2:	f000 f86d 	bl	800da90 <xTaskResumeAll>
 800d9b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d107      	bne.n	800d9ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d9be:	4b07      	ldr	r3, [pc, #28]	; (800d9dc <vTaskDelay+0x68>)
 800d9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9ce:	bf00      	nop
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20000474 	.word	0x20000474
 800d9dc:	e000ed04 	.word	0xe000ed04

0800d9e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800d9e6:	4b1d      	ldr	r3, [pc, #116]	; (800da5c <vTaskStartScheduler+0x7c>)
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2280      	movs	r2, #128	; 0x80
 800d9f2:	491b      	ldr	r1, [pc, #108]	; (800da60 <vTaskStartScheduler+0x80>)
 800d9f4:	481b      	ldr	r0, [pc, #108]	; (800da64 <vTaskStartScheduler+0x84>)
 800d9f6:	f7ff fe91 	bl	800d71c <xTaskCreate>
 800d9fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d117      	bne.n	800da32 <vTaskStartScheduler+0x52>
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	b672      	cpsid	i
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	b662      	cpsie	i
 800da16:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da18:	4b13      	ldr	r3, [pc, #76]	; (800da68 <vTaskStartScheduler+0x88>)
 800da1a:	f04f 32ff 	mov.w	r2, #4294967295
 800da1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da20:	4b12      	ldr	r3, [pc, #72]	; (800da6c <vTaskStartScheduler+0x8c>)
 800da22:	2201      	movs	r2, #1
 800da24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800da26:	4b12      	ldr	r3, [pc, #72]	; (800da70 <vTaskStartScheduler+0x90>)
 800da28:	2200      	movs	r2, #0
 800da2a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da2c:	f7fe ff0c 	bl	800c848 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da30:	e00f      	b.n	800da52 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da38:	d10b      	bne.n	800da52 <vTaskStartScheduler+0x72>
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	b672      	cpsid	i
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	b662      	cpsie	i
 800da4e:	607b      	str	r3, [r7, #4]
 800da50:	e7fe      	b.n	800da50 <vTaskStartScheduler+0x70>
}
 800da52:	bf00      	nop
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20000470 	.word	0x20000470
 800da60:	08016c24 	.word	0x08016c24
 800da64:	0800e03d 	.word	0x0800e03d
 800da68:	2000046c 	.word	0x2000046c
 800da6c:	20000458 	.word	0x20000458
 800da70:	20000450 	.word	0x20000450

0800da74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da74:	b480      	push	{r7}
 800da76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800da78:	4b04      	ldr	r3, [pc, #16]	; (800da8c <vTaskSuspendAll+0x18>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3301      	adds	r3, #1
 800da7e:	4a03      	ldr	r2, [pc, #12]	; (800da8c <vTaskSuspendAll+0x18>)
 800da80:	6013      	str	r3, [r2, #0]
}
 800da82:	bf00      	nop
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	20000474 	.word	0x20000474

0800da90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da96:	2300      	movs	r3, #0
 800da98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da9e:	4b42      	ldr	r3, [pc, #264]	; (800dba8 <xTaskResumeAll+0x118>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10b      	bne.n	800dabe <xTaskResumeAll+0x2e>
 800daa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daaa:	b672      	cpsid	i
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	b662      	cpsie	i
 800daba:	603b      	str	r3, [r7, #0]
 800dabc:	e7fe      	b.n	800dabc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dabe:	f7fe ff2b 	bl	800c918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dac2:	4b39      	ldr	r3, [pc, #228]	; (800dba8 <xTaskResumeAll+0x118>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	3b01      	subs	r3, #1
 800dac8:	4a37      	ldr	r2, [pc, #220]	; (800dba8 <xTaskResumeAll+0x118>)
 800daca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dacc:	4b36      	ldr	r3, [pc, #216]	; (800dba8 <xTaskResumeAll+0x118>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d161      	bne.n	800db98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dad4:	4b35      	ldr	r3, [pc, #212]	; (800dbac <xTaskResumeAll+0x11c>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d05d      	beq.n	800db98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dadc:	e02e      	b.n	800db3c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dade:	4b34      	ldr	r3, [pc, #208]	; (800dbb0 <xTaskResumeAll+0x120>)
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3318      	adds	r3, #24
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe fe03 	bl	800c6f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	3304      	adds	r3, #4
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fdfe 	bl	800c6f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafe:	2201      	movs	r2, #1
 800db00:	409a      	lsls	r2, r3
 800db02:	4b2c      	ldr	r3, [pc, #176]	; (800dbb4 <xTaskResumeAll+0x124>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4313      	orrs	r3, r2
 800db08:	4a2a      	ldr	r2, [pc, #168]	; (800dbb4 <xTaskResumeAll+0x124>)
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db10:	4613      	mov	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4413      	add	r3, r2
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	4a27      	ldr	r2, [pc, #156]	; (800dbb8 <xTaskResumeAll+0x128>)
 800db1a:	441a      	add	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3304      	adds	r3, #4
 800db20:	4619      	mov	r1, r3
 800db22:	4610      	mov	r0, r2
 800db24:	f7fe fd8a 	bl	800c63c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2c:	4b23      	ldr	r3, [pc, #140]	; (800dbbc <xTaskResumeAll+0x12c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db32:	429a      	cmp	r2, r3
 800db34:	d302      	bcc.n	800db3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800db36:	4b22      	ldr	r3, [pc, #136]	; (800dbc0 <xTaskResumeAll+0x130>)
 800db38:	2201      	movs	r2, #1
 800db3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db3c:	4b1c      	ldr	r3, [pc, #112]	; (800dbb0 <xTaskResumeAll+0x120>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1cc      	bne.n	800dade <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db4a:	f000 fb1b 	bl	800e184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800db4e:	4b1d      	ldr	r3, [pc, #116]	; (800dbc4 <xTaskResumeAll+0x134>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d010      	beq.n	800db7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db5a:	f000 f837 	bl	800dbcc <xTaskIncrementTick>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db64:	4b16      	ldr	r3, [pc, #88]	; (800dbc0 <xTaskResumeAll+0x130>)
 800db66:	2201      	movs	r2, #1
 800db68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1f1      	bne.n	800db5a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800db76:	4b13      	ldr	r3, [pc, #76]	; (800dbc4 <xTaskResumeAll+0x134>)
 800db78:	2200      	movs	r2, #0
 800db7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db7c:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <xTaskResumeAll+0x130>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d009      	beq.n	800db98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db84:	2301      	movs	r3, #1
 800db86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db88:	4b0f      	ldr	r3, [pc, #60]	; (800dbc8 <xTaskResumeAll+0x138>)
 800db8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db8e:	601a      	str	r2, [r3, #0]
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db98:	f7fe fef0 	bl	800c97c <vPortExitCritical>

	return xAlreadyYielded;
 800db9c:	68bb      	ldr	r3, [r7, #8]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	20000474 	.word	0x20000474
 800dbac:	2000044c 	.word	0x2000044c
 800dbb0:	2000040c 	.word	0x2000040c
 800dbb4:	20000454 	.word	0x20000454
 800dbb8:	20000350 	.word	0x20000350
 800dbbc:	2000034c 	.word	0x2000034c
 800dbc0:	20000460 	.word	0x20000460
 800dbc4:	2000045c 	.word	0x2000045c
 800dbc8:	e000ed04 	.word	0xe000ed04

0800dbcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbd6:	4b51      	ldr	r3, [pc, #324]	; (800dd1c <xTaskIncrementTick+0x150>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f040 808e 	bne.w	800dcfc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800dbe0:	4b4f      	ldr	r3, [pc, #316]	; (800dd20 <xTaskIncrementTick+0x154>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dbe8:	4a4d      	ldr	r2, [pc, #308]	; (800dd20 <xTaskIncrementTick+0x154>)
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d121      	bne.n	800dc38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dbf4:	4b4b      	ldr	r3, [pc, #300]	; (800dd24 <xTaskIncrementTick+0x158>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00b      	beq.n	800dc16 <xTaskIncrementTick+0x4a>
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	b672      	cpsid	i
 800dc04:	f383 8811 	msr	BASEPRI, r3
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	b662      	cpsie	i
 800dc12:	603b      	str	r3, [r7, #0]
 800dc14:	e7fe      	b.n	800dc14 <xTaskIncrementTick+0x48>
 800dc16:	4b43      	ldr	r3, [pc, #268]	; (800dd24 <xTaskIncrementTick+0x158>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	4b42      	ldr	r3, [pc, #264]	; (800dd28 <xTaskIncrementTick+0x15c>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a40      	ldr	r2, [pc, #256]	; (800dd24 <xTaskIncrementTick+0x158>)
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	4a40      	ldr	r2, [pc, #256]	; (800dd28 <xTaskIncrementTick+0x15c>)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6013      	str	r3, [r2, #0]
 800dc2a:	4b40      	ldr	r3, [pc, #256]	; (800dd2c <xTaskIncrementTick+0x160>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	4a3e      	ldr	r2, [pc, #248]	; (800dd2c <xTaskIncrementTick+0x160>)
 800dc32:	6013      	str	r3, [r2, #0]
 800dc34:	f000 faa6 	bl	800e184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc38:	4b3d      	ldr	r3, [pc, #244]	; (800dd30 <xTaskIncrementTick+0x164>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d34d      	bcc.n	800dcde <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc42:	4b38      	ldr	r3, [pc, #224]	; (800dd24 <xTaskIncrementTick+0x158>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <xTaskIncrementTick+0x84>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e000      	b.n	800dc52 <xTaskIncrementTick+0x86>
 800dc50:	2300      	movs	r3, #0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d004      	beq.n	800dc60 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc56:	4b36      	ldr	r3, [pc, #216]	; (800dd30 <xTaskIncrementTick+0x164>)
 800dc58:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5c:	601a      	str	r2, [r3, #0]
					break;
 800dc5e:	e03e      	b.n	800dcde <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dc60:	4b30      	ldr	r3, [pc, #192]	; (800dd24 <xTaskIncrementTick+0x158>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d203      	bcs.n	800dc80 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc78:	4a2d      	ldr	r2, [pc, #180]	; (800dd30 <xTaskIncrementTick+0x164>)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6013      	str	r3, [r2, #0]
						break;
 800dc7e:	e02e      	b.n	800dcde <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	3304      	adds	r3, #4
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe fd36 	bl	800c6f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d004      	beq.n	800dc9c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	3318      	adds	r3, #24
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fd2d 	bl	800c6f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	2201      	movs	r2, #1
 800dca2:	409a      	lsls	r2, r3
 800dca4:	4b23      	ldr	r3, [pc, #140]	; (800dd34 <xTaskIncrementTick+0x168>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	4a22      	ldr	r2, [pc, #136]	; (800dd34 <xTaskIncrementTick+0x168>)
 800dcac:	6013      	str	r3, [r2, #0]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	4a1f      	ldr	r2, [pc, #124]	; (800dd38 <xTaskIncrementTick+0x16c>)
 800dcbc:	441a      	add	r2, r3
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	f7fe fcb9 	bl	800c63c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcce:	4b1b      	ldr	r3, [pc, #108]	; (800dd3c <xTaskIncrementTick+0x170>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d3b4      	bcc.n	800dc42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcdc:	e7b1      	b.n	800dc42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dcde:	4b17      	ldr	r3, [pc, #92]	; (800dd3c <xTaskIncrementTick+0x170>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce4:	4914      	ldr	r1, [pc, #80]	; (800dd38 <xTaskIncrementTick+0x16c>)
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	440b      	add	r3, r1
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d907      	bls.n	800dd06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	617b      	str	r3, [r7, #20]
 800dcfa:	e004      	b.n	800dd06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dcfc:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <xTaskIncrementTick+0x174>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3301      	adds	r3, #1
 800dd02:	4a0f      	ldr	r2, [pc, #60]	; (800dd40 <xTaskIncrementTick+0x174>)
 800dd04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dd06:	4b0f      	ldr	r3, [pc, #60]	; (800dd44 <xTaskIncrementTick+0x178>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dd12:	697b      	ldr	r3, [r7, #20]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	20000474 	.word	0x20000474
 800dd20:	20000450 	.word	0x20000450
 800dd24:	20000404 	.word	0x20000404
 800dd28:	20000408 	.word	0x20000408
 800dd2c:	20000464 	.word	0x20000464
 800dd30:	2000046c 	.word	0x2000046c
 800dd34:	20000454 	.word	0x20000454
 800dd38:	20000350 	.word	0x20000350
 800dd3c:	2000034c 	.word	0x2000034c
 800dd40:	2000045c 	.word	0x2000045c
 800dd44:	20000460 	.word	0x20000460

0800dd48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd4e:	4b27      	ldr	r3, [pc, #156]	; (800ddec <vTaskSwitchContext+0xa4>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d003      	beq.n	800dd5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd56:	4b26      	ldr	r3, [pc, #152]	; (800ddf0 <vTaskSwitchContext+0xa8>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd5c:	e040      	b.n	800dde0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800dd5e:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <vTaskSwitchContext+0xa8>)
 800dd60:	2200      	movs	r2, #0
 800dd62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800dd64:	4b23      	ldr	r3, [pc, #140]	; (800ddf4 <vTaskSwitchContext+0xac>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	fab3 f383 	clz	r3, r3
 800dd70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dd72:	7afb      	ldrb	r3, [r7, #11]
 800dd74:	f1c3 031f 	rsb	r3, r3, #31
 800dd78:	617b      	str	r3, [r7, #20]
 800dd7a:	491f      	ldr	r1, [pc, #124]	; (800ddf8 <vTaskSwitchContext+0xb0>)
 800dd7c:	697a      	ldr	r2, [r7, #20]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4413      	add	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	440b      	add	r3, r1
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10b      	bne.n	800dda6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd92:	b672      	cpsid	i
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	b662      	cpsie	i
 800dda2:	607b      	str	r3, [r7, #4]
 800dda4:	e7fe      	b.n	800dda4 <vTaskSwitchContext+0x5c>
 800dda6:	697a      	ldr	r2, [r7, #20]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4a11      	ldr	r2, [pc, #68]	; (800ddf8 <vTaskSwitchContext+0xb0>)
 800ddb2:	4413      	add	r3, r2
 800ddb4:	613b      	str	r3, [r7, #16]
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	685a      	ldr	r2, [r3, #4]
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	605a      	str	r2, [r3, #4]
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	685a      	ldr	r2, [r3, #4]
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d104      	bne.n	800ddd6 <vTaskSwitchContext+0x8e>
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	605a      	str	r2, [r3, #4]
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	4a07      	ldr	r2, [pc, #28]	; (800ddfc <vTaskSwitchContext+0xb4>)
 800ddde:	6013      	str	r3, [r2, #0]
}
 800dde0:	bf00      	nop
 800dde2:	371c      	adds	r7, #28
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr
 800ddec:	20000474 	.word	0x20000474
 800ddf0:	20000460 	.word	0x20000460
 800ddf4:	20000454 	.word	0x20000454
 800ddf8:	20000350 	.word	0x20000350
 800ddfc:	2000034c 	.word	0x2000034c

0800de00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10b      	bne.n	800de28 <vTaskPlaceOnEventList+0x28>
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	b672      	cpsid	i
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	b662      	cpsie	i
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	e7fe      	b.n	800de26 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de28:	4b07      	ldr	r3, [pc, #28]	; (800de48 <vTaskPlaceOnEventList+0x48>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3318      	adds	r3, #24
 800de2e:	4619      	mov	r1, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7fe fc27 	bl	800c684 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de36:	2101      	movs	r1, #1
 800de38:	6838      	ldr	r0, [r7, #0]
 800de3a:	f000 faf9 	bl	800e430 <prvAddCurrentTaskToDelayedList>
}
 800de3e:	bf00      	nop
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	2000034c 	.word	0x2000034c

0800de4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10b      	bne.n	800de7a <xTaskRemoveFromEventList+0x2e>
 800de62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de66:	b672      	cpsid	i
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	b662      	cpsie	i
 800de76:	60fb      	str	r3, [r7, #12]
 800de78:	e7fe      	b.n	800de78 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	3318      	adds	r3, #24
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fe fc39 	bl	800c6f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de84:	4b1d      	ldr	r3, [pc, #116]	; (800defc <xTaskRemoveFromEventList+0xb0>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d11c      	bne.n	800dec6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	3304      	adds	r3, #4
 800de90:	4618      	mov	r0, r3
 800de92:	f7fe fc30 	bl	800c6f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9a:	2201      	movs	r2, #1
 800de9c:	409a      	lsls	r2, r3
 800de9e:	4b18      	ldr	r3, [pc, #96]	; (800df00 <xTaskRemoveFromEventList+0xb4>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	4a16      	ldr	r2, [pc, #88]	; (800df00 <xTaskRemoveFromEventList+0xb4>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a13      	ldr	r2, [pc, #76]	; (800df04 <xTaskRemoveFromEventList+0xb8>)
 800deb6:	441a      	add	r2, r3
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fe fbbc 	bl	800c63c <vListInsertEnd>
 800dec4:	e005      	b.n	800ded2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	3318      	adds	r3, #24
 800deca:	4619      	mov	r1, r3
 800decc:	480e      	ldr	r0, [pc, #56]	; (800df08 <xTaskRemoveFromEventList+0xbc>)
 800dece:	f7fe fbb5 	bl	800c63c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded6:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <xTaskRemoveFromEventList+0xc0>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dedc:	429a      	cmp	r2, r3
 800dede:	d905      	bls.n	800deec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dee0:	2301      	movs	r3, #1
 800dee2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dee4:	4b0a      	ldr	r3, [pc, #40]	; (800df10 <xTaskRemoveFromEventList+0xc4>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	601a      	str	r2, [r3, #0]
 800deea:	e001      	b.n	800def0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800deec:	2300      	movs	r3, #0
 800deee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800def0:	697b      	ldr	r3, [r7, #20]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20000474 	.word	0x20000474
 800df00:	20000454 	.word	0x20000454
 800df04:	20000350 	.word	0x20000350
 800df08:	2000040c 	.word	0x2000040c
 800df0c:	2000034c 	.word	0x2000034c
 800df10:	20000460 	.word	0x20000460

0800df14 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10b      	bne.n	800df3a <vTaskSetTimeOutState+0x26>
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	b672      	cpsid	i
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	b662      	cpsie	i
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	e7fe      	b.n	800df38 <vTaskSetTimeOutState+0x24>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df3a:	4b07      	ldr	r3, [pc, #28]	; (800df58 <vTaskSetTimeOutState+0x44>)
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df42:	4b06      	ldr	r3, [pc, #24]	; (800df5c <vTaskSetTimeOutState+0x48>)
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	605a      	str	r2, [r3, #4]
}
 800df4a:	bf00      	nop
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop
 800df58:	20000464 	.word	0x20000464
 800df5c:	20000450 	.word	0x20000450

0800df60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10b      	bne.n	800df88 <xTaskCheckForTimeOut+0x28>
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	b672      	cpsid	i
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	b662      	cpsie	i
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	e7fe      	b.n	800df86 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d10b      	bne.n	800dfa6 <xTaskCheckForTimeOut+0x46>
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	b672      	cpsid	i
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	b662      	cpsie	i
 800dfa2:	60bb      	str	r3, [r7, #8]
 800dfa4:	e7fe      	b.n	800dfa4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800dfa6:	f7fe fcb7 	bl	800c918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfaa:	4b1c      	ldr	r3, [pc, #112]	; (800e01c <xTaskCheckForTimeOut+0xbc>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb8:	d102      	bne.n	800dfc0 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	e026      	b.n	800e00e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	4b16      	ldr	r3, [pc, #88]	; (800e020 <xTaskCheckForTimeOut+0xc0>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d007      	beq.n	800dfdc <xTaskCheckForTimeOut+0x7c>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	685a      	ldr	r2, [r3, #4]
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d802      	bhi.n	800dfdc <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	617b      	str	r3, [r7, #20]
 800dfda:	e018      	b.n	800e00e <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	1ad2      	subs	r2, r2, r3
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d20e      	bcs.n	800e00a <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6859      	ldr	r1, [r3, #4]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	1acb      	subs	r3, r1, r3
 800dff8:	441a      	add	r2, r3
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7ff ff88 	bl	800df14 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800e004:	2300      	movs	r3, #0
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	e001      	b.n	800e00e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 800e00a:	2301      	movs	r3, #1
 800e00c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800e00e:	f7fe fcb5 	bl	800c97c <vPortExitCritical>

	return xReturn;
 800e012:	697b      	ldr	r3, [r7, #20]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20000450 	.word	0x20000450
 800e020:	20000464 	.word	0x20000464

0800e024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e024:	b480      	push	{r7}
 800e026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e028:	4b03      	ldr	r3, [pc, #12]	; (800e038 <vTaskMissedYield+0x14>)
 800e02a:	2201      	movs	r2, #1
 800e02c:	601a      	str	r2, [r3, #0]
}
 800e02e:	bf00      	nop
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	20000460 	.word	0x20000460

0800e03c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e044:	f000 f852 	bl	800e0ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e048:	4b06      	ldr	r3, [pc, #24]	; (800e064 <prvIdleTask+0x28>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d9f9      	bls.n	800e044 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e050:	4b05      	ldr	r3, [pc, #20]	; (800e068 <prvIdleTask+0x2c>)
 800e052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e056:	601a      	str	r2, [r3, #0]
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e060:	e7f0      	b.n	800e044 <prvIdleTask+0x8>
 800e062:	bf00      	nop
 800e064:	20000350 	.word	0x20000350
 800e068:	e000ed04 	.word	0xe000ed04

0800e06c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e072:	2300      	movs	r3, #0
 800e074:	607b      	str	r3, [r7, #4]
 800e076:	e00c      	b.n	800e092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	4613      	mov	r3, r2
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	4413      	add	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4a12      	ldr	r2, [pc, #72]	; (800e0cc <prvInitialiseTaskLists+0x60>)
 800e084:	4413      	add	r3, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe faab 	bl	800c5e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	3301      	adds	r3, #1
 800e090:	607b      	str	r3, [r7, #4]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b06      	cmp	r3, #6
 800e096:	d9ef      	bls.n	800e078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e098:	480d      	ldr	r0, [pc, #52]	; (800e0d0 <prvInitialiseTaskLists+0x64>)
 800e09a:	f7fe faa2 	bl	800c5e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e09e:	480d      	ldr	r0, [pc, #52]	; (800e0d4 <prvInitialiseTaskLists+0x68>)
 800e0a0:	f7fe fa9f 	bl	800c5e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0a4:	480c      	ldr	r0, [pc, #48]	; (800e0d8 <prvInitialiseTaskLists+0x6c>)
 800e0a6:	f7fe fa9c 	bl	800c5e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0aa:	480c      	ldr	r0, [pc, #48]	; (800e0dc <prvInitialiseTaskLists+0x70>)
 800e0ac:	f7fe fa99 	bl	800c5e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0b0:	480b      	ldr	r0, [pc, #44]	; (800e0e0 <prvInitialiseTaskLists+0x74>)
 800e0b2:	f7fe fa96 	bl	800c5e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0b6:	4b0b      	ldr	r3, [pc, #44]	; (800e0e4 <prvInitialiseTaskLists+0x78>)
 800e0b8:	4a05      	ldr	r2, [pc, #20]	; (800e0d0 <prvInitialiseTaskLists+0x64>)
 800e0ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0bc:	4b0a      	ldr	r3, [pc, #40]	; (800e0e8 <prvInitialiseTaskLists+0x7c>)
 800e0be:	4a05      	ldr	r2, [pc, #20]	; (800e0d4 <prvInitialiseTaskLists+0x68>)
 800e0c0:	601a      	str	r2, [r3, #0]
}
 800e0c2:	bf00      	nop
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20000350 	.word	0x20000350
 800e0d0:	200003dc 	.word	0x200003dc
 800e0d4:	200003f0 	.word	0x200003f0
 800e0d8:	2000040c 	.word	0x2000040c
 800e0dc:	20000420 	.word	0x20000420
 800e0e0:	20000438 	.word	0x20000438
 800e0e4:	20000404 	.word	0x20000404
 800e0e8:	20000408 	.word	0x20000408

0800e0ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0f2:	e028      	b.n	800e146 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800e0f4:	f7ff fcbe 	bl	800da74 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e0f8:	4b17      	ldr	r3, [pc, #92]	; (800e158 <prvCheckTasksWaitingTermination+0x6c>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	bf0c      	ite	eq
 800e100:	2301      	moveq	r3, #1
 800e102:	2300      	movne	r3, #0
 800e104:	b2db      	uxtb	r3, r3
 800e106:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800e108:	f7ff fcc2 	bl	800da90 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d119      	bne.n	800e146 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800e112:	f7fe fc01 	bl	800c918 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e116:	4b10      	ldr	r3, [pc, #64]	; (800e158 <prvCheckTasksWaitingTermination+0x6c>)
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	3304      	adds	r3, #4
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe fae7 	bl	800c6f6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e128:	4b0c      	ldr	r3, [pc, #48]	; (800e15c <prvCheckTasksWaitingTermination+0x70>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	4a0b      	ldr	r2, [pc, #44]	; (800e15c <prvCheckTasksWaitingTermination+0x70>)
 800e130:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800e132:	4b0b      	ldr	r3, [pc, #44]	; (800e160 <prvCheckTasksWaitingTermination+0x74>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	3b01      	subs	r3, #1
 800e138:	4a09      	ldr	r2, [pc, #36]	; (800e160 <prvCheckTasksWaitingTermination+0x74>)
 800e13a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800e13c:	f7fe fc1e 	bl	800c97c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800e140:	6838      	ldr	r0, [r7, #0]
 800e142:	f000 f80f 	bl	800e164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e146:	4b06      	ldr	r3, [pc, #24]	; (800e160 <prvCheckTasksWaitingTermination+0x74>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d1d2      	bne.n	800e0f4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20000420 	.word	0x20000420
 800e15c:	2000044c 	.word	0x2000044c
 800e160:	20000434 	.word	0x20000434

0800e164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e170:	4618      	mov	r0, r3
 800e172:	f7fe fa24 	bl	800c5be <vPortFree>
			vPortFree( pxTCB );
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fe fa21 	bl	800c5be <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e18a:	4b0f      	ldr	r3, [pc, #60]	; (800e1c8 <prvResetNextTaskUnblockTime+0x44>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d101      	bne.n	800e198 <prvResetNextTaskUnblockTime+0x14>
 800e194:	2301      	movs	r3, #1
 800e196:	e000      	b.n	800e19a <prvResetNextTaskUnblockTime+0x16>
 800e198:	2300      	movs	r3, #0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d004      	beq.n	800e1a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e19e:	4b0b      	ldr	r3, [pc, #44]	; (800e1cc <prvResetNextTaskUnblockTime+0x48>)
 800e1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1a6:	e008      	b.n	800e1ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e1a8:	4b07      	ldr	r3, [pc, #28]	; (800e1c8 <prvResetNextTaskUnblockTime+0x44>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	4a05      	ldr	r2, [pc, #20]	; (800e1cc <prvResetNextTaskUnblockTime+0x48>)
 800e1b8:	6013      	str	r3, [r2, #0]
}
 800e1ba:	bf00      	nop
 800e1bc:	370c      	adds	r7, #12
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	20000404 	.word	0x20000404
 800e1cc:	2000046c 	.word	0x2000046c

0800e1d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1d6:	4b0b      	ldr	r3, [pc, #44]	; (800e204 <xTaskGetSchedulerState+0x34>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d102      	bne.n	800e1e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	607b      	str	r3, [r7, #4]
 800e1e2:	e008      	b.n	800e1f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1e4:	4b08      	ldr	r3, [pc, #32]	; (800e208 <xTaskGetSchedulerState+0x38>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d102      	bne.n	800e1f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	607b      	str	r3, [r7, #4]
 800e1f0:	e001      	b.n	800e1f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1f6:	687b      	ldr	r3, [r7, #4]
	}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	20000458 	.word	0x20000458
 800e208:	20000474 	.word	0x20000474

0800e20c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d062      	beq.n	800e2e4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e222:	4b32      	ldr	r3, [pc, #200]	; (800e2ec <vTaskPriorityInherit+0xe0>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e228:	429a      	cmp	r2, r3
 800e22a:	d25b      	bcs.n	800e2e4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	699b      	ldr	r3, [r3, #24]
 800e230:	2b00      	cmp	r3, #0
 800e232:	db06      	blt.n	800e242 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e234:	4b2d      	ldr	r3, [pc, #180]	; (800e2ec <vTaskPriorityInherit+0xe0>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23a:	f1c3 0207 	rsb	r2, r3, #7
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6959      	ldr	r1, [r3, #20]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24a:	4613      	mov	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4a27      	ldr	r2, [pc, #156]	; (800e2f0 <vTaskPriorityInherit+0xe4>)
 800e254:	4413      	add	r3, r2
 800e256:	4299      	cmp	r1, r3
 800e258:	d101      	bne.n	800e25e <vTaskPriorityInherit+0x52>
 800e25a:	2301      	movs	r3, #1
 800e25c:	e000      	b.n	800e260 <vTaskPriorityInherit+0x54>
 800e25e:	2300      	movs	r3, #0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d03a      	beq.n	800e2da <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	3304      	adds	r3, #4
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fe fa44 	bl	800c6f6 <uxListRemove>
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d115      	bne.n	800e2a0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e278:	491d      	ldr	r1, [pc, #116]	; (800e2f0 <vTaskPriorityInherit+0xe4>)
 800e27a:	4613      	mov	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4413      	add	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	440b      	add	r3, r1
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <vTaskPriorityInherit+0x94>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28e:	2201      	movs	r2, #1
 800e290:	fa02 f303 	lsl.w	r3, r2, r3
 800e294:	43da      	mvns	r2, r3
 800e296:	4b17      	ldr	r3, [pc, #92]	; (800e2f4 <vTaskPriorityInherit+0xe8>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4013      	ands	r3, r2
 800e29c:	4a15      	ldr	r2, [pc, #84]	; (800e2f4 <vTaskPriorityInherit+0xe8>)
 800e29e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2a0:	4b12      	ldr	r3, [pc, #72]	; (800e2ec <vTaskPriorityInherit+0xe0>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	409a      	lsls	r2, r3
 800e2b2:	4b10      	ldr	r3, [pc, #64]	; (800e2f4 <vTaskPriorityInherit+0xe8>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	4a0e      	ldr	r2, [pc, #56]	; (800e2f4 <vTaskPriorityInherit+0xe8>)
 800e2ba:	6013      	str	r3, [r2, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4413      	add	r3, r2
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	4a09      	ldr	r2, [pc, #36]	; (800e2f0 <vTaskPriorityInherit+0xe4>)
 800e2ca:	441a      	add	r2, r3
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7fe f9b2 	bl	800c63c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2d8:	e004      	b.n	800e2e4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2da:	4b04      	ldr	r3, [pc, #16]	; (800e2ec <vTaskPriorityInherit+0xe0>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	2000034c 	.word	0x2000034c
 800e2f0:	20000350 	.word	0x20000350
 800e2f4:	20000454 	.word	0x20000454

0800e2f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e304:	2300      	movs	r3, #0
 800e306:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d070      	beq.n	800e3f0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e30e:	4b3b      	ldr	r3, [pc, #236]	; (800e3fc <xTaskPriorityDisinherit+0x104>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	429a      	cmp	r2, r3
 800e316:	d00b      	beq.n	800e330 <xTaskPriorityDisinherit+0x38>
 800e318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31c:	b672      	cpsid	i
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	b662      	cpsie	i
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	e7fe      	b.n	800e32e <xTaskPriorityDisinherit+0x36>

			configASSERT( pxTCB->uxMutexesHeld );
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e334:	2b00      	cmp	r3, #0
 800e336:	d10b      	bne.n	800e350 <xTaskPriorityDisinherit+0x58>
 800e338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33c:	b672      	cpsid	i
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	b662      	cpsie	i
 800e34c:	60bb      	str	r3, [r7, #8]
 800e34e:	e7fe      	b.n	800e34e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e362:	429a      	cmp	r2, r3
 800e364:	d044      	beq.n	800e3f0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d140      	bne.n	800e3f0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	3304      	adds	r3, #4
 800e372:	4618      	mov	r0, r3
 800e374:	f7fe f9bf 	bl	800c6f6 <uxListRemove>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d115      	bne.n	800e3aa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e382:	491f      	ldr	r1, [pc, #124]	; (800e400 <xTaskPriorityDisinherit+0x108>)
 800e384:	4613      	mov	r3, r2
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	4413      	add	r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	440b      	add	r3, r1
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <xTaskPriorityDisinherit+0xb2>
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e398:	2201      	movs	r2, #1
 800e39a:	fa02 f303 	lsl.w	r3, r2, r3
 800e39e:	43da      	mvns	r2, r3
 800e3a0:	4b18      	ldr	r3, [pc, #96]	; (800e404 <xTaskPriorityDisinherit+0x10c>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	4a17      	ldr	r2, [pc, #92]	; (800e404 <xTaskPriorityDisinherit+0x10c>)
 800e3a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b6:	f1c3 0207 	rsb	r2, r3, #7
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	409a      	lsls	r2, r3
 800e3c6:	4b0f      	ldr	r3, [pc, #60]	; (800e404 <xTaskPriorityDisinherit+0x10c>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	4a0d      	ldr	r2, [pc, #52]	; (800e404 <xTaskPriorityDisinherit+0x10c>)
 800e3ce:	6013      	str	r3, [r2, #0]
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4a08      	ldr	r2, [pc, #32]	; (800e400 <xTaskPriorityDisinherit+0x108>)
 800e3de:	441a      	add	r2, r3
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	f7fe f928 	bl	800c63c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3f0:	697b      	ldr	r3, [r7, #20]
	}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3718      	adds	r7, #24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	2000034c 	.word	0x2000034c
 800e400:	20000350 	.word	0x20000350
 800e404:	20000454 	.word	0x20000454

0800e408 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e408:	b480      	push	{r7}
 800e40a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e40c:	4b07      	ldr	r3, [pc, #28]	; (800e42c <pvTaskIncrementMutexHeldCount+0x24>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d004      	beq.n	800e41e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e414:	4b05      	ldr	r3, [pc, #20]	; (800e42c <pvTaskIncrementMutexHeldCount+0x24>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e41a:	3201      	adds	r2, #1
 800e41c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e41e:	4b03      	ldr	r3, [pc, #12]	; (800e42c <pvTaskIncrementMutexHeldCount+0x24>)
 800e420:	681b      	ldr	r3, [r3, #0]
	}
 800e422:	4618      	mov	r0, r3
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	2000034c 	.word	0x2000034c

0800e430 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e43a:	4b29      	ldr	r3, [pc, #164]	; (800e4e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e440:	4b28      	ldr	r3, [pc, #160]	; (800e4e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	3304      	adds	r3, #4
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe f955 	bl	800c6f6 <uxListRemove>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10b      	bne.n	800e46a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e452:	4b24      	ldr	r3, [pc, #144]	; (800e4e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e458:	2201      	movs	r2, #1
 800e45a:	fa02 f303 	lsl.w	r3, r2, r3
 800e45e:	43da      	mvns	r2, r3
 800e460:	4b21      	ldr	r3, [pc, #132]	; (800e4e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4013      	ands	r3, r2
 800e466:	4a20      	ldr	r2, [pc, #128]	; (800e4e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e468:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d10a      	bne.n	800e488 <prvAddCurrentTaskToDelayedList+0x58>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d007      	beq.n	800e488 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e478:	4b1a      	ldr	r3, [pc, #104]	; (800e4e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3304      	adds	r3, #4
 800e47e:	4619      	mov	r1, r3
 800e480:	481a      	ldr	r0, [pc, #104]	; (800e4ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800e482:	f7fe f8db 	bl	800c63c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e486:	e026      	b.n	800e4d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4413      	add	r3, r2
 800e48e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e490:	4b14      	ldr	r3, [pc, #80]	; (800e4e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	68ba      	ldr	r2, [r7, #8]
 800e496:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d209      	bcs.n	800e4b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4a0:	4b13      	ldr	r3, [pc, #76]	; (800e4f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	4b0f      	ldr	r3, [pc, #60]	; (800e4e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	f7fe f8e9 	bl	800c684 <vListInsert>
}
 800e4b2:	e010      	b.n	800e4d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4b4:	4b0f      	ldr	r3, [pc, #60]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3304      	adds	r3, #4
 800e4be:	4619      	mov	r1, r3
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	f7fe f8df 	bl	800c684 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4c6:	4b0c      	ldr	r3, [pc, #48]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d202      	bcs.n	800e4d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e4d0:	4a09      	ldr	r2, [pc, #36]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	6013      	str	r3, [r2, #0]
}
 800e4d6:	bf00      	nop
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20000450 	.word	0x20000450
 800e4e4:	2000034c 	.word	0x2000034c
 800e4e8:	20000454 	.word	0x20000454
 800e4ec:	20000438 	.word	0x20000438
 800e4f0:	20000408 	.word	0x20000408
 800e4f4:	20000404 	.word	0x20000404
 800e4f8:	2000046c 	.word	0x2000046c

0800e4fc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 800e4fc:	b5b0      	push	{r4, r5, r7, lr}
 800e4fe:	b08c      	sub	sp, #48	; 0x30
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	4613      	mov	r3, r2
 800e508:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 800e510:	2302      	movs	r3, #2
 800e512:	e03c      	b.n	800e58e <USBH_Init+0x92>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	79fa      	ldrb	r2, [r7, #7]
 800e518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2200      	movs	r2, #0
 800e520:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
  phost->ClassNumber = 0;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2200      	movs	r2, #0
 800e528:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f837 	bl	800e5a0 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d003      	beq.n	800e540 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  }
  
#if (USBH_USE_OS == 1) 
  
  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, 10, uint16_t);
 800e540:	4a15      	ldr	r2, [pc, #84]	; (800e598 <USBH_Init+0x9c>)
 800e542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e54a:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
 800e54e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e552:	2100      	movs	r1, #0
 800e554:	4618      	mov	r0, r3
 800e556:	f7fd ff4e 	bl	800c3f6 <osMessageCreate>
 800e55a:	4602      	mov	r2, r0
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  
  /*Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 800e562:	4b0e      	ldr	r3, [pc, #56]	; (800e59c <USBH_Init+0xa0>)
 800e564:	f107 0414 	add.w	r4, r7, #20
 800e568:	461d      	mov	r5, r3
 800e56a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e56c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, 8 * configMINIMAL_STACK_SIZE);
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800e572:	f107 0314 	add.w	r3, r7, #20
 800e576:	68f9      	ldr	r1, [r7, #12]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fd fe49 	bl	800c210 <osThreadCreate>
 800e57e:	4602      	mov	r2, r0
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f005 f9b6 	bl	80138f8 <USBH_LL_Init>
  return USBH_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3730      	adds	r7, #48	; 0x30
 800e592:	46bd      	mov	sp, r7
 800e594:	bdb0      	pop	{r4, r5, r7, pc}
 800e596:	bf00      	nop
 800e598:	08016c2c 	.word	0x08016c2c
 800e59c:	08016c40 	.word	0x08016c40

0800e5a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800e5ac:	e009      	b.n	800e5c2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0;
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	33de      	adds	r3, #222	; 0xde
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4413      	add	r3, r2
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	60fb      	str	r3, [r7, #12]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2b0e      	cmp	r3, #14
 800e5c6:	d9f2      	bls.n	800e5ae <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	60fb      	str	r3, [r7, #12]
 800e5cc:	e009      	b.n	800e5e2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0;
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e5d8:	2200      	movs	r2, #0
 800e5da:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	60fb      	str	r3, [r7, #12]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5e8:	d3f1      	bcc.n	800e5ce <DeInitStateMachine+0x2e>
  }
  
  phost->gState = HOST_IDLE;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  
  phost->Control.state = CTRL_SETUP;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2201      	movs	r2, #1
 800e608:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2240      	movs	r2, #64	; 0x40
 800e60e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 800e626:	2300      	movs	r3, #0
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800e63e:	2300      	movs	r3, #0
 800e640:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d016      	beq.n	800e676 <USBH_RegisterClass+0x42>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10e      	bne.n	800e670 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e658:	1c59      	adds	r1, r3, #1
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	f8c2 1378 	str.w	r1, [r2, #888]	; 0x378
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	33dc      	adds	r3, #220	; 0xdc
 800e664:	6839      	ldr	r1, [r7, #0]
 800e666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e66a:	2300      	movs	r3, #0
 800e66c:	73fb      	strb	r3, [r7, #15]
 800e66e:	e004      	b.n	800e67a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 800e670:	2302      	movs	r3, #2
 800e672:	73fb      	strb	r3, [r7, #15]
 800e674:	e001      	b.n	800e67a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 800e676:	2302      	movs	r3, #2
 800e678:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3714      	adds	r7, #20
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e688:	b480      	push	{r7}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e69e:	78fa      	ldrb	r2, [r7, #3]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d204      	bcs.n	800e6ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	78fa      	ldrb	r2, [r7, #3]
 800e6a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800e6ac:	e001      	b.n	800e6b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 800e6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b087      	sub	sp, #28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	4608      	mov	r0, r1
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	70fb      	strb	r3, [r7, #3]
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	70bb      	strb	r3, [r7, #2]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f203 3332 	addw	r3, r3, #818	; 0x332
 800e6e8:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e6ea:	e029      	b.n	800e740 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e6ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6f0:	221a      	movs	r2, #26
 800e6f2:	fb02 f303 	mul.w	r3, r2, r3
 800e6f6:	3308      	adds	r3, #8
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	795b      	ldrb	r3, [r3, #5]
 800e704:	78fa      	ldrb	r2, [r7, #3]
 800e706:	429a      	cmp	r2, r3
 800e708:	d002      	beq.n	800e710 <USBH_FindInterface+0x50>
 800e70a:	78fb      	ldrb	r3, [r7, #3]
 800e70c:	2bff      	cmp	r3, #255	; 0xff
 800e70e:	d111      	bne.n	800e734 <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800e714:	78ba      	ldrb	r2, [r7, #2]
 800e716:	429a      	cmp	r2, r3
 800e718:	d002      	beq.n	800e720 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800e71a:	78bb      	ldrb	r3, [r7, #2]
 800e71c:	2bff      	cmp	r3, #255	; 0xff
 800e71e:	d109      	bne.n	800e734 <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800e724:	787a      	ldrb	r2, [r7, #1]
 800e726:	429a      	cmp	r2, r3
 800e728:	d002      	beq.n	800e730 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800e72a:	787b      	ldrb	r3, [r7, #1]
 800e72c:	2bff      	cmp	r3, #255	; 0xff
 800e72e:	d101      	bne.n	800e734 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800e730:	7dfb      	ldrb	r3, [r7, #23]
 800e732:	e00a      	b.n	800e74a <USBH_FindInterface+0x8a>
    }
    if_ix++;
 800e734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	3301      	adds	r3, #1
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e744:	2b01      	cmp	r3, #1
 800e746:	ddd1      	ble.n	800e6ec <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 800e748:	23ff      	movs	r3, #255	; 0xff
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	371c      	adds	r7, #28
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b082      	sub	sp, #8
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f005 f912 	bl	8013988 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 800e764:	2101      	movs	r1, #1
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f005 fab5 	bl	8013cd6 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
	...

0800e778 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b088      	sub	sp, #32
 800e77c:	af04      	add	r7, sp, #16
 800e77e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e780:	2302      	movs	r3, #2
 800e782:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 800e784:	2300      	movs	r3, #0
 800e786:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	2b0a      	cmp	r3, #10
 800e790:	f200 814f 	bhi.w	800ea32 <USBH_Process+0x2ba>
 800e794:	a201      	add	r2, pc, #4	; (adr r2, 800e79c <USBH_Process+0x24>)
 800e796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e79a:	bf00      	nop
 800e79c:	0800e7c9 	.word	0x0800e7c9
 800e7a0:	0800ea33 	.word	0x0800ea33
 800e7a4:	0800e7fb 	.word	0x0800e7fb
 800e7a8:	0800ea0d 	.word	0x0800ea0d
 800e7ac:	0800ea33 	.word	0x0800ea33
 800e7b0:	0800e899 	.word	0x0800e899
 800e7b4:	0800e9b3 	.word	0x0800e9b3
 800e7b8:	0800e8c9 	.word	0x0800e8c9
 800e7bc:	0800e8f9 	.word	0x0800e8f9
 800e7c0:	0800e919 	.word	0x0800e919
 800e7c4:	0800e9f5 	.word	0x0800e9f5
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f000 8130 	beq.w	800ea36 <USBH_Process+0x2be>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 800e7dc:	20c8      	movs	r0, #200	; 0xc8
 800e7de:	f005 faee 	bl	8013dbe <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f005 f95a 	bl	8013a9c <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	2101      	movs	r1, #1
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7fd fe12 	bl	800c41c <osMessagePut>
#endif
    }
    break;
 800e7f8:	e11d      	b.n	800ea36 <USBH_Process+0x2be>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 800e7fa:	2064      	movs	r0, #100	; 0x64
 800e7fc:	f005 fadf 	bl	8013dbe <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f005 f925 	bl	8013a50 <USBH_LL_GetSpeed>
 800e806:	4603      	mov	r3, r0
 800e808:	461a      	mov	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2205      	movs	r2, #5
 800e814:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 800e816:	2100      	movs	r1, #0
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f001 f8e8 	bl	800f9ee <USBH_AllocPipe>
 800e81e:	4603      	mov	r3, r0
 800e820:	461a      	mov	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 800e826:	2180      	movs	r1, #128	; 0x80
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f001 f8e0 	bl	800f9ee <USBH_AllocPipe>
 800e82e:	4603      	mov	r3, r0
 800e830:	461a      	mov	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	7919      	ldrb	r1, [r3, #4]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800e84a:	b292      	uxth	r2, r2
 800e84c:	9202      	str	r2, [sp, #8]
 800e84e:	2200      	movs	r2, #0
 800e850:	9201      	str	r2, [sp, #4]
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	4603      	mov	r3, r0
 800e856:	2280      	movs	r2, #128	; 0x80
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f001 f899 	bl	800f990 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	7959      	ldrb	r1, [r3, #5]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800e872:	b292      	uxth	r2, r2
 800e874:	9202      	str	r2, [sp, #8]
 800e876:	2200      	movs	r2, #0
 800e878:	9201      	str	r2, [sp, #4]
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	4603      	mov	r3, r0
 800e87e:	2200      	movs	r2, #0
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f001 f885 	bl	800f990 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e88c:	2200      	movs	r2, #0
 800e88e:	2101      	movs	r1, #1
 800e890:	4618      	mov	r0, r3
 800e892:	f7fd fdc3 	bl	800c41c <osMessagePut>
#endif    
    
    break;
 800e896:	e0db      	b.n	800ea50 <USBH_Process+0x2d8>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f8df 	bl	800ea5c <USBH_HandleEnum>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f040 80ca 	bne.w	800ea3a <USBH_Process+0x2c2>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d103      	bne.n	800e8c0 <USBH_Process+0x148>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2208      	movs	r2, #8
 800e8bc:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 800e8be:	e0bc      	b.n	800ea3a <USBH_Process+0x2c2>
        phost->gState  = HOST_INPUT; 
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2207      	movs	r2, #7
 800e8c4:	701a      	strb	r2, [r3, #0]
    break;
 800e8c6:	e0b8      	b.n	800ea3a <USBH_Process+0x2c2>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f000 80b5 	beq.w	800ea3e <USBH_Process+0x2c6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e8da:	2101      	movs	r1, #1
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2208      	movs	r2, #8
 800e8e4:	701a      	strb	r2, [r3, #0]
        
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	2105      	movs	r1, #5
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fd fd93 	bl	800c41c <osMessagePut>
#endif         
      }
    }
    break;
 800e8f6:	e0a2      	b.n	800ea3e <USBH_Process+0x2c6>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4619      	mov	r1, r3
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fb76 	bl	800eff4 <USBH_SetCfg>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f040 8099 	bne.w	800ea42 <USBH_Process+0x2ca>
    {
      phost->gState  = HOST_CHECK_CLASS;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2209      	movs	r2, #9
 800e914:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 800e916:	e094      	b.n	800ea42 <USBH_Process+0x2ca>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d03e      	beq.n	800e9a0 <USBH_Process+0x228>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 800e92a:	2300      	movs	r3, #0
 800e92c:	73fb      	strb	r3, [r7, #15]
 800e92e:	e015      	b.n	800e95c <USBH_Process+0x1e4>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e930:	7bfa      	ldrb	r2, [r7, #15]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	32dc      	adds	r2, #220	; 0xdc
 800e936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e93a:	791a      	ldrb	r2, [r3, #4]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 800e942:	429a      	cmp	r2, r3
 800e944:	d107      	bne.n	800e956 <USBH_Process+0x1de>
        {
          phost->pActiveClass = phost->pClass[idx];
 800e946:	7bfa      	ldrb	r2, [r7, #15]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	32dc      	adds	r2, #220	; 0xdc
 800e94c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 800e956:	7bfb      	ldrb	r3, [r7, #15]
 800e958:	3301      	adds	r3, #1
 800e95a:	73fb      	strb	r3, [r7, #15]
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0e6      	beq.n	800e930 <USBH_Process+0x1b8>
        }
      }
      
      if(phost->pActiveClass != NULL)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d016      	beq.n	800e99a <USBH_Process+0x222>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	4798      	blx	r3
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d109      	bne.n	800e992 <USBH_Process+0x21a>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2206      	movs	r2, #6
 800e982:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e98a:	2103      	movs	r1, #3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	4798      	blx	r3
 800e990:	e006      	b.n	800e9a0 <USBH_Process+0x228>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	220c      	movs	r2, #12
 800e996:	701a      	strb	r2, [r3, #0]
 800e998:	e002      	b.n	800e9a0 <USBH_Process+0x228>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	220c      	movs	r2, #12
 800e99e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	2105      	movs	r1, #5
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fd fd36 	bl	800c41c <osMessagePut>
#endif 
    break;    
 800e9b0:	e04e      	b.n	800ea50 <USBH_Process+0x2d8>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00f      	beq.n	800e9dc <USBH_Process+0x264>
    {
      status = phost->pActiveClass->Requests(phost);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	4798      	blx	r3
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 800e9cc:	7bbb      	ldrb	r3, [r7, #14]
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d138      	bne.n	800ea46 <USBH_Process+0x2ce>
      {
        phost->gState  = HOST_CLASS;        
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	220a      	movs	r2, #10
 800e9d8:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 800e9da:	e034      	b.n	800ea46 <USBH_Process+0x2ce>
      phost->gState  = HOST_ABORT_STATE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	220c      	movs	r2, #12
 800e9e0:	701a      	strb	r2, [r3, #0]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2105      	movs	r1, #5
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7fd fd15 	bl	800c41c <osMessagePut>
    break;    
 800e9f2:	e028      	b.n	800ea46 <USBH_Process+0x2ce>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d025      	beq.n	800ea4a <USBH_Process+0x2d2>
    { 
      phost->pActiveClass->BgndProcess(phost);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ea04:	695b      	ldr	r3, [r3, #20]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	4798      	blx	r3
    }
    break;       
 800ea0a:	e01e      	b.n	800ea4a <USBH_Process+0x2d2>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7ff fdc7 	bl	800e5a0 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d018      	beq.n	800ea4e <USBH_Process+0x2d6>
    {
      phost->pActiveClass->DeInit(phost); 
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
    }     
    break;
 800ea30:	e00d      	b.n	800ea4e <USBH_Process+0x2d6>
    
  case HOST_ABORT_STATE:
  default :
    break;
 800ea32:	bf00      	nop
 800ea34:	e00c      	b.n	800ea50 <USBH_Process+0x2d8>
    break;
 800ea36:	bf00      	nop
 800ea38:	e00a      	b.n	800ea50 <USBH_Process+0x2d8>
    break;
 800ea3a:	bf00      	nop
 800ea3c:	e008      	b.n	800ea50 <USBH_Process+0x2d8>
    break;
 800ea3e:	bf00      	nop
 800ea40:	e006      	b.n	800ea50 <USBH_Process+0x2d8>
    break;
 800ea42:	bf00      	nop
 800ea44:	e004      	b.n	800ea50 <USBH_Process+0x2d8>
    break;    
 800ea46:	bf00      	nop
 800ea48:	e002      	b.n	800ea50 <USBH_Process+0x2d8>
    break;       
 800ea4a:	bf00      	nop
 800ea4c:	e000      	b.n	800ea50 <USBH_Process+0x2d8>
    break;
 800ea4e:	bf00      	nop
  }
 return USBH_OK;  
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop

0800ea5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b088      	sub	sp, #32
 800ea60:	af04      	add	r7, sp, #16
 800ea62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 800ea64:	2301      	movs	r3, #1
 800ea66:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	785b      	ldrb	r3, [r3, #1]
 800ea6c:	2b07      	cmp	r3, #7
 800ea6e:	f200 8119 	bhi.w	800eca4 <USBH_HandleEnum+0x248>
 800ea72:	a201      	add	r2, pc, #4	; (adr r2, 800ea78 <USBH_HandleEnum+0x1c>)
 800ea74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea78:	0800ea99 	.word	0x0800ea99
 800ea7c:	0800eb0b 	.word	0x0800eb0b
 800ea80:	0800eb23 	.word	0x0800eb23
 800ea84:	0800eb99 	.word	0x0800eb99
 800ea88:	0800ebb1 	.word	0x0800ebb1
 800ea8c:	0800ebcd 	.word	0x0800ebcd
 800ea90:	0800ec21 	.word	0x0800ec21
 800ea94:	0800ec65 	.word	0x0800ec65
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 800ea98:	2108      	movs	r1, #8
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f9da 	bl	800ee54 <USBH_Get_DevDesc>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f040 8100 	bne.w	800eca8 <USBH_HandleEnum+0x24c>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	7919      	ldrb	r1, [r3, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800eacc:	b292      	uxth	r2, r2
 800eace:	9202      	str	r2, [sp, #8]
 800ead0:	2200      	movs	r2, #0
 800ead2:	9201      	str	r2, [sp, #4]
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	4603      	mov	r3, r0
 800ead8:	2280      	movs	r2, #128	; 0x80
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 ff58 	bl	800f990 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7959      	ldrb	r1, [r3, #5]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800eaf4:	b292      	uxth	r2, r2
 800eaf6:	9202      	str	r2, [sp, #8]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	9201      	str	r2, [sp, #4]
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	4603      	mov	r3, r0
 800eb00:	2200      	movs	r2, #0
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 ff44 	bl	800f990 <USBH_OpenPipe>
      
    }
    break;
 800eb08:	e0ce      	b.n	800eca8 <USBH_HandleEnum+0x24c>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800eb0a:	2112      	movs	r1, #18
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 f9a1 	bl	800ee54 <USBH_Get_DevDesc>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	f040 80c9 	bne.w	800ecac <USBH_HandleEnum+0x250>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2202      	movs	r2, #2
 800eb1e:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 800eb20:	e0c4      	b.n	800ecac <USBH_HandleEnum+0x250>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800eb22:	2101      	movs	r1, #1
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fa41 	bl	800efac <USBH_SetAddress>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f040 80bf 	bne.w	800ecb0 <USBH_HandleEnum+0x254>
    {
      USBH_Delay(2);
 800eb32:	2002      	movs	r0, #2
 800eb34:	f005 f943 	bl	8013dbe <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2203      	movs	r2, #3
 800eb44:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7919      	ldrb	r1, [r3, #4]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800eb5a:	b292      	uxth	r2, r2
 800eb5c:	9202      	str	r2, [sp, #8]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	9201      	str	r2, [sp, #4]
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	4603      	mov	r3, r0
 800eb66:	2280      	movs	r2, #128	; 0x80
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 ff11 	bl	800f990 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	7959      	ldrb	r1, [r3, #5]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800eb82:	b292      	uxth	r2, r2
 800eb84:	9202      	str	r2, [sp, #8]
 800eb86:	2200      	movs	r2, #0
 800eb88:	9201      	str	r2, [sp, #4]
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2200      	movs	r2, #0
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fefd 	bl	800f990 <USBH_OpenPipe>
    }
    break;
 800eb96:	e08b      	b.n	800ecb0 <USBH_HandleEnum+0x254>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 800eb98:	2109      	movs	r1, #9
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 f982 	bl	800eea4 <USBH_Get_CfgDesc>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f040 8086 	bne.w	800ecb4 <USBH_HandleEnum+0x258>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2204      	movs	r2, #4
 800ebac:	705a      	strb	r2, [r3, #1]
    }
    break;
 800ebae:	e081      	b.n	800ecb4 <USBH_HandleEnum+0x258>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 f973 	bl	800eea4 <USBH_Get_CfgDesc>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d179      	bne.n	800ecb8 <USBH_HandleEnum+0x25c>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2205      	movs	r2, #5
 800ebc8:	705a      	strb	r2, [r3, #1]
    }
    break;
 800ebca:	e075      	b.n	800ecb8 <USBH_HandleEnum+0x25c>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d018      	beq.n	800ec08 <USBH_HandleEnum+0x1ac>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ebe2:	23ff      	movs	r3, #255	; 0xff
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f000 f981 	bl	800eeec <USBH_Get_StringDesc>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d165      	bne.n	800ecbc <USBH_HandleEnum+0x260>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2206      	movs	r2, #6
 800ebf4:	705a      	strb	r2, [r3, #1]
        
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2105      	movs	r1, #5
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7fd fc0b 	bl	800c41c <osMessagePut>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 800ec06:	e059      	b.n	800ecbc <USBH_HandleEnum+0x260>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2206      	movs	r2, #6
 800ec0c:	705a      	strb	r2, [r3, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec14:	2200      	movs	r2, #0
 800ec16:	2105      	movs	r1, #5
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fd fbff 	bl	800c41c <osMessagePut>
    break;
 800ec1e:	e04d      	b.n	800ecbc <USBH_HandleEnum+0x260>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d010      	beq.n	800ec4c <USBH_HandleEnum+0x1f0>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ec36:	23ff      	movs	r3, #255	; 0xff
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f957 	bl	800eeec <USBH_Get_StringDesc>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d13d      	bne.n	800ecc0 <USBH_HandleEnum+0x264>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2207      	movs	r2, #7
 800ec48:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 800ec4a:	e039      	b.n	800ecc0 <USBH_HandleEnum+0x264>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2207      	movs	r2, #7
 800ec50:	705a      	strb	r2, [r3, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec58:	2200      	movs	r2, #0
 800ec5a:	2105      	movs	r1, #5
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fd fbdd 	bl	800c41c <osMessagePut>
    break;
 800ec62:	e02d      	b.n	800ecc0 <USBH_HandleEnum+0x264>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d00f      	beq.n	800ec8e <USBH_HandleEnum+0x232>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ec7a:	23ff      	movs	r3, #255	; 0xff
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 f935 	bl	800eeec <USBH_Get_StringDesc>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d11d      	bne.n	800ecc4 <USBH_HandleEnum+0x268>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 800ec8c:	e01a      	b.n	800ecc4 <USBH_HandleEnum+0x268>
      Status = USBH_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2105      	movs	r1, #5
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fd fbbd 	bl	800c41c <osMessagePut>
    break;
 800eca2:	e00f      	b.n	800ecc4 <USBH_HandleEnum+0x268>
    
  default:
    break;
 800eca4:	bf00      	nop
 800eca6:	e00e      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800eca8:	bf00      	nop
 800ecaa:	e00c      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800ecac:	bf00      	nop
 800ecae:	e00a      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800ecb0:	bf00      	nop
 800ecb2:	e008      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800ecb4:	bf00      	nop
 800ecb6:	e006      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800ecb8:	bf00      	nop
 800ecba:	e004      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800ecbc:	bf00      	nop
 800ecbe:	e002      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800ecc0:	bf00      	nop
 800ecc2:	e000      	b.n	800ecc6 <USBH_HandleEnum+0x26a>
    break;
 800ecc4:	bf00      	nop
  }  
  return Status;
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
}
 800ece2:	bf00      	nop
 800ece4:	370c      	adds	r7, #12
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b082      	sub	sp, #8
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800ecfc:	1c5a      	adds	r2, r3, #1
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  USBH_HandleSof(phost);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f804 	bl	800ed12 <USBH_HandleSof>
}
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b082      	sub	sp, #8
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b0a      	cmp	r3, #10
 800ed22:	d10a      	bne.n	800ed3a <USBH_HandleSof+0x28>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d005      	beq.n	800ed3a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
  }
}
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b082      	sub	sp, #8
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10f      	bne.n	800ed74 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2201      	movs	r2, #1
 800ed58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d00e      	beq.n	800ed84 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ed6c:	2104      	movs	r1, #4
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	4798      	blx	r3
 800ed72:	e007      	b.n	800ed84 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d102      	bne.n	800ed84 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2202      	movs	r2, #2
 800ed82:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fd fb44 	bl	800c41c <osMessagePut>
#endif 
  
  return USBH_OK;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f004 fe20 	bl	80139ec <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	791b      	ldrb	r3, [r3, #4]
 800edb0:	4619      	mov	r1, r3
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fe3b 	bl	800fa2e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	795b      	ldrb	r3, [r3, #5]
 800edbc:	4619      	mov	r1, r3
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fe35 	bl	800fa2e <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d005      	beq.n	800ede2 <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eddc:	2105      	movs	r1, #5
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f004 fdd0 	bl	8013988 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2203      	movs	r2, #3
 800edec:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800edf4:	2200      	movs	r2, #0
 800edf6:	2101      	movs	r1, #1
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fd fb0f 	bl	800c41c <osMessagePut>
#endif 
  
  return USBH_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  osEvent event;
  
  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 13c8 	ldr.w	r1, [r3, #968]	; 0x3c8
 800ee16:	f107 030c 	add.w	r3, r7, #12
 800ee1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fd fb3c 	bl	800c49c <osMessageGet>
    
    if( event.status == osEventMessage )
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2b10      	cmp	r3, #16
 800ee28:	d1f2      	bne.n	800ee10 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7ff fca4 	bl	800e778 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 800ee30:	e7ee      	b.n	800ee10 <USBH_Process_OS+0x8>

0800ee32 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ee40:	2200      	movs	r2, #0
 800ee42:	2102      	movs	r1, #2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fd fae9 	bl	800c41c <osMessagePut>
  return USBH_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af02      	add	r7, sp, #8
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800ee66:	78fb      	ldrb	r3, [r7, #3]
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee72:	2100      	movs	r1, #0
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 f864 	bl	800ef42 <USBH_GetDescriptor>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	73fb      	strb	r3, [r7, #15]
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10a      	bne.n	800ee9a <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f503 7048 	add.w	r0, r3, #800	; 0x320
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ee90:	78fa      	ldrb	r2, [r7, #3]
 800ee92:	b292      	uxth	r2, r2
 800ee94:	4619      	mov	r1, r3
 800ee96:	f000 f8f4 	bl	800f082 <USBH_ParseDevDesc>
  }
  return status;      
 800ee9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af02      	add	r7, sp, #8
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	331c      	adds	r3, #28
 800eeb4:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 800eeb6:	887b      	ldrh	r3, [r7, #2]
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eec0:	2100      	movs	r1, #0
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 f83d 	bl	800ef42 <USBH_GetDescriptor>
 800eec8:	4603      	mov	r3, r0
 800eeca:	72fb      	strb	r3, [r7, #11]
 800eecc:	7afb      	ldrb	r3, [r7, #11]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d107      	bne.n	800eee2 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f203 3332 	addw	r3, r3, #818	; 0x332
 800eed8:	887a      	ldrh	r2, [r7, #2]
 800eeda:	68f9      	ldr	r1, [r7, #12]
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 f940 	bl	800f162 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 800eee2:	7afb      	ldrb	r3, [r7, #11]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b088      	sub	sp, #32
 800eef0:	af02      	add	r7, sp, #8
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	607a      	str	r2, [r7, #4]
 800eef6:	461a      	mov	r2, r3
 800eef8:	460b      	mov	r3, r1
 800eefa:	72fb      	strb	r3, [r7, #11]
 800eefc:	4613      	mov	r3, r2
 800eefe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800ef00:	7afb      	ldrb	r3, [r7, #11]
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ef08:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800ef10:	893b      	ldrh	r3, [r7, #8]
 800ef12:	9300      	str	r3, [sp, #0]
 800ef14:	460b      	mov	r3, r1
 800ef16:	2100      	movs	r1, #0
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f000 f812 	bl	800ef42 <USBH_GetDescriptor>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	75fb      	strb	r3, [r7, #23]
 800ef22:	7dfb      	ldrb	r3, [r7, #23]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d107      	bne.n	800ef38 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ef2e:	893a      	ldrh	r2, [r7, #8]
 800ef30:	6879      	ldr	r1, [r7, #4]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 fa17 	bl	800f366 <USBH_ParseStringDesc>
  }
  return status;
 800ef38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3718      	adds	r7, #24
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b084      	sub	sp, #16
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	60f8      	str	r0, [r7, #12]
 800ef4a:	607b      	str	r3, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	72fb      	strb	r3, [r7, #11]
 800ef50:	4613      	mov	r3, r2
 800ef52:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	789b      	ldrb	r3, [r3, #2]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d11c      	bne.n	800ef96 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ef5c:	7afb      	ldrb	r3, [r7, #11]
 800ef5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2206      	movs	r2, #6
 800ef6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	893a      	ldrh	r2, [r7, #8]
 800ef72:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 800ef74:	893b      	ldrh	r3, [r7, #8]
 800ef76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef7e:	d104      	bne.n	800ef8a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f240 4209 	movw	r2, #1033	; 0x409
 800ef86:	829a      	strh	r2, [r3, #20]
 800ef88:	e002      	b.n	800ef90 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	8b3a      	ldrh	r2, [r7, #24]
 800ef94:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 800ef96:	8b3b      	ldrh	r3, [r7, #24]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	6879      	ldr	r1, [r7, #4]
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f000 fa30 	bl	800f402 <USBH_CtlReq>
 800efa2:	4603      	mov	r3, r0
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3710      	adds	r7, #16
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	460b      	mov	r3, r1
 800efb6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	789b      	ldrb	r3, [r3, #2]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d10f      	bne.n	800efe0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2205      	movs	r2, #5
 800efca:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800efcc:	78fb      	ldrb	r3, [r7, #3]
 800efce:	b29a      	uxth	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 800efe0:	2200      	movs	r2, #0
 800efe2:	2100      	movs	r1, #0
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 fa0c 	bl	800f402 <USBH_CtlReq>
 800efea:	4603      	mov	r3, r0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	460b      	mov	r3, r1
 800effe:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	789b      	ldrb	r3, [r3, #2]
 800f004:	2b01      	cmp	r3, #1
 800f006:	d10e      	bne.n	800f026 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2209      	movs	r2, #9
 800f012:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	887a      	ldrh	r2, [r7, #2]
 800f018:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 800f026:	2200      	movs	r2, #0
 800f028:	2100      	movs	r1, #0
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 f9e9 	bl	800f402 <USBH_CtlReq>
 800f030:	4603      	mov	r3, r0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	460b      	mov	r3, r1
 800f044:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	789b      	ldrb	r3, [r3, #2]
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d10f      	bne.n	800f06e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2202      	movs	r2, #2
 800f052:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f060:	78fb      	ldrb	r3, [r7, #3]
 800f062:	b29a      	uxth	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 800f06e:	2200      	movs	r2, #0
 800f070:	2100      	movs	r1, #0
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 f9c5 	bl	800f402 <USBH_CtlReq>
 800f078:	4603      	mov	r3, r0
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 800f082:	b480      	push	{r7}
 800f084:	b085      	sub	sp, #20
 800f086:	af00      	add	r7, sp, #0
 800f088:	60f8      	str	r0, [r7, #12]
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	4613      	mov	r3, r2
 800f08e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	781a      	ldrb	r2, [r3, #0]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	785a      	ldrb	r2, [r3, #1]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	3302      	adds	r3, #2
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	3303      	adds	r3, #3
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	021b      	lsls	r3, r3, #8
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	4413      	add	r3, r2
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	791a      	ldrb	r2, [r3, #4]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	795a      	ldrb	r2, [r3, #5]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	799a      	ldrb	r2, [r3, #6]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	79da      	ldrb	r2, [r3, #7]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800f0dc:	88fb      	ldrh	r3, [r7, #6]
 800f0de:	2b08      	cmp	r3, #8
 800f0e0:	d939      	bls.n	800f156 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	3309      	adds	r3, #9
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	021b      	lsls	r3, r3, #8
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	4413      	add	r3, r2
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	330a      	adds	r3, #10
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	b29a      	uxth	r2, r3
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	330b      	adds	r3, #11
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	021b      	lsls	r3, r3, #8
 800f110:	b29b      	uxth	r3, r3
 800f112:	4413      	add	r3, r2
 800f114:	b29a      	uxth	r2, r3
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	330c      	adds	r3, #12
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	b29a      	uxth	r2, r3
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	330d      	adds	r3, #13
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	b29b      	uxth	r3, r3
 800f12a:	021b      	lsls	r3, r3, #8
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	4413      	add	r3, r2
 800f130:	b29a      	uxth	r2, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	7b9a      	ldrb	r2, [r3, #14]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	7bda      	ldrb	r2, [r3, #15]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	7c1a      	ldrb	r2, [r3, #16]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	7c5a      	ldrb	r2, [r3, #17]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	745a      	strb	r2, [r3, #17]
  }
}
 800f156:	bf00      	nop
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 800f162:	b580      	push	{r7, lr}
 800f164:	b08a      	sub	sp, #40	; 0x28
 800f166:	af00      	add	r7, sp, #0
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	60b9      	str	r1, [r7, #8]
 800f16c:	4613      	mov	r3, r2
 800f16e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800f17a:	2300      	movs	r3, #0
 800f17c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	781a      	ldrb	r2, [r3, #0]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	785a      	ldrb	r2, [r3, #1]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	3302      	adds	r3, #2
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	3303      	adds	r3, #3
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	021b      	lsls	r3, r3, #8
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	4413      	add	r3, r2
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	791a      	ldrb	r2, [r3, #4]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	795a      	ldrb	r2, [r3, #5]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	799a      	ldrb	r2, [r3, #6]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	79da      	ldrb	r2, [r3, #7]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	7a1a      	ldrb	r2, [r3, #8]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f1d8:	88fb      	ldrh	r3, [r7, #6]
 800f1da:	2b09      	cmp	r3, #9
 800f1dc:	d963      	bls.n	800f2a6 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 800f1de:	2309      	movs	r3, #9
 800f1e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800f1e6:	e055      	b.n	800f294 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f1e8:	f107 0316 	add.w	r3, r7, #22
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1f0:	f000 f8ec 	bl	800f3cc <USBH_GetNextDesc>
 800f1f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f8:	785b      	ldrb	r3, [r3, #1]
 800f1fa:	2b04      	cmp	r3, #4
 800f1fc:	d14a      	bne.n	800f294 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f1fe:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f202:	221a      	movs	r2, #26
 800f204:	fb02 f303 	mul.w	r3, r2, r3
 800f208:	3308      	adds	r3, #8
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	4413      	add	r3, r2
 800f20e:	3302      	adds	r3, #2
 800f210:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 800f212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f214:	69f8      	ldr	r0, [r7, #28]
 800f216:	f000 f84a 	bl	800f2ae <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 800f220:	2300      	movs	r3, #0
 800f222:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f224:	e024      	b.n	800f270 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 800f226:	f107 0316 	add.w	r3, r7, #22
 800f22a:	4619      	mov	r1, r3
 800f22c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f22e:	f000 f8cd 	bl	800f3cc <USBH_GetNextDesc>
 800f232:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f236:	785b      	ldrb	r3, [r3, #1]
 800f238:	2b05      	cmp	r3, #5
 800f23a:	d119      	bne.n	800f270 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f23c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f240:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 800f244:	3201      	adds	r2, #1
 800f246:	00d2      	lsls	r2, r2, #3
 800f248:	211a      	movs	r1, #26
 800f24a:	fb01 f303 	mul.w	r3, r1, r3
 800f24e:	4413      	add	r3, r2
 800f250:	3308      	adds	r3, #8
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	4413      	add	r3, r2
 800f256:	3304      	adds	r3, #4
 800f258:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 800f25a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f25c:	69b8      	ldr	r0, [r7, #24]
 800f25e:	f000 f855 	bl	800f30c <USBH_ParseEPDesc>
            ep_ix++;
 800f262:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800f266:	b2db      	uxtb	r3, r3
 800f268:	3301      	adds	r3, #1
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f270:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800f274:	69fa      	ldr	r2, [r7, #28]
 800f276:	7912      	ldrb	r2, [r2, #4]
 800f278:	4293      	cmp	r3, r2
 800f27a:	da04      	bge.n	800f286 <USBH_ParseCfgDesc+0x124>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	885a      	ldrh	r2, [r3, #2]
 800f280:	8afb      	ldrh	r3, [r7, #22]
 800f282:	429a      	cmp	r2, r3
 800f284:	d8cf      	bhi.n	800f226 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f286:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	3301      	adds	r3, #1
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800f294:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f298:	2b01      	cmp	r3, #1
 800f29a:	dc04      	bgt.n	800f2a6 <USBH_ParseCfgDesc+0x144>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	885a      	ldrh	r2, [r3, #2]
 800f2a0:	8afb      	ldrh	r3, [r7, #22]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d8a0      	bhi.n	800f1e8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 800f2a6:	bf00      	nop
 800f2a8:	3728      	adds	r7, #40	; 0x28
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	b083      	sub	sp, #12
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	781a      	ldrb	r2, [r3, #0]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	785a      	ldrb	r2, [r3, #1]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	789a      	ldrb	r2, [r3, #2]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	78da      	ldrb	r2, [r3, #3]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	791a      	ldrb	r2, [r3, #4]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	795a      	ldrb	r2, [r3, #5]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	799a      	ldrb	r2, [r3, #6]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	79da      	ldrb	r2, [r3, #7]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	7a1a      	ldrb	r2, [r3, #8]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	721a      	strb	r2, [r3, #8]
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	781a      	ldrb	r2, [r3, #0]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	785a      	ldrb	r2, [r3, #1]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	789a      	ldrb	r2, [r3, #2]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	78da      	ldrb	r2, [r3, #3]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	3304      	adds	r3, #4
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	3305      	adds	r3, #5
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	b29b      	uxth	r3, r3
 800f346:	021b      	lsls	r3, r3, #8
 800f348:	b29b      	uxth	r3, r3
 800f34a:	4413      	add	r3, r2
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	799a      	ldrb	r2, [r3, #6]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	719a      	strb	r2, [r3, #6]
}
 800f35a:	bf00      	nop
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 800f366:	b480      	push	{r7}
 800f368:	b087      	sub	sp, #28
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	60f8      	str	r0, [r7, #12]
 800f36e:	60b9      	str	r1, [r7, #8]
 800f370:	4613      	mov	r3, r2
 800f372:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	3301      	adds	r3, #1
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	d120      	bne.n	800f3c0 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	1e9a      	subs	r2, r3, #2
 800f384:	88fb      	ldrh	r3, [r7, #6]
 800f386:	4293      	cmp	r3, r2
 800f388:	bfa8      	it	ge
 800f38a:	4613      	movge	r3, r2
 800f38c:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	3302      	adds	r3, #2
 800f392:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 800f394:	2300      	movs	r3, #0
 800f396:	82fb      	strh	r3, [r7, #22]
 800f398:	e00b      	b.n	800f3b2 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f39a:	8afb      	ldrh	r3, [r7, #22]
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	4413      	add	r3, r2
 800f3a0:	781a      	ldrb	r2, [r3, #0]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 800f3ac:	8afb      	ldrh	r3, [r7, #22]
 800f3ae:	3302      	adds	r3, #2
 800f3b0:	82fb      	strh	r3, [r7, #22]
 800f3b2:	8afa      	ldrh	r2, [r7, #22]
 800f3b4:	8abb      	ldrh	r3, [r7, #20]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d3ef      	bcc.n	800f39a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	701a      	strb	r2, [r3, #0]
  }
}
 800f3c0:	bf00      	nop
 800f3c2:	371c      	adds	r7, #28
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	881a      	ldrh	r2, [r3, #0]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4413      	add	r3, r2
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3714      	adds	r7, #20
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b086      	sub	sp, #24
 800f406:	af00      	add	r7, sp, #0
 800f408:	60f8      	str	r0, [r7, #12]
 800f40a:	60b9      	str	r1, [r7, #8]
 800f40c:	4613      	mov	r3, r2
 800f40e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f410:	2301      	movs	r3, #1
 800f412:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	789b      	ldrb	r3, [r3, #2]
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d002      	beq.n	800f422 <USBH_CtlReq+0x20>
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d017      	beq.n	800f450 <USBH_CtlReq+0x4e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 800f420:	e030      	b.n	800f484 <USBH_CtlReq+0x82>
    phost->Control.buff = buff; 
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	88fa      	ldrh	r2, [r7, #6]
 800f42c:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2201      	movs	r2, #1
 800f432:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2202      	movs	r2, #2
 800f438:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800f43a:	2301      	movs	r3, #1
 800f43c:	75fb      	strb	r3, [r7, #23]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f444:	2200      	movs	r2, #0
 800f446:	2103      	movs	r1, #3
 800f448:	4618      	mov	r0, r3
 800f44a:	f7fc ffe7 	bl	800c41c <osMessagePut>
    break;
 800f44e:	e019      	b.n	800f484 <USBH_CtlReq+0x82>
    status = USBH_HandleControl(phost);
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f000 f81d 	bl	800f490 <USBH_HandleControl>
 800f456:	4603      	mov	r3, r0
 800f458:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 800f45a:	7dfb      	ldrb	r3, [r7, #23]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d108      	bne.n	800f472 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2201      	movs	r2, #1
 800f464:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 800f46c:	2300      	movs	r3, #0
 800f46e:	75fb      	strb	r3, [r7, #23]
    break;
 800f470:	e007      	b.n	800f482 <USBH_CtlReq+0x80>
    else if  (status == USBH_FAIL)
 800f472:	7dfb      	ldrb	r3, [r7, #23]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d104      	bne.n	800f482 <USBH_CtlReq+0x80>
      phost->RequestState = CMD_SEND;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2201      	movs	r2, #1
 800f47c:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 800f47e:	2302      	movs	r3, #2
 800f480:	75fb      	strb	r3, [r7, #23]
    break;
 800f482:	bf00      	nop
  }
  return status;
 800f484:	7dfb      	ldrb	r3, [r7, #23]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
	...

0800f490 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af02      	add	r7, sp, #8
 800f496:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 800f498:	2301      	movs	r3, #1
 800f49a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f49c:	2300      	movs	r3, #0
 800f49e:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	7e1b      	ldrb	r3, [r3, #24]
 800f4a4:	3b01      	subs	r3, #1
 800f4a6:	2b0a      	cmp	r3, #10
 800f4a8:	f200 81c1 	bhi.w	800f82e <USBH_HandleControl+0x39e>
 800f4ac:	a201      	add	r2, pc, #4	; (adr r2, 800f4b4 <USBH_HandleControl+0x24>)
 800f4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b2:	bf00      	nop
 800f4b4:	0800f4e1 	.word	0x0800f4e1
 800f4b8:	0800f4fb 	.word	0x0800f4fb
 800f4bc:	0800f57f 	.word	0x0800f57f
 800f4c0:	0800f5a5 	.word	0x0800f5a5
 800f4c4:	0800f60d 	.word	0x0800f60d
 800f4c8:	0800f639 	.word	0x0800f639
 800f4cc:	0800f6cb 	.word	0x0800f6cb
 800f4d0:	0800f6ed 	.word	0x0800f6ed
 800f4d4:	0800f759 	.word	0x0800f759
 800f4d8:	0800f781 	.word	0x0800f781
 800f4dc:	0800f7ef 	.word	0x0800f7ef
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	795b      	ldrb	r3, [r3, #5]
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 f9af 	bl	800f850 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	761a      	strb	r2, [r3, #24]
    break; 
 800f4f8:	e1a4      	b.n	800f844 <USBH_HandleControl+0x3b4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	795b      	ldrb	r3, [r3, #5]
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f004 fbd5 	bl	8013cb0 <USBH_LL_GetURBState>
 800f506:	4603      	mov	r3, r0
 800f508:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d126      	bne.n	800f55e <USBH_HandleControl+0xce>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	7c1b      	ldrb	r3, [r3, #16]
 800f514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f518:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8adb      	ldrh	r3, [r3, #22]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d00a      	beq.n	800f538 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 800f522:	7b7b      	ldrb	r3, [r7, #13]
 800f524:	2b80      	cmp	r3, #128	; 0x80
 800f526:	d103      	bne.n	800f530 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2203      	movs	r2, #3
 800f52c:	761a      	strb	r2, [r3, #24]
 800f52e:	e00d      	b.n	800f54c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2205      	movs	r2, #5
 800f534:	761a      	strb	r2, [r3, #24]
 800f536:	e009      	b.n	800f54c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800f538:	7b7b      	ldrb	r3, [r7, #13]
 800f53a:	2b80      	cmp	r3, #128	; 0x80
 800f53c:	d103      	bne.n	800f546 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2209      	movs	r2, #9
 800f542:	761a      	strb	r2, [r3, #24]
 800f544:	e002      	b.n	800f54c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2207      	movs	r2, #7
 800f54a:	761a      	strb	r2, [r3, #24]
        } 
      }          
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f552:	2200      	movs	r2, #0
 800f554:	2103      	movs	r1, #3
 800f556:	4618      	mov	r0, r3
 800f558:	f7fc ff60 	bl	800c41c <osMessagePut>
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 800f55c:	e169      	b.n	800f832 <USBH_HandleControl+0x3a2>
    else if(URB_Status == USBH_URB_ERROR)
 800f55e:	7bbb      	ldrb	r3, [r7, #14]
 800f560:	2b04      	cmp	r3, #4
 800f562:	f040 8166 	bne.w	800f832 <USBH_HandleControl+0x3a2>
      phost->Control.state = CTRL_ERROR;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	220b      	movs	r2, #11
 800f56a:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f572:	2200      	movs	r2, #0
 800f574:	2103      	movs	r1, #3
 800f576:	4618      	mov	r0, r3
 800f578:	f7fc ff50 	bl	800c41c <osMessagePut>
    break;
 800f57c:	e159      	b.n	800f832 <USBH_HandleControl+0x3a2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f584:	b29a      	uxth	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6899      	ldr	r1, [r3, #8]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	899a      	ldrh	r2, [r3, #12]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	791b      	ldrb	r3, [r3, #4]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f999 	bl	800f8ce <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2204      	movs	r2, #4
 800f5a0:	761a      	strb	r2, [r3, #24]
    break;    
 800f5a2:	e14f      	b.n	800f844 <USBH_HandleControl+0x3b4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	791b      	ldrb	r3, [r3, #4]
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f004 fb80 	bl	8013cb0 <USBH_LL_GetURBState>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800f5b4:	7bbb      	ldrb	r3, [r7, #14]
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d10a      	bne.n	800f5d0 <USBH_HandleControl+0x140>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2209      	movs	r2, #9
 800f5be:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	2103      	movs	r1, #3
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fc ff26 	bl	800c41c <osMessagePut>
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 800f5d0:	7bbb      	ldrb	r3, [r7, #14]
 800f5d2:	2b05      	cmp	r3, #5
 800f5d4:	d10a      	bne.n	800f5ec <USBH_HandleControl+0x15c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	2103      	movs	r1, #3
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fc ff19 	bl	800c41c <osMessagePut>
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800f5ea:	e124      	b.n	800f836 <USBH_HandleControl+0x3a6>
    else if (URB_Status == USBH_URB_ERROR)
 800f5ec:	7bbb      	ldrb	r3, [r7, #14]
 800f5ee:	2b04      	cmp	r3, #4
 800f5f0:	f040 8121 	bne.w	800f836 <USBH_HandleControl+0x3a6>
      phost->Control.state = CTRL_ERROR;  
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	220b      	movs	r2, #11
 800f5f8:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f600:	2200      	movs	r2, #0
 800f602:	2103      	movs	r1, #3
 800f604:	4618      	mov	r0, r3
 800f606:	f7fc ff09 	bl	800c41c <osMessagePut>
    break;
 800f60a:	e114      	b.n	800f836 <USBH_HandleControl+0x3a6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6899      	ldr	r1, [r3, #8]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	899a      	ldrh	r2, [r3, #12]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	7958      	ldrb	r0, [r3, #5]
 800f618:	2301      	movs	r3, #1
 800f61a:	9300      	str	r3, [sp, #0]
 800f61c:	4603      	mov	r3, r0
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 f930 	bl	800f884 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2206      	movs	r2, #6
 800f634:	761a      	strb	r2, [r3, #24]
    break;
 800f636:	e105      	b.n	800f844 <USBH_HandleControl+0x3b4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	795b      	ldrb	r3, [r3, #5]
 800f63c:	4619      	mov	r1, r3
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f004 fb36 	bl	8013cb0 <USBH_LL_GetURBState>
 800f644:	4603      	mov	r3, r0
 800f646:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d10b      	bne.n	800f666 <USBH_HandleControl+0x1d6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2207      	movs	r2, #7
 800f652:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f65a:	2200      	movs	r2, #0
 800f65c:	2103      	movs	r1, #3
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fc fedc 	bl	800c41c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 800f664:	e0e9      	b.n	800f83a <USBH_HandleControl+0x3aa>
    else if  (URB_Status == USBH_URB_STALL) 
 800f666:	7bbb      	ldrb	r3, [r7, #14]
 800f668:	2b05      	cmp	r3, #5
 800f66a:	d10d      	bne.n	800f688 <USBH_HandleControl+0x1f8>
      phost->Control.state = CTRL_STALLED; 
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	220c      	movs	r2, #12
 800f670:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800f672:	2303      	movs	r3, #3
 800f674:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f67c:	2200      	movs	r2, #0
 800f67e:	2103      	movs	r1, #3
 800f680:	4618      	mov	r0, r3
 800f682:	f7fc fecb 	bl	800c41c <osMessagePut>
    break;
 800f686:	e0d8      	b.n	800f83a <USBH_HandleControl+0x3aa>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800f688:	7bbb      	ldrb	r3, [r7, #14]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d10b      	bne.n	800f6a6 <USBH_HandleControl+0x216>
      phost->Control.state = CTRL_DATA_OUT;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2205      	movs	r2, #5
 800f692:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f69a:	2200      	movs	r2, #0
 800f69c:	2103      	movs	r1, #3
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fc febc 	bl	800c41c <osMessagePut>
    break;
 800f6a4:	e0c9      	b.n	800f83a <USBH_HandleControl+0x3aa>
    else if (URB_Status == USBH_URB_ERROR)
 800f6a6:	7bbb      	ldrb	r3, [r7, #14]
 800f6a8:	2b04      	cmp	r3, #4
 800f6aa:	f040 80c6 	bne.w	800f83a <USBH_HandleControl+0x3aa>
      phost->Control.state = CTRL_ERROR;  
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	220b      	movs	r2, #11
 800f6b2:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 800f6b4:	2302      	movs	r3, #2
 800f6b6:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f6be:	2200      	movs	r2, #0
 800f6c0:	2103      	movs	r1, #3
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fc feaa 	bl	800c41c <osMessagePut>
    break;
 800f6c8:	e0b7      	b.n	800f83a <USBH_HandleControl+0x3aa>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	791b      	ldrb	r3, [r3, #4]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f8fb 	bl	800f8ce <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2208      	movs	r2, #8
 800f6e8:	761a      	strb	r2, [r3, #24]
    
    break;
 800f6ea:	e0ab      	b.n	800f844 <USBH_HandleControl+0x3b4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	791b      	ldrb	r3, [r3, #4]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f004 fadc 	bl	8013cb0 <USBH_LL_GetURBState>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 800f6fc:	7bbb      	ldrb	r3, [r7, #14]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d10d      	bne.n	800f71e <USBH_HandleControl+0x28e>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	220d      	movs	r2, #13
 800f706:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800f708:	2300      	movs	r3, #0
 800f70a:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f712:	2200      	movs	r2, #0
 800f714:	2103      	movs	r1, #3
 800f716:	4618      	mov	r0, r3
 800f718:	f7fc fe80 	bl	800c41c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800f71c:	e08f      	b.n	800f83e <USBH_HandleControl+0x3ae>
    else if (URB_Status == USBH_URB_ERROR)
 800f71e:	7bbb      	ldrb	r3, [r7, #14]
 800f720:	2b04      	cmp	r3, #4
 800f722:	d10b      	bne.n	800f73c <USBH_HandleControl+0x2ac>
      phost->Control.state = CTRL_ERROR;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	220b      	movs	r2, #11
 800f728:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f730:	2200      	movs	r2, #0
 800f732:	2103      	movs	r1, #3
 800f734:	4618      	mov	r0, r3
 800f736:	f7fc fe71 	bl	800c41c <osMessagePut>
    break;
 800f73a:	e080      	b.n	800f83e <USBH_HandleControl+0x3ae>
     else if(URB_Status == USBH_URB_STALL)
 800f73c:	7bbb      	ldrb	r3, [r7, #14]
 800f73e:	2b05      	cmp	r3, #5
 800f740:	d17d      	bne.n	800f83e <USBH_HandleControl+0x3ae>
      status = USBH_NOT_SUPPORTED;
 800f742:	2303      	movs	r3, #3
 800f744:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f74c:	2200      	movs	r2, #0
 800f74e:	2103      	movs	r1, #3
 800f750:	4618      	mov	r0, r3
 800f752:	f7fc fe63 	bl	800c41c <osMessagePut>
    break;
 800f756:	e072      	b.n	800f83e <USBH_HandleControl+0x3ae>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	795a      	ldrb	r2, [r3, #5]
 800f75c:	2301      	movs	r3, #1
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	4613      	mov	r3, r2
 800f762:	2200      	movs	r2, #0
 800f764:	2100      	movs	r1, #0
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 f88c 	bl	800f884 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f772:	b29a      	uxth	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	220a      	movs	r2, #10
 800f77c:	761a      	strb	r2, [r3, #24]
    break;
 800f77e:	e061      	b.n	800f844 <USBH_HandleControl+0x3b4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	795b      	ldrb	r3, [r3, #5]
 800f784:	4619      	mov	r1, r3
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f004 fa92 	bl	8013cb0 <USBH_LL_GetURBState>
 800f78c:	4603      	mov	r3, r0
 800f78e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800f790:	7bbb      	ldrb	r3, [r7, #14]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d10d      	bne.n	800f7b2 <USBH_HandleControl+0x322>
    { 
      status = USBH_OK;      
 800f796:	2300      	movs	r3, #0
 800f798:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	220d      	movs	r2, #13
 800f79e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	2103      	movs	r1, #3
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fc fe36 	bl	800c41c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800f7b0:	e047      	b.n	800f842 <USBH_HandleControl+0x3b2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800f7b2:	7bbb      	ldrb	r3, [r7, #14]
 800f7b4:	2b02      	cmp	r3, #2
 800f7b6:	d10b      	bne.n	800f7d0 <USBH_HandleControl+0x340>
      phost->Control.state = CTRL_STATUS_OUT;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2209      	movs	r2, #9
 800f7bc:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	2103      	movs	r1, #3
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fc fe27 	bl	800c41c <osMessagePut>
    break;
 800f7ce:	e038      	b.n	800f842 <USBH_HandleControl+0x3b2>
    else if (URB_Status == USBH_URB_ERROR)
 800f7d0:	7bbb      	ldrb	r3, [r7, #14]
 800f7d2:	2b04      	cmp	r3, #4
 800f7d4:	d135      	bne.n	800f842 <USBH_HandleControl+0x3b2>
      phost->Control.state = CTRL_ERROR; 
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	220b      	movs	r2, #11
 800f7da:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2103      	movs	r1, #3
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fc fe18 	bl	800c41c <osMessagePut>
    break;
 800f7ec:	e029      	b.n	800f842 <USBH_HandleControl+0x3b2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	7e5b      	ldrb	r3, [r3, #25]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	765a      	strb	r2, [r3, #25]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	7e5b      	ldrb	r3, [r3, #25]
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	d809      	bhi.n	800f816 <USBH_HandleControl+0x386>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f004 f8f2 	bl	80139ec <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2201      	movs	r2, #1
 800f812:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800f814:	e016      	b.n	800f844 <USBH_HandleControl+0x3b4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f81c:	2106      	movs	r1, #6
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	4798      	blx	r3
      phost->Control.errorcount = 0;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800f828:	2302      	movs	r3, #2
 800f82a:	73fb      	strb	r3, [r7, #15]
    break;
 800f82c:	e00a      	b.n	800f844 <USBH_HandleControl+0x3b4>
    
  default:
    break;
 800f82e:	bf00      	nop
 800f830:	e008      	b.n	800f844 <USBH_HandleControl+0x3b4>
    break;
 800f832:	bf00      	nop
 800f834:	e006      	b.n	800f844 <USBH_HandleControl+0x3b4>
    break;
 800f836:	bf00      	nop
 800f838:	e004      	b.n	800f844 <USBH_HandleControl+0x3b4>
    break;
 800f83a:	bf00      	nop
 800f83c:	e002      	b.n	800f844 <USBH_HandleControl+0x3b4>
    break;
 800f83e:	bf00      	nop
 800f840:	e000      	b.n	800f844 <USBH_HandleControl+0x3b4>
    break;
 800f842:	bf00      	nop
  }
  return status;
 800f844:	7bfb      	ldrb	r3, [r7, #15]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop

0800f850 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b088      	sub	sp, #32
 800f854:	af04      	add	r7, sp, #16
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	4613      	mov	r3, r2
 800f85c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f85e:	79f9      	ldrb	r1, [r7, #7]
 800f860:	2300      	movs	r3, #0
 800f862:	9303      	str	r3, [sp, #12]
 800f864:	2308      	movs	r3, #8
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	9301      	str	r3, [sp, #4]
 800f86c:	2300      	movs	r3, #0
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	2300      	movs	r3, #0
 800f872:	2200      	movs	r2, #0
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f004 f9d3 	bl	8013c20 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 800f87a:	2300      	movs	r3, #0
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3710      	adds	r7, #16
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af04      	add	r7, sp, #16
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	4611      	mov	r1, r2
 800f890:	461a      	mov	r2, r3
 800f892:	460b      	mov	r3, r1
 800f894:	80fb      	strh	r3, [r7, #6]
 800f896:	4613      	mov	r3, r2
 800f898:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d001      	beq.n	800f8a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f8a8:	7979      	ldrb	r1, [r7, #5]
 800f8aa:	7e3b      	ldrb	r3, [r7, #24]
 800f8ac:	9303      	str	r3, [sp, #12]
 800f8ae:	88fb      	ldrh	r3, [r7, #6]
 800f8b0:	9302      	str	r3, [sp, #8]
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	2200      	movs	r2, #0
 800f8be:	68f8      	ldr	r0, [r7, #12]
 800f8c0:	f004 f9ae 	bl	8013c20 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b088      	sub	sp, #32
 800f8d2:	af04      	add	r7, sp, #16
 800f8d4:	60f8      	str	r0, [r7, #12]
 800f8d6:	60b9      	str	r1, [r7, #8]
 800f8d8:	4611      	mov	r1, r2
 800f8da:	461a      	mov	r2, r3
 800f8dc:	460b      	mov	r3, r1
 800f8de:	80fb      	strh	r3, [r7, #6]
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f8e4:	7979      	ldrb	r1, [r7, #5]
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	9303      	str	r3, [sp, #12]
 800f8ea:	88fb      	ldrh	r3, [r7, #6]
 800f8ec:	9302      	str	r3, [sp, #8]
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	9301      	str	r3, [sp, #4]
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f004 f990 	bl	8013c20 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 800f900:	2300      	movs	r3, #0
  
}
 800f902:	4618      	mov	r0, r3
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b088      	sub	sp, #32
 800f90e:	af04      	add	r7, sp, #16
 800f910:	60f8      	str	r0, [r7, #12]
 800f912:	60b9      	str	r1, [r7, #8]
 800f914:	4611      	mov	r1, r2
 800f916:	461a      	mov	r2, r3
 800f918:	460b      	mov	r3, r1
 800f91a:	80fb      	strh	r3, [r7, #6]
 800f91c:	4613      	mov	r3, r2
 800f91e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <USBH_BulkSendData+0x24>
  {
    do_ping = 0;
 800f92a:	2300      	movs	r3, #0
 800f92c:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f92e:	7979      	ldrb	r1, [r7, #5]
 800f930:	7e3b      	ldrb	r3, [r7, #24]
 800f932:	9303      	str	r3, [sp, #12]
 800f934:	88fb      	ldrh	r3, [r7, #6]
 800f936:	9302      	str	r3, [sp, #8]
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	9301      	str	r3, [sp, #4]
 800f93c:	2301      	movs	r3, #1
 800f93e:	9300      	str	r3, [sp, #0]
 800f940:	2302      	movs	r3, #2
 800f942:	2200      	movs	r2, #0
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f004 f96b 	bl	8013c20 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3710      	adds	r7, #16
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b088      	sub	sp, #32
 800f958:	af04      	add	r7, sp, #16
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	4611      	mov	r1, r2
 800f960:	461a      	mov	r2, r3
 800f962:	460b      	mov	r3, r1
 800f964:	80fb      	strh	r3, [r7, #6]
 800f966:	4613      	mov	r3, r2
 800f968:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f96a:	7979      	ldrb	r1, [r7, #5]
 800f96c:	2300      	movs	r3, #0
 800f96e:	9303      	str	r3, [sp, #12]
 800f970:	88fb      	ldrh	r3, [r7, #6]
 800f972:	9302      	str	r3, [sp, #8]
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	2301      	movs	r3, #1
 800f97a:	9300      	str	r3, [sp, #0]
 800f97c:	2302      	movs	r3, #2
 800f97e:	2201      	movs	r2, #1
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f004 f94d 	bl	8013c20 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
 800f986:	2300      	movs	r3, #0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af04      	add	r7, sp, #16
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	4608      	mov	r0, r1
 800f99a:	4611      	mov	r1, r2
 800f99c:	461a      	mov	r2, r3
 800f99e:	4603      	mov	r3, r0
 800f9a0:	70fb      	strb	r3, [r7, #3]
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	70bb      	strb	r3, [r7, #2]
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800f9aa:	7878      	ldrb	r0, [r7, #1]
 800f9ac:	78ba      	ldrb	r2, [r7, #2]
 800f9ae:	78f9      	ldrb	r1, [r7, #3]
 800f9b0:	8b3b      	ldrh	r3, [r7, #24]
 800f9b2:	9302      	str	r3, [sp, #8]
 800f9b4:	7d3b      	ldrb	r3, [r7, #20]
 800f9b6:	9301      	str	r3, [sp, #4]
 800f9b8:	7c3b      	ldrb	r3, [r7, #16]
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	4603      	mov	r3, r0
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f004 f8b2 	bl	8013b28 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 800f9c4:	2300      	movs	r3, #0

}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800f9ce:	b580      	push	{r7, lr}
 800f9d0:	b082      	sub	sp, #8
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800f9da:	78fb      	ldrb	r3, [r7, #3]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f004 f8e8 	bl	8013bb4 <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 800f9e4:	2300      	movs	r3, #0

}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b084      	sub	sp, #16
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 f836 	bl	800fa6c <USBH_GetFreePipe>
 800fa00:	4603      	mov	r3, r0
 800fa02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 800fa04:	89fb      	ldrh	r3, [r7, #14]
 800fa06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d009      	beq.n	800fa22 <USBH_AllocPipe+0x34>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800fa0e:	89fb      	ldrh	r3, [r7, #14]
 800fa10:	78fa      	ldrb	r2, [r7, #3]
 800fa12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa16:	4611      	mov	r1, r2
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	33de      	adds	r3, #222	; 0xde
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	4413      	add	r3, r2
 800fa20:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 800fa22:	89fb      	ldrh	r3, [r7, #14]
 800fa24:	b2db      	uxtb	r3, r3
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fa2e:	b480      	push	{r7}
 800fa30:	b083      	sub	sp, #12
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
 800fa36:	460b      	mov	r3, r1
 800fa38:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 800fa3a:	78fb      	ldrb	r3, [r7, #3]
 800fa3c:	2b0a      	cmp	r3, #10
 800fa3e:	d80e      	bhi.n	800fa5e <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 800fa40:	78f8      	ldrb	r0, [r7, #3]
 800fa42:	78fb      	ldrb	r3, [r7, #3]
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	33de      	adds	r3, #222	; 0xde
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4413      	add	r3, r2
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800fa52:	6879      	ldr	r1, [r7, #4]
 800fa54:	f100 03de 	add.w	r3, r0, #222	; 0xde
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	440b      	add	r3, r1
 800fa5c:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 800fa78:	2300      	movs	r3, #0
 800fa7a:	73fb      	strb	r3, [r7, #15]
 800fa7c:	e00f      	b.n	800fa9e <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800fa7e:	7bfb      	ldrb	r3, [r7, #15]
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	33de      	adds	r3, #222	; 0xde
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4413      	add	r3, r2
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d102      	bne.n	800fa98 <USBH_GetFreePipe+0x2c>
	{
	   return idx;
 800fa92:	7bfb      	ldrb	r3, [r7, #15]
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	e007      	b.n	800faa8 <USBH_GetFreePipe+0x3c>
  for (idx = 0 ; idx < 11 ; idx++)
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	73fb      	strb	r3, [r7, #15]
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
 800faa0:	2b0a      	cmp	r3, #10
 800faa2:	d9ec      	bls.n	800fa7e <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800faa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{	 
 800fab4:	b590      	push	{r4, r7, lr}
 800fab6:	b089      	sub	sp, #36	; 0x24
 800fab8:	af04      	add	r7, sp, #16
 800faba:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0; 
 800fabc:	2300      	movs	r3, #0
 800fabe:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800fac0:	2302      	movs	r3, #2
 800fac2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800faca:	7919      	ldrb	r1, [r3, #4]
 800facc:	2350      	movs	r3, #80	; 0x50
 800face:	2206      	movs	r2, #6
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7fe fdf5 	bl	800e6c0 <USBH_FindInterface>
 800fad6:	4603      	mov	r3, r0
 800fad8:	73bb      	strb	r3, [r7, #14]
  
  if(interface == 0xFF) /* Not Valid Interface */
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	2bff      	cmp	r3, #255	; 0xff
 800fade:	d102      	bne.n	800fae6 <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;      
 800fae0:	2302      	movs	r3, #2
 800fae2:	73fb      	strb	r3, [r7, #15]
 800fae4:	e10b      	b.n	800fcfe <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800fae6:	7bbb      	ldrb	r3, [r7, #14]
 800fae8:	4619      	mov	r1, r3
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7fe fdcc 	bl	800e688 <USBH_SelectInterface>
    
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 4374 	ldr.w	r4, [r3, #884]	; 0x374
 800faf6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fafa:	f004 f9cb 	bl	8013e94 <malloc>
 800fafe:	4603      	mov	r3, r0
 800fb00:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fb08:	69db      	ldr	r3, [r3, #28]
 800fb0a:	60bb      	str	r3, [r7, #8]
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fb12:	4619      	mov	r1, r3
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	231a      	movs	r3, #26
 800fb18:	fb03 f301 	mul.w	r3, r3, r1
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	b25b      	sxtb	r3, r3
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	da1c      	bge.n	800fb64 <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fb30:	4619      	mov	r1, r3
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	231a      	movs	r3, #26
 800fb36:	fb03 f301 	mul.w	r3, r3, r1
 800fb3a:	4413      	add	r3, r2
 800fb3c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fb40:	781a      	ldrb	r2, [r3, #0]
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	231a      	movs	r3, #26
 800fb52:	fb03 f301 	mul.w	r3, r3, r1
 800fb56:	4413      	add	r3, r2
 800fb58:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fb5c:	881a      	ldrh	r2, [r3, #0]
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	815a      	strh	r2, [r3, #10]
 800fb62:	e01b      	b.n	800fb9c <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	231a      	movs	r3, #26
 800fb70:	fb03 f301 	mul.w	r3, r3, r1
 800fb74:	4413      	add	r3, r2
 800fb76:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fb7a:	781a      	ldrb	r2, [r3, #0]
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fb86:	4619      	mov	r1, r3
 800fb88:	687a      	ldr	r2, [r7, #4]
 800fb8a:	231a      	movs	r3, #26
 800fb8c:	fb03 f301 	mul.w	r3, r3, r1
 800fb90:	4413      	add	r3, r2
 800fb92:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fb96:	881a      	ldrh	r2, [r3, #0]
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	811a      	strh	r2, [r3, #8]
    }
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fba2:	4619      	mov	r1, r3
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	231a      	movs	r3, #26
 800fba8:	fb03 f301 	mul.w	r3, r3, r1
 800fbac:	4413      	add	r3, r2
 800fbae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	b25b      	sxtb	r3, r3
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	da1c      	bge.n	800fbf4 <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	231a      	movs	r3, #26
 800fbc6:	fb03 f301 	mul.w	r3, r3, r1
 800fbca:	4413      	add	r3, r2
 800fbcc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fbd0:	781a      	ldrb	r2, [r3, #0]
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fbdc:	4619      	mov	r1, r3
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	231a      	movs	r3, #26
 800fbe2:	fb03 f301 	mul.w	r3, r3, r1
 800fbe6:	4413      	add	r3, r2
 800fbe8:	f203 3352 	addw	r3, r3, #850	; 0x352
 800fbec:	881a      	ldrh	r2, [r3, #0]
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	815a      	strh	r2, [r3, #10]
 800fbf2:	e01b      	b.n	800fc2c <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	231a      	movs	r3, #26
 800fc00:	fb03 f301 	mul.w	r3, r3, r1
 800fc04:	4413      	add	r3, r2
 800fc06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fc0a:	781a      	ldrb	r2, [r3, #0]
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fc16:	4619      	mov	r1, r3
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	231a      	movs	r3, #26
 800fc1c:	fb03 f301 	mul.w	r3, r3, r1
 800fc20:	4413      	add	r3, r2
 800fc22:	f203 3352 	addw	r3, r3, #850	; 0x352
 800fc26:	881a      	ldrh	r2, [r3, #0]
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	811a      	strh	r2, [r3, #8]
    }
    
    MSC_Handle->current_lun = 0;
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	2200      	movs	r2, #0
 800fc46:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	799b      	ldrb	r3, [r3, #6]
 800fc52:	4619      	mov	r1, r3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f7ff feca 	bl	800f9ee <USBH_AllocPipe>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	79db      	ldrb	r3, [r3, #7]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff fec0 	bl	800f9ee <USBH_AllocPipe>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	461a      	mov	r2, r3
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 fbd0 	bl	801041c <USBH_MSC_BOT_Init>
    
    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	3390      	adds	r3, #144	; 0x90
 800fc80:	2268      	movs	r2, #104	; 0x68
 800fc82:	2100      	movs	r1, #0
 800fc84:	4618      	mov	r0, r3
 800fc86:	f004 f932 	bl	8013eee <memset>
    
    /* Open the new channels */
    USBH_OpenPipe  (phost,
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	7959      	ldrb	r1, [r3, #5]
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	7998      	ldrb	r0, [r3, #6]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	8912      	ldrh	r2, [r2, #8]
 800fca2:	9202      	str	r2, [sp, #8]
 800fca4:	2202      	movs	r2, #2
 800fca6:	9201      	str	r2, [sp, #4]
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	4623      	mov	r3, r4
 800fcac:	4602      	mov	r2, r0
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f7ff fe6e 	bl	800f990 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);  
    
    USBH_OpenPipe  (phost,
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	7919      	ldrb	r1, [r3, #4]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	79d8      	ldrb	r0, [r3, #7]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fcc8:	68ba      	ldr	r2, [r7, #8]
 800fcca:	8952      	ldrh	r2, [r2, #10]
 800fccc:	9202      	str	r2, [sp, #8]
 800fcce:	2202      	movs	r2, #2
 800fcd0:	9201      	str	r2, [sp, #4]
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	4623      	mov	r3, r4
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7ff fe59 	bl	800f990 <USBH_OpenPipe>
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);     
    
    
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	791b      	ldrb	r3, [r3, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f004 f803 	bl	8013cf2 <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	795b      	ldrb	r3, [r3, #5]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f003 fffc 	bl	8013cf2 <USBH_LL_SetToggle>
    status = USBH_OK; 
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800fcfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3714      	adds	r7, #20
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd90      	pop	{r4, r7, pc}

0800fd08 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fd16:	69db      	ldr	r3, [r3, #28]
 800fd18:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	795b      	ldrb	r3, [r3, #5]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00e      	beq.n	800fd40 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	795b      	ldrb	r3, [r3, #5]
 800fd26:	4619      	mov	r1, r3
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7ff fe50 	bl	800f9ce <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	795b      	ldrb	r3, [r3, #5]
 800fd32:	4619      	mov	r1, r3
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff fe7a 	bl	800fa2e <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	715a      	strb	r2, [r3, #5]
  }
  
  if ( MSC_Handle->InPipe)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	791b      	ldrb	r3, [r3, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00e      	beq.n	800fd66 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	791b      	ldrb	r3, [r3, #4]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7ff fe3d 	bl	800f9ce <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	791b      	ldrb	r3, [r3, #4]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f7ff fe67 	bl	800fa2e <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	711a      	strb	r2, [r3, #4]
  } 

  if(phost->pActiveClass->pData)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fd6c:	69db      	ldr	r3, [r3, #28]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00b      	beq.n	800fd8a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fd78:	69db      	ldr	r3, [r3, #28]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f004 f892 	bl	8013ea4 <free>
    phost->pActiveClass->pData = 0;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fd86:	2200      	movs	r2, #0
 800fd88:	61da      	str	r2, [r3, #28]
  }
  
  return USBH_OK;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{   
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fda2:	69db      	ldr	r3, [r3, #28]
 800fda4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800fda6:	2301      	movs	r3, #1
 800fda8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	7b9b      	ldrb	r3, [r3, #14]
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d004      	beq.n	800fdbc <USBH_MSC_ClassRequest+0x28>
 800fdb2:	2b03      	cmp	r3, #3
 800fdb4:	d039      	beq.n	800fe2a <USBH_MSC_ClassRequest+0x96>
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d000      	beq.n	800fdbc <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
    }    
    break;
    
  default:
    break;
 800fdba:	e045      	b.n	800fe48 <USBH_MSC_ClassRequest+0xb4>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f000 fb0d 	bl	80103e0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 800fdca:	7bfb      	ldrb	r3, [r7, #15]
 800fdcc:	2b03      	cmp	r3, #3
 800fdce:	d104      	bne.n	800fdda <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 800fdda:	7bfb      	ldrb	r3, [r7, #15]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d130      	bne.n	800fe42 <USBH_MSC_ClassRequest+0xae>
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	3301      	adds	r3, #1
 800fde8:	461a      	mov	r2, r3
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	601a      	str	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 800fdee:	2300      	movs	r3, #0
 800fdf0:	73bb      	strb	r3, [r7, #14]
 800fdf2:	e014      	b.n	800fe1e <USBH_MSC_ClassRequest+0x8a>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800fdf4:	7bbb      	ldrb	r3, [r7, #14]
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	2134      	movs	r1, #52	; 0x34
 800fdfa:	fb01 f303 	mul.w	r3, r1, r3
 800fdfe:	4413      	add	r3, r2
 800fe00:	3392      	adds	r3, #146	; 0x92
 800fe02:	2202      	movs	r2, #2
 800fe04:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0;
 800fe06:	7bbb      	ldrb	r3, [r7, #14]
 800fe08:	68ba      	ldr	r2, [r7, #8]
 800fe0a:	2134      	movs	r1, #52	; 0x34
 800fe0c:	fb01 f303 	mul.w	r3, r1, r3
 800fe10:	4413      	add	r3, r2
 800fe12:	33c1      	adds	r3, #193	; 0xc1
 800fe14:	2200      	movs	r2, #0
 800fe16:	701a      	strb	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 800fe18:	7bbb      	ldrb	r3, [r7, #14]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	73bb      	strb	r3, [r7, #14]
 800fe1e:	7bba      	ldrb	r2, [r7, #14]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d3e5      	bcc.n	800fdf4 <USBH_MSC_ClassRequest+0x60>
    break;
 800fe28:	e00b      	b.n	800fe42 <USBH_MSC_ClassRequest+0xae>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff f904 	bl	800f03a <USBH_ClrFeature>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d106      	bne.n	800fe46 <USBH_MSC_ClassRequest+0xb2>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	7bda      	ldrb	r2, [r3, #15]
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	739a      	strb	r2, [r3, #14]
    break;
 800fe40:	e001      	b.n	800fe46 <USBH_MSC_ClassRequest+0xb2>
    break;
 800fe42:	bf00      	nop
 800fe44:	e000      	b.n	800fe48 <USBH_MSC_ClassRequest+0xb4>
    break;
 800fe46:	bf00      	nop
  }
  
  return status; 
 800fe48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3710      	adds	r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
	...

0800fe54 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fe62:	69db      	ldr	r3, [r3, #28]
 800fe64:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800fe66:	2301      	movs	r3, #1
 800fe68:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	73bb      	strb	r3, [r7, #14]
  
  switch (MSC_Handle->state)
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	7b1b      	ldrb	r3, [r3, #12]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d003      	beq.n	800fe82 <USBH_MSC_Process+0x2e>
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	f000 8280 	beq.w	8010380 <USBH_MSC_Process+0x52c>
  case MSC_IDLE:
    error = USBH_OK;  
    break;
    
  default:
    break; 
 800fe80:	e281      	b.n	8010386 <USBH_MSC_Process+0x532>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800fe88:	461a      	mov	r2, r3
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	f080 8260 	bcs.w	8010354 <USBH_MSC_Process+0x500>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	2334      	movs	r3, #52	; 0x34
 800fea0:	fb03 f301 	mul.w	r3, r3, r1
 800fea4:	4413      	add	r3, r2
 800fea6:	3391      	adds	r3, #145	; 0x91
 800fea8:	2201      	movs	r2, #1
 800feaa:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800feb2:	4619      	mov	r1, r3
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	2334      	movs	r3, #52	; 0x34
 800feb8:	fb03 f301 	mul.w	r3, r3, r1
 800febc:	4413      	add	r3, r2
 800febe:	3390      	adds	r3, #144	; 0x90
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b08      	cmp	r3, #8
 800fec4:	f200 8234 	bhi.w	8010330 <USBH_MSC_Process+0x4dc>
 800fec8:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <USBH_MSC_Process+0x7c>)
 800feca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fece:	bf00      	nop
 800fed0:	0800fef5 	.word	0x0800fef5
 800fed4:	08010331 	.word	0x08010331
 800fed8:	0800ffbb 	.word	0x0800ffbb
 800fedc:	0801013f 	.word	0x0801013f
 800fee0:	0800ff19 	.word	0x0800ff19
 800fee4:	0801020b 	.word	0x0801020b
 800fee8:	08010331 	.word	0x08010331
 800feec:	08010331 	.word	0x08010331
 800fef0:	0801031f 	.word	0x0801031f
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800fefa:	4619      	mov	r1, r3
 800fefc:	693a      	ldr	r2, [r7, #16]
 800fefe:	2334      	movs	r3, #52	; 0x34
 800ff00:	fb03 f301 	mul.w	r3, r3, r1
 800ff04:	4413      	add	r3, r2
 800ff06:	3390      	adds	r3, #144	; 0x90
 800ff08:	2204      	movs	r2, #4
 800ff0a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ff1e:	b2d9      	uxtb	r1, r3
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ff26:	461a      	mov	r2, r3
 800ff28:	2334      	movs	r3, #52	; 0x34
 800ff2a:	fb03 f302 	mul.w	r3, r3, r2
 800ff2e:	3398      	adds	r3, #152	; 0x98
 800ff30:	693a      	ldr	r2, [r7, #16]
 800ff32:	4413      	add	r3, r2
 800ff34:	3307      	adds	r3, #7
 800ff36:	461a      	mov	r2, r3
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 fde2 	bl	8010b02 <USBH_MSC_SCSI_Inquiry>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d10b      	bne.n	800ff60 <USBH_MSC_Process+0x10c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ff4e:	4619      	mov	r1, r3
 800ff50:	693a      	ldr	r2, [r7, #16]
 800ff52:	2334      	movs	r3, #52	; 0x34
 800ff54:	fb03 f301 	mul.w	r3, r3, r1
 800ff58:	4413      	add	r3, r2
 800ff5a:	3390      	adds	r3, #144	; 0x90
 800ff5c:	2202      	movs	r2, #2
 800ff5e:	701a      	strb	r2, [r3, #0]
        if( scsi_status == USBH_FAIL)
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d10c      	bne.n	800ff80 <USBH_MSC_Process+0x12c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	693a      	ldr	r2, [r7, #16]
 800ff70:	2334      	movs	r3, #52	; 0x34
 800ff72:	fb03 f301 	mul.w	r3, r3, r1
 800ff76:	4413      	add	r3, r2
 800ff78:	3390      	adds	r3, #144	; 0x90
 800ff7a:	2205      	movs	r2, #5
 800ff7c:	701a      	strb	r2, [r3, #0]
        break;    
 800ff7e:	e1d9      	b.n	8010334 <USBH_MSC_Process+0x4e0>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 800ff80:	7bfb      	ldrb	r3, [r7, #15]
 800ff82:	2b04      	cmp	r3, #4
 800ff84:	f040 81d6 	bne.w	8010334 <USBH_MSC_Process+0x4e0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ff8e:	4619      	mov	r1, r3
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	2334      	movs	r3, #52	; 0x34
 800ff94:	fb03 f301 	mul.w	r3, r3, r1
 800ff98:	4413      	add	r3, r2
 800ff9a:	3390      	adds	r3, #144	; 0x90
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	693a      	ldr	r2, [r7, #16]
 800ffaa:	2334      	movs	r3, #52	; 0x34
 800ffac:	fb03 f301 	mul.w	r3, r3, r1
 800ffb0:	4413      	add	r3, r2
 800ffb2:	3391      	adds	r3, #145	; 0x91
 800ffb4:	2202      	movs	r2, #2
 800ffb6:	701a      	strb	r2, [r3, #0]
        break;    
 800ffb8:	e1bc      	b.n	8010334 <USBH_MSC_Process+0x4e0>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fcdd 	bl	8010984 <USBH_MSC_SCSI_TestUnitReady>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	73bb      	strb	r3, [r7, #14]
        if( ready_status == USBH_OK)
 800ffce:	7bbb      	ldrb	r3, [r7, #14]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d149      	bne.n	8010068 <USBH_MSC_Process+0x214>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ffda:	4619      	mov	r1, r3
 800ffdc:	693a      	ldr	r2, [r7, #16]
 800ffde:	2334      	movs	r3, #52	; 0x34
 800ffe0:	fb03 f301 	mul.w	r3, r3, r1
 800ffe4:	4413      	add	r3, r2
 800ffe6:	3392      	adds	r3, #146	; 0x92
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00c      	beq.n	8010008 <USBH_MSC_Process+0x1b4>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800fff4:	4619      	mov	r1, r3
 800fff6:	693a      	ldr	r2, [r7, #16]
 800fff8:	2334      	movs	r3, #52	; 0x34
 800fffa:	fb03 f301 	mul.w	r3, r3, r1
 800fffe:	4413      	add	r3, r2
 8010000:	33c1      	adds	r3, #193	; 0xc1
 8010002:	2201      	movs	r2, #1
 8010004:	701a      	strb	r2, [r3, #0]
 8010006:	e00b      	b.n	8010020 <USBH_MSC_Process+0x1cc>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801000e:	4619      	mov	r1, r3
 8010010:	693a      	ldr	r2, [r7, #16]
 8010012:	2334      	movs	r3, #52	; 0x34
 8010014:	fb03 f301 	mul.w	r3, r3, r1
 8010018:	4413      	add	r3, r2
 801001a:	33c1      	adds	r3, #193	; 0xc1
 801001c:	2200      	movs	r2, #0
 801001e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010026:	4619      	mov	r1, r3
 8010028:	693a      	ldr	r2, [r7, #16]
 801002a:	2334      	movs	r3, #52	; 0x34
 801002c:	fb03 f301 	mul.w	r3, r3, r1
 8010030:	4413      	add	r3, r2
 8010032:	3390      	adds	r3, #144	; 0x90
 8010034:	2203      	movs	r2, #3
 8010036:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801003e:	4619      	mov	r1, r3
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	2334      	movs	r3, #52	; 0x34
 8010044:	fb03 f301 	mul.w	r3, r3, r1
 8010048:	4413      	add	r3, r2
 801004a:	3391      	adds	r3, #145	; 0x91
 801004c:	2200      	movs	r2, #0
 801004e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010056:	4619      	mov	r1, r3
 8010058:	693a      	ldr	r2, [r7, #16]
 801005a:	2334      	movs	r3, #52	; 0x34
 801005c:	fb03 f301 	mul.w	r3, r3, r1
 8010060:	4413      	add	r3, r2
 8010062:	3392      	adds	r3, #146	; 0x92
 8010064:	2200      	movs	r2, #0
 8010066:	701a      	strb	r2, [r3, #0]
        if( ready_status == USBH_FAIL)
 8010068:	7bbb      	ldrb	r3, [r7, #14]
 801006a:	2b02      	cmp	r3, #2
 801006c:	d14a      	bne.n	8010104 <USBH_MSC_Process+0x2b0>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010074:	4619      	mov	r1, r3
 8010076:	693a      	ldr	r2, [r7, #16]
 8010078:	2334      	movs	r3, #52	; 0x34
 801007a:	fb03 f301 	mul.w	r3, r3, r1
 801007e:	4413      	add	r3, r2
 8010080:	3392      	adds	r3, #146	; 0x92
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	2b02      	cmp	r3, #2
 8010086:	d00c      	beq.n	80100a2 <USBH_MSC_Process+0x24e>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801008e:	4619      	mov	r1, r3
 8010090:	693a      	ldr	r2, [r7, #16]
 8010092:	2334      	movs	r3, #52	; 0x34
 8010094:	fb03 f301 	mul.w	r3, r3, r1
 8010098:	4413      	add	r3, r2
 801009a:	33c1      	adds	r3, #193	; 0xc1
 801009c:	2201      	movs	r2, #1
 801009e:	701a      	strb	r2, [r3, #0]
 80100a0:	e00b      	b.n	80100ba <USBH_MSC_Process+0x266>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80100a8:	4619      	mov	r1, r3
 80100aa:	693a      	ldr	r2, [r7, #16]
 80100ac:	2334      	movs	r3, #52	; 0x34
 80100ae:	fb03 f301 	mul.w	r3, r3, r1
 80100b2:	4413      	add	r3, r2
 80100b4:	33c1      	adds	r3, #193	; 0xc1
 80100b6:	2200      	movs	r2, #0
 80100b8:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80100c0:	4619      	mov	r1, r3
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	2334      	movs	r3, #52	; 0x34
 80100c6:	fb03 f301 	mul.w	r3, r3, r1
 80100ca:	4413      	add	r3, r2
 80100cc:	3390      	adds	r3, #144	; 0x90
 80100ce:	2205      	movs	r2, #5
 80100d0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80100d8:	4619      	mov	r1, r3
 80100da:	693a      	ldr	r2, [r7, #16]
 80100dc:	2334      	movs	r3, #52	; 0x34
 80100de:	fb03 f301 	mul.w	r3, r3, r1
 80100e2:	4413      	add	r3, r2
 80100e4:	3391      	adds	r3, #145	; 0x91
 80100e6:	2201      	movs	r2, #1
 80100e8:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80100f0:	4619      	mov	r1, r3
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	2334      	movs	r3, #52	; 0x34
 80100f6:	fb03 f301 	mul.w	r3, r3, r1
 80100fa:	4413      	add	r3, r2
 80100fc:	3392      	adds	r3, #146	; 0x92
 80100fe:	2202      	movs	r2, #2
 8010100:	701a      	strb	r2, [r3, #0]
        break;
 8010102:	e119      	b.n	8010338 <USBH_MSC_Process+0x4e4>
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8010104:	7bbb      	ldrb	r3, [r7, #14]
 8010106:	2b04      	cmp	r3, #4
 8010108:	f040 8116 	bne.w	8010338 <USBH_MSC_Process+0x4e4>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010112:	4619      	mov	r1, r3
 8010114:	693a      	ldr	r2, [r7, #16]
 8010116:	2334      	movs	r3, #52	; 0x34
 8010118:	fb03 f301 	mul.w	r3, r3, r1
 801011c:	4413      	add	r3, r2
 801011e:	3390      	adds	r3, #144	; 0x90
 8010120:	2201      	movs	r2, #1
 8010122:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801012a:	4619      	mov	r1, r3
 801012c:	693a      	ldr	r2, [r7, #16]
 801012e:	2334      	movs	r3, #52	; 0x34
 8010130:	fb03 f301 	mul.w	r3, r3, r1
 8010134:	4413      	add	r3, r2
 8010136:	3391      	adds	r3, #145	; 0x91
 8010138:	2202      	movs	r2, #2
 801013a:	701a      	strb	r2, [r3, #0]
        break;
 801013c:	e0fc      	b.n	8010338 <USBH_MSC_Process+0x4e4>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010144:	b2d9      	uxtb	r1, r3
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801014c:	461a      	mov	r2, r3
 801014e:	2334      	movs	r3, #52	; 0x34
 8010150:	fb03 f302 	mul.w	r3, r3, r2
 8010154:	3390      	adds	r3, #144	; 0x90
 8010156:	693a      	ldr	r2, [r7, #16]
 8010158:	4413      	add	r3, r2
 801015a:	3304      	adds	r3, #4
 801015c:	461a      	mov	r2, r3
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 fc53 	bl	8010a0a <USBH_MSC_SCSI_ReadCapacity>
 8010164:	4603      	mov	r3, r0
 8010166:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 8010168:	7bfb      	ldrb	r3, [r7, #15]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d120      	bne.n	80101b0 <USBH_MSC_Process+0x35c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010174:	4619      	mov	r1, r3
 8010176:	693a      	ldr	r2, [r7, #16]
 8010178:	2334      	movs	r3, #52	; 0x34
 801017a:	fb03 f301 	mul.w	r3, r3, r1
 801017e:	4413      	add	r3, r2
 8010180:	3390      	adds	r3, #144	; 0x90
 8010182:	2201      	movs	r2, #1
 8010184:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801018c:	4619      	mov	r1, r3
 801018e:	693a      	ldr	r2, [r7, #16]
 8010190:	2334      	movs	r3, #52	; 0x34
 8010192:	fb03 f301 	mul.w	r3, r3, r1
 8010196:	4413      	add	r3, r2
 8010198:	3391      	adds	r3, #145	; 0x91
 801019a:	2200      	movs	r2, #0
 801019c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101a4:	3301      	adds	r3, #1
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 80101ae:	e0c5      	b.n	801033c <USBH_MSC_Process+0x4e8>
        else if( scsi_status == USBH_FAIL)
 80101b0:	7bfb      	ldrb	r3, [r7, #15]
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	d10c      	bne.n	80101d0 <USBH_MSC_Process+0x37c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101bc:	4619      	mov	r1, r3
 80101be:	693a      	ldr	r2, [r7, #16]
 80101c0:	2334      	movs	r3, #52	; 0x34
 80101c2:	fb03 f301 	mul.w	r3, r3, r1
 80101c6:	4413      	add	r3, r2
 80101c8:	3390      	adds	r3, #144	; 0x90
 80101ca:	2205      	movs	r2, #5
 80101cc:	701a      	strb	r2, [r3, #0]
        break;
 80101ce:	e0b5      	b.n	801033c <USBH_MSC_Process+0x4e8>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80101d0:	7bfb      	ldrb	r3, [r7, #15]
 80101d2:	2b04      	cmp	r3, #4
 80101d4:	f040 80b2 	bne.w	801033c <USBH_MSC_Process+0x4e8>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101de:	4619      	mov	r1, r3
 80101e0:	693a      	ldr	r2, [r7, #16]
 80101e2:	2334      	movs	r3, #52	; 0x34
 80101e4:	fb03 f301 	mul.w	r3, r3, r1
 80101e8:	4413      	add	r3, r2
 80101ea:	3390      	adds	r3, #144	; 0x90
 80101ec:	2201      	movs	r2, #1
 80101ee:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101f6:	4619      	mov	r1, r3
 80101f8:	693a      	ldr	r2, [r7, #16]
 80101fa:	2334      	movs	r3, #52	; 0x34
 80101fc:	fb03 f301 	mul.w	r3, r3, r1
 8010200:	4413      	add	r3, r2
 8010202:	3391      	adds	r3, #145	; 0x91
 8010204:	2202      	movs	r2, #2
 8010206:	701a      	strb	r2, [r3, #0]
        break;
 8010208:	e098      	b.n	801033c <USBH_MSC_Process+0x4e8>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010210:	b2d9      	uxtb	r1, r3
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010218:	461a      	mov	r2, r3
 801021a:	2334      	movs	r3, #52	; 0x34
 801021c:	fb03 f302 	mul.w	r3, r3, r2
 8010220:	3398      	adds	r3, #152	; 0x98
 8010222:	693a      	ldr	r2, [r7, #16]
 8010224:	4413      	add	r3, r2
 8010226:	3304      	adds	r3, #4
 8010228:	461a      	mov	r2, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 fd0b 	bl	8010c46 <USBH_MSC_SCSI_RequestSense>
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8010234:	7bfb      	ldrb	r3, [r7, #15]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d145      	bne.n	80102c6 <USBH_MSC_Process+0x472>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010240:	4619      	mov	r1, r3
 8010242:	693a      	ldr	r2, [r7, #16]
 8010244:	2334      	movs	r3, #52	; 0x34
 8010246:	fb03 f301 	mul.w	r3, r3, r1
 801024a:	4413      	add	r3, r2
 801024c:	339c      	adds	r3, #156	; 0x9c
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	2b06      	cmp	r3, #6
 8010252:	d00c      	beq.n	801026e <USBH_MSC_Process+0x41a>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801025a:	4619      	mov	r1, r3
 801025c:	693a      	ldr	r2, [r7, #16]
 801025e:	2334      	movs	r3, #52	; 0x34
 8010260:	fb03 f301 	mul.w	r3, r3, r1
 8010264:	4413      	add	r3, r2
 8010266:	339c      	adds	r3, #156	; 0x9c
 8010268:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801026a:	2b02      	cmp	r3, #2
 801026c:	d117      	bne.n	801029e <USBH_MSC_Process+0x44a>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	f242 720f 	movw	r2, #9999	; 0x270f
 8010280:	4293      	cmp	r3, r2
 8010282:	d80c      	bhi.n	801029e <USBH_MSC_Process+0x44a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801028a:	4619      	mov	r1, r3
 801028c:	693a      	ldr	r2, [r7, #16]
 801028e:	2334      	movs	r3, #52	; 0x34
 8010290:	fb03 f301 	mul.w	r3, r3, r1
 8010294:	4413      	add	r3, r2
 8010296:	3390      	adds	r3, #144	; 0x90
 8010298:	2202      	movs	r2, #2
 801029a:	701a      	strb	r2, [r3, #0]
              break;
 801029c:	e051      	b.n	8010342 <USBH_MSC_Process+0x4ee>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102a4:	4619      	mov	r1, r3
 80102a6:	693a      	ldr	r2, [r7, #16]
 80102a8:	2334      	movs	r3, #52	; 0x34
 80102aa:	fb03 f301 	mul.w	r3, r3, r1
 80102ae:	4413      	add	r3, r2
 80102b0:	3390      	adds	r3, #144	; 0x90
 80102b2:	2201      	movs	r2, #1
 80102b4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102bc:	3301      	adds	r3, #1
 80102be:	b29a      	uxth	r2, r3
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if( scsi_status == USBH_FAIL)
 80102c6:	7bfb      	ldrb	r3, [r7, #15]
 80102c8:	2b02      	cmp	r3, #2
 80102ca:	d10c      	bne.n	80102e6 <USBH_MSC_Process+0x492>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102d2:	4619      	mov	r1, r3
 80102d4:	693a      	ldr	r2, [r7, #16]
 80102d6:	2334      	movs	r3, #52	; 0x34
 80102d8:	fb03 f301 	mul.w	r3, r3, r1
 80102dc:	4413      	add	r3, r2
 80102de:	3390      	adds	r3, #144	; 0x90
 80102e0:	2208      	movs	r2, #8
 80102e2:	701a      	strb	r2, [r3, #0]
        break;  
 80102e4:	e02c      	b.n	8010340 <USBH_MSC_Process+0x4ec>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80102e6:	7bfb      	ldrb	r3, [r7, #15]
 80102e8:	2b04      	cmp	r3, #4
 80102ea:	d129      	bne.n	8010340 <USBH_MSC_Process+0x4ec>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102f2:	4619      	mov	r1, r3
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	2334      	movs	r3, #52	; 0x34
 80102f8:	fb03 f301 	mul.w	r3, r3, r1
 80102fc:	4413      	add	r3, r2
 80102fe:	3390      	adds	r3, #144	; 0x90
 8010300:	2201      	movs	r2, #1
 8010302:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801030a:	4619      	mov	r1, r3
 801030c:	693a      	ldr	r2, [r7, #16]
 801030e:	2334      	movs	r3, #52	; 0x34
 8010310:	fb03 f301 	mul.w	r3, r3, r1
 8010314:	4413      	add	r3, r2
 8010316:	3391      	adds	r3, #145	; 0x91
 8010318:	2202      	movs	r2, #2
 801031a:	701a      	strb	r2, [r3, #0]
        break;  
 801031c:	e010      	b.n	8010340 <USBH_MSC_Process+0x4ec>
        MSC_Handle->current_lun++;
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010324:	3301      	adds	r3, #1
 8010326:	b29a      	uxth	r2, r3
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;  
 801032e:	e008      	b.n	8010342 <USBH_MSC_Process+0x4ee>
        break;
 8010330:	bf00      	nop
 8010332:	e006      	b.n	8010342 <USBH_MSC_Process+0x4ee>
        break;    
 8010334:	bf00      	nop
 8010336:	e004      	b.n	8010342 <USBH_MSC_Process+0x4ee>
        break;
 8010338:	bf00      	nop
 801033a:	e002      	b.n	8010342 <USBH_MSC_Process+0x4ee>
        break;
 801033c:	bf00      	nop
 801033e:	e000      	b.n	8010342 <USBH_MSC_Process+0x4ee>
        break;  
 8010340:	bf00      	nop
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010348:	2200      	movs	r2, #0
 801034a:	2104      	movs	r1, #4
 801034c:	4618      	mov	r0, r3
 801034e:	f7fc f865 	bl	800c41c <osMessagePut>
    break;
 8010352:	e018      	b.n	8010386 <USBH_MSC_Process+0x532>
      MSC_Handle->current_lun = 0;
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	2200      	movs	r2, #0
 8010358:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	2201      	movs	r2, #1
 8010360:	731a      	strb	r2, [r3, #12]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010368:	2200      	movs	r2, #0
 801036a:	2104      	movs	r1, #4
 801036c:	4618      	mov	r0, r3
 801036e:	f7fc f855 	bl	800c41c <osMessagePut>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010378:	2102      	movs	r1, #2
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	4798      	blx	r3
    break;
 801037e:	e002      	b.n	8010386 <USBH_MSC_Process+0x532>
    error = USBH_OK;  
 8010380:	2300      	movs	r3, #0
 8010382:	75fb      	strb	r3, [r7, #23]
    break;
 8010384:	bf00      	nop
  }
  return error;
 8010386:	7dfb      	ldrb	r3, [r7, #23]
}
 8010388:	4618      	mov	r0, r3
 801038a:	3718      	adds	r7, #24
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 8010398:	2300      	movs	r3, #0
}
 801039a:	4618      	mov	r0, r3
 801039c:	370c      	adds	r7, #12
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr

080103a6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b082      	sub	sp, #8
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2221      	movs	r2, #33	; 0x21
 80103b2:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	22ff      	movs	r2, #255	; 0xff
 80103b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;           
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2200      	movs	r2, #0
 80103ca:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 80103cc:	2200      	movs	r2, #0
 80103ce:	2100      	movs	r1, #0
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff f816 	bl	800f402 <USBH_CtlReq>
 80103d6:	4603      	mov	r3, r0
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	22a1      	movs	r2, #161	; 0xa1
 80103ee:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	22fe      	movs	r2, #254	; 0xfe
 80103f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1;           
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2201      	movs	r2, #1
 8010406:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 8010408:	2201      	movs	r2, #1
 801040a:	6839      	ldr	r1, [r7, #0]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7fe fff8 	bl	800f402 <USBH_CtlReq>
 8010412:	4603      	mov	r3, r0
}
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 801042a:	69db      	ldr	r3, [r3, #28]
 801042c:	60fb      	str	r3, [r7, #12]
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	4a09      	ldr	r2, [pc, #36]	; (8010458 <USBH_MSC_BOT_Init+0x3c>)
 8010432:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4a09      	ldr	r2, [pc, #36]	; (801045c <USBH_MSC_BOT_Init+0x40>)
 8010438:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2201      	movs	r2, #1
 801043e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2201      	movs	r2, #1
 8010446:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3714      	adds	r7, #20
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr
 8010458:	43425355 	.word	0x43425355
 801045c:	20304050 	.word	0x20304050

08010460 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b088      	sub	sp, #32
 8010464:	af02      	add	r7, sp, #8
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 801046c:	2301      	movs	r3, #1
 801046e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;  
 8010470:	2301      	movs	r3, #1
 8010472:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8010474:	2301      	movs	r3, #1
 8010476:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010478:	2300      	movs	r3, #0
 801047a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010482:	69db      	ldr	r3, [r3, #28]
 8010484:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0;
 8010486:	2300      	movs	r3, #0
 8010488:	73fb      	strb	r3, [r7, #15]
  
  switch (MSC_Handle->hbot.state)
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010490:	3b01      	subs	r3, #1
 8010492:	2b0a      	cmp	r3, #10
 8010494:	f200 81f1 	bhi.w	801087a <USBH_MSC_BOT_Process+0x41a>
 8010498:	a201      	add	r2, pc, #4	; (adr r2, 80104a0 <USBH_MSC_BOT_Process+0x40>)
 801049a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801049e:	bf00      	nop
 80104a0:	080104cd 	.word	0x080104cd
 80104a4:	080104f7 	.word	0x080104f7
 80104a8:	08010591 	.word	0x08010591
 80104ac:	080105af 	.word	0x080105af
 80104b0:	08010653 	.word	0x08010653
 80104b4:	08010677 	.word	0x08010677
 80104b8:	08010741 	.word	0x08010741
 80104bc:	0801075d 	.word	0x0801075d
 80104c0:	080107cf 	.word	0x080107cf
 80104c4:	080107ff 	.word	0x080107ff
 80104c8:	08010861 	.word	0x08010861
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	78fa      	ldrb	r2, [r7, #3]
 80104d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	2202      	movs	r2, #2
 80104d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost,
                       MSC_Handle->hbot.cbw.data, 
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	f103 0154 	add.w	r1, r3, #84	; 0x54
    USBH_BulkSendData (phost,
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	795a      	ldrb	r2, [r3, #5]
 80104e6:	2301      	movs	r3, #1
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	4613      	mov	r3, r2
 80104ec:	221f      	movs	r2, #31
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff fa0b 	bl	800f90a <USBH_BulkSendData>
                       BOT_CBW_LENGTH, 
                       MSC_Handle->OutPipe,
                       1);
    
    break;
 80104f4:	e1d0      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_SEND_CBW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	795b      	ldrb	r3, [r3, #5]
 80104fa:	4619      	mov	r1, r3
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f003 fbd7 	bl	8013cb0 <USBH_LL_GetURBState>
 8010502:	4603      	mov	r3, r0
 8010504:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 8010506:	7d3b      	ldrb	r3, [r7, #20]
 8010508:	2b01      	cmp	r3, #1
 801050a:	d120      	bne.n	801054e <USBH_MSC_BOT_Process+0xee>
    { 
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010510:	2b00      	cmp	r3, #0
 8010512:	d00f      	beq.n	8010534 <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801051a:	b25b      	sxtb	r3, r3
 801051c:	2b00      	cmp	r3, #0
 801051e:	da04      	bge.n	801052a <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	2203      	movs	r2, #3
 8010524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010528:	e008      	b.n	801053c <USBH_MSC_BOT_Process+0xdc>
        }
        else
        {
          /* Data Direction is OUT */
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	2205      	movs	r2, #5
 801052e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010532:	e003      	b.n	801053c <USBH_MSC_BOT_Process+0xdc>
        } 
      }
      
      else
      {/* If there is NO Data Transfer Stage */
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	2207      	movs	r2, #7
 8010538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010542:	2200      	movs	r2, #0
 8010544:	2102      	movs	r1, #2
 8010546:	4618      	mov	r0, r3
 8010548:	f7fb ff68 	bl	800c41c <osMessagePut>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 801054c:	e197      	b.n	801087e <USBH_MSC_BOT_Process+0x41e>
    else if(URB_Status == USBH_URB_NOTREADY)
 801054e:	7d3b      	ldrb	r3, [r7, #20]
 8010550:	2b02      	cmp	r3, #2
 8010552:	d10c      	bne.n	801056e <USBH_MSC_BOT_Process+0x10e>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010562:	2200      	movs	r2, #0
 8010564:	2102      	movs	r1, #2
 8010566:	4618      	mov	r0, r3
 8010568:	f7fb ff58 	bl	800c41c <osMessagePut>
    break;
 801056c:	e187      	b.n	801087e <USBH_MSC_BOT_Process+0x41e>
    else if(URB_Status == USBH_URB_STALL)
 801056e:	7d3b      	ldrb	r3, [r7, #20]
 8010570:	2b05      	cmp	r3, #5
 8010572:	f040 8184 	bne.w	801087e <USBH_MSC_BOT_Process+0x41e>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	220a      	movs	r2, #10
 801057a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010584:	2200      	movs	r2, #0
 8010586:	2102      	movs	r1, #2
 8010588:	4618      	mov	r0, r3
 801058a:	f7fb ff47 	bl	800c41c <osMessagePut>
    break;
 801058e:	e176      	b.n	801087e <USBH_MSC_BOT_Process+0x41e>
    
  case BOT_DATA_IN:   
    /* Send first packet */        
    USBH_BulkReceiveData (phost,
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	895a      	ldrh	r2, [r3, #10]
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	791b      	ldrb	r3, [r3, #4]
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7ff f9d8 	bl	800f954 <USBH_BulkReceiveData>
                          MSC_Handle->hbot.pbuf, 
                          MSC_Handle->InEpSize , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	2204      	movs	r2, #4
 80105a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    break;   
 80105ac:	e174      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_DATA_IN_WAIT:  
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	791b      	ldrb	r3, [r3, #4]
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f003 fb7b 	bl	8013cb0 <USBH_LL_GetURBState>
 80105ba:	4603      	mov	r3, r0
 80105bc:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE) 
 80105be:	7d3b      	ldrb	r3, [r7, #20]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d135      	bne.n	8010630 <USBH_MSC_BOT_Process+0x1d0>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105c8:	693a      	ldr	r2, [r7, #16]
 80105ca:	8952      	ldrh	r2, [r2, #10]
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d910      	bls.n	80105f2 <USBH_MSC_BOT_Process+0x192>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105d6:	693a      	ldr	r2, [r7, #16]
 80105d8:	8952      	ldrh	r2, [r2, #10]
 80105da:	441a      	add	r2, r3
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	8952      	ldrh	r2, [r2, #10]
 80105ea:	1a9a      	subs	r2, r3, r2
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80105f0:	e002      	b.n	80105f8 <USBH_MSC_BOT_Process+0x198>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	2200      	movs	r2, #0
 80105f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
        
      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00a      	beq.n	8010616 <USBH_MSC_BOT_Process+0x1b6>
      {
        /* Send next packet */        
        USBH_BulkReceiveData (phost,
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	895a      	ldrh	r2, [r3, #10]
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	791b      	ldrb	r3, [r3, #4]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f7ff f9a0 	bl	800f954 <USBH_BulkReceiveData>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }     
    break;  
 8010614:	e135      	b.n	8010882 <USBH_MSC_BOT_Process+0x422>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2207      	movs	r2, #7
 801061a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010624:	2200      	movs	r2, #0
 8010626:	2102      	movs	r1, #2
 8010628:	4618      	mov	r0, r3
 801062a:	f7fb fef7 	bl	800c41c <osMessagePut>
    break;  
 801062e:	e128      	b.n	8010882 <USBH_MSC_BOT_Process+0x422>
    else if(URB_Status == USBH_URB_STALL)
 8010630:	7d3b      	ldrb	r3, [r7, #20]
 8010632:	2b05      	cmp	r3, #5
 8010634:	f040 8125 	bne.w	8010882 <USBH_MSC_BOT_Process+0x422>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	2209      	movs	r2, #9
 801063c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010646:	2200      	movs	r2, #0
 8010648:	2102      	movs	r1, #2
 801064a:	4618      	mov	r0, r3
 801064c:	f7fb fee6 	bl	800c41c <osMessagePut>
    break;  
 8010650:	e117      	b.n	8010882 <USBH_MSC_BOT_Process+0x422>
    
  case BOT_DATA_OUT:
    
    USBH_BulkSendData (phost,
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	891a      	ldrh	r2, [r3, #8]
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	7958      	ldrb	r0, [r3, #5]
 8010660:	2301      	movs	r3, #1
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	4603      	mov	r3, r0
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff f94f 	bl	800f90a <USBH_BulkSendData>
                       MSC_Handle->OutEpSize , 
                       MSC_Handle->OutPipe,
                       1);
    
    
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	2206      	movs	r2, #6
 8010670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010674:	e110      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	795b      	ldrb	r3, [r3, #5]
 801067a:	4619      	mov	r1, r3
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f003 fb17 	bl	8013cb0 <USBH_LL_GetURBState>
 8010682:	4603      	mov	r3, r0
 8010684:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 8010686:	7d3b      	ldrb	r3, [r7, #20]
 8010688:	2b01      	cmp	r3, #1
 801068a:	d138      	bne.n	80106fe <USBH_MSC_BOT_Process+0x29e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010690:	693a      	ldr	r2, [r7, #16]
 8010692:	8912      	ldrh	r2, [r2, #8]
 8010694:	4293      	cmp	r3, r2
 8010696:	d910      	bls.n	80106ba <USBH_MSC_BOT_Process+0x25a>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801069e:	693a      	ldr	r2, [r7, #16]
 80106a0:	8912      	ldrh	r2, [r2, #8]
 80106a2:	441a      	add	r2, r3
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	8912      	ldrh	r2, [r2, #8]
 80106b2:	1a9a      	subs	r2, r3, r2
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80106b8:	e002      	b.n	80106c0 <USBH_MSC_BOT_Process+0x260>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	2200      	movs	r2, #0
 80106be:	65da      	str	r2, [r3, #92]	; 0x5c
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00d      	beq.n	80106e4 <USBH_MSC_BOT_Process+0x284>
      {
        USBH_BulkSendData (phost,
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	891a      	ldrh	r2, [r3, #8]
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	7958      	ldrb	r0, [r3, #5]
 80106d6:	2301      	movs	r3, #1
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	4603      	mov	r3, r0
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f7ff f914 	bl	800f90a <USBH_BulkSendData>
 80106e2:	e003      	b.n	80106ec <USBH_MSC_BOT_Process+0x28c>
                           1);
      }
      else
      {
        /* If value was 0, and successful transfer, then change the state */
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	2207      	movs	r2, #7
 80106e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106f2:	2200      	movs	r2, #0
 80106f4:	2102      	movs	r1, #2
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fb fe90 	bl	800c41c <osMessagePut>
      */      
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 80106fc:	e0c3      	b.n	8010886 <USBH_MSC_BOT_Process+0x426>
    else if(URB_Status == USBH_URB_NOTREADY)
 80106fe:	7d3b      	ldrb	r3, [r7, #20]
 8010700:	2b02      	cmp	r3, #2
 8010702:	d10c      	bne.n	801071e <USBH_MSC_BOT_Process+0x2be>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	2205      	movs	r2, #5
 8010708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010712:	2200      	movs	r2, #0
 8010714:	2102      	movs	r1, #2
 8010716:	4618      	mov	r0, r3
 8010718:	f7fb fe80 	bl	800c41c <osMessagePut>
    break;
 801071c:	e0b3      	b.n	8010886 <USBH_MSC_BOT_Process+0x426>
    else if(URB_Status == USBH_URB_STALL)
 801071e:	7d3b      	ldrb	r3, [r7, #20]
 8010720:	2b05      	cmp	r3, #5
 8010722:	f040 80b0 	bne.w	8010886 <USBH_MSC_BOT_Process+0x426>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	220a      	movs	r2, #10
 801072a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010734:	2200      	movs	r2, #0
 8010736:	2102      	movs	r1, #2
 8010738:	4618      	mov	r0, r3
 801073a:	f7fb fe6f 	bl	800c41c <osMessagePut>
    break;
 801073e:	e0a2      	b.n	8010886 <USBH_MSC_BOT_Process+0x426>
    
  case BOT_RECEIVE_CSW:
    
    USBH_BulkReceiveData (phost,
                          MSC_Handle->hbot.csw.data, 
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	f103 0178 	add.w	r1, r3, #120	; 0x78
    USBH_BulkReceiveData (phost,
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	791b      	ldrb	r3, [r3, #4]
 801074a:	220d      	movs	r2, #13
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff f901 	bl	800f954 <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	2208      	movs	r2, #8
 8010756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 801075a:	e09d      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_RECEIVE_CSW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	791b      	ldrb	r3, [r3, #4]
 8010760:	4619      	mov	r1, r3
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f003 faa4 	bl	8013cb0 <USBH_LL_GetURBState>
 8010768:	4603      	mov	r3, r0
 801076a:	753b      	strb	r3, [r7, #20]
    
    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 801076c:	7d3b      	ldrb	r3, [r7, #20]
 801076e:	2b01      	cmp	r3, #1
 8010770:	d11d      	bne.n	80107ae <USBH_MSC_BOT_Process+0x34e>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	2201      	movs	r2, #1
 8010776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	2201      	movs	r2, #1
 801077e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f000 f8ba 	bl	80108fc <USBH_MSC_DecodeCSW>
 8010788:	4603      	mov	r3, r0
 801078a:	757b      	strb	r3, [r7, #21]
      
      if(CSW_Status == BOT_CSW_CMD_PASSED)
 801078c:	7d7b      	ldrb	r3, [r7, #21]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d102      	bne.n	8010798 <USBH_MSC_BOT_Process+0x338>
      {
        status = USBH_OK;
 8010792:	2300      	movs	r3, #0
 8010794:	75fb      	strb	r3, [r7, #23]
 8010796:	e001      	b.n	801079c <USBH_MSC_BOT_Process+0x33c>
      }
      else
      {
        status = USBH_FAIL;
 8010798:	2302      	movs	r3, #2
 801079a:	75fb      	strb	r3, [r7, #23]
      }
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80107a2:	2200      	movs	r2, #0
 80107a4:	2102      	movs	r1, #2
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fb fe38 	bl	800c41c <osMessagePut>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 80107ac:	e06d      	b.n	801088a <USBH_MSC_BOT_Process+0x42a>
    else if(URB_Status == USBH_URB_STALL)     
 80107ae:	7d3b      	ldrb	r3, [r7, #20]
 80107b0:	2b05      	cmp	r3, #5
 80107b2:	d16a      	bne.n	801088a <USBH_MSC_BOT_Process+0x42a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	2209      	movs	r2, #9
 80107b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80107c2:	2200      	movs	r2, #0
 80107c4:	2102      	movs	r1, #2
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fb fe28 	bl	800c41c <osMessagePut>
    break;
 80107cc:	e05d      	b.n	801088a <USBH_MSC_BOT_Process+0x42a>
    
  case BOT_ERROR_IN: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80107ce:	78fb      	ldrb	r3, [r7, #3]
 80107d0:	2200      	movs	r2, #0
 80107d2:	4619      	mov	r1, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f865 	bl	80108a4 <USBH_MSC_BOT_Abort>
 80107da:	4603      	mov	r3, r0
 80107dc:	75bb      	strb	r3, [r7, #22]
    
    if (error == USBH_OK)
 80107de:	7dbb      	ldrb	r3, [r7, #22]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d104      	bne.n	80107ee <USBH_MSC_BOT_Process+0x38e>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	2207      	movs	r2, #7
 80107e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      /* This means that there is a STALL Error limit, Do Reset Recovery */
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 80107ec:	e04f      	b.n	801088e <USBH_MSC_BOT_Process+0x42e>
    else if (error == USBH_UNRECOVERED_ERROR)
 80107ee:	7dbb      	ldrb	r3, [r7, #22]
 80107f0:	2b04      	cmp	r3, #4
 80107f2:	d14c      	bne.n	801088e <USBH_MSC_BOT_Process+0x42e>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	220b      	movs	r2, #11
 80107f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80107fc:	e047      	b.n	801088e <USBH_MSC_BOT_Process+0x42e>
    
  case BOT_ERROR_OUT: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80107fe:	78fb      	ldrb	r3, [r7, #3]
 8010800:	2201      	movs	r2, #1
 8010802:	4619      	mov	r1, r3
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 f84d 	bl	80108a4 <USBH_MSC_BOT_Abort>
 801080a:	4603      	mov	r3, r0
 801080c:	75bb      	strb	r3, [r7, #22]
    
    if ( error == USBH_OK)
 801080e:	7dbb      	ldrb	r3, [r7, #22]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d11d      	bne.n	8010850 <USBH_MSC_BOT_Process+0x3f0>
    { 
      
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	795b      	ldrb	r3, [r3, #5]
 8010818:	4619      	mov	r1, r3
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f003 fa9c 	bl	8013d58 <USBH_LL_GetToggle>
 8010820:	4603      	mov	r3, r0
 8010822:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	7959      	ldrb	r1, [r3, #5]
 8010828:	7bfb      	ldrb	r3, [r7, #15]
 801082a:	f1c3 0301 	rsb	r3, r3, #1
 801082e:	b2db      	uxtb	r3, r3
 8010830:	461a      	mov	r2, r3
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f003 fa5d 	bl	8013cf2 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	791b      	ldrb	r3, [r3, #4]
 801083c:	2200      	movs	r2, #0
 801083e:	4619      	mov	r1, r3
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f003 fa56 	bl	8013cf2 <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;        
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	2209      	movs	r2, #9
 801084a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 801084e:	e020      	b.n	8010892 <USBH_MSC_BOT_Process+0x432>
    else if (error == USBH_UNRECOVERED_ERROR)
 8010850:	7dbb      	ldrb	r3, [r7, #22]
 8010852:	2b04      	cmp	r3, #4
 8010854:	d11d      	bne.n	8010892 <USBH_MSC_BOT_Process+0x432>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	220b      	movs	r2, #11
 801085a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 801085e:	e018      	b.n	8010892 <USBH_MSC_BOT_Process+0x432>
    
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff fda0 	bl	80103a6 <USBH_MSC_BOT_REQ_Reset>
 8010866:	4603      	mov	r3, r0
 8010868:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 801086a:	7dfb      	ldrb	r3, [r7, #23]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d112      	bne.n	8010896 <USBH_MSC_BOT_Process+0x436>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	2201      	movs	r2, #1
 8010874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 8010878:	e00d      	b.n	8010896 <USBH_MSC_BOT_Process+0x436>
    
  default:      
    break;
 801087a:	bf00      	nop
 801087c:	e00c      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    break;
 801087e:	bf00      	nop
 8010880:	e00a      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    break;  
 8010882:	bf00      	nop
 8010884:	e008      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    break;
 8010886:	bf00      	nop
 8010888:	e006      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    break;
 801088a:	bf00      	nop
 801088c:	e004      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    break;
 801088e:	bf00      	nop
 8010890:	e002      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    break;
 8010892:	bf00      	nop
 8010894:	e000      	b.n	8010898 <USBH_MSC_BOT_Process+0x438>
    break;
 8010896:	bf00      	nop
  }
  return status;
 8010898:	7dfb      	ldrb	r3, [r7, #23]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3718      	adds	r7, #24
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop

080108a4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
 80108b0:	4613      	mov	r3, r2
 80108b2:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 80108b4:	2302      	movs	r3, #2
 80108b6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80108be:	69db      	ldr	r3, [r3, #28]
 80108c0:	60bb      	str	r3, [r7, #8]
  
  switch (dir)
 80108c2:	78bb      	ldrb	r3, [r7, #2]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d002      	beq.n	80108ce <USBH_MSC_BOT_Abort+0x2a>
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d009      	beq.n	80108e0 <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;
    
  default:
    break;
 80108cc:	e011      	b.n	80108f2 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	79db      	ldrb	r3, [r3, #7]
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7fe fbb0 	bl	800f03a <USBH_ClrFeature>
 80108da:	4603      	mov	r3, r0
 80108dc:	73fb      	strb	r3, [r7, #15]
    break;
 80108de:	e008      	b.n	80108f2 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	799b      	ldrb	r3, [r3, #6]
 80108e4:	4619      	mov	r1, r3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7fe fba7 	bl	800f03a <USBH_ClrFeature>
 80108ec:	4603      	mov	r3, r0
 80108ee:	73fb      	strb	r3, [r7, #15]
    break;
 80108f0:	bf00      	nop
  }
  return status;
 80108f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 801090a:	69db      	ldr	r3, [r3, #28]
 801090c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 801090e:	2301      	movs	r3, #1
 8010910:	73fb      	strb	r3, [r7, #15]
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	791b      	ldrb	r3, [r3, #4]
 8010916:	4619      	mov	r1, r3
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f003 f8f1 	bl	8013b00 <USBH_LL_GetLastXferSize>
 801091e:	4603      	mov	r3, r0
 8010920:	2b0d      	cmp	r3, #13
 8010922:	d002      	beq.n	801092a <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/
      
      
      status = BOT_CSW_PHASE_ERROR;
 8010924:	2302      	movs	r3, #2
 8010926:	73fb      	strb	r3, [r7, #15]
 8010928:	e024      	b.n	8010974 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801092e:	4a14      	ldr	r2, [pc, #80]	; (8010980 <USBH_MSC_DecodeCSW+0x84>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d11d      	bne.n	8010970 <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801093c:	429a      	cmp	r2, r3
 801093e:	d119      	bne.n	8010974 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010946:	2b00      	cmp	r3, #0
 8010948:	d102      	bne.n	8010950 <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            
            */
            
            status = BOT_CSW_CMD_PASSED;
 801094a:	2300      	movs	r3, #0
 801094c:	73fb      	strb	r3, [r7, #15]
 801094e:	e011      	b.n	8010974 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1)
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010956:	2b01      	cmp	r3, #1
 8010958:	d102      	bne.n	8010960 <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 801095a:	2301      	movs	r3, #1
 801095c:	73fb      	strb	r3, [r7, #15]
 801095e:	e009      	b.n	8010974 <USBH_MSC_DecodeCSW+0x78>
          }
          
          else if(MSC_Handle->hbot.csw.field.Status == 2)
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010966:	2b02      	cmp	r3, #2
 8010968:	d104      	bne.n	8010974 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            */
            
            status = BOT_CSW_PHASE_ERROR;
 801096a:	2302      	movs	r3, #2
 801096c:	73fb      	strb	r3, [r7, #15]
 801096e:	e001      	b.n	8010974 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */
        
        status = BOT_CSW_PHASE_ERROR;
 8010970:	2302      	movs	r3, #2
 8010972:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/
    
  return status;
 8010974:	7bfb      	ldrb	r3, [r7, #15]
}
 8010976:	4618      	mov	r0, r3
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	53425355 	.word	0x53425355

08010984 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	460b      	mov	r3, r1
 801098e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010990:	2302      	movs	r3, #2
 8010992:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 801099a:	69db      	ldr	r3, [r3, #28]
 801099c:	60bb      	str	r3, [r7, #8]
  
  switch(MSC_Handle->hbot.cmd_state)
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d002      	beq.n	80109ae <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d021      	beq.n	80109f0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 80109ac:	e028      	b.n	8010a00 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	2200      	movs	r2, #0
 80109b2:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	220a      	movs	r2, #10
 80109c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	3363      	adds	r3, #99	; 0x63
 80109c8:	2210      	movs	r2, #16
 80109ca:	2100      	movs	r1, #0
 80109cc:	4618      	mov	r0, r3
 80109ce:	f003 fa8e 	bl	8013eee <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	2200      	movs	r2, #0
 80109d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	2201      	movs	r2, #1
 80109de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2202      	movs	r2, #2
 80109e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY; 
 80109ea:	2301      	movs	r3, #1
 80109ec:	73fb      	strb	r3, [r7, #15]
    break;
 80109ee:	e007      	b.n	8010a00 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 80109f0:	78fb      	ldrb	r3, [r7, #3]
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff fd33 	bl	8010460 <USBH_MSC_BOT_Process>
 80109fa:	4603      	mov	r3, r0
 80109fc:	73fb      	strb	r3, [r7, #15]
    break;
 80109fe:	bf00      	nop
  }
  
  return error;
 8010a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b086      	sub	sp, #24
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	60f8      	str	r0, [r7, #12]
 8010a12:	460b      	mov	r3, r1
 8010a14:	607a      	str	r2, [r7, #4]
 8010a16:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010a22:	69db      	ldr	r3, [r3, #28]
 8010a24:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d002      	beq.n	8010a36 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8010a30:	2b02      	cmp	r3, #2
 8010a32:	d027      	beq.n	8010a84 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
    }
    break;
    
  default:
    break;
 8010a34:	e060      	b.n	8010af8 <USBH_MSC_SCSI_ReadCapacity+0xee>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	2208      	movs	r2, #8
 8010a3a:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	2280      	movs	r2, #128	; 0x80
 8010a40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	220a      	movs	r2, #10
 8010a48:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	3363      	adds	r3, #99	; 0x63
 8010a50:	2210      	movs	r2, #16
 8010a52:	2100      	movs	r1, #0
 8010a54:	4618      	mov	r0, r3
 8010a56:	f003 fa4a 	bl	8013eee <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	2225      	movs	r2, #37	; 0x25
 8010a5e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	2201      	movs	r2, #1
 8010a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	f103 0210 	add.w	r2, r3, #16
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010a7e:	2301      	movs	r3, #1
 8010a80:	75fb      	strb	r3, [r7, #23]
    break;
 8010a82:	e039      	b.n	8010af8 <USBH_MSC_SCSI_ReadCapacity+0xee>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010a84:	7afb      	ldrb	r3, [r7, #11]
 8010a86:	4619      	mov	r1, r3
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f7ff fce9 	bl	8010460 <USBH_MSC_BOT_Process>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010a92:	7dfb      	ldrb	r3, [r7, #23]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d12e      	bne.n	8010af6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a9e:	3303      	adds	r3, #3
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010aaa:	3302      	adds	r3, #2
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	021b      	lsls	r3, r3, #8
 8010ab0:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ab8:	3301      	adds	r3, #1
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010abe:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	061b      	lsls	r3, r3, #24
 8010aca:	4313      	orrs	r3, r2
 8010acc:	461a      	mov	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	601a      	str	r2, [r3, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ad8:	3307      	adds	r3, #7
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	b21a      	sxth	r2, r3
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ae4:	3306      	adds	r3, #6
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	021b      	lsls	r3, r3, #8
 8010aea:	b21b      	sxth	r3, r3
 8010aec:	4313      	orrs	r3, r2
 8010aee:	b21b      	sxth	r3, r3
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	809a      	strh	r2, [r3, #4]
    break;
 8010af6:	bf00      	nop
  }
  
  return error;
 8010af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3718      	adds	r7, #24
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b086      	sub	sp, #24
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	60f8      	str	r0, [r7, #12]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	607a      	str	r2, [r7, #4]
 8010b0e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010b10:	2302      	movs	r3, #2
 8010b12:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010b1a:	69db      	ldr	r3, [r3, #28]
 8010b1c:	613b      	str	r3, [r7, #16]
  switch(MSC_Handle->hbot.cmd_state)
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d002      	beq.n	8010b2e <USBH_MSC_SCSI_Inquiry+0x2c>
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d03d      	beq.n	8010ba8 <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
    }
    break;
    
  default:
    break;
 8010b2c:	e086      	b.n	8010c3c <USBH_MSC_SCSI_Inquiry+0x13a>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	2224      	movs	r2, #36	; 0x24
 8010b32:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	2280      	movs	r2, #128	; 0x80
 8010b38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	220a      	movs	r2, #10
 8010b40:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	3363      	adds	r3, #99	; 0x63
 8010b48:	220a      	movs	r2, #10
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f003 f9ce 	bl	8013eee <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	2212      	movs	r2, #18
 8010b56:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8010b5a:	7afb      	ldrb	r3, [r7, #11]
 8010b5c:	015b      	lsls	r3, r3, #5
 8010b5e:	b2da      	uxtb	r2, r3
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	2224      	movs	r2, #36	; 0x24
 8010b7a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	2202      	movs	r2, #2
 8010b92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	f103 0210 	add.w	r2, r3, #16
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	75fb      	strb	r3, [r7, #23]
    break;
 8010ba6:	e049      	b.n	8010c3c <USBH_MSC_SCSI_Inquiry+0x13a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010ba8:	7afb      	ldrb	r3, [r7, #11]
 8010baa:	4619      	mov	r1, r3
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f7ff fc57 	bl	8010460 <USBH_MSC_BOT_Process>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010bb6:	7dfb      	ldrb	r3, [r7, #23]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d13e      	bne.n	8010c3a <USBH_MSC_SCSI_Inquiry+0x138>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8010bbc:	2222      	movs	r2, #34	; 0x22
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f003 f994 	bl	8013eee <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	f003 031f 	and.w	r3, r3, #31
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	095b      	lsrs	r3, r3, #5
 8010be2:	b2da      	uxtb	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	701a      	strb	r2, [r3, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bee:	3301      	adds	r3, #1
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	b25b      	sxtb	r3, r3
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	09db      	lsrs	r3, r3, #7
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	1cd8      	adds	r0, r3, #3
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c0a:	3308      	adds	r3, #8
 8010c0c:	2208      	movs	r2, #8
 8010c0e:	4619      	mov	r1, r3
 8010c10:	f003 f962 	bl	8013ed8 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f103 000c 	add.w	r0, r3, #12
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c20:	3310      	adds	r3, #16
 8010c22:	2210      	movs	r2, #16
 8010c24:	4619      	mov	r1, r3
 8010c26:	f003 f957 	bl	8013ed8 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	331d      	adds	r3, #29
 8010c2e:	693a      	ldr	r2, [r7, #16]
 8010c30:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8010c34:	3220      	adds	r2, #32
 8010c36:	6812      	ldr	r2, [r2, #0]
 8010c38:	601a      	str	r2, [r3, #0]
    break;
 8010c3a:	bf00      	nop
  }
  
  return error;
 8010c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3718      	adds	r7, #24
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b086      	sub	sp, #24
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	60f8      	str	r0, [r7, #12]
 8010c4e:	460b      	mov	r3, r1
 8010c50:	607a      	str	r2, [r7, #4]
 8010c52:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010c54:	2302      	movs	r3, #2
 8010c56:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010c5e:	69db      	ldr	r3, [r3, #28]
 8010c60:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	d002      	beq.n	8010c72 <USBH_MSC_SCSI_RequestSense+0x2c>
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d03d      	beq.n	8010cec <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;
    
  default:
    break;
 8010c70:	e05d      	b.n	8010d2e <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	220e      	movs	r2, #14
 8010c76:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	2280      	movs	r2, #128	; 0x80
 8010c7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	220a      	movs	r2, #10
 8010c84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	3363      	adds	r3, #99	; 0x63
 8010c8c:	2210      	movs	r2, #16
 8010c8e:	2100      	movs	r1, #0
 8010c90:	4618      	mov	r0, r3
 8010c92:	f003 f92c 	bl	8013eee <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	2203      	movs	r2, #3
 8010c9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8010c9e:	7afb      	ldrb	r3, [r7, #11]
 8010ca0:	015b      	lsls	r3, r3, #5
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	2200      	movs	r2, #0
 8010cae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	220e      	movs	r2, #14
 8010cbe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	2201      	movs	r2, #1
 8010cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	2202      	movs	r2, #2
 8010cd6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	f103 0210 	add.w	r2, r3, #16
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	75fb      	strb	r3, [r7, #23]
    break;
 8010cea:	e020      	b.n	8010d2e <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010cec:	7afb      	ldrb	r3, [r7, #11]
 8010cee:	4619      	mov	r1, r3
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f7ff fbb5 	bl	8010460 <USBH_MSC_BOT_Process>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010cfa:	7dfb      	ldrb	r3, [r7, #23]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d115      	bne.n	8010d2c <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d06:	3302      	adds	r3, #2
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	f003 030f 	and.w	r3, r3, #15
 8010d0e:	b2da      	uxtb	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d1a:	7b1a      	ldrb	r2, [r3, #12]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d26:	7b5a      	ldrb	r2, [r3, #13]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	709a      	strb	r2, [r3, #2]
    break;
 8010d2c:	bf00      	nop
  }
  
  return error;
 8010d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3718      	adds	r7, #24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <String_GetString>:
//
//         Any character typed other than those above will be masked with 0x7F and stored in the buffer
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_GetString( uint8_t *Buffer )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
    uint16_t Length = 0;
 8010d40:	2300      	movs	r3, #0
 8010d42:	82fb      	strh	r3, [r7, #22]
    uint16_t Byte = 1;
 8010d44:	2301      	movs	r3, #1
 8010d46:	82bb      	strh	r3, [r7, #20]
    uint8_t  *Ptr;
    //
    //  Looop until exited
    //
    Ptr = Buffer;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	613b      	str	r3, [r7, #16]
    while ( Byte != 0 )
 8010d4c:	e086      	b.n	8010e5c <String_GetString+0x124>
    {
        //
        //  Get the byte
        //
        Byte = String_GetByte() & ASCII_MASK;
 8010d4e:	f000 f8c3 	bl	8010ed8 <String_GetByte>
 8010d52:	4603      	mov	r3, r0
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d5a:	82bb      	strh	r3, [r7, #20]
        //
        //  Handle special characters
        //
        switch ( Byte )
 8010d5c:	8abb      	ldrh	r3, [r7, #20]
 8010d5e:	3b03      	subs	r3, #3
 8010d60:	2b18      	cmp	r3, #24
 8010d62:	d86c      	bhi.n	8010e3e <String_GetString+0x106>
 8010d64:	a201      	add	r2, pc, #4	; (adr r2, 8010d6c <String_GetString+0x34>)
 8010d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d6a:	bf00      	nop
 8010d6c:	08010dfb 	.word	0x08010dfb
 8010d70:	08010e3f 	.word	0x08010e3f
 8010d74:	08010e3f 	.word	0x08010e3f
 8010d78:	08010e3f 	.word	0x08010e3f
 8010d7c:	08010e3f 	.word	0x08010e3f
 8010d80:	08010ddd 	.word	0x08010ddd
 8010d84:	08010e3f 	.word	0x08010e3f
 8010d88:	08010dd1 	.word	0x08010dd1
 8010d8c:	08010e3f 	.word	0x08010e3f
 8010d90:	08010e3f 	.word	0x08010e3f
 8010d94:	08010dd1 	.word	0x08010dd1
 8010d98:	08010e3f 	.word	0x08010e3f
 8010d9c:	08010e3f 	.word	0x08010e3f
 8010da0:	08010e3f 	.word	0x08010e3f
 8010da4:	08010e3f 	.word	0x08010e3f
 8010da8:	08010e05 	.word	0x08010e05
 8010dac:	08010e3f 	.word	0x08010e3f
 8010db0:	08010e3f 	.word	0x08010e3f
 8010db4:	08010e19 	.word	0x08010e19
 8010db8:	08010e3f 	.word	0x08010e3f
 8010dbc:	08010e19 	.word	0x08010e19
 8010dc0:	08010e3f 	.word	0x08010e3f
 8010dc4:	08010e3f 	.word	0x08010e3f
 8010dc8:	08010e3f 	.word	0x08010e3f
 8010dcc:	08010e19 	.word	0x08010e19
            case '\n':
            case '\r':
                //
                //  Add a null to the end of the buffer
                //
                *Ptr = '\0';
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	701a      	strb	r2, [r3, #0]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	82bb      	strh	r3, [r7, #20]
                break;
 8010dda:	e03f      	b.n	8010e5c <String_GetString+0x124>
            case '\b':
                //
                //  If we have characters to delete
                //  then delete the last one and decrement the length
                //
                if (Ptr > Buffer )
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d93b      	bls.n	8010e5c <String_GetString+0x124>
                {
                    Ptr--;
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	3b01      	subs	r3, #1
 8010de8:	613b      	str	r3, [r7, #16]
                    Length--;
 8010dea:	8afb      	ldrh	r3, [r7, #22]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	82fb      	strh	r3, [r7, #22]
                    //
                    //  Erase the character
                    //
                    String_PutStringN("\b \b", 3);
 8010df0:	2103      	movs	r1, #3
 8010df2:	481f      	ldr	r0, [pc, #124]	; (8010e70 <String_GetString+0x138>)
 8010df4:	f000 f840 	bl	8010e78 <String_PutStringN>
                }
                break;
 8010df8:	e030      	b.n	8010e5c <String_GetString+0x124>
            //
            case 'c' & CONTROL_MASK:
                //
                //  Set the length to zero
                //
                Length = 0;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	82fb      	strh	r3, [r7, #22]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	82bb      	strh	r3, [r7, #20]
                break;
 8010e02:	e02b      	b.n	8010e5c <String_GetString+0x124>
            //
            case 'r' & CONTROL_MASK:
                //
                //  new line
                //
                String_PutStringN( "\n\r", 2);
 8010e04:	2102      	movs	r1, #2
 8010e06:	481b      	ldr	r0, [pc, #108]	; (8010e74 <String_GetString+0x13c>)
 8010e08:	f000 f836 	bl	8010e78 <String_PutStringN>
                //
                //  output buffer
                //
                String_PutStringN( (char *)Buffer, Length );
 8010e0c:	8afb      	ldrh	r3, [r7, #22]
 8010e0e:	4619      	mov	r1, r3
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 f831 	bl	8010e78 <String_PutStringN>
                break;
 8010e16:	e021      	b.n	8010e5c <String_GetString+0x124>
            {
                uint16_t Counter;
                //
                //  Point to the beginning of the buffer
                //
                Ptr = Buffer;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	613b      	str	r3, [r7, #16]
                //
                //  Erase the line visually
                //
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	81fb      	strh	r3, [r7, #14]
 8010e20:	e006      	b.n	8010e30 <String_GetString+0xf8>
                {
                    String_PutStringN("\b \b", 3);
 8010e22:	2103      	movs	r1, #3
 8010e24:	4812      	ldr	r0, [pc, #72]	; (8010e70 <String_GetString+0x138>)
 8010e26:	f000 f827 	bl	8010e78 <String_PutStringN>
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 8010e2a:	89fb      	ldrh	r3, [r7, #14]
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	81fb      	strh	r3, [r7, #14]
 8010e30:	89fa      	ldrh	r2, [r7, #14]
 8010e32:	8afb      	ldrh	r3, [r7, #22]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d3f4      	bcc.n	8010e22 <String_GetString+0xea>
                }
                //
                //  Zero out the length of the string
                //
                Length = 0;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	82fb      	strh	r3, [r7, #22]
                break;
 8010e3c:	e00e      	b.n	8010e5c <String_GetString+0x124>
            //
            default:
                //
                //  Store the byte
                //
                *(Ptr++) = Byte;
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	1c5a      	adds	r2, r3, #1
 8010e42:	613a      	str	r2, [r7, #16]
 8010e44:	8aba      	ldrh	r2, [r7, #20]
 8010e46:	b2d2      	uxtb	r2, r2
 8010e48:	701a      	strb	r2, [r3, #0]
                //
                //  Increment the length
                //
                Length++;
 8010e4a:	8afb      	ldrh	r3, [r7, #22]
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	82fb      	strh	r3, [r7, #22]
                //
                // Echo it back to the user
                //
                String_PutByte( Byte );
 8010e50:	8abb      	ldrh	r3, [r7, #20]
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	4618      	mov	r0, r3
 8010e56:	f000 f82b 	bl	8010eb0 <String_PutByte>
                break;
 8010e5a:	bf00      	nop
    while ( Byte != 0 )
 8010e5c:	8abb      	ldrh	r3, [r7, #20]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f47f af75 	bne.w	8010d4e <String_GetString+0x16>
        }
    }
    return Length;
 8010e64:	8afb      	ldrh	r3, [r7, #22]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3718      	adds	r7, #24
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	08016c58 	.word	0x08016c58
 8010e74:	08016c5c 	.word	0x08016c5c

08010e78 <String_PutStringN>:
//
//  Note:   This routine interfaces directly with the STM32CubeMX Hal
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_PutStringN( char *Buffer, uint16_t Length )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	460b      	mov	r3, r1
 8010e82:	807b      	strh	r3, [r7, #2]
    //
    //  Don't do anything if length is zero
    //
    if ( Length > 0 )
 8010e84:	887b      	ldrh	r3, [r7, #2]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00d      	beq.n	8010ea6 <String_PutStringN+0x2e>
        //
#else
            //
            //  Loop through the buffer
            //
            for ( ; Length > 0 ; Length-- )
 8010e8a:	e009      	b.n	8010ea0 <String_PutStringN+0x28>
            {
                //
                //  output a character
                //
                String_PutByte( (uint8_t)*(Buffer++) );
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	1c5a      	adds	r2, r3, #1
 8010e90:	607a      	str	r2, [r7, #4]
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f000 f80b 	bl	8010eb0 <String_PutByte>
            for ( ; Length > 0 ; Length-- )
 8010e9a:	887b      	ldrh	r3, [r7, #2]
 8010e9c:	3b01      	subs	r3, #1
 8010e9e:	807b      	strh	r3, [r7, #2]
 8010ea0:	887b      	ldrh	r3, [r7, #2]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d1f2      	bne.n	8010e8c <String_PutStringN+0x14>
            }
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    }
    return Length;
 8010ea6:	887b      	ldrh	r3, [r7, #2]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <String_PutByte>:
//  Note:   This function interfaces directly with the STM32CubeMX Hal
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_PutByte( uint8_t Byte )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	71fb      	strb	r3, [r7, #7]
//
#else
    //
    //  output the byte normally
    //
    HAL_UART_Transmit(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 8010eba:	1df9      	adds	r1, r7, #7
 8010ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	4804      	ldr	r0, [pc, #16]	; (8010ed4 <String_PutByte+0x24>)
 8010ec4:	f7f6 f981 	bl	80071ca <HAL_UART_Transmit>
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    return Byte;
 8010ec8:	79fb      	ldrb	r3, [r7, #7]
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20000c1c 	.word	0x20000c1c

08010ed8 <String_GetByte>:
//          String_GetRxStatus.
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_GetByte( void )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
    uint8_t Byte;
    //
    //  read the byte normally
    //
    HAL_UART_Receive(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 8010ede:	1df9      	adds	r1, r7, #7
 8010ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	4804      	ldr	r0, [pc, #16]	; (8010ef8 <String_GetByte+0x20>)
 8010ee8:	f7f6 f9fa 	bl	80072e0 <HAL_UART_Receive>
    return Byte;
 8010eec:	79fb      	ldrb	r3, [r7, #7]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20000c1c 	.word	0x20000c1c

08010efc <BSP_SDRAM_Init>:
/**
 * @brief  Initializes the SDRAM device for SDRAM disk area
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
	uint8_t sdramstatus = SDRAM_OK;
 8010f02:	2300      	movs	r3, #0
 8010f04:	71fb      	strb	r3, [r7, #7]

  return sdramstatus;
 8010f06:	79fb      	ldrb	r3, [r7, #7]
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	370c      	adds	r7, #12
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b086      	sub	sp, #24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	60b9      	str	r1, [r7, #8]
 8010f1e:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 8010f20:	2300      	movs	r3, #0
 8010f22:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8010f24:	68f9      	ldr	r1, [r7, #12]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	4806      	ldr	r0, [pc, #24]	; (8010f44 <BSP_SDRAM_ReadData+0x30>)
 8010f2c:	f7f5 fc20 	bl	8006770 <HAL_SDRAM_Read_32b>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d001      	beq.n	8010f3a <BSP_SDRAM_ReadData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 8010f36:	2301      	movs	r3, #1
 8010f38:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 8010f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3718      	adds	r7, #24
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	20000d2c 	.word	0x20000d2c

08010f48 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b086      	sub	sp, #24
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 8010f54:	2300      	movs	r3, #0
 8010f56:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8010f58:	68f9      	ldr	r1, [r7, #12]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	4806      	ldr	r0, [pc, #24]	; (8010f78 <BSP_SDRAM_WriteData+0x30>)
 8010f60:	f7f5 fc45 	bl	80067ee <HAL_SDRAM_Write_32b>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d001      	beq.n	8010f6e <BSP_SDRAM_WriteData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 8010f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	20000d2c 	.word	0x20000d2c

08010f7c <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8010f86:	2300      	movs	r3, #0
 8010f88:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2210      	movs	r2, #16
 8010f94:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2201      	movs	r2, #1
 8010f9a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8010fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fa6:	6839      	ldr	r1, [r7, #0]
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7f5 fc63 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8010fae:	2001      	movs	r0, #1
 8010fb0:	f7f0 fe4a 	bl	8001c48 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2202      	movs	r2, #2
 8010fb8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	2210      	movs	r2, #16
 8010fbe:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8010fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fd0:	6839      	ldr	r1, [r7, #0]
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7f5 fc4e 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	2203      	movs	r2, #3
 8010fdc:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	2210      	movs	r2, #16
 8010fe2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	2208      	movs	r2, #8
 8010fe8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	2200      	movs	r2, #0
 8010fee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8010ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ff4:	6839      	ldr	r1, [r7, #0]
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f7f5 fc3c 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8010ffc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8011000:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	2204      	movs	r2, #4
 8011006:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	2210      	movs	r2, #16
 801100c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	2201      	movs	r2, #1
 8011012:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8011014:	68fa      	ldr	r2, [r7, #12]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 801101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801101e:	6839      	ldr	r1, [r7, #0]
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7f5 fc27 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f240 6203 	movw	r2, #1539	; 0x603
 801102e:	615a      	str	r2, [r3, #20]

}
 8011030:	bf00      	nop
 8011032:	3710      	adds	r7, #16
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8011038:	b580      	push	{r7, lr}
 801103a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 801103c:	4904      	ldr	r1, [pc, #16]	; (8011050 <MX_FATFS_Init+0x18>)
 801103e:	4805      	ldr	r0, [pc, #20]	; (8011054 <MX_FATFS_Init+0x1c>)
 8011040:	f7fb f816 	bl	800c070 <FATFS_LinkDriver>
 8011044:	4603      	mov	r3, r0
 8011046:	461a      	mov	r2, r3
 8011048:	4b03      	ldr	r3, [pc, #12]	; (8011058 <MX_FATFS_Init+0x20>)
 801104a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */
  /* USER CODE END Init */
}
 801104c:	bf00      	nop
 801104e:	bd80      	pop	{r7, pc}
 8011050:	20000590 	.word	0x20000590
 8011054:	08019c20 	.word	0x08019c20
 8011058:	200009f8 	.word	0x200009f8

0801105c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801105c:	b480      	push	{r7}
 801105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 8011060:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8011062:	4618      	mov	r0, r3
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <initArray>:

DMA_HandleTypeDef hdma_memtomem_dma2_stream2;
DMA_HandleTypeDef hdma_memtomem_dma2_stream1;
SDRAM_HandleTypeDef hsdram1;

void initArray(Array *a, size_t initialSize) {
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
	a->array = (uint16_t *) malloc(initialSize * sizeof(uint16_t));
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	005b      	lsls	r3, r3, #1
 801107a:	4618      	mov	r0, r3
 801107c:	f002 ff0a 	bl	8013e94 <malloc>
 8011080:	4603      	mov	r3, r0
 8011082:	461a      	mov	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	601a      	str	r2, [r3, #0]
	a->used = 0;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2200      	movs	r2, #0
 801108c:	605a      	str	r2, [r3, #4]
	a->size = initialSize;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	609a      	str	r2, [r3, #8]
}
 8011094:	bf00      	nop
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
	a->size = newsize;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	683a      	ldr	r2, [r7, #0]
 80110aa:	609a      	str	r2, [r3, #8]
	a->array = (uint16_t *) realloc(a->array, a->size * sizeof(uint16_t));
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	005b      	lsls	r3, r3, #1
 80110b6:	4619      	mov	r1, r3
 80110b8:	4610      	mov	r0, r2
 80110ba:	f003 fcb5 	bl	8014a28 <realloc>
 80110be:	4602      	mov	r2, r0
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	601a      	str	r2, [r3, #0]
	a->used = 0;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	605a      	str	r2, [r3, #4]
}
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <freeArray>:

void freeArray(Array *a) {
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b082      	sub	sp, #8
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
	free(a->array);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	4618      	mov	r0, r3
 80110e0:	f002 fee0 	bl	8013ea4 <free>
	a->array = NULL;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	601a      	str	r2, [r3, #0]
	a->used = a->size = 0;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	609a      	str	r2, [r3, #8]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689a      	ldr	r2, [r3, #8]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	605a      	str	r2, [r3, #4]
}
 80110f8:	bf00      	nop
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <string_parser>:

size_t string_parser(char *input, char ***word_array) {
 8011100:	b590      	push	{r4, r7, lr}
 8011102:	b089      	sub	sp, #36	; 0x24
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
	size_t n = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	61fb      	str	r3, [r7, #28]
	const char *p = input;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	61bb      	str	r3, [r7, #24]

	while (*p) {
 8011112:	e02d      	b.n	8011170 <string_parser+0x70>
		while (isspace((unsigned char )*p))
			++p;
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	3301      	adds	r3, #1
 8011118:	61bb      	str	r3, [r7, #24]
		while (isspace((unsigned char )*p))
 801111a:	f002 fead 	bl	8013e78 <__locale_ctype_ptr>
 801111e:	4602      	mov	r2, r0
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	3301      	adds	r3, #1
 8011126:	4413      	add	r3, r2
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	f003 0308 	and.w	r3, r3, #8
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1f0      	bne.n	8011114 <string_parser+0x14>
		n += *p != '\0';
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	bf14      	ite	ne
 801113a:	2301      	movne	r3, #1
 801113c:	2300      	moveq	r3, #0
 801113e:	b2db      	uxtb	r3, r3
 8011140:	461a      	mov	r2, r3
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	4413      	add	r3, r2
 8011146:	61fb      	str	r3, [r7, #28]
		while (*p && !isspace((unsigned char )*p))
 8011148:	e002      	b.n	8011150 <string_parser+0x50>
			++p;
 801114a:	69bb      	ldr	r3, [r7, #24]
 801114c:	3301      	adds	r3, #1
 801114e:	61bb      	str	r3, [r7, #24]
		while (*p && !isspace((unsigned char )*p))
 8011150:	69bb      	ldr	r3, [r7, #24]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d00b      	beq.n	8011170 <string_parser+0x70>
 8011158:	f002 fe8e 	bl	8013e78 <__locale_ctype_ptr>
 801115c:	4602      	mov	r2, r0
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	3301      	adds	r3, #1
 8011164:	4413      	add	r3, r2
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	f003 0308 	and.w	r3, r3, #8
 801116c:	2b00      	cmp	r3, #0
 801116e:	d0ec      	beq.n	801114a <string_parser+0x4a>
	while (*p) {
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d1d0      	bne.n	801111a <string_parser+0x1a>
	}

	if (n) {
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d062      	beq.n	8011244 <string_parser+0x144>
		size_t i = 0;
 801117e:	2300      	movs	r3, #0
 8011180:	617b      	str	r3, [r7, #20]

		*word_array = (char**) malloc(n * sizeof(char *));
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	4618      	mov	r0, r3
 8011188:	f002 fe84 	bl	8013e94 <malloc>
 801118c:	4603      	mov	r3, r0
 801118e:	461a      	mov	r2, r3
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	601a      	str	r2, [r3, #0]

		p = input;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	61bb      	str	r3, [r7, #24]

		while (*p) {
 8011198:	e050      	b.n	801123c <string_parser+0x13c>
			while (isspace((unsigned char )*p))
				++p;
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	3301      	adds	r3, #1
 801119e:	61bb      	str	r3, [r7, #24]
			while (isspace((unsigned char )*p))
 80111a0:	f002 fe6a 	bl	8013e78 <__locale_ctype_ptr>
 80111a4:	4602      	mov	r2, r0
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	3301      	adds	r3, #1
 80111ac:	4413      	add	r3, r2
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	f003 0308 	and.w	r3, r3, #8
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1f0      	bne.n	801119a <string_parser+0x9a>
			if (*p) {
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d03d      	beq.n	801123c <string_parser+0x13c>
				const char *q = p;
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	613b      	str	r3, [r7, #16]
				while (*p && !isspace((unsigned char )*p))
 80111c4:	e002      	b.n	80111cc <string_parser+0xcc>
					++p;
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	3301      	adds	r3, #1
 80111ca:	61bb      	str	r3, [r7, #24]
				while (*p && !isspace((unsigned char )*p))
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00b      	beq.n	80111ec <string_parser+0xec>
 80111d4:	f002 fe50 	bl	8013e78 <__locale_ctype_ptr>
 80111d8:	4602      	mov	r2, r0
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	3301      	adds	r3, #1
 80111e0:	4413      	add	r3, r2
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	f003 0308 	and.w	r3, r3, #8
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0ec      	beq.n	80111c6 <string_parser+0xc6>

				size_t length = p - q;
 80111ec:	69ba      	ldr	r2, [r7, #24]
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	60fb      	str	r3, [r7, #12]

				(*word_array)[i] = (char *) malloc(length + 1);
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	18d4      	adds	r4, r2, r3
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	3301      	adds	r3, #1
 8011202:	4618      	mov	r0, r3
 8011204:	f002 fe46 	bl	8013e94 <malloc>
 8011208:	4603      	mov	r3, r0
 801120a:	6023      	str	r3, [r4, #0]

				strncpy((*word_array)[i], q, length);
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	4413      	add	r3, r2
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	6939      	ldr	r1, [r7, #16]
 801121c:	4618      	mov	r0, r3
 801121e:	f003 fc7b 	bl	8014b18 <strncpy>
				(*word_array)[i][length] = '\0';
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	009b      	lsls	r3, r3, #2
 801122a:	4413      	add	r3, r2
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	4413      	add	r3, r2
 8011232:	2200      	movs	r2, #0
 8011234:	701a      	strb	r2, [r3, #0]

				++i;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	3301      	adds	r3, #1
 801123a:	617b      	str	r3, [r7, #20]
		while (*p) {
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d1ad      	bne.n	80111a0 <string_parser+0xa0>
			}
		}
	}

	return n;
 8011244:	69fb      	ldr	r3, [r7, #28]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3724      	adds	r7, #36	; 0x24
 801124a:	46bd      	mov	sp, r7
 801124c:	bd90      	pop	{r4, r7, pc}

0801124e <PlotData>:

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 801124e:	b580      	push	{r7, lr}
 8011250:	b082      	sub	sp, #8
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
 8011256:	6039      	str	r1, [r7, #0]
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	b29b      	uxth	r3, r3
 801125c:	683a      	ldr	r2, [r7, #0]
 801125e:	b291      	uxth	r1, r2
 8011260:	2201      	movs	r2, #1
 8011262:	4618      	mov	r0, r3
 8011264:	f7f0 f9da 	bl	800161c <BSP_LCD_DrawPixel>
}
 8011268:	bf00      	nop
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <InitScreen>:

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]

	BSP_LCD_Clear(BackGroundColor);
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f7f0 f822 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ef ffd5 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 8011286:	6838      	ldr	r0, [r7, #0]
 8011288:	f7ef ffba 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 801128c:	4803      	ldr	r0, [pc, #12]	; (801129c <InitScreen+0x2c>)
 801128e:	f7ef ffe9 	bl	8001264 <BSP_LCD_SetFont>
}
 8011292:	bf00      	nop
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	20000008 	.word	0x20000008

080112a0 <LCDWrite>:

void LCDWrite(uint32_t Line, char Str[]) {
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b090      	sub	sp, #64	; 0x40
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
	char IntStr[50];

	BSP_LCD_ClearStringLine(Line);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7f0 f832 	bl	8001314 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 80112b0:	f107 030c 	add.w	r3, r7, #12
 80112b4:	683a      	ldr	r2, [r7, #0]
 80112b6:	2132      	movs	r1, #50	; 0x32
 80112b8:	4618      	mov	r0, r3
 80112ba:	f003 fbcd 	bl	8014a58 <sniprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	f107 020c 	add.w	r2, r7, #12
 80112c6:	4611      	mov	r1, r2
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7f0 f98f 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
}
 80112ce:	bf00      	nop
 80112d0:	3740      	adds	r7, #64	; 0x40
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
	...

080112d8 <CountDown>:

void CountDown(uint32_t millisecs) {
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 80112e0:	f04f 31ff 	mov.w	r1, #4294967295
 80112e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80112e8:	f7ff ffc2 	bl	8011270 <InitScreen>

	LCDWrite(5, " ");
 80112ec:	4914      	ldr	r1, [pc, #80]	; (8011340 <CountDown+0x68>)
 80112ee:	2005      	movs	r0, #5
 80112f0:	f7ff ffd6 	bl	80112a0 <LCDWrite>
	HAL_Delay(1);
 80112f4:	2001      	movs	r0, #1
 80112f6:	f7f0 fca7 	bl	8001c48 <HAL_Delay>

	LCDWrite(5, "Starting in 3... ");
 80112fa:	4912      	ldr	r1, [pc, #72]	; (8011344 <CountDown+0x6c>)
 80112fc:	2005      	movs	r0, #5
 80112fe:	f7ff ffcf 	bl	80112a0 <LCDWrite>
	HAL_Delay(millisecs);
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7f0 fca0 	bl	8001c48 <HAL_Delay>

	LCDWrite(5, "Starting in 2... ");
 8011308:	490f      	ldr	r1, [pc, #60]	; (8011348 <CountDown+0x70>)
 801130a:	2005      	movs	r0, #5
 801130c:	f7ff ffc8 	bl	80112a0 <LCDWrite>
	HAL_Delay(millisecs);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7f0 fc99 	bl	8001c48 <HAL_Delay>

	LCDWrite(5, "Starting in 1... ");
 8011316:	490d      	ldr	r1, [pc, #52]	; (801134c <CountDown+0x74>)
 8011318:	2005      	movs	r0, #5
 801131a:	f7ff ffc1 	bl	80112a0 <LCDWrite>
	HAL_Delay(millisecs);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7f0 fc92 	bl	8001c48 <HAL_Delay>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 8011324:	490a      	ldr	r1, [pc, #40]	; (8011350 <CountDown+0x78>)
 8011326:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801132a:	f7ff ffa1 	bl	8011270 <InitScreen>
	LCDWrite(5, "GO!");
 801132e:	4909      	ldr	r1, [pc, #36]	; (8011354 <CountDown+0x7c>)
 8011330:	2005      	movs	r0, #5
 8011332:	f7ff ffb5 	bl	80112a0 <LCDWrite>
}
 8011336:	bf00      	nop
 8011338:	3708      	adds	r7, #8
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	08016c60 	.word	0x08016c60
 8011344:	08016c64 	.word	0x08016c64
 8011348:	08016c78 	.word	0x08016c78
 801134c:	08016c8c 	.word	0x08016c8c
 8011350:	ffff0000 	.word	0xffff0000
 8011354:	08016ca0 	.word	0x08016ca0

08011358 <scan_files>:

FRESULT scan_files(char* path
// Start node to be scanned, also used as work area
		) {
 8011358:	b580      	push	{r7, lr}
 801135a:	b090      	sub	sp, #64	; 0x40
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 8011360:	f107 0308 	add.w	r3, r7, #8
 8011364:	6879      	ldr	r1, [r7, #4]
 8011366:	4618      	mov	r0, r3
 8011368:	f7fa f867 	bl	800b43a <f_opendir>
 801136c:	4603      	mov	r3, r0
 801136e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011372:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011376:	2b00      	cmp	r3, #0
 8011378:	d140      	bne.n	80113fc <scan_files+0xa4>
		for (;;) {
			res = f_readdir(&dir, &fno); /* Read a directory item */
 801137a:	f107 0308 	add.w	r3, r7, #8
 801137e:	4922      	ldr	r1, [pc, #136]	; (8011408 <scan_files+0xb0>)
 8011380:	4618      	mov	r0, r3
 8011382:	f7fa f8fe 	bl	800b582 <f_readdir>
 8011386:	4603      	mov	r3, r0
 8011388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (res != FR_OK || fno.fname[0] == 0)
 801138c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011390:	2b00      	cmp	r3, #0
 8011392:	d12e      	bne.n	80113f2 <scan_files+0x9a>
 8011394:	4b1c      	ldr	r3, [pc, #112]	; (8011408 <scan_files+0xb0>)
 8011396:	7a5b      	ldrb	r3, [r3, #9]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d02a      	beq.n	80113f2 <scan_files+0x9a>
				break; /* Break on error or end of dir */
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 801139c:	4b1a      	ldr	r3, [pc, #104]	; (8011408 <scan_files+0xb0>)
 801139e:	7a1b      	ldrb	r3, [r3, #8]
 80113a0:	f003 0310 	and.w	r3, r3, #16
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d01b      	beq.n	80113e0 <scan_files+0x88>
				i = strlen(path);
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7ee ff3b 	bl	8000224 <strlen>
 80113ae:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(&path[i], "/%s", fno.fname);
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b4:	4413      	add	r3, r2
 80113b6:	4a15      	ldr	r2, [pc, #84]	; (801140c <scan_files+0xb4>)
 80113b8:	4915      	ldr	r1, [pc, #84]	; (8011410 <scan_files+0xb8>)
 80113ba:	4618      	mov	r0, r3
 80113bc:	f003 fb80 	bl	8014ac0 <siprintf>
				res = scan_files(path); /* Enter the directory */
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f7ff ffc9 	bl	8011358 <scan_files>
 80113c6:	4603      	mov	r3, r0
 80113c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if (res != FR_OK)
 80113cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10d      	bne.n	80113f0 <scan_files+0x98>
					break;
				path[i] = 0;
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d8:	4413      	add	r3, r2
 80113da:	2200      	movs	r2, #0
 80113dc:	701a      	strb	r2, [r3, #0]
 80113de:	e7cc      	b.n	801137a <scan_files+0x22>
			} else { /* It is a file. */
				printf("%s/%s 		%lu \r\n", path, fno.fname, fno.fsize);
 80113e0:	4b09      	ldr	r3, [pc, #36]	; (8011408 <scan_files+0xb0>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a09      	ldr	r2, [pc, #36]	; (801140c <scan_files+0xb4>)
 80113e6:	6879      	ldr	r1, [r7, #4]
 80113e8:	480a      	ldr	r0, [pc, #40]	; (8011414 <scan_files+0xbc>)
 80113ea:	f003 faa1 	bl	8014930 <iprintf>
			res = f_readdir(&dir, &fno); /* Read a directory item */
 80113ee:	e7c4      	b.n	801137a <scan_files+0x22>
					break;
 80113f0:	bf00      	nop
			}
		}
		f_closedir(&dir);
 80113f2:	f107 0308 	add.w	r3, r7, #8
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fa f898 	bl	800b52c <f_closedir>
	}

	return res;
 80113fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011400:	4618      	mov	r0, r3
 8011402:	3740      	adds	r7, #64	; 0x40
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	20000478 	.word	0x20000478
 801140c:	20000481 	.word	0x20000481
 8011410:	08016ca4 	.word	0x08016ca4
 8011414:	08016ca8 	.word	0x08016ca8

08011418 <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 8011418:	b590      	push	{r4, r7, lr}
 801141a:	b087      	sub	sp, #28
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 8011424:	4814      	ldr	r0, [pc, #80]	; (8011478 <SamplePoints+0x60>)
 8011426:	f7f0 fc75 	bl	8001d14 <HAL_ADC_Start>

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 801142a:	2300      	movs	r3, #0
 801142c:	617b      	str	r3, [r7, #20]
 801142e:	e00d      	b.n	801144c <SamplePoints+0x34>
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	18d4      	adds	r4, r2, r3
 801143a:	480f      	ldr	r0, [pc, #60]	; (8011478 <SamplePoints+0x60>)
 801143c:	f7f0 fd0e 	bl	8001e5c <HAL_ADC_GetValue>
 8011440:	4603      	mov	r3, r0
 8011442:	b29b      	uxth	r3, r3
 8011444:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < NoOfPoints; i++) {
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	3301      	adds	r3, #1
 801144a:	617b      	str	r3, [r7, #20]
 801144c:	697a      	ldr	r2, [r7, #20]
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	429a      	cmp	r2, r3
 8011452:	d3ed      	bcc.n	8011430 <SamplePoints+0x18>
		// Produce Period_us delay
		//DWT_Delay_us(Period_us);
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8011454:	f04f 31ff 	mov.w	r1, #4294967295
 8011458:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801145c:	f7ff ff08 	bl	8011270 <InitScreen>
	LCDWrite(5, "DONE!");
 8011460:	4906      	ldr	r1, [pc, #24]	; (801147c <SamplePoints+0x64>)
 8011462:	2005      	movs	r0, #5
 8011464:	f7ff ff1c 	bl	80112a0 <LCDWrite>

	printf("Sampling done.\r\n");
 8011468:	4805      	ldr	r0, [pc, #20]	; (8011480 <SamplePoints+0x68>)
 801146a:	f003 fad5 	bl	8014a18 <puts>
}
 801146e:	bf00      	nop
 8011470:	371c      	adds	r7, #28
 8011472:	46bd      	mov	sp, r7
 8011474:	bd90      	pop	{r4, r7, pc}
 8011476:	bf00      	nop
 8011478:	20000b74 	.word	0x20000b74
 801147c:	08016cb8 	.word	0x08016cb8
 8011480:	08016cc0 	.word	0x08016cc0

08011484 <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 8011484:	b5b0      	push	{r4, r5, r7, lr}
 8011486:	b09a      	sub	sp, #104	; 0x68
 8011488:	af02      	add	r7, sp, #8
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	607a      	str	r2, [r7, #4]

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start averaging... \r\n");
 8011490:	4842      	ldr	r0, [pc, #264]	; (801159c <AvgAndPlotPoints+0x118>)
 8011492:	f003 fac1 	bl	8014a18 <puts>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 8011496:	4942      	ldr	r1, [pc, #264]	; (80115a0 <AvgAndPlotPoints+0x11c>)
 8011498:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801149c:	f7ff fee8 	bl	8011270 <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 80114a0:	2300      	movs	r3, #0
 80114a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80114a4:	e059      	b.n	801155a <AvgAndPlotPoints+0xd6>
		BufferSum = 0;
 80114a6:	2300      	movs	r3, #0
 80114a8:	657b      	str	r3, [r7, #84]	; 0x54

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 80114aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80114ae:	e00c      	b.n	80114ca <AvgAndPlotPoints+0x46>
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114b6:	005b      	lsls	r3, r3, #1
 80114b8:	4413      	add	r3, r2
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	461a      	mov	r2, r3
 80114be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114c0:	4413      	add	r3, r2
 80114c2:	657b      	str	r3, [r7, #84]	; 0x54
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 80114c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114c6:	3301      	adds	r3, #1
 80114c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80114ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	441a      	add	r2, r3
 80114d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d8ec      	bhi.n	80114b0 <AvgAndPlotPoints+0x2c>
		}

		BufferAvg = BufferSum / AvgSize;
 80114d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	fbb2 f3f3 	udiv	r3, r2, r3
 80114de:	653b      	str	r3, [r7, #80]	; 0x50

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 80114e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80114e2:	f7ef f83f 	bl	8000564 <__aeabi_ui2d>
 80114e6:	f04f 0200 	mov.w	r2, #0
 80114ea:	4b2e      	ldr	r3, [pc, #184]	; (80115a4 <AvgAndPlotPoints+0x120>)
 80114ec:	f7ef f8b0 	bl	8000650 <__aeabi_dmul>
 80114f0:	4603      	mov	r3, r0
 80114f2:	460c      	mov	r4, r1
 80114f4:	4625      	mov	r5, r4
 80114f6:	461c      	mov	r4, r3
 80114f8:	68b8      	ldr	r0, [r7, #8]
 80114fa:	f7ef f833 	bl	8000564 <__aeabi_ui2d>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4620      	mov	r0, r4
 8011504:	4629      	mov	r1, r5
 8011506:	f7ef f9cd 	bl	80008a4 <__aeabi_ddiv>
 801150a:	4603      	mov	r3, r0
 801150c:	460c      	mov	r4, r1
 801150e:	4618      	mov	r0, r3
 8011510:	4621      	mov	r1, r4
 8011512:	f7ef fb75 	bl	8000c00 <__aeabi_d2uiz>
 8011516:	4603      	mov	r3, r0
 8011518:	64fb      	str	r3, [r7, #76]	; 0x4c
		YCoord = (272.0 * (BufferAvg / 65536.0));
 801151a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801151c:	f7ef f822 	bl	8000564 <__aeabi_ui2d>
 8011520:	f04f 0200 	mov.w	r2, #0
 8011524:	4b20      	ldr	r3, [pc, #128]	; (80115a8 <AvgAndPlotPoints+0x124>)
 8011526:	f7ef f9bd 	bl	80008a4 <__aeabi_ddiv>
 801152a:	4603      	mov	r3, r0
 801152c:	460c      	mov	r4, r1
 801152e:	4618      	mov	r0, r3
 8011530:	4621      	mov	r1, r4
 8011532:	f04f 0200 	mov.w	r2, #0
 8011536:	4b1d      	ldr	r3, [pc, #116]	; (80115ac <AvgAndPlotPoints+0x128>)
 8011538:	f7ef f88a 	bl	8000650 <__aeabi_dmul>
 801153c:	4603      	mov	r3, r0
 801153e:	460c      	mov	r4, r1
 8011540:	4618      	mov	r0, r3
 8011542:	4621      	mov	r1, r4
 8011544:	f7ef fb5c 	bl	8000c00 <__aeabi_d2uiz>
 8011548:	4603      	mov	r3, r0
 801154a:	64bb      	str	r3, [r7, #72]	; 0x48

		PlotData(XCoord, YCoord);
 801154c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801154e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011550:	f7ff fe7d 	bl	801124e <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 8011554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011556:	3301      	adds	r3, #1
 8011558:	65fb      	str	r3, [r7, #92]	; 0x5c
 801155a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	429a      	cmp	r2, r3
 8011560:	d3a1      	bcc.n	80114a6 <AvgAndPlotPoints+0x22>
	}

	printf("Averaging done, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011566:	4812      	ldr	r0, [pc, #72]	; (80115b0 <AvgAndPlotPoints+0x12c>)
 8011568:	f003 f9e2 	bl	8014930 <iprintf>

	LCDWrite(0, "");
 801156c:	4911      	ldr	r1, [pc, #68]	; (80115b4 <AvgAndPlotPoints+0x130>)
 801156e:	2000      	movs	r0, #0
 8011570:	f7ff fe96 	bl	80112a0 <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 8011574:	f107 0014 	add.w	r0, r7, #20
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	4a0e      	ldr	r2, [pc, #56]	; (80115b8 <AvgAndPlotPoints+0x134>)
 8011580:	2132      	movs	r1, #50	; 0x32
 8011582:	f003 fa69 	bl	8014a58 <sniprintf>
	LCDWrite(0, MyStr);
 8011586:	f107 0314 	add.w	r3, r7, #20
 801158a:	4619      	mov	r1, r3
 801158c:	2000      	movs	r0, #0
 801158e:	f7ff fe87 	bl	80112a0 <LCDWrite>
}
 8011592:	bf00      	nop
 8011594:	3760      	adds	r7, #96	; 0x60
 8011596:	46bd      	mov	sp, r7
 8011598:	bdb0      	pop	{r4, r5, r7, pc}
 801159a:	bf00      	nop
 801159c:	08016cd0 	.word	0x08016cd0
 80115a0:	ffff0000 	.word	0xffff0000
 80115a4:	407e0000 	.word	0x407e0000
 80115a8:	40f00000 	.word	0x40f00000
 80115ac:	40710000 	.word	0x40710000
 80115b0:	08016ce8 	.word	0x08016ce8
 80115b4:	08016d14 	.word	0x08016d14
 80115b8:	08016d18 	.word	0x08016d18

080115bc <WriteData2FS>:

void WriteData2FS(Array *Data, uint32_t NoOfPoints, uint32_t MeasNo) {
 80115bc:	b580      	push	{r7, lr}
 80115be:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	f107 030c 	add.w	r3, r7, #12
 80115c8:	6018      	str	r0, [r3, #0]
 80115ca:	f107 0308 	add.w	r3, r7, #8
 80115ce:	6019      	str	r1, [r3, #0]
 80115d0:	1d3b      	adds	r3, r7, #4
 80115d2:	601a      	str	r2, [r3, #0]

	// Create file for data, as meas#.txt

	FRESULT res; // FatFs function common result code
	uint32_t byteswritten, totalbytes; //File write counts
	char buffer[1000] = " ";
 80115d4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80115d8:	2220      	movs	r2, #32
 80115da:	601a      	str	r2, [r3, #0]
 80115dc:	3304      	adds	r3, #4
 80115de:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80115e2:	2100      	movs	r1, #0
 80115e4:	4618      	mov	r0, r3
 80115e6:	f002 fc82 	bl	8013eee <memset>

	char* fname = (char *) (sprintf("meas_%lu.txt", (char *) MeasNo));
 80115ea:	1d3b      	adds	r3, r7, #4
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	4619      	mov	r1, r3
 80115f0:	483b      	ldr	r0, [pc, #236]	; (80116e0 <WriteData2FS+0x124>)
 80115f2:	f003 fa65 	bl	8014ac0 <siprintf>
 80115f6:	4603      	mov	r3, r0
 80115f8:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
	FIL MyFile;
	uint32_t idx;

	totalbytes = 0;
 80115fc:	2300      	movs	r3, #0
 80115fe:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c

	if (f_open(&MyFile, fname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8011602:	f107 0314 	add.w	r3, r7, #20
 8011606:	220a      	movs	r2, #10
 8011608:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 801160c:	4618      	mov	r0, r3
 801160e:	f7f9 f985 	bl	800a91c <f_open>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d004      	beq.n	8011622 <WriteData2FS+0x66>

		// File Open for write Error
		_Error_Handler(__FILE__, __LINE__);
 8011618:	21f2      	movs	r1, #242	; 0xf2
 801161a:	4832      	ldr	r0, [pc, #200]	; (80116e4 <WriteData2FS+0x128>)
 801161c:	f001 fc4c 	bl	8012eb8 <_Error_Handler>
		/*##-6- Close the open text file #################################*/
		f_close(&MyFile);

		printf("Closed file %s OK \r\n", fname);
	}
}
 8011620:	e059      	b.n	80116d6 <WriteData2FS+0x11a>
		printf("Opened file %s OK \r\n", fname);
 8011622:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011626:	4830      	ldr	r0, [pc, #192]	; (80116e8 <WriteData2FS+0x12c>)
 8011628:	f003 f982 	bl	8014930 <iprintf>
		for (idx = 0; idx < NoOfPoints; idx++) {
 801162c:	2300      	movs	r3, #0
 801162e:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 8011632:	e038      	b.n	80116a6 <WriteData2FS+0xea>
			sprintf(buffer, "%lu \r\n", ((uint32_t) Data->array[idx]));
 8011634:	f107 030c 	add.w	r3, r7, #12
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 8011640:	005b      	lsls	r3, r3, #1
 8011642:	4413      	add	r3, r2
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	461a      	mov	r2, r3
 8011648:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801164c:	4927      	ldr	r1, [pc, #156]	; (80116ec <WriteData2FS+0x130>)
 801164e:	4618      	mov	r0, r3
 8011650:	f003 fa36 	bl	8014ac0 <siprintf>
			res = f_write(&MyFile, buffer, strlen(buffer),
 8011654:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8011658:	4618      	mov	r0, r3
 801165a:	f7ee fde3 	bl	8000224 <strlen>
 801165e:	4602      	mov	r2, r0
 8011660:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 8011664:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8011668:	f107 0014 	add.w	r0, r7, #20
 801166c:	f7f9 fc89 	bl	800af82 <f_write>
 8011670:	4603      	mov	r3, r0
 8011672:	f887 3633 	strb.w	r3, [r7, #1587]	; 0x633
			totalbytes += byteswritten;
 8011676:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 801167a:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 801167e:	4413      	add	r3, r2
 8011680:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
			if ((byteswritten == 0) || (res != FR_OK)) {
 8011684:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8011688:	2b00      	cmp	r3, #0
 801168a:	d003      	beq.n	8011694 <WriteData2FS+0xd8>
 801168c:	f897 3633 	ldrb.w	r3, [r7, #1587]	; 0x633
 8011690:	2b00      	cmp	r3, #0
 8011692:	d003      	beq.n	801169c <WriteData2FS+0xe0>
				_Error_Handler(__FILE__, __LINE__);
 8011694:	21fe      	movs	r1, #254	; 0xfe
 8011696:	4813      	ldr	r0, [pc, #76]	; (80116e4 <WriteData2FS+0x128>)
 8011698:	f001 fc0e 	bl	8012eb8 <_Error_Handler>
		for (idx = 0; idx < NoOfPoints; idx++) {
 801169c:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 80116a0:	3301      	adds	r3, #1
 80116a2:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 80116a6:	f107 0308 	add.w	r3, r7, #8
 80116aa:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d3bf      	bcc.n	8011634 <WriteData2FS+0x78>
		printf("File %s, %lu bytes written \r\n", fname, totalbytes);
 80116b4:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 80116b8:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 80116bc:	480c      	ldr	r0, [pc, #48]	; (80116f0 <WriteData2FS+0x134>)
 80116be:	f003 f937 	bl	8014930 <iprintf>
		f_close(&MyFile);
 80116c2:	f107 0314 	add.w	r3, r7, #20
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7f9 fe88 	bl	800b3dc <f_close>
		printf("Closed file %s OK \r\n", fname);
 80116cc:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 80116d0:	4808      	ldr	r0, [pc, #32]	; (80116f4 <WriteData2FS+0x138>)
 80116d2:	f003 f92d 	bl	8014930 <iprintf>
}
 80116d6:	bf00      	nop
 80116d8:	f507 67c8 	add.w	r7, r7, #1600	; 0x640
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}
 80116e0:	08016d30 	.word	0x08016d30
 80116e4:	08016d40 	.word	0x08016d40
 80116e8:	08016d54 	.word	0x08016d54
 80116ec:	08016d6c 	.word	0x08016d6c
 80116f0:	08016d74 	.word	0x08016d74
 80116f4:	08016d94 	.word	0x08016d94

080116f8 <DirList>:

void DirList(void) {
 80116f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116fa:	f5ad 7d55 	sub.w	sp, sp, #852	; 0x354
 80116fe:	af02      	add	r7, sp, #8
	FATFS fs;
	FRESULT res;
	char buff[256];

	// Should be mounted already
	res = f_mount(&fs, "", 1);
 8011700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011704:	2201      	movs	r2, #1
 8011706:	493b      	ldr	r1, [pc, #236]	; (80117f4 <DirList+0xfc>)
 8011708:	4618      	mov	r0, r3
 801170a:	f7f9 f8a3 	bl	800a854 <f_mount>
 801170e:	4603      	mov	r3, r0
 8011710:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	if (res == FR_OK) {
 8011714:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011718:	2b00      	cmp	r3, #0
 801171a:	d15e      	bne.n	80117da <DirList+0xe2>
		strcpy(buff, "");
 801171c:	4b35      	ldr	r3, [pc, #212]	; (80117f4 <DirList+0xfc>)
 801171e:	781a      	ldrb	r2, [r3, #0]
 8011720:	f107 0308 	add.w	r3, r7, #8
 8011724:	701a      	strb	r2, [r3, #0]

		// File list
		res = scan_files(buff);
 8011726:	f107 0308 	add.w	r3, r7, #8
 801172a:	4618      	mov	r0, r3
 801172c:	f7ff fe14 	bl	8011358 <scan_files>
 8011730:	4603      	mov	r3, r0
 8011732:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		// Disk free space
		DWORD fre_clust, fre_sect, tot_sect;
		FATFS *fsp;

		// Get volume information and free clusters of drive 1
		res = f_getfree(buff, &fre_clust, &fsp);
 8011736:	463a      	mov	r2, r7
 8011738:	1d39      	adds	r1, r7, #4
 801173a:	f107 0308 	add.w	r3, r7, #8
 801173e:	4618      	mov	r0, r3
 8011740:	f7f9 ff62 	bl	800b608 <f_getfree>
 8011744:	4603      	mov	r3, r0
 8011746:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		if (res) {
 801174a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 801174e:	2b00      	cmp	r3, #0
 8011750:	d007      	beq.n	8011762 <DirList+0x6a>
			printf("Error: Filesystem free space check failed \r\n");
 8011752:	4829      	ldr	r0, [pc, #164]	; (80117f8 <DirList+0x100>)
 8011754:	f003 f960 	bl	8014a18 <puts>
			_Error_Handler(__FILE__, __LINE__);
 8011758:	f240 1121 	movw	r1, #289	; 0x121
 801175c:	4827      	ldr	r0, [pc, #156]	; (80117fc <DirList+0x104>)
 801175e:	f001 fbab 	bl	8012eb8 <_Error_Handler>
		}

		// Get total sectors and free sectors
		tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 8011762:	463b      	mov	r3, r7
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	699b      	ldr	r3, [r3, #24]
 8011768:	3b02      	subs	r3, #2
 801176a:	463a      	mov	r2, r7
 801176c:	6812      	ldr	r2, [r2, #0]
 801176e:	8952      	ldrh	r2, [r2, #10]
 8011770:	fb02 f303 	mul.w	r3, r2, r3
 8011774:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
		fre_sect = fre_clust * fsp->csize;
 8011778:	463b      	mov	r3, r7
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	895b      	ldrh	r3, [r3, #10]
 801177e:	461a      	mov	r2, r3
 8011780:	1d3b      	adds	r3, r7, #4
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	fb03 f302 	mul.w	r3, r3, r2
 8011788:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c

		// Print the free space (assuming 512 bytes/sector)
		printf(
 801178c:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8011790:	085d      	lsrs	r5, r3, #1
 8011792:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011796:	085e      	lsrs	r6, r3, #1
				"%10lu KiB total drive space.\n%10lu KiB available (%.2f\%%). \n",
				tot_sect / 2, fre_sect / 2,
				(((float) (fre_sect)) / ((float) (tot_sect)) * 100.0));
 8011798:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801179c:	ee07 3a90 	vmov	s15, r3
 80117a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80117a4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80117a8:	ee07 3a90 	vmov	s15, r3
 80117ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80117b4:	ee16 0a90 	vmov	r0, s13
 80117b8:	f7ee fef6 	bl	80005a8 <__aeabi_f2d>
		printf(
 80117bc:	f04f 0200 	mov.w	r2, #0
 80117c0:	4b0f      	ldr	r3, [pc, #60]	; (8011800 <DirList+0x108>)
 80117c2:	f7ee ff45 	bl	8000650 <__aeabi_dmul>
 80117c6:	4603      	mov	r3, r0
 80117c8:	460c      	mov	r4, r1
 80117ca:	e88d 0018 	stmia.w	sp, {r3, r4}
 80117ce:	4632      	mov	r2, r6
 80117d0:	4629      	mov	r1, r5
 80117d2:	480c      	ldr	r0, [pc, #48]	; (8011804 <DirList+0x10c>)
 80117d4:	f003 f8ac 	bl	8014930 <iprintf>

	} else {
		printf("Error: Filesystem mount failed \r\n");
		_Error_Handler(__FILE__, __LINE__);
	}
}
 80117d8:	e007      	b.n	80117ea <DirList+0xf2>
		printf("Error: Filesystem mount failed \r\n");
 80117da:	480b      	ldr	r0, [pc, #44]	; (8011808 <DirList+0x110>)
 80117dc:	f003 f91c 	bl	8014a18 <puts>
		_Error_Handler(__FILE__, __LINE__);
 80117e0:	f44f 7198 	mov.w	r1, #304	; 0x130
 80117e4:	4805      	ldr	r0, [pc, #20]	; (80117fc <DirList+0x104>)
 80117e6:	f001 fb67 	bl	8012eb8 <_Error_Handler>
}
 80117ea:	bf00      	nop
 80117ec:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117f4:	08016d14 	.word	0x08016d14
 80117f8:	08016dac 	.word	0x08016dac
 80117fc:	08016d40 	.word	0x08016d40
 8011800:	40590000 	.word	0x40590000
 8011804:	08016dd8 	.word	0x08016dd8
 8011808:	08016e18 	.word	0x08016e18

0801180c <SCB_EnableICache>:
{
 801180c:	b480      	push	{r7}
 801180e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011814:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011818:	4b09      	ldr	r3, [pc, #36]	; (8011840 <SCB_EnableICache+0x34>)
 801181a:	2200      	movs	r2, #0
 801181c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011820:	4a07      	ldr	r2, [pc, #28]	; (8011840 <SCB_EnableICache+0x34>)
 8011822:	4b07      	ldr	r3, [pc, #28]	; (8011840 <SCB_EnableICache+0x34>)
 8011824:	695b      	ldr	r3, [r3, #20]
 8011826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801182a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801182c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011830:	f3bf 8f6f 	isb	sy
}
 8011834:	bf00      	nop
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr
 801183e:	bf00      	nop
 8011840:	e000ed00 	.word	0xe000ed00

08011844 <SCB_EnableDCache>:
{
 8011844:	b480      	push	{r7}
 8011846:	b085      	sub	sp, #20
 8011848:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 801184a:	4b1d      	ldr	r3, [pc, #116]	; (80118c0 <SCB_EnableDCache+0x7c>)
 801184c:	2200      	movs	r2, #0
 801184e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011852:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8011856:	4b1a      	ldr	r3, [pc, #104]	; (80118c0 <SCB_EnableDCache+0x7c>)
 8011858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801185c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	0b5b      	lsrs	r3, r3, #13
 8011862:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011866:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	08db      	lsrs	r3, r3, #3
 801186c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011870:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011872:	4913      	ldr	r1, [pc, #76]	; (80118c0 <SCB_EnableDCache+0x7c>)
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	015a      	lsls	r2, r3, #5
 8011878:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801187c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011882:	4313      	orrs	r3, r2
 8011884:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	1e5a      	subs	r2, r3, #1
 801188c:	60ba      	str	r2, [r7, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1ef      	bne.n	8011872 <SCB_EnableDCache+0x2e>
    } while(sets--);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	1e5a      	subs	r2, r3, #1
 8011896:	60fa      	str	r2, [r7, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1e5      	bne.n	8011868 <SCB_EnableDCache+0x24>
 801189c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80118a0:	4a07      	ldr	r2, [pc, #28]	; (80118c0 <SCB_EnableDCache+0x7c>)
 80118a2:	4b07      	ldr	r3, [pc, #28]	; (80118c0 <SCB_EnableDCache+0x7c>)
 80118a4:	695b      	ldr	r3, [r3, #20]
 80118a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80118aa:	6153      	str	r3, [r2, #20]
 80118ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80118b0:	f3bf 8f6f 	isb	sy
}
 80118b4:	bf00      	nop
 80118b6:	3714      	adds	r7, #20
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr
 80118c0:	e000ed00 	.word	0xe000ed00
 80118c4:	00000000 	.word	0x00000000

080118c8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80118c8:	b5b0      	push	{r4, r5, r7, lr}
 80118ca:	b0da      	sub	sp, #360	; 0x168
 80118cc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 80118ce:	4bba      	ldr	r3, [pc, #744]	; (8011bb8 <main+0x2f0>)
 80118d0:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80118d4:	461d      	mov	r5, r3
 80118d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118de:	682b      	ldr	r3, [r5, #0]
 80118e0:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100]; /* File read buffer */

  /* USER CODE END 1 */

  /* Enable I-Cache-------------------------------------------------------------*/
  SCB_EnableICache();
 80118e2:	f7ff ff93 	bl	801180c <SCB_EnableICache>

  /* Enable D-Cache-------------------------------------------------------------*/
  SCB_EnableDCache();
 80118e6:	f7ff ffad 	bl	8011844 <SCB_EnableDCache>

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80118ea:	f7f0 f971 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80118ee:	f000 fb4f 	bl	8011f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80118f2:	f000 ff3f 	bl	8012774 <MX_GPIO_Init>
  MX_DMA_Init();
 80118f6:	f000 fe61 	bl	80125bc <MX_DMA_Init>
  MX_FMC_Init();
 80118fa:	f000 feef 	bl	80126dc <MX_FMC_Init>
  MX_ADC3_Init();
 80118fe:	f000 fbf5 	bl	80120ec <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8011902:	f000 fe0b 	bl	801251c <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8011906:	f000 fcef 	bl	80122e8 <MX_LTDC_Init>
  MX_I2C3_Init();
 801190a:	f000 fca3 	bl	8012254 <MX_I2C3_Init>
  MX_DMA2D_Init();
 801190e:	f000 fc67 	bl	80121e0 <MX_DMA2D_Init>
  MX_CRC_Init();
 8011912:	f000 fc3d 	bl	8012190 <MX_CRC_Init>
	MX_WWDG_Init();
 8011916:	f000 fe35 	bl	8012584 <MX_WWDG_Init>
  MX_TIM2_Init();
 801191a:	f000 fd67 	bl	80123ec <MX_TIM2_Init>
  MX_TIM3_Init();
 801191e:	f000 fdb1 	bl	8012484 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// Start SDRAM
	FMC_SDRAM_CommandTypeDef hsdram1Command;
	BSP_SDRAM_Initialization_Sequence(&hsdram1, &hsdram1Command);
 8011922:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011926:	4619      	mov	r1, r3
 8011928:	48a4      	ldr	r0, [pc, #656]	; (8011bbc <main+0x2f4>)
 801192a:	f7ff fb27 	bl	8010f7c <BSP_SDRAM_Initialization_Sequence>

	// Start LCD
	BSP_LCD_Init();
 801192e:	f7ef fb5f 	bl	8000ff0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8011932:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8011936:	2000      	movs	r0, #0
 8011938:	f7ef fbf2 	bl	8001120 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 801193c:	2000      	movs	r0, #0
 801193e:	f7ef fc4f 	bl	80011e0 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8011942:	f7ef ff2d 	bl	80017a0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8011946:	f04f 30ff 	mov.w	r0, #4294967295
 801194a:	f7ef fcbb 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 801194e:	f04f 30ff 	mov.w	r0, #4294967295
 8011952:	f7ef fc6d 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8011956:	489a      	ldr	r0, [pc, #616]	; (8011bc0 <main+0x2f8>)
 8011958:	f7ef fc52 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 1!");
 801195c:	4999      	ldr	r1, [pc, #612]	; (8011bc4 <main+0x2fc>)
 801195e:	2005      	movs	r0, #5
 8011960:	f7ef fe44 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 8011964:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011968:	f7f0 f96e 	bl	8001c48 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 801196c:	4894      	ldr	r0, [pc, #592]	; (8011bc0 <main+0x2f8>)
 801196e:	f7ef fca9 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8011972:	4893      	ldr	r0, [pc, #588]	; (8011bc0 <main+0x2f8>)
 8011974:	f7ef fc5c 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8011978:	f04f 30ff 	mov.w	r0, #4294967295
 801197c:	f7ef fc40 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 2!");
 8011980:	4991      	ldr	r1, [pc, #580]	; (8011bc8 <main+0x300>)
 8011982:	2005      	movs	r0, #5
 8011984:	f7ef fe32 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 8011988:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801198c:	f7f0 f95c 	bl	8001c48 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8011990:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011994:	f7ef fc96 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8011998:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801199c:	f7ef fc48 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80119a0:	f04f 30ff 	mov.w	r0, #4294967295
 80119a4:	f7ef fc2c 	bl	8001200 <BSP_LCD_SetTextColor>

	/* USER CODE START 2 */

	/*##-1- Link the SDRAM disk I/O driver ##################################*/
	if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
 80119a8:	4988      	ldr	r1, [pc, #544]	; (8011bcc <main+0x304>)
 80119aa:	4889      	ldr	r0, [pc, #548]	; (8011bd0 <main+0x308>)
 80119ac:	f7fa fb60 	bl	800c070 <FATFS_LinkDriver>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f040 809b 	bne.w	8011aee <main+0x226>
		printf("SDRAM FATFS link Success 1. \r\n");
 80119b8:	4886      	ldr	r0, [pc, #536]	; (8011bd4 <main+0x30c>)
 80119ba:	f003 f82d 	bl	8014a18 <puts>
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 80119be:	2200      	movs	r2, #0
 80119c0:	4982      	ldr	r1, [pc, #520]	; (8011bcc <main+0x304>)
 80119c2:	4885      	ldr	r0, [pc, #532]	; (8011bd8 <main+0x310>)
 80119c4:	f7f8 ff46 	bl	800a854 <f_mount>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d004      	beq.n	80119d8 <main+0x110>
			/* FatFs Initialization Error */
			_Error_Handler(__FILE__, __LINE__);
 80119ce:	21ef      	movs	r1, #239	; 0xef
 80119d0:	4882      	ldr	r0, [pc, #520]	; (8011bdc <main+0x314>)
 80119d2:	f001 fa71 	bl	8012eb8 <_Error_Handler>
 80119d6:	e08a      	b.n	8011aee <main+0x226>
		} else {
			printf("SDRAM FATFS mount Success 2. \r\n");
 80119d8:	4881      	ldr	r0, [pc, #516]	; (8011be0 <main+0x318>)
 80119da:	f003 f81d 	bl	8014a18 <puts>
			/*##-3- Create a FAT file system (format) on the logical drive #########*/
			/* WARNING: Formatting the uSD card will delete all content on the device */
			if (f_mkfs((TCHAR const*) SDRAMPath, FM_FAT32, 0, workBuffer,
 80119de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119e2:	9300      	str	r3, [sp, #0]
 80119e4:	4b7f      	ldr	r3, [pc, #508]	; (8011be4 <main+0x31c>)
 80119e6:	2200      	movs	r2, #0
 80119e8:	2102      	movs	r1, #2
 80119ea:	4878      	ldr	r0, [pc, #480]	; (8011bcc <main+0x304>)
 80119ec:	f7f9 fec8 	bl	800b780 <f_mkfs>
 80119f0:	4603      	mov	r3, r0
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d004      	beq.n	8011a00 <main+0x138>
					sizeof(workBuffer)) != FR_OK) {
				/* FatFs Format Error */
				_Error_Handler(__FILE__, __LINE__);
 80119f6:	21f7      	movs	r1, #247	; 0xf7
 80119f8:	4878      	ldr	r0, [pc, #480]	; (8011bdc <main+0x314>)
 80119fa:	f001 fa5d 	bl	8012eb8 <_Error_Handler>
 80119fe:	e076      	b.n	8011aee <main+0x226>
			} else {
				printf("SDRAM FATFS format Success 3. \r\n");
 8011a00:	4879      	ldr	r0, [pc, #484]	; (8011be8 <main+0x320>)
 8011a02:	f003 f809 	bl	8014a18 <puts>
				/*##-4- Create and Open a new text file object with write access #####*/
				if (f_open(&MyFile, "STM32.TXT",
 8011a06:	220a      	movs	r2, #10
 8011a08:	4978      	ldr	r1, [pc, #480]	; (8011bec <main+0x324>)
 8011a0a:	4879      	ldr	r0, [pc, #484]	; (8011bf0 <main+0x328>)
 8011a0c:	f7f8 ff86 	bl	800a91c <f_open>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d004      	beq.n	8011a20 <main+0x158>
						FA_CREATE_ALWAYS | FA_WRITE)
						!= FR_OK) {
					/* 'STM32.TXT' file Open for write Error */
					_Error_Handler(__FILE__, __LINE__);
 8011a16:	21ff      	movs	r1, #255	; 0xff
 8011a18:	4870      	ldr	r0, [pc, #448]	; (8011bdc <main+0x314>)
 8011a1a:	f001 fa4d 	bl	8012eb8 <_Error_Handler>
 8011a1e:	e066      	b.n	8011aee <main+0x226>
				} else {
					printf("SDRAM FATFS fopen Success 4. \r\n");
 8011a20:	4874      	ldr	r0, [pc, #464]	; (8011bf4 <main+0x32c>)
 8011a22:	f002 fff9 	bl	8014a18 <puts>
					/*##-5- Write data to the text file ################################*/
					res = f_write(&MyFile, wtext, sizeof(wtext),
 8011a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011a2a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8011a2e:	2221      	movs	r2, #33	; 0x21
 8011a30:	486f      	ldr	r0, [pc, #444]	; (8011bf0 <main+0x328>)
 8011a32:	f7f9 faa6 	bl	800af82 <f_write>
 8011a36:	4603      	mov	r3, r0
 8011a38:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
							(void *) &byteswritten);

					if ((byteswritten == 0) || (res != FR_OK)) {
 8011a3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d003      	beq.n	8011a4c <main+0x184>
 8011a44:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d005      	beq.n	8011a58 <main+0x190>
						/* 'STM32.TXT' file Write or EOF Error */
						_Error_Handler(__FILE__, __LINE__);
 8011a4c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8011a50:	4862      	ldr	r0, [pc, #392]	; (8011bdc <main+0x314>)
 8011a52:	f001 fa31 	bl	8012eb8 <_Error_Handler>
 8011a56:	e04a      	b.n	8011aee <main+0x226>
					} else {
						printf("SDRAM FATFS write Success 5. \r\n");
 8011a58:	4867      	ldr	r0, [pc, #412]	; (8011bf8 <main+0x330>)
 8011a5a:	f002 ffdd 	bl	8014a18 <puts>
						/*##-6- Close the open text file #################################*/
						f_close(&MyFile);
 8011a5e:	4864      	ldr	r0, [pc, #400]	; (8011bf0 <main+0x328>)
 8011a60:	f7f9 fcbc 	bl	800b3dc <f_close>
						printf("SDRAM FATFS fclose Success 6. \r\n");
 8011a64:	4865      	ldr	r0, [pc, #404]	; (8011bfc <main+0x334>)
 8011a66:	f002 ffd7 	bl	8014a18 <puts>

						/*##-7- Open the text file object with read access ###############*/
						if (f_open(&MyFile, "STM32.TXT", FA_READ)
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	495f      	ldr	r1, [pc, #380]	; (8011bec <main+0x324>)
 8011a6e:	4860      	ldr	r0, [pc, #384]	; (8011bf0 <main+0x328>)
 8011a70:	f7f8 ff54 	bl	800a91c <f_open>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d005      	beq.n	8011a86 <main+0x1be>
								!= FR_OK) {
							/* 'STM32.TXT' file Open for read Error */
							_Error_Handler(__FILE__, __LINE__);
 8011a7a:	f240 1113 	movw	r1, #275	; 0x113
 8011a7e:	4857      	ldr	r0, [pc, #348]	; (8011bdc <main+0x314>)
 8011a80:	f001 fa1a 	bl	8012eb8 <_Error_Handler>
 8011a84:	e033      	b.n	8011aee <main+0x226>
						} else {
							printf("SDRAM FATFS fopen(read) Success 7. \r\n");
 8011a86:	485e      	ldr	r0, [pc, #376]	; (8011c00 <main+0x338>)
 8011a88:	f002 ffc6 	bl	8014a18 <puts>
							/*##-8- Read data from the text file ###########################*/
							res = f_read(&MyFile, rtext, sizeof(rtext),
 8011a8c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8011a90:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8011a94:	2264      	movs	r2, #100	; 0x64
 8011a96:	4856      	ldr	r0, [pc, #344]	; (8011bf0 <main+0x328>)
 8011a98:	f7f9 f905 	bl	800aca6 <f_read>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
									(UINT*) &bytesread);

							if ((bytesread == 0) || (res != FR_OK)) {
 8011aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d003      	beq.n	8011ab2 <main+0x1ea>
 8011aaa:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d005      	beq.n	8011abe <main+0x1f6>
								/* 'STM32.TXT' file Read or EOF Error */
								_Error_Handler(__FILE__, __LINE__);
 8011ab2:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8011ab6:	4849      	ldr	r0, [pc, #292]	; (8011bdc <main+0x314>)
 8011ab8:	f001 f9fe 	bl	8012eb8 <_Error_Handler>
 8011abc:	e017      	b.n	8011aee <main+0x226>
							} else {
								printf("SDRAM FATFS read Success 8. \r\n");
 8011abe:	4851      	ldr	r0, [pc, #324]	; (8011c04 <main+0x33c>)
 8011ac0:	f002 ffaa 	bl	8014a18 <puts>
								/*##-9- Close the open text file #############################*/
								f_close(&MyFile);
 8011ac4:	484a      	ldr	r0, [pc, #296]	; (8011bf0 <main+0x328>)
 8011ac6:	f7f9 fc89 	bl	800b3dc <f_close>
								printf("SDRAM FATFS fclose Success 9. \r\n");
 8011aca:	484f      	ldr	r0, [pc, #316]	; (8011c08 <main+0x340>)
 8011acc:	f002 ffa4 	bl	8014a18 <puts>
								/*##-10- Compare read data with the expected data ############*/
								if ((bytesread != byteswritten)) {
 8011ad0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8011ad4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d005      	beq.n	8011ae8 <main+0x220>
									/* Read data is different from the expected data */
									_Error_Handler(__FILE__, __LINE__);
 8011adc:	f240 1125 	movw	r1, #293	; 0x125
 8011ae0:	483e      	ldr	r0, [pc, #248]	; (8011bdc <main+0x314>)
 8011ae2:	f001 f9e9 	bl	8012eb8 <_Error_Handler>
 8011ae6:	e002      	b.n	8011aee <main+0x226>
								} else {
									/* Success of the demo: no error occurrence */
									printf("SDRAM FATFS Success 10. \r\n");
 8011ae8:	4848      	ldr	r0, [pc, #288]	; (8011c0c <main+0x344>)
 8011aea:	f002 ff95 	bl	8014a18 <puts>
				}
			}
		}
	}

	DirList();
 8011aee:	f7ff fe03 	bl	80116f8 <DirList>

	char Arg[30];
	char Cmd[30];
	char CmdBuffer[30];

	size_t n = 0;
 8011af2:	2300      	movs	r3, #0
 8011af4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	uint32_t MeasNo = 0;
 8011af8:	2300      	movs	r3, #0
 8011afa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	uint32_t NoOfPoints = 19200;
 8011afe:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8011b02:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	uint32_t AvgSize = 10;
 8011b06:	230a      	movs	r3, #10
 8011b08:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	uint32_t Period_us = 100;
 8011b0c:	2364      	movs	r3, #100	; 0x64
 8011b0e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint32_t Count_ms = 1000;
 8011b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011b16:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	// Clear screen, set it up
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8011b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8011b1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011b22:	f7ff fba5 	bl	8011270 <InitScreen>

	// Initialize data storage
	// https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
	Array Data;
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 8011b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b2a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7ff fa9c 	bl	801106c <initArray>

	// LCDWrite(5, "Ready.");

	Cmd[0] = '\0';
 8011b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011b38:	2200      	movs	r2, #0
 8011b3a:	701a      	strb	r2, [r3, #0]
	Arg[0] = '\0';
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 8011b42:	e1c4      	b.n	8011ece <main+0x606>

		printf(
				"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
						"Sampling will take apprx %f secs \r\n", NoOfPoints,
				AvgSize, Period_us, Count_ms,
				((float) (NoOfPoints * Period_us / 1000000.0)));
 8011b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011b48:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8011b4c:	fb02 f303 	mul.w	r3, r2, r3
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7ee fd07 	bl	8000564 <__aeabi_ui2d>
 8011b56:	a316      	add	r3, pc, #88	; (adr r3, 8011bb0 <main+0x2e8>)
 8011b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5c:	f7ee fea2 	bl	80008a4 <__aeabi_ddiv>
 8011b60:	4603      	mov	r3, r0
 8011b62:	460c      	mov	r4, r1
 8011b64:	4618      	mov	r0, r3
 8011b66:	4621      	mov	r1, r4
 8011b68:	f7ef f86a 	bl	8000c40 <__aeabi_d2f>
 8011b6c:	4603      	mov	r3, r0
		printf(
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7ee fd1a 	bl	80005a8 <__aeabi_f2d>
 8011b74:	4603      	mov	r3, r0
 8011b76:	460c      	mov	r4, r1
 8011b78:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011b7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011b86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011b8a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011b8e:	4820      	ldr	r0, [pc, #128]	; (8011c10 <main+0x348>)
 8011b90:	f002 fece 	bl	8014930 <iprintf>

		Cmd[0] = '\0';
 8011b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011b98:	2200      	movs	r2, #0
 8011b9a:	701a      	strb	r2, [r3, #0]
		Arg[0] = '\0';
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		strcpy(CmdBuffer, " ");
 8011ba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011ba6:	2220      	movs	r2, #32
 8011ba8:	801a      	strh	r2, [r3, #0]
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8011baa:	e038      	b.n	8011c1e <main+0x356>
 8011bac:	f3af 8000 	nop.w
 8011bb0:	00000000 	.word	0x00000000
 8011bb4:	412e8480 	.word	0x412e8480
 8011bb8:	08017148 	.word	0x08017148
 8011bbc:	20000d2c 	.word	0x20000d2c
 8011bc0:	ff0000ff 	.word	0xff0000ff
 8011bc4:	08016e3c 	.word	0x08016e3c
 8011bc8:	08016e54 	.word	0x08016e54
 8011bcc:	20000fa4 	.word	0x20000fa4
 8011bd0:	08019c20 	.word	0x08019c20
 8011bd4:	08016e6c 	.word	0x08016e6c
 8011bd8:	2000122c 	.word	0x2000122c
 8011bdc:	08016e8c 	.word	0x08016e8c
 8011be0:	08016e9c 	.word	0x08016e9c
 8011be4:	20000da4 	.word	0x20000da4
 8011be8:	08016ebc 	.word	0x08016ebc
 8011bec:	08016edc 	.word	0x08016edc
 8011bf0:	20000fbc 	.word	0x20000fbc
 8011bf4:	08016ee8 	.word	0x08016ee8
 8011bf8:	08016f08 	.word	0x08016f08
 8011bfc:	08016f28 	.word	0x08016f28
 8011c00:	08016f48 	.word	0x08016f48
 8011c04:	08016f70 	.word	0x08016f70
 8011c08:	08016f90 	.word	0x08016f90
 8011c0c:	08016fb0 	.word	0x08016fb0
 8011c10:	08016fcc 	.word	0x08016fcc
			String_GetString((uint8_t *) CmdBuffer);
 8011c14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff f88d 	bl	8010d38 <String_GetString>
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8011c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c22:	49c7      	ldr	r1, [pc, #796]	; (8011f40 <main+0x678>)
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7ee faf3 	bl	8000210 <strcmp>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d0f1      	beq.n	8011c14 <main+0x34c>
 8011c30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d0ec      	beq.n	8011c14 <main+0x34c>
		}

		printf("\r\n I got %s \r\n", CmdBuffer);
 8011c3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c3e:	4619      	mov	r1, r3
 8011c40:	48c0      	ldr	r0, [pc, #768]	; (8011f44 <main+0x67c>)
 8011c42:	f002 fe75 	bl	8014930 <iprintf>

		// Parse command and possible numeric arg
		char s[] = "Initial string";
 8011c46:	1d3b      	adds	r3, r7, #4
 8011c48:	4abf      	ldr	r2, [pc, #764]	; (8011f48 <main+0x680>)
 8011c4a:	461c      	mov	r4, r3
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c50:	c407      	stmia	r4!, {r0, r1, r2}
 8011c52:	8023      	strh	r3, [r4, #0]
 8011c54:	3402      	adds	r4, #2
 8011c56:	0c1b      	lsrs	r3, r3, #16
 8011c58:	7023      	strb	r3, [r4, #0]
		char ** word_array = NULL;
 8011c5a:	463b      	mov	r3, r7
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	601a      	str	r2, [r3, #0]

		strcpy(s, CmdBuffer);
 8011c60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011c64:	1d3b      	adds	r3, r7, #4
 8011c66:	4611      	mov	r1, r2
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f002 ff4d 	bl	8014b08 <strcpy>
		n = string_parser(s, &word_array);
 8011c6e:	463a      	mov	r2, r7
 8011c70:	1d3b      	adds	r3, r7, #4
 8011c72:	4611      	mov	r1, r2
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff fa43 	bl	8011100 <string_parser>
 8011c7a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

		for (size_t i = 0; i < n; i++) {
 8011c7e:	2300      	movs	r3, #0
 8011c80:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8011c84:	e02d      	b.n	8011ce2 <main+0x41a>
			if (i == 0) {
 8011c86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10c      	bne.n	8011ca8 <main+0x3e0>
				strcpy(Cmd, word_array[i]);
 8011c8e:	463b      	mov	r3, r7
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4413      	add	r3, r2
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011ca0:	4611      	mov	r1, r2
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f002 ff30 	bl	8014b08 <strcpy>
			}
			if (i == 1) {
 8011ca8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d10c      	bne.n	8011cca <main+0x402>
				strcpy(Arg, word_array[i]);
 8011cb0:	463b      	mov	r3, r7
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	4413      	add	r3, r2
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f002 ff1f 	bl	8014b08 <strcpy>
			}
			if (i > 1) {
 8011cca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d902      	bls.n	8011cd8 <main+0x410>
				printf("Wrong number of arguments \r\n");
 8011cd2:	489e      	ldr	r0, [pc, #632]	; (8011f4c <main+0x684>)
 8011cd4:	f002 fea0 	bl	8014a18 <puts>
		for (size_t i = 0; i < n; i++) {
 8011cd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011cdc:	3301      	adds	r3, #1
 8011cde:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8011ce2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8011ce6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d3cb      	bcc.n	8011c86 <main+0x3be>
			}
		}

		printf("Cmd = %s Arg = %s n = %u \r\n", Cmd, Arg, n);
 8011cee:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011cf2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8011cf6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011cfa:	4895      	ldr	r0, [pc, #596]	; (8011f50 <main+0x688>)
 8011cfc:	f002 fe18 	bl	8014930 <iprintf>

		for (size_t i = 0; i < n; i++)
 8011d00:	2300      	movs	r3, #0
 8011d02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011d06:	e00e      	b.n	8011d26 <main+0x45e>
			free(word_array[i]);
 8011d08:	463b      	mov	r3, r7
 8011d0a:	681a      	ldr	r2, [r3, #0]
 8011d0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f002 f8c4 	bl	8013ea4 <free>
		for (size_t i = 0; i < n; i++)
 8011d1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011d20:	3301      	adds	r3, #1
 8011d22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011d26:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011d2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d3ea      	bcc.n	8011d08 <main+0x440>
		free(word_array);
 8011d32:	463b      	mov	r3, r7
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4618      	mov	r0, r3
 8011d38:	f002 f8b4 	bl	8013ea4 <free>

		// Branch based on command
		// meas: Sample and plot a data set
		if ((strcmp(Cmd, "meas") == 0) && (n == 1)) {
 8011d3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011d40:	4984      	ldr	r1, [pc, #528]	; (8011f54 <main+0x68c>)
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7ee fa64 	bl	8000210 <strcmp>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d128      	bne.n	8011da0 <main+0x4d8>
 8011d4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d124      	bne.n	8011da0 <main+0x4d8>

			// Countdown
			CountDown(Count_ms);
 8011d56:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8011d5a:	f7ff fabd 	bl	80112d8 <CountDown>

			MeasNo++;
 8011d5e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011d62:	3301      	adds	r3, #1
 8011d64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

			// Sample & plot data one time
			SamplePoints(&Data, NoOfPoints, Period_us);
 8011d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d6c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8011d70:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7ff fb4f 	bl	8011418 <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 8011d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011d82:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7ff fb7c 	bl	8011484 <AvgAndPlotPoints>

			// Write the unaveraged (full) data to file meas#.txt
			WriteData2FS(&Data, NoOfPoints, MeasNo);
 8011d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d90:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011d94:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7ff fc0f 	bl	80115bc <WriteData2FS>
 8011d9e:	e096      	b.n	8011ece <main+0x606>
		}

		// setpoints: Adjust sampled points
		else if ((strcmp(Cmd, "setpoints") == 0) && (n == 2)) {
 8011da0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011da4:	496c      	ldr	r1, [pc, #432]	; (8011f58 <main+0x690>)
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7ee fa32 	bl	8000210 <strcmp>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d125      	bne.n	8011dfe <main+0x536>
 8011db2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	d121      	bne.n	8011dfe <main+0x536>
			// Allocate more or less data space
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 8011dba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011dbe:	220a      	movs	r2, #10
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f002 ff3e 	bl	8014c44 <strtol>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			printf("Old Data size is %u New NoOfPOints = %lu \r\n",
 8011dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011dd8:	4619      	mov	r1, r3
 8011dda:	4860      	ldr	r0, [pc, #384]	; (8011f5c <main+0x694>)
 8011ddc:	f002 fda8 	bl	8014930 <iprintf>
					Data.size, NoOfPoints);

			insertArray(&Data, NoOfPoints);
 8011de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011de4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7ff f957 	bl	801109c <insertArray>
			printf("New Array size is %u \r\n", Data.size);
 8011dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011df2:	689b      	ldr	r3, [r3, #8]
 8011df4:	4619      	mov	r1, r3
 8011df6:	485a      	ldr	r0, [pc, #360]	; (8011f60 <main+0x698>)
 8011df8:	f002 fd9a 	bl	8014930 <iprintf>
 8011dfc:	e067      	b.n	8011ece <main+0x606>
		}

		// setavg: Adjust average amount in samples
		else if ((strcmp(Cmd, "setavg") == 0) && (n == 2)) {
 8011dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011e02:	4958      	ldr	r1, [pc, #352]	; (8011f64 <main+0x69c>)
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7ee fa03 	bl	8000210 <strcmp>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d10e      	bne.n	8011e2e <main+0x566>
 8011e10:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	d10a      	bne.n	8011e2e <main+0x566>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 8011e18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011e1c:	220a      	movs	r2, #10
 8011e1e:	2100      	movs	r1, #0
 8011e20:	4618      	mov	r0, r3
 8011e22:	f002 ff0f 	bl	8014c44 <strtol>
 8011e26:	4603      	mov	r3, r0
 8011e28:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8011e2c:	e04f      	b.n	8011ece <main+0x606>
		}

		// setperiod: Adjust sample period in us
		else if ((strcmp(Cmd, "setperiod") == 0) && (n == 2)) {
 8011e2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011e32:	494d      	ldr	r1, [pc, #308]	; (8011f68 <main+0x6a0>)
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7ee f9eb 	bl	8000210 <strcmp>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d10e      	bne.n	8011e5e <main+0x596>
 8011e40:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011e44:	2b02      	cmp	r3, #2
 8011e46:	d10a      	bne.n	8011e5e <main+0x596>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 8011e48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011e4c:	220a      	movs	r2, #10
 8011e4e:	2100      	movs	r1, #0
 8011e50:	4618      	mov	r0, r3
 8011e52:	f002 fef7 	bl	8014c44 <strtol>
 8011e56:	4603      	mov	r3, r0
 8011e58:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8011e5c:	e037      	b.n	8011ece <main+0x606>
		}

		// setcount: Adjust countdown period in ms
		else if ((strcmp(Cmd, "setcount") == 0) && (n == 2)) {
 8011e5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011e62:	4942      	ldr	r1, [pc, #264]	; (8011f6c <main+0x6a4>)
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ee f9d3 	bl	8000210 <strcmp>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10e      	bne.n	8011e8e <main+0x5c6>
 8011e70:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d10a      	bne.n	8011e8e <main+0x5c6>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 8011e78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011e7c:	220a      	movs	r2, #10
 8011e7e:	2100      	movs	r1, #0
 8011e80:	4618      	mov	r0, r3
 8011e82:	f002 fedf 	bl	8014c44 <strtol>
 8011e86:	4603      	mov	r3, r0
 8011e88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8011e8c:	e01f      	b.n	8011ece <main+0x606>
		}
		// dir: Print file listing
		else if ((strcmp(Cmd, "dir") == 0) && (n == 1)) {
 8011e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011e92:	4937      	ldr	r1, [pc, #220]	; (8011f70 <main+0x6a8>)
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7ee f9bb 	bl	8000210 <strcmp>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d106      	bne.n	8011eae <main+0x5e6>
 8011ea0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d102      	bne.n	8011eae <main+0x5e6>
			DirList();
 8011ea8:	f7ff fc26 	bl	80116f8 <DirList>
 8011eac:	e00f      	b.n	8011ece <main+0x606>
		}

		// quit: Exit on next while
		else if ((strcmp(Cmd, "quit") == 0) && (n == 1)) {
 8011eae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011eb2:	4930      	ldr	r1, [pc, #192]	; (8011f74 <main+0x6ac>)
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7ee f9ab 	bl	8000210 <strcmp>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d103      	bne.n	8011ec8 <main+0x600>
 8011ec0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d002      	beq.n	8011ece <main+0x606>
			// Do nothing yet
		} else {
			printf("Wrong command or argument \r\n");
 8011ec8:	482b      	ldr	r0, [pc, #172]	; (8011f78 <main+0x6b0>)
 8011eca:	f002 fda5 	bl	8014a18 <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 8011ece:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011ed2:	4928      	ldr	r1, [pc, #160]	; (8011f74 <main+0x6ac>)
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ee f99b 	bl	8000210 <strcmp>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f47f ae31 	bne.w	8011b44 <main+0x27c>
 8011ee2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	f47f ae2c 	bne.w	8011b44 <main+0x27c>
		}
	}

	// Free memory after quit
	freeArray(&Data);
 8011eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7ff f8ee 	bl	80110d2 <freeArray>

	// Unlink the SDRAM disk I/O driver
	FATFS_UnLinkDriver(SDRAMPath);
 8011ef6:	4821      	ldr	r0, [pc, #132]	; (8011f7c <main+0x6b4>)
 8011ef8:	f7fa f902 	bl	800c100 <FATFS_UnLinkDriver>

	// Print informative messages
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8011efc:	f04f 31ff 	mov.w	r1, #4294967295
 8011f00:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011f04:	f7ff f9b4 	bl	8011270 <InitScreen>
	LCDWrite(5, "Stop.");
 8011f08:	491d      	ldr	r1, [pc, #116]	; (8011f80 <main+0x6b8>)
 8011f0a:	2005      	movs	r0, #5
 8011f0c:	f7ff f9c8 	bl	80112a0 <LCDWrite>

	printf("Exit. Data freed. Stop. \r\n");
 8011f10:	481c      	ldr	r0, [pc, #112]	; (8011f84 <main+0x6bc>)
 8011f12:	f002 fd81 	bl	8014a18 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8011f16:	f107 0314 	add.w	r3, r7, #20
 8011f1a:	4a1b      	ldr	r2, [pc, #108]	; (8011f88 <main+0x6c0>)
 8011f1c:	461c      	mov	r4, r3
 8011f1e:	4615      	mov	r5, r2
 8011f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f24:	682b      	ldr	r3, [r5, #0]
 8011f26:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8011f28:	f107 0314 	add.w	r3, r7, #20
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fa f96e 	bl	800c210 <osThreadCreate>
 8011f34:	4602      	mov	r2, r0
 8011f36:	4b15      	ldr	r3, [pc, #84]	; (8011f8c <main+0x6c4>)
 8011f38:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */


  /* Start scheduler */
  osKernelStart();
 8011f3a:	f7fa f962 	bl	800c202 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8011f3e:	e7fe      	b.n	8011f3e <main+0x676>
 8011f40:	08017038 	.word	0x08017038
 8011f44:	0801703c 	.word	0x0801703c
 8011f48:	0801716c 	.word	0x0801716c
 8011f4c:	0801704c 	.word	0x0801704c
 8011f50:	08017068 	.word	0x08017068
 8011f54:	08017084 	.word	0x08017084
 8011f58:	0801708c 	.word	0x0801708c
 8011f5c:	08017098 	.word	0x08017098
 8011f60:	080170c4 	.word	0x080170c4
 8011f64:	080170dc 	.word	0x080170dc
 8011f68:	080170e4 	.word	0x080170e4
 8011f6c:	080170f0 	.word	0x080170f0
 8011f70:	080170fc 	.word	0x080170fc
 8011f74:	08017100 	.word	0x08017100
 8011f78:	08017108 	.word	0x08017108
 8011f7c:	20000fa4 	.word	0x20000fa4
 8011f80:	08017124 	.word	0x08017124
 8011f84:	0801712c 	.word	0x0801712c
 8011f88:	08017188 	.word	0x08017188
 8011f8c:	20000d60 	.word	0x20000d60

08011f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b0b4      	sub	sp, #208	; 0xd0
 8011f94:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011f96:	4a50      	ldr	r2, [pc, #320]	; (80120d8 <SystemClock_Config+0x148>)
 8011f98:	4b4f      	ldr	r3, [pc, #316]	; (80120d8 <SystemClock_Config+0x148>)
 8011f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8011fa2:	4b4d      	ldr	r3, [pc, #308]	; (80120d8 <SystemClock_Config+0x148>)
 8011fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011faa:	607b      	str	r3, [r7, #4]
 8011fac:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011fae:	4a4b      	ldr	r2, [pc, #300]	; (80120dc <SystemClock_Config+0x14c>)
 8011fb0:	4b4a      	ldr	r3, [pc, #296]	; (80120dc <SystemClock_Config+0x14c>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011fb8:	6013      	str	r3, [r2, #0]
 8011fba:	4b48      	ldr	r3, [pc, #288]	; (80120dc <SystemClock_Config+0x14c>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011fc2:	603b      	str	r3, [r7, #0]
 8011fc4:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011fd4:	2302      	movs	r3, #2
 8011fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8011fe2:	2319      	movs	r3, #25
 8011fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8011fe8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011ff0:	2302      	movs	r3, #2
 8011ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8011ff6:	2309      	movs	r3, #9
 8011ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011ffc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012000:	4618      	mov	r0, r3
 8012002:	f7f3 fb1f 	bl	8005644 <HAL_RCC_OscConfig>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d004      	beq.n	8012016 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 801200c:	f240 2109 	movw	r1, #521	; 0x209
 8012010:	4833      	ldr	r0, [pc, #204]	; (80120e0 <SystemClock_Config+0x150>)
 8012012:	f000 ff51 	bl	8012eb8 <_Error_Handler>
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8012016:	f7f3 fac5 	bl	80055a4 <HAL_PWREx_EnableOverDrive>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d004      	beq.n	801202a <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012020:	f44f 7104 	mov.w	r1, #528	; 0x210
 8012024:	482e      	ldr	r0, [pc, #184]	; (80120e0 <SystemClock_Config+0x150>)
 8012026:	f000 ff47 	bl	8012eb8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801202a:	230f      	movs	r3, #15
 801202c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012030:	2302      	movs	r3, #2
 8012032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012036:	2300      	movs	r3, #0
 8012038:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801203c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 801204c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012050:	2106      	movs	r1, #6
 8012052:	4618      	mov	r0, r3
 8012054:	f7f3 fd66 	bl	8005b24 <HAL_RCC_ClockConfig>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d004      	beq.n	8012068 <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 801205e:	f240 211e 	movw	r1, #542	; 0x21e
 8012062:	481f      	ldr	r0, [pc, #124]	; (80120e0 <SystemClock_Config+0x150>)
 8012064:	f000 ff28 	bl	8012eb8 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8012068:	4b1e      	ldr	r3, [pc, #120]	; (80120e4 <SystemClock_Config+0x154>)
 801206a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 190;
 801206c:	23be      	movs	r3, #190	; 0xbe
 801206e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8012070:	2305      	movs	r3, #5
 8012072:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8012074:	2302      	movs	r3, #2
 8012076:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8012078:	2300      	movs	r3, #0
 801207a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 801207c:	2301      	movs	r3, #1
 801207e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8012080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012084:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8012086:	2300      	movs	r3, #0
 8012088:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801208a:	2300      	movs	r3, #0
 801208c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801208e:	f107 0308 	add.w	r3, r7, #8
 8012092:	4618      	mov	r0, r3
 8012094:	f7f3 ff4a 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8012098:	4603      	mov	r3, r0
 801209a:	2b00      	cmp	r3, #0
 801209c:	d004      	beq.n	80120a8 <SystemClock_Config+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
 801209e:	f240 212d 	movw	r1, #557	; 0x22d
 80120a2:	480f      	ldr	r0, [pc, #60]	; (80120e0 <SystemClock_Config+0x150>)
 80120a4:	f000 ff08 	bl	8012eb8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80120a8:	f7f3 feda 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 80120ac:	4602      	mov	r2, r0
 80120ae:	4b0e      	ldr	r3, [pc, #56]	; (80120e8 <SystemClock_Config+0x158>)
 80120b0:	fba3 2302 	umull	r2, r3, r3, r2
 80120b4:	099b      	lsrs	r3, r3, #6
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7f0 fa0b 	bl	80024d2 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80120bc:	2004      	movs	r0, #4
 80120be:	f7f0 fa15 	bl	80024ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80120c2:	2200      	movs	r2, #0
 80120c4:	210f      	movs	r1, #15
 80120c6:	f04f 30ff 	mov.w	r0, #4294967295
 80120ca:	f7f0 f9d8 	bl	800247e <HAL_NVIC_SetPriority>
}
 80120ce:	bf00      	nop
 80120d0:	37d0      	adds	r7, #208	; 0xd0
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	40023800 	.word	0x40023800
 80120dc:	40007000 	.word	0x40007000
 80120e0:	08016e8c 	.word	0x08016e8c
 80120e4:	00010048 	.word	0x00010048
 80120e8:	10624dd3 	.word	0x10624dd3

080120ec <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc3.Instance = ADC3;
 80120f2:	4b24      	ldr	r3, [pc, #144]	; (8012184 <MX_ADC3_Init+0x98>)
 80120f4:	4a24      	ldr	r2, [pc, #144]	; (8012188 <MX_ADC3_Init+0x9c>)
 80120f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80120f8:	4b22      	ldr	r3, [pc, #136]	; (8012184 <MX_ADC3_Init+0x98>)
 80120fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80120fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8012100:	4b20      	ldr	r3, [pc, #128]	; (8012184 <MX_ADC3_Init+0x98>)
 8012102:	2200      	movs	r2, #0
 8012104:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8012106:	4b1f      	ldr	r3, [pc, #124]	; (8012184 <MX_ADC3_Init+0x98>)
 8012108:	2200      	movs	r2, #0
 801210a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 801210c:	4b1d      	ldr	r3, [pc, #116]	; (8012184 <MX_ADC3_Init+0x98>)
 801210e:	2200      	movs	r2, #0
 8012110:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8012112:	4b1c      	ldr	r3, [pc, #112]	; (8012184 <MX_ADC3_Init+0x98>)
 8012114:	2200      	movs	r2, #0
 8012116:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8012118:	4b1a      	ldr	r3, [pc, #104]	; (8012184 <MX_ADC3_Init+0x98>)
 801211a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801211e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8012120:	4b18      	ldr	r3, [pc, #96]	; (8012184 <MX_ADC3_Init+0x98>)
 8012122:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8012126:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012128:	4b16      	ldr	r3, [pc, #88]	; (8012184 <MX_ADC3_Init+0x98>)
 801212a:	2200      	movs	r2, #0
 801212c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 801212e:	4b15      	ldr	r3, [pc, #84]	; (8012184 <MX_ADC3_Init+0x98>)
 8012130:	2201      	movs	r2, #1
 8012132:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8012134:	4b13      	ldr	r3, [pc, #76]	; (8012184 <MX_ADC3_Init+0x98>)
 8012136:	2200      	movs	r2, #0
 8012138:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801213a:	4b12      	ldr	r3, [pc, #72]	; (8012184 <MX_ADC3_Init+0x98>)
 801213c:	2201      	movs	r2, #1
 801213e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8012140:	4810      	ldr	r0, [pc, #64]	; (8012184 <MX_ADC3_Init+0x98>)
 8012142:	f7ef fda3 	bl	8001c8c <HAL_ADC_Init>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d004      	beq.n	8012156 <MX_ADC3_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 801214c:	f240 2152 	movw	r1, #594	; 0x252
 8012150:	480e      	ldr	r0, [pc, #56]	; (801218c <MX_ADC3_Init+0xa0>)
 8012152:	f000 feb1 	bl	8012eb8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8012156:	2300      	movs	r3, #0
 8012158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801215a:	2301      	movs	r3, #1
 801215c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801215e:	2300      	movs	r3, #0
 8012160:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8012162:	463b      	mov	r3, r7
 8012164:	4619      	mov	r1, r3
 8012166:	4807      	ldr	r0, [pc, #28]	; (8012184 <MX_ADC3_Init+0x98>)
 8012168:	f7ef fe86 	bl	8001e78 <HAL_ADC_ConfigChannel>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d004      	beq.n	801217c <MX_ADC3_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012172:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8012176:	4805      	ldr	r0, [pc, #20]	; (801218c <MX_ADC3_Init+0xa0>)
 8012178:	f000 fe9e 	bl	8012eb8 <_Error_Handler>
  }

}
 801217c:	bf00      	nop
 801217e:	3710      	adds	r7, #16
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	20000b74 	.word	0x20000b74
 8012188:	40012200 	.word	0x40012200
 801218c:	08016e8c 	.word	0x08016e8c

08012190 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8012194:	4b0f      	ldr	r3, [pc, #60]	; (80121d4 <MX_CRC_Init+0x44>)
 8012196:	4a10      	ldr	r2, [pc, #64]	; (80121d8 <MX_CRC_Init+0x48>)
 8012198:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 801219a:	4b0e      	ldr	r3, [pc, #56]	; (80121d4 <MX_CRC_Init+0x44>)
 801219c:	2200      	movs	r2, #0
 801219e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80121a0:	4b0c      	ldr	r3, [pc, #48]	; (80121d4 <MX_CRC_Init+0x44>)
 80121a2:	2200      	movs	r2, #0
 80121a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80121a6:	4b0b      	ldr	r3, [pc, #44]	; (80121d4 <MX_CRC_Init+0x44>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80121ac:	4b09      	ldr	r3, [pc, #36]	; (80121d4 <MX_CRC_Init+0x44>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80121b2:	4b08      	ldr	r3, [pc, #32]	; (80121d4 <MX_CRC_Init+0x44>)
 80121b4:	2201      	movs	r2, #1
 80121b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80121b8:	4806      	ldr	r0, [pc, #24]	; (80121d4 <MX_CRC_Init+0x44>)
 80121ba:	f7f0 f9b3 	bl	8002524 <HAL_CRC_Init>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d004      	beq.n	80121ce <MX_CRC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80121c4:	f240 216d 	movw	r1, #621	; 0x26d
 80121c8:	4804      	ldr	r0, [pc, #16]	; (80121dc <MX_CRC_Init+0x4c>)
 80121ca:	f000 fe75 	bl	8012eb8 <_Error_Handler>
  }

}
 80121ce:	bf00      	nop
 80121d0:	bd80      	pop	{r7, pc}
 80121d2:	bf00      	nop
 80121d4:	20000a48 	.word	0x20000a48
 80121d8:	40023000 	.word	0x40023000
 80121dc:	08016e8c 	.word	0x08016e8c

080121e0 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80121e4:	4b18      	ldr	r3, [pc, #96]	; (8012248 <MX_DMA2D_Init+0x68>)
 80121e6:	4a19      	ldr	r2, [pc, #100]	; (801224c <MX_DMA2D_Init+0x6c>)
 80121e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80121ea:	4b17      	ldr	r3, [pc, #92]	; (8012248 <MX_DMA2D_Init+0x68>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80121f0:	4b15      	ldr	r3, [pc, #84]	; (8012248 <MX_DMA2D_Init+0x68>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80121f6:	4b14      	ldr	r3, [pc, #80]	; (8012248 <MX_DMA2D_Init+0x68>)
 80121f8:	2200      	movs	r2, #0
 80121fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80121fc:	4b12      	ldr	r3, [pc, #72]	; (8012248 <MX_DMA2D_Init+0x68>)
 80121fe:	2200      	movs	r2, #0
 8012200:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8012202:	4b11      	ldr	r3, [pc, #68]	; (8012248 <MX_DMA2D_Init+0x68>)
 8012204:	2200      	movs	r2, #0
 8012206:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012208:	4b0f      	ldr	r3, [pc, #60]	; (8012248 <MX_DMA2D_Init+0x68>)
 801220a:	2200      	movs	r2, #0
 801220c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 801220e:	4b0e      	ldr	r3, [pc, #56]	; (8012248 <MX_DMA2D_Init+0x68>)
 8012210:	2200      	movs	r2, #0
 8012212:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8012214:	480c      	ldr	r0, [pc, #48]	; (8012248 <MX_DMA2D_Init+0x68>)
 8012216:	f7f0 fd4b 	bl	8002cb0 <HAL_DMA2D_Init>
 801221a:	4603      	mov	r3, r0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d004      	beq.n	801222a <MX_DMA2D_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012220:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012224:	480a      	ldr	r0, [pc, #40]	; (8012250 <MX_DMA2D_Init+0x70>)
 8012226:	f000 fe47 	bl	8012eb8 <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801222a:	2101      	movs	r1, #1
 801222c:	4806      	ldr	r0, [pc, #24]	; (8012248 <MX_DMA2D_Init+0x68>)
 801222e:	f7f0 fe9d 	bl	8002f6c <HAL_DMA2D_ConfigLayer>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d004      	beq.n	8012242 <MX_DMA2D_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012238:	f240 2185 	movw	r1, #645	; 0x285
 801223c:	4804      	ldr	r0, [pc, #16]	; (8012250 <MX_DMA2D_Init+0x70>)
 801223e:	f000 fe3b 	bl	8012eb8 <_Error_Handler>
  }

}
 8012242:	bf00      	nop
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20000c8c 	.word	0x20000c8c
 801224c:	4002b000 	.word	0x4002b000
 8012250:	08016e8c 	.word	0x08016e8c

08012254 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8012258:	4b1f      	ldr	r3, [pc, #124]	; (80122d8 <MX_I2C3_Init+0x84>)
 801225a:	4a20      	ldr	r2, [pc, #128]	; (80122dc <MX_I2C3_Init+0x88>)
 801225c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 801225e:	4b1e      	ldr	r3, [pc, #120]	; (80122d8 <MX_I2C3_Init+0x84>)
 8012260:	4a1f      	ldr	r2, [pc, #124]	; (80122e0 <MX_I2C3_Init+0x8c>)
 8012262:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8012264:	4b1c      	ldr	r3, [pc, #112]	; (80122d8 <MX_I2C3_Init+0x84>)
 8012266:	22e0      	movs	r2, #224	; 0xe0
 8012268:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801226a:	4b1b      	ldr	r3, [pc, #108]	; (80122d8 <MX_I2C3_Init+0x84>)
 801226c:	2201      	movs	r2, #1
 801226e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012270:	4b19      	ldr	r3, [pc, #100]	; (80122d8 <MX_I2C3_Init+0x84>)
 8012272:	2200      	movs	r2, #0
 8012274:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8012276:	4b18      	ldr	r3, [pc, #96]	; (80122d8 <MX_I2C3_Init+0x84>)
 8012278:	2200      	movs	r2, #0
 801227a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801227c:	4b16      	ldr	r3, [pc, #88]	; (80122d8 <MX_I2C3_Init+0x84>)
 801227e:	2200      	movs	r2, #0
 8012280:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012282:	4b15      	ldr	r3, [pc, #84]	; (80122d8 <MX_I2C3_Init+0x84>)
 8012284:	2200      	movs	r2, #0
 8012286:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012288:	4b13      	ldr	r3, [pc, #76]	; (80122d8 <MX_I2C3_Init+0x84>)
 801228a:	2200      	movs	r2, #0
 801228c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 801228e:	4812      	ldr	r0, [pc, #72]	; (80122d8 <MX_I2C3_Init+0x84>)
 8012290:	f7f2 fd90 	bl	8004db4 <HAL_I2C_Init>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d004      	beq.n	80122a4 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 801229a:	f240 2199 	movw	r1, #665	; 0x299
 801229e:	4811      	ldr	r0, [pc, #68]	; (80122e4 <MX_I2C3_Init+0x90>)
 80122a0:	f000 fe0a 	bl	8012eb8 <_Error_Handler>
  }

    /**Configure Analogue filter
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80122a4:	2100      	movs	r1, #0
 80122a6:	480c      	ldr	r0, [pc, #48]	; (80122d8 <MX_I2C3_Init+0x84>)
 80122a8:	f7f2 fe12 	bl	8004ed0 <HAL_I2CEx_ConfigAnalogFilter>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d004      	beq.n	80122bc <MX_I2C3_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80122b2:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80122b6:	480b      	ldr	r0, [pc, #44]	; (80122e4 <MX_I2C3_Init+0x90>)
 80122b8:	f000 fdfe 	bl	8012eb8 <_Error_Handler>
  }

    /**Configure Digital filter
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80122bc:	2100      	movs	r1, #0
 80122be:	4806      	ldr	r0, [pc, #24]	; (80122d8 <MX_I2C3_Init+0x84>)
 80122c0:	f7f2 fe51 	bl	8004f66 <HAL_I2CEx_ConfigDigitalFilter>
 80122c4:	4603      	mov	r3, r0
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d004      	beq.n	80122d4 <MX_I2C3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 80122ca:	f240 21a7 	movw	r1, #679	; 0x2a7
 80122ce:	4805      	ldr	r0, [pc, #20]	; (80122e4 <MX_I2C3_Init+0x90>)
 80122d0:	f000 fdf2 	bl	8012eb8 <_Error_Handler>
  }

}
 80122d4:	bf00      	nop
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	200009fc 	.word	0x200009fc
 80122dc:	40005c00 	.word	0x40005c00
 80122e0:	00c0eaff 	.word	0x00c0eaff
 80122e4:	08016e8c 	.word	0x08016e8c

080122e8 <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b08e      	sub	sp, #56	; 0x38
 80122ec:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg;

  hltdc.Instance = LTDC;
 80122ee:	4b3c      	ldr	r3, [pc, #240]	; (80123e0 <MX_LTDC_Init+0xf8>)
 80122f0:	4a3c      	ldr	r2, [pc, #240]	; (80123e4 <MX_LTDC_Init+0xfc>)
 80122f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80122f4:	4b3a      	ldr	r3, [pc, #232]	; (80123e0 <MX_LTDC_Init+0xf8>)
 80122f6:	2200      	movs	r2, #0
 80122f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80122fa:	4b39      	ldr	r3, [pc, #228]	; (80123e0 <MX_LTDC_Init+0xf8>)
 80122fc:	2200      	movs	r2, #0
 80122fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8012300:	4b37      	ldr	r3, [pc, #220]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012302:	2200      	movs	r2, #0
 8012304:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8012306:	4b36      	ldr	r3, [pc, #216]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012308:	2200      	movs	r2, #0
 801230a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 801230c:	4b34      	ldr	r3, [pc, #208]	; (80123e0 <MX_LTDC_Init+0xf8>)
 801230e:	2228      	movs	r2, #40	; 0x28
 8012310:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8012312:	4b33      	ldr	r3, [pc, #204]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012314:	2209      	movs	r2, #9
 8012316:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8012318:	4b31      	ldr	r3, [pc, #196]	; (80123e0 <MX_LTDC_Init+0xf8>)
 801231a:	2235      	movs	r2, #53	; 0x35
 801231c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 801231e:	4b30      	ldr	r3, [pc, #192]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012320:	220b      	movs	r2, #11
 8012322:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8012324:	4b2e      	ldr	r3, [pc, #184]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012326:	f240 2215 	movw	r2, #533	; 0x215
 801232a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 801232c:	4b2c      	ldr	r3, [pc, #176]	; (80123e0 <MX_LTDC_Init+0xf8>)
 801232e:	f240 121b 	movw	r2, #283	; 0x11b
 8012332:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8012334:	4b2a      	ldr	r3, [pc, #168]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012336:	f240 2235 	movw	r2, #565	; 0x235
 801233a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 801233c:	4b28      	ldr	r3, [pc, #160]	; (80123e0 <MX_LTDC_Init+0xf8>)
 801233e:	f240 121d 	movw	r2, #285	; 0x11d
 8012342:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8012344:	4b26      	ldr	r3, [pc, #152]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012346:	2200      	movs	r2, #0
 8012348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801234c:	4b24      	ldr	r3, [pc, #144]	; (80123e0 <MX_LTDC_Init+0xf8>)
 801234e:	2200      	movs	r2, #0
 8012350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8012354:	4b22      	ldr	r3, [pc, #136]	; (80123e0 <MX_LTDC_Init+0xf8>)
 8012356:	2200      	movs	r2, #0
 8012358:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801235c:	4820      	ldr	r0, [pc, #128]	; (80123e0 <MX_LTDC_Init+0xf8>)
 801235e:	f7f2 fe51 	bl	8005004 <HAL_LTDC_Init>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d004      	beq.n	8012372 <MX_LTDC_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012368:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 801236c:	481e      	ldr	r0, [pc, #120]	; (80123e8 <MX_LTDC_Init+0x100>)
 801236e:	f000 fda3 	bl	8012eb8 <_Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8012372:	2300      	movs	r3, #0
 8012374:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8012376:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801237a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801237c:	2300      	movs	r3, #0
 801237e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8012380:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012384:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8012386:	2300      	movs	r3, #0
 8012388:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801238a:	23ff      	movs	r3, #255	; 0xff
 801238c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8012392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012396:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8012398:	2305      	movs	r3, #5
 801239a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 801239c:	2300      	movs	r3, #0
 801239e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80123a0:	2300      	movs	r3, #0
 80123a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 80123a4:	2300      	movs	r3, #0
 80123a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80123ae:	2300      	movs	r3, #0
 80123b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80123b4:	2300      	movs	r3, #0
 80123b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80123ba:	1d3b      	adds	r3, r7, #4
 80123bc:	2200      	movs	r2, #0
 80123be:	4619      	mov	r1, r3
 80123c0:	4807      	ldr	r0, [pc, #28]	; (80123e0 <MX_LTDC_Init+0xf8>)
 80123c2:	f7f2 fefb 	bl	80051bc <HAL_LTDC_ConfigLayer>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d004      	beq.n	80123d6 <MX_LTDC_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 80123cc:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80123d0:	4805      	ldr	r0, [pc, #20]	; (80123e8 <MX_LTDC_Init+0x100>)
 80123d2:	f000 fd71 	bl	8012eb8 <_Error_Handler>
  }

}
 80123d6:	bf00      	nop
 80123d8:	3738      	adds	r7, #56	; 0x38
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	20000acc 	.word	0x20000acc
 80123e4:	40016800 	.word	0x40016800
 80123e8:	08016e8c 	.word	0x08016e8c

080123ec <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b088      	sub	sp, #32
 80123f0:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80123f2:	4b22      	ldr	r3, [pc, #136]	; (801247c <MX_TIM2_Init+0x90>)
 80123f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80123f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80123fa:	4b20      	ldr	r3, [pc, #128]	; (801247c <MX_TIM2_Init+0x90>)
 80123fc:	2200      	movs	r2, #0
 80123fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012400:	4b1e      	ldr	r3, [pc, #120]	; (801247c <MX_TIM2_Init+0x90>)
 8012402:	2200      	movs	r2, #0
 8012404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8012406:	4b1d      	ldr	r3, [pc, #116]	; (801247c <MX_TIM2_Init+0x90>)
 8012408:	2264      	movs	r2, #100	; 0x64
 801240a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801240c:	4b1b      	ldr	r3, [pc, #108]	; (801247c <MX_TIM2_Init+0x90>)
 801240e:	2200      	movs	r2, #0
 8012410:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012412:	4b1a      	ldr	r3, [pc, #104]	; (801247c <MX_TIM2_Init+0x90>)
 8012414:	2200      	movs	r2, #0
 8012416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8012418:	4818      	ldr	r0, [pc, #96]	; (801247c <MX_TIM2_Init+0x90>)
 801241a:	f7f4 fa56 	bl	80068ca <HAL_TIM_Base_Init>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d004      	beq.n	801242e <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012424:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8012428:	4815      	ldr	r0, [pc, #84]	; (8012480 <MX_TIM2_Init+0x94>)
 801242a:	f000 fd45 	bl	8012eb8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801242e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012432:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8012434:	f107 0310 	add.w	r3, r7, #16
 8012438:	4619      	mov	r1, r3
 801243a:	4810      	ldr	r0, [pc, #64]	; (801247c <MX_TIM2_Init+0x90>)
 801243c:	f7f4 fbaa 	bl	8006b94 <HAL_TIM_ConfigClockSource>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d004      	beq.n	8012450 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012446:	f240 21f2 	movw	r1, #754	; 0x2f2
 801244a:	480d      	ldr	r0, [pc, #52]	; (8012480 <MX_TIM2_Init+0x94>)
 801244c:	f000 fd34 	bl	8012eb8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8012450:	2320      	movs	r3, #32
 8012452:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012454:	2300      	movs	r3, #0
 8012456:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012458:	1d3b      	adds	r3, r7, #4
 801245a:	4619      	mov	r1, r3
 801245c:	4807      	ldr	r0, [pc, #28]	; (801247c <MX_TIM2_Init+0x90>)
 801245e:	f7f4 fdfb 	bl	8007058 <HAL_TIMEx_MasterConfigSynchronization>
 8012462:	4603      	mov	r3, r0
 8012464:	2b00      	cmp	r3, #0
 8012466:	d004      	beq.n	8012472 <MX_TIM2_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012468:	f240 21f9 	movw	r1, #761	; 0x2f9
 801246c:	4804      	ldr	r0, [pc, #16]	; (8012480 <MX_TIM2_Init+0x94>)
 801246e:	f000 fd23 	bl	8012eb8 <_Error_Handler>
  }

}
 8012472:	bf00      	nop
 8012474:	3720      	adds	r7, #32
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	200011ec 	.word	0x200011ec
 8012480:	08016e8c 	.word	0x08016e8c

08012484 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b088      	sub	sp, #32
 8012488:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 801248a:	4b21      	ldr	r3, [pc, #132]	; (8012510 <MX_TIM3_Init+0x8c>)
 801248c:	4a21      	ldr	r2, [pc, #132]	; (8012514 <MX_TIM3_Init+0x90>)
 801248e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012490:	4b1f      	ldr	r3, [pc, #124]	; (8012510 <MX_TIM3_Init+0x8c>)
 8012492:	2200      	movs	r2, #0
 8012494:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012496:	4b1e      	ldr	r3, [pc, #120]	; (8012510 <MX_TIM3_Init+0x8c>)
 8012498:	2200      	movs	r2, #0
 801249a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 801249c:	4b1c      	ldr	r3, [pc, #112]	; (8012510 <MX_TIM3_Init+0x8c>)
 801249e:	2264      	movs	r2, #100	; 0x64
 80124a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80124a2:	4b1b      	ldr	r3, [pc, #108]	; (8012510 <MX_TIM3_Init+0x8c>)
 80124a4:	2200      	movs	r2, #0
 80124a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80124a8:	4b19      	ldr	r3, [pc, #100]	; (8012510 <MX_TIM3_Init+0x8c>)
 80124aa:	2200      	movs	r2, #0
 80124ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80124ae:	4818      	ldr	r0, [pc, #96]	; (8012510 <MX_TIM3_Init+0x8c>)
 80124b0:	f7f4 fa0b 	bl	80068ca <HAL_TIM_Base_Init>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d004      	beq.n	80124c4 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80124ba:	f240 310d 	movw	r1, #781	; 0x30d
 80124be:	4816      	ldr	r0, [pc, #88]	; (8012518 <MX_TIM3_Init+0x94>)
 80124c0:	f000 fcfa 	bl	8012eb8 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80124c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80124ca:	f107 0310 	add.w	r3, r7, #16
 80124ce:	4619      	mov	r1, r3
 80124d0:	480f      	ldr	r0, [pc, #60]	; (8012510 <MX_TIM3_Init+0x8c>)
 80124d2:	f7f4 fb5f 	bl	8006b94 <HAL_TIM_ConfigClockSource>
 80124d6:	4603      	mov	r3, r0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d004      	beq.n	80124e6 <MX_TIM3_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80124dc:	f240 3113 	movw	r1, #787	; 0x313
 80124e0:	480d      	ldr	r0, [pc, #52]	; (8012518 <MX_TIM3_Init+0x94>)
 80124e2:	f000 fce9 	bl	8012eb8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80124e6:	2320      	movs	r3, #32
 80124e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80124ea:	2300      	movs	r3, #0
 80124ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80124ee:	1d3b      	adds	r3, r7, #4
 80124f0:	4619      	mov	r1, r3
 80124f2:	4807      	ldr	r0, [pc, #28]	; (8012510 <MX_TIM3_Init+0x8c>)
 80124f4:	f7f4 fdb0 	bl	8007058 <HAL_TIMEx_MasterConfigSynchronization>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d004      	beq.n	8012508 <MX_TIM3_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80124fe:	f240 311a 	movw	r1, #794	; 0x31a
 8012502:	4805      	ldr	r0, [pc, #20]	; (8012518 <MX_TIM3_Init+0x94>)
 8012504:	f000 fcd8 	bl	8012eb8 <_Error_Handler>
  }

}
 8012508:	bf00      	nop
 801250a:	3720      	adds	r7, #32
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	20000d64 	.word	0x20000d64
 8012514:	40000400 	.word	0x40000400
 8012518:	08016e8c 	.word	0x08016e8c

0801251c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8012520:	4b15      	ldr	r3, [pc, #84]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012522:	4a16      	ldr	r2, [pc, #88]	; (801257c <MX_USART1_UART_Init+0x60>)
 8012524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012526:	4b14      	ldr	r3, [pc, #80]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801252c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801252e:	4b12      	ldr	r3, [pc, #72]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012530:	2200      	movs	r2, #0
 8012532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012534:	4b10      	ldr	r3, [pc, #64]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012536:	2200      	movs	r2, #0
 8012538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801253a:	4b0f      	ldr	r3, [pc, #60]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 801253c:	2200      	movs	r2, #0
 801253e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012540:	4b0d      	ldr	r3, [pc, #52]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012542:	220c      	movs	r2, #12
 8012544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012546:	4b0c      	ldr	r3, [pc, #48]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012548:	2200      	movs	r2, #0
 801254a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801254c:	4b0a      	ldr	r3, [pc, #40]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 801254e:	2200      	movs	r2, #0
 8012550:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012552:	4b09      	ldr	r3, [pc, #36]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012554:	2200      	movs	r2, #0
 8012556:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012558:	4b07      	ldr	r3, [pc, #28]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 801255a:	2200      	movs	r2, #0
 801255c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801255e:	4806      	ldr	r0, [pc, #24]	; (8012578 <MX_USART1_UART_Init+0x5c>)
 8012560:	f7f4 fde2 	bl	8007128 <HAL_UART_Init>
 8012564:	4603      	mov	r3, r0
 8012566:	2b00      	cmp	r3, #0
 8012568:	d004      	beq.n	8012574 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 801256a:	f240 312f 	movw	r1, #815	; 0x32f
 801256e:	4804      	ldr	r0, [pc, #16]	; (8012580 <MX_USART1_UART_Init+0x64>)
 8012570:	f000 fca2 	bl	8012eb8 <_Error_Handler>
  }

}
 8012574:	bf00      	nop
 8012576:	bd80      	pop	{r7, pc}
 8012578:	20000c1c 	.word	0x20000c1c
 801257c:	40011000 	.word	0x40011000
 8012580:	08016e8c 	.word	0x08016e8c

08012584 <MX_WWDG_Init>:

/* WWDG init function */
static void MX_WWDG_Init(void)
{
 8012584:	b480      	push	{r7}
 8012586:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8012588:	4b0a      	ldr	r3, [pc, #40]	; (80125b4 <MX_WWDG_Init+0x30>)
 801258a:	4a0b      	ldr	r2, [pc, #44]	; (80125b8 <MX_WWDG_Init+0x34>)
 801258c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 801258e:	4b09      	ldr	r3, [pc, #36]	; (80125b4 <MX_WWDG_Init+0x30>)
 8012590:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8012594:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8012596:	4b07      	ldr	r3, [pc, #28]	; (80125b4 <MX_WWDG_Init+0x30>)
 8012598:	2240      	movs	r2, #64	; 0x40
 801259a:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 801259c:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <MX_WWDG_Init+0x30>)
 801259e:	2240      	movs	r2, #64	; 0x40
 80125a0:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80125a2:	4b04      	ldr	r3, [pc, #16]	; (80125b4 <MX_WWDG_Init+0x30>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	611a      	str	r2, [r3, #16]
//  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
//  {
//    _Error_Handler(__FILE__, __LINE__);
//  }

}
 80125a8:	bf00      	nop
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	20000fa8 	.word	0x20000fa8
 80125b8:	40002c00 	.word	0x40002c00

080125bc <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream2
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80125c2:	4a40      	ldr	r2, [pc, #256]	; (80126c4 <MX_DMA_Init+0x108>)
 80125c4:	4b3f      	ldr	r3, [pc, #252]	; (80126c4 <MX_DMA_Init+0x108>)
 80125c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80125cc:	6313      	str	r3, [r2, #48]	; 0x30
 80125ce:	4b3d      	ldr	r3, [pc, #244]	; (80126c4 <MX_DMA_Init+0x108>)
 80125d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80125d6:	607b      	str	r3, [r7, #4]
 80125d8:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 80125da:	4b3b      	ldr	r3, [pc, #236]	; (80126c8 <MX_DMA_Init+0x10c>)
 80125dc:	4a3b      	ldr	r2, [pc, #236]	; (80126cc <MX_DMA_Init+0x110>)
 80125de:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Channel = DMA_CHANNEL_0;
 80125e0:	4b39      	ldr	r3, [pc, #228]	; (80126c8 <MX_DMA_Init+0x10c>)
 80125e2:	2200      	movs	r2, #0
 80125e4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80125e6:	4b38      	ldr	r3, [pc, #224]	; (80126c8 <MX_DMA_Init+0x10c>)
 80125e8:	2280      	movs	r2, #128	; 0x80
 80125ea:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 80125ec:	4b36      	ldr	r3, [pc, #216]	; (80126c8 <MX_DMA_Init+0x10c>)
 80125ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80125f2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 80125f4:	4b34      	ldr	r3, [pc, #208]	; (80126c8 <MX_DMA_Init+0x10c>)
 80125f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80125fa:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80125fc:	4b32      	ldr	r3, [pc, #200]	; (80126c8 <MX_DMA_Init+0x10c>)
 80125fe:	2200      	movs	r2, #0
 8012600:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012602:	4b31      	ldr	r3, [pc, #196]	; (80126c8 <MX_DMA_Init+0x10c>)
 8012604:	2200      	movs	r2, #0
 8012606:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8012608:	4b2f      	ldr	r3, [pc, #188]	; (80126c8 <MX_DMA_Init+0x10c>)
 801260a:	2200      	movs	r2, #0
 801260c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 801260e:	4b2e      	ldr	r3, [pc, #184]	; (80126c8 <MX_DMA_Init+0x10c>)
 8012610:	2200      	movs	r2, #0
 8012612:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8012614:	4b2c      	ldr	r3, [pc, #176]	; (80126c8 <MX_DMA_Init+0x10c>)
 8012616:	2204      	movs	r2, #4
 8012618:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801261a:	4b2b      	ldr	r3, [pc, #172]	; (80126c8 <MX_DMA_Init+0x10c>)
 801261c:	2203      	movs	r2, #3
 801261e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8012620:	4b29      	ldr	r3, [pc, #164]	; (80126c8 <MX_DMA_Init+0x10c>)
 8012622:	2200      	movs	r2, #0
 8012624:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8012626:	4b28      	ldr	r3, [pc, #160]	; (80126c8 <MX_DMA_Init+0x10c>)
 8012628:	2200      	movs	r2, #0
 801262a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 801262c:	4826      	ldr	r0, [pc, #152]	; (80126c8 <MX_DMA_Init+0x10c>)
 801262e:	f7f0 f857 	bl	80026e0 <HAL_DMA_Init>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d004      	beq.n	8012642 <MX_DMA_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012638:	f240 315f 	movw	r1, #863	; 0x35f
 801263c:	4824      	ldr	r0, [pc, #144]	; (80126d0 <MX_DMA_Init+0x114>)
 801263e:	f000 fc3b 	bl	8012eb8 <_Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8012642:	4b24      	ldr	r3, [pc, #144]	; (80126d4 <MX_DMA_Init+0x118>)
 8012644:	4a24      	ldr	r2, [pc, #144]	; (80126d8 <MX_DMA_Init+0x11c>)
 8012646:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8012648:	4b22      	ldr	r3, [pc, #136]	; (80126d4 <MX_DMA_Init+0x118>)
 801264a:	2200      	movs	r2, #0
 801264c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 801264e:	4b21      	ldr	r3, [pc, #132]	; (80126d4 <MX_DMA_Init+0x118>)
 8012650:	2280      	movs	r2, #128	; 0x80
 8012652:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8012654:	4b1f      	ldr	r3, [pc, #124]	; (80126d4 <MX_DMA_Init+0x118>)
 8012656:	f44f 7200 	mov.w	r2, #512	; 0x200
 801265a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 801265c:	4b1d      	ldr	r3, [pc, #116]	; (80126d4 <MX_DMA_Init+0x118>)
 801265e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012662:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012664:	4b1b      	ldr	r3, [pc, #108]	; (80126d4 <MX_DMA_Init+0x118>)
 8012666:	2200      	movs	r2, #0
 8012668:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801266a:	4b1a      	ldr	r3, [pc, #104]	; (80126d4 <MX_DMA_Init+0x118>)
 801266c:	2200      	movs	r2, #0
 801266e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8012670:	4b18      	ldr	r3, [pc, #96]	; (80126d4 <MX_DMA_Init+0x118>)
 8012672:	2200      	movs	r2, #0
 8012674:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8012676:	4b17      	ldr	r3, [pc, #92]	; (80126d4 <MX_DMA_Init+0x118>)
 8012678:	2200      	movs	r2, #0
 801267a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801267c:	4b15      	ldr	r3, [pc, #84]	; (80126d4 <MX_DMA_Init+0x118>)
 801267e:	2204      	movs	r2, #4
 8012680:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8012682:	4b14      	ldr	r3, [pc, #80]	; (80126d4 <MX_DMA_Init+0x118>)
 8012684:	2203      	movs	r2, #3
 8012686:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8012688:	4b12      	ldr	r3, [pc, #72]	; (80126d4 <MX_DMA_Init+0x118>)
 801268a:	2200      	movs	r2, #0
 801268c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 801268e:	4b11      	ldr	r3, [pc, #68]	; (80126d4 <MX_DMA_Init+0x118>)
 8012690:	2200      	movs	r2, #0
 8012692:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8012694:	480f      	ldr	r0, [pc, #60]	; (80126d4 <MX_DMA_Init+0x118>)
 8012696:	f7f0 f823 	bl	80026e0 <HAL_DMA_Init>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d004      	beq.n	80126aa <MX_DMA_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 80126a0:	f240 3172 	movw	r1, #882	; 0x372
 80126a4:	480a      	ldr	r0, [pc, #40]	; (80126d0 <MX_DMA_Init+0x114>)
 80126a6:	f000 fc07 	bl	8012eb8 <_Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80126aa:	2200      	movs	r2, #0
 80126ac:	2105      	movs	r1, #5
 80126ae:	2038      	movs	r0, #56	; 0x38
 80126b0:	f7ef fee5 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80126b4:	2038      	movs	r0, #56	; 0x38
 80126b6:	f7ef fefe 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 80126ba:	bf00      	nop
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	40023800 	.word	0x40023800
 80126c8:	20000ccc 	.word	0x20000ccc
 80126cc:	40026440 	.word	0x40026440
 80126d0:	08016e8c 	.word	0x08016e8c
 80126d4:	20000bbc 	.word	0x20000bbc
 80126d8:	40026428 	.word	0x40026428

080126dc <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b088      	sub	sp, #32
 80126e0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80126e2:	4b21      	ldr	r3, [pc, #132]	; (8012768 <MX_FMC_Init+0x8c>)
 80126e4:	4a21      	ldr	r2, [pc, #132]	; (801276c <MX_FMC_Init+0x90>)
 80126e6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80126e8:	4b1f      	ldr	r3, [pc, #124]	; (8012768 <MX_FMC_Init+0x8c>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80126ee:	4b1e      	ldr	r3, [pc, #120]	; (8012768 <MX_FMC_Init+0x8c>)
 80126f0:	2200      	movs	r2, #0
 80126f2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80126f4:	4b1c      	ldr	r3, [pc, #112]	; (8012768 <MX_FMC_Init+0x8c>)
 80126f6:	2204      	movs	r2, #4
 80126f8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80126fa:	4b1b      	ldr	r3, [pc, #108]	; (8012768 <MX_FMC_Init+0x8c>)
 80126fc:	2210      	movs	r2, #16
 80126fe:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8012700:	4b19      	ldr	r3, [pc, #100]	; (8012768 <MX_FMC_Init+0x8c>)
 8012702:	2240      	movs	r2, #64	; 0x40
 8012704:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8012706:	4b18      	ldr	r3, [pc, #96]	; (8012768 <MX_FMC_Init+0x8c>)
 8012708:	f44f 7280 	mov.w	r2, #256	; 0x100
 801270c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801270e:	4b16      	ldr	r3, [pc, #88]	; (8012768 <MX_FMC_Init+0x8c>)
 8012710:	2200      	movs	r2, #0
 8012712:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8012714:	4b14      	ldr	r3, [pc, #80]	; (8012768 <MX_FMC_Init+0x8c>)
 8012716:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801271a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801271c:	4b12      	ldr	r3, [pc, #72]	; (8012768 <MX_FMC_Init+0x8c>)
 801271e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012722:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8012724:	4b10      	ldr	r3, [pc, #64]	; (8012768 <MX_FMC_Init+0x8c>)
 8012726:	2200      	movs	r2, #0
 8012728:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 801272a:	2302      	movs	r3, #2
 801272c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 801272e:	2307      	movs	r3, #7
 8012730:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8012732:	2304      	movs	r3, #4
 8012734:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8012736:	2306      	movs	r3, #6
 8012738:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 801273a:	2302      	movs	r3, #2
 801273c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 801273e:	2302      	movs	r3, #2
 8012740:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8012742:	2302      	movs	r3, #2
 8012744:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8012746:	1d3b      	adds	r3, r7, #4
 8012748:	4619      	mov	r1, r3
 801274a:	4807      	ldr	r0, [pc, #28]	; (8012768 <MX_FMC_Init+0x8c>)
 801274c:	f7f3 ffdc 	bl	8006708 <HAL_SDRAM_Init>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d004      	beq.n	8012760 <MX_FMC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012756:	f240 3199 	movw	r1, #921	; 0x399
 801275a:	4805      	ldr	r0, [pc, #20]	; (8012770 <MX_FMC_Init+0x94>)
 801275c:	f000 fbac 	bl	8012eb8 <_Error_Handler>
  }

}
 8012760:	bf00      	nop
 8012762:	3720      	adds	r7, #32
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	20000d2c 	.word	0x20000d2c
 801276c:	a0000140 	.word	0xa0000140
 8012770:	08016e8c 	.word	0x08016e8c

08012774 <MX_GPIO_Init>:
     PA7   ------> ETH_CRS_DV
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b090      	sub	sp, #64	; 0x40
 8012778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801277a:	4aae      	ldr	r2, [pc, #696]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801277c:	4bad      	ldr	r3, [pc, #692]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012780:	f043 0310 	orr.w	r3, r3, #16
 8012784:	6313      	str	r3, [r2, #48]	; 0x30
 8012786:	4bab      	ldr	r3, [pc, #684]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801278a:	f003 0310 	and.w	r3, r3, #16
 801278e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012790:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012792:	4aa8      	ldr	r2, [pc, #672]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012794:	4ba7      	ldr	r3, [pc, #668]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801279c:	6313      	str	r3, [r2, #48]	; 0x30
 801279e:	4ba5      	ldr	r3, [pc, #660]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127a6:	627b      	str	r3, [r7, #36]	; 0x24
 80127a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80127aa:	4aa2      	ldr	r2, [pc, #648]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127ac:	4ba1      	ldr	r3, [pc, #644]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127b0:	f043 0302 	orr.w	r3, r3, #2
 80127b4:	6313      	str	r3, [r2, #48]	; 0x30
 80127b6:	4b9f      	ldr	r3, [pc, #636]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ba:	f003 0302 	and.w	r3, r3, #2
 80127be:	623b      	str	r3, [r7, #32]
 80127c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80127c2:	4a9c      	ldr	r2, [pc, #624]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127c4:	4b9b      	ldr	r3, [pc, #620]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127c8:	f043 0308 	orr.w	r3, r3, #8
 80127cc:	6313      	str	r3, [r2, #48]	; 0x30
 80127ce:	4b99      	ldr	r3, [pc, #612]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127d2:	f003 0308 	and.w	r3, r3, #8
 80127d6:	61fb      	str	r3, [r7, #28]
 80127d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80127da:	4a96      	ldr	r2, [pc, #600]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127dc:	4b95      	ldr	r3, [pc, #596]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127e0:	f043 0304 	orr.w	r3, r3, #4
 80127e4:	6313      	str	r3, [r2, #48]	; 0x30
 80127e6:	4b93      	ldr	r3, [pc, #588]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ea:	f003 0304 	and.w	r3, r3, #4
 80127ee:	61bb      	str	r3, [r7, #24]
 80127f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80127f2:	4a90      	ldr	r2, [pc, #576]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127f4:	4b8f      	ldr	r3, [pc, #572]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 80127f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127f8:	f043 0301 	orr.w	r3, r3, #1
 80127fc:	6313      	str	r3, [r2, #48]	; 0x30
 80127fe:	4b8d      	ldr	r3, [pc, #564]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012802:	f003 0301 	and.w	r3, r3, #1
 8012806:	617b      	str	r3, [r7, #20]
 8012808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801280a:	4a8a      	ldr	r2, [pc, #552]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801280c:	4b89      	ldr	r3, [pc, #548]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012814:	6313      	str	r3, [r2, #48]	; 0x30
 8012816:	4b87      	ldr	r3, [pc, #540]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801281a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801281e:	613b      	str	r3, [r7, #16]
 8012820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012822:	4a84      	ldr	r2, [pc, #528]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012824:	4b83      	ldr	r3, [pc, #524]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801282c:	6313      	str	r3, [r2, #48]	; 0x30
 801282e:	4b81      	ldr	r3, [pc, #516]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012836:	60fb      	str	r3, [r7, #12]
 8012838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801283a:	4a7e      	ldr	r2, [pc, #504]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801283c:	4b7d      	ldr	r3, [pc, #500]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012844:	6313      	str	r3, [r2, #48]	; 0x30
 8012846:	4b7b      	ldr	r3, [pc, #492]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801284e:	60bb      	str	r3, [r7, #8]
 8012850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012852:	4a78      	ldr	r2, [pc, #480]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012854:	4b77      	ldr	r3, [pc, #476]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012858:	f043 0320 	orr.w	r3, r3, #32
 801285c:	6313      	str	r3, [r2, #48]	; 0x30
 801285e:	4b75      	ldr	r3, [pc, #468]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012862:	f003 0320 	and.w	r3, r3, #32
 8012866:	607b      	str	r3, [r7, #4]
 8012868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801286a:	4a72      	ldr	r2, [pc, #456]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801286c:	4b71      	ldr	r3, [pc, #452]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 801286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012874:	6313      	str	r3, [r2, #48]	; 0x30
 8012876:	4b6f      	ldr	r3, [pc, #444]	; (8012a34 <MX_GPIO_Init+0x2c0>)
 8012878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801287e:	603b      	str	r3, [r7, #0]
 8012880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8012882:	2201      	movs	r2, #1
 8012884:	2120      	movs	r1, #32
 8012886:	486c      	ldr	r0, [pc, #432]	; (8012a38 <MX_GPIO_Init+0x2c4>)
 8012888:	f7f0 fe54 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 801288c:	2200      	movs	r2, #0
 801288e:	f241 010c 	movw	r1, #4108	; 0x100c
 8012892:	486a      	ldr	r0, [pc, #424]	; (8012a3c <MX_GPIO_Init+0x2c8>)
 8012894:	f7f0 fe4e 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8012898:	2200      	movs	r2, #0
 801289a:	2108      	movs	r1, #8
 801289c:	4868      	ldr	r0, [pc, #416]	; (8012a40 <MX_GPIO_Init+0x2cc>)
 801289e:	f7f0 fe49 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80128a2:	2200      	movs	r2, #0
 80128a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80128a8:	4866      	ldr	r0, [pc, #408]	; (8012a44 <MX_GPIO_Init+0x2d0>)
 80128aa:	f7f0 fe43 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80128ae:	2200      	movs	r2, #0
 80128b0:	21c8      	movs	r1, #200	; 0xc8
 80128b2:	4865      	ldr	r0, [pc, #404]	; (8012a48 <MX_GPIO_Init+0x2d4>)
 80128b4:	f7f0 fe3e 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80128b8:	2308      	movs	r3, #8
 80128ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80128bc:	2300      	movs	r3, #0
 80128be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128c0:	2300      	movs	r3, #0
 80128c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80128c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80128c8:	4619      	mov	r1, r3
 80128ca:	4860      	ldr	r0, [pc, #384]	; (8012a4c <MX_GPIO_Init+0x2d8>)
 80128cc:	f7f0 fc88 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80128d0:	2304      	movs	r3, #4
 80128d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128d4:	2302      	movs	r3, #2
 80128d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128d8:	2300      	movs	r3, #0
 80128da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128dc:	2303      	movs	r3, #3
 80128de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80128e0:	2309      	movs	r3, #9
 80128e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80128e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80128e8:	4619      	mov	r1, r3
 80128ea:	4858      	ldr	r0, [pc, #352]	; (8012a4c <MX_GPIO_Init+0x2d8>)
 80128ec:	f7f0 fc78 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80128f0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80128f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128f6:	2302      	movs	r3, #2
 80128f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128fa:	2300      	movs	r3, #0
 80128fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128fe:	2303      	movs	r3, #3
 8012900:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012902:	230b      	movs	r3, #11
 8012904:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801290a:	4619      	mov	r1, r3
 801290c:	484e      	ldr	r0, [pc, #312]	; (8012a48 <MX_GPIO_Init+0x2d4>)
 801290e:	f7f0 fc67 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8012912:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012918:	2312      	movs	r3, #18
 801291a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801291c:	2301      	movs	r3, #1
 801291e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012920:	2300      	movs	r3, #0
 8012922:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012924:	2304      	movs	r3, #4
 8012926:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801292c:	4619      	mov	r1, r3
 801292e:	4848      	ldr	r0, [pc, #288]	; (8012a50 <MX_GPIO_Init+0x2dc>)
 8012930:	f7f0 fc56 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8012934:	2380      	movs	r3, #128	; 0x80
 8012936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012938:	2302      	movs	r3, #2
 801293a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801293c:	2300      	movs	r3, #0
 801293e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012940:	2300      	movs	r3, #0
 8012942:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8012944:	2308      	movs	r3, #8
 8012946:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8012948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801294c:	4619      	mov	r1, r3
 801294e:	483a      	ldr	r0, [pc, #232]	; (8012a38 <MX_GPIO_Init+0x2c4>)
 8012950:	f7f0 fc46 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8012954:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8012958:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801295a:	2302      	movs	r3, #2
 801295c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801295e:	2300      	movs	r3, #0
 8012960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012962:	2303      	movs	r3, #3
 8012964:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8012966:	230c      	movs	r3, #12
 8012968:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801296a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801296e:	4619      	mov	r1, r3
 8012970:	4838      	ldr	r0, [pc, #224]	; (8012a54 <MX_GPIO_Init+0x2e0>)
 8012972:	f7f0 fc35 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8012976:	2360      	movs	r3, #96	; 0x60
 8012978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801297a:	2302      	movs	r3, #2
 801297c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801297e:	2300      	movs	r3, #0
 8012980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012982:	2300      	movs	r3, #0
 8012984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012986:	230d      	movs	r3, #13
 8012988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801298a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801298e:	4619      	mov	r1, r3
 8012990:	482e      	ldr	r0, [pc, #184]	; (8012a4c <MX_GPIO_Init+0x2d8>)
 8012992:	f7f0 fc25 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8012996:	2340      	movs	r3, #64	; 0x40
 8012998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801299a:	2302      	movs	r3, #2
 801299c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801299e:	2300      	movs	r3, #0
 80129a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129a2:	2303      	movs	r3, #3
 80129a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80129a6:	230a      	movs	r3, #10
 80129a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80129aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80129ae:	4619      	mov	r1, r3
 80129b0:	4827      	ldr	r0, [pc, #156]	; (8012a50 <MX_GPIO_Init+0x2dc>)
 80129b2:	f7f0 fc15 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80129b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80129bc:	2300      	movs	r3, #0
 80129be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129c0:	2300      	movs	r3, #0
 80129c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80129c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80129c8:	4619      	mov	r1, r3
 80129ca:	4823      	ldr	r0, [pc, #140]	; (8012a58 <MX_GPIO_Init+0x2e4>)
 80129cc:	f7f0 fc08 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80129d0:	2340      	movs	r3, #64	; 0x40
 80129d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80129d4:	4b21      	ldr	r3, [pc, #132]	; (8012a5c <MX_GPIO_Init+0x2e8>)
 80129d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129d8:	2300      	movs	r3, #0
 80129da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80129dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80129e0:	4619      	mov	r1, r3
 80129e2:	4815      	ldr	r0, [pc, #84]	; (8012a38 <MX_GPIO_Init+0x2c4>)
 80129e4:	f7f0 fbfc 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80129e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80129ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129ee:	2302      	movs	r3, #2
 80129f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129f2:	2300      	movs	r3, #0
 80129f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129f6:	2303      	movs	r3, #3
 80129f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80129fa:	230a      	movs	r3, #10
 80129fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a02:	4619      	mov	r1, r3
 8012a04:	4816      	ldr	r0, [pc, #88]	; (8012a60 <MX_GPIO_Init+0x2ec>)
 8012a06:	f7f0 fbeb 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8012a0a:	23f0      	movs	r3, #240	; 0xf0
 8012a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a0e:	2302      	movs	r3, #2
 8012a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a12:	2300      	movs	r3, #0
 8012a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a16:	2300      	movs	r3, #0
 8012a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012a1a:	230a      	movs	r3, #10
 8012a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a22:	4619      	mov	r1, r3
 8012a24:	4805      	ldr	r0, [pc, #20]	; (8012a3c <MX_GPIO_Init+0x2c8>)
 8012a26:	f7f0 fbdb 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8012a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a30:	e018      	b.n	8012a64 <MX_GPIO_Init+0x2f0>
 8012a32:	bf00      	nop
 8012a34:	40023800 	.word	0x40023800
 8012a38:	40020c00 	.word	0x40020c00
 8012a3c:	40022000 	.word	0x40022000
 8012a40:	40022800 	.word	0x40022800
 8012a44:	40021c00 	.word	0x40021c00
 8012a48:	40021800 	.word	0x40021800
 8012a4c:	40021000 	.word	0x40021000
 8012a50:	40020400 	.word	0x40020400
 8012a54:	40020800 	.word	0x40020800
 8012a58:	40022400 	.word	0x40022400
 8012a5c:	10120000 	.word	0x10120000
 8012a60:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a64:	2302      	movs	r3, #2
 8012a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012a70:	230a      	movs	r3, #10
 8012a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8012a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a78:	4619      	mov	r1, r3
 8012a7a:	48bb      	ldr	r0, [pc, #748]	; (8012d68 <MX_GPIO_Init+0x5f4>)
 8012a7c:	f7f0 fbb0 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8012a80:	2320      	movs	r3, #32
 8012a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012a84:	2301      	movs	r3, #1
 8012a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8012a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a94:	4619      	mov	r1, r3
 8012a96:	48b5      	ldr	r0, [pc, #724]	; (8012d6c <MX_GPIO_Init+0x5f8>)
 8012a98:	f7f0 fba2 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8012a9c:	2308      	movs	r3, #8
 8012a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012aa0:	2302      	movs	r3, #2
 8012aa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012aac:	230d      	movs	r3, #13
 8012aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8012ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	48ad      	ldr	r0, [pc, #692]	; (8012d6c <MX_GPIO_Init+0x5f8>)
 8012ab8:	f7f0 fb92 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8012abc:	f241 030c 	movw	r3, #4108	; 0x100c
 8012ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012aca:	2300      	movs	r3, #0
 8012acc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	48a6      	ldr	r0, [pc, #664]	; (8012d70 <MX_GPIO_Init+0x5fc>)
 8012ad6:	f7f0 fb83 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8012ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8012ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012aec:	4619      	mov	r1, r3
 8012aee:	48a1      	ldr	r0, [pc, #644]	; (8012d74 <MX_GPIO_Init+0x600>)
 8012af0:	f7f0 fb76 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8012af4:	2308      	movs	r3, #8
 8012af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012af8:	2301      	movs	r3, #1
 8012afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012afc:	2300      	movs	r3, #0
 8012afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b00:	2300      	movs	r3, #0
 8012b02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8012b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b08:	4619      	mov	r1, r3
 8012b0a:	489b      	ldr	r0, [pc, #620]	; (8012d78 <MX_GPIO_Init+0x604>)
 8012b0c:	f7f0 fb68 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8012b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b16:	2302      	movs	r3, #2
 8012b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012b22:	230d      	movs	r3, #13
 8012b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8012b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	488e      	ldr	r0, [pc, #568]	; (8012d68 <MX_GPIO_Init+0x5f4>)
 8012b2e:	f7f0 fb57 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8012b32:	2310      	movs	r3, #16
 8012b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012b36:	2300      	movs	r3, #0
 8012b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8012b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b42:	4619      	mov	r1, r3
 8012b44:	4889      	ldr	r0, [pc, #548]	; (8012d6c <MX_GPIO_Init+0x5f8>)
 8012b46:	f7f0 fb4b 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8012b4a:	2304      	movs	r3, #4
 8012b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b4e:	2302      	movs	r3, #2
 8012b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b52:	2300      	movs	r3, #0
 8012b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012b56:	2303      	movs	r3, #3
 8012b58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8012b5a:	230c      	movs	r3, #12
 8012b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8012b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b62:	4619      	mov	r1, r3
 8012b64:	4881      	ldr	r0, [pc, #516]	; (8012d6c <MX_GPIO_Init+0x5f8>)
 8012b66:	f7f0 fb3b 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8012b6a:	f248 0304 	movw	r3, #32772	; 0x8004
 8012b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012b70:	2300      	movs	r3, #0
 8012b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b74:	2300      	movs	r3, #0
 8012b76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	487f      	ldr	r0, [pc, #508]	; (8012d7c <MX_GPIO_Init+0x608>)
 8012b80:	f7f0 fb2e 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8012b84:	2302      	movs	r3, #2
 8012b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b88:	2302      	movs	r3, #2
 8012b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b90:	2300      	movs	r3, #0
 8012b92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012b94:	2305      	movs	r3, #5
 8012b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8012b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	4874      	ldr	r0, [pc, #464]	; (8012d70 <MX_GPIO_Init+0x5fc>)
 8012ba0:	f7f0 fb1e 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8012ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012baa:	2301      	movs	r3, #1
 8012bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8012bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012bba:	4619      	mov	r1, r3
 8012bbc:	486f      	ldr	r0, [pc, #444]	; (8012d7c <MX_GPIO_Init+0x608>)
 8012bbe:	f7f0 fb0f 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8012bc2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8012bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bc8:	2302      	movs	r3, #2
 8012bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012bd4:	230d      	movs	r3, #13
 8012bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012bdc:	4619      	mov	r1, r3
 8012bde:	4867      	ldr	r0, [pc, #412]	; (8012d7c <MX_GPIO_Init+0x608>)
 8012be0:	f7f0 fafe 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 8012be4:	2301      	movs	r3, #1
 8012be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012be8:	2302      	movs	r3, #2
 8012bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bec:	2300      	movs	r3, #0
 8012bee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8012bf4:	2302      	movs	r3, #2
 8012bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 8012bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	485c      	ldr	r0, [pc, #368]	; (8012d70 <MX_GPIO_Init+0x5fc>)
 8012c00:	f7f0 faee 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 8012c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c0a:	2302      	movs	r3, #2
 8012c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c12:	2300      	movs	r3, #0
 8012c14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012c16:	2301      	movs	r3, #1
 8012c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 8012c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c1e:	4619      	mov	r1, r3
 8012c20:	4857      	ldr	r0, [pc, #348]	; (8012d80 <MX_GPIO_Init+0x60c>)
 8012c22:	f7f0 fadd 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8012c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8012c2c:	4b55      	ldr	r3, [pc, #340]	; (8012d84 <MX_GPIO_Init+0x610>)
 8012c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c30:	2300      	movs	r3, #0
 8012c32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8012c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c38:	4619      	mov	r1, r3
 8012c3a:	484d      	ldr	r0, [pc, #308]	; (8012d70 <MX_GPIO_Init+0x5fc>)
 8012c3c:	f7f0 fad0 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8012c40:	23c0      	movs	r3, #192	; 0xc0
 8012c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c44:	2302      	movs	r3, #2
 8012c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012c4c:	2303      	movs	r3, #3
 8012c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8012c50:	2308      	movs	r3, #8
 8012c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c58:	4619      	mov	r1, r3
 8012c5a:	4846      	ldr	r0, [pc, #280]	; (8012d74 <MX_GPIO_Init+0x600>)
 8012c5c:	f7f0 fac0 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8012c60:	23c8      	movs	r3, #200	; 0xc8
 8012c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012c64:	2301      	movs	r3, #1
 8012c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c74:	4619      	mov	r1, r3
 8012c76:	483c      	ldr	r0, [pc, #240]	; (8012d68 <MX_GPIO_Init+0x5f4>)
 8012c78:	f7f0 fab2 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8012c7c:	2332      	movs	r3, #50	; 0x32
 8012c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c80:	2302      	movs	r3, #2
 8012c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c84:	2300      	movs	r3, #0
 8012c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012c88:	2303      	movs	r3, #3
 8012c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012c8c:	230b      	movs	r3, #11
 8012c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c94:	4619      	mov	r1, r3
 8012c96:	4837      	ldr	r0, [pc, #220]	; (8012d74 <MX_GPIO_Init+0x600>)
 8012c98:	f7f0 faa2 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8012c9c:	2304      	movs	r3, #4
 8012c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ca0:	2302      	movs	r3, #2
 8012ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ca8:	2303      	movs	r3, #3
 8012caa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8012cac:	2309      	movs	r3, #9
 8012cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012cb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	4834      	ldr	r0, [pc, #208]	; (8012d88 <MX_GPIO_Init+0x614>)
 8012cb8:	f7f0 fa92 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8012cbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8012cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cc2:	2302      	movs	r3, #2
 8012cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012cca:	2303      	movs	r3, #3
 8012ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8012cce:	2309      	movs	r3, #9
 8012cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	4824      	ldr	r0, [pc, #144]	; (8012d6c <MX_GPIO_Init+0x5f8>)
 8012cda:	f7f0 fa81 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8012cde:	2304      	movs	r3, #4
 8012ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8012cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cee:	4619      	mov	r1, r3
 8012cf0:	481d      	ldr	r0, [pc, #116]	; (8012d68 <MX_GPIO_Init+0x5f4>)
 8012cf2:	f7f0 fa75 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8012cf6:	2386      	movs	r3, #134	; 0x86
 8012cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cfa:	2302      	movs	r3, #2
 8012cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d02:	2303      	movs	r3, #3
 8012d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012d06:	230b      	movs	r3, #11
 8012d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d0e:	4619      	mov	r1, r3
 8012d10:	481b      	ldr	r0, [pc, #108]	; (8012d80 <MX_GPIO_Init+0x60c>)
 8012d12:	f7f0 fa65 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8012d16:	2350      	movs	r3, #80	; 0x50
 8012d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d1a:	2302      	movs	r3, #2
 8012d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d22:	2300      	movs	r3, #0
 8012d24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012d26:	230d      	movs	r3, #13
 8012d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d2e:	4619      	mov	r1, r3
 8012d30:	4813      	ldr	r0, [pc, #76]	; (8012d80 <MX_GPIO_Init+0x60c>)
 8012d32:	f7f0 fa55 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8012d36:	2340      	movs	r3, #64	; 0x40
 8012d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d3a:	2302      	movs	r3, #2
 8012d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d42:	2300      	movs	r3, #0
 8012d44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8012d46:	2309      	movs	r3, #9
 8012d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8012d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d4e:	4619      	mov	r1, r3
 8012d50:	480a      	ldr	r0, [pc, #40]	; (8012d7c <MX_GPIO_Init+0x608>)
 8012d52:	f7f0 fa45 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8012d56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8012d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d60:	2300      	movs	r3, #0
 8012d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d64:	2300      	movs	r3, #0
 8012d66:	e011      	b.n	8012d8c <MX_GPIO_Init+0x618>
 8012d68:	40021800 	.word	0x40021800
 8012d6c:	40020c00 	.word	0x40020c00
 8012d70:	40022000 	.word	0x40022000
 8012d74:	40020800 	.word	0x40020800
 8012d78:	40022800 	.word	0x40022800
 8012d7c:	40021c00 	.word	0x40021c00
 8012d80:	40020000 	.word	0x40020000
 8012d84:	10120000 	.word	0x10120000
 8012d88:	40020400 	.word	0x40020400
 8012d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012d8e:	2305      	movs	r3, #5
 8012d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d96:	4619      	mov	r1, r3
 8012d98:	4803      	ldr	r0, [pc, #12]	; (8012da8 <MX_GPIO_Init+0x634>)
 8012d9a:	f7f0 fa21 	bl	80031e0 <HAL_GPIO_Init>

}
 8012d9e:	bf00      	nop
 8012da0:	3740      	adds	r7, #64	; 0x40
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	40020400 	.word	0x40020400

08012dac <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8012dba:	f107 010c 	add.w	r1, r7, #12
 8012dbe:	230a      	movs	r3, #10
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	4804      	ldr	r0, [pc, #16]	; (8012dd4 <__io_putchar+0x28>)
 8012dc4:	f7f4 fa01 	bl	80071ca <HAL_UART_Transmit>
	return ch;
 8012dc8:	687b      	ldr	r3, [r7, #4]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3710      	adds	r7, #16
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	20000c1c 	.word	0x20000c1c

08012dd8 <_write>:

int _write(int file, char *ptr, int len) {
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012de4:	2300      	movs	r3, #0
 8012de6:	617b      	str	r3, [r7, #20]
 8012de8:	e009      	b.n	8012dfe <_write+0x26>
		__io_putchar(*ptr++);
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	1c5a      	adds	r2, r3, #1
 8012dee:	60ba      	str	r2, [r7, #8]
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7ff ffda 	bl	8012dac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	617b      	str	r3, [r7, #20]
 8012dfe:	697a      	ldr	r2, [r7, #20]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	dbf1      	blt.n	8012dea <_write+0x12>
	}
	return len;
 8012e06:	687b      	ldr	r3, [r7, #4]
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3718      	adds	r7, #24
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <__io_getchar>:

int __io_getchar(void) {
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef Status = HAL_BUSY;
 8012e16:	2302      	movs	r3, #2
 8012e18:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	while (Status != HAL_OK)
 8012e1a:	e007      	b.n	8012e2c <__io_getchar+0x1c>
		Status = HAL_UART_Receive(&huart1, &Data, 1, 10);
 8012e1c:	1db9      	adds	r1, r7, #6
 8012e1e:	230a      	movs	r3, #10
 8012e20:	2201      	movs	r2, #1
 8012e22:	4806      	ldr	r0, [pc, #24]	; (8012e3c <__io_getchar+0x2c>)
 8012e24:	f7f4 fa5c 	bl	80072e0 <HAL_UART_Receive>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	71fb      	strb	r3, [r7, #7]
	while (Status != HAL_OK)
 8012e2c:	79fb      	ldrb	r3, [r7, #7]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d1f4      	bne.n	8012e1c <__io_getchar+0xc>

	return (Data);
 8012e32:	79bb      	ldrb	r3, [r7, #6]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	20000c1c 	.word	0x20000c1c

08012e40 <_read>:

int _read(int file, char *ptr, int len) {
 8012e40:	b590      	push	{r4, r7, lr}
 8012e42:	b087      	sub	sp, #28
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	60f8      	str	r0, [r7, #12]
 8012e48:	60b9      	str	r1, [r7, #8]
 8012e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	617b      	str	r3, [r7, #20]
 8012e50:	e00a      	b.n	8012e68 <_read+0x28>
		*ptr++ = __io_getchar();
 8012e52:	68bc      	ldr	r4, [r7, #8]
 8012e54:	1c63      	adds	r3, r4, #1
 8012e56:	60bb      	str	r3, [r7, #8]
 8012e58:	f7ff ffda 	bl	8012e10 <__io_getchar>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	3301      	adds	r3, #1
 8012e66:	617b      	str	r3, [r7, #20]
 8012e68:	697a      	ldr	r2, [r7, #20]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	dbf0      	blt.n	8012e52 <_read+0x12>
	}
	return len;
 8012e70:	687b      	ldr	r3, [r7, #4]
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	371c      	adds	r7, #28
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd90      	pop	{r4, r7, pc}

08012e7a <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8012e7a:	b580      	push	{r7, lr}
 8012e7c:	b082      	sub	sp, #8
 8012e7e:	af00      	add	r7, sp, #0
 8012e80:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8012e82:	f7fe f8d9 	bl	8011038 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8012e86:	f000 fc3d 	bl	8013704 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8012e8a:	2001      	movs	r0, #1
 8012e8c:	f7f9 f9e7 	bl	800c25e <osDelay>
 8012e90:	e7fb      	b.n	8012e8a <StartDefaultTask+0x10>
	...

08012e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	4a04      	ldr	r2, [pc, #16]	; (8012eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	d101      	bne.n	8012eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8012ea6:	f7ee feaf 	bl	8001c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012eaa:	bf00      	nop
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	40010000 	.word	0x40010000

08012eb8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	printf("Error file = %s Line = %d", file, line);
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	6879      	ldr	r1, [r7, #4]
 8012ec6:	4803      	ldr	r0, [pc, #12]	; (8012ed4 <_Error_Handler+0x1c>)
 8012ec8:	f001 fd32 	bl	8014930 <iprintf>

  /* USER CODE END Error_Handler_Debug */
}
 8012ecc:	bf00      	nop
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	0801719c 	.word	0x0801719c

08012ed8 <SDRAMDISK_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_initialize(BYTE lun)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	4603      	mov	r3, r0
 8012ee0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012ee2:	4b0b      	ldr	r3, [pc, #44]	; (8012f10 <SDRAMDISK_initialize+0x38>)
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	701a      	strb	r2, [r3, #0]

  /* Configure the SDRAM device */
  if(BSP_SDRAM_Init() == SDRAM_OK)
 8012ee8:	f7fe f808 	bl	8010efc <BSP_SDRAM_Init>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d107      	bne.n	8012f02 <SDRAMDISK_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012ef2:	4b07      	ldr	r3, [pc, #28]	; (8012f10 <SDRAMDISK_initialize+0x38>)
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	f023 0301 	bic.w	r3, r3, #1
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	4b04      	ldr	r3, [pc, #16]	; (8012f10 <SDRAMDISK_initialize+0x38>)
 8012f00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012f02:	4b03      	ldr	r3, [pc, #12]	; (8012f10 <SDRAMDISK_initialize+0x38>)
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	b2db      	uxtb	r3, r3
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	20000038 	.word	0x20000038

08012f14 <SDRAMDISK_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b083      	sub	sp, #12
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	71fb      	strb	r3, [r7, #7]
  return Stat;
 8012f1e:	4b04      	ldr	r3, [pc, #16]	; (8012f30 <SDRAMDISK_status+0x1c>)
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	b2db      	uxtb	r3, r3
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	370c      	adds	r7, #12
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr
 8012f30:	20000038 	.word	0x20000038

08012f34 <SDRAMDISK_read>:
  * @retval DRESULT: Operation result
  */
/* USER CODE BEGIN beforeWriteSection */

//TV: Moved to user code because changes
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b088      	sub	sp, #32
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60b9      	str	r1, [r7, #8]
 8012f3c:	607a      	str	r2, [r7, #4]
 8012f3e:	603b      	str	r3, [r7, #0]
 8012f40:	4603      	mov	r3, r0
 8012f42:	73fb      	strb	r3, [r7, #15]
	uint32_t *pSrcBuffer = (uint32_t *) &buff;
 8012f44:	f107 0308 	add.w	r3, r7, #8
 8012f48:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	025b      	lsls	r3, r3, #9
 8012f4e:	089b      	lsrs	r3, r3, #2
 8012f50:	61bb      	str	r3, [r7, #24]
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	4b08      	ldr	r3, [pc, #32]	; (8012f78 <SDRAMDISK_read+0x44>)
 8012f56:	4413      	add	r3, r2
 8012f58:	025b      	lsls	r3, r3, #9
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 8012f5a:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 8012f5c:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pSrcBuffer, BufferSize);
 8012f5e:	69fb      	ldr	r3, [r7, #28]
 8012f60:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 8012f62:	69ba      	ldr	r2, [r7, #24]
 8012f64:	4619      	mov	r1, r3
 8012f66:	f7fd ffd5 	bl	8010f14 <BSP_SDRAM_ReadData>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	74fb      	strb	r3, [r7, #19]

	return RES_OK;
 8012f6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3720      	adds	r7, #32
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	00600800 	.word	0x00600800

08012f7c <SDRAMDISK_write>:
  */

/* USER CODE BEGIN beforeIoctlSection */
//TV: Moved to user code because changes
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b088      	sub	sp, #32
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60b9      	str	r1, [r7, #8]
 8012f84:	607a      	str	r2, [r7, #4]
 8012f86:	603b      	str	r3, [r7, #0]
 8012f88:	4603      	mov	r3, r0
 8012f8a:	73fb      	strb	r3, [r7, #15]
	uint32_t *pDstBuffer = (uint32_t *) &buff;
 8012f8c:	f107 0308 	add.w	r3, r7, #8
 8012f90:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	025b      	lsls	r3, r3, #9
 8012f96:	089b      	lsrs	r3, r3, #2
 8012f98:	61bb      	str	r3, [r7, #24]
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	4b08      	ldr	r3, [pc, #32]	; (8012fc0 <SDRAMDISK_write+0x44>)
 8012f9e:	4413      	add	r3, r2
 8012fa0:	025b      	lsls	r3, r3, #9
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 8012fa2:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8012fa4:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pDstBuffer, BufferSize);
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8012faa:	69ba      	ldr	r2, [r7, #24]
 8012fac:	4619      	mov	r1, r3
 8012fae:	f7fd ffcb 	bl	8010f48 <BSP_SDRAM_WriteData>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*(__IO uint32_t *) pSramAddress++ = *pDstBuffer++;
	//}

	return RES_OK;
 8012fb6:	7cfb      	ldrb	r3, [r7, #19]
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3720      	adds	r7, #32
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	00600800 	.word	0x00600800

08012fc4 <SDRAMDISK_ioctl>:
  */

/* USER CODE BEGIN lastSection */
//TV: Moved to user code because changes
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	603a      	str	r2, [r7, #0]
 8012fce:	71fb      	strb	r3, [r7, #7]
 8012fd0:	460b      	mov	r3, r1
 8012fd2:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT)
 8012fd8:	4b1b      	ldr	r3, [pc, #108]	; (8013048 <SDRAMDISK_ioctl+0x84>)
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	f003 0301 	and.w	r3, r3, #1
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d001      	beq.n	8012fea <SDRAMDISK_ioctl+0x26>
		return RES_NOTRDY;
 8012fe6:	2303      	movs	r3, #3
 8012fe8:	e027      	b.n	801303a <SDRAMDISK_ioctl+0x76>

	switch (cmd) {
 8012fea:	79bb      	ldrb	r3, [r7, #6]
 8012fec:	2b03      	cmp	r3, #3
 8012fee:	d821      	bhi.n	8013034 <SDRAMDISK_ioctl+0x70>
 8012ff0:	a201      	add	r2, pc, #4	; (adr r2, 8012ff8 <SDRAMDISK_ioctl+0x34>)
 8012ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff6:	bf00      	nop
 8012ff8:	08013009 	.word	0x08013009
 8012ffc:	0801300f 	.word	0x0801300f
 8013000:	0801301b 	.word	0x0801301b
 8013004:	08013029 	.word	0x08013029
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 8013008:	2300      	movs	r3, #0
 801300a:	73fb      	strb	r3, [r7, #15]
		break;
 801300c:	e014      	b.n	8013038 <SDRAMDISK_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	4a0e      	ldr	r2, [pc, #56]	; (801304c <SDRAMDISK_ioctl+0x88>)
 8013012:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8013014:	2300      	movs	r3, #0
 8013016:	73fb      	strb	r3, [r7, #15]
		break;
 8013018:	e00e      	b.n	8013038 <SDRAMDISK_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013020:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8013022:	2300      	movs	r3, #0
 8013024:	73fb      	strb	r3, [r7, #15]
		break;
 8013026:	e007      	b.n	8013038 <SDRAMDISK_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	2201      	movs	r2, #1
 801302c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 801302e:	2300      	movs	r3, #0
 8013030:	73fb      	strb	r3, [r7, #15]
		break;
 8013032:	e001      	b.n	8013038 <SDRAMDISK_ioctl+0x74>

	default:
		res = RES_PARERR;
 8013034:	2304      	movs	r3, #4
 8013036:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013038:	7bfb      	ldrb	r3, [r7, #15]
}
 801303a:	4618      	mov	r0, r3
 801303c:	3714      	adds	r7, #20
 801303e:	46bd      	mov	sp, r7
 8013040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	20000038 	.word	0x20000038
 801304c:	007ff800 	.word	0x007ff800

08013050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013054:	2003      	movs	r0, #3
 8013056:	f7ef fa07 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 801305a:	2200      	movs	r2, #0
 801305c:	2100      	movs	r1, #0
 801305e:	f06f 000b 	mvn.w	r0, #11
 8013062:	f7ef fa0c 	bl	800247e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8013066:	2200      	movs	r2, #0
 8013068:	2100      	movs	r1, #0
 801306a:	f06f 000a 	mvn.w	r0, #10
 801306e:	f7ef fa06 	bl	800247e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8013072:	2200      	movs	r2, #0
 8013074:	2100      	movs	r1, #0
 8013076:	f06f 0009 	mvn.w	r0, #9
 801307a:	f7ef fa00 	bl	800247e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801307e:	2200      	movs	r2, #0
 8013080:	2100      	movs	r1, #0
 8013082:	f06f 0004 	mvn.w	r0, #4
 8013086:	f7ef f9fa 	bl	800247e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 801308a:	2200      	movs	r2, #0
 801308c:	2100      	movs	r1, #0
 801308e:	f06f 0003 	mvn.w	r0, #3
 8013092:	f7ef f9f4 	bl	800247e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8013096:	2200      	movs	r2, #0
 8013098:	210f      	movs	r1, #15
 801309a:	f06f 0001 	mvn.w	r0, #1
 801309e:	f7ef f9ee 	bl	800247e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80130a2:	2200      	movs	r2, #0
 80130a4:	210f      	movs	r1, #15
 80130a6:	f04f 30ff 	mov.w	r0, #4294967295
 80130aa:	f7ef f9e8 	bl	800247e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80130ae:	bf00      	nop
 80130b0:	bd80      	pop	{r7, pc}
	...

080130b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4a2f      	ldr	r2, [pc, #188]	; (8013180 <HAL_ADC_MspInit+0xcc>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d157      	bne.n	8013176 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80130c6:	4a2f      	ldr	r2, [pc, #188]	; (8013184 <HAL_ADC_MspInit+0xd0>)
 80130c8:	4b2e      	ldr	r3, [pc, #184]	; (8013184 <HAL_ADC_MspInit+0xd0>)
 80130ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80130d0:	6453      	str	r3, [r2, #68]	; 0x44
 80130d2:	4b2c      	ldr	r3, [pc, #176]	; (8013184 <HAL_ADC_MspInit+0xd0>)
 80130d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80130da:	60bb      	str	r3, [r7, #8]
 80130dc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80130de:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80130e2:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80130e4:	2303      	movs	r3, #3
 80130e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130e8:	2300      	movs	r3, #0
 80130ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80130ec:	f107 030c 	add.w	r3, r7, #12
 80130f0:	4619      	mov	r1, r3
 80130f2:	4825      	ldr	r0, [pc, #148]	; (8013188 <HAL_ADC_MspInit+0xd4>)
 80130f4:	f7f0 f874 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80130f8:	2301      	movs	r3, #1
 80130fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80130fc:	2303      	movs	r3, #3
 80130fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013100:	2300      	movs	r3, #0
 8013102:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8013104:	f107 030c 	add.w	r3, r7, #12
 8013108:	4619      	mov	r1, r3
 801310a:	4820      	ldr	r0, [pc, #128]	; (801318c <HAL_ADC_MspInit+0xd8>)
 801310c:	f7f0 f868 	bl	80031e0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8013110:	4b1f      	ldr	r3, [pc, #124]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013112:	4a20      	ldr	r2, [pc, #128]	; (8013194 <HAL_ADC_MspInit+0xe0>)
 8013114:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8013116:	4b1e      	ldr	r3, [pc, #120]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013118:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801311c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801311e:	4b1c      	ldr	r3, [pc, #112]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013120:	2200      	movs	r2, #0
 8013122:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8013124:	4b1a      	ldr	r3, [pc, #104]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013126:	2200      	movs	r2, #0
 8013128:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 801312a:	4b19      	ldr	r3, [pc, #100]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 801312c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013130:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8013132:	4b17      	ldr	r3, [pc, #92]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013138:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801313a:	4b15      	ldr	r3, [pc, #84]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 801313c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013140:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8013142:	4b13      	ldr	r3, [pc, #76]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013144:	2200      	movs	r2, #0
 8013146:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8013148:	4b11      	ldr	r3, [pc, #68]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 801314a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801314e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013150:	4b0f      	ldr	r3, [pc, #60]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013152:	2200      	movs	r2, #0
 8013154:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8013156:	480e      	ldr	r0, [pc, #56]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013158:	f7ef fac2 	bl	80026e0 <HAL_DMA_Init>
 801315c:	4603      	mov	r3, r0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d003      	beq.n	801316a <HAL_ADC_MspInit+0xb6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8013162:	2189      	movs	r1, #137	; 0x89
 8013164:	480c      	ldr	r0, [pc, #48]	; (8013198 <HAL_ADC_MspInit+0xe4>)
 8013166:	f7ff fea7 	bl	8012eb8 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4a08      	ldr	r2, [pc, #32]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 801316e:	639a      	str	r2, [r3, #56]	; 0x38
 8013170:	4a07      	ldr	r2, [pc, #28]	; (8013190 <HAL_ADC_MspInit+0xdc>)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8013176:	bf00      	nop
 8013178:	3720      	adds	r7, #32
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	40012200 	.word	0x40012200
 8013184:	40023800 	.word	0x40023800
 8013188:	40021400 	.word	0x40021400
 801318c:	40020000 	.word	0x40020000
 8013190:	20000a6c 	.word	0x20000a6c
 8013194:	40026410 	.word	0x40026410
 8013198:	080171b8 	.word	0x080171b8

0801319c <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 801319c:	b480      	push	{r7}
 801319e:	b085      	sub	sp, #20
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	4a0a      	ldr	r2, [pc, #40]	; (80131d4 <HAL_CRC_MspInit+0x38>)
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d10b      	bne.n	80131c6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80131ae:	4a0a      	ldr	r2, [pc, #40]	; (80131d8 <HAL_CRC_MspInit+0x3c>)
 80131b0:	4b09      	ldr	r3, [pc, #36]	; (80131d8 <HAL_CRC_MspInit+0x3c>)
 80131b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80131b8:	6313      	str	r3, [r2, #48]	; 0x30
 80131ba:	4b07      	ldr	r3, [pc, #28]	; (80131d8 <HAL_CRC_MspInit+0x3c>)
 80131bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80131c2:	60fb      	str	r3, [r7, #12]
 80131c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80131c6:	bf00      	nop
 80131c8:	3714      	adds	r7, #20
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	40023000 	.word	0x40023000
 80131d8:	40023800 	.word	0x40023800

080131dc <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4a0a      	ldr	r2, [pc, #40]	; (8013214 <HAL_DMA2D_MspInit+0x38>)
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d10b      	bne.n	8013206 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80131ee:	4a0a      	ldr	r2, [pc, #40]	; (8013218 <HAL_DMA2D_MspInit+0x3c>)
 80131f0:	4b09      	ldr	r3, [pc, #36]	; (8013218 <HAL_DMA2D_MspInit+0x3c>)
 80131f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80131f8:	6313      	str	r3, [r2, #48]	; 0x30
 80131fa:	4b07      	ldr	r3, [pc, #28]	; (8013218 <HAL_DMA2D_MspInit+0x3c>)
 80131fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013202:	60fb      	str	r3, [r7, #12]
 8013204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8013206:	bf00      	nop
 8013208:	3714      	adds	r7, #20
 801320a:	46bd      	mov	sp, r7
 801320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013210:	4770      	bx	lr
 8013212:	bf00      	nop
 8013214:	4002b000 	.word	0x4002b000
 8013218:	40023800 	.word	0x40023800

0801321c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b088      	sub	sp, #32
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	4a11      	ldr	r2, [pc, #68]	; (8013270 <HAL_I2C_MspInit+0x54>)
 801322a:	4293      	cmp	r3, r2
 801322c:	d11c      	bne.n	8013268 <HAL_I2C_MspInit+0x4c>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 801322e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013232:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013234:	2312      	movs	r3, #18
 8013236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013238:	2301      	movs	r3, #1
 801323a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801323c:	2303      	movs	r3, #3
 801323e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8013240:	2304      	movs	r3, #4
 8013242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013244:	f107 030c 	add.w	r3, r7, #12
 8013248:	4619      	mov	r1, r3
 801324a:	480a      	ldr	r0, [pc, #40]	; (8013274 <HAL_I2C_MspInit+0x58>)
 801324c:	f7ef ffc8 	bl	80031e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8013250:	4a09      	ldr	r2, [pc, #36]	; (8013278 <HAL_I2C_MspInit+0x5c>)
 8013252:	4b09      	ldr	r3, [pc, #36]	; (8013278 <HAL_I2C_MspInit+0x5c>)
 8013254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013256:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801325a:	6413      	str	r3, [r2, #64]	; 0x40
 801325c:	4b06      	ldr	r3, [pc, #24]	; (8013278 <HAL_I2C_MspInit+0x5c>)
 801325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013264:	60bb      	str	r3, [r7, #8]
 8013266:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8013268:	bf00      	nop
 801326a:	3720      	adds	r7, #32
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	40005c00 	.word	0x40005c00
 8013274:	40021c00 	.word	0x40021c00
 8013278:	40023800 	.word	0x40023800

0801327c <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b088      	sub	sp, #32
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a32      	ldr	r2, [pc, #200]	; (8013354 <HAL_LTDC_MspInit+0xd8>)
 801328a:	4293      	cmp	r3, r2
 801328c:	d15e      	bne.n	801334c <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801328e:	4a32      	ldr	r2, [pc, #200]	; (8013358 <HAL_LTDC_MspInit+0xdc>)
 8013290:	4b31      	ldr	r3, [pc, #196]	; (8013358 <HAL_LTDC_MspInit+0xdc>)
 8013292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013298:	6453      	str	r3, [r2, #68]	; 0x44
 801329a:	4b2f      	ldr	r3, [pc, #188]	; (8013358 <HAL_LTDC_MspInit+0xdc>)
 801329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801329e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80132a2:	60bb      	str	r3, [r7, #8]
 80132a4:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80132a6:	2310      	movs	r3, #16
 80132a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132aa:	2302      	movs	r3, #2
 80132ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132ae:	2300      	movs	r3, #0
 80132b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80132b2:	2300      	movs	r3, #0
 80132b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80132b6:	230e      	movs	r3, #14
 80132b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80132ba:	f107 030c 	add.w	r3, r7, #12
 80132be:	4619      	mov	r1, r3
 80132c0:	4826      	ldr	r0, [pc, #152]	; (801335c <HAL_LTDC_MspInit+0xe0>)
 80132c2:	f7ef ff8d 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80132c6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80132ca:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132cc:	2302      	movs	r3, #2
 80132ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132d0:	2300      	movs	r3, #0
 80132d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80132d4:	2300      	movs	r3, #0
 80132d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80132d8:	230e      	movs	r3, #14
 80132da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80132dc:	f107 030c 	add.w	r3, r7, #12
 80132e0:	4619      	mov	r1, r3
 80132e2:	481f      	ldr	r0, [pc, #124]	; (8013360 <HAL_LTDC_MspInit+0xe4>)
 80132e4:	f7ef ff7c 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80132e8:	23f7      	movs	r3, #247	; 0xf7
 80132ea:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132ec:	2302      	movs	r3, #2
 80132ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132f0:	2300      	movs	r3, #0
 80132f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80132f4:	2300      	movs	r3, #0
 80132f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80132f8:	230e      	movs	r3, #14
 80132fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80132fc:	f107 030c 	add.w	r3, r7, #12
 8013300:	4619      	mov	r1, r3
 8013302:	4818      	ldr	r0, [pc, #96]	; (8013364 <HAL_LTDC_MspInit+0xe8>)
 8013304:	f7ef ff6c 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8013308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801330c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801330e:	2302      	movs	r3, #2
 8013310:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013312:	2300      	movs	r3, #0
 8013314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013316:	2300      	movs	r3, #0
 8013318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801331a:	2309      	movs	r3, #9
 801331c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 801331e:	f107 030c 	add.w	r3, r7, #12
 8013322:	4619      	mov	r1, r3
 8013324:	4810      	ldr	r0, [pc, #64]	; (8013368 <HAL_LTDC_MspInit+0xec>)
 8013326:	f7ef ff5b 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 801332a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 801332e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013330:	2302      	movs	r3, #2
 8013332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013338:	2300      	movs	r3, #0
 801333a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801333c:	230e      	movs	r3, #14
 801333e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013340:	f107 030c 	add.w	r3, r7, #12
 8013344:	4619      	mov	r1, r3
 8013346:	4809      	ldr	r0, [pc, #36]	; (801336c <HAL_LTDC_MspInit+0xf0>)
 8013348:	f7ef ff4a 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801334c:	bf00      	nop
 801334e:	3720      	adds	r7, #32
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	40016800 	.word	0x40016800
 8013358:	40023800 	.word	0x40023800
 801335c:	40021000 	.word	0x40021000
 8013360:	40022400 	.word	0x40022400
 8013364:	40022800 	.word	0x40022800
 8013368:	40021800 	.word	0x40021800
 801336c:	40022000 	.word	0x40022000

08013370 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b08a      	sub	sp, #40	; 0x28
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013380:	d10c      	bne.n	801339c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013382:	4a19      	ldr	r2, [pc, #100]	; (80133e8 <HAL_TIM_Base_MspInit+0x78>)
 8013384:	4b18      	ldr	r3, [pc, #96]	; (80133e8 <HAL_TIM_Base_MspInit+0x78>)
 8013386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013388:	f043 0301 	orr.w	r3, r3, #1
 801338c:	6413      	str	r3, [r2, #64]	; 0x40
 801338e:	4b16      	ldr	r3, [pc, #88]	; (80133e8 <HAL_TIM_Base_MspInit+0x78>)
 8013390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013392:	f003 0301 	and.w	r3, r3, #1
 8013396:	613b      	str	r3, [r7, #16]
 8013398:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 801339a:	e020      	b.n	80133de <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	4a12      	ldr	r2, [pc, #72]	; (80133ec <HAL_TIM_Base_MspInit+0x7c>)
 80133a2:	4293      	cmp	r3, r2
 80133a4:	d11b      	bne.n	80133de <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80133a6:	4a10      	ldr	r2, [pc, #64]	; (80133e8 <HAL_TIM_Base_MspInit+0x78>)
 80133a8:	4b0f      	ldr	r3, [pc, #60]	; (80133e8 <HAL_TIM_Base_MspInit+0x78>)
 80133aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ac:	f043 0302 	orr.w	r3, r3, #2
 80133b0:	6413      	str	r3, [r2, #64]	; 0x40
 80133b2:	4b0d      	ldr	r3, [pc, #52]	; (80133e8 <HAL_TIM_Base_MspInit+0x78>)
 80133b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133b6:	f003 0302 	and.w	r3, r3, #2
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80133be:	2310      	movs	r3, #16
 80133c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133c2:	2302      	movs	r3, #2
 80133c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133c6:	2300      	movs	r3, #0
 80133c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80133ca:	2300      	movs	r3, #0
 80133cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80133ce:	2302      	movs	r3, #2
 80133d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80133d2:	f107 0314 	add.w	r3, r7, #20
 80133d6:	4619      	mov	r1, r3
 80133d8:	4805      	ldr	r0, [pc, #20]	; (80133f0 <HAL_TIM_Base_MspInit+0x80>)
 80133da:	f7ef ff01 	bl	80031e0 <HAL_GPIO_Init>
}
 80133de:	bf00      	nop
 80133e0:	3728      	adds	r7, #40	; 0x28
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	40023800 	.word	0x40023800
 80133ec:	40000400 	.word	0x40000400
 80133f0:	40020400 	.word	0x40020400

080133f4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b088      	sub	sp, #32
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4a19      	ldr	r2, [pc, #100]	; (8013468 <HAL_UART_MspInit+0x74>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d12c      	bne.n	8013460 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8013406:	4a19      	ldr	r2, [pc, #100]	; (801346c <HAL_UART_MspInit+0x78>)
 8013408:	4b18      	ldr	r3, [pc, #96]	; (801346c <HAL_UART_MspInit+0x78>)
 801340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801340c:	f043 0310 	orr.w	r3, r3, #16
 8013410:	6453      	str	r3, [r2, #68]	; 0x44
 8013412:	4b16      	ldr	r3, [pc, #88]	; (801346c <HAL_UART_MspInit+0x78>)
 8013414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013416:	f003 0310 	and.w	r3, r3, #16
 801341a:	60bb      	str	r3, [r7, #8]
 801341c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 801341e:	2380      	movs	r3, #128	; 0x80
 8013420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013422:	2302      	movs	r3, #2
 8013424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013426:	2300      	movs	r3, #0
 8013428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801342a:	2300      	movs	r3, #0
 801342c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801342e:	2307      	movs	r3, #7
 8013430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8013432:	f107 030c 	add.w	r3, r7, #12
 8013436:	4619      	mov	r1, r3
 8013438:	480d      	ldr	r0, [pc, #52]	; (8013470 <HAL_UART_MspInit+0x7c>)
 801343a:	f7ef fed1 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 801343e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013442:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013444:	2302      	movs	r3, #2
 8013446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013448:	2300      	movs	r3, #0
 801344a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801344c:	2300      	movs	r3, #0
 801344e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8013450:	2307      	movs	r3, #7
 8013452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8013454:	f107 030c 	add.w	r3, r7, #12
 8013458:	4619      	mov	r1, r3
 801345a:	4806      	ldr	r0, [pc, #24]	; (8013474 <HAL_UART_MspInit+0x80>)
 801345c:	f7ef fec0 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8013460:	bf00      	nop
 8013462:	3720      	adds	r7, #32
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	40011000 	.word	0x40011000
 801346c:	40023800 	.word	0x40023800
 8013470:	40020400 	.word	0x40020400
 8013474:	40020000 	.word	0x40020000

08013478 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8013478:	b580      	push	{r7, lr}
 801347a:	b086      	sub	sp, #24
 801347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 801347e:	4b3b      	ldr	r3, [pc, #236]	; (801356c <HAL_FMC_MspInit+0xf4>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d16d      	bne.n	8013562 <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 8013486:	4b39      	ldr	r3, [pc, #228]	; (801356c <HAL_FMC_MspInit+0xf4>)
 8013488:	2201      	movs	r2, #1
 801348a:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801348c:	4a38      	ldr	r2, [pc, #224]	; (8013570 <HAL_FMC_MspInit+0xf8>)
 801348e:	4b38      	ldr	r3, [pc, #224]	; (8013570 <HAL_FMC_MspInit+0xf8>)
 8013490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013492:	f043 0301 	orr.w	r3, r3, #1
 8013496:	6393      	str	r3, [r2, #56]	; 0x38
 8013498:	4b35      	ldr	r3, [pc, #212]	; (8013570 <HAL_FMC_MspInit+0xf8>)
 801349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801349c:	f003 0301 	and.w	r3, r3, #1
 80134a0:	603b      	str	r3, [r7, #0]
 80134a2:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80134a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80134a8:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134aa:	2302      	movs	r3, #2
 80134ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134ae:	2300      	movs	r3, #0
 80134b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134b2:	2303      	movs	r3, #3
 80134b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80134b6:	230c      	movs	r3, #12
 80134b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80134ba:	1d3b      	adds	r3, r7, #4
 80134bc:	4619      	mov	r1, r3
 80134be:	482d      	ldr	r0, [pc, #180]	; (8013574 <HAL_FMC_MspInit+0xfc>)
 80134c0:	f7ef fe8e 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80134c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80134c8:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134ca:	2302      	movs	r3, #2
 80134cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134ce:	2300      	movs	r3, #0
 80134d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134d2:	2303      	movs	r3, #3
 80134d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80134d6:	230c      	movs	r3, #12
 80134d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80134da:	1d3b      	adds	r3, r7, #4
 80134dc:	4619      	mov	r1, r3
 80134de:	4826      	ldr	r0, [pc, #152]	; (8013578 <HAL_FMC_MspInit+0x100>)
 80134e0:	f7ef fe7e 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80134e4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80134e8:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134ea:	2302      	movs	r3, #2
 80134ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134ee:	2300      	movs	r3, #0
 80134f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134f2:	2303      	movs	r3, #3
 80134f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80134f6:	230c      	movs	r3, #12
 80134f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134fa:	1d3b      	adds	r3, r7, #4
 80134fc:	4619      	mov	r1, r3
 80134fe:	481f      	ldr	r0, [pc, #124]	; (801357c <HAL_FMC_MspInit+0x104>)
 8013500:	f7ef fe6e 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8013504:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8013508:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801350a:	2302      	movs	r3, #2
 801350c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801350e:	2300      	movs	r3, #0
 8013510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013512:	2303      	movs	r3, #3
 8013514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013516:	230c      	movs	r3, #12
 8013518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801351a:	1d3b      	adds	r3, r7, #4
 801351c:	4619      	mov	r1, r3
 801351e:	4818      	ldr	r0, [pc, #96]	; (8013580 <HAL_FMC_MspInit+0x108>)
 8013520:	f7ef fe5e 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8013524:	2328      	movs	r3, #40	; 0x28
 8013526:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013528:	2302      	movs	r3, #2
 801352a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801352c:	2300      	movs	r3, #0
 801352e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013530:	2303      	movs	r3, #3
 8013532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013534:	230c      	movs	r3, #12
 8013536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013538:	1d3b      	adds	r3, r7, #4
 801353a:	4619      	mov	r1, r3
 801353c:	4811      	ldr	r0, [pc, #68]	; (8013584 <HAL_FMC_MspInit+0x10c>)
 801353e:	f7ef fe4f 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8013542:	2308      	movs	r3, #8
 8013544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013546:	2302      	movs	r3, #2
 8013548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801354a:	2300      	movs	r3, #0
 801354c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801354e:	2303      	movs	r3, #3
 8013550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013552:	230c      	movs	r3, #12
 8013554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8013556:	1d3b      	adds	r3, r7, #4
 8013558:	4619      	mov	r1, r3
 801355a:	480b      	ldr	r0, [pc, #44]	; (8013588 <HAL_FMC_MspInit+0x110>)
 801355c:	f7ef fe40 	bl	80031e0 <HAL_GPIO_Init>
 8013560:	e000      	b.n	8013564 <HAL_FMC_MspInit+0xec>
    return;
 8013562:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8013564:	3718      	adds	r7, #24
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	20000490 	.word	0x20000490
 8013570:	40023800 	.word	0x40023800
 8013574:	40021000 	.word	0x40021000
 8013578:	40021800 	.word	0x40021800
 801357c:	40020c00 	.word	0x40020c00
 8013580:	40021400 	.word	0x40021400
 8013584:	40021c00 	.word	0x40021c00
 8013588:	40020800 	.word	0x40020800

0801358c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 801358c:	b580      	push	{r7, lr}
 801358e:	b082      	sub	sp, #8
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8013594:	f7ff ff70 	bl	8013478 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8013598:	bf00      	nop
 801359a:	3708      	adds	r7, #8
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}

080135a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b08c      	sub	sp, #48	; 0x30
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80135a8:	2300      	movs	r3, #0
 80135aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80135ac:	2300      	movs	r3, #0
 80135ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80135b0:	2200      	movs	r2, #0
 80135b2:	6879      	ldr	r1, [r7, #4]
 80135b4:	2019      	movs	r0, #25
 80135b6:	f7ee ff62 	bl	800247e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80135ba:	2019      	movs	r0, #25
 80135bc:	f7ee ff7b 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80135c0:	4a1f      	ldr	r2, [pc, #124]	; (8013640 <HAL_InitTick+0xa0>)
 80135c2:	4b1f      	ldr	r3, [pc, #124]	; (8013640 <HAL_InitTick+0xa0>)
 80135c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135c6:	f043 0301 	orr.w	r3, r3, #1
 80135ca:	6453      	str	r3, [r2, #68]	; 0x44
 80135cc:	4b1c      	ldr	r3, [pc, #112]	; (8013640 <HAL_InitTick+0xa0>)
 80135ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135d0:	f003 0301 	and.w	r3, r3, #1
 80135d4:	60fb      	str	r3, [r7, #12]
 80135d6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80135d8:	f107 0210 	add.w	r2, r7, #16
 80135dc:	f107 0314 	add.w	r3, r7, #20
 80135e0:	4611      	mov	r1, r2
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7f2 fc70 	bl	8005ec8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80135e8:	f7f2 fc5a 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 80135ec:	4603      	mov	r3, r0
 80135ee:	005b      	lsls	r3, r3, #1
 80135f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80135f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f4:	4a13      	ldr	r2, [pc, #76]	; (8013644 <HAL_InitTick+0xa4>)
 80135f6:	fba2 2303 	umull	r2, r3, r2, r3
 80135fa:	0c9b      	lsrs	r3, r3, #18
 80135fc:	3b01      	subs	r3, #1
 80135fe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8013600:	4b11      	ldr	r3, [pc, #68]	; (8013648 <HAL_InitTick+0xa8>)
 8013602:	4a12      	ldr	r2, [pc, #72]	; (801364c <HAL_InitTick+0xac>)
 8013604:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8013606:	4b10      	ldr	r3, [pc, #64]	; (8013648 <HAL_InitTick+0xa8>)
 8013608:	f240 32e7 	movw	r2, #999	; 0x3e7
 801360c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801360e:	4a0e      	ldr	r2, [pc, #56]	; (8013648 <HAL_InitTick+0xa8>)
 8013610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013612:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8013614:	4b0c      	ldr	r3, [pc, #48]	; (8013648 <HAL_InitTick+0xa8>)
 8013616:	2200      	movs	r2, #0
 8013618:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801361a:	4b0b      	ldr	r3, [pc, #44]	; (8013648 <HAL_InitTick+0xa8>)
 801361c:	2200      	movs	r2, #0
 801361e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8013620:	4809      	ldr	r0, [pc, #36]	; (8013648 <HAL_InitTick+0xa8>)
 8013622:	f7f3 f952 	bl	80068ca <HAL_TIM_Base_Init>
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d104      	bne.n	8013636 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 801362c:	4806      	ldr	r0, [pc, #24]	; (8013648 <HAL_InitTick+0xa8>)
 801362e:	f7f3 f977 	bl	8006920 <HAL_TIM_Base_Start_IT>
 8013632:	4603      	mov	r3, r0
 8013634:	e000      	b.n	8013638 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8013636:	2301      	movs	r3, #1
}
 8013638:	4618      	mov	r0, r3
 801363a:	3730      	adds	r7, #48	; 0x30
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	40023800 	.word	0x40023800
 8013644:	431bde83 	.word	0x431bde83
 8013648:	20001460 	.word	0x20001460
 801364c:	40010000 	.word	0x40010000

08013650 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8013654:	f7f8 ff96 	bl	800c584 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8013658:	bf00      	nop
 801365a:	bd80      	pop	{r7, pc}

0801365c <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013660:	4802      	ldr	r0, [pc, #8]	; (801366c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8013662:	f7f3 f978 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8013666:	bf00      	nop
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	20001460 	.word	0x20001460

08013670 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8013674:	4802      	ldr	r0, [pc, #8]	; (8013680 <DMA2_Stream0_IRQHandler+0x10>)
 8013676:	f7ef f8e1 	bl	800283c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801367a:	bf00      	nop
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	20000a6c 	.word	0x20000a6c

08013684 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8013688:	4802      	ldr	r0, [pc, #8]	; (8013694 <OTG_HS_IRQHandler+0x10>)
 801368a:	f7f0 f9d3 	bl	8003a34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 801368e:	bf00      	nop
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	20001870 	.word	0x20001870

08013698 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013698:	b480      	push	{r7}
 801369a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801369c:	4a15      	ldr	r2, [pc, #84]	; (80136f4 <SystemInit+0x5c>)
 801369e:	4b15      	ldr	r3, [pc, #84]	; (80136f4 <SystemInit+0x5c>)
 80136a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80136a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80136ac:	4a12      	ldr	r2, [pc, #72]	; (80136f8 <SystemInit+0x60>)
 80136ae:	4b12      	ldr	r3, [pc, #72]	; (80136f8 <SystemInit+0x60>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f043 0301 	orr.w	r3, r3, #1
 80136b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80136b8:	4b0f      	ldr	r3, [pc, #60]	; (80136f8 <SystemInit+0x60>)
 80136ba:	2200      	movs	r2, #0
 80136bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80136be:	490e      	ldr	r1, [pc, #56]	; (80136f8 <SystemInit+0x60>)
 80136c0:	4b0d      	ldr	r3, [pc, #52]	; (80136f8 <SystemInit+0x60>)
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	4b0d      	ldr	r3, [pc, #52]	; (80136fc <SystemInit+0x64>)
 80136c6:	4013      	ands	r3, r2
 80136c8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80136ca:	4b0b      	ldr	r3, [pc, #44]	; (80136f8 <SystemInit+0x60>)
 80136cc:	4a0c      	ldr	r2, [pc, #48]	; (8013700 <SystemInit+0x68>)
 80136ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80136d0:	4a09      	ldr	r2, [pc, #36]	; (80136f8 <SystemInit+0x60>)
 80136d2:	4b09      	ldr	r3, [pc, #36]	; (80136f8 <SystemInit+0x60>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80136da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80136dc:	4b06      	ldr	r3, [pc, #24]	; (80136f8 <SystemInit+0x60>)
 80136de:	2200      	movs	r2, #0
 80136e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80136e2:	4b04      	ldr	r3, [pc, #16]	; (80136f4 <SystemInit+0x5c>)
 80136e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80136e8:	609a      	str	r2, [r3, #8]
#endif
}
 80136ea:	bf00      	nop
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr
 80136f4:	e000ed00 	.word	0xe000ed00
 80136f8:	40023800 	.word	0x40023800
 80136fc:	fef6ffff 	.word	0xfef6ffff
 8013700:	24003010 	.word	0x24003010

08013704 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS);
 8013708:	2200      	movs	r2, #0
 801370a:	4906      	ldr	r1, [pc, #24]	; (8013724 <MX_USB_HOST_Init+0x20>)
 801370c:	4806      	ldr	r0, [pc, #24]	; (8013728 <MX_USB_HOST_Init+0x24>)
 801370e:	f7fa fef5 	bl	800e4fc <USBH_Init>

  USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS);
 8013712:	4906      	ldr	r1, [pc, #24]	; (801372c <MX_USB_HOST_Init+0x28>)
 8013714:	4804      	ldr	r0, [pc, #16]	; (8013728 <MX_USB_HOST_Init+0x24>)
 8013716:	f7fa ff8d 	bl	800e634 <USBH_RegisterClass>

  USBH_Start(&hUsbHostHS);
 801371a:	4803      	ldr	r0, [pc, #12]	; (8013728 <MX_USB_HOST_Init+0x24>)
 801371c:	f7fb f81b 	bl	800e756 <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013720:	bf00      	nop
 8013722:	bd80      	pop	{r7, pc}
 8013724:	08013731 	.word	0x08013731
 8013728:	200014a0 	.word	0x200014a0
 801372c:	20000018 	.word	0x20000018

08013730 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013730:	b480      	push	{r7}
 8013732:	b083      	sub	sp, #12
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	460b      	mov	r3, r1
 801373a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801373c:	78fb      	ldrb	r3, [r7, #3]
 801373e:	3b01      	subs	r3, #1
 8013740:	2b04      	cmp	r3, #4
 8013742:	d819      	bhi.n	8013778 <USBH_UserProcess+0x48>
 8013744:	a201      	add	r2, pc, #4	; (adr r2, 801374c <USBH_UserProcess+0x1c>)
 8013746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801374a:	bf00      	nop
 801374c:	08013779 	.word	0x08013779
 8013750:	08013769 	.word	0x08013769
 8013754:	08013779 	.word	0x08013779
 8013758:	08013771 	.word	0x08013771
 801375c:	08013761 	.word	0x08013761
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013760:	4b09      	ldr	r3, [pc, #36]	; (8013788 <USBH_UserProcess+0x58>)
 8013762:	2203      	movs	r2, #3
 8013764:	701a      	strb	r2, [r3, #0]
  break;
 8013766:	e008      	b.n	801377a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013768:	4b07      	ldr	r3, [pc, #28]	; (8013788 <USBH_UserProcess+0x58>)
 801376a:	2202      	movs	r2, #2
 801376c:	701a      	strb	r2, [r3, #0]
  break;
 801376e:	e004      	b.n	801377a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013770:	4b05      	ldr	r3, [pc, #20]	; (8013788 <USBH_UserProcess+0x58>)
 8013772:	2201      	movs	r2, #1
 8013774:	701a      	strb	r2, [r3, #0]
  break;
 8013776:	e000      	b.n	801377a <USBH_UserProcess+0x4a>

  default:
  break;
 8013778:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801377a:	bf00      	nop
 801377c:	370c      	adds	r7, #12
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop
 8013788:	20000494 	.word	0x20000494

0801378c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b08a      	sub	sp, #40	; 0x28
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_HS)
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	4a33      	ldr	r2, [pc, #204]	; (8013868 <HAL_HCD_MspInit+0xdc>)
 801379a:	4293      	cmp	r3, r2
 801379c:	d160      	bne.n	8013860 <HAL_HCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 801379e:	f643 4323 	movw	r3, #15395	; 0x3c23
 80137a2:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80137a4:	2302      	movs	r3, #2
 80137a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137a8:	2300      	movs	r3, #0
 80137aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80137ac:	2303      	movs	r3, #3
 80137ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80137b0:	230a      	movs	r3, #10
 80137b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80137b4:	f107 0314 	add.w	r3, r7, #20
 80137b8:	4619      	mov	r1, r3
 80137ba:	482c      	ldr	r0, [pc, #176]	; (801386c <HAL_HCD_MspInit+0xe0>)
 80137bc:	f7ef fd10 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80137c0:	2310      	movs	r3, #16
 80137c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80137c4:	2302      	movs	r3, #2
 80137c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137c8:	2300      	movs	r3, #0
 80137ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80137cc:	2303      	movs	r3, #3
 80137ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80137d0:	230a      	movs	r3, #10
 80137d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80137d4:	f107 0314 	add.w	r3, r7, #20
 80137d8:	4619      	mov	r1, r3
 80137da:	4825      	ldr	r0, [pc, #148]	; (8013870 <HAL_HCD_MspInit+0xe4>)
 80137dc:	f7ef fd00 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80137e0:	2305      	movs	r3, #5
 80137e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80137e4:	2302      	movs	r3, #2
 80137e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137e8:	2300      	movs	r3, #0
 80137ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80137ec:	2303      	movs	r3, #3
 80137ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80137f0:	230a      	movs	r3, #10
 80137f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80137f4:	f107 0314 	add.w	r3, r7, #20
 80137f8:	4619      	mov	r1, r3
 80137fa:	481e      	ldr	r0, [pc, #120]	; (8013874 <HAL_HCD_MspInit+0xe8>)
 80137fc:	f7ef fcf0 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8013800:	2328      	movs	r3, #40	; 0x28
 8013802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013804:	2302      	movs	r3, #2
 8013806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013808:	2300      	movs	r3, #0
 801380a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801380c:	2303      	movs	r3, #3
 801380e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013810:	230a      	movs	r3, #10
 8013812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013814:	f107 0314 	add.w	r3, r7, #20
 8013818:	4619      	mov	r1, r3
 801381a:	4817      	ldr	r0, [pc, #92]	; (8013878 <HAL_HCD_MspInit+0xec>)
 801381c:	f7ef fce0 	bl	80031e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013820:	4a16      	ldr	r2, [pc, #88]	; (801387c <HAL_HCD_MspInit+0xf0>)
 8013822:	4b16      	ldr	r3, [pc, #88]	; (801387c <HAL_HCD_MspInit+0xf0>)
 8013824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801382a:	6313      	str	r3, [r2, #48]	; 0x30
 801382c:	4b13      	ldr	r3, [pc, #76]	; (801387c <HAL_HCD_MspInit+0xf0>)
 801382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013834:	613b      	str	r3, [r7, #16]
 8013836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8013838:	4a10      	ldr	r2, [pc, #64]	; (801387c <HAL_HCD_MspInit+0xf0>)
 801383a:	4b10      	ldr	r3, [pc, #64]	; (801387c <HAL_HCD_MspInit+0xf0>)
 801383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801383e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013842:	6313      	str	r3, [r2, #48]	; 0x30
 8013844:	4b0d      	ldr	r3, [pc, #52]	; (801387c <HAL_HCD_MspInit+0xf0>)
 8013846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013848:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801384c:	60fb      	str	r3, [r7, #12]
 801384e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8013850:	2200      	movs	r2, #0
 8013852:	2105      	movs	r1, #5
 8013854:	204d      	movs	r0, #77	; 0x4d
 8013856:	f7ee fe12 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801385a:	204d      	movs	r0, #77	; 0x4d
 801385c:	f7ee fe2b 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013860:	bf00      	nop
 8013862:	3728      	adds	r7, #40	; 0x28
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}
 8013868:	40040000 	.word	0x40040000
 801386c:	40020400 	.word	0x40020400
 8013870:	40021c00 	.word	0x40021c00
 8013874:	40020800 	.word	0x40020800
 8013878:	40020000 	.word	0x40020000
 801387c:	40023800 	.word	0x40023800

08013880 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801388e:	4618      	mov	r0, r3
 8013890:	f7fb fa2d 	bl	800ecee <USBH_LL_IncTimer>
}
 8013894:	bf00      	nop
 8013896:	3708      	adds	r7, #8
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}

0801389c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7fb fa49 	bl	800ed42 <USBH_LL_Connect>
}
 80138b0:	bf00      	nop
 80138b2:	3708      	adds	r7, #8
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7fb fa69 	bl	800ed9e <USBH_LL_Disconnect>
}
 80138cc:	bf00      	nop
 80138ce:	3708      	adds	r7, #8
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	460b      	mov	r3, r1
 80138de:	70fb      	strb	r3, [r7, #3]
 80138e0:	4613      	mov	r3, r2
 80138e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fb faa1 	bl	800ee32 <USBH_LL_NotifyURBChange>
#endif
}
 80138f0:	bf00      	nop
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013906:	2b00      	cmp	r3, #0
 8013908:	d132      	bne.n	8013970 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801390a:	4a1c      	ldr	r2, [pc, #112]	; (801397c <USBH_LL_Init+0x84>)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_HS;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	4a19      	ldr	r2, [pc, #100]	; (801397c <USBH_LL_Init+0x84>)
 8013916:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801391a:	4b18      	ldr	r3, [pc, #96]	; (801397c <USBH_LL_Init+0x84>)
 801391c:	4a18      	ldr	r2, [pc, #96]	; (8013980 <USBH_LL_Init+0x88>)
 801391e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8013920:	4b16      	ldr	r3, [pc, #88]	; (801397c <USBH_LL_Init+0x84>)
 8013922:	220c      	movs	r2, #12
 8013924:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8013926:	4b15      	ldr	r3, [pc, #84]	; (801397c <USBH_LL_Init+0x84>)
 8013928:	2200      	movs	r2, #0
 801392a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801392c:	4b13      	ldr	r3, [pc, #76]	; (801397c <USBH_LL_Init+0x84>)
 801392e:	2200      	movs	r2, #0
 8013930:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8013932:	4b12      	ldr	r3, [pc, #72]	; (801397c <USBH_LL_Init+0x84>)
 8013934:	2201      	movs	r2, #1
 8013936:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013938:	4b10      	ldr	r3, [pc, #64]	; (801397c <USBH_LL_Init+0x84>)
 801393a:	2200      	movs	r2, #0
 801393c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801393e:	4b0f      	ldr	r3, [pc, #60]	; (801397c <USBH_LL_Init+0x84>)
 8013940:	2200      	movs	r2, #0
 8013942:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8013944:	4b0d      	ldr	r3, [pc, #52]	; (801397c <USBH_LL_Init+0x84>)
 8013946:	2201      	movs	r2, #1
 8013948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 801394a:	480c      	ldr	r0, [pc, #48]	; (801397c <USBH_LL_Init+0x84>)
 801394c:	f7ef fe0b 	bl	8003566 <HAL_HCD_Init>
 8013950:	4603      	mov	r3, r0
 8013952:	2b00      	cmp	r3, #0
 8013954:	d004      	beq.n	8013960 <USBH_LL_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8013956:	f240 110d 	movw	r1, #269	; 0x10d
 801395a:	480a      	ldr	r0, [pc, #40]	; (8013984 <USBH_LL_Init+0x8c>)
 801395c:	f7ff faac 	bl	8012eb8 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8013960:	4806      	ldr	r0, [pc, #24]	; (801397c <USBH_LL_Init+0x84>)
 8013962:	f7f0 f9e1 	bl	8003d28 <HAL_HCD_GetCurrentFrame>
 8013966:	4603      	mov	r3, r0
 8013968:	4619      	mov	r1, r3
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f7fb f9b0 	bl	800ecd0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013970:	2300      	movs	r3, #0
}
 8013972:	4618      	mov	r0, r3
 8013974:	3708      	adds	r7, #8
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	20001870 	.word	0x20001870
 8013980:	40040000 	.word	0x40040000
 8013984:	080171d4 	.word	0x080171d4

08013988 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013990:	2300      	movs	r3, #0
 8013992:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013994:	2300      	movs	r3, #0
 8013996:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f0 f94a 	bl	8003c38 <HAL_HCD_Start>
 80139a4:	4603      	mov	r3, r0
 80139a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80139a8:	7bbb      	ldrb	r3, [r7, #14]
 80139aa:	2b03      	cmp	r3, #3
 80139ac:	d816      	bhi.n	80139dc <USBH_LL_Start+0x54>
 80139ae:	a201      	add	r2, pc, #4	; (adr r2, 80139b4 <USBH_LL_Start+0x2c>)
 80139b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139b4:	080139c5 	.word	0x080139c5
 80139b8:	080139cb 	.word	0x080139cb
 80139bc:	080139d1 	.word	0x080139d1
 80139c0:	080139d7 	.word	0x080139d7
    case HAL_OK :
      usb_status = USBH_OK;
 80139c4:	2300      	movs	r3, #0
 80139c6:	73fb      	strb	r3, [r7, #15]
    break;
 80139c8:	e00b      	b.n	80139e2 <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80139ca:	2302      	movs	r3, #2
 80139cc:	73fb      	strb	r3, [r7, #15]
    break;
 80139ce:	e008      	b.n	80139e2 <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80139d0:	2301      	movs	r3, #1
 80139d2:	73fb      	strb	r3, [r7, #15]
    break;
 80139d4:	e005      	b.n	80139e2 <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80139d6:	2302      	movs	r3, #2
 80139d8:	73fb      	strb	r3, [r7, #15]
    break;
 80139da:	e002      	b.n	80139e2 <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 80139dc:	2302      	movs	r3, #2
 80139de:	73fb      	strb	r3, [r7, #15]
    break;
 80139e0:	bf00      	nop
  }
  return usb_status;
 80139e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3710      	adds	r7, #16
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}

080139ec <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80139f8:	2300      	movs	r3, #0
 80139fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7f0 f93b 	bl	8003c7e <HAL_HCD_Stop>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013a0c:	7bbb      	ldrb	r3, [r7, #14]
 8013a0e:	2b03      	cmp	r3, #3
 8013a10:	d816      	bhi.n	8013a40 <USBH_LL_Stop+0x54>
 8013a12:	a201      	add	r2, pc, #4	; (adr r2, 8013a18 <USBH_LL_Stop+0x2c>)
 8013a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a18:	08013a29 	.word	0x08013a29
 8013a1c:	08013a2f 	.word	0x08013a2f
 8013a20:	08013a35 	.word	0x08013a35
 8013a24:	08013a3b 	.word	0x08013a3b
    case HAL_OK :
      usb_status = USBH_OK;
 8013a28:	2300      	movs	r3, #0
 8013a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8013a2c:	e00b      	b.n	8013a46 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013a2e:	2302      	movs	r3, #2
 8013a30:	73fb      	strb	r3, [r7, #15]
    break;
 8013a32:	e008      	b.n	8013a46 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013a34:	2301      	movs	r3, #1
 8013a36:	73fb      	strb	r3, [r7, #15]
    break;
 8013a38:	e005      	b.n	8013a46 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8013a3e:	e002      	b.n	8013a46 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 8013a40:	2302      	movs	r3, #2
 8013a42:	73fb      	strb	r3, [r7, #15]
    break;
 8013a44:	bf00      	nop
  }
  return usb_status;
 8013a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3710      	adds	r7, #16
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7f0 f96e 	bl	8003d44 <HAL_HCD_GetCurrentSpeed>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b01      	cmp	r3, #1
 8013a6c:	d007      	beq.n	8013a7e <USBH_LL_GetSpeed+0x2e>
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d302      	bcc.n	8013a78 <USBH_LL_GetSpeed+0x28>
 8013a72:	2b02      	cmp	r3, #2
 8013a74:	d006      	beq.n	8013a84 <USBH_LL_GetSpeed+0x34>
 8013a76:	e008      	b.n	8013a8a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8013a7c:	e008      	b.n	8013a90 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013a7e:	2301      	movs	r3, #1
 8013a80:	73fb      	strb	r3, [r7, #15]
    break;
 8013a82:	e005      	b.n	8013a90 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013a84:	2302      	movs	r3, #2
 8013a86:	73fb      	strb	r3, [r7, #15]
    break;
 8013a88:	e002      	b.n	8013a90 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8013a8e:	bf00      	nop
  }
  return  speed;
 8013a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
	...

08013a9c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7f0 f900 	bl	8003cb8 <HAL_HCD_ResetPort>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 8013abc:	7bbb      	ldrb	r3, [r7, #14]
 8013abe:	2b03      	cmp	r3, #3
 8013ac0:	d816      	bhi.n	8013af0 <USBH_LL_ResetPort+0x54>
 8013ac2:	a201      	add	r2, pc, #4	; (adr r2, 8013ac8 <USBH_LL_ResetPort+0x2c>)
 8013ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac8:	08013ad9 	.word	0x08013ad9
 8013acc:	08013adf 	.word	0x08013adf
 8013ad0:	08013ae5 	.word	0x08013ae5
 8013ad4:	08013aeb 	.word	0x08013aeb
    case HAL_OK :
      usb_status = USBH_OK;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	73fb      	strb	r3, [r7, #15]
    break;
 8013adc:	e00b      	b.n	8013af6 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013ade:	2302      	movs	r3, #2
 8013ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8013ae2:	e008      	b.n	8013af6 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8013ae8:	e005      	b.n	8013af6 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013aea:	2302      	movs	r3, #2
 8013aec:	73fb      	strb	r3, [r7, #15]
    break;
 8013aee:	e002      	b.n	8013af6 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 8013af0:	2302      	movs	r3, #2
 8013af2:	73fb      	strb	r3, [r7, #15]
    break;
 8013af4:	bf00      	nop
  }
  return usb_status;
 8013af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3710      	adds	r7, #16
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	460b      	mov	r3, r1
 8013b0a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013b12:	78fa      	ldrb	r2, [r7, #3]
 8013b14:	4611      	mov	r1, r2
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7f0 f8f1 	bl	8003cfe <HAL_HCD_HC_GetXferCount>
 8013b1c:	4603      	mov	r3, r0
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
	...

08013b28 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013b28:	b590      	push	{r4, r7, lr}
 8013b2a:	b089      	sub	sp, #36	; 0x24
 8013b2c:	af04      	add	r7, sp, #16
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	4608      	mov	r0, r1
 8013b32:	4611      	mov	r1, r2
 8013b34:	461a      	mov	r2, r3
 8013b36:	4603      	mov	r3, r0
 8013b38:	70fb      	strb	r3, [r7, #3]
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	70bb      	strb	r3, [r7, #2]
 8013b3e:	4613      	mov	r3, r2
 8013b40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b42:	2300      	movs	r3, #0
 8013b44:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013b46:	2300      	movs	r3, #0
 8013b48:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 8013b50:	787c      	ldrb	r4, [r7, #1]
 8013b52:	78ba      	ldrb	r2, [r7, #2]
 8013b54:	78f9      	ldrb	r1, [r7, #3]
 8013b56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013b58:	9302      	str	r3, [sp, #8]
 8013b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013b5e:	9301      	str	r3, [sp, #4]
 8013b60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013b64:	9300      	str	r3, [sp, #0]
 8013b66:	4623      	mov	r3, r4
 8013b68:	f7ef fd49 	bl	80035fe <HAL_HCD_HC_Init>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 8013b70:	7bbb      	ldrb	r3, [r7, #14]
 8013b72:	2b03      	cmp	r3, #3
 8013b74:	d816      	bhi.n	8013ba4 <USBH_LL_OpenPipe+0x7c>
 8013b76:	a201      	add	r2, pc, #4	; (adr r2, 8013b7c <USBH_LL_OpenPipe+0x54>)
 8013b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b7c:	08013b8d 	.word	0x08013b8d
 8013b80:	08013b93 	.word	0x08013b93
 8013b84:	08013b99 	.word	0x08013b99
 8013b88:	08013b9f 	.word	0x08013b9f
    case HAL_OK :
      usb_status = USBH_OK;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8013b90:	e00b      	b.n	8013baa <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013b92:	2302      	movs	r3, #2
 8013b94:	73fb      	strb	r3, [r7, #15]
    break;
 8013b96:	e008      	b.n	8013baa <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013b98:	2301      	movs	r3, #1
 8013b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8013b9c:	e005      	b.n	8013baa <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013b9e:	2302      	movs	r3, #2
 8013ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8013ba2:	e002      	b.n	8013baa <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 8013ba4:	2302      	movs	r3, #2
 8013ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8013ba8:	bf00      	nop
  }
  return usb_status;
 8013baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3714      	adds	r7, #20
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd90      	pop	{r4, r7, pc}

08013bb4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b084      	sub	sp, #16
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	460b      	mov	r3, r1
 8013bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013bce:	78fa      	ldrb	r2, [r7, #3]
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7ef fda4 	bl	8003720 <HAL_HCD_HC_Halt>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013bdc:	7bbb      	ldrb	r3, [r7, #14]
 8013bde:	2b03      	cmp	r3, #3
 8013be0:	d816      	bhi.n	8013c10 <USBH_LL_ClosePipe+0x5c>
 8013be2:	a201      	add	r2, pc, #4	; (adr r2, 8013be8 <USBH_LL_ClosePipe+0x34>)
 8013be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013be8:	08013bf9 	.word	0x08013bf9
 8013bec:	08013bff 	.word	0x08013bff
 8013bf0:	08013c05 	.word	0x08013c05
 8013bf4:	08013c0b 	.word	0x08013c0b
    case HAL_OK :
      usb_status = USBH_OK;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8013bfc:	e00b      	b.n	8013c16 <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013bfe:	2302      	movs	r3, #2
 8013c00:	73fb      	strb	r3, [r7, #15]
    break;
 8013c02:	e008      	b.n	8013c16 <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013c04:	2301      	movs	r3, #1
 8013c06:	73fb      	strb	r3, [r7, #15]
    break;
 8013c08:	e005      	b.n	8013c16 <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013c0a:	2302      	movs	r3, #2
 8013c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8013c0e:	e002      	b.n	8013c16 <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 8013c10:	2302      	movs	r3, #2
 8013c12:	73fb      	strb	r3, [r7, #15]
    break;
 8013c14:	bf00      	nop
  }
  return usb_status;
 8013c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3710      	adds	r7, #16
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013c20:	b590      	push	{r4, r7, lr}
 8013c22:	b089      	sub	sp, #36	; 0x24
 8013c24:	af04      	add	r7, sp, #16
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	4608      	mov	r0, r1
 8013c2a:	4611      	mov	r1, r2
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	4603      	mov	r3, r0
 8013c30:	70fb      	strb	r3, [r7, #3]
 8013c32:	460b      	mov	r3, r1
 8013c34:	70bb      	strb	r3, [r7, #2]
 8013c36:	4613      	mov	r3, r2
 8013c38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 8013c48:	787c      	ldrb	r4, [r7, #1]
 8013c4a:	78ba      	ldrb	r2, [r7, #2]
 8013c4c:	78f9      	ldrb	r1, [r7, #3]
 8013c4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013c52:	9303      	str	r3, [sp, #12]
 8013c54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013c56:	9302      	str	r3, [sp, #8]
 8013c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5a:	9301      	str	r3, [sp, #4]
 8013c5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013c60:	9300      	str	r3, [sp, #0]
 8013c62:	4623      	mov	r3, r4
 8013c64:	f7ef fd80 	bl	8003768 <HAL_HCD_HC_SubmitRequest>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8013c6c:	7bbb      	ldrb	r3, [r7, #14]
 8013c6e:	2b03      	cmp	r3, #3
 8013c70:	d816      	bhi.n	8013ca0 <USBH_LL_SubmitURB+0x80>
 8013c72:	a201      	add	r2, pc, #4	; (adr r2, 8013c78 <USBH_LL_SubmitURB+0x58>)
 8013c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c78:	08013c89 	.word	0x08013c89
 8013c7c:	08013c8f 	.word	0x08013c8f
 8013c80:	08013c95 	.word	0x08013c95
 8013c84:	08013c9b 	.word	0x08013c9b
    case HAL_OK :
      usb_status = USBH_OK;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8013c8c:	e00b      	b.n	8013ca6 <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013c8e:	2302      	movs	r3, #2
 8013c90:	73fb      	strb	r3, [r7, #15]
    break;
 8013c92:	e008      	b.n	8013ca6 <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013c94:	2301      	movs	r3, #1
 8013c96:	73fb      	strb	r3, [r7, #15]
    break;
 8013c98:	e005      	b.n	8013ca6 <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013c9a:	2302      	movs	r3, #2
 8013c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8013c9e:	e002      	b.n	8013ca6 <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 8013ca0:	2302      	movs	r3, #2
 8013ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8013ca4:	bf00      	nop
  }
  return usb_status;
 8013ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3714      	adds	r7, #20
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd90      	pop	{r4, r7, pc}

08013cb0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	460b      	mov	r3, r1
 8013cba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013cc2:	78fa      	ldrb	r2, [r7, #3]
 8013cc4:	4611      	mov	r1, r2
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f0 f804 	bl	8003cd4 <HAL_HCD_HC_GetURBState>
 8013ccc:	4603      	mov	r3, r0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3708      	adds	r7, #8
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}

08013cd6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013cd6:	b580      	push	{r7, lr}
 8013cd8:	b082      	sub	sp, #8
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	6078      	str	r0, [r7, #4]
 8013cde:	460b      	mov	r3, r1
 8013ce0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 8013ce2:	20c8      	movs	r0, #200	; 0xc8
 8013ce4:	f7ed ffb0 	bl	8001c48 <HAL_Delay>
  return USBH_OK;
 8013ce8:	2300      	movs	r3, #0
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3708      	adds	r7, #8
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}

08013cf2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013cf2:	b480      	push	{r7}
 8013cf4:	b085      	sub	sp, #20
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6078      	str	r0, [r7, #4]
 8013cfa:	460b      	mov	r3, r1
 8013cfc:	70fb      	strb	r3, [r7, #3]
 8013cfe:	4613      	mov	r3, r2
 8013d00:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013d08:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013d0a:	78fa      	ldrb	r2, [r7, #3]
 8013d0c:	68f9      	ldr	r1, [r7, #12]
 8013d0e:	4613      	mov	r3, r2
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	4413      	add	r3, r2
 8013d14:	00db      	lsls	r3, r3, #3
 8013d16:	440b      	add	r3, r1
 8013d18:	333b      	adds	r3, #59	; 0x3b
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d00a      	beq.n	8013d36 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013d20:	78fa      	ldrb	r2, [r7, #3]
 8013d22:	68f9      	ldr	r1, [r7, #12]
 8013d24:	4613      	mov	r3, r2
 8013d26:	009b      	lsls	r3, r3, #2
 8013d28:	4413      	add	r3, r2
 8013d2a:	00db      	lsls	r3, r3, #3
 8013d2c:	440b      	add	r3, r1
 8013d2e:	3350      	adds	r3, #80	; 0x50
 8013d30:	78ba      	ldrb	r2, [r7, #2]
 8013d32:	701a      	strb	r2, [r3, #0]
 8013d34:	e009      	b.n	8013d4a <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013d36:	78fa      	ldrb	r2, [r7, #3]
 8013d38:	68f9      	ldr	r1, [r7, #12]
 8013d3a:	4613      	mov	r3, r2
 8013d3c:	009b      	lsls	r3, r3, #2
 8013d3e:	4413      	add	r3, r2
 8013d40:	00db      	lsls	r3, r3, #3
 8013d42:	440b      	add	r3, r1
 8013d44:	3351      	adds	r3, #81	; 0x51
 8013d46:	78ba      	ldrb	r2, [r7, #2]
 8013d48:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013d4a:	2300      	movs	r3, #0
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3714      	adds	r7, #20
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	460b      	mov	r3, r1
 8013d62:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8013d64:	2300      	movs	r3, #0
 8013d66:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013d6e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8013d70:	78fa      	ldrb	r2, [r7, #3]
 8013d72:	68b9      	ldr	r1, [r7, #8]
 8013d74:	4613      	mov	r3, r2
 8013d76:	009b      	lsls	r3, r3, #2
 8013d78:	4413      	add	r3, r2
 8013d7a:	00db      	lsls	r3, r3, #3
 8013d7c:	440b      	add	r3, r1
 8013d7e:	333b      	adds	r3, #59	; 0x3b
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d00a      	beq.n	8013d9c <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8013d86:	78fa      	ldrb	r2, [r7, #3]
 8013d88:	68b9      	ldr	r1, [r7, #8]
 8013d8a:	4613      	mov	r3, r2
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	4413      	add	r3, r2
 8013d90:	00db      	lsls	r3, r3, #3
 8013d92:	440b      	add	r3, r1
 8013d94:	3350      	adds	r3, #80	; 0x50
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	73fb      	strb	r3, [r7, #15]
 8013d9a:	e009      	b.n	8013db0 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8013d9c:	78fa      	ldrb	r2, [r7, #3]
 8013d9e:	68b9      	ldr	r1, [r7, #8]
 8013da0:	4613      	mov	r3, r2
 8013da2:	009b      	lsls	r3, r3, #2
 8013da4:	4413      	add	r3, r2
 8013da6:	00db      	lsls	r3, r3, #3
 8013da8:	440b      	add	r3, r1
 8013daa:	3351      	adds	r3, #81	; 0x51
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8013db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3714      	adds	r7, #20
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr

08013dbe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b082      	sub	sp, #8
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f7ed ff3e 	bl	8001c48 <HAL_Delay>
}
 8013dcc:	bf00      	nop
 8013dce:	3708      	adds	r7, #8
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}

08013dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8013dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013dda:	e003      	b.n	8013de4 <LoopCopyDataInit>

08013ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013ddc:	4b0c      	ldr	r3, [pc, #48]	; (8013e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013de2:	3104      	adds	r1, #4

08013de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013de4:	480b      	ldr	r0, [pc, #44]	; (8013e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013de6:	4b0c      	ldr	r3, [pc, #48]	; (8013e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013dec:	d3f6      	bcc.n	8013ddc <CopyDataInit>
  ldr  r2, =_sbss
 8013dee:	4a0b      	ldr	r2, [pc, #44]	; (8013e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013df0:	e002      	b.n	8013df8 <LoopFillZerobss>

08013df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8013df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013df4:	f842 3b04 	str.w	r3, [r2], #4

08013df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013df8:	4b09      	ldr	r3, [pc, #36]	; (8013e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013dfc:	d3f9      	bcc.n	8013df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8013dfe:	f7ff fc4b 	bl	8013698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013e02:	f000 f811 	bl	8013e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013e06:	f7fd fd5f 	bl	80118c8 <main>
  bx  lr    
 8013e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8013e0c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8013e10:	08019f20 	.word	0x08019f20
  ldr  r0, =_sdata
 8013e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013e18:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8013e1c:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8013e20:	20001b0c 	.word	0x20001b0c

08013e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013e24:	e7fe      	b.n	8013e24 <ADC_IRQHandler>
	...

08013e28 <__libc_init_array>:
 8013e28:	b570      	push	{r4, r5, r6, lr}
 8013e2a:	4e0d      	ldr	r6, [pc, #52]	; (8013e60 <__libc_init_array+0x38>)
 8013e2c:	4c0d      	ldr	r4, [pc, #52]	; (8013e64 <__libc_init_array+0x3c>)
 8013e2e:	1ba4      	subs	r4, r4, r6
 8013e30:	10a4      	asrs	r4, r4, #2
 8013e32:	2500      	movs	r5, #0
 8013e34:	42a5      	cmp	r5, r4
 8013e36:	d109      	bne.n	8013e4c <__libc_init_array+0x24>
 8013e38:	4e0b      	ldr	r6, [pc, #44]	; (8013e68 <__libc_init_array+0x40>)
 8013e3a:	4c0c      	ldr	r4, [pc, #48]	; (8013e6c <__libc_init_array+0x44>)
 8013e3c:	f002 fec4 	bl	8016bc8 <_init>
 8013e40:	1ba4      	subs	r4, r4, r6
 8013e42:	10a4      	asrs	r4, r4, #2
 8013e44:	2500      	movs	r5, #0
 8013e46:	42a5      	cmp	r5, r4
 8013e48:	d105      	bne.n	8013e56 <__libc_init_array+0x2e>
 8013e4a:	bd70      	pop	{r4, r5, r6, pc}
 8013e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e50:	4798      	blx	r3
 8013e52:	3501      	adds	r5, #1
 8013e54:	e7ee      	b.n	8013e34 <__libc_init_array+0xc>
 8013e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e5a:	4798      	blx	r3
 8013e5c:	3501      	adds	r5, #1
 8013e5e:	e7f2      	b.n	8013e46 <__libc_init_array+0x1e>
 8013e60:	08019f18 	.word	0x08019f18
 8013e64:	08019f18 	.word	0x08019f18
 8013e68:	08019f18 	.word	0x08019f18
 8013e6c:	08019f1c 	.word	0x08019f1c

08013e70 <__locale_ctype_ptr_l>:
 8013e70:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013e74:	4770      	bx	lr
	...

08013e78 <__locale_ctype_ptr>:
 8013e78:	4b04      	ldr	r3, [pc, #16]	; (8013e8c <__locale_ctype_ptr+0x14>)
 8013e7a:	4a05      	ldr	r2, [pc, #20]	; (8013e90 <__locale_ctype_ptr+0x18>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	6a1b      	ldr	r3, [r3, #32]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	bf08      	it	eq
 8013e84:	4613      	moveq	r3, r2
 8013e86:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8013e8a:	4770      	bx	lr
 8013e8c:	200001ac 	.word	0x200001ac
 8013e90:	20000040 	.word	0x20000040

08013e94 <malloc>:
 8013e94:	4b02      	ldr	r3, [pc, #8]	; (8013ea0 <malloc+0xc>)
 8013e96:	4601      	mov	r1, r0
 8013e98:	6818      	ldr	r0, [r3, #0]
 8013e9a:	f000 b87f 	b.w	8013f9c <_malloc_r>
 8013e9e:	bf00      	nop
 8013ea0:	200001ac 	.word	0x200001ac

08013ea4 <free>:
 8013ea4:	4b02      	ldr	r3, [pc, #8]	; (8013eb0 <free+0xc>)
 8013ea6:	4601      	mov	r1, r0
 8013ea8:	6818      	ldr	r0, [r3, #0]
 8013eaa:	f000 b829 	b.w	8013f00 <_free_r>
 8013eae:	bf00      	nop
 8013eb0:	200001ac 	.word	0x200001ac

08013eb4 <__ascii_mbtowc>:
 8013eb4:	b082      	sub	sp, #8
 8013eb6:	b901      	cbnz	r1, 8013eba <__ascii_mbtowc+0x6>
 8013eb8:	a901      	add	r1, sp, #4
 8013eba:	b142      	cbz	r2, 8013ece <__ascii_mbtowc+0x1a>
 8013ebc:	b14b      	cbz	r3, 8013ed2 <__ascii_mbtowc+0x1e>
 8013ebe:	7813      	ldrb	r3, [r2, #0]
 8013ec0:	600b      	str	r3, [r1, #0]
 8013ec2:	7812      	ldrb	r2, [r2, #0]
 8013ec4:	1c10      	adds	r0, r2, #0
 8013ec6:	bf18      	it	ne
 8013ec8:	2001      	movne	r0, #1
 8013eca:	b002      	add	sp, #8
 8013ecc:	4770      	bx	lr
 8013ece:	4610      	mov	r0, r2
 8013ed0:	e7fb      	b.n	8013eca <__ascii_mbtowc+0x16>
 8013ed2:	f06f 0001 	mvn.w	r0, #1
 8013ed6:	e7f8      	b.n	8013eca <__ascii_mbtowc+0x16>

08013ed8 <memcpy>:
 8013ed8:	b510      	push	{r4, lr}
 8013eda:	1e43      	subs	r3, r0, #1
 8013edc:	440a      	add	r2, r1
 8013ede:	4291      	cmp	r1, r2
 8013ee0:	d100      	bne.n	8013ee4 <memcpy+0xc>
 8013ee2:	bd10      	pop	{r4, pc}
 8013ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013eec:	e7f7      	b.n	8013ede <memcpy+0x6>

08013eee <memset>:
 8013eee:	4402      	add	r2, r0
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d100      	bne.n	8013ef8 <memset+0xa>
 8013ef6:	4770      	bx	lr
 8013ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8013efc:	e7f9      	b.n	8013ef2 <memset+0x4>
	...

08013f00 <_free_r>:
 8013f00:	b538      	push	{r3, r4, r5, lr}
 8013f02:	4605      	mov	r5, r0
 8013f04:	2900      	cmp	r1, #0
 8013f06:	d045      	beq.n	8013f94 <_free_r+0x94>
 8013f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f0c:	1f0c      	subs	r4, r1, #4
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	bfb8      	it	lt
 8013f12:	18e4      	addlt	r4, r4, r3
 8013f14:	f001 ffc4 	bl	8015ea0 <__malloc_lock>
 8013f18:	4a1f      	ldr	r2, [pc, #124]	; (8013f98 <_free_r+0x98>)
 8013f1a:	6813      	ldr	r3, [r2, #0]
 8013f1c:	4610      	mov	r0, r2
 8013f1e:	b933      	cbnz	r3, 8013f2e <_free_r+0x2e>
 8013f20:	6063      	str	r3, [r4, #4]
 8013f22:	6014      	str	r4, [r2, #0]
 8013f24:	4628      	mov	r0, r5
 8013f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f2a:	f001 bfba 	b.w	8015ea2 <__malloc_unlock>
 8013f2e:	42a3      	cmp	r3, r4
 8013f30:	d90c      	bls.n	8013f4c <_free_r+0x4c>
 8013f32:	6821      	ldr	r1, [r4, #0]
 8013f34:	1862      	adds	r2, r4, r1
 8013f36:	4293      	cmp	r3, r2
 8013f38:	bf04      	itt	eq
 8013f3a:	681a      	ldreq	r2, [r3, #0]
 8013f3c:	685b      	ldreq	r3, [r3, #4]
 8013f3e:	6063      	str	r3, [r4, #4]
 8013f40:	bf04      	itt	eq
 8013f42:	1852      	addeq	r2, r2, r1
 8013f44:	6022      	streq	r2, [r4, #0]
 8013f46:	6004      	str	r4, [r0, #0]
 8013f48:	e7ec      	b.n	8013f24 <_free_r+0x24>
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	b10a      	cbz	r2, 8013f54 <_free_r+0x54>
 8013f50:	42a2      	cmp	r2, r4
 8013f52:	d9fa      	bls.n	8013f4a <_free_r+0x4a>
 8013f54:	6819      	ldr	r1, [r3, #0]
 8013f56:	1858      	adds	r0, r3, r1
 8013f58:	42a0      	cmp	r0, r4
 8013f5a:	d10b      	bne.n	8013f74 <_free_r+0x74>
 8013f5c:	6820      	ldr	r0, [r4, #0]
 8013f5e:	4401      	add	r1, r0
 8013f60:	1858      	adds	r0, r3, r1
 8013f62:	4282      	cmp	r2, r0
 8013f64:	6019      	str	r1, [r3, #0]
 8013f66:	d1dd      	bne.n	8013f24 <_free_r+0x24>
 8013f68:	6810      	ldr	r0, [r2, #0]
 8013f6a:	6852      	ldr	r2, [r2, #4]
 8013f6c:	605a      	str	r2, [r3, #4]
 8013f6e:	4401      	add	r1, r0
 8013f70:	6019      	str	r1, [r3, #0]
 8013f72:	e7d7      	b.n	8013f24 <_free_r+0x24>
 8013f74:	d902      	bls.n	8013f7c <_free_r+0x7c>
 8013f76:	230c      	movs	r3, #12
 8013f78:	602b      	str	r3, [r5, #0]
 8013f7a:	e7d3      	b.n	8013f24 <_free_r+0x24>
 8013f7c:	6820      	ldr	r0, [r4, #0]
 8013f7e:	1821      	adds	r1, r4, r0
 8013f80:	428a      	cmp	r2, r1
 8013f82:	bf04      	itt	eq
 8013f84:	6811      	ldreq	r1, [r2, #0]
 8013f86:	6852      	ldreq	r2, [r2, #4]
 8013f88:	6062      	str	r2, [r4, #4]
 8013f8a:	bf04      	itt	eq
 8013f8c:	1809      	addeq	r1, r1, r0
 8013f8e:	6021      	streq	r1, [r4, #0]
 8013f90:	605c      	str	r4, [r3, #4]
 8013f92:	e7c7      	b.n	8013f24 <_free_r+0x24>
 8013f94:	bd38      	pop	{r3, r4, r5, pc}
 8013f96:	bf00      	nop
 8013f98:	20000498 	.word	0x20000498

08013f9c <_malloc_r>:
 8013f9c:	b570      	push	{r4, r5, r6, lr}
 8013f9e:	1ccd      	adds	r5, r1, #3
 8013fa0:	f025 0503 	bic.w	r5, r5, #3
 8013fa4:	3508      	adds	r5, #8
 8013fa6:	2d0c      	cmp	r5, #12
 8013fa8:	bf38      	it	cc
 8013faa:	250c      	movcc	r5, #12
 8013fac:	2d00      	cmp	r5, #0
 8013fae:	4606      	mov	r6, r0
 8013fb0:	db01      	blt.n	8013fb6 <_malloc_r+0x1a>
 8013fb2:	42a9      	cmp	r1, r5
 8013fb4:	d903      	bls.n	8013fbe <_malloc_r+0x22>
 8013fb6:	230c      	movs	r3, #12
 8013fb8:	6033      	str	r3, [r6, #0]
 8013fba:	2000      	movs	r0, #0
 8013fbc:	bd70      	pop	{r4, r5, r6, pc}
 8013fbe:	f001 ff6f 	bl	8015ea0 <__malloc_lock>
 8013fc2:	4a23      	ldr	r2, [pc, #140]	; (8014050 <_malloc_r+0xb4>)
 8013fc4:	6814      	ldr	r4, [r2, #0]
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	b991      	cbnz	r1, 8013ff0 <_malloc_r+0x54>
 8013fca:	4c22      	ldr	r4, [pc, #136]	; (8014054 <_malloc_r+0xb8>)
 8013fcc:	6823      	ldr	r3, [r4, #0]
 8013fce:	b91b      	cbnz	r3, 8013fd8 <_malloc_r+0x3c>
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	f000 fd31 	bl	8014a38 <_sbrk_r>
 8013fd6:	6020      	str	r0, [r4, #0]
 8013fd8:	4629      	mov	r1, r5
 8013fda:	4630      	mov	r0, r6
 8013fdc:	f000 fd2c 	bl	8014a38 <_sbrk_r>
 8013fe0:	1c43      	adds	r3, r0, #1
 8013fe2:	d126      	bne.n	8014032 <_malloc_r+0x96>
 8013fe4:	230c      	movs	r3, #12
 8013fe6:	6033      	str	r3, [r6, #0]
 8013fe8:	4630      	mov	r0, r6
 8013fea:	f001 ff5a 	bl	8015ea2 <__malloc_unlock>
 8013fee:	e7e4      	b.n	8013fba <_malloc_r+0x1e>
 8013ff0:	680b      	ldr	r3, [r1, #0]
 8013ff2:	1b5b      	subs	r3, r3, r5
 8013ff4:	d41a      	bmi.n	801402c <_malloc_r+0x90>
 8013ff6:	2b0b      	cmp	r3, #11
 8013ff8:	d90f      	bls.n	801401a <_malloc_r+0x7e>
 8013ffa:	600b      	str	r3, [r1, #0]
 8013ffc:	50cd      	str	r5, [r1, r3]
 8013ffe:	18cc      	adds	r4, r1, r3
 8014000:	4630      	mov	r0, r6
 8014002:	f001 ff4e 	bl	8015ea2 <__malloc_unlock>
 8014006:	f104 000b 	add.w	r0, r4, #11
 801400a:	1d23      	adds	r3, r4, #4
 801400c:	f020 0007 	bic.w	r0, r0, #7
 8014010:	1ac3      	subs	r3, r0, r3
 8014012:	d01b      	beq.n	801404c <_malloc_r+0xb0>
 8014014:	425a      	negs	r2, r3
 8014016:	50e2      	str	r2, [r4, r3]
 8014018:	bd70      	pop	{r4, r5, r6, pc}
 801401a:	428c      	cmp	r4, r1
 801401c:	bf0d      	iteet	eq
 801401e:	6863      	ldreq	r3, [r4, #4]
 8014020:	684b      	ldrne	r3, [r1, #4]
 8014022:	6063      	strne	r3, [r4, #4]
 8014024:	6013      	streq	r3, [r2, #0]
 8014026:	bf18      	it	ne
 8014028:	460c      	movne	r4, r1
 801402a:	e7e9      	b.n	8014000 <_malloc_r+0x64>
 801402c:	460c      	mov	r4, r1
 801402e:	6849      	ldr	r1, [r1, #4]
 8014030:	e7ca      	b.n	8013fc8 <_malloc_r+0x2c>
 8014032:	1cc4      	adds	r4, r0, #3
 8014034:	f024 0403 	bic.w	r4, r4, #3
 8014038:	42a0      	cmp	r0, r4
 801403a:	d005      	beq.n	8014048 <_malloc_r+0xac>
 801403c:	1a21      	subs	r1, r4, r0
 801403e:	4630      	mov	r0, r6
 8014040:	f000 fcfa 	bl	8014a38 <_sbrk_r>
 8014044:	3001      	adds	r0, #1
 8014046:	d0cd      	beq.n	8013fe4 <_malloc_r+0x48>
 8014048:	6025      	str	r5, [r4, #0]
 801404a:	e7d9      	b.n	8014000 <_malloc_r+0x64>
 801404c:	bd70      	pop	{r4, r5, r6, pc}
 801404e:	bf00      	nop
 8014050:	20000498 	.word	0x20000498
 8014054:	2000049c 	.word	0x2000049c

08014058 <__cvt>:
 8014058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801405c:	ec55 4b10 	vmov	r4, r5, d0
 8014060:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014062:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014066:	2d00      	cmp	r5, #0
 8014068:	460e      	mov	r6, r1
 801406a:	4691      	mov	r9, r2
 801406c:	4619      	mov	r1, r3
 801406e:	bfb8      	it	lt
 8014070:	4622      	movlt	r2, r4
 8014072:	462b      	mov	r3, r5
 8014074:	f027 0720 	bic.w	r7, r7, #32
 8014078:	bfbb      	ittet	lt
 801407a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801407e:	461d      	movlt	r5, r3
 8014080:	2300      	movge	r3, #0
 8014082:	232d      	movlt	r3, #45	; 0x2d
 8014084:	bfb8      	it	lt
 8014086:	4614      	movlt	r4, r2
 8014088:	2f46      	cmp	r7, #70	; 0x46
 801408a:	700b      	strb	r3, [r1, #0]
 801408c:	d004      	beq.n	8014098 <__cvt+0x40>
 801408e:	2f45      	cmp	r7, #69	; 0x45
 8014090:	d100      	bne.n	8014094 <__cvt+0x3c>
 8014092:	3601      	adds	r6, #1
 8014094:	2102      	movs	r1, #2
 8014096:	e000      	b.n	801409a <__cvt+0x42>
 8014098:	2103      	movs	r1, #3
 801409a:	ab03      	add	r3, sp, #12
 801409c:	9301      	str	r3, [sp, #4]
 801409e:	ab02      	add	r3, sp, #8
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	4632      	mov	r2, r6
 80140a4:	4653      	mov	r3, sl
 80140a6:	ec45 4b10 	vmov	d0, r4, r5
 80140aa:	f000 ff3d 	bl	8014f28 <_dtoa_r>
 80140ae:	2f47      	cmp	r7, #71	; 0x47
 80140b0:	4680      	mov	r8, r0
 80140b2:	d102      	bne.n	80140ba <__cvt+0x62>
 80140b4:	f019 0f01 	tst.w	r9, #1
 80140b8:	d026      	beq.n	8014108 <__cvt+0xb0>
 80140ba:	2f46      	cmp	r7, #70	; 0x46
 80140bc:	eb08 0906 	add.w	r9, r8, r6
 80140c0:	d111      	bne.n	80140e6 <__cvt+0x8e>
 80140c2:	f898 3000 	ldrb.w	r3, [r8]
 80140c6:	2b30      	cmp	r3, #48	; 0x30
 80140c8:	d10a      	bne.n	80140e0 <__cvt+0x88>
 80140ca:	2200      	movs	r2, #0
 80140cc:	2300      	movs	r3, #0
 80140ce:	4620      	mov	r0, r4
 80140d0:	4629      	mov	r1, r5
 80140d2:	f7ec fd25 	bl	8000b20 <__aeabi_dcmpeq>
 80140d6:	b918      	cbnz	r0, 80140e0 <__cvt+0x88>
 80140d8:	f1c6 0601 	rsb	r6, r6, #1
 80140dc:	f8ca 6000 	str.w	r6, [sl]
 80140e0:	f8da 3000 	ldr.w	r3, [sl]
 80140e4:	4499      	add	r9, r3
 80140e6:	2200      	movs	r2, #0
 80140e8:	2300      	movs	r3, #0
 80140ea:	4620      	mov	r0, r4
 80140ec:	4629      	mov	r1, r5
 80140ee:	f7ec fd17 	bl	8000b20 <__aeabi_dcmpeq>
 80140f2:	b938      	cbnz	r0, 8014104 <__cvt+0xac>
 80140f4:	2230      	movs	r2, #48	; 0x30
 80140f6:	9b03      	ldr	r3, [sp, #12]
 80140f8:	4599      	cmp	r9, r3
 80140fa:	d905      	bls.n	8014108 <__cvt+0xb0>
 80140fc:	1c59      	adds	r1, r3, #1
 80140fe:	9103      	str	r1, [sp, #12]
 8014100:	701a      	strb	r2, [r3, #0]
 8014102:	e7f8      	b.n	80140f6 <__cvt+0x9e>
 8014104:	f8cd 900c 	str.w	r9, [sp, #12]
 8014108:	9b03      	ldr	r3, [sp, #12]
 801410a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801410c:	eba3 0308 	sub.w	r3, r3, r8
 8014110:	4640      	mov	r0, r8
 8014112:	6013      	str	r3, [r2, #0]
 8014114:	b004      	add	sp, #16
 8014116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801411a <__exponent>:
 801411a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801411c:	4603      	mov	r3, r0
 801411e:	2900      	cmp	r1, #0
 8014120:	bfb8      	it	lt
 8014122:	4249      	neglt	r1, r1
 8014124:	f803 2b02 	strb.w	r2, [r3], #2
 8014128:	bfb4      	ite	lt
 801412a:	222d      	movlt	r2, #45	; 0x2d
 801412c:	222b      	movge	r2, #43	; 0x2b
 801412e:	2909      	cmp	r1, #9
 8014130:	7042      	strb	r2, [r0, #1]
 8014132:	dd20      	ble.n	8014176 <__exponent+0x5c>
 8014134:	f10d 0207 	add.w	r2, sp, #7
 8014138:	4617      	mov	r7, r2
 801413a:	260a      	movs	r6, #10
 801413c:	fb91 f5f6 	sdiv	r5, r1, r6
 8014140:	fb06 1115 	mls	r1, r6, r5, r1
 8014144:	3130      	adds	r1, #48	; 0x30
 8014146:	2d09      	cmp	r5, #9
 8014148:	f802 1c01 	strb.w	r1, [r2, #-1]
 801414c:	f102 34ff 	add.w	r4, r2, #4294967295
 8014150:	4629      	mov	r1, r5
 8014152:	dc09      	bgt.n	8014168 <__exponent+0x4e>
 8014154:	3130      	adds	r1, #48	; 0x30
 8014156:	3a02      	subs	r2, #2
 8014158:	f804 1c01 	strb.w	r1, [r4, #-1]
 801415c:	42ba      	cmp	r2, r7
 801415e:	461c      	mov	r4, r3
 8014160:	d304      	bcc.n	801416c <__exponent+0x52>
 8014162:	1a20      	subs	r0, r4, r0
 8014164:	b003      	add	sp, #12
 8014166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014168:	4622      	mov	r2, r4
 801416a:	e7e7      	b.n	801413c <__exponent+0x22>
 801416c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014170:	f803 1b01 	strb.w	r1, [r3], #1
 8014174:	e7f2      	b.n	801415c <__exponent+0x42>
 8014176:	2230      	movs	r2, #48	; 0x30
 8014178:	461c      	mov	r4, r3
 801417a:	4411      	add	r1, r2
 801417c:	f804 2b02 	strb.w	r2, [r4], #2
 8014180:	7059      	strb	r1, [r3, #1]
 8014182:	e7ee      	b.n	8014162 <__exponent+0x48>

08014184 <_printf_float>:
 8014184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014188:	b08d      	sub	sp, #52	; 0x34
 801418a:	460c      	mov	r4, r1
 801418c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014190:	4616      	mov	r6, r2
 8014192:	461f      	mov	r7, r3
 8014194:	4605      	mov	r5, r0
 8014196:	f001 fe11 	bl	8015dbc <_localeconv_r>
 801419a:	6803      	ldr	r3, [r0, #0]
 801419c:	9304      	str	r3, [sp, #16]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7ec f840 	bl	8000224 <strlen>
 80141a4:	2300      	movs	r3, #0
 80141a6:	930a      	str	r3, [sp, #40]	; 0x28
 80141a8:	f8d8 3000 	ldr.w	r3, [r8]
 80141ac:	9005      	str	r0, [sp, #20]
 80141ae:	3307      	adds	r3, #7
 80141b0:	f023 0307 	bic.w	r3, r3, #7
 80141b4:	f103 0208 	add.w	r2, r3, #8
 80141b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80141bc:	f8d4 b000 	ldr.w	fp, [r4]
 80141c0:	f8c8 2000 	str.w	r2, [r8]
 80141c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80141cc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80141d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80141d4:	9307      	str	r3, [sp, #28]
 80141d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80141da:	f04f 32ff 	mov.w	r2, #4294967295
 80141de:	4ba5      	ldr	r3, [pc, #660]	; (8014474 <_printf_float+0x2f0>)
 80141e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141e4:	f7ec fcce 	bl	8000b84 <__aeabi_dcmpun>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	f040 81fb 	bne.w	80145e4 <_printf_float+0x460>
 80141ee:	f04f 32ff 	mov.w	r2, #4294967295
 80141f2:	4ba0      	ldr	r3, [pc, #640]	; (8014474 <_printf_float+0x2f0>)
 80141f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141f8:	f7ec fca6 	bl	8000b48 <__aeabi_dcmple>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	f040 81f1 	bne.w	80145e4 <_printf_float+0x460>
 8014202:	2200      	movs	r2, #0
 8014204:	2300      	movs	r3, #0
 8014206:	4640      	mov	r0, r8
 8014208:	4649      	mov	r1, r9
 801420a:	f7ec fc93 	bl	8000b34 <__aeabi_dcmplt>
 801420e:	b110      	cbz	r0, 8014216 <_printf_float+0x92>
 8014210:	232d      	movs	r3, #45	; 0x2d
 8014212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014216:	4b98      	ldr	r3, [pc, #608]	; (8014478 <_printf_float+0x2f4>)
 8014218:	4a98      	ldr	r2, [pc, #608]	; (801447c <_printf_float+0x2f8>)
 801421a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801421e:	bf8c      	ite	hi
 8014220:	4690      	movhi	r8, r2
 8014222:	4698      	movls	r8, r3
 8014224:	2303      	movs	r3, #3
 8014226:	f02b 0204 	bic.w	r2, fp, #4
 801422a:	6123      	str	r3, [r4, #16]
 801422c:	6022      	str	r2, [r4, #0]
 801422e:	f04f 0900 	mov.w	r9, #0
 8014232:	9700      	str	r7, [sp, #0]
 8014234:	4633      	mov	r3, r6
 8014236:	aa0b      	add	r2, sp, #44	; 0x2c
 8014238:	4621      	mov	r1, r4
 801423a:	4628      	mov	r0, r5
 801423c:	f000 f9e2 	bl	8014604 <_printf_common>
 8014240:	3001      	adds	r0, #1
 8014242:	f040 8093 	bne.w	801436c <_printf_float+0x1e8>
 8014246:	f04f 30ff 	mov.w	r0, #4294967295
 801424a:	b00d      	add	sp, #52	; 0x34
 801424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014250:	6861      	ldr	r1, [r4, #4]
 8014252:	1c4b      	adds	r3, r1, #1
 8014254:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014258:	d13f      	bne.n	80142da <_printf_float+0x156>
 801425a:	2306      	movs	r3, #6
 801425c:	6063      	str	r3, [r4, #4]
 801425e:	2300      	movs	r3, #0
 8014260:	9303      	str	r3, [sp, #12]
 8014262:	ab0a      	add	r3, sp, #40	; 0x28
 8014264:	9302      	str	r3, [sp, #8]
 8014266:	ab09      	add	r3, sp, #36	; 0x24
 8014268:	9300      	str	r3, [sp, #0]
 801426a:	ec49 8b10 	vmov	d0, r8, r9
 801426e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014272:	6022      	str	r2, [r4, #0]
 8014274:	f8cd a004 	str.w	sl, [sp, #4]
 8014278:	6861      	ldr	r1, [r4, #4]
 801427a:	4628      	mov	r0, r5
 801427c:	f7ff feec 	bl	8014058 <__cvt>
 8014280:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014284:	2b47      	cmp	r3, #71	; 0x47
 8014286:	4680      	mov	r8, r0
 8014288:	d109      	bne.n	801429e <_printf_float+0x11a>
 801428a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801428c:	1cd8      	adds	r0, r3, #3
 801428e:	db02      	blt.n	8014296 <_printf_float+0x112>
 8014290:	6862      	ldr	r2, [r4, #4]
 8014292:	4293      	cmp	r3, r2
 8014294:	dd57      	ble.n	8014346 <_printf_float+0x1c2>
 8014296:	f1aa 0a02 	sub.w	sl, sl, #2
 801429a:	fa5f fa8a 	uxtb.w	sl, sl
 801429e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80142a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142a4:	d834      	bhi.n	8014310 <_printf_float+0x18c>
 80142a6:	3901      	subs	r1, #1
 80142a8:	4652      	mov	r2, sl
 80142aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80142ae:	9109      	str	r1, [sp, #36]	; 0x24
 80142b0:	f7ff ff33 	bl	801411a <__exponent>
 80142b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142b6:	1883      	adds	r3, r0, r2
 80142b8:	2a01      	cmp	r2, #1
 80142ba:	4681      	mov	r9, r0
 80142bc:	6123      	str	r3, [r4, #16]
 80142be:	dc02      	bgt.n	80142c6 <_printf_float+0x142>
 80142c0:	6822      	ldr	r2, [r4, #0]
 80142c2:	07d1      	lsls	r1, r2, #31
 80142c4:	d501      	bpl.n	80142ca <_printf_float+0x146>
 80142c6:	3301      	adds	r3, #1
 80142c8:	6123      	str	r3, [r4, #16]
 80142ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d0af      	beq.n	8014232 <_printf_float+0xae>
 80142d2:	232d      	movs	r3, #45	; 0x2d
 80142d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142d8:	e7ab      	b.n	8014232 <_printf_float+0xae>
 80142da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80142de:	d002      	beq.n	80142e6 <_printf_float+0x162>
 80142e0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80142e4:	d1bb      	bne.n	801425e <_printf_float+0xda>
 80142e6:	b189      	cbz	r1, 801430c <_printf_float+0x188>
 80142e8:	2300      	movs	r3, #0
 80142ea:	9303      	str	r3, [sp, #12]
 80142ec:	ab0a      	add	r3, sp, #40	; 0x28
 80142ee:	9302      	str	r3, [sp, #8]
 80142f0:	ab09      	add	r3, sp, #36	; 0x24
 80142f2:	9300      	str	r3, [sp, #0]
 80142f4:	ec49 8b10 	vmov	d0, r8, r9
 80142f8:	6022      	str	r2, [r4, #0]
 80142fa:	f8cd a004 	str.w	sl, [sp, #4]
 80142fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014302:	4628      	mov	r0, r5
 8014304:	f7ff fea8 	bl	8014058 <__cvt>
 8014308:	4680      	mov	r8, r0
 801430a:	e7be      	b.n	801428a <_printf_float+0x106>
 801430c:	2301      	movs	r3, #1
 801430e:	e7a5      	b.n	801425c <_printf_float+0xd8>
 8014310:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014314:	d119      	bne.n	801434a <_printf_float+0x1c6>
 8014316:	2900      	cmp	r1, #0
 8014318:	6863      	ldr	r3, [r4, #4]
 801431a:	dd0c      	ble.n	8014336 <_printf_float+0x1b2>
 801431c:	6121      	str	r1, [r4, #16]
 801431e:	b913      	cbnz	r3, 8014326 <_printf_float+0x1a2>
 8014320:	6822      	ldr	r2, [r4, #0]
 8014322:	07d2      	lsls	r2, r2, #31
 8014324:	d502      	bpl.n	801432c <_printf_float+0x1a8>
 8014326:	3301      	adds	r3, #1
 8014328:	440b      	add	r3, r1
 801432a:	6123      	str	r3, [r4, #16]
 801432c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801432e:	65a3      	str	r3, [r4, #88]	; 0x58
 8014330:	f04f 0900 	mov.w	r9, #0
 8014334:	e7c9      	b.n	80142ca <_printf_float+0x146>
 8014336:	b913      	cbnz	r3, 801433e <_printf_float+0x1ba>
 8014338:	6822      	ldr	r2, [r4, #0]
 801433a:	07d0      	lsls	r0, r2, #31
 801433c:	d501      	bpl.n	8014342 <_printf_float+0x1be>
 801433e:	3302      	adds	r3, #2
 8014340:	e7f3      	b.n	801432a <_printf_float+0x1a6>
 8014342:	2301      	movs	r3, #1
 8014344:	e7f1      	b.n	801432a <_printf_float+0x1a6>
 8014346:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801434e:	4293      	cmp	r3, r2
 8014350:	db05      	blt.n	801435e <_printf_float+0x1da>
 8014352:	6822      	ldr	r2, [r4, #0]
 8014354:	6123      	str	r3, [r4, #16]
 8014356:	07d1      	lsls	r1, r2, #31
 8014358:	d5e8      	bpl.n	801432c <_printf_float+0x1a8>
 801435a:	3301      	adds	r3, #1
 801435c:	e7e5      	b.n	801432a <_printf_float+0x1a6>
 801435e:	2b00      	cmp	r3, #0
 8014360:	bfd4      	ite	le
 8014362:	f1c3 0302 	rsble	r3, r3, #2
 8014366:	2301      	movgt	r3, #1
 8014368:	4413      	add	r3, r2
 801436a:	e7de      	b.n	801432a <_printf_float+0x1a6>
 801436c:	6823      	ldr	r3, [r4, #0]
 801436e:	055a      	lsls	r2, r3, #21
 8014370:	d407      	bmi.n	8014382 <_printf_float+0x1fe>
 8014372:	6923      	ldr	r3, [r4, #16]
 8014374:	4642      	mov	r2, r8
 8014376:	4631      	mov	r1, r6
 8014378:	4628      	mov	r0, r5
 801437a:	47b8      	blx	r7
 801437c:	3001      	adds	r0, #1
 801437e:	d12b      	bne.n	80143d8 <_printf_float+0x254>
 8014380:	e761      	b.n	8014246 <_printf_float+0xc2>
 8014382:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014386:	f240 80e2 	bls.w	801454e <_printf_float+0x3ca>
 801438a:	2200      	movs	r2, #0
 801438c:	2300      	movs	r3, #0
 801438e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014392:	f7ec fbc5 	bl	8000b20 <__aeabi_dcmpeq>
 8014396:	2800      	cmp	r0, #0
 8014398:	d03c      	beq.n	8014414 <_printf_float+0x290>
 801439a:	2301      	movs	r3, #1
 801439c:	4a38      	ldr	r2, [pc, #224]	; (8014480 <_printf_float+0x2fc>)
 801439e:	4631      	mov	r1, r6
 80143a0:	4628      	mov	r0, r5
 80143a2:	47b8      	blx	r7
 80143a4:	3001      	adds	r0, #1
 80143a6:	f43f af4e 	beq.w	8014246 <_printf_float+0xc2>
 80143aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143ae:	429a      	cmp	r2, r3
 80143b0:	db02      	blt.n	80143b8 <_printf_float+0x234>
 80143b2:	6823      	ldr	r3, [r4, #0]
 80143b4:	07d8      	lsls	r0, r3, #31
 80143b6:	d50f      	bpl.n	80143d8 <_printf_float+0x254>
 80143b8:	9b05      	ldr	r3, [sp, #20]
 80143ba:	9a04      	ldr	r2, [sp, #16]
 80143bc:	4631      	mov	r1, r6
 80143be:	4628      	mov	r0, r5
 80143c0:	47b8      	blx	r7
 80143c2:	3001      	adds	r0, #1
 80143c4:	f43f af3f 	beq.w	8014246 <_printf_float+0xc2>
 80143c8:	f04f 0800 	mov.w	r8, #0
 80143cc:	f104 091a 	add.w	r9, r4, #26
 80143d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143d2:	3b01      	subs	r3, #1
 80143d4:	4598      	cmp	r8, r3
 80143d6:	db12      	blt.n	80143fe <_printf_float+0x27a>
 80143d8:	6823      	ldr	r3, [r4, #0]
 80143da:	079b      	lsls	r3, r3, #30
 80143dc:	d509      	bpl.n	80143f2 <_printf_float+0x26e>
 80143de:	f04f 0800 	mov.w	r8, #0
 80143e2:	f104 0919 	add.w	r9, r4, #25
 80143e6:	68e3      	ldr	r3, [r4, #12]
 80143e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143ea:	1a9b      	subs	r3, r3, r2
 80143ec:	4598      	cmp	r8, r3
 80143ee:	f2c0 80ee 	blt.w	80145ce <_printf_float+0x44a>
 80143f2:	68e0      	ldr	r0, [r4, #12]
 80143f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143f6:	4298      	cmp	r0, r3
 80143f8:	bfb8      	it	lt
 80143fa:	4618      	movlt	r0, r3
 80143fc:	e725      	b.n	801424a <_printf_float+0xc6>
 80143fe:	2301      	movs	r3, #1
 8014400:	464a      	mov	r2, r9
 8014402:	4631      	mov	r1, r6
 8014404:	4628      	mov	r0, r5
 8014406:	47b8      	blx	r7
 8014408:	3001      	adds	r0, #1
 801440a:	f43f af1c 	beq.w	8014246 <_printf_float+0xc2>
 801440e:	f108 0801 	add.w	r8, r8, #1
 8014412:	e7dd      	b.n	80143d0 <_printf_float+0x24c>
 8014414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014416:	2b00      	cmp	r3, #0
 8014418:	dc34      	bgt.n	8014484 <_printf_float+0x300>
 801441a:	2301      	movs	r3, #1
 801441c:	4a18      	ldr	r2, [pc, #96]	; (8014480 <_printf_float+0x2fc>)
 801441e:	4631      	mov	r1, r6
 8014420:	4628      	mov	r0, r5
 8014422:	47b8      	blx	r7
 8014424:	3001      	adds	r0, #1
 8014426:	f43f af0e 	beq.w	8014246 <_printf_float+0xc2>
 801442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801442c:	b923      	cbnz	r3, 8014438 <_printf_float+0x2b4>
 801442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014430:	b913      	cbnz	r3, 8014438 <_printf_float+0x2b4>
 8014432:	6823      	ldr	r3, [r4, #0]
 8014434:	07d9      	lsls	r1, r3, #31
 8014436:	d5cf      	bpl.n	80143d8 <_printf_float+0x254>
 8014438:	9b05      	ldr	r3, [sp, #20]
 801443a:	9a04      	ldr	r2, [sp, #16]
 801443c:	4631      	mov	r1, r6
 801443e:	4628      	mov	r0, r5
 8014440:	47b8      	blx	r7
 8014442:	3001      	adds	r0, #1
 8014444:	f43f aeff 	beq.w	8014246 <_printf_float+0xc2>
 8014448:	f04f 0900 	mov.w	r9, #0
 801444c:	f104 0a1a 	add.w	sl, r4, #26
 8014450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014452:	425b      	negs	r3, r3
 8014454:	4599      	cmp	r9, r3
 8014456:	db01      	blt.n	801445c <_printf_float+0x2d8>
 8014458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801445a:	e78b      	b.n	8014374 <_printf_float+0x1f0>
 801445c:	2301      	movs	r3, #1
 801445e:	4652      	mov	r2, sl
 8014460:	4631      	mov	r1, r6
 8014462:	4628      	mov	r0, r5
 8014464:	47b8      	blx	r7
 8014466:	3001      	adds	r0, #1
 8014468:	f43f aeed 	beq.w	8014246 <_printf_float+0xc2>
 801446c:	f109 0901 	add.w	r9, r9, #1
 8014470:	e7ee      	b.n	8014450 <_printf_float+0x2cc>
 8014472:	bf00      	nop
 8014474:	7fefffff 	.word	0x7fefffff
 8014478:	08019c56 	.word	0x08019c56
 801447c:	08019c5a 	.word	0x08019c5a
 8014480:	08019c66 	.word	0x08019c66
 8014484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014488:	429a      	cmp	r2, r3
 801448a:	bfa8      	it	ge
 801448c:	461a      	movge	r2, r3
 801448e:	2a00      	cmp	r2, #0
 8014490:	4691      	mov	r9, r2
 8014492:	dc38      	bgt.n	8014506 <_printf_float+0x382>
 8014494:	f104 031a 	add.w	r3, r4, #26
 8014498:	f04f 0b00 	mov.w	fp, #0
 801449c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144a0:	9306      	str	r3, [sp, #24]
 80144a2:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80144a6:	ebaa 0309 	sub.w	r3, sl, r9
 80144aa:	459b      	cmp	fp, r3
 80144ac:	db33      	blt.n	8014516 <_printf_float+0x392>
 80144ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144b2:	429a      	cmp	r2, r3
 80144b4:	db3a      	blt.n	801452c <_printf_float+0x3a8>
 80144b6:	6823      	ldr	r3, [r4, #0]
 80144b8:	07da      	lsls	r2, r3, #31
 80144ba:	d437      	bmi.n	801452c <_printf_float+0x3a8>
 80144bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144c0:	eba3 020a 	sub.w	r2, r3, sl
 80144c4:	eba3 0901 	sub.w	r9, r3, r1
 80144c8:	4591      	cmp	r9, r2
 80144ca:	bfa8      	it	ge
 80144cc:	4691      	movge	r9, r2
 80144ce:	f1b9 0f00 	cmp.w	r9, #0
 80144d2:	dc33      	bgt.n	801453c <_printf_float+0x3b8>
 80144d4:	f04f 0800 	mov.w	r8, #0
 80144d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144dc:	f104 0a1a 	add.w	sl, r4, #26
 80144e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144e4:	1a9b      	subs	r3, r3, r2
 80144e6:	eba3 0309 	sub.w	r3, r3, r9
 80144ea:	4598      	cmp	r8, r3
 80144ec:	f6bf af74 	bge.w	80143d8 <_printf_float+0x254>
 80144f0:	2301      	movs	r3, #1
 80144f2:	4652      	mov	r2, sl
 80144f4:	4631      	mov	r1, r6
 80144f6:	4628      	mov	r0, r5
 80144f8:	47b8      	blx	r7
 80144fa:	3001      	adds	r0, #1
 80144fc:	f43f aea3 	beq.w	8014246 <_printf_float+0xc2>
 8014500:	f108 0801 	add.w	r8, r8, #1
 8014504:	e7ec      	b.n	80144e0 <_printf_float+0x35c>
 8014506:	4613      	mov	r3, r2
 8014508:	4631      	mov	r1, r6
 801450a:	4642      	mov	r2, r8
 801450c:	4628      	mov	r0, r5
 801450e:	47b8      	blx	r7
 8014510:	3001      	adds	r0, #1
 8014512:	d1bf      	bne.n	8014494 <_printf_float+0x310>
 8014514:	e697      	b.n	8014246 <_printf_float+0xc2>
 8014516:	2301      	movs	r3, #1
 8014518:	9a06      	ldr	r2, [sp, #24]
 801451a:	4631      	mov	r1, r6
 801451c:	4628      	mov	r0, r5
 801451e:	47b8      	blx	r7
 8014520:	3001      	adds	r0, #1
 8014522:	f43f ae90 	beq.w	8014246 <_printf_float+0xc2>
 8014526:	f10b 0b01 	add.w	fp, fp, #1
 801452a:	e7ba      	b.n	80144a2 <_printf_float+0x31e>
 801452c:	9b05      	ldr	r3, [sp, #20]
 801452e:	9a04      	ldr	r2, [sp, #16]
 8014530:	4631      	mov	r1, r6
 8014532:	4628      	mov	r0, r5
 8014534:	47b8      	blx	r7
 8014536:	3001      	adds	r0, #1
 8014538:	d1c0      	bne.n	80144bc <_printf_float+0x338>
 801453a:	e684      	b.n	8014246 <_printf_float+0xc2>
 801453c:	464b      	mov	r3, r9
 801453e:	eb08 020a 	add.w	r2, r8, sl
 8014542:	4631      	mov	r1, r6
 8014544:	4628      	mov	r0, r5
 8014546:	47b8      	blx	r7
 8014548:	3001      	adds	r0, #1
 801454a:	d1c3      	bne.n	80144d4 <_printf_float+0x350>
 801454c:	e67b      	b.n	8014246 <_printf_float+0xc2>
 801454e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014550:	2a01      	cmp	r2, #1
 8014552:	dc01      	bgt.n	8014558 <_printf_float+0x3d4>
 8014554:	07db      	lsls	r3, r3, #31
 8014556:	d537      	bpl.n	80145c8 <_printf_float+0x444>
 8014558:	2301      	movs	r3, #1
 801455a:	4642      	mov	r2, r8
 801455c:	4631      	mov	r1, r6
 801455e:	4628      	mov	r0, r5
 8014560:	47b8      	blx	r7
 8014562:	3001      	adds	r0, #1
 8014564:	f43f ae6f 	beq.w	8014246 <_printf_float+0xc2>
 8014568:	9b05      	ldr	r3, [sp, #20]
 801456a:	9a04      	ldr	r2, [sp, #16]
 801456c:	4631      	mov	r1, r6
 801456e:	4628      	mov	r0, r5
 8014570:	47b8      	blx	r7
 8014572:	3001      	adds	r0, #1
 8014574:	f43f ae67 	beq.w	8014246 <_printf_float+0xc2>
 8014578:	2200      	movs	r2, #0
 801457a:	2300      	movs	r3, #0
 801457c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014580:	f7ec face 	bl	8000b20 <__aeabi_dcmpeq>
 8014584:	b158      	cbz	r0, 801459e <_printf_float+0x41a>
 8014586:	f04f 0800 	mov.w	r8, #0
 801458a:	f104 0a1a 	add.w	sl, r4, #26
 801458e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014590:	3b01      	subs	r3, #1
 8014592:	4598      	cmp	r8, r3
 8014594:	db0d      	blt.n	80145b2 <_printf_float+0x42e>
 8014596:	464b      	mov	r3, r9
 8014598:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801459c:	e6eb      	b.n	8014376 <_printf_float+0x1f2>
 801459e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145a0:	f108 0201 	add.w	r2, r8, #1
 80145a4:	3b01      	subs	r3, #1
 80145a6:	4631      	mov	r1, r6
 80145a8:	4628      	mov	r0, r5
 80145aa:	47b8      	blx	r7
 80145ac:	3001      	adds	r0, #1
 80145ae:	d1f2      	bne.n	8014596 <_printf_float+0x412>
 80145b0:	e649      	b.n	8014246 <_printf_float+0xc2>
 80145b2:	2301      	movs	r3, #1
 80145b4:	4652      	mov	r2, sl
 80145b6:	4631      	mov	r1, r6
 80145b8:	4628      	mov	r0, r5
 80145ba:	47b8      	blx	r7
 80145bc:	3001      	adds	r0, #1
 80145be:	f43f ae42 	beq.w	8014246 <_printf_float+0xc2>
 80145c2:	f108 0801 	add.w	r8, r8, #1
 80145c6:	e7e2      	b.n	801458e <_printf_float+0x40a>
 80145c8:	2301      	movs	r3, #1
 80145ca:	4642      	mov	r2, r8
 80145cc:	e7eb      	b.n	80145a6 <_printf_float+0x422>
 80145ce:	2301      	movs	r3, #1
 80145d0:	464a      	mov	r2, r9
 80145d2:	4631      	mov	r1, r6
 80145d4:	4628      	mov	r0, r5
 80145d6:	47b8      	blx	r7
 80145d8:	3001      	adds	r0, #1
 80145da:	f43f ae34 	beq.w	8014246 <_printf_float+0xc2>
 80145de:	f108 0801 	add.w	r8, r8, #1
 80145e2:	e700      	b.n	80143e6 <_printf_float+0x262>
 80145e4:	4642      	mov	r2, r8
 80145e6:	464b      	mov	r3, r9
 80145e8:	4640      	mov	r0, r8
 80145ea:	4649      	mov	r1, r9
 80145ec:	f7ec faca 	bl	8000b84 <__aeabi_dcmpun>
 80145f0:	2800      	cmp	r0, #0
 80145f2:	f43f ae2d 	beq.w	8014250 <_printf_float+0xcc>
 80145f6:	4b01      	ldr	r3, [pc, #4]	; (80145fc <_printf_float+0x478>)
 80145f8:	4a01      	ldr	r2, [pc, #4]	; (8014600 <_printf_float+0x47c>)
 80145fa:	e60e      	b.n	801421a <_printf_float+0x96>
 80145fc:	08019c5e 	.word	0x08019c5e
 8014600:	08019c62 	.word	0x08019c62

08014604 <_printf_common>:
 8014604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014608:	4691      	mov	r9, r2
 801460a:	461f      	mov	r7, r3
 801460c:	688a      	ldr	r2, [r1, #8]
 801460e:	690b      	ldr	r3, [r1, #16]
 8014610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014614:	4293      	cmp	r3, r2
 8014616:	bfb8      	it	lt
 8014618:	4613      	movlt	r3, r2
 801461a:	f8c9 3000 	str.w	r3, [r9]
 801461e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014622:	4606      	mov	r6, r0
 8014624:	460c      	mov	r4, r1
 8014626:	b112      	cbz	r2, 801462e <_printf_common+0x2a>
 8014628:	3301      	adds	r3, #1
 801462a:	f8c9 3000 	str.w	r3, [r9]
 801462e:	6823      	ldr	r3, [r4, #0]
 8014630:	0699      	lsls	r1, r3, #26
 8014632:	bf42      	ittt	mi
 8014634:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014638:	3302      	addmi	r3, #2
 801463a:	f8c9 3000 	strmi.w	r3, [r9]
 801463e:	6825      	ldr	r5, [r4, #0]
 8014640:	f015 0506 	ands.w	r5, r5, #6
 8014644:	d107      	bne.n	8014656 <_printf_common+0x52>
 8014646:	f104 0a19 	add.w	sl, r4, #25
 801464a:	68e3      	ldr	r3, [r4, #12]
 801464c:	f8d9 2000 	ldr.w	r2, [r9]
 8014650:	1a9b      	subs	r3, r3, r2
 8014652:	429d      	cmp	r5, r3
 8014654:	db29      	blt.n	80146aa <_printf_common+0xa6>
 8014656:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801465a:	6822      	ldr	r2, [r4, #0]
 801465c:	3300      	adds	r3, #0
 801465e:	bf18      	it	ne
 8014660:	2301      	movne	r3, #1
 8014662:	0692      	lsls	r2, r2, #26
 8014664:	d42e      	bmi.n	80146c4 <_printf_common+0xc0>
 8014666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801466a:	4639      	mov	r1, r7
 801466c:	4630      	mov	r0, r6
 801466e:	47c0      	blx	r8
 8014670:	3001      	adds	r0, #1
 8014672:	d021      	beq.n	80146b8 <_printf_common+0xb4>
 8014674:	6823      	ldr	r3, [r4, #0]
 8014676:	68e5      	ldr	r5, [r4, #12]
 8014678:	f8d9 2000 	ldr.w	r2, [r9]
 801467c:	f003 0306 	and.w	r3, r3, #6
 8014680:	2b04      	cmp	r3, #4
 8014682:	bf08      	it	eq
 8014684:	1aad      	subeq	r5, r5, r2
 8014686:	68a3      	ldr	r3, [r4, #8]
 8014688:	6922      	ldr	r2, [r4, #16]
 801468a:	bf0c      	ite	eq
 801468c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014690:	2500      	movne	r5, #0
 8014692:	4293      	cmp	r3, r2
 8014694:	bfc4      	itt	gt
 8014696:	1a9b      	subgt	r3, r3, r2
 8014698:	18ed      	addgt	r5, r5, r3
 801469a:	f04f 0900 	mov.w	r9, #0
 801469e:	341a      	adds	r4, #26
 80146a0:	454d      	cmp	r5, r9
 80146a2:	d11b      	bne.n	80146dc <_printf_common+0xd8>
 80146a4:	2000      	movs	r0, #0
 80146a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146aa:	2301      	movs	r3, #1
 80146ac:	4652      	mov	r2, sl
 80146ae:	4639      	mov	r1, r7
 80146b0:	4630      	mov	r0, r6
 80146b2:	47c0      	blx	r8
 80146b4:	3001      	adds	r0, #1
 80146b6:	d103      	bne.n	80146c0 <_printf_common+0xbc>
 80146b8:	f04f 30ff 	mov.w	r0, #4294967295
 80146bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c0:	3501      	adds	r5, #1
 80146c2:	e7c2      	b.n	801464a <_printf_common+0x46>
 80146c4:	18e1      	adds	r1, r4, r3
 80146c6:	1c5a      	adds	r2, r3, #1
 80146c8:	2030      	movs	r0, #48	; 0x30
 80146ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80146ce:	4422      	add	r2, r4
 80146d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80146d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80146d8:	3302      	adds	r3, #2
 80146da:	e7c4      	b.n	8014666 <_printf_common+0x62>
 80146dc:	2301      	movs	r3, #1
 80146de:	4622      	mov	r2, r4
 80146e0:	4639      	mov	r1, r7
 80146e2:	4630      	mov	r0, r6
 80146e4:	47c0      	blx	r8
 80146e6:	3001      	adds	r0, #1
 80146e8:	d0e6      	beq.n	80146b8 <_printf_common+0xb4>
 80146ea:	f109 0901 	add.w	r9, r9, #1
 80146ee:	e7d7      	b.n	80146a0 <_printf_common+0x9c>

080146f0 <_printf_i>:
 80146f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146f4:	4617      	mov	r7, r2
 80146f6:	7e0a      	ldrb	r2, [r1, #24]
 80146f8:	b085      	sub	sp, #20
 80146fa:	2a6e      	cmp	r2, #110	; 0x6e
 80146fc:	4698      	mov	r8, r3
 80146fe:	4606      	mov	r6, r0
 8014700:	460c      	mov	r4, r1
 8014702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014704:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014708:	f000 80bc 	beq.w	8014884 <_printf_i+0x194>
 801470c:	d81a      	bhi.n	8014744 <_printf_i+0x54>
 801470e:	2a63      	cmp	r2, #99	; 0x63
 8014710:	d02e      	beq.n	8014770 <_printf_i+0x80>
 8014712:	d80a      	bhi.n	801472a <_printf_i+0x3a>
 8014714:	2a00      	cmp	r2, #0
 8014716:	f000 80c8 	beq.w	80148aa <_printf_i+0x1ba>
 801471a:	2a58      	cmp	r2, #88	; 0x58
 801471c:	f000 808a 	beq.w	8014834 <_printf_i+0x144>
 8014720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014724:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014728:	e02a      	b.n	8014780 <_printf_i+0x90>
 801472a:	2a64      	cmp	r2, #100	; 0x64
 801472c:	d001      	beq.n	8014732 <_printf_i+0x42>
 801472e:	2a69      	cmp	r2, #105	; 0x69
 8014730:	d1f6      	bne.n	8014720 <_printf_i+0x30>
 8014732:	6821      	ldr	r1, [r4, #0]
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	f011 0f80 	tst.w	r1, #128	; 0x80
 801473a:	d023      	beq.n	8014784 <_printf_i+0x94>
 801473c:	1d11      	adds	r1, r2, #4
 801473e:	6019      	str	r1, [r3, #0]
 8014740:	6813      	ldr	r3, [r2, #0]
 8014742:	e027      	b.n	8014794 <_printf_i+0xa4>
 8014744:	2a73      	cmp	r2, #115	; 0x73
 8014746:	f000 80b4 	beq.w	80148b2 <_printf_i+0x1c2>
 801474a:	d808      	bhi.n	801475e <_printf_i+0x6e>
 801474c:	2a6f      	cmp	r2, #111	; 0x6f
 801474e:	d02a      	beq.n	80147a6 <_printf_i+0xb6>
 8014750:	2a70      	cmp	r2, #112	; 0x70
 8014752:	d1e5      	bne.n	8014720 <_printf_i+0x30>
 8014754:	680a      	ldr	r2, [r1, #0]
 8014756:	f042 0220 	orr.w	r2, r2, #32
 801475a:	600a      	str	r2, [r1, #0]
 801475c:	e003      	b.n	8014766 <_printf_i+0x76>
 801475e:	2a75      	cmp	r2, #117	; 0x75
 8014760:	d021      	beq.n	80147a6 <_printf_i+0xb6>
 8014762:	2a78      	cmp	r2, #120	; 0x78
 8014764:	d1dc      	bne.n	8014720 <_printf_i+0x30>
 8014766:	2278      	movs	r2, #120	; 0x78
 8014768:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801476c:	496e      	ldr	r1, [pc, #440]	; (8014928 <_printf_i+0x238>)
 801476e:	e064      	b.n	801483a <_printf_i+0x14a>
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8014776:	1d11      	adds	r1, r2, #4
 8014778:	6019      	str	r1, [r3, #0]
 801477a:	6813      	ldr	r3, [r2, #0]
 801477c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014780:	2301      	movs	r3, #1
 8014782:	e0a3      	b.n	80148cc <_printf_i+0x1dc>
 8014784:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014788:	f102 0104 	add.w	r1, r2, #4
 801478c:	6019      	str	r1, [r3, #0]
 801478e:	d0d7      	beq.n	8014740 <_printf_i+0x50>
 8014790:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014794:	2b00      	cmp	r3, #0
 8014796:	da03      	bge.n	80147a0 <_printf_i+0xb0>
 8014798:	222d      	movs	r2, #45	; 0x2d
 801479a:	425b      	negs	r3, r3
 801479c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80147a0:	4962      	ldr	r1, [pc, #392]	; (801492c <_printf_i+0x23c>)
 80147a2:	220a      	movs	r2, #10
 80147a4:	e017      	b.n	80147d6 <_printf_i+0xe6>
 80147a6:	6820      	ldr	r0, [r4, #0]
 80147a8:	6819      	ldr	r1, [r3, #0]
 80147aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80147ae:	d003      	beq.n	80147b8 <_printf_i+0xc8>
 80147b0:	1d08      	adds	r0, r1, #4
 80147b2:	6018      	str	r0, [r3, #0]
 80147b4:	680b      	ldr	r3, [r1, #0]
 80147b6:	e006      	b.n	80147c6 <_printf_i+0xd6>
 80147b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80147bc:	f101 0004 	add.w	r0, r1, #4
 80147c0:	6018      	str	r0, [r3, #0]
 80147c2:	d0f7      	beq.n	80147b4 <_printf_i+0xc4>
 80147c4:	880b      	ldrh	r3, [r1, #0]
 80147c6:	4959      	ldr	r1, [pc, #356]	; (801492c <_printf_i+0x23c>)
 80147c8:	2a6f      	cmp	r2, #111	; 0x6f
 80147ca:	bf14      	ite	ne
 80147cc:	220a      	movne	r2, #10
 80147ce:	2208      	moveq	r2, #8
 80147d0:	2000      	movs	r0, #0
 80147d2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80147d6:	6865      	ldr	r5, [r4, #4]
 80147d8:	60a5      	str	r5, [r4, #8]
 80147da:	2d00      	cmp	r5, #0
 80147dc:	f2c0 809c 	blt.w	8014918 <_printf_i+0x228>
 80147e0:	6820      	ldr	r0, [r4, #0]
 80147e2:	f020 0004 	bic.w	r0, r0, #4
 80147e6:	6020      	str	r0, [r4, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d13f      	bne.n	801486c <_printf_i+0x17c>
 80147ec:	2d00      	cmp	r5, #0
 80147ee:	f040 8095 	bne.w	801491c <_printf_i+0x22c>
 80147f2:	4675      	mov	r5, lr
 80147f4:	2a08      	cmp	r2, #8
 80147f6:	d10b      	bne.n	8014810 <_printf_i+0x120>
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	07da      	lsls	r2, r3, #31
 80147fc:	d508      	bpl.n	8014810 <_printf_i+0x120>
 80147fe:	6923      	ldr	r3, [r4, #16]
 8014800:	6862      	ldr	r2, [r4, #4]
 8014802:	429a      	cmp	r2, r3
 8014804:	bfde      	ittt	le
 8014806:	2330      	movle	r3, #48	; 0x30
 8014808:	f805 3c01 	strble.w	r3, [r5, #-1]
 801480c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014810:	ebae 0305 	sub.w	r3, lr, r5
 8014814:	6123      	str	r3, [r4, #16]
 8014816:	f8cd 8000 	str.w	r8, [sp]
 801481a:	463b      	mov	r3, r7
 801481c:	aa03      	add	r2, sp, #12
 801481e:	4621      	mov	r1, r4
 8014820:	4630      	mov	r0, r6
 8014822:	f7ff feef 	bl	8014604 <_printf_common>
 8014826:	3001      	adds	r0, #1
 8014828:	d155      	bne.n	80148d6 <_printf_i+0x1e6>
 801482a:	f04f 30ff 	mov.w	r0, #4294967295
 801482e:	b005      	add	sp, #20
 8014830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014834:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014838:	493c      	ldr	r1, [pc, #240]	; (801492c <_printf_i+0x23c>)
 801483a:	6822      	ldr	r2, [r4, #0]
 801483c:	6818      	ldr	r0, [r3, #0]
 801483e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014842:	f100 0504 	add.w	r5, r0, #4
 8014846:	601d      	str	r5, [r3, #0]
 8014848:	d001      	beq.n	801484e <_printf_i+0x15e>
 801484a:	6803      	ldr	r3, [r0, #0]
 801484c:	e002      	b.n	8014854 <_printf_i+0x164>
 801484e:	0655      	lsls	r5, r2, #25
 8014850:	d5fb      	bpl.n	801484a <_printf_i+0x15a>
 8014852:	8803      	ldrh	r3, [r0, #0]
 8014854:	07d0      	lsls	r0, r2, #31
 8014856:	bf44      	itt	mi
 8014858:	f042 0220 	orrmi.w	r2, r2, #32
 801485c:	6022      	strmi	r2, [r4, #0]
 801485e:	b91b      	cbnz	r3, 8014868 <_printf_i+0x178>
 8014860:	6822      	ldr	r2, [r4, #0]
 8014862:	f022 0220 	bic.w	r2, r2, #32
 8014866:	6022      	str	r2, [r4, #0]
 8014868:	2210      	movs	r2, #16
 801486a:	e7b1      	b.n	80147d0 <_printf_i+0xe0>
 801486c:	4675      	mov	r5, lr
 801486e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014872:	fb02 3310 	mls	r3, r2, r0, r3
 8014876:	5ccb      	ldrb	r3, [r1, r3]
 8014878:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801487c:	4603      	mov	r3, r0
 801487e:	2800      	cmp	r0, #0
 8014880:	d1f5      	bne.n	801486e <_printf_i+0x17e>
 8014882:	e7b7      	b.n	80147f4 <_printf_i+0x104>
 8014884:	6808      	ldr	r0, [r1, #0]
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	6949      	ldr	r1, [r1, #20]
 801488a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801488e:	d004      	beq.n	801489a <_printf_i+0x1aa>
 8014890:	1d10      	adds	r0, r2, #4
 8014892:	6018      	str	r0, [r3, #0]
 8014894:	6813      	ldr	r3, [r2, #0]
 8014896:	6019      	str	r1, [r3, #0]
 8014898:	e007      	b.n	80148aa <_printf_i+0x1ba>
 801489a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801489e:	f102 0004 	add.w	r0, r2, #4
 80148a2:	6018      	str	r0, [r3, #0]
 80148a4:	6813      	ldr	r3, [r2, #0]
 80148a6:	d0f6      	beq.n	8014896 <_printf_i+0x1a6>
 80148a8:	8019      	strh	r1, [r3, #0]
 80148aa:	2300      	movs	r3, #0
 80148ac:	6123      	str	r3, [r4, #16]
 80148ae:	4675      	mov	r5, lr
 80148b0:	e7b1      	b.n	8014816 <_printf_i+0x126>
 80148b2:	681a      	ldr	r2, [r3, #0]
 80148b4:	1d11      	adds	r1, r2, #4
 80148b6:	6019      	str	r1, [r3, #0]
 80148b8:	6815      	ldr	r5, [r2, #0]
 80148ba:	6862      	ldr	r2, [r4, #4]
 80148bc:	2100      	movs	r1, #0
 80148be:	4628      	mov	r0, r5
 80148c0:	f7eb fcbe 	bl	8000240 <memchr>
 80148c4:	b108      	cbz	r0, 80148ca <_printf_i+0x1da>
 80148c6:	1b40      	subs	r0, r0, r5
 80148c8:	6060      	str	r0, [r4, #4]
 80148ca:	6863      	ldr	r3, [r4, #4]
 80148cc:	6123      	str	r3, [r4, #16]
 80148ce:	2300      	movs	r3, #0
 80148d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148d4:	e79f      	b.n	8014816 <_printf_i+0x126>
 80148d6:	6923      	ldr	r3, [r4, #16]
 80148d8:	462a      	mov	r2, r5
 80148da:	4639      	mov	r1, r7
 80148dc:	4630      	mov	r0, r6
 80148de:	47c0      	blx	r8
 80148e0:	3001      	adds	r0, #1
 80148e2:	d0a2      	beq.n	801482a <_printf_i+0x13a>
 80148e4:	6823      	ldr	r3, [r4, #0]
 80148e6:	079b      	lsls	r3, r3, #30
 80148e8:	d507      	bpl.n	80148fa <_printf_i+0x20a>
 80148ea:	2500      	movs	r5, #0
 80148ec:	f104 0919 	add.w	r9, r4, #25
 80148f0:	68e3      	ldr	r3, [r4, #12]
 80148f2:	9a03      	ldr	r2, [sp, #12]
 80148f4:	1a9b      	subs	r3, r3, r2
 80148f6:	429d      	cmp	r5, r3
 80148f8:	db05      	blt.n	8014906 <_printf_i+0x216>
 80148fa:	68e0      	ldr	r0, [r4, #12]
 80148fc:	9b03      	ldr	r3, [sp, #12]
 80148fe:	4298      	cmp	r0, r3
 8014900:	bfb8      	it	lt
 8014902:	4618      	movlt	r0, r3
 8014904:	e793      	b.n	801482e <_printf_i+0x13e>
 8014906:	2301      	movs	r3, #1
 8014908:	464a      	mov	r2, r9
 801490a:	4639      	mov	r1, r7
 801490c:	4630      	mov	r0, r6
 801490e:	47c0      	blx	r8
 8014910:	3001      	adds	r0, #1
 8014912:	d08a      	beq.n	801482a <_printf_i+0x13a>
 8014914:	3501      	adds	r5, #1
 8014916:	e7eb      	b.n	80148f0 <_printf_i+0x200>
 8014918:	2b00      	cmp	r3, #0
 801491a:	d1a7      	bne.n	801486c <_printf_i+0x17c>
 801491c:	780b      	ldrb	r3, [r1, #0]
 801491e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014922:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014926:	e765      	b.n	80147f4 <_printf_i+0x104>
 8014928:	08019c79 	.word	0x08019c79
 801492c:	08019c68 	.word	0x08019c68

08014930 <iprintf>:
 8014930:	b40f      	push	{r0, r1, r2, r3}
 8014932:	4b0a      	ldr	r3, [pc, #40]	; (801495c <iprintf+0x2c>)
 8014934:	b513      	push	{r0, r1, r4, lr}
 8014936:	681c      	ldr	r4, [r3, #0]
 8014938:	b124      	cbz	r4, 8014944 <iprintf+0x14>
 801493a:	69a3      	ldr	r3, [r4, #24]
 801493c:	b913      	cbnz	r3, 8014944 <iprintf+0x14>
 801493e:	4620      	mov	r0, r4
 8014940:	f001 f9b2 	bl	8015ca8 <__sinit>
 8014944:	ab05      	add	r3, sp, #20
 8014946:	9a04      	ldr	r2, [sp, #16]
 8014948:	68a1      	ldr	r1, [r4, #8]
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	4620      	mov	r0, r4
 801494e:	f001 ff27 	bl	80167a0 <_vfiprintf_r>
 8014952:	b002      	add	sp, #8
 8014954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014958:	b004      	add	sp, #16
 801495a:	4770      	bx	lr
 801495c:	200001ac 	.word	0x200001ac

08014960 <_puts_r>:
 8014960:	b570      	push	{r4, r5, r6, lr}
 8014962:	460e      	mov	r6, r1
 8014964:	4605      	mov	r5, r0
 8014966:	b118      	cbz	r0, 8014970 <_puts_r+0x10>
 8014968:	6983      	ldr	r3, [r0, #24]
 801496a:	b90b      	cbnz	r3, 8014970 <_puts_r+0x10>
 801496c:	f001 f99c 	bl	8015ca8 <__sinit>
 8014970:	69ab      	ldr	r3, [r5, #24]
 8014972:	68ac      	ldr	r4, [r5, #8]
 8014974:	b913      	cbnz	r3, 801497c <_puts_r+0x1c>
 8014976:	4628      	mov	r0, r5
 8014978:	f001 f996 	bl	8015ca8 <__sinit>
 801497c:	4b23      	ldr	r3, [pc, #140]	; (8014a0c <_puts_r+0xac>)
 801497e:	429c      	cmp	r4, r3
 8014980:	d117      	bne.n	80149b2 <_puts_r+0x52>
 8014982:	686c      	ldr	r4, [r5, #4]
 8014984:	89a3      	ldrh	r3, [r4, #12]
 8014986:	071b      	lsls	r3, r3, #28
 8014988:	d51d      	bpl.n	80149c6 <_puts_r+0x66>
 801498a:	6923      	ldr	r3, [r4, #16]
 801498c:	b1db      	cbz	r3, 80149c6 <_puts_r+0x66>
 801498e:	3e01      	subs	r6, #1
 8014990:	68a3      	ldr	r3, [r4, #8]
 8014992:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014996:	3b01      	subs	r3, #1
 8014998:	60a3      	str	r3, [r4, #8]
 801499a:	b9e9      	cbnz	r1, 80149d8 <_puts_r+0x78>
 801499c:	2b00      	cmp	r3, #0
 801499e:	da2e      	bge.n	80149fe <_puts_r+0x9e>
 80149a0:	4622      	mov	r2, r4
 80149a2:	210a      	movs	r1, #10
 80149a4:	4628      	mov	r0, r5
 80149a6:	f000 f963 	bl	8014c70 <__swbuf_r>
 80149aa:	3001      	adds	r0, #1
 80149ac:	d011      	beq.n	80149d2 <_puts_r+0x72>
 80149ae:	200a      	movs	r0, #10
 80149b0:	bd70      	pop	{r4, r5, r6, pc}
 80149b2:	4b17      	ldr	r3, [pc, #92]	; (8014a10 <_puts_r+0xb0>)
 80149b4:	429c      	cmp	r4, r3
 80149b6:	d101      	bne.n	80149bc <_puts_r+0x5c>
 80149b8:	68ac      	ldr	r4, [r5, #8]
 80149ba:	e7e3      	b.n	8014984 <_puts_r+0x24>
 80149bc:	4b15      	ldr	r3, [pc, #84]	; (8014a14 <_puts_r+0xb4>)
 80149be:	429c      	cmp	r4, r3
 80149c0:	bf08      	it	eq
 80149c2:	68ec      	ldreq	r4, [r5, #12]
 80149c4:	e7de      	b.n	8014984 <_puts_r+0x24>
 80149c6:	4621      	mov	r1, r4
 80149c8:	4628      	mov	r0, r5
 80149ca:	f000 f9b1 	bl	8014d30 <__swsetup_r>
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d0dd      	beq.n	801498e <_puts_r+0x2e>
 80149d2:	f04f 30ff 	mov.w	r0, #4294967295
 80149d6:	bd70      	pop	{r4, r5, r6, pc}
 80149d8:	2b00      	cmp	r3, #0
 80149da:	da04      	bge.n	80149e6 <_puts_r+0x86>
 80149dc:	69a2      	ldr	r2, [r4, #24]
 80149de:	4293      	cmp	r3, r2
 80149e0:	db06      	blt.n	80149f0 <_puts_r+0x90>
 80149e2:	290a      	cmp	r1, #10
 80149e4:	d004      	beq.n	80149f0 <_puts_r+0x90>
 80149e6:	6823      	ldr	r3, [r4, #0]
 80149e8:	1c5a      	adds	r2, r3, #1
 80149ea:	6022      	str	r2, [r4, #0]
 80149ec:	7019      	strb	r1, [r3, #0]
 80149ee:	e7cf      	b.n	8014990 <_puts_r+0x30>
 80149f0:	4622      	mov	r2, r4
 80149f2:	4628      	mov	r0, r5
 80149f4:	f000 f93c 	bl	8014c70 <__swbuf_r>
 80149f8:	3001      	adds	r0, #1
 80149fa:	d1c9      	bne.n	8014990 <_puts_r+0x30>
 80149fc:	e7e9      	b.n	80149d2 <_puts_r+0x72>
 80149fe:	6823      	ldr	r3, [r4, #0]
 8014a00:	200a      	movs	r0, #10
 8014a02:	1c5a      	adds	r2, r3, #1
 8014a04:	6022      	str	r2, [r4, #0]
 8014a06:	7018      	strb	r0, [r3, #0]
 8014a08:	bd70      	pop	{r4, r5, r6, pc}
 8014a0a:	bf00      	nop
 8014a0c:	08019db8 	.word	0x08019db8
 8014a10:	08019dd8 	.word	0x08019dd8
 8014a14:	08019d98 	.word	0x08019d98

08014a18 <puts>:
 8014a18:	4b02      	ldr	r3, [pc, #8]	; (8014a24 <puts+0xc>)
 8014a1a:	4601      	mov	r1, r0
 8014a1c:	6818      	ldr	r0, [r3, #0]
 8014a1e:	f7ff bf9f 	b.w	8014960 <_puts_r>
 8014a22:	bf00      	nop
 8014a24:	200001ac 	.word	0x200001ac

08014a28 <realloc>:
 8014a28:	4b02      	ldr	r3, [pc, #8]	; (8014a34 <realloc+0xc>)
 8014a2a:	460a      	mov	r2, r1
 8014a2c:	4601      	mov	r1, r0
 8014a2e:	6818      	ldr	r0, [r3, #0]
 8014a30:	f001 bd16 	b.w	8016460 <_realloc_r>
 8014a34:	200001ac 	.word	0x200001ac

08014a38 <_sbrk_r>:
 8014a38:	b538      	push	{r3, r4, r5, lr}
 8014a3a:	4c06      	ldr	r4, [pc, #24]	; (8014a54 <_sbrk_r+0x1c>)
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	4605      	mov	r5, r0
 8014a40:	4608      	mov	r0, r1
 8014a42:	6023      	str	r3, [r4, #0]
 8014a44:	f002 f8b2 	bl	8016bac <_sbrk>
 8014a48:	1c43      	adds	r3, r0, #1
 8014a4a:	d102      	bne.n	8014a52 <_sbrk_r+0x1a>
 8014a4c:	6823      	ldr	r3, [r4, #0]
 8014a4e:	b103      	cbz	r3, 8014a52 <_sbrk_r+0x1a>
 8014a50:	602b      	str	r3, [r5, #0]
 8014a52:	bd38      	pop	{r3, r4, r5, pc}
 8014a54:	20001b08 	.word	0x20001b08

08014a58 <sniprintf>:
 8014a58:	b40c      	push	{r2, r3}
 8014a5a:	b530      	push	{r4, r5, lr}
 8014a5c:	4b17      	ldr	r3, [pc, #92]	; (8014abc <sniprintf+0x64>)
 8014a5e:	1e0c      	subs	r4, r1, #0
 8014a60:	b09d      	sub	sp, #116	; 0x74
 8014a62:	681d      	ldr	r5, [r3, #0]
 8014a64:	da08      	bge.n	8014a78 <sniprintf+0x20>
 8014a66:	238b      	movs	r3, #139	; 0x8b
 8014a68:	602b      	str	r3, [r5, #0]
 8014a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a6e:	b01d      	add	sp, #116	; 0x74
 8014a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a74:	b002      	add	sp, #8
 8014a76:	4770      	bx	lr
 8014a78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014a7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014a80:	bf14      	ite	ne
 8014a82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014a86:	4623      	moveq	r3, r4
 8014a88:	9304      	str	r3, [sp, #16]
 8014a8a:	9307      	str	r3, [sp, #28]
 8014a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a90:	9002      	str	r0, [sp, #8]
 8014a92:	9006      	str	r0, [sp, #24]
 8014a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014a9a:	ab21      	add	r3, sp, #132	; 0x84
 8014a9c:	a902      	add	r1, sp, #8
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	9301      	str	r3, [sp, #4]
 8014aa2:	f001 fd5f 	bl	8016564 <_svfiprintf_r>
 8014aa6:	1c43      	adds	r3, r0, #1
 8014aa8:	bfbc      	itt	lt
 8014aaa:	238b      	movlt	r3, #139	; 0x8b
 8014aac:	602b      	strlt	r3, [r5, #0]
 8014aae:	2c00      	cmp	r4, #0
 8014ab0:	d0dd      	beq.n	8014a6e <sniprintf+0x16>
 8014ab2:	9b02      	ldr	r3, [sp, #8]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	701a      	strb	r2, [r3, #0]
 8014ab8:	e7d9      	b.n	8014a6e <sniprintf+0x16>
 8014aba:	bf00      	nop
 8014abc:	200001ac 	.word	0x200001ac

08014ac0 <siprintf>:
 8014ac0:	b40e      	push	{r1, r2, r3}
 8014ac2:	b500      	push	{lr}
 8014ac4:	b09c      	sub	sp, #112	; 0x70
 8014ac6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8014aca:	ab1d      	add	r3, sp, #116	; 0x74
 8014acc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014ad0:	9002      	str	r0, [sp, #8]
 8014ad2:	9006      	str	r0, [sp, #24]
 8014ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014ad8:	480a      	ldr	r0, [pc, #40]	; (8014b04 <siprintf+0x44>)
 8014ada:	9104      	str	r1, [sp, #16]
 8014adc:	9107      	str	r1, [sp, #28]
 8014ade:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ae6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014aea:	6800      	ldr	r0, [r0, #0]
 8014aec:	9301      	str	r3, [sp, #4]
 8014aee:	a902      	add	r1, sp, #8
 8014af0:	f001 fd38 	bl	8016564 <_svfiprintf_r>
 8014af4:	9b02      	ldr	r3, [sp, #8]
 8014af6:	2200      	movs	r2, #0
 8014af8:	701a      	strb	r2, [r3, #0]
 8014afa:	b01c      	add	sp, #112	; 0x70
 8014afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b00:	b003      	add	sp, #12
 8014b02:	4770      	bx	lr
 8014b04:	200001ac 	.word	0x200001ac

08014b08 <strcpy>:
 8014b08:	4603      	mov	r3, r0
 8014b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b0e:	f803 2b01 	strb.w	r2, [r3], #1
 8014b12:	2a00      	cmp	r2, #0
 8014b14:	d1f9      	bne.n	8014b0a <strcpy+0x2>
 8014b16:	4770      	bx	lr

08014b18 <strncpy>:
 8014b18:	b570      	push	{r4, r5, r6, lr}
 8014b1a:	4604      	mov	r4, r0
 8014b1c:	b902      	cbnz	r2, 8014b20 <strncpy+0x8>
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}
 8014b20:	4623      	mov	r3, r4
 8014b22:	f811 5b01 	ldrb.w	r5, [r1], #1
 8014b26:	f803 5b01 	strb.w	r5, [r3], #1
 8014b2a:	1e56      	subs	r6, r2, #1
 8014b2c:	b91d      	cbnz	r5, 8014b36 <strncpy+0x1e>
 8014b2e:	4414      	add	r4, r2
 8014b30:	42a3      	cmp	r3, r4
 8014b32:	d103      	bne.n	8014b3c <strncpy+0x24>
 8014b34:	bd70      	pop	{r4, r5, r6, pc}
 8014b36:	461c      	mov	r4, r3
 8014b38:	4632      	mov	r2, r6
 8014b3a:	e7ef      	b.n	8014b1c <strncpy+0x4>
 8014b3c:	f803 5b01 	strb.w	r5, [r3], #1
 8014b40:	e7f6      	b.n	8014b30 <strncpy+0x18>

08014b42 <_strtol_l.isra.0>:
 8014b42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b46:	4680      	mov	r8, r0
 8014b48:	4689      	mov	r9, r1
 8014b4a:	4692      	mov	sl, r2
 8014b4c:	461f      	mov	r7, r3
 8014b4e:	468b      	mov	fp, r1
 8014b50:	465d      	mov	r5, fp
 8014b52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b58:	f7ff f98a 	bl	8013e70 <__locale_ctype_ptr_l>
 8014b5c:	4420      	add	r0, r4
 8014b5e:	7846      	ldrb	r6, [r0, #1]
 8014b60:	f016 0608 	ands.w	r6, r6, #8
 8014b64:	d10b      	bne.n	8014b7e <_strtol_l.isra.0+0x3c>
 8014b66:	2c2d      	cmp	r4, #45	; 0x2d
 8014b68:	d10b      	bne.n	8014b82 <_strtol_l.isra.0+0x40>
 8014b6a:	782c      	ldrb	r4, [r5, #0]
 8014b6c:	2601      	movs	r6, #1
 8014b6e:	f10b 0502 	add.w	r5, fp, #2
 8014b72:	b167      	cbz	r7, 8014b8e <_strtol_l.isra.0+0x4c>
 8014b74:	2f10      	cmp	r7, #16
 8014b76:	d114      	bne.n	8014ba2 <_strtol_l.isra.0+0x60>
 8014b78:	2c30      	cmp	r4, #48	; 0x30
 8014b7a:	d00a      	beq.n	8014b92 <_strtol_l.isra.0+0x50>
 8014b7c:	e011      	b.n	8014ba2 <_strtol_l.isra.0+0x60>
 8014b7e:	46ab      	mov	fp, r5
 8014b80:	e7e6      	b.n	8014b50 <_strtol_l.isra.0+0xe>
 8014b82:	2c2b      	cmp	r4, #43	; 0x2b
 8014b84:	bf04      	itt	eq
 8014b86:	782c      	ldrbeq	r4, [r5, #0]
 8014b88:	f10b 0502 	addeq.w	r5, fp, #2
 8014b8c:	e7f1      	b.n	8014b72 <_strtol_l.isra.0+0x30>
 8014b8e:	2c30      	cmp	r4, #48	; 0x30
 8014b90:	d127      	bne.n	8014be2 <_strtol_l.isra.0+0xa0>
 8014b92:	782b      	ldrb	r3, [r5, #0]
 8014b94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014b98:	2b58      	cmp	r3, #88	; 0x58
 8014b9a:	d14b      	bne.n	8014c34 <_strtol_l.isra.0+0xf2>
 8014b9c:	786c      	ldrb	r4, [r5, #1]
 8014b9e:	2710      	movs	r7, #16
 8014ba0:	3502      	adds	r5, #2
 8014ba2:	2e00      	cmp	r6, #0
 8014ba4:	bf0c      	ite	eq
 8014ba6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014baa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014bae:	2200      	movs	r2, #0
 8014bb0:	fbb1 fef7 	udiv	lr, r1, r7
 8014bb4:	4610      	mov	r0, r2
 8014bb6:	fb07 1c1e 	mls	ip, r7, lr, r1
 8014bba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014bbe:	2b09      	cmp	r3, #9
 8014bc0:	d811      	bhi.n	8014be6 <_strtol_l.isra.0+0xa4>
 8014bc2:	461c      	mov	r4, r3
 8014bc4:	42a7      	cmp	r7, r4
 8014bc6:	dd1d      	ble.n	8014c04 <_strtol_l.isra.0+0xc2>
 8014bc8:	1c53      	adds	r3, r2, #1
 8014bca:	d007      	beq.n	8014bdc <_strtol_l.isra.0+0x9a>
 8014bcc:	4586      	cmp	lr, r0
 8014bce:	d316      	bcc.n	8014bfe <_strtol_l.isra.0+0xbc>
 8014bd0:	d101      	bne.n	8014bd6 <_strtol_l.isra.0+0x94>
 8014bd2:	45a4      	cmp	ip, r4
 8014bd4:	db13      	blt.n	8014bfe <_strtol_l.isra.0+0xbc>
 8014bd6:	fb00 4007 	mla	r0, r0, r7, r4
 8014bda:	2201      	movs	r2, #1
 8014bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014be0:	e7eb      	b.n	8014bba <_strtol_l.isra.0+0x78>
 8014be2:	270a      	movs	r7, #10
 8014be4:	e7dd      	b.n	8014ba2 <_strtol_l.isra.0+0x60>
 8014be6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014bea:	2b19      	cmp	r3, #25
 8014bec:	d801      	bhi.n	8014bf2 <_strtol_l.isra.0+0xb0>
 8014bee:	3c37      	subs	r4, #55	; 0x37
 8014bf0:	e7e8      	b.n	8014bc4 <_strtol_l.isra.0+0x82>
 8014bf2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014bf6:	2b19      	cmp	r3, #25
 8014bf8:	d804      	bhi.n	8014c04 <_strtol_l.isra.0+0xc2>
 8014bfa:	3c57      	subs	r4, #87	; 0x57
 8014bfc:	e7e2      	b.n	8014bc4 <_strtol_l.isra.0+0x82>
 8014bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8014c02:	e7eb      	b.n	8014bdc <_strtol_l.isra.0+0x9a>
 8014c04:	1c53      	adds	r3, r2, #1
 8014c06:	d108      	bne.n	8014c1a <_strtol_l.isra.0+0xd8>
 8014c08:	2322      	movs	r3, #34	; 0x22
 8014c0a:	f8c8 3000 	str.w	r3, [r8]
 8014c0e:	4608      	mov	r0, r1
 8014c10:	f1ba 0f00 	cmp.w	sl, #0
 8014c14:	d107      	bne.n	8014c26 <_strtol_l.isra.0+0xe4>
 8014c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c1a:	b106      	cbz	r6, 8014c1e <_strtol_l.isra.0+0xdc>
 8014c1c:	4240      	negs	r0, r0
 8014c1e:	f1ba 0f00 	cmp.w	sl, #0
 8014c22:	d00c      	beq.n	8014c3e <_strtol_l.isra.0+0xfc>
 8014c24:	b122      	cbz	r2, 8014c30 <_strtol_l.isra.0+0xee>
 8014c26:	3d01      	subs	r5, #1
 8014c28:	f8ca 5000 	str.w	r5, [sl]
 8014c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c30:	464d      	mov	r5, r9
 8014c32:	e7f9      	b.n	8014c28 <_strtol_l.isra.0+0xe6>
 8014c34:	2430      	movs	r4, #48	; 0x30
 8014c36:	2f00      	cmp	r7, #0
 8014c38:	d1b3      	bne.n	8014ba2 <_strtol_l.isra.0+0x60>
 8014c3a:	2708      	movs	r7, #8
 8014c3c:	e7b1      	b.n	8014ba2 <_strtol_l.isra.0+0x60>
 8014c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014c44 <strtol>:
 8014c44:	4b08      	ldr	r3, [pc, #32]	; (8014c68 <strtol+0x24>)
 8014c46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c48:	681c      	ldr	r4, [r3, #0]
 8014c4a:	4d08      	ldr	r5, [pc, #32]	; (8014c6c <strtol+0x28>)
 8014c4c:	6a23      	ldr	r3, [r4, #32]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	bf08      	it	eq
 8014c52:	462b      	moveq	r3, r5
 8014c54:	9300      	str	r3, [sp, #0]
 8014c56:	4613      	mov	r3, r2
 8014c58:	460a      	mov	r2, r1
 8014c5a:	4601      	mov	r1, r0
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f7ff ff70 	bl	8014b42 <_strtol_l.isra.0>
 8014c62:	b003      	add	sp, #12
 8014c64:	bd30      	pop	{r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	200001ac 	.word	0x200001ac
 8014c6c:	20000040 	.word	0x20000040

08014c70 <__swbuf_r>:
 8014c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c72:	460e      	mov	r6, r1
 8014c74:	4614      	mov	r4, r2
 8014c76:	4605      	mov	r5, r0
 8014c78:	b118      	cbz	r0, 8014c82 <__swbuf_r+0x12>
 8014c7a:	6983      	ldr	r3, [r0, #24]
 8014c7c:	b90b      	cbnz	r3, 8014c82 <__swbuf_r+0x12>
 8014c7e:	f001 f813 	bl	8015ca8 <__sinit>
 8014c82:	4b21      	ldr	r3, [pc, #132]	; (8014d08 <__swbuf_r+0x98>)
 8014c84:	429c      	cmp	r4, r3
 8014c86:	d12a      	bne.n	8014cde <__swbuf_r+0x6e>
 8014c88:	686c      	ldr	r4, [r5, #4]
 8014c8a:	69a3      	ldr	r3, [r4, #24]
 8014c8c:	60a3      	str	r3, [r4, #8]
 8014c8e:	89a3      	ldrh	r3, [r4, #12]
 8014c90:	071a      	lsls	r2, r3, #28
 8014c92:	d52e      	bpl.n	8014cf2 <__swbuf_r+0x82>
 8014c94:	6923      	ldr	r3, [r4, #16]
 8014c96:	b363      	cbz	r3, 8014cf2 <__swbuf_r+0x82>
 8014c98:	6923      	ldr	r3, [r4, #16]
 8014c9a:	6820      	ldr	r0, [r4, #0]
 8014c9c:	1ac0      	subs	r0, r0, r3
 8014c9e:	6963      	ldr	r3, [r4, #20]
 8014ca0:	b2f6      	uxtb	r6, r6
 8014ca2:	4298      	cmp	r0, r3
 8014ca4:	4637      	mov	r7, r6
 8014ca6:	db04      	blt.n	8014cb2 <__swbuf_r+0x42>
 8014ca8:	4621      	mov	r1, r4
 8014caa:	4628      	mov	r0, r5
 8014cac:	f000 ff92 	bl	8015bd4 <_fflush_r>
 8014cb0:	bb28      	cbnz	r0, 8014cfe <__swbuf_r+0x8e>
 8014cb2:	68a3      	ldr	r3, [r4, #8]
 8014cb4:	3b01      	subs	r3, #1
 8014cb6:	60a3      	str	r3, [r4, #8]
 8014cb8:	6823      	ldr	r3, [r4, #0]
 8014cba:	1c5a      	adds	r2, r3, #1
 8014cbc:	6022      	str	r2, [r4, #0]
 8014cbe:	701e      	strb	r6, [r3, #0]
 8014cc0:	6963      	ldr	r3, [r4, #20]
 8014cc2:	3001      	adds	r0, #1
 8014cc4:	4298      	cmp	r0, r3
 8014cc6:	d004      	beq.n	8014cd2 <__swbuf_r+0x62>
 8014cc8:	89a3      	ldrh	r3, [r4, #12]
 8014cca:	07db      	lsls	r3, r3, #31
 8014ccc:	d519      	bpl.n	8014d02 <__swbuf_r+0x92>
 8014cce:	2e0a      	cmp	r6, #10
 8014cd0:	d117      	bne.n	8014d02 <__swbuf_r+0x92>
 8014cd2:	4621      	mov	r1, r4
 8014cd4:	4628      	mov	r0, r5
 8014cd6:	f000 ff7d 	bl	8015bd4 <_fflush_r>
 8014cda:	b190      	cbz	r0, 8014d02 <__swbuf_r+0x92>
 8014cdc:	e00f      	b.n	8014cfe <__swbuf_r+0x8e>
 8014cde:	4b0b      	ldr	r3, [pc, #44]	; (8014d0c <__swbuf_r+0x9c>)
 8014ce0:	429c      	cmp	r4, r3
 8014ce2:	d101      	bne.n	8014ce8 <__swbuf_r+0x78>
 8014ce4:	68ac      	ldr	r4, [r5, #8]
 8014ce6:	e7d0      	b.n	8014c8a <__swbuf_r+0x1a>
 8014ce8:	4b09      	ldr	r3, [pc, #36]	; (8014d10 <__swbuf_r+0xa0>)
 8014cea:	429c      	cmp	r4, r3
 8014cec:	bf08      	it	eq
 8014cee:	68ec      	ldreq	r4, [r5, #12]
 8014cf0:	e7cb      	b.n	8014c8a <__swbuf_r+0x1a>
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	4628      	mov	r0, r5
 8014cf6:	f000 f81b 	bl	8014d30 <__swsetup_r>
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	d0cc      	beq.n	8014c98 <__swbuf_r+0x28>
 8014cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8014d02:	4638      	mov	r0, r7
 8014d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d06:	bf00      	nop
 8014d08:	08019db8 	.word	0x08019db8
 8014d0c:	08019dd8 	.word	0x08019dd8
 8014d10:	08019d98 	.word	0x08019d98

08014d14 <__ascii_wctomb>:
 8014d14:	b149      	cbz	r1, 8014d2a <__ascii_wctomb+0x16>
 8014d16:	2aff      	cmp	r2, #255	; 0xff
 8014d18:	bf85      	ittet	hi
 8014d1a:	238a      	movhi	r3, #138	; 0x8a
 8014d1c:	6003      	strhi	r3, [r0, #0]
 8014d1e:	700a      	strbls	r2, [r1, #0]
 8014d20:	f04f 30ff 	movhi.w	r0, #4294967295
 8014d24:	bf98      	it	ls
 8014d26:	2001      	movls	r0, #1
 8014d28:	4770      	bx	lr
 8014d2a:	4608      	mov	r0, r1
 8014d2c:	4770      	bx	lr
	...

08014d30 <__swsetup_r>:
 8014d30:	4b32      	ldr	r3, [pc, #200]	; (8014dfc <__swsetup_r+0xcc>)
 8014d32:	b570      	push	{r4, r5, r6, lr}
 8014d34:	681d      	ldr	r5, [r3, #0]
 8014d36:	4606      	mov	r6, r0
 8014d38:	460c      	mov	r4, r1
 8014d3a:	b125      	cbz	r5, 8014d46 <__swsetup_r+0x16>
 8014d3c:	69ab      	ldr	r3, [r5, #24]
 8014d3e:	b913      	cbnz	r3, 8014d46 <__swsetup_r+0x16>
 8014d40:	4628      	mov	r0, r5
 8014d42:	f000 ffb1 	bl	8015ca8 <__sinit>
 8014d46:	4b2e      	ldr	r3, [pc, #184]	; (8014e00 <__swsetup_r+0xd0>)
 8014d48:	429c      	cmp	r4, r3
 8014d4a:	d10f      	bne.n	8014d6c <__swsetup_r+0x3c>
 8014d4c:	686c      	ldr	r4, [r5, #4]
 8014d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d52:	b29a      	uxth	r2, r3
 8014d54:	0715      	lsls	r5, r2, #28
 8014d56:	d42c      	bmi.n	8014db2 <__swsetup_r+0x82>
 8014d58:	06d0      	lsls	r0, r2, #27
 8014d5a:	d411      	bmi.n	8014d80 <__swsetup_r+0x50>
 8014d5c:	2209      	movs	r2, #9
 8014d5e:	6032      	str	r2, [r6, #0]
 8014d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d64:	81a3      	strh	r3, [r4, #12]
 8014d66:	f04f 30ff 	mov.w	r0, #4294967295
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}
 8014d6c:	4b25      	ldr	r3, [pc, #148]	; (8014e04 <__swsetup_r+0xd4>)
 8014d6e:	429c      	cmp	r4, r3
 8014d70:	d101      	bne.n	8014d76 <__swsetup_r+0x46>
 8014d72:	68ac      	ldr	r4, [r5, #8]
 8014d74:	e7eb      	b.n	8014d4e <__swsetup_r+0x1e>
 8014d76:	4b24      	ldr	r3, [pc, #144]	; (8014e08 <__swsetup_r+0xd8>)
 8014d78:	429c      	cmp	r4, r3
 8014d7a:	bf08      	it	eq
 8014d7c:	68ec      	ldreq	r4, [r5, #12]
 8014d7e:	e7e6      	b.n	8014d4e <__swsetup_r+0x1e>
 8014d80:	0751      	lsls	r1, r2, #29
 8014d82:	d512      	bpl.n	8014daa <__swsetup_r+0x7a>
 8014d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d86:	b141      	cbz	r1, 8014d9a <__swsetup_r+0x6a>
 8014d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d8c:	4299      	cmp	r1, r3
 8014d8e:	d002      	beq.n	8014d96 <__swsetup_r+0x66>
 8014d90:	4630      	mov	r0, r6
 8014d92:	f7ff f8b5 	bl	8013f00 <_free_r>
 8014d96:	2300      	movs	r3, #0
 8014d98:	6363      	str	r3, [r4, #52]	; 0x34
 8014d9a:	89a3      	ldrh	r3, [r4, #12]
 8014d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014da0:	81a3      	strh	r3, [r4, #12]
 8014da2:	2300      	movs	r3, #0
 8014da4:	6063      	str	r3, [r4, #4]
 8014da6:	6923      	ldr	r3, [r4, #16]
 8014da8:	6023      	str	r3, [r4, #0]
 8014daa:	89a3      	ldrh	r3, [r4, #12]
 8014dac:	f043 0308 	orr.w	r3, r3, #8
 8014db0:	81a3      	strh	r3, [r4, #12]
 8014db2:	6923      	ldr	r3, [r4, #16]
 8014db4:	b94b      	cbnz	r3, 8014dca <__swsetup_r+0x9a>
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014dc0:	d003      	beq.n	8014dca <__swsetup_r+0x9a>
 8014dc2:	4621      	mov	r1, r4
 8014dc4:	4630      	mov	r0, r6
 8014dc6:	f001 f82b 	bl	8015e20 <__smakebuf_r>
 8014dca:	89a2      	ldrh	r2, [r4, #12]
 8014dcc:	f012 0301 	ands.w	r3, r2, #1
 8014dd0:	d00c      	beq.n	8014dec <__swsetup_r+0xbc>
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	60a3      	str	r3, [r4, #8]
 8014dd6:	6963      	ldr	r3, [r4, #20]
 8014dd8:	425b      	negs	r3, r3
 8014dda:	61a3      	str	r3, [r4, #24]
 8014ddc:	6923      	ldr	r3, [r4, #16]
 8014dde:	b953      	cbnz	r3, 8014df6 <__swsetup_r+0xc6>
 8014de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014de4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014de8:	d1ba      	bne.n	8014d60 <__swsetup_r+0x30>
 8014dea:	bd70      	pop	{r4, r5, r6, pc}
 8014dec:	0792      	lsls	r2, r2, #30
 8014dee:	bf58      	it	pl
 8014df0:	6963      	ldrpl	r3, [r4, #20]
 8014df2:	60a3      	str	r3, [r4, #8]
 8014df4:	e7f2      	b.n	8014ddc <__swsetup_r+0xac>
 8014df6:	2000      	movs	r0, #0
 8014df8:	e7f7      	b.n	8014dea <__swsetup_r+0xba>
 8014dfa:	bf00      	nop
 8014dfc:	200001ac 	.word	0x200001ac
 8014e00:	08019db8 	.word	0x08019db8
 8014e04:	08019dd8 	.word	0x08019dd8
 8014e08:	08019d98 	.word	0x08019d98

08014e0c <quorem>:
 8014e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e10:	6903      	ldr	r3, [r0, #16]
 8014e12:	690c      	ldr	r4, [r1, #16]
 8014e14:	429c      	cmp	r4, r3
 8014e16:	4680      	mov	r8, r0
 8014e18:	f300 8082 	bgt.w	8014f20 <quorem+0x114>
 8014e1c:	3c01      	subs	r4, #1
 8014e1e:	f101 0714 	add.w	r7, r1, #20
 8014e22:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8014e26:	f100 0614 	add.w	r6, r0, #20
 8014e2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014e2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014e32:	eb06 030e 	add.w	r3, r6, lr
 8014e36:	3501      	adds	r5, #1
 8014e38:	eb07 090e 	add.w	r9, r7, lr
 8014e3c:	9301      	str	r3, [sp, #4]
 8014e3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8014e42:	b395      	cbz	r5, 8014eaa <quorem+0x9e>
 8014e44:	f04f 0a00 	mov.w	sl, #0
 8014e48:	4638      	mov	r0, r7
 8014e4a:	46b4      	mov	ip, r6
 8014e4c:	46d3      	mov	fp, sl
 8014e4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8014e52:	b293      	uxth	r3, r2
 8014e54:	fb05 a303 	mla	r3, r5, r3, sl
 8014e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e5c:	b29b      	uxth	r3, r3
 8014e5e:	ebab 0303 	sub.w	r3, fp, r3
 8014e62:	0c12      	lsrs	r2, r2, #16
 8014e64:	f8bc b000 	ldrh.w	fp, [ip]
 8014e68:	fb05 a202 	mla	r2, r5, r2, sl
 8014e6c:	fa13 f38b 	uxtah	r3, r3, fp
 8014e70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014e74:	fa1f fb82 	uxth.w	fp, r2
 8014e78:	f8dc 2000 	ldr.w	r2, [ip]
 8014e7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e8a:	4581      	cmp	r9, r0
 8014e8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014e90:	f84c 3b04 	str.w	r3, [ip], #4
 8014e94:	d2db      	bcs.n	8014e4e <quorem+0x42>
 8014e96:	f856 300e 	ldr.w	r3, [r6, lr]
 8014e9a:	b933      	cbnz	r3, 8014eaa <quorem+0x9e>
 8014e9c:	9b01      	ldr	r3, [sp, #4]
 8014e9e:	3b04      	subs	r3, #4
 8014ea0:	429e      	cmp	r6, r3
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	d330      	bcc.n	8014f08 <quorem+0xfc>
 8014ea6:	f8c8 4010 	str.w	r4, [r8, #16]
 8014eaa:	4640      	mov	r0, r8
 8014eac:	f001 fa03 	bl	80162b6 <__mcmp>
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	db25      	blt.n	8014f00 <quorem+0xf4>
 8014eb4:	3501      	adds	r5, #1
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f04f 0e00 	mov.w	lr, #0
 8014ebc:	f857 2b04 	ldr.w	r2, [r7], #4
 8014ec0:	f8d0 c000 	ldr.w	ip, [r0]
 8014ec4:	b293      	uxth	r3, r2
 8014ec6:	ebae 0303 	sub.w	r3, lr, r3
 8014eca:	0c12      	lsrs	r2, r2, #16
 8014ecc:	fa13 f38c 	uxtah	r3, r3, ip
 8014ed0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ede:	45b9      	cmp	r9, r7
 8014ee0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014ee4:	f840 3b04 	str.w	r3, [r0], #4
 8014ee8:	d2e8      	bcs.n	8014ebc <quorem+0xb0>
 8014eea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014eee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014ef2:	b92a      	cbnz	r2, 8014f00 <quorem+0xf4>
 8014ef4:	3b04      	subs	r3, #4
 8014ef6:	429e      	cmp	r6, r3
 8014ef8:	461a      	mov	r2, r3
 8014efa:	d30b      	bcc.n	8014f14 <quorem+0x108>
 8014efc:	f8c8 4010 	str.w	r4, [r8, #16]
 8014f00:	4628      	mov	r0, r5
 8014f02:	b003      	add	sp, #12
 8014f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f08:	6812      	ldr	r2, [r2, #0]
 8014f0a:	3b04      	subs	r3, #4
 8014f0c:	2a00      	cmp	r2, #0
 8014f0e:	d1ca      	bne.n	8014ea6 <quorem+0x9a>
 8014f10:	3c01      	subs	r4, #1
 8014f12:	e7c5      	b.n	8014ea0 <quorem+0x94>
 8014f14:	6812      	ldr	r2, [r2, #0]
 8014f16:	3b04      	subs	r3, #4
 8014f18:	2a00      	cmp	r2, #0
 8014f1a:	d1ef      	bne.n	8014efc <quorem+0xf0>
 8014f1c:	3c01      	subs	r4, #1
 8014f1e:	e7ea      	b.n	8014ef6 <quorem+0xea>
 8014f20:	2000      	movs	r0, #0
 8014f22:	e7ee      	b.n	8014f02 <quorem+0xf6>
 8014f24:	0000      	movs	r0, r0
	...

08014f28 <_dtoa_r>:
 8014f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f2c:	ec57 6b10 	vmov	r6, r7, d0
 8014f30:	b097      	sub	sp, #92	; 0x5c
 8014f32:	e9cd 6700 	strd	r6, r7, [sp]
 8014f36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014f38:	9107      	str	r1, [sp, #28]
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8014f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f40:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014f42:	b93e      	cbnz	r6, 8014f54 <_dtoa_r+0x2c>
 8014f44:	2010      	movs	r0, #16
 8014f46:	f7fe ffa5 	bl	8013e94 <malloc>
 8014f4a:	6260      	str	r0, [r4, #36]	; 0x24
 8014f4c:	6046      	str	r6, [r0, #4]
 8014f4e:	6086      	str	r6, [r0, #8]
 8014f50:	6006      	str	r6, [r0, #0]
 8014f52:	60c6      	str	r6, [r0, #12]
 8014f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f56:	6819      	ldr	r1, [r3, #0]
 8014f58:	b151      	cbz	r1, 8014f70 <_dtoa_r+0x48>
 8014f5a:	685a      	ldr	r2, [r3, #4]
 8014f5c:	604a      	str	r2, [r1, #4]
 8014f5e:	2301      	movs	r3, #1
 8014f60:	4093      	lsls	r3, r2
 8014f62:	608b      	str	r3, [r1, #8]
 8014f64:	4620      	mov	r0, r4
 8014f66:	f000 ffd1 	bl	8015f0c <_Bfree>
 8014f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	601a      	str	r2, [r3, #0]
 8014f70:	9b01      	ldr	r3, [sp, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	bfbf      	itttt	lt
 8014f76:	2301      	movlt	r3, #1
 8014f78:	602b      	strlt	r3, [r5, #0]
 8014f7a:	9b01      	ldrlt	r3, [sp, #4]
 8014f7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014f80:	bfb2      	itee	lt
 8014f82:	9301      	strlt	r3, [sp, #4]
 8014f84:	2300      	movge	r3, #0
 8014f86:	602b      	strge	r3, [r5, #0]
 8014f88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014f8c:	4ba8      	ldr	r3, [pc, #672]	; (8015230 <_dtoa_r+0x308>)
 8014f8e:	ea33 0308 	bics.w	r3, r3, r8
 8014f92:	d11b      	bne.n	8014fcc <_dtoa_r+0xa4>
 8014f94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8014f9a:	6013      	str	r3, [r2, #0]
 8014f9c:	9b00      	ldr	r3, [sp, #0]
 8014f9e:	b923      	cbnz	r3, 8014faa <_dtoa_r+0x82>
 8014fa0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014fa4:	2800      	cmp	r0, #0
 8014fa6:	f000 8578 	beq.w	8015a9a <_dtoa_r+0xb72>
 8014faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fac:	b953      	cbnz	r3, 8014fc4 <_dtoa_r+0x9c>
 8014fae:	4ba1      	ldr	r3, [pc, #644]	; (8015234 <_dtoa_r+0x30c>)
 8014fb0:	e021      	b.n	8014ff6 <_dtoa_r+0xce>
 8014fb2:	4ba1      	ldr	r3, [pc, #644]	; (8015238 <_dtoa_r+0x310>)
 8014fb4:	9302      	str	r3, [sp, #8]
 8014fb6:	3308      	adds	r3, #8
 8014fb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014fba:	6013      	str	r3, [r2, #0]
 8014fbc:	9802      	ldr	r0, [sp, #8]
 8014fbe:	b017      	add	sp, #92	; 0x5c
 8014fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc4:	4b9b      	ldr	r3, [pc, #620]	; (8015234 <_dtoa_r+0x30c>)
 8014fc6:	9302      	str	r3, [sp, #8]
 8014fc8:	3303      	adds	r3, #3
 8014fca:	e7f5      	b.n	8014fb8 <_dtoa_r+0x90>
 8014fcc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	4630      	mov	r0, r6
 8014fd6:	4639      	mov	r1, r7
 8014fd8:	f7eb fda2 	bl	8000b20 <__aeabi_dcmpeq>
 8014fdc:	4681      	mov	r9, r0
 8014fde:	b160      	cbz	r0, 8014ffa <_dtoa_r+0xd2>
 8014fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	6013      	str	r3, [r2, #0]
 8014fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f000 8553 	beq.w	8015a94 <_dtoa_r+0xb6c>
 8014fee:	4b93      	ldr	r3, [pc, #588]	; (801523c <_dtoa_r+0x314>)
 8014ff0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ff2:	6013      	str	r3, [r2, #0]
 8014ff4:	3b01      	subs	r3, #1
 8014ff6:	9302      	str	r3, [sp, #8]
 8014ff8:	e7e0      	b.n	8014fbc <_dtoa_r+0x94>
 8014ffa:	aa14      	add	r2, sp, #80	; 0x50
 8014ffc:	a915      	add	r1, sp, #84	; 0x54
 8014ffe:	ec47 6b10 	vmov	d0, r6, r7
 8015002:	4620      	mov	r0, r4
 8015004:	f001 f9cf 	bl	80163a6 <__d2b>
 8015008:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801500c:	4682      	mov	sl, r0
 801500e:	2d00      	cmp	r5, #0
 8015010:	d07e      	beq.n	8015110 <_dtoa_r+0x1e8>
 8015012:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015016:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801501a:	4630      	mov	r0, r6
 801501c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015020:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015024:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8015028:	2200      	movs	r2, #0
 801502a:	4b85      	ldr	r3, [pc, #532]	; (8015240 <_dtoa_r+0x318>)
 801502c:	f7eb f95c 	bl	80002e8 <__aeabi_dsub>
 8015030:	a379      	add	r3, pc, #484	; (adr r3, 8015218 <_dtoa_r+0x2f0>)
 8015032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015036:	f7eb fb0b 	bl	8000650 <__aeabi_dmul>
 801503a:	a379      	add	r3, pc, #484	; (adr r3, 8015220 <_dtoa_r+0x2f8>)
 801503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015040:	f7eb f954 	bl	80002ec <__adddf3>
 8015044:	4606      	mov	r6, r0
 8015046:	4628      	mov	r0, r5
 8015048:	460f      	mov	r7, r1
 801504a:	f7eb fa9b 	bl	8000584 <__aeabi_i2d>
 801504e:	a376      	add	r3, pc, #472	; (adr r3, 8015228 <_dtoa_r+0x300>)
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	f7eb fafc 	bl	8000650 <__aeabi_dmul>
 8015058:	4602      	mov	r2, r0
 801505a:	460b      	mov	r3, r1
 801505c:	4630      	mov	r0, r6
 801505e:	4639      	mov	r1, r7
 8015060:	f7eb f944 	bl	80002ec <__adddf3>
 8015064:	4606      	mov	r6, r0
 8015066:	460f      	mov	r7, r1
 8015068:	f7eb fda2 	bl	8000bb0 <__aeabi_d2iz>
 801506c:	2200      	movs	r2, #0
 801506e:	4683      	mov	fp, r0
 8015070:	2300      	movs	r3, #0
 8015072:	4630      	mov	r0, r6
 8015074:	4639      	mov	r1, r7
 8015076:	f7eb fd5d 	bl	8000b34 <__aeabi_dcmplt>
 801507a:	b158      	cbz	r0, 8015094 <_dtoa_r+0x16c>
 801507c:	4658      	mov	r0, fp
 801507e:	f7eb fa81 	bl	8000584 <__aeabi_i2d>
 8015082:	4602      	mov	r2, r0
 8015084:	460b      	mov	r3, r1
 8015086:	4630      	mov	r0, r6
 8015088:	4639      	mov	r1, r7
 801508a:	f7eb fd49 	bl	8000b20 <__aeabi_dcmpeq>
 801508e:	b908      	cbnz	r0, 8015094 <_dtoa_r+0x16c>
 8015090:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015094:	f1bb 0f16 	cmp.w	fp, #22
 8015098:	d859      	bhi.n	801514e <_dtoa_r+0x226>
 801509a:	496a      	ldr	r1, [pc, #424]	; (8015244 <_dtoa_r+0x31c>)
 801509c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80150a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80150a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150a8:	f7eb fd62 	bl	8000b70 <__aeabi_dcmpgt>
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d050      	beq.n	8015152 <_dtoa_r+0x22a>
 80150b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150b4:	2300      	movs	r3, #0
 80150b6:	930e      	str	r3, [sp, #56]	; 0x38
 80150b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150ba:	1b5d      	subs	r5, r3, r5
 80150bc:	1e6b      	subs	r3, r5, #1
 80150be:	9306      	str	r3, [sp, #24]
 80150c0:	bf45      	ittet	mi
 80150c2:	f1c5 0301 	rsbmi	r3, r5, #1
 80150c6:	9305      	strmi	r3, [sp, #20]
 80150c8:	2300      	movpl	r3, #0
 80150ca:	2300      	movmi	r3, #0
 80150cc:	bf4c      	ite	mi
 80150ce:	9306      	strmi	r3, [sp, #24]
 80150d0:	9305      	strpl	r3, [sp, #20]
 80150d2:	f1bb 0f00 	cmp.w	fp, #0
 80150d6:	db3e      	blt.n	8015156 <_dtoa_r+0x22e>
 80150d8:	9b06      	ldr	r3, [sp, #24]
 80150da:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80150de:	445b      	add	r3, fp
 80150e0:	9306      	str	r3, [sp, #24]
 80150e2:	2300      	movs	r3, #0
 80150e4:	9308      	str	r3, [sp, #32]
 80150e6:	9b07      	ldr	r3, [sp, #28]
 80150e8:	2b09      	cmp	r3, #9
 80150ea:	f200 80af 	bhi.w	801524c <_dtoa_r+0x324>
 80150ee:	2b05      	cmp	r3, #5
 80150f0:	bfc4      	itt	gt
 80150f2:	3b04      	subgt	r3, #4
 80150f4:	9307      	strgt	r3, [sp, #28]
 80150f6:	9b07      	ldr	r3, [sp, #28]
 80150f8:	f1a3 0302 	sub.w	r3, r3, #2
 80150fc:	bfcc      	ite	gt
 80150fe:	2600      	movgt	r6, #0
 8015100:	2601      	movle	r6, #1
 8015102:	2b03      	cmp	r3, #3
 8015104:	f200 80ae 	bhi.w	8015264 <_dtoa_r+0x33c>
 8015108:	e8df f003 	tbb	[pc, r3]
 801510c:	772f8482 	.word	0x772f8482
 8015110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015112:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015114:	441d      	add	r5, r3
 8015116:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801511a:	2b20      	cmp	r3, #32
 801511c:	dd11      	ble.n	8015142 <_dtoa_r+0x21a>
 801511e:	9a00      	ldr	r2, [sp, #0]
 8015120:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015124:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8015128:	fa22 f000 	lsr.w	r0, r2, r0
 801512c:	fa08 f303 	lsl.w	r3, r8, r3
 8015130:	4318      	orrs	r0, r3
 8015132:	f7eb fa17 	bl	8000564 <__aeabi_ui2d>
 8015136:	2301      	movs	r3, #1
 8015138:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801513c:	3d01      	subs	r5, #1
 801513e:	9312      	str	r3, [sp, #72]	; 0x48
 8015140:	e772      	b.n	8015028 <_dtoa_r+0x100>
 8015142:	f1c3 0020 	rsb	r0, r3, #32
 8015146:	9b00      	ldr	r3, [sp, #0]
 8015148:	fa03 f000 	lsl.w	r0, r3, r0
 801514c:	e7f1      	b.n	8015132 <_dtoa_r+0x20a>
 801514e:	2301      	movs	r3, #1
 8015150:	e7b1      	b.n	80150b6 <_dtoa_r+0x18e>
 8015152:	900e      	str	r0, [sp, #56]	; 0x38
 8015154:	e7b0      	b.n	80150b8 <_dtoa_r+0x190>
 8015156:	9b05      	ldr	r3, [sp, #20]
 8015158:	eba3 030b 	sub.w	r3, r3, fp
 801515c:	9305      	str	r3, [sp, #20]
 801515e:	f1cb 0300 	rsb	r3, fp, #0
 8015162:	9308      	str	r3, [sp, #32]
 8015164:	2300      	movs	r3, #0
 8015166:	930b      	str	r3, [sp, #44]	; 0x2c
 8015168:	e7bd      	b.n	80150e6 <_dtoa_r+0x1be>
 801516a:	2301      	movs	r3, #1
 801516c:	9309      	str	r3, [sp, #36]	; 0x24
 801516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015170:	2b00      	cmp	r3, #0
 8015172:	dd7a      	ble.n	801526a <_dtoa_r+0x342>
 8015174:	9304      	str	r3, [sp, #16]
 8015176:	9303      	str	r3, [sp, #12]
 8015178:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801517a:	2200      	movs	r2, #0
 801517c:	606a      	str	r2, [r5, #4]
 801517e:	2104      	movs	r1, #4
 8015180:	f101 0214 	add.w	r2, r1, #20
 8015184:	429a      	cmp	r2, r3
 8015186:	d975      	bls.n	8015274 <_dtoa_r+0x34c>
 8015188:	6869      	ldr	r1, [r5, #4]
 801518a:	4620      	mov	r0, r4
 801518c:	f000 fe8a 	bl	8015ea4 <_Balloc>
 8015190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015192:	6028      	str	r0, [r5, #0]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	9302      	str	r3, [sp, #8]
 8015198:	9b03      	ldr	r3, [sp, #12]
 801519a:	2b0e      	cmp	r3, #14
 801519c:	f200 80e5 	bhi.w	801536a <_dtoa_r+0x442>
 80151a0:	2e00      	cmp	r6, #0
 80151a2:	f000 80e2 	beq.w	801536a <_dtoa_r+0x442>
 80151a6:	ed9d 7b00 	vldr	d7, [sp]
 80151aa:	f1bb 0f00 	cmp.w	fp, #0
 80151ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80151b2:	dd74      	ble.n	801529e <_dtoa_r+0x376>
 80151b4:	4a23      	ldr	r2, [pc, #140]	; (8015244 <_dtoa_r+0x31c>)
 80151b6:	f00b 030f 	and.w	r3, fp, #15
 80151ba:	ea4f 162b 	mov.w	r6, fp, asr #4
 80151be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80151c2:	06f0      	lsls	r0, r6, #27
 80151c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80151c8:	d559      	bpl.n	801527e <_dtoa_r+0x356>
 80151ca:	4b1f      	ldr	r3, [pc, #124]	; (8015248 <_dtoa_r+0x320>)
 80151cc:	ec51 0b17 	vmov	r0, r1, d7
 80151d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80151d4:	f7eb fb66 	bl	80008a4 <__aeabi_ddiv>
 80151d8:	e9cd 0100 	strd	r0, r1, [sp]
 80151dc:	f006 060f 	and.w	r6, r6, #15
 80151e0:	2503      	movs	r5, #3
 80151e2:	4f19      	ldr	r7, [pc, #100]	; (8015248 <_dtoa_r+0x320>)
 80151e4:	2e00      	cmp	r6, #0
 80151e6:	d14c      	bne.n	8015282 <_dtoa_r+0x35a>
 80151e8:	4642      	mov	r2, r8
 80151ea:	464b      	mov	r3, r9
 80151ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151f0:	f7eb fb58 	bl	80008a4 <__aeabi_ddiv>
 80151f4:	e9cd 0100 	strd	r0, r1, [sp]
 80151f8:	e06a      	b.n	80152d0 <_dtoa_r+0x3a8>
 80151fa:	2301      	movs	r3, #1
 80151fc:	9309      	str	r3, [sp, #36]	; 0x24
 80151fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015200:	445b      	add	r3, fp
 8015202:	9304      	str	r3, [sp, #16]
 8015204:	3301      	adds	r3, #1
 8015206:	2b01      	cmp	r3, #1
 8015208:	9303      	str	r3, [sp, #12]
 801520a:	bfb8      	it	lt
 801520c:	2301      	movlt	r3, #1
 801520e:	e7b3      	b.n	8015178 <_dtoa_r+0x250>
 8015210:	2300      	movs	r3, #0
 8015212:	e7ab      	b.n	801516c <_dtoa_r+0x244>
 8015214:	2300      	movs	r3, #0
 8015216:	e7f1      	b.n	80151fc <_dtoa_r+0x2d4>
 8015218:	636f4361 	.word	0x636f4361
 801521c:	3fd287a7 	.word	0x3fd287a7
 8015220:	8b60c8b3 	.word	0x8b60c8b3
 8015224:	3fc68a28 	.word	0x3fc68a28
 8015228:	509f79fb 	.word	0x509f79fb
 801522c:	3fd34413 	.word	0x3fd34413
 8015230:	7ff00000 	.word	0x7ff00000
 8015234:	08019d94 	.word	0x08019d94
 8015238:	08019d8b 	.word	0x08019d8b
 801523c:	08019c67 	.word	0x08019c67
 8015240:	3ff80000 	.word	0x3ff80000
 8015244:	08019e28 	.word	0x08019e28
 8015248:	08019e00 	.word	0x08019e00
 801524c:	2601      	movs	r6, #1
 801524e:	2300      	movs	r3, #0
 8015250:	9307      	str	r3, [sp, #28]
 8015252:	9609      	str	r6, [sp, #36]	; 0x24
 8015254:	f04f 33ff 	mov.w	r3, #4294967295
 8015258:	9304      	str	r3, [sp, #16]
 801525a:	9303      	str	r3, [sp, #12]
 801525c:	2200      	movs	r2, #0
 801525e:	2312      	movs	r3, #18
 8015260:	920a      	str	r2, [sp, #40]	; 0x28
 8015262:	e789      	b.n	8015178 <_dtoa_r+0x250>
 8015264:	2301      	movs	r3, #1
 8015266:	9309      	str	r3, [sp, #36]	; 0x24
 8015268:	e7f4      	b.n	8015254 <_dtoa_r+0x32c>
 801526a:	2301      	movs	r3, #1
 801526c:	9304      	str	r3, [sp, #16]
 801526e:	9303      	str	r3, [sp, #12]
 8015270:	461a      	mov	r2, r3
 8015272:	e7f5      	b.n	8015260 <_dtoa_r+0x338>
 8015274:	686a      	ldr	r2, [r5, #4]
 8015276:	3201      	adds	r2, #1
 8015278:	606a      	str	r2, [r5, #4]
 801527a:	0049      	lsls	r1, r1, #1
 801527c:	e780      	b.n	8015180 <_dtoa_r+0x258>
 801527e:	2502      	movs	r5, #2
 8015280:	e7af      	b.n	80151e2 <_dtoa_r+0x2ba>
 8015282:	07f1      	lsls	r1, r6, #31
 8015284:	d508      	bpl.n	8015298 <_dtoa_r+0x370>
 8015286:	4640      	mov	r0, r8
 8015288:	4649      	mov	r1, r9
 801528a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801528e:	f7eb f9df 	bl	8000650 <__aeabi_dmul>
 8015292:	3501      	adds	r5, #1
 8015294:	4680      	mov	r8, r0
 8015296:	4689      	mov	r9, r1
 8015298:	1076      	asrs	r6, r6, #1
 801529a:	3708      	adds	r7, #8
 801529c:	e7a2      	b.n	80151e4 <_dtoa_r+0x2bc>
 801529e:	f000 809d 	beq.w	80153dc <_dtoa_r+0x4b4>
 80152a2:	f1cb 0600 	rsb	r6, fp, #0
 80152a6:	4b9f      	ldr	r3, [pc, #636]	; (8015524 <_dtoa_r+0x5fc>)
 80152a8:	4f9f      	ldr	r7, [pc, #636]	; (8015528 <_dtoa_r+0x600>)
 80152aa:	f006 020f 	and.w	r2, r6, #15
 80152ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80152b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80152ba:	f7eb f9c9 	bl	8000650 <__aeabi_dmul>
 80152be:	e9cd 0100 	strd	r0, r1, [sp]
 80152c2:	1136      	asrs	r6, r6, #4
 80152c4:	2300      	movs	r3, #0
 80152c6:	2502      	movs	r5, #2
 80152c8:	2e00      	cmp	r6, #0
 80152ca:	d17c      	bne.n	80153c6 <_dtoa_r+0x49e>
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d191      	bne.n	80151f4 <_dtoa_r+0x2cc>
 80152d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f000 8084 	beq.w	80153e0 <_dtoa_r+0x4b8>
 80152d8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80152dc:	2200      	movs	r2, #0
 80152de:	4b93      	ldr	r3, [pc, #588]	; (801552c <_dtoa_r+0x604>)
 80152e0:	4640      	mov	r0, r8
 80152e2:	4649      	mov	r1, r9
 80152e4:	f7eb fc26 	bl	8000b34 <__aeabi_dcmplt>
 80152e8:	2800      	cmp	r0, #0
 80152ea:	d079      	beq.n	80153e0 <_dtoa_r+0x4b8>
 80152ec:	9b03      	ldr	r3, [sp, #12]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d076      	beq.n	80153e0 <_dtoa_r+0x4b8>
 80152f2:	9b04      	ldr	r3, [sp, #16]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	dd34      	ble.n	8015362 <_dtoa_r+0x43a>
 80152f8:	2200      	movs	r2, #0
 80152fa:	4b8d      	ldr	r3, [pc, #564]	; (8015530 <_dtoa_r+0x608>)
 80152fc:	4640      	mov	r0, r8
 80152fe:	4649      	mov	r1, r9
 8015300:	f7eb f9a6 	bl	8000650 <__aeabi_dmul>
 8015304:	e9cd 0100 	strd	r0, r1, [sp]
 8015308:	9e04      	ldr	r6, [sp, #16]
 801530a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801530e:	3501      	adds	r5, #1
 8015310:	4628      	mov	r0, r5
 8015312:	f7eb f937 	bl	8000584 <__aeabi_i2d>
 8015316:	e9dd 2300 	ldrd	r2, r3, [sp]
 801531a:	f7eb f999 	bl	8000650 <__aeabi_dmul>
 801531e:	2200      	movs	r2, #0
 8015320:	4b84      	ldr	r3, [pc, #528]	; (8015534 <_dtoa_r+0x60c>)
 8015322:	f7ea ffe3 	bl	80002ec <__adddf3>
 8015326:	4680      	mov	r8, r0
 8015328:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801532c:	2e00      	cmp	r6, #0
 801532e:	d15a      	bne.n	80153e6 <_dtoa_r+0x4be>
 8015330:	2200      	movs	r2, #0
 8015332:	4b81      	ldr	r3, [pc, #516]	; (8015538 <_dtoa_r+0x610>)
 8015334:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015338:	f7ea ffd6 	bl	80002e8 <__aeabi_dsub>
 801533c:	4642      	mov	r2, r8
 801533e:	464b      	mov	r3, r9
 8015340:	e9cd 0100 	strd	r0, r1, [sp]
 8015344:	f7eb fc14 	bl	8000b70 <__aeabi_dcmpgt>
 8015348:	2800      	cmp	r0, #0
 801534a:	f040 829b 	bne.w	8015884 <_dtoa_r+0x95c>
 801534e:	4642      	mov	r2, r8
 8015350:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015354:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015358:	f7eb fbec 	bl	8000b34 <__aeabi_dcmplt>
 801535c:	2800      	cmp	r0, #0
 801535e:	f040 828f 	bne.w	8015880 <_dtoa_r+0x958>
 8015362:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015366:	e9cd 2300 	strd	r2, r3, [sp]
 801536a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801536c:	2b00      	cmp	r3, #0
 801536e:	f2c0 8150 	blt.w	8015612 <_dtoa_r+0x6ea>
 8015372:	f1bb 0f0e 	cmp.w	fp, #14
 8015376:	f300 814c 	bgt.w	8015612 <_dtoa_r+0x6ea>
 801537a:	4b6a      	ldr	r3, [pc, #424]	; (8015524 <_dtoa_r+0x5fc>)
 801537c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015380:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015386:	2b00      	cmp	r3, #0
 8015388:	f280 80da 	bge.w	8015540 <_dtoa_r+0x618>
 801538c:	9b03      	ldr	r3, [sp, #12]
 801538e:	2b00      	cmp	r3, #0
 8015390:	f300 80d6 	bgt.w	8015540 <_dtoa_r+0x618>
 8015394:	f040 8273 	bne.w	801587e <_dtoa_r+0x956>
 8015398:	2200      	movs	r2, #0
 801539a:	4b67      	ldr	r3, [pc, #412]	; (8015538 <_dtoa_r+0x610>)
 801539c:	4640      	mov	r0, r8
 801539e:	4649      	mov	r1, r9
 80153a0:	f7eb f956 	bl	8000650 <__aeabi_dmul>
 80153a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153a8:	f7eb fbd8 	bl	8000b5c <__aeabi_dcmpge>
 80153ac:	9e03      	ldr	r6, [sp, #12]
 80153ae:	4637      	mov	r7, r6
 80153b0:	2800      	cmp	r0, #0
 80153b2:	f040 824a 	bne.w	801584a <_dtoa_r+0x922>
 80153b6:	9b02      	ldr	r3, [sp, #8]
 80153b8:	9a02      	ldr	r2, [sp, #8]
 80153ba:	1c5d      	adds	r5, r3, #1
 80153bc:	2331      	movs	r3, #49	; 0x31
 80153be:	7013      	strb	r3, [r2, #0]
 80153c0:	f10b 0b01 	add.w	fp, fp, #1
 80153c4:	e245      	b.n	8015852 <_dtoa_r+0x92a>
 80153c6:	07f2      	lsls	r2, r6, #31
 80153c8:	d505      	bpl.n	80153d6 <_dtoa_r+0x4ae>
 80153ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80153ce:	f7eb f93f 	bl	8000650 <__aeabi_dmul>
 80153d2:	3501      	adds	r5, #1
 80153d4:	2301      	movs	r3, #1
 80153d6:	1076      	asrs	r6, r6, #1
 80153d8:	3708      	adds	r7, #8
 80153da:	e775      	b.n	80152c8 <_dtoa_r+0x3a0>
 80153dc:	2502      	movs	r5, #2
 80153de:	e777      	b.n	80152d0 <_dtoa_r+0x3a8>
 80153e0:	465f      	mov	r7, fp
 80153e2:	9e03      	ldr	r6, [sp, #12]
 80153e4:	e794      	b.n	8015310 <_dtoa_r+0x3e8>
 80153e6:	9a02      	ldr	r2, [sp, #8]
 80153e8:	4b4e      	ldr	r3, [pc, #312]	; (8015524 <_dtoa_r+0x5fc>)
 80153ea:	4432      	add	r2, r6
 80153ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80153ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153f0:	1e71      	subs	r1, r6, #1
 80153f2:	2a00      	cmp	r2, #0
 80153f4:	d048      	beq.n	8015488 <_dtoa_r+0x560>
 80153f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80153fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fe:	2000      	movs	r0, #0
 8015400:	494e      	ldr	r1, [pc, #312]	; (801553c <_dtoa_r+0x614>)
 8015402:	f7eb fa4f 	bl	80008a4 <__aeabi_ddiv>
 8015406:	4642      	mov	r2, r8
 8015408:	464b      	mov	r3, r9
 801540a:	f7ea ff6d 	bl	80002e8 <__aeabi_dsub>
 801540e:	9d02      	ldr	r5, [sp, #8]
 8015410:	4680      	mov	r8, r0
 8015412:	4689      	mov	r9, r1
 8015414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015418:	f7eb fbca 	bl	8000bb0 <__aeabi_d2iz>
 801541c:	4606      	mov	r6, r0
 801541e:	f7eb f8b1 	bl	8000584 <__aeabi_i2d>
 8015422:	4602      	mov	r2, r0
 8015424:	460b      	mov	r3, r1
 8015426:	e9dd 0100 	ldrd	r0, r1, [sp]
 801542a:	f7ea ff5d 	bl	80002e8 <__aeabi_dsub>
 801542e:	3630      	adds	r6, #48	; 0x30
 8015430:	f805 6b01 	strb.w	r6, [r5], #1
 8015434:	4642      	mov	r2, r8
 8015436:	464b      	mov	r3, r9
 8015438:	e9cd 0100 	strd	r0, r1, [sp]
 801543c:	f7eb fb7a 	bl	8000b34 <__aeabi_dcmplt>
 8015440:	2800      	cmp	r0, #0
 8015442:	d165      	bne.n	8015510 <_dtoa_r+0x5e8>
 8015444:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015448:	2000      	movs	r0, #0
 801544a:	4938      	ldr	r1, [pc, #224]	; (801552c <_dtoa_r+0x604>)
 801544c:	f7ea ff4c 	bl	80002e8 <__aeabi_dsub>
 8015450:	4642      	mov	r2, r8
 8015452:	464b      	mov	r3, r9
 8015454:	f7eb fb6e 	bl	8000b34 <__aeabi_dcmplt>
 8015458:	2800      	cmp	r0, #0
 801545a:	f040 80ba 	bne.w	80155d2 <_dtoa_r+0x6aa>
 801545e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015460:	429d      	cmp	r5, r3
 8015462:	f43f af7e 	beq.w	8015362 <_dtoa_r+0x43a>
 8015466:	2200      	movs	r2, #0
 8015468:	4b31      	ldr	r3, [pc, #196]	; (8015530 <_dtoa_r+0x608>)
 801546a:	4640      	mov	r0, r8
 801546c:	4649      	mov	r1, r9
 801546e:	f7eb f8ef 	bl	8000650 <__aeabi_dmul>
 8015472:	2200      	movs	r2, #0
 8015474:	4680      	mov	r8, r0
 8015476:	4689      	mov	r9, r1
 8015478:	4b2d      	ldr	r3, [pc, #180]	; (8015530 <_dtoa_r+0x608>)
 801547a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801547e:	f7eb f8e7 	bl	8000650 <__aeabi_dmul>
 8015482:	e9cd 0100 	strd	r0, r1, [sp]
 8015486:	e7c5      	b.n	8015414 <_dtoa_r+0x4ec>
 8015488:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801548c:	4642      	mov	r2, r8
 801548e:	464b      	mov	r3, r9
 8015490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015494:	f7eb f8dc 	bl	8000650 <__aeabi_dmul>
 8015498:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801549c:	9d02      	ldr	r5, [sp, #8]
 801549e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154a2:	f7eb fb85 	bl	8000bb0 <__aeabi_d2iz>
 80154a6:	4606      	mov	r6, r0
 80154a8:	f7eb f86c 	bl	8000584 <__aeabi_i2d>
 80154ac:	3630      	adds	r6, #48	; 0x30
 80154ae:	4602      	mov	r2, r0
 80154b0:	460b      	mov	r3, r1
 80154b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154b6:	f7ea ff17 	bl	80002e8 <__aeabi_dsub>
 80154ba:	f805 6b01 	strb.w	r6, [r5], #1
 80154be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154c0:	42ab      	cmp	r3, r5
 80154c2:	4680      	mov	r8, r0
 80154c4:	4689      	mov	r9, r1
 80154c6:	f04f 0200 	mov.w	r2, #0
 80154ca:	d125      	bne.n	8015518 <_dtoa_r+0x5f0>
 80154cc:	4b1b      	ldr	r3, [pc, #108]	; (801553c <_dtoa_r+0x614>)
 80154ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80154d2:	f7ea ff0b 	bl	80002ec <__adddf3>
 80154d6:	4602      	mov	r2, r0
 80154d8:	460b      	mov	r3, r1
 80154da:	4640      	mov	r0, r8
 80154dc:	4649      	mov	r1, r9
 80154de:	f7eb fb47 	bl	8000b70 <__aeabi_dcmpgt>
 80154e2:	2800      	cmp	r0, #0
 80154e4:	d175      	bne.n	80155d2 <_dtoa_r+0x6aa>
 80154e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80154ea:	2000      	movs	r0, #0
 80154ec:	4913      	ldr	r1, [pc, #76]	; (801553c <_dtoa_r+0x614>)
 80154ee:	f7ea fefb 	bl	80002e8 <__aeabi_dsub>
 80154f2:	4602      	mov	r2, r0
 80154f4:	460b      	mov	r3, r1
 80154f6:	4640      	mov	r0, r8
 80154f8:	4649      	mov	r1, r9
 80154fa:	f7eb fb1b 	bl	8000b34 <__aeabi_dcmplt>
 80154fe:	2800      	cmp	r0, #0
 8015500:	f43f af2f 	beq.w	8015362 <_dtoa_r+0x43a>
 8015504:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015508:	2b30      	cmp	r3, #48	; 0x30
 801550a:	f105 32ff 	add.w	r2, r5, #4294967295
 801550e:	d001      	beq.n	8015514 <_dtoa_r+0x5ec>
 8015510:	46bb      	mov	fp, r7
 8015512:	e04d      	b.n	80155b0 <_dtoa_r+0x688>
 8015514:	4615      	mov	r5, r2
 8015516:	e7f5      	b.n	8015504 <_dtoa_r+0x5dc>
 8015518:	4b05      	ldr	r3, [pc, #20]	; (8015530 <_dtoa_r+0x608>)
 801551a:	f7eb f899 	bl	8000650 <__aeabi_dmul>
 801551e:	e9cd 0100 	strd	r0, r1, [sp]
 8015522:	e7bc      	b.n	801549e <_dtoa_r+0x576>
 8015524:	08019e28 	.word	0x08019e28
 8015528:	08019e00 	.word	0x08019e00
 801552c:	3ff00000 	.word	0x3ff00000
 8015530:	40240000 	.word	0x40240000
 8015534:	401c0000 	.word	0x401c0000
 8015538:	40140000 	.word	0x40140000
 801553c:	3fe00000 	.word	0x3fe00000
 8015540:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015544:	9d02      	ldr	r5, [sp, #8]
 8015546:	4642      	mov	r2, r8
 8015548:	464b      	mov	r3, r9
 801554a:	4630      	mov	r0, r6
 801554c:	4639      	mov	r1, r7
 801554e:	f7eb f9a9 	bl	80008a4 <__aeabi_ddiv>
 8015552:	f7eb fb2d 	bl	8000bb0 <__aeabi_d2iz>
 8015556:	9000      	str	r0, [sp, #0]
 8015558:	f7eb f814 	bl	8000584 <__aeabi_i2d>
 801555c:	4642      	mov	r2, r8
 801555e:	464b      	mov	r3, r9
 8015560:	f7eb f876 	bl	8000650 <__aeabi_dmul>
 8015564:	4602      	mov	r2, r0
 8015566:	460b      	mov	r3, r1
 8015568:	4630      	mov	r0, r6
 801556a:	4639      	mov	r1, r7
 801556c:	f7ea febc 	bl	80002e8 <__aeabi_dsub>
 8015570:	9e00      	ldr	r6, [sp, #0]
 8015572:	9f03      	ldr	r7, [sp, #12]
 8015574:	3630      	adds	r6, #48	; 0x30
 8015576:	f805 6b01 	strb.w	r6, [r5], #1
 801557a:	9e02      	ldr	r6, [sp, #8]
 801557c:	1bae      	subs	r6, r5, r6
 801557e:	42b7      	cmp	r7, r6
 8015580:	4602      	mov	r2, r0
 8015582:	460b      	mov	r3, r1
 8015584:	d138      	bne.n	80155f8 <_dtoa_r+0x6d0>
 8015586:	f7ea feb1 	bl	80002ec <__adddf3>
 801558a:	4606      	mov	r6, r0
 801558c:	460f      	mov	r7, r1
 801558e:	4602      	mov	r2, r0
 8015590:	460b      	mov	r3, r1
 8015592:	4640      	mov	r0, r8
 8015594:	4649      	mov	r1, r9
 8015596:	f7eb facd 	bl	8000b34 <__aeabi_dcmplt>
 801559a:	b9c8      	cbnz	r0, 80155d0 <_dtoa_r+0x6a8>
 801559c:	4632      	mov	r2, r6
 801559e:	463b      	mov	r3, r7
 80155a0:	4640      	mov	r0, r8
 80155a2:	4649      	mov	r1, r9
 80155a4:	f7eb fabc 	bl	8000b20 <__aeabi_dcmpeq>
 80155a8:	b110      	cbz	r0, 80155b0 <_dtoa_r+0x688>
 80155aa:	9b00      	ldr	r3, [sp, #0]
 80155ac:	07db      	lsls	r3, r3, #31
 80155ae:	d40f      	bmi.n	80155d0 <_dtoa_r+0x6a8>
 80155b0:	4651      	mov	r1, sl
 80155b2:	4620      	mov	r0, r4
 80155b4:	f000 fcaa 	bl	8015f0c <_Bfree>
 80155b8:	2300      	movs	r3, #0
 80155ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80155bc:	702b      	strb	r3, [r5, #0]
 80155be:	f10b 0301 	add.w	r3, fp, #1
 80155c2:	6013      	str	r3, [r2, #0]
 80155c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f43f acf8 	beq.w	8014fbc <_dtoa_r+0x94>
 80155cc:	601d      	str	r5, [r3, #0]
 80155ce:	e4f5      	b.n	8014fbc <_dtoa_r+0x94>
 80155d0:	465f      	mov	r7, fp
 80155d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80155d6:	2a39      	cmp	r2, #57	; 0x39
 80155d8:	f105 33ff 	add.w	r3, r5, #4294967295
 80155dc:	d106      	bne.n	80155ec <_dtoa_r+0x6c4>
 80155de:	9a02      	ldr	r2, [sp, #8]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d107      	bne.n	80155f4 <_dtoa_r+0x6cc>
 80155e4:	2330      	movs	r3, #48	; 0x30
 80155e6:	7013      	strb	r3, [r2, #0]
 80155e8:	3701      	adds	r7, #1
 80155ea:	4613      	mov	r3, r2
 80155ec:	781a      	ldrb	r2, [r3, #0]
 80155ee:	3201      	adds	r2, #1
 80155f0:	701a      	strb	r2, [r3, #0]
 80155f2:	e78d      	b.n	8015510 <_dtoa_r+0x5e8>
 80155f4:	461d      	mov	r5, r3
 80155f6:	e7ec      	b.n	80155d2 <_dtoa_r+0x6aa>
 80155f8:	2200      	movs	r2, #0
 80155fa:	4ba4      	ldr	r3, [pc, #656]	; (801588c <_dtoa_r+0x964>)
 80155fc:	f7eb f828 	bl	8000650 <__aeabi_dmul>
 8015600:	2200      	movs	r2, #0
 8015602:	2300      	movs	r3, #0
 8015604:	4606      	mov	r6, r0
 8015606:	460f      	mov	r7, r1
 8015608:	f7eb fa8a 	bl	8000b20 <__aeabi_dcmpeq>
 801560c:	2800      	cmp	r0, #0
 801560e:	d09a      	beq.n	8015546 <_dtoa_r+0x61e>
 8015610:	e7ce      	b.n	80155b0 <_dtoa_r+0x688>
 8015612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015614:	2a00      	cmp	r2, #0
 8015616:	f000 80cd 	beq.w	80157b4 <_dtoa_r+0x88c>
 801561a:	9a07      	ldr	r2, [sp, #28]
 801561c:	2a01      	cmp	r2, #1
 801561e:	f300 80af 	bgt.w	8015780 <_dtoa_r+0x858>
 8015622:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015624:	2a00      	cmp	r2, #0
 8015626:	f000 80a7 	beq.w	8015778 <_dtoa_r+0x850>
 801562a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801562e:	9e08      	ldr	r6, [sp, #32]
 8015630:	9d05      	ldr	r5, [sp, #20]
 8015632:	9a05      	ldr	r2, [sp, #20]
 8015634:	441a      	add	r2, r3
 8015636:	9205      	str	r2, [sp, #20]
 8015638:	9a06      	ldr	r2, [sp, #24]
 801563a:	2101      	movs	r1, #1
 801563c:	441a      	add	r2, r3
 801563e:	4620      	mov	r0, r4
 8015640:	9206      	str	r2, [sp, #24]
 8015642:	f000 fd03 	bl	801604c <__i2b>
 8015646:	4607      	mov	r7, r0
 8015648:	2d00      	cmp	r5, #0
 801564a:	dd0c      	ble.n	8015666 <_dtoa_r+0x73e>
 801564c:	9b06      	ldr	r3, [sp, #24]
 801564e:	2b00      	cmp	r3, #0
 8015650:	dd09      	ble.n	8015666 <_dtoa_r+0x73e>
 8015652:	42ab      	cmp	r3, r5
 8015654:	9a05      	ldr	r2, [sp, #20]
 8015656:	bfa8      	it	ge
 8015658:	462b      	movge	r3, r5
 801565a:	1ad2      	subs	r2, r2, r3
 801565c:	9205      	str	r2, [sp, #20]
 801565e:	9a06      	ldr	r2, [sp, #24]
 8015660:	1aed      	subs	r5, r5, r3
 8015662:	1ad3      	subs	r3, r2, r3
 8015664:	9306      	str	r3, [sp, #24]
 8015666:	9b08      	ldr	r3, [sp, #32]
 8015668:	b1f3      	cbz	r3, 80156a8 <_dtoa_r+0x780>
 801566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801566c:	2b00      	cmp	r3, #0
 801566e:	f000 80a5 	beq.w	80157bc <_dtoa_r+0x894>
 8015672:	2e00      	cmp	r6, #0
 8015674:	dd10      	ble.n	8015698 <_dtoa_r+0x770>
 8015676:	4639      	mov	r1, r7
 8015678:	4632      	mov	r2, r6
 801567a:	4620      	mov	r0, r4
 801567c:	f000 fd7c 	bl	8016178 <__pow5mult>
 8015680:	4652      	mov	r2, sl
 8015682:	4601      	mov	r1, r0
 8015684:	4607      	mov	r7, r0
 8015686:	4620      	mov	r0, r4
 8015688:	f000 fce9 	bl	801605e <__multiply>
 801568c:	4651      	mov	r1, sl
 801568e:	4680      	mov	r8, r0
 8015690:	4620      	mov	r0, r4
 8015692:	f000 fc3b 	bl	8015f0c <_Bfree>
 8015696:	46c2      	mov	sl, r8
 8015698:	9b08      	ldr	r3, [sp, #32]
 801569a:	1b9a      	subs	r2, r3, r6
 801569c:	d004      	beq.n	80156a8 <_dtoa_r+0x780>
 801569e:	4651      	mov	r1, sl
 80156a0:	4620      	mov	r0, r4
 80156a2:	f000 fd69 	bl	8016178 <__pow5mult>
 80156a6:	4682      	mov	sl, r0
 80156a8:	2101      	movs	r1, #1
 80156aa:	4620      	mov	r0, r4
 80156ac:	f000 fcce 	bl	801604c <__i2b>
 80156b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	4606      	mov	r6, r0
 80156b6:	f340 8083 	ble.w	80157c0 <_dtoa_r+0x898>
 80156ba:	461a      	mov	r2, r3
 80156bc:	4601      	mov	r1, r0
 80156be:	4620      	mov	r0, r4
 80156c0:	f000 fd5a 	bl	8016178 <__pow5mult>
 80156c4:	9b07      	ldr	r3, [sp, #28]
 80156c6:	2b01      	cmp	r3, #1
 80156c8:	4606      	mov	r6, r0
 80156ca:	dd7c      	ble.n	80157c6 <_dtoa_r+0x89e>
 80156cc:	f04f 0800 	mov.w	r8, #0
 80156d0:	6933      	ldr	r3, [r6, #16]
 80156d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80156d6:	6918      	ldr	r0, [r3, #16]
 80156d8:	f000 fc6a 	bl	8015fb0 <__hi0bits>
 80156dc:	f1c0 0020 	rsb	r0, r0, #32
 80156e0:	9b06      	ldr	r3, [sp, #24]
 80156e2:	4418      	add	r0, r3
 80156e4:	f010 001f 	ands.w	r0, r0, #31
 80156e8:	f000 8096 	beq.w	8015818 <_dtoa_r+0x8f0>
 80156ec:	f1c0 0320 	rsb	r3, r0, #32
 80156f0:	2b04      	cmp	r3, #4
 80156f2:	f340 8087 	ble.w	8015804 <_dtoa_r+0x8dc>
 80156f6:	9b05      	ldr	r3, [sp, #20]
 80156f8:	f1c0 001c 	rsb	r0, r0, #28
 80156fc:	4403      	add	r3, r0
 80156fe:	9305      	str	r3, [sp, #20]
 8015700:	9b06      	ldr	r3, [sp, #24]
 8015702:	4405      	add	r5, r0
 8015704:	4403      	add	r3, r0
 8015706:	9306      	str	r3, [sp, #24]
 8015708:	9b05      	ldr	r3, [sp, #20]
 801570a:	2b00      	cmp	r3, #0
 801570c:	dd05      	ble.n	801571a <_dtoa_r+0x7f2>
 801570e:	4651      	mov	r1, sl
 8015710:	461a      	mov	r2, r3
 8015712:	4620      	mov	r0, r4
 8015714:	f000 fd7e 	bl	8016214 <__lshift>
 8015718:	4682      	mov	sl, r0
 801571a:	9b06      	ldr	r3, [sp, #24]
 801571c:	2b00      	cmp	r3, #0
 801571e:	dd05      	ble.n	801572c <_dtoa_r+0x804>
 8015720:	4631      	mov	r1, r6
 8015722:	461a      	mov	r2, r3
 8015724:	4620      	mov	r0, r4
 8015726:	f000 fd75 	bl	8016214 <__lshift>
 801572a:	4606      	mov	r6, r0
 801572c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801572e:	2b00      	cmp	r3, #0
 8015730:	d074      	beq.n	801581c <_dtoa_r+0x8f4>
 8015732:	4631      	mov	r1, r6
 8015734:	4650      	mov	r0, sl
 8015736:	f000 fdbe 	bl	80162b6 <__mcmp>
 801573a:	2800      	cmp	r0, #0
 801573c:	da6e      	bge.n	801581c <_dtoa_r+0x8f4>
 801573e:	2300      	movs	r3, #0
 8015740:	4651      	mov	r1, sl
 8015742:	220a      	movs	r2, #10
 8015744:	4620      	mov	r0, r4
 8015746:	f000 fbf8 	bl	8015f3a <__multadd>
 801574a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801574c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015750:	4682      	mov	sl, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	f000 81a8 	beq.w	8015aa8 <_dtoa_r+0xb80>
 8015758:	2300      	movs	r3, #0
 801575a:	4639      	mov	r1, r7
 801575c:	220a      	movs	r2, #10
 801575e:	4620      	mov	r0, r4
 8015760:	f000 fbeb 	bl	8015f3a <__multadd>
 8015764:	9b04      	ldr	r3, [sp, #16]
 8015766:	2b00      	cmp	r3, #0
 8015768:	4607      	mov	r7, r0
 801576a:	f300 80c8 	bgt.w	80158fe <_dtoa_r+0x9d6>
 801576e:	9b07      	ldr	r3, [sp, #28]
 8015770:	2b02      	cmp	r3, #2
 8015772:	f340 80c4 	ble.w	80158fe <_dtoa_r+0x9d6>
 8015776:	e059      	b.n	801582c <_dtoa_r+0x904>
 8015778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801577a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801577e:	e756      	b.n	801562e <_dtoa_r+0x706>
 8015780:	9b03      	ldr	r3, [sp, #12]
 8015782:	1e5e      	subs	r6, r3, #1
 8015784:	9b08      	ldr	r3, [sp, #32]
 8015786:	42b3      	cmp	r3, r6
 8015788:	bfbf      	itttt	lt
 801578a:	9b08      	ldrlt	r3, [sp, #32]
 801578c:	9608      	strlt	r6, [sp, #32]
 801578e:	1af2      	sublt	r2, r6, r3
 8015790:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8015792:	bfb6      	itet	lt
 8015794:	189b      	addlt	r3, r3, r2
 8015796:	1b9e      	subge	r6, r3, r6
 8015798:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801579a:	9b03      	ldr	r3, [sp, #12]
 801579c:	bfb8      	it	lt
 801579e:	2600      	movlt	r6, #0
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	bfb9      	ittee	lt
 80157a4:	9b05      	ldrlt	r3, [sp, #20]
 80157a6:	9a03      	ldrlt	r2, [sp, #12]
 80157a8:	9d05      	ldrge	r5, [sp, #20]
 80157aa:	9b03      	ldrge	r3, [sp, #12]
 80157ac:	bfbc      	itt	lt
 80157ae:	1a9d      	sublt	r5, r3, r2
 80157b0:	2300      	movlt	r3, #0
 80157b2:	e73e      	b.n	8015632 <_dtoa_r+0x70a>
 80157b4:	9e08      	ldr	r6, [sp, #32]
 80157b6:	9d05      	ldr	r5, [sp, #20]
 80157b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80157ba:	e745      	b.n	8015648 <_dtoa_r+0x720>
 80157bc:	9a08      	ldr	r2, [sp, #32]
 80157be:	e76e      	b.n	801569e <_dtoa_r+0x776>
 80157c0:	9b07      	ldr	r3, [sp, #28]
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	dc19      	bgt.n	80157fa <_dtoa_r+0x8d2>
 80157c6:	9b00      	ldr	r3, [sp, #0]
 80157c8:	b9bb      	cbnz	r3, 80157fa <_dtoa_r+0x8d2>
 80157ca:	9b01      	ldr	r3, [sp, #4]
 80157cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157d0:	b99b      	cbnz	r3, 80157fa <_dtoa_r+0x8d2>
 80157d2:	9b01      	ldr	r3, [sp, #4]
 80157d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80157d8:	0d1b      	lsrs	r3, r3, #20
 80157da:	051b      	lsls	r3, r3, #20
 80157dc:	b183      	cbz	r3, 8015800 <_dtoa_r+0x8d8>
 80157de:	9b05      	ldr	r3, [sp, #20]
 80157e0:	3301      	adds	r3, #1
 80157e2:	9305      	str	r3, [sp, #20]
 80157e4:	9b06      	ldr	r3, [sp, #24]
 80157e6:	3301      	adds	r3, #1
 80157e8:	9306      	str	r3, [sp, #24]
 80157ea:	f04f 0801 	mov.w	r8, #1
 80157ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	f47f af6d 	bne.w	80156d0 <_dtoa_r+0x7a8>
 80157f6:	2001      	movs	r0, #1
 80157f8:	e772      	b.n	80156e0 <_dtoa_r+0x7b8>
 80157fa:	f04f 0800 	mov.w	r8, #0
 80157fe:	e7f6      	b.n	80157ee <_dtoa_r+0x8c6>
 8015800:	4698      	mov	r8, r3
 8015802:	e7f4      	b.n	80157ee <_dtoa_r+0x8c6>
 8015804:	d080      	beq.n	8015708 <_dtoa_r+0x7e0>
 8015806:	9a05      	ldr	r2, [sp, #20]
 8015808:	331c      	adds	r3, #28
 801580a:	441a      	add	r2, r3
 801580c:	9205      	str	r2, [sp, #20]
 801580e:	9a06      	ldr	r2, [sp, #24]
 8015810:	441a      	add	r2, r3
 8015812:	441d      	add	r5, r3
 8015814:	4613      	mov	r3, r2
 8015816:	e776      	b.n	8015706 <_dtoa_r+0x7de>
 8015818:	4603      	mov	r3, r0
 801581a:	e7f4      	b.n	8015806 <_dtoa_r+0x8de>
 801581c:	9b03      	ldr	r3, [sp, #12]
 801581e:	2b00      	cmp	r3, #0
 8015820:	dc36      	bgt.n	8015890 <_dtoa_r+0x968>
 8015822:	9b07      	ldr	r3, [sp, #28]
 8015824:	2b02      	cmp	r3, #2
 8015826:	dd33      	ble.n	8015890 <_dtoa_r+0x968>
 8015828:	9b03      	ldr	r3, [sp, #12]
 801582a:	9304      	str	r3, [sp, #16]
 801582c:	9b04      	ldr	r3, [sp, #16]
 801582e:	b963      	cbnz	r3, 801584a <_dtoa_r+0x922>
 8015830:	4631      	mov	r1, r6
 8015832:	2205      	movs	r2, #5
 8015834:	4620      	mov	r0, r4
 8015836:	f000 fb80 	bl	8015f3a <__multadd>
 801583a:	4601      	mov	r1, r0
 801583c:	4606      	mov	r6, r0
 801583e:	4650      	mov	r0, sl
 8015840:	f000 fd39 	bl	80162b6 <__mcmp>
 8015844:	2800      	cmp	r0, #0
 8015846:	f73f adb6 	bgt.w	80153b6 <_dtoa_r+0x48e>
 801584a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801584c:	9d02      	ldr	r5, [sp, #8]
 801584e:	ea6f 0b03 	mvn.w	fp, r3
 8015852:	2300      	movs	r3, #0
 8015854:	9303      	str	r3, [sp, #12]
 8015856:	4631      	mov	r1, r6
 8015858:	4620      	mov	r0, r4
 801585a:	f000 fb57 	bl	8015f0c <_Bfree>
 801585e:	2f00      	cmp	r7, #0
 8015860:	f43f aea6 	beq.w	80155b0 <_dtoa_r+0x688>
 8015864:	9b03      	ldr	r3, [sp, #12]
 8015866:	b12b      	cbz	r3, 8015874 <_dtoa_r+0x94c>
 8015868:	42bb      	cmp	r3, r7
 801586a:	d003      	beq.n	8015874 <_dtoa_r+0x94c>
 801586c:	4619      	mov	r1, r3
 801586e:	4620      	mov	r0, r4
 8015870:	f000 fb4c 	bl	8015f0c <_Bfree>
 8015874:	4639      	mov	r1, r7
 8015876:	4620      	mov	r0, r4
 8015878:	f000 fb48 	bl	8015f0c <_Bfree>
 801587c:	e698      	b.n	80155b0 <_dtoa_r+0x688>
 801587e:	2600      	movs	r6, #0
 8015880:	4637      	mov	r7, r6
 8015882:	e7e2      	b.n	801584a <_dtoa_r+0x922>
 8015884:	46bb      	mov	fp, r7
 8015886:	4637      	mov	r7, r6
 8015888:	e595      	b.n	80153b6 <_dtoa_r+0x48e>
 801588a:	bf00      	nop
 801588c:	40240000 	.word	0x40240000
 8015890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015892:	bb93      	cbnz	r3, 80158fa <_dtoa_r+0x9d2>
 8015894:	9b03      	ldr	r3, [sp, #12]
 8015896:	9304      	str	r3, [sp, #16]
 8015898:	9d02      	ldr	r5, [sp, #8]
 801589a:	4631      	mov	r1, r6
 801589c:	4650      	mov	r0, sl
 801589e:	f7ff fab5 	bl	8014e0c <quorem>
 80158a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80158a6:	f805 9b01 	strb.w	r9, [r5], #1
 80158aa:	9b02      	ldr	r3, [sp, #8]
 80158ac:	9a04      	ldr	r2, [sp, #16]
 80158ae:	1aeb      	subs	r3, r5, r3
 80158b0:	429a      	cmp	r2, r3
 80158b2:	f300 80dc 	bgt.w	8015a6e <_dtoa_r+0xb46>
 80158b6:	9b02      	ldr	r3, [sp, #8]
 80158b8:	2a01      	cmp	r2, #1
 80158ba:	bfac      	ite	ge
 80158bc:	189b      	addge	r3, r3, r2
 80158be:	3301      	addlt	r3, #1
 80158c0:	4698      	mov	r8, r3
 80158c2:	2300      	movs	r3, #0
 80158c4:	9303      	str	r3, [sp, #12]
 80158c6:	4651      	mov	r1, sl
 80158c8:	2201      	movs	r2, #1
 80158ca:	4620      	mov	r0, r4
 80158cc:	f000 fca2 	bl	8016214 <__lshift>
 80158d0:	4631      	mov	r1, r6
 80158d2:	4682      	mov	sl, r0
 80158d4:	f000 fcef 	bl	80162b6 <__mcmp>
 80158d8:	2800      	cmp	r0, #0
 80158da:	f300 808d 	bgt.w	80159f8 <_dtoa_r+0xad0>
 80158de:	d103      	bne.n	80158e8 <_dtoa_r+0x9c0>
 80158e0:	f019 0f01 	tst.w	r9, #1
 80158e4:	f040 8088 	bne.w	80159f8 <_dtoa_r+0xad0>
 80158e8:	4645      	mov	r5, r8
 80158ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80158ee:	2b30      	cmp	r3, #48	; 0x30
 80158f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80158f4:	d1af      	bne.n	8015856 <_dtoa_r+0x92e>
 80158f6:	4615      	mov	r5, r2
 80158f8:	e7f7      	b.n	80158ea <_dtoa_r+0x9c2>
 80158fa:	9b03      	ldr	r3, [sp, #12]
 80158fc:	9304      	str	r3, [sp, #16]
 80158fe:	2d00      	cmp	r5, #0
 8015900:	dd05      	ble.n	801590e <_dtoa_r+0x9e6>
 8015902:	4639      	mov	r1, r7
 8015904:	462a      	mov	r2, r5
 8015906:	4620      	mov	r0, r4
 8015908:	f000 fc84 	bl	8016214 <__lshift>
 801590c:	4607      	mov	r7, r0
 801590e:	f1b8 0f00 	cmp.w	r8, #0
 8015912:	d04c      	beq.n	80159ae <_dtoa_r+0xa86>
 8015914:	6879      	ldr	r1, [r7, #4]
 8015916:	4620      	mov	r0, r4
 8015918:	f000 fac4 	bl	8015ea4 <_Balloc>
 801591c:	693a      	ldr	r2, [r7, #16]
 801591e:	3202      	adds	r2, #2
 8015920:	4605      	mov	r5, r0
 8015922:	0092      	lsls	r2, r2, #2
 8015924:	f107 010c 	add.w	r1, r7, #12
 8015928:	300c      	adds	r0, #12
 801592a:	f7fe fad5 	bl	8013ed8 <memcpy>
 801592e:	2201      	movs	r2, #1
 8015930:	4629      	mov	r1, r5
 8015932:	4620      	mov	r0, r4
 8015934:	f000 fc6e 	bl	8016214 <__lshift>
 8015938:	9b00      	ldr	r3, [sp, #0]
 801593a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801593e:	9703      	str	r7, [sp, #12]
 8015940:	f003 0301 	and.w	r3, r3, #1
 8015944:	4607      	mov	r7, r0
 8015946:	9305      	str	r3, [sp, #20]
 8015948:	4631      	mov	r1, r6
 801594a:	4650      	mov	r0, sl
 801594c:	f7ff fa5e 	bl	8014e0c <quorem>
 8015950:	9903      	ldr	r1, [sp, #12]
 8015952:	4605      	mov	r5, r0
 8015954:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015958:	4650      	mov	r0, sl
 801595a:	f000 fcac 	bl	80162b6 <__mcmp>
 801595e:	463a      	mov	r2, r7
 8015960:	9000      	str	r0, [sp, #0]
 8015962:	4631      	mov	r1, r6
 8015964:	4620      	mov	r0, r4
 8015966:	f000 fcc0 	bl	80162ea <__mdiff>
 801596a:	68c3      	ldr	r3, [r0, #12]
 801596c:	4602      	mov	r2, r0
 801596e:	bb03      	cbnz	r3, 80159b2 <_dtoa_r+0xa8a>
 8015970:	4601      	mov	r1, r0
 8015972:	9006      	str	r0, [sp, #24]
 8015974:	4650      	mov	r0, sl
 8015976:	f000 fc9e 	bl	80162b6 <__mcmp>
 801597a:	9a06      	ldr	r2, [sp, #24]
 801597c:	4603      	mov	r3, r0
 801597e:	4611      	mov	r1, r2
 8015980:	4620      	mov	r0, r4
 8015982:	9306      	str	r3, [sp, #24]
 8015984:	f000 fac2 	bl	8015f0c <_Bfree>
 8015988:	9b06      	ldr	r3, [sp, #24]
 801598a:	b9a3      	cbnz	r3, 80159b6 <_dtoa_r+0xa8e>
 801598c:	9a07      	ldr	r2, [sp, #28]
 801598e:	b992      	cbnz	r2, 80159b6 <_dtoa_r+0xa8e>
 8015990:	9a05      	ldr	r2, [sp, #20]
 8015992:	b982      	cbnz	r2, 80159b6 <_dtoa_r+0xa8e>
 8015994:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015998:	d029      	beq.n	80159ee <_dtoa_r+0xac6>
 801599a:	9b00      	ldr	r3, [sp, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	dd01      	ble.n	80159a4 <_dtoa_r+0xa7c>
 80159a0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80159a4:	f108 0501 	add.w	r5, r8, #1
 80159a8:	f888 9000 	strb.w	r9, [r8]
 80159ac:	e753      	b.n	8015856 <_dtoa_r+0x92e>
 80159ae:	4638      	mov	r0, r7
 80159b0:	e7c2      	b.n	8015938 <_dtoa_r+0xa10>
 80159b2:	2301      	movs	r3, #1
 80159b4:	e7e3      	b.n	801597e <_dtoa_r+0xa56>
 80159b6:	9a00      	ldr	r2, [sp, #0]
 80159b8:	2a00      	cmp	r2, #0
 80159ba:	db04      	blt.n	80159c6 <_dtoa_r+0xa9e>
 80159bc:	d125      	bne.n	8015a0a <_dtoa_r+0xae2>
 80159be:	9a07      	ldr	r2, [sp, #28]
 80159c0:	bb1a      	cbnz	r2, 8015a0a <_dtoa_r+0xae2>
 80159c2:	9a05      	ldr	r2, [sp, #20]
 80159c4:	bb0a      	cbnz	r2, 8015a0a <_dtoa_r+0xae2>
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	ddec      	ble.n	80159a4 <_dtoa_r+0xa7c>
 80159ca:	4651      	mov	r1, sl
 80159cc:	2201      	movs	r2, #1
 80159ce:	4620      	mov	r0, r4
 80159d0:	f000 fc20 	bl	8016214 <__lshift>
 80159d4:	4631      	mov	r1, r6
 80159d6:	4682      	mov	sl, r0
 80159d8:	f000 fc6d 	bl	80162b6 <__mcmp>
 80159dc:	2800      	cmp	r0, #0
 80159de:	dc03      	bgt.n	80159e8 <_dtoa_r+0xac0>
 80159e0:	d1e0      	bne.n	80159a4 <_dtoa_r+0xa7c>
 80159e2:	f019 0f01 	tst.w	r9, #1
 80159e6:	d0dd      	beq.n	80159a4 <_dtoa_r+0xa7c>
 80159e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80159ec:	d1d8      	bne.n	80159a0 <_dtoa_r+0xa78>
 80159ee:	2339      	movs	r3, #57	; 0x39
 80159f0:	f888 3000 	strb.w	r3, [r8]
 80159f4:	f108 0801 	add.w	r8, r8, #1
 80159f8:	4645      	mov	r5, r8
 80159fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80159fe:	2b39      	cmp	r3, #57	; 0x39
 8015a00:	f105 32ff 	add.w	r2, r5, #4294967295
 8015a04:	d03b      	beq.n	8015a7e <_dtoa_r+0xb56>
 8015a06:	3301      	adds	r3, #1
 8015a08:	e040      	b.n	8015a8c <_dtoa_r+0xb64>
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	f108 0501 	add.w	r5, r8, #1
 8015a10:	dd05      	ble.n	8015a1e <_dtoa_r+0xaf6>
 8015a12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015a16:	d0ea      	beq.n	80159ee <_dtoa_r+0xac6>
 8015a18:	f109 0901 	add.w	r9, r9, #1
 8015a1c:	e7c4      	b.n	80159a8 <_dtoa_r+0xa80>
 8015a1e:	9b02      	ldr	r3, [sp, #8]
 8015a20:	9a04      	ldr	r2, [sp, #16]
 8015a22:	f805 9c01 	strb.w	r9, [r5, #-1]
 8015a26:	1aeb      	subs	r3, r5, r3
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	46a8      	mov	r8, r5
 8015a2c:	f43f af4b 	beq.w	80158c6 <_dtoa_r+0x99e>
 8015a30:	4651      	mov	r1, sl
 8015a32:	2300      	movs	r3, #0
 8015a34:	220a      	movs	r2, #10
 8015a36:	4620      	mov	r0, r4
 8015a38:	f000 fa7f 	bl	8015f3a <__multadd>
 8015a3c:	9b03      	ldr	r3, [sp, #12]
 8015a3e:	9903      	ldr	r1, [sp, #12]
 8015a40:	42bb      	cmp	r3, r7
 8015a42:	4682      	mov	sl, r0
 8015a44:	f04f 0300 	mov.w	r3, #0
 8015a48:	f04f 020a 	mov.w	r2, #10
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	d104      	bne.n	8015a5a <_dtoa_r+0xb32>
 8015a50:	f000 fa73 	bl	8015f3a <__multadd>
 8015a54:	9003      	str	r0, [sp, #12]
 8015a56:	4607      	mov	r7, r0
 8015a58:	e776      	b.n	8015948 <_dtoa_r+0xa20>
 8015a5a:	f000 fa6e 	bl	8015f3a <__multadd>
 8015a5e:	2300      	movs	r3, #0
 8015a60:	9003      	str	r0, [sp, #12]
 8015a62:	220a      	movs	r2, #10
 8015a64:	4639      	mov	r1, r7
 8015a66:	4620      	mov	r0, r4
 8015a68:	f000 fa67 	bl	8015f3a <__multadd>
 8015a6c:	e7f3      	b.n	8015a56 <_dtoa_r+0xb2e>
 8015a6e:	4651      	mov	r1, sl
 8015a70:	2300      	movs	r3, #0
 8015a72:	220a      	movs	r2, #10
 8015a74:	4620      	mov	r0, r4
 8015a76:	f000 fa60 	bl	8015f3a <__multadd>
 8015a7a:	4682      	mov	sl, r0
 8015a7c:	e70d      	b.n	801589a <_dtoa_r+0x972>
 8015a7e:	9b02      	ldr	r3, [sp, #8]
 8015a80:	4293      	cmp	r3, r2
 8015a82:	d105      	bne.n	8015a90 <_dtoa_r+0xb68>
 8015a84:	9a02      	ldr	r2, [sp, #8]
 8015a86:	f10b 0b01 	add.w	fp, fp, #1
 8015a8a:	2331      	movs	r3, #49	; 0x31
 8015a8c:	7013      	strb	r3, [r2, #0]
 8015a8e:	e6e2      	b.n	8015856 <_dtoa_r+0x92e>
 8015a90:	4615      	mov	r5, r2
 8015a92:	e7b2      	b.n	80159fa <_dtoa_r+0xad2>
 8015a94:	4b09      	ldr	r3, [pc, #36]	; (8015abc <_dtoa_r+0xb94>)
 8015a96:	f7ff baae 	b.w	8014ff6 <_dtoa_r+0xce>
 8015a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	f47f aa88 	bne.w	8014fb2 <_dtoa_r+0x8a>
 8015aa2:	4b07      	ldr	r3, [pc, #28]	; (8015ac0 <_dtoa_r+0xb98>)
 8015aa4:	f7ff baa7 	b.w	8014ff6 <_dtoa_r+0xce>
 8015aa8:	9b04      	ldr	r3, [sp, #16]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f73f aef4 	bgt.w	8015898 <_dtoa_r+0x970>
 8015ab0:	9b07      	ldr	r3, [sp, #28]
 8015ab2:	2b02      	cmp	r3, #2
 8015ab4:	f77f aef0 	ble.w	8015898 <_dtoa_r+0x970>
 8015ab8:	e6b8      	b.n	801582c <_dtoa_r+0x904>
 8015aba:	bf00      	nop
 8015abc:	08019c66 	.word	0x08019c66
 8015ac0:	08019d8b 	.word	0x08019d8b

08015ac4 <__sflush_r>:
 8015ac4:	898a      	ldrh	r2, [r1, #12]
 8015ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aca:	4605      	mov	r5, r0
 8015acc:	0710      	lsls	r0, r2, #28
 8015ace:	460c      	mov	r4, r1
 8015ad0:	d45a      	bmi.n	8015b88 <__sflush_r+0xc4>
 8015ad2:	684b      	ldr	r3, [r1, #4]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	dc05      	bgt.n	8015ae4 <__sflush_r+0x20>
 8015ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	dc02      	bgt.n	8015ae4 <__sflush_r+0x20>
 8015ade:	2000      	movs	r0, #0
 8015ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ae6:	2e00      	cmp	r6, #0
 8015ae8:	d0f9      	beq.n	8015ade <__sflush_r+0x1a>
 8015aea:	2300      	movs	r3, #0
 8015aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015af0:	682f      	ldr	r7, [r5, #0]
 8015af2:	602b      	str	r3, [r5, #0]
 8015af4:	d033      	beq.n	8015b5e <__sflush_r+0x9a>
 8015af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015af8:	89a3      	ldrh	r3, [r4, #12]
 8015afa:	075a      	lsls	r2, r3, #29
 8015afc:	d505      	bpl.n	8015b0a <__sflush_r+0x46>
 8015afe:	6863      	ldr	r3, [r4, #4]
 8015b00:	1ac0      	subs	r0, r0, r3
 8015b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b04:	b10b      	cbz	r3, 8015b0a <__sflush_r+0x46>
 8015b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b08:	1ac0      	subs	r0, r0, r3
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b10:	6a21      	ldr	r1, [r4, #32]
 8015b12:	4628      	mov	r0, r5
 8015b14:	47b0      	blx	r6
 8015b16:	1c43      	adds	r3, r0, #1
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	d106      	bne.n	8015b2a <__sflush_r+0x66>
 8015b1c:	6829      	ldr	r1, [r5, #0]
 8015b1e:	291d      	cmp	r1, #29
 8015b20:	d84b      	bhi.n	8015bba <__sflush_r+0xf6>
 8015b22:	4a2b      	ldr	r2, [pc, #172]	; (8015bd0 <__sflush_r+0x10c>)
 8015b24:	40ca      	lsrs	r2, r1
 8015b26:	07d6      	lsls	r6, r2, #31
 8015b28:	d547      	bpl.n	8015bba <__sflush_r+0xf6>
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	6062      	str	r2, [r4, #4]
 8015b2e:	04d9      	lsls	r1, r3, #19
 8015b30:	6922      	ldr	r2, [r4, #16]
 8015b32:	6022      	str	r2, [r4, #0]
 8015b34:	d504      	bpl.n	8015b40 <__sflush_r+0x7c>
 8015b36:	1c42      	adds	r2, r0, #1
 8015b38:	d101      	bne.n	8015b3e <__sflush_r+0x7a>
 8015b3a:	682b      	ldr	r3, [r5, #0]
 8015b3c:	b903      	cbnz	r3, 8015b40 <__sflush_r+0x7c>
 8015b3e:	6560      	str	r0, [r4, #84]	; 0x54
 8015b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b42:	602f      	str	r7, [r5, #0]
 8015b44:	2900      	cmp	r1, #0
 8015b46:	d0ca      	beq.n	8015ade <__sflush_r+0x1a>
 8015b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b4c:	4299      	cmp	r1, r3
 8015b4e:	d002      	beq.n	8015b56 <__sflush_r+0x92>
 8015b50:	4628      	mov	r0, r5
 8015b52:	f7fe f9d5 	bl	8013f00 <_free_r>
 8015b56:	2000      	movs	r0, #0
 8015b58:	6360      	str	r0, [r4, #52]	; 0x34
 8015b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b5e:	6a21      	ldr	r1, [r4, #32]
 8015b60:	2301      	movs	r3, #1
 8015b62:	4628      	mov	r0, r5
 8015b64:	47b0      	blx	r6
 8015b66:	1c41      	adds	r1, r0, #1
 8015b68:	d1c6      	bne.n	8015af8 <__sflush_r+0x34>
 8015b6a:	682b      	ldr	r3, [r5, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d0c3      	beq.n	8015af8 <__sflush_r+0x34>
 8015b70:	2b1d      	cmp	r3, #29
 8015b72:	d001      	beq.n	8015b78 <__sflush_r+0xb4>
 8015b74:	2b16      	cmp	r3, #22
 8015b76:	d101      	bne.n	8015b7c <__sflush_r+0xb8>
 8015b78:	602f      	str	r7, [r5, #0]
 8015b7a:	e7b0      	b.n	8015ade <__sflush_r+0x1a>
 8015b7c:	89a3      	ldrh	r3, [r4, #12]
 8015b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b82:	81a3      	strh	r3, [r4, #12]
 8015b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b88:	690f      	ldr	r7, [r1, #16]
 8015b8a:	2f00      	cmp	r7, #0
 8015b8c:	d0a7      	beq.n	8015ade <__sflush_r+0x1a>
 8015b8e:	0793      	lsls	r3, r2, #30
 8015b90:	680e      	ldr	r6, [r1, #0]
 8015b92:	bf08      	it	eq
 8015b94:	694b      	ldreq	r3, [r1, #20]
 8015b96:	600f      	str	r7, [r1, #0]
 8015b98:	bf18      	it	ne
 8015b9a:	2300      	movne	r3, #0
 8015b9c:	eba6 0807 	sub.w	r8, r6, r7
 8015ba0:	608b      	str	r3, [r1, #8]
 8015ba2:	f1b8 0f00 	cmp.w	r8, #0
 8015ba6:	dd9a      	ble.n	8015ade <__sflush_r+0x1a>
 8015ba8:	4643      	mov	r3, r8
 8015baa:	463a      	mov	r2, r7
 8015bac:	6a21      	ldr	r1, [r4, #32]
 8015bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	47b0      	blx	r6
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	dc07      	bgt.n	8015bc8 <__sflush_r+0x104>
 8015bb8:	89a3      	ldrh	r3, [r4, #12]
 8015bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bbe:	81a3      	strh	r3, [r4, #12]
 8015bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bc8:	4407      	add	r7, r0
 8015bca:	eba8 0800 	sub.w	r8, r8, r0
 8015bce:	e7e8      	b.n	8015ba2 <__sflush_r+0xde>
 8015bd0:	20400001 	.word	0x20400001

08015bd4 <_fflush_r>:
 8015bd4:	b538      	push	{r3, r4, r5, lr}
 8015bd6:	690b      	ldr	r3, [r1, #16]
 8015bd8:	4605      	mov	r5, r0
 8015bda:	460c      	mov	r4, r1
 8015bdc:	b1db      	cbz	r3, 8015c16 <_fflush_r+0x42>
 8015bde:	b118      	cbz	r0, 8015be8 <_fflush_r+0x14>
 8015be0:	6983      	ldr	r3, [r0, #24]
 8015be2:	b90b      	cbnz	r3, 8015be8 <_fflush_r+0x14>
 8015be4:	f000 f860 	bl	8015ca8 <__sinit>
 8015be8:	4b0c      	ldr	r3, [pc, #48]	; (8015c1c <_fflush_r+0x48>)
 8015bea:	429c      	cmp	r4, r3
 8015bec:	d109      	bne.n	8015c02 <_fflush_r+0x2e>
 8015bee:	686c      	ldr	r4, [r5, #4]
 8015bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bf4:	b17b      	cbz	r3, 8015c16 <_fflush_r+0x42>
 8015bf6:	4621      	mov	r1, r4
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bfe:	f7ff bf61 	b.w	8015ac4 <__sflush_r>
 8015c02:	4b07      	ldr	r3, [pc, #28]	; (8015c20 <_fflush_r+0x4c>)
 8015c04:	429c      	cmp	r4, r3
 8015c06:	d101      	bne.n	8015c0c <_fflush_r+0x38>
 8015c08:	68ac      	ldr	r4, [r5, #8]
 8015c0a:	e7f1      	b.n	8015bf0 <_fflush_r+0x1c>
 8015c0c:	4b05      	ldr	r3, [pc, #20]	; (8015c24 <_fflush_r+0x50>)
 8015c0e:	429c      	cmp	r4, r3
 8015c10:	bf08      	it	eq
 8015c12:	68ec      	ldreq	r4, [r5, #12]
 8015c14:	e7ec      	b.n	8015bf0 <_fflush_r+0x1c>
 8015c16:	2000      	movs	r0, #0
 8015c18:	bd38      	pop	{r3, r4, r5, pc}
 8015c1a:	bf00      	nop
 8015c1c:	08019db8 	.word	0x08019db8
 8015c20:	08019dd8 	.word	0x08019dd8
 8015c24:	08019d98 	.word	0x08019d98

08015c28 <_cleanup_r>:
 8015c28:	4901      	ldr	r1, [pc, #4]	; (8015c30 <_cleanup_r+0x8>)
 8015c2a:	f000 b8a9 	b.w	8015d80 <_fwalk_reent>
 8015c2e:	bf00      	nop
 8015c30:	08015bd5 	.word	0x08015bd5

08015c34 <std.isra.0>:
 8015c34:	2300      	movs	r3, #0
 8015c36:	b510      	push	{r4, lr}
 8015c38:	4604      	mov	r4, r0
 8015c3a:	6003      	str	r3, [r0, #0]
 8015c3c:	6043      	str	r3, [r0, #4]
 8015c3e:	6083      	str	r3, [r0, #8]
 8015c40:	8181      	strh	r1, [r0, #12]
 8015c42:	6643      	str	r3, [r0, #100]	; 0x64
 8015c44:	81c2      	strh	r2, [r0, #14]
 8015c46:	6103      	str	r3, [r0, #16]
 8015c48:	6143      	str	r3, [r0, #20]
 8015c4a:	6183      	str	r3, [r0, #24]
 8015c4c:	4619      	mov	r1, r3
 8015c4e:	2208      	movs	r2, #8
 8015c50:	305c      	adds	r0, #92	; 0x5c
 8015c52:	f7fe f94c 	bl	8013eee <memset>
 8015c56:	4b05      	ldr	r3, [pc, #20]	; (8015c6c <std.isra.0+0x38>)
 8015c58:	6263      	str	r3, [r4, #36]	; 0x24
 8015c5a:	4b05      	ldr	r3, [pc, #20]	; (8015c70 <std.isra.0+0x3c>)
 8015c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015c5e:	4b05      	ldr	r3, [pc, #20]	; (8015c74 <std.isra.0+0x40>)
 8015c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015c62:	4b05      	ldr	r3, [pc, #20]	; (8015c78 <std.isra.0+0x44>)
 8015c64:	6224      	str	r4, [r4, #32]
 8015c66:	6323      	str	r3, [r4, #48]	; 0x30
 8015c68:	bd10      	pop	{r4, pc}
 8015c6a:	bf00      	nop
 8015c6c:	080169cd 	.word	0x080169cd
 8015c70:	080169ef 	.word	0x080169ef
 8015c74:	08016a27 	.word	0x08016a27
 8015c78:	08016a4b 	.word	0x08016a4b

08015c7c <__sfmoreglue>:
 8015c7c:	b570      	push	{r4, r5, r6, lr}
 8015c7e:	1e4a      	subs	r2, r1, #1
 8015c80:	2568      	movs	r5, #104	; 0x68
 8015c82:	4355      	muls	r5, r2
 8015c84:	460e      	mov	r6, r1
 8015c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015c8a:	f7fe f987 	bl	8013f9c <_malloc_r>
 8015c8e:	4604      	mov	r4, r0
 8015c90:	b140      	cbz	r0, 8015ca4 <__sfmoreglue+0x28>
 8015c92:	2100      	movs	r1, #0
 8015c94:	e880 0042 	stmia.w	r0, {r1, r6}
 8015c98:	300c      	adds	r0, #12
 8015c9a:	60a0      	str	r0, [r4, #8]
 8015c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ca0:	f7fe f925 	bl	8013eee <memset>
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	bd70      	pop	{r4, r5, r6, pc}

08015ca8 <__sinit>:
 8015ca8:	6983      	ldr	r3, [r0, #24]
 8015caa:	b510      	push	{r4, lr}
 8015cac:	4604      	mov	r4, r0
 8015cae:	bb33      	cbnz	r3, 8015cfe <__sinit+0x56>
 8015cb0:	6483      	str	r3, [r0, #72]	; 0x48
 8015cb2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8015cb4:	6503      	str	r3, [r0, #80]	; 0x50
 8015cb6:	4b12      	ldr	r3, [pc, #72]	; (8015d00 <__sinit+0x58>)
 8015cb8:	4a12      	ldr	r2, [pc, #72]	; (8015d04 <__sinit+0x5c>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	6282      	str	r2, [r0, #40]	; 0x28
 8015cbe:	4298      	cmp	r0, r3
 8015cc0:	bf04      	itt	eq
 8015cc2:	2301      	moveq	r3, #1
 8015cc4:	6183      	streq	r3, [r0, #24]
 8015cc6:	f000 f81f 	bl	8015d08 <__sfp>
 8015cca:	6060      	str	r0, [r4, #4]
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f000 f81b 	bl	8015d08 <__sfp>
 8015cd2:	60a0      	str	r0, [r4, #8]
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	f000 f817 	bl	8015d08 <__sfp>
 8015cda:	2200      	movs	r2, #0
 8015cdc:	60e0      	str	r0, [r4, #12]
 8015cde:	2104      	movs	r1, #4
 8015ce0:	6860      	ldr	r0, [r4, #4]
 8015ce2:	f7ff ffa7 	bl	8015c34 <std.isra.0>
 8015ce6:	2201      	movs	r2, #1
 8015ce8:	2109      	movs	r1, #9
 8015cea:	68a0      	ldr	r0, [r4, #8]
 8015cec:	f7ff ffa2 	bl	8015c34 <std.isra.0>
 8015cf0:	2202      	movs	r2, #2
 8015cf2:	2112      	movs	r1, #18
 8015cf4:	68e0      	ldr	r0, [r4, #12]
 8015cf6:	f7ff ff9d 	bl	8015c34 <std.isra.0>
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	61a3      	str	r3, [r4, #24]
 8015cfe:	bd10      	pop	{r4, pc}
 8015d00:	08019df8 	.word	0x08019df8
 8015d04:	08015c29 	.word	0x08015c29

08015d08 <__sfp>:
 8015d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d0a:	4b1c      	ldr	r3, [pc, #112]	; (8015d7c <__sfp+0x74>)
 8015d0c:	681e      	ldr	r6, [r3, #0]
 8015d0e:	69b3      	ldr	r3, [r6, #24]
 8015d10:	4607      	mov	r7, r0
 8015d12:	b913      	cbnz	r3, 8015d1a <__sfp+0x12>
 8015d14:	4630      	mov	r0, r6
 8015d16:	f7ff ffc7 	bl	8015ca8 <__sinit>
 8015d1a:	3648      	adds	r6, #72	; 0x48
 8015d1c:	68b4      	ldr	r4, [r6, #8]
 8015d1e:	6873      	ldr	r3, [r6, #4]
 8015d20:	3b01      	subs	r3, #1
 8015d22:	d503      	bpl.n	8015d2c <__sfp+0x24>
 8015d24:	6833      	ldr	r3, [r6, #0]
 8015d26:	b133      	cbz	r3, 8015d36 <__sfp+0x2e>
 8015d28:	6836      	ldr	r6, [r6, #0]
 8015d2a:	e7f7      	b.n	8015d1c <__sfp+0x14>
 8015d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015d30:	b16d      	cbz	r5, 8015d4e <__sfp+0x46>
 8015d32:	3468      	adds	r4, #104	; 0x68
 8015d34:	e7f4      	b.n	8015d20 <__sfp+0x18>
 8015d36:	2104      	movs	r1, #4
 8015d38:	4638      	mov	r0, r7
 8015d3a:	f7ff ff9f 	bl	8015c7c <__sfmoreglue>
 8015d3e:	6030      	str	r0, [r6, #0]
 8015d40:	2800      	cmp	r0, #0
 8015d42:	d1f1      	bne.n	8015d28 <__sfp+0x20>
 8015d44:	230c      	movs	r3, #12
 8015d46:	603b      	str	r3, [r7, #0]
 8015d48:	4604      	mov	r4, r0
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d52:	81e3      	strh	r3, [r4, #14]
 8015d54:	2301      	movs	r3, #1
 8015d56:	81a3      	strh	r3, [r4, #12]
 8015d58:	6665      	str	r5, [r4, #100]	; 0x64
 8015d5a:	6025      	str	r5, [r4, #0]
 8015d5c:	60a5      	str	r5, [r4, #8]
 8015d5e:	6065      	str	r5, [r4, #4]
 8015d60:	6125      	str	r5, [r4, #16]
 8015d62:	6165      	str	r5, [r4, #20]
 8015d64:	61a5      	str	r5, [r4, #24]
 8015d66:	2208      	movs	r2, #8
 8015d68:	4629      	mov	r1, r5
 8015d6a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015d6e:	f7fe f8be 	bl	8013eee <memset>
 8015d72:	6365      	str	r5, [r4, #52]	; 0x34
 8015d74:	63a5      	str	r5, [r4, #56]	; 0x38
 8015d76:	64a5      	str	r5, [r4, #72]	; 0x48
 8015d78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8015d7a:	e7e6      	b.n	8015d4a <__sfp+0x42>
 8015d7c:	08019df8 	.word	0x08019df8

08015d80 <_fwalk_reent>:
 8015d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d84:	4680      	mov	r8, r0
 8015d86:	4689      	mov	r9, r1
 8015d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015d8c:	2600      	movs	r6, #0
 8015d8e:	b914      	cbnz	r4, 8015d96 <_fwalk_reent+0x16>
 8015d90:	4630      	mov	r0, r6
 8015d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d96:	68a5      	ldr	r5, [r4, #8]
 8015d98:	6867      	ldr	r7, [r4, #4]
 8015d9a:	3f01      	subs	r7, #1
 8015d9c:	d501      	bpl.n	8015da2 <_fwalk_reent+0x22>
 8015d9e:	6824      	ldr	r4, [r4, #0]
 8015da0:	e7f5      	b.n	8015d8e <_fwalk_reent+0xe>
 8015da2:	89ab      	ldrh	r3, [r5, #12]
 8015da4:	2b01      	cmp	r3, #1
 8015da6:	d907      	bls.n	8015db8 <_fwalk_reent+0x38>
 8015da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015dac:	3301      	adds	r3, #1
 8015dae:	d003      	beq.n	8015db8 <_fwalk_reent+0x38>
 8015db0:	4629      	mov	r1, r5
 8015db2:	4640      	mov	r0, r8
 8015db4:	47c8      	blx	r9
 8015db6:	4306      	orrs	r6, r0
 8015db8:	3568      	adds	r5, #104	; 0x68
 8015dba:	e7ee      	b.n	8015d9a <_fwalk_reent+0x1a>

08015dbc <_localeconv_r>:
 8015dbc:	4b04      	ldr	r3, [pc, #16]	; (8015dd0 <_localeconv_r+0x14>)
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	6a18      	ldr	r0, [r3, #32]
 8015dc2:	4b04      	ldr	r3, [pc, #16]	; (8015dd4 <_localeconv_r+0x18>)
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	bf08      	it	eq
 8015dc8:	4618      	moveq	r0, r3
 8015dca:	30f0      	adds	r0, #240	; 0xf0
 8015dcc:	4770      	bx	lr
 8015dce:	bf00      	nop
 8015dd0:	200001ac 	.word	0x200001ac
 8015dd4:	20000040 	.word	0x20000040

08015dd8 <__swhatbuf_r>:
 8015dd8:	b570      	push	{r4, r5, r6, lr}
 8015dda:	460e      	mov	r6, r1
 8015ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015de0:	2900      	cmp	r1, #0
 8015de2:	b090      	sub	sp, #64	; 0x40
 8015de4:	4614      	mov	r4, r2
 8015de6:	461d      	mov	r5, r3
 8015de8:	da07      	bge.n	8015dfa <__swhatbuf_r+0x22>
 8015dea:	2300      	movs	r3, #0
 8015dec:	602b      	str	r3, [r5, #0]
 8015dee:	89b3      	ldrh	r3, [r6, #12]
 8015df0:	061a      	lsls	r2, r3, #24
 8015df2:	d410      	bmi.n	8015e16 <__swhatbuf_r+0x3e>
 8015df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015df8:	e00e      	b.n	8015e18 <__swhatbuf_r+0x40>
 8015dfa:	aa01      	add	r2, sp, #4
 8015dfc:	f000 fe4c 	bl	8016a98 <_fstat_r>
 8015e00:	2800      	cmp	r0, #0
 8015e02:	dbf2      	blt.n	8015dea <__swhatbuf_r+0x12>
 8015e04:	9a02      	ldr	r2, [sp, #8]
 8015e06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015e0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015e0e:	425a      	negs	r2, r3
 8015e10:	415a      	adcs	r2, r3
 8015e12:	602a      	str	r2, [r5, #0]
 8015e14:	e7ee      	b.n	8015df4 <__swhatbuf_r+0x1c>
 8015e16:	2340      	movs	r3, #64	; 0x40
 8015e18:	2000      	movs	r0, #0
 8015e1a:	6023      	str	r3, [r4, #0]
 8015e1c:	b010      	add	sp, #64	; 0x40
 8015e1e:	bd70      	pop	{r4, r5, r6, pc}

08015e20 <__smakebuf_r>:
 8015e20:	898b      	ldrh	r3, [r1, #12]
 8015e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e24:	079d      	lsls	r5, r3, #30
 8015e26:	4606      	mov	r6, r0
 8015e28:	460c      	mov	r4, r1
 8015e2a:	d507      	bpl.n	8015e3c <__smakebuf_r+0x1c>
 8015e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015e30:	6023      	str	r3, [r4, #0]
 8015e32:	6123      	str	r3, [r4, #16]
 8015e34:	2301      	movs	r3, #1
 8015e36:	6163      	str	r3, [r4, #20]
 8015e38:	b002      	add	sp, #8
 8015e3a:	bd70      	pop	{r4, r5, r6, pc}
 8015e3c:	ab01      	add	r3, sp, #4
 8015e3e:	466a      	mov	r2, sp
 8015e40:	f7ff ffca 	bl	8015dd8 <__swhatbuf_r>
 8015e44:	9900      	ldr	r1, [sp, #0]
 8015e46:	4605      	mov	r5, r0
 8015e48:	4630      	mov	r0, r6
 8015e4a:	f7fe f8a7 	bl	8013f9c <_malloc_r>
 8015e4e:	b948      	cbnz	r0, 8015e64 <__smakebuf_r+0x44>
 8015e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e54:	059a      	lsls	r2, r3, #22
 8015e56:	d4ef      	bmi.n	8015e38 <__smakebuf_r+0x18>
 8015e58:	f023 0303 	bic.w	r3, r3, #3
 8015e5c:	f043 0302 	orr.w	r3, r3, #2
 8015e60:	81a3      	strh	r3, [r4, #12]
 8015e62:	e7e3      	b.n	8015e2c <__smakebuf_r+0xc>
 8015e64:	4b0d      	ldr	r3, [pc, #52]	; (8015e9c <__smakebuf_r+0x7c>)
 8015e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8015e68:	89a3      	ldrh	r3, [r4, #12]
 8015e6a:	6020      	str	r0, [r4, #0]
 8015e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e70:	81a3      	strh	r3, [r4, #12]
 8015e72:	9b00      	ldr	r3, [sp, #0]
 8015e74:	6163      	str	r3, [r4, #20]
 8015e76:	9b01      	ldr	r3, [sp, #4]
 8015e78:	6120      	str	r0, [r4, #16]
 8015e7a:	b15b      	cbz	r3, 8015e94 <__smakebuf_r+0x74>
 8015e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e80:	4630      	mov	r0, r6
 8015e82:	f000 fe1b 	bl	8016abc <_isatty_r>
 8015e86:	b128      	cbz	r0, 8015e94 <__smakebuf_r+0x74>
 8015e88:	89a3      	ldrh	r3, [r4, #12]
 8015e8a:	f023 0303 	bic.w	r3, r3, #3
 8015e8e:	f043 0301 	orr.w	r3, r3, #1
 8015e92:	81a3      	strh	r3, [r4, #12]
 8015e94:	89a3      	ldrh	r3, [r4, #12]
 8015e96:	431d      	orrs	r5, r3
 8015e98:	81a5      	strh	r5, [r4, #12]
 8015e9a:	e7cd      	b.n	8015e38 <__smakebuf_r+0x18>
 8015e9c:	08015c29 	.word	0x08015c29

08015ea0 <__malloc_lock>:
 8015ea0:	4770      	bx	lr

08015ea2 <__malloc_unlock>:
 8015ea2:	4770      	bx	lr

08015ea4 <_Balloc>:
 8015ea4:	b570      	push	{r4, r5, r6, lr}
 8015ea6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015ea8:	4604      	mov	r4, r0
 8015eaa:	460e      	mov	r6, r1
 8015eac:	b93d      	cbnz	r5, 8015ebe <_Balloc+0x1a>
 8015eae:	2010      	movs	r0, #16
 8015eb0:	f7fd fff0 	bl	8013e94 <malloc>
 8015eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8015eb6:	6045      	str	r5, [r0, #4]
 8015eb8:	6085      	str	r5, [r0, #8]
 8015eba:	6005      	str	r5, [r0, #0]
 8015ebc:	60c5      	str	r5, [r0, #12]
 8015ebe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015ec0:	68eb      	ldr	r3, [r5, #12]
 8015ec2:	b183      	cbz	r3, 8015ee6 <_Balloc+0x42>
 8015ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ec6:	68db      	ldr	r3, [r3, #12]
 8015ec8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015ecc:	b9b8      	cbnz	r0, 8015efe <_Balloc+0x5a>
 8015ece:	2101      	movs	r1, #1
 8015ed0:	fa01 f506 	lsl.w	r5, r1, r6
 8015ed4:	1d6a      	adds	r2, r5, #5
 8015ed6:	0092      	lsls	r2, r2, #2
 8015ed8:	4620      	mov	r0, r4
 8015eda:	f000 fab3 	bl	8016444 <_calloc_r>
 8015ede:	b160      	cbz	r0, 8015efa <_Balloc+0x56>
 8015ee0:	6046      	str	r6, [r0, #4]
 8015ee2:	6085      	str	r5, [r0, #8]
 8015ee4:	e00e      	b.n	8015f04 <_Balloc+0x60>
 8015ee6:	2221      	movs	r2, #33	; 0x21
 8015ee8:	2104      	movs	r1, #4
 8015eea:	4620      	mov	r0, r4
 8015eec:	f000 faaa 	bl	8016444 <_calloc_r>
 8015ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ef2:	60e8      	str	r0, [r5, #12]
 8015ef4:	68db      	ldr	r3, [r3, #12]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d1e4      	bne.n	8015ec4 <_Balloc+0x20>
 8015efa:	2000      	movs	r0, #0
 8015efc:	bd70      	pop	{r4, r5, r6, pc}
 8015efe:	6802      	ldr	r2, [r0, #0]
 8015f00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015f04:	2300      	movs	r3, #0
 8015f06:	6103      	str	r3, [r0, #16]
 8015f08:	60c3      	str	r3, [r0, #12]
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}

08015f0c <_Bfree>:
 8015f0c:	b570      	push	{r4, r5, r6, lr}
 8015f0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015f10:	4606      	mov	r6, r0
 8015f12:	460d      	mov	r5, r1
 8015f14:	b93c      	cbnz	r4, 8015f26 <_Bfree+0x1a>
 8015f16:	2010      	movs	r0, #16
 8015f18:	f7fd ffbc 	bl	8013e94 <malloc>
 8015f1c:	6270      	str	r0, [r6, #36]	; 0x24
 8015f1e:	6044      	str	r4, [r0, #4]
 8015f20:	6084      	str	r4, [r0, #8]
 8015f22:	6004      	str	r4, [r0, #0]
 8015f24:	60c4      	str	r4, [r0, #12]
 8015f26:	b13d      	cbz	r5, 8015f38 <_Bfree+0x2c>
 8015f28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015f2a:	686a      	ldr	r2, [r5, #4]
 8015f2c:	68db      	ldr	r3, [r3, #12]
 8015f2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015f32:	6029      	str	r1, [r5, #0]
 8015f34:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015f38:	bd70      	pop	{r4, r5, r6, pc}

08015f3a <__multadd>:
 8015f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f3e:	690d      	ldr	r5, [r1, #16]
 8015f40:	461f      	mov	r7, r3
 8015f42:	4606      	mov	r6, r0
 8015f44:	460c      	mov	r4, r1
 8015f46:	f101 0e14 	add.w	lr, r1, #20
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	f8de 0000 	ldr.w	r0, [lr]
 8015f50:	b281      	uxth	r1, r0
 8015f52:	fb02 7101 	mla	r1, r2, r1, r7
 8015f56:	0c0f      	lsrs	r7, r1, #16
 8015f58:	0c00      	lsrs	r0, r0, #16
 8015f5a:	fb02 7000 	mla	r0, r2, r0, r7
 8015f5e:	b289      	uxth	r1, r1
 8015f60:	3301      	adds	r3, #1
 8015f62:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015f66:	429d      	cmp	r5, r3
 8015f68:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015f6c:	f84e 1b04 	str.w	r1, [lr], #4
 8015f70:	dcec      	bgt.n	8015f4c <__multadd+0x12>
 8015f72:	b1d7      	cbz	r7, 8015faa <__multadd+0x70>
 8015f74:	68a3      	ldr	r3, [r4, #8]
 8015f76:	429d      	cmp	r5, r3
 8015f78:	db12      	blt.n	8015fa0 <__multadd+0x66>
 8015f7a:	6861      	ldr	r1, [r4, #4]
 8015f7c:	4630      	mov	r0, r6
 8015f7e:	3101      	adds	r1, #1
 8015f80:	f7ff ff90 	bl	8015ea4 <_Balloc>
 8015f84:	6922      	ldr	r2, [r4, #16]
 8015f86:	3202      	adds	r2, #2
 8015f88:	f104 010c 	add.w	r1, r4, #12
 8015f8c:	4680      	mov	r8, r0
 8015f8e:	0092      	lsls	r2, r2, #2
 8015f90:	300c      	adds	r0, #12
 8015f92:	f7fd ffa1 	bl	8013ed8 <memcpy>
 8015f96:	4621      	mov	r1, r4
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f7ff ffb7 	bl	8015f0c <_Bfree>
 8015f9e:	4644      	mov	r4, r8
 8015fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015fa4:	3501      	adds	r5, #1
 8015fa6:	615f      	str	r7, [r3, #20]
 8015fa8:	6125      	str	r5, [r4, #16]
 8015faa:	4620      	mov	r0, r4
 8015fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015fb0 <__hi0bits>:
 8015fb0:	0c02      	lsrs	r2, r0, #16
 8015fb2:	0412      	lsls	r2, r2, #16
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	b9b2      	cbnz	r2, 8015fe6 <__hi0bits+0x36>
 8015fb8:	0403      	lsls	r3, r0, #16
 8015fba:	2010      	movs	r0, #16
 8015fbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015fc0:	bf04      	itt	eq
 8015fc2:	021b      	lsleq	r3, r3, #8
 8015fc4:	3008      	addeq	r0, #8
 8015fc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015fca:	bf04      	itt	eq
 8015fcc:	011b      	lsleq	r3, r3, #4
 8015fce:	3004      	addeq	r0, #4
 8015fd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015fd4:	bf04      	itt	eq
 8015fd6:	009b      	lsleq	r3, r3, #2
 8015fd8:	3002      	addeq	r0, #2
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	db06      	blt.n	8015fec <__hi0bits+0x3c>
 8015fde:	005b      	lsls	r3, r3, #1
 8015fe0:	d503      	bpl.n	8015fea <__hi0bits+0x3a>
 8015fe2:	3001      	adds	r0, #1
 8015fe4:	4770      	bx	lr
 8015fe6:	2000      	movs	r0, #0
 8015fe8:	e7e8      	b.n	8015fbc <__hi0bits+0xc>
 8015fea:	2020      	movs	r0, #32
 8015fec:	4770      	bx	lr

08015fee <__lo0bits>:
 8015fee:	6803      	ldr	r3, [r0, #0]
 8015ff0:	f013 0207 	ands.w	r2, r3, #7
 8015ff4:	4601      	mov	r1, r0
 8015ff6:	d00b      	beq.n	8016010 <__lo0bits+0x22>
 8015ff8:	07da      	lsls	r2, r3, #31
 8015ffa:	d423      	bmi.n	8016044 <__lo0bits+0x56>
 8015ffc:	0798      	lsls	r0, r3, #30
 8015ffe:	bf49      	itett	mi
 8016000:	085b      	lsrmi	r3, r3, #1
 8016002:	089b      	lsrpl	r3, r3, #2
 8016004:	2001      	movmi	r0, #1
 8016006:	600b      	strmi	r3, [r1, #0]
 8016008:	bf5c      	itt	pl
 801600a:	600b      	strpl	r3, [r1, #0]
 801600c:	2002      	movpl	r0, #2
 801600e:	4770      	bx	lr
 8016010:	b298      	uxth	r0, r3
 8016012:	b9a8      	cbnz	r0, 8016040 <__lo0bits+0x52>
 8016014:	0c1b      	lsrs	r3, r3, #16
 8016016:	2010      	movs	r0, #16
 8016018:	f013 0fff 	tst.w	r3, #255	; 0xff
 801601c:	bf04      	itt	eq
 801601e:	0a1b      	lsreq	r3, r3, #8
 8016020:	3008      	addeq	r0, #8
 8016022:	071a      	lsls	r2, r3, #28
 8016024:	bf04      	itt	eq
 8016026:	091b      	lsreq	r3, r3, #4
 8016028:	3004      	addeq	r0, #4
 801602a:	079a      	lsls	r2, r3, #30
 801602c:	bf04      	itt	eq
 801602e:	089b      	lsreq	r3, r3, #2
 8016030:	3002      	addeq	r0, #2
 8016032:	07da      	lsls	r2, r3, #31
 8016034:	d402      	bmi.n	801603c <__lo0bits+0x4e>
 8016036:	085b      	lsrs	r3, r3, #1
 8016038:	d006      	beq.n	8016048 <__lo0bits+0x5a>
 801603a:	3001      	adds	r0, #1
 801603c:	600b      	str	r3, [r1, #0]
 801603e:	4770      	bx	lr
 8016040:	4610      	mov	r0, r2
 8016042:	e7e9      	b.n	8016018 <__lo0bits+0x2a>
 8016044:	2000      	movs	r0, #0
 8016046:	4770      	bx	lr
 8016048:	2020      	movs	r0, #32
 801604a:	4770      	bx	lr

0801604c <__i2b>:
 801604c:	b510      	push	{r4, lr}
 801604e:	460c      	mov	r4, r1
 8016050:	2101      	movs	r1, #1
 8016052:	f7ff ff27 	bl	8015ea4 <_Balloc>
 8016056:	2201      	movs	r2, #1
 8016058:	6144      	str	r4, [r0, #20]
 801605a:	6102      	str	r2, [r0, #16]
 801605c:	bd10      	pop	{r4, pc}

0801605e <__multiply>:
 801605e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016062:	4614      	mov	r4, r2
 8016064:	690a      	ldr	r2, [r1, #16]
 8016066:	6923      	ldr	r3, [r4, #16]
 8016068:	429a      	cmp	r2, r3
 801606a:	bfb8      	it	lt
 801606c:	460b      	movlt	r3, r1
 801606e:	4689      	mov	r9, r1
 8016070:	bfbc      	itt	lt
 8016072:	46a1      	movlt	r9, r4
 8016074:	461c      	movlt	r4, r3
 8016076:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801607a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801607e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016082:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016086:	eb07 060a 	add.w	r6, r7, sl
 801608a:	429e      	cmp	r6, r3
 801608c:	bfc8      	it	gt
 801608e:	3101      	addgt	r1, #1
 8016090:	f7ff ff08 	bl	8015ea4 <_Balloc>
 8016094:	f100 0514 	add.w	r5, r0, #20
 8016098:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801609c:	462b      	mov	r3, r5
 801609e:	2200      	movs	r2, #0
 80160a0:	4543      	cmp	r3, r8
 80160a2:	d316      	bcc.n	80160d2 <__multiply+0x74>
 80160a4:	f104 0214 	add.w	r2, r4, #20
 80160a8:	f109 0114 	add.w	r1, r9, #20
 80160ac:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80160b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80160b4:	9301      	str	r3, [sp, #4]
 80160b6:	9c01      	ldr	r4, [sp, #4]
 80160b8:	4294      	cmp	r4, r2
 80160ba:	4613      	mov	r3, r2
 80160bc:	d80c      	bhi.n	80160d8 <__multiply+0x7a>
 80160be:	2e00      	cmp	r6, #0
 80160c0:	dd03      	ble.n	80160ca <__multiply+0x6c>
 80160c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d054      	beq.n	8016174 <__multiply+0x116>
 80160ca:	6106      	str	r6, [r0, #16]
 80160cc:	b003      	add	sp, #12
 80160ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d2:	f843 2b04 	str.w	r2, [r3], #4
 80160d6:	e7e3      	b.n	80160a0 <__multiply+0x42>
 80160d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80160dc:	3204      	adds	r2, #4
 80160de:	f1ba 0f00 	cmp.w	sl, #0
 80160e2:	d020      	beq.n	8016126 <__multiply+0xc8>
 80160e4:	46ae      	mov	lr, r5
 80160e6:	4689      	mov	r9, r1
 80160e8:	f04f 0c00 	mov.w	ip, #0
 80160ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80160f0:	f8be b000 	ldrh.w	fp, [lr]
 80160f4:	b2a3      	uxth	r3, r4
 80160f6:	fb0a b303 	mla	r3, sl, r3, fp
 80160fa:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80160fe:	f8de 4000 	ldr.w	r4, [lr]
 8016102:	4463      	add	r3, ip
 8016104:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8016108:	fb0a c40b 	mla	r4, sl, fp, ip
 801610c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016110:	b29b      	uxth	r3, r3
 8016112:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016116:	454f      	cmp	r7, r9
 8016118:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801611c:	f84e 3b04 	str.w	r3, [lr], #4
 8016120:	d8e4      	bhi.n	80160ec <__multiply+0x8e>
 8016122:	f8ce c000 	str.w	ip, [lr]
 8016126:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 801612a:	f1b9 0f00 	cmp.w	r9, #0
 801612e:	d01f      	beq.n	8016170 <__multiply+0x112>
 8016130:	682b      	ldr	r3, [r5, #0]
 8016132:	46ae      	mov	lr, r5
 8016134:	468c      	mov	ip, r1
 8016136:	f04f 0a00 	mov.w	sl, #0
 801613a:	f8bc 4000 	ldrh.w	r4, [ip]
 801613e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016142:	fb09 b404 	mla	r4, r9, r4, fp
 8016146:	44a2      	add	sl, r4
 8016148:	b29b      	uxth	r3, r3
 801614a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801614e:	f84e 3b04 	str.w	r3, [lr], #4
 8016152:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016156:	f8be 4000 	ldrh.w	r4, [lr]
 801615a:	0c1b      	lsrs	r3, r3, #16
 801615c:	fb09 4303 	mla	r3, r9, r3, r4
 8016160:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8016164:	4567      	cmp	r7, ip
 8016166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801616a:	d8e6      	bhi.n	801613a <__multiply+0xdc>
 801616c:	f8ce 3000 	str.w	r3, [lr]
 8016170:	3504      	adds	r5, #4
 8016172:	e7a0      	b.n	80160b6 <__multiply+0x58>
 8016174:	3e01      	subs	r6, #1
 8016176:	e7a2      	b.n	80160be <__multiply+0x60>

08016178 <__pow5mult>:
 8016178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801617c:	4615      	mov	r5, r2
 801617e:	f012 0203 	ands.w	r2, r2, #3
 8016182:	4606      	mov	r6, r0
 8016184:	460f      	mov	r7, r1
 8016186:	d007      	beq.n	8016198 <__pow5mult+0x20>
 8016188:	3a01      	subs	r2, #1
 801618a:	4c21      	ldr	r4, [pc, #132]	; (8016210 <__pow5mult+0x98>)
 801618c:	2300      	movs	r3, #0
 801618e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016192:	f7ff fed2 	bl	8015f3a <__multadd>
 8016196:	4607      	mov	r7, r0
 8016198:	10ad      	asrs	r5, r5, #2
 801619a:	d035      	beq.n	8016208 <__pow5mult+0x90>
 801619c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801619e:	b93c      	cbnz	r4, 80161b0 <__pow5mult+0x38>
 80161a0:	2010      	movs	r0, #16
 80161a2:	f7fd fe77 	bl	8013e94 <malloc>
 80161a6:	6270      	str	r0, [r6, #36]	; 0x24
 80161a8:	6044      	str	r4, [r0, #4]
 80161aa:	6084      	str	r4, [r0, #8]
 80161ac:	6004      	str	r4, [r0, #0]
 80161ae:	60c4      	str	r4, [r0, #12]
 80161b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80161b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80161b8:	b94c      	cbnz	r4, 80161ce <__pow5mult+0x56>
 80161ba:	f240 2171 	movw	r1, #625	; 0x271
 80161be:	4630      	mov	r0, r6
 80161c0:	f7ff ff44 	bl	801604c <__i2b>
 80161c4:	2300      	movs	r3, #0
 80161c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80161ca:	4604      	mov	r4, r0
 80161cc:	6003      	str	r3, [r0, #0]
 80161ce:	f04f 0800 	mov.w	r8, #0
 80161d2:	07eb      	lsls	r3, r5, #31
 80161d4:	d50a      	bpl.n	80161ec <__pow5mult+0x74>
 80161d6:	4639      	mov	r1, r7
 80161d8:	4622      	mov	r2, r4
 80161da:	4630      	mov	r0, r6
 80161dc:	f7ff ff3f 	bl	801605e <__multiply>
 80161e0:	4639      	mov	r1, r7
 80161e2:	4681      	mov	r9, r0
 80161e4:	4630      	mov	r0, r6
 80161e6:	f7ff fe91 	bl	8015f0c <_Bfree>
 80161ea:	464f      	mov	r7, r9
 80161ec:	106d      	asrs	r5, r5, #1
 80161ee:	d00b      	beq.n	8016208 <__pow5mult+0x90>
 80161f0:	6820      	ldr	r0, [r4, #0]
 80161f2:	b938      	cbnz	r0, 8016204 <__pow5mult+0x8c>
 80161f4:	4622      	mov	r2, r4
 80161f6:	4621      	mov	r1, r4
 80161f8:	4630      	mov	r0, r6
 80161fa:	f7ff ff30 	bl	801605e <__multiply>
 80161fe:	6020      	str	r0, [r4, #0]
 8016200:	f8c0 8000 	str.w	r8, [r0]
 8016204:	4604      	mov	r4, r0
 8016206:	e7e4      	b.n	80161d2 <__pow5mult+0x5a>
 8016208:	4638      	mov	r0, r7
 801620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801620e:	bf00      	nop
 8016210:	08019ef0 	.word	0x08019ef0

08016214 <__lshift>:
 8016214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016218:	460c      	mov	r4, r1
 801621a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801621e:	6923      	ldr	r3, [r4, #16]
 8016220:	6849      	ldr	r1, [r1, #4]
 8016222:	eb0a 0903 	add.w	r9, sl, r3
 8016226:	68a3      	ldr	r3, [r4, #8]
 8016228:	4607      	mov	r7, r0
 801622a:	4616      	mov	r6, r2
 801622c:	f109 0501 	add.w	r5, r9, #1
 8016230:	42ab      	cmp	r3, r5
 8016232:	db31      	blt.n	8016298 <__lshift+0x84>
 8016234:	4638      	mov	r0, r7
 8016236:	f7ff fe35 	bl	8015ea4 <_Balloc>
 801623a:	2200      	movs	r2, #0
 801623c:	4680      	mov	r8, r0
 801623e:	f100 0314 	add.w	r3, r0, #20
 8016242:	4611      	mov	r1, r2
 8016244:	4552      	cmp	r2, sl
 8016246:	db2a      	blt.n	801629e <__lshift+0x8a>
 8016248:	6920      	ldr	r0, [r4, #16]
 801624a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801624e:	f104 0114 	add.w	r1, r4, #20
 8016252:	f016 021f 	ands.w	r2, r6, #31
 8016256:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801625a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801625e:	d022      	beq.n	80162a6 <__lshift+0x92>
 8016260:	f1c2 0c20 	rsb	ip, r2, #32
 8016264:	2000      	movs	r0, #0
 8016266:	680e      	ldr	r6, [r1, #0]
 8016268:	4096      	lsls	r6, r2
 801626a:	4330      	orrs	r0, r6
 801626c:	f843 0b04 	str.w	r0, [r3], #4
 8016270:	f851 0b04 	ldr.w	r0, [r1], #4
 8016274:	458e      	cmp	lr, r1
 8016276:	fa20 f00c 	lsr.w	r0, r0, ip
 801627a:	d8f4      	bhi.n	8016266 <__lshift+0x52>
 801627c:	6018      	str	r0, [r3, #0]
 801627e:	b108      	cbz	r0, 8016284 <__lshift+0x70>
 8016280:	f109 0502 	add.w	r5, r9, #2
 8016284:	3d01      	subs	r5, #1
 8016286:	4638      	mov	r0, r7
 8016288:	f8c8 5010 	str.w	r5, [r8, #16]
 801628c:	4621      	mov	r1, r4
 801628e:	f7ff fe3d 	bl	8015f0c <_Bfree>
 8016292:	4640      	mov	r0, r8
 8016294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016298:	3101      	adds	r1, #1
 801629a:	005b      	lsls	r3, r3, #1
 801629c:	e7c8      	b.n	8016230 <__lshift+0x1c>
 801629e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80162a2:	3201      	adds	r2, #1
 80162a4:	e7ce      	b.n	8016244 <__lshift+0x30>
 80162a6:	3b04      	subs	r3, #4
 80162a8:	f851 2b04 	ldr.w	r2, [r1], #4
 80162ac:	f843 2f04 	str.w	r2, [r3, #4]!
 80162b0:	458e      	cmp	lr, r1
 80162b2:	d8f9      	bhi.n	80162a8 <__lshift+0x94>
 80162b4:	e7e6      	b.n	8016284 <__lshift+0x70>

080162b6 <__mcmp>:
 80162b6:	6903      	ldr	r3, [r0, #16]
 80162b8:	690a      	ldr	r2, [r1, #16]
 80162ba:	1a9b      	subs	r3, r3, r2
 80162bc:	b530      	push	{r4, r5, lr}
 80162be:	d10c      	bne.n	80162da <__mcmp+0x24>
 80162c0:	0092      	lsls	r2, r2, #2
 80162c2:	3014      	adds	r0, #20
 80162c4:	3114      	adds	r1, #20
 80162c6:	1884      	adds	r4, r0, r2
 80162c8:	4411      	add	r1, r2
 80162ca:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80162ce:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80162d2:	4295      	cmp	r5, r2
 80162d4:	d003      	beq.n	80162de <__mcmp+0x28>
 80162d6:	d305      	bcc.n	80162e4 <__mcmp+0x2e>
 80162d8:	2301      	movs	r3, #1
 80162da:	4618      	mov	r0, r3
 80162dc:	bd30      	pop	{r4, r5, pc}
 80162de:	42a0      	cmp	r0, r4
 80162e0:	d3f3      	bcc.n	80162ca <__mcmp+0x14>
 80162e2:	e7fa      	b.n	80162da <__mcmp+0x24>
 80162e4:	f04f 33ff 	mov.w	r3, #4294967295
 80162e8:	e7f7      	b.n	80162da <__mcmp+0x24>

080162ea <__mdiff>:
 80162ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162ee:	460d      	mov	r5, r1
 80162f0:	4607      	mov	r7, r0
 80162f2:	4611      	mov	r1, r2
 80162f4:	4628      	mov	r0, r5
 80162f6:	4614      	mov	r4, r2
 80162f8:	f7ff ffdd 	bl	80162b6 <__mcmp>
 80162fc:	1e06      	subs	r6, r0, #0
 80162fe:	d108      	bne.n	8016312 <__mdiff+0x28>
 8016300:	4631      	mov	r1, r6
 8016302:	4638      	mov	r0, r7
 8016304:	f7ff fdce 	bl	8015ea4 <_Balloc>
 8016308:	2301      	movs	r3, #1
 801630a:	6103      	str	r3, [r0, #16]
 801630c:	6146      	str	r6, [r0, #20]
 801630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016312:	bfa4      	itt	ge
 8016314:	4623      	movge	r3, r4
 8016316:	462c      	movge	r4, r5
 8016318:	4638      	mov	r0, r7
 801631a:	6861      	ldr	r1, [r4, #4]
 801631c:	bfa6      	itte	ge
 801631e:	461d      	movge	r5, r3
 8016320:	2600      	movge	r6, #0
 8016322:	2601      	movlt	r6, #1
 8016324:	f7ff fdbe 	bl	8015ea4 <_Balloc>
 8016328:	692b      	ldr	r3, [r5, #16]
 801632a:	60c6      	str	r6, [r0, #12]
 801632c:	6926      	ldr	r6, [r4, #16]
 801632e:	f105 0914 	add.w	r9, r5, #20
 8016332:	f104 0214 	add.w	r2, r4, #20
 8016336:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801633a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801633e:	f100 0514 	add.w	r5, r0, #20
 8016342:	f04f 0c00 	mov.w	ip, #0
 8016346:	f852 ab04 	ldr.w	sl, [r2], #4
 801634a:	f859 4b04 	ldr.w	r4, [r9], #4
 801634e:	fa1c f18a 	uxtah	r1, ip, sl
 8016352:	b2a3      	uxth	r3, r4
 8016354:	1ac9      	subs	r1, r1, r3
 8016356:	0c23      	lsrs	r3, r4, #16
 8016358:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801635c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016360:	b289      	uxth	r1, r1
 8016362:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8016366:	45c8      	cmp	r8, r9
 8016368:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801636c:	4696      	mov	lr, r2
 801636e:	f845 3b04 	str.w	r3, [r5], #4
 8016372:	d8e8      	bhi.n	8016346 <__mdiff+0x5c>
 8016374:	45be      	cmp	lr, r7
 8016376:	d305      	bcc.n	8016384 <__mdiff+0x9a>
 8016378:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801637c:	b18b      	cbz	r3, 80163a2 <__mdiff+0xb8>
 801637e:	6106      	str	r6, [r0, #16]
 8016380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016384:	f85e 1b04 	ldr.w	r1, [lr], #4
 8016388:	fa1c f381 	uxtah	r3, ip, r1
 801638c:	141a      	asrs	r2, r3, #16
 801638e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016392:	b29b      	uxth	r3, r3
 8016394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016398:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801639c:	f845 3b04 	str.w	r3, [r5], #4
 80163a0:	e7e8      	b.n	8016374 <__mdiff+0x8a>
 80163a2:	3e01      	subs	r6, #1
 80163a4:	e7e8      	b.n	8016378 <__mdiff+0x8e>

080163a6 <__d2b>:
 80163a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80163aa:	460e      	mov	r6, r1
 80163ac:	2101      	movs	r1, #1
 80163ae:	ec59 8b10 	vmov	r8, r9, d0
 80163b2:	4615      	mov	r5, r2
 80163b4:	f7ff fd76 	bl	8015ea4 <_Balloc>
 80163b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80163bc:	4607      	mov	r7, r0
 80163be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80163c2:	bb34      	cbnz	r4, 8016412 <__d2b+0x6c>
 80163c4:	9301      	str	r3, [sp, #4]
 80163c6:	f1b8 0f00 	cmp.w	r8, #0
 80163ca:	d027      	beq.n	801641c <__d2b+0x76>
 80163cc:	a802      	add	r0, sp, #8
 80163ce:	f840 8d08 	str.w	r8, [r0, #-8]!
 80163d2:	f7ff fe0c 	bl	8015fee <__lo0bits>
 80163d6:	9900      	ldr	r1, [sp, #0]
 80163d8:	b1f0      	cbz	r0, 8016418 <__d2b+0x72>
 80163da:	9a01      	ldr	r2, [sp, #4]
 80163dc:	f1c0 0320 	rsb	r3, r0, #32
 80163e0:	fa02 f303 	lsl.w	r3, r2, r3
 80163e4:	430b      	orrs	r3, r1
 80163e6:	40c2      	lsrs	r2, r0
 80163e8:	617b      	str	r3, [r7, #20]
 80163ea:	9201      	str	r2, [sp, #4]
 80163ec:	9b01      	ldr	r3, [sp, #4]
 80163ee:	61bb      	str	r3, [r7, #24]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	bf14      	ite	ne
 80163f4:	2102      	movne	r1, #2
 80163f6:	2101      	moveq	r1, #1
 80163f8:	6139      	str	r1, [r7, #16]
 80163fa:	b1c4      	cbz	r4, 801642e <__d2b+0x88>
 80163fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016400:	4404      	add	r4, r0
 8016402:	6034      	str	r4, [r6, #0]
 8016404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016408:	6028      	str	r0, [r5, #0]
 801640a:	4638      	mov	r0, r7
 801640c:	b003      	add	sp, #12
 801640e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016416:	e7d5      	b.n	80163c4 <__d2b+0x1e>
 8016418:	6179      	str	r1, [r7, #20]
 801641a:	e7e7      	b.n	80163ec <__d2b+0x46>
 801641c:	a801      	add	r0, sp, #4
 801641e:	f7ff fde6 	bl	8015fee <__lo0bits>
 8016422:	9b01      	ldr	r3, [sp, #4]
 8016424:	617b      	str	r3, [r7, #20]
 8016426:	2101      	movs	r1, #1
 8016428:	6139      	str	r1, [r7, #16]
 801642a:	3020      	adds	r0, #32
 801642c:	e7e5      	b.n	80163fa <__d2b+0x54>
 801642e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016432:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016436:	6030      	str	r0, [r6, #0]
 8016438:	6918      	ldr	r0, [r3, #16]
 801643a:	f7ff fdb9 	bl	8015fb0 <__hi0bits>
 801643e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016442:	e7e1      	b.n	8016408 <__d2b+0x62>

08016444 <_calloc_r>:
 8016444:	b538      	push	{r3, r4, r5, lr}
 8016446:	fb02 f401 	mul.w	r4, r2, r1
 801644a:	4621      	mov	r1, r4
 801644c:	f7fd fda6 	bl	8013f9c <_malloc_r>
 8016450:	4605      	mov	r5, r0
 8016452:	b118      	cbz	r0, 801645c <_calloc_r+0x18>
 8016454:	4622      	mov	r2, r4
 8016456:	2100      	movs	r1, #0
 8016458:	f7fd fd49 	bl	8013eee <memset>
 801645c:	4628      	mov	r0, r5
 801645e:	bd38      	pop	{r3, r4, r5, pc}

08016460 <_realloc_r>:
 8016460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016462:	4607      	mov	r7, r0
 8016464:	4614      	mov	r4, r2
 8016466:	460e      	mov	r6, r1
 8016468:	b921      	cbnz	r1, 8016474 <_realloc_r+0x14>
 801646a:	4611      	mov	r1, r2
 801646c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016470:	f7fd bd94 	b.w	8013f9c <_malloc_r>
 8016474:	b922      	cbnz	r2, 8016480 <_realloc_r+0x20>
 8016476:	f7fd fd43 	bl	8013f00 <_free_r>
 801647a:	4625      	mov	r5, r4
 801647c:	4628      	mov	r0, r5
 801647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016480:	f000 fb58 	bl	8016b34 <_malloc_usable_size_r>
 8016484:	4284      	cmp	r4, r0
 8016486:	d90f      	bls.n	80164a8 <_realloc_r+0x48>
 8016488:	4621      	mov	r1, r4
 801648a:	4638      	mov	r0, r7
 801648c:	f7fd fd86 	bl	8013f9c <_malloc_r>
 8016490:	4605      	mov	r5, r0
 8016492:	2800      	cmp	r0, #0
 8016494:	d0f2      	beq.n	801647c <_realloc_r+0x1c>
 8016496:	4631      	mov	r1, r6
 8016498:	4622      	mov	r2, r4
 801649a:	f7fd fd1d 	bl	8013ed8 <memcpy>
 801649e:	4631      	mov	r1, r6
 80164a0:	4638      	mov	r0, r7
 80164a2:	f7fd fd2d 	bl	8013f00 <_free_r>
 80164a6:	e7e9      	b.n	801647c <_realloc_r+0x1c>
 80164a8:	4635      	mov	r5, r6
 80164aa:	e7e7      	b.n	801647c <_realloc_r+0x1c>

080164ac <__ssputs_r>:
 80164ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b0:	688e      	ldr	r6, [r1, #8]
 80164b2:	429e      	cmp	r6, r3
 80164b4:	4682      	mov	sl, r0
 80164b6:	460c      	mov	r4, r1
 80164b8:	4691      	mov	r9, r2
 80164ba:	4698      	mov	r8, r3
 80164bc:	d835      	bhi.n	801652a <__ssputs_r+0x7e>
 80164be:	898a      	ldrh	r2, [r1, #12]
 80164c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80164c4:	d031      	beq.n	801652a <__ssputs_r+0x7e>
 80164c6:	6825      	ldr	r5, [r4, #0]
 80164c8:	6909      	ldr	r1, [r1, #16]
 80164ca:	1a6f      	subs	r7, r5, r1
 80164cc:	6965      	ldr	r5, [r4, #20]
 80164ce:	2302      	movs	r3, #2
 80164d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80164d8:	f108 0301 	add.w	r3, r8, #1
 80164dc:	443b      	add	r3, r7
 80164de:	429d      	cmp	r5, r3
 80164e0:	bf38      	it	cc
 80164e2:	461d      	movcc	r5, r3
 80164e4:	0553      	lsls	r3, r2, #21
 80164e6:	d531      	bpl.n	801654c <__ssputs_r+0xa0>
 80164e8:	4629      	mov	r1, r5
 80164ea:	f7fd fd57 	bl	8013f9c <_malloc_r>
 80164ee:	4606      	mov	r6, r0
 80164f0:	b950      	cbnz	r0, 8016508 <__ssputs_r+0x5c>
 80164f2:	230c      	movs	r3, #12
 80164f4:	f8ca 3000 	str.w	r3, [sl]
 80164f8:	89a3      	ldrh	r3, [r4, #12]
 80164fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164fe:	81a3      	strh	r3, [r4, #12]
 8016500:	f04f 30ff 	mov.w	r0, #4294967295
 8016504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016508:	463a      	mov	r2, r7
 801650a:	6921      	ldr	r1, [r4, #16]
 801650c:	f7fd fce4 	bl	8013ed8 <memcpy>
 8016510:	89a3      	ldrh	r3, [r4, #12]
 8016512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801651a:	81a3      	strh	r3, [r4, #12]
 801651c:	6126      	str	r6, [r4, #16]
 801651e:	6165      	str	r5, [r4, #20]
 8016520:	443e      	add	r6, r7
 8016522:	1bed      	subs	r5, r5, r7
 8016524:	6026      	str	r6, [r4, #0]
 8016526:	60a5      	str	r5, [r4, #8]
 8016528:	4646      	mov	r6, r8
 801652a:	4546      	cmp	r6, r8
 801652c:	bf28      	it	cs
 801652e:	4646      	movcs	r6, r8
 8016530:	4632      	mov	r2, r6
 8016532:	4649      	mov	r1, r9
 8016534:	6820      	ldr	r0, [r4, #0]
 8016536:	f000 fae3 	bl	8016b00 <memmove>
 801653a:	68a3      	ldr	r3, [r4, #8]
 801653c:	1b9b      	subs	r3, r3, r6
 801653e:	60a3      	str	r3, [r4, #8]
 8016540:	6823      	ldr	r3, [r4, #0]
 8016542:	441e      	add	r6, r3
 8016544:	6026      	str	r6, [r4, #0]
 8016546:	2000      	movs	r0, #0
 8016548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801654c:	462a      	mov	r2, r5
 801654e:	f7ff ff87 	bl	8016460 <_realloc_r>
 8016552:	4606      	mov	r6, r0
 8016554:	2800      	cmp	r0, #0
 8016556:	d1e1      	bne.n	801651c <__ssputs_r+0x70>
 8016558:	6921      	ldr	r1, [r4, #16]
 801655a:	4650      	mov	r0, sl
 801655c:	f7fd fcd0 	bl	8013f00 <_free_r>
 8016560:	e7c7      	b.n	80164f2 <__ssputs_r+0x46>
	...

08016564 <_svfiprintf_r>:
 8016564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016568:	b09d      	sub	sp, #116	; 0x74
 801656a:	4680      	mov	r8, r0
 801656c:	9303      	str	r3, [sp, #12]
 801656e:	898b      	ldrh	r3, [r1, #12]
 8016570:	061c      	lsls	r4, r3, #24
 8016572:	460d      	mov	r5, r1
 8016574:	4616      	mov	r6, r2
 8016576:	d50f      	bpl.n	8016598 <_svfiprintf_r+0x34>
 8016578:	690b      	ldr	r3, [r1, #16]
 801657a:	b96b      	cbnz	r3, 8016598 <_svfiprintf_r+0x34>
 801657c:	2140      	movs	r1, #64	; 0x40
 801657e:	f7fd fd0d 	bl	8013f9c <_malloc_r>
 8016582:	6028      	str	r0, [r5, #0]
 8016584:	6128      	str	r0, [r5, #16]
 8016586:	b928      	cbnz	r0, 8016594 <_svfiprintf_r+0x30>
 8016588:	230c      	movs	r3, #12
 801658a:	f8c8 3000 	str.w	r3, [r8]
 801658e:	f04f 30ff 	mov.w	r0, #4294967295
 8016592:	e0c5      	b.n	8016720 <_svfiprintf_r+0x1bc>
 8016594:	2340      	movs	r3, #64	; 0x40
 8016596:	616b      	str	r3, [r5, #20]
 8016598:	2300      	movs	r3, #0
 801659a:	9309      	str	r3, [sp, #36]	; 0x24
 801659c:	2320      	movs	r3, #32
 801659e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80165a2:	2330      	movs	r3, #48	; 0x30
 80165a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165a8:	f04f 0b01 	mov.w	fp, #1
 80165ac:	4637      	mov	r7, r6
 80165ae:	463c      	mov	r4, r7
 80165b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d13c      	bne.n	8016632 <_svfiprintf_r+0xce>
 80165b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80165bc:	d00b      	beq.n	80165d6 <_svfiprintf_r+0x72>
 80165be:	4653      	mov	r3, sl
 80165c0:	4632      	mov	r2, r6
 80165c2:	4629      	mov	r1, r5
 80165c4:	4640      	mov	r0, r8
 80165c6:	f7ff ff71 	bl	80164ac <__ssputs_r>
 80165ca:	3001      	adds	r0, #1
 80165cc:	f000 80a3 	beq.w	8016716 <_svfiprintf_r+0x1b2>
 80165d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165d2:	4453      	add	r3, sl
 80165d4:	9309      	str	r3, [sp, #36]	; 0x24
 80165d6:	783b      	ldrb	r3, [r7, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	f000 809c 	beq.w	8016716 <_svfiprintf_r+0x1b2>
 80165de:	2300      	movs	r3, #0
 80165e0:	f04f 32ff 	mov.w	r2, #4294967295
 80165e4:	9304      	str	r3, [sp, #16]
 80165e6:	9307      	str	r3, [sp, #28]
 80165e8:	9205      	str	r2, [sp, #20]
 80165ea:	9306      	str	r3, [sp, #24]
 80165ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165f0:	931a      	str	r3, [sp, #104]	; 0x68
 80165f2:	2205      	movs	r2, #5
 80165f4:	7821      	ldrb	r1, [r4, #0]
 80165f6:	4850      	ldr	r0, [pc, #320]	; (8016738 <_svfiprintf_r+0x1d4>)
 80165f8:	f7e9 fe22 	bl	8000240 <memchr>
 80165fc:	1c67      	adds	r7, r4, #1
 80165fe:	9b04      	ldr	r3, [sp, #16]
 8016600:	b9d8      	cbnz	r0, 801663a <_svfiprintf_r+0xd6>
 8016602:	06d9      	lsls	r1, r3, #27
 8016604:	bf44      	itt	mi
 8016606:	2220      	movmi	r2, #32
 8016608:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801660c:	071a      	lsls	r2, r3, #28
 801660e:	bf44      	itt	mi
 8016610:	222b      	movmi	r2, #43	; 0x2b
 8016612:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016616:	7822      	ldrb	r2, [r4, #0]
 8016618:	2a2a      	cmp	r2, #42	; 0x2a
 801661a:	d016      	beq.n	801664a <_svfiprintf_r+0xe6>
 801661c:	9a07      	ldr	r2, [sp, #28]
 801661e:	2100      	movs	r1, #0
 8016620:	200a      	movs	r0, #10
 8016622:	4627      	mov	r7, r4
 8016624:	3401      	adds	r4, #1
 8016626:	783b      	ldrb	r3, [r7, #0]
 8016628:	3b30      	subs	r3, #48	; 0x30
 801662a:	2b09      	cmp	r3, #9
 801662c:	d951      	bls.n	80166d2 <_svfiprintf_r+0x16e>
 801662e:	b1c9      	cbz	r1, 8016664 <_svfiprintf_r+0x100>
 8016630:	e011      	b.n	8016656 <_svfiprintf_r+0xf2>
 8016632:	2b25      	cmp	r3, #37	; 0x25
 8016634:	d0c0      	beq.n	80165b8 <_svfiprintf_r+0x54>
 8016636:	4627      	mov	r7, r4
 8016638:	e7b9      	b.n	80165ae <_svfiprintf_r+0x4a>
 801663a:	4a3f      	ldr	r2, [pc, #252]	; (8016738 <_svfiprintf_r+0x1d4>)
 801663c:	1a80      	subs	r0, r0, r2
 801663e:	fa0b f000 	lsl.w	r0, fp, r0
 8016642:	4318      	orrs	r0, r3
 8016644:	9004      	str	r0, [sp, #16]
 8016646:	463c      	mov	r4, r7
 8016648:	e7d3      	b.n	80165f2 <_svfiprintf_r+0x8e>
 801664a:	9a03      	ldr	r2, [sp, #12]
 801664c:	1d11      	adds	r1, r2, #4
 801664e:	6812      	ldr	r2, [r2, #0]
 8016650:	9103      	str	r1, [sp, #12]
 8016652:	2a00      	cmp	r2, #0
 8016654:	db01      	blt.n	801665a <_svfiprintf_r+0xf6>
 8016656:	9207      	str	r2, [sp, #28]
 8016658:	e004      	b.n	8016664 <_svfiprintf_r+0x100>
 801665a:	4252      	negs	r2, r2
 801665c:	f043 0302 	orr.w	r3, r3, #2
 8016660:	9207      	str	r2, [sp, #28]
 8016662:	9304      	str	r3, [sp, #16]
 8016664:	783b      	ldrb	r3, [r7, #0]
 8016666:	2b2e      	cmp	r3, #46	; 0x2e
 8016668:	d10e      	bne.n	8016688 <_svfiprintf_r+0x124>
 801666a:	787b      	ldrb	r3, [r7, #1]
 801666c:	2b2a      	cmp	r3, #42	; 0x2a
 801666e:	f107 0101 	add.w	r1, r7, #1
 8016672:	d132      	bne.n	80166da <_svfiprintf_r+0x176>
 8016674:	9b03      	ldr	r3, [sp, #12]
 8016676:	1d1a      	adds	r2, r3, #4
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	9203      	str	r2, [sp, #12]
 801667c:	2b00      	cmp	r3, #0
 801667e:	bfb8      	it	lt
 8016680:	f04f 33ff 	movlt.w	r3, #4294967295
 8016684:	3702      	adds	r7, #2
 8016686:	9305      	str	r3, [sp, #20]
 8016688:	4c2c      	ldr	r4, [pc, #176]	; (801673c <_svfiprintf_r+0x1d8>)
 801668a:	7839      	ldrb	r1, [r7, #0]
 801668c:	2203      	movs	r2, #3
 801668e:	4620      	mov	r0, r4
 8016690:	f7e9 fdd6 	bl	8000240 <memchr>
 8016694:	b138      	cbz	r0, 80166a6 <_svfiprintf_r+0x142>
 8016696:	2340      	movs	r3, #64	; 0x40
 8016698:	1b00      	subs	r0, r0, r4
 801669a:	fa03 f000 	lsl.w	r0, r3, r0
 801669e:	9b04      	ldr	r3, [sp, #16]
 80166a0:	4303      	orrs	r3, r0
 80166a2:	9304      	str	r3, [sp, #16]
 80166a4:	3701      	adds	r7, #1
 80166a6:	7839      	ldrb	r1, [r7, #0]
 80166a8:	4825      	ldr	r0, [pc, #148]	; (8016740 <_svfiprintf_r+0x1dc>)
 80166aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166ae:	2206      	movs	r2, #6
 80166b0:	1c7e      	adds	r6, r7, #1
 80166b2:	f7e9 fdc5 	bl	8000240 <memchr>
 80166b6:	2800      	cmp	r0, #0
 80166b8:	d035      	beq.n	8016726 <_svfiprintf_r+0x1c2>
 80166ba:	4b22      	ldr	r3, [pc, #136]	; (8016744 <_svfiprintf_r+0x1e0>)
 80166bc:	b9fb      	cbnz	r3, 80166fe <_svfiprintf_r+0x19a>
 80166be:	9b03      	ldr	r3, [sp, #12]
 80166c0:	3307      	adds	r3, #7
 80166c2:	f023 0307 	bic.w	r3, r3, #7
 80166c6:	3308      	adds	r3, #8
 80166c8:	9303      	str	r3, [sp, #12]
 80166ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166cc:	444b      	add	r3, r9
 80166ce:	9309      	str	r3, [sp, #36]	; 0x24
 80166d0:	e76c      	b.n	80165ac <_svfiprintf_r+0x48>
 80166d2:	fb00 3202 	mla	r2, r0, r2, r3
 80166d6:	2101      	movs	r1, #1
 80166d8:	e7a3      	b.n	8016622 <_svfiprintf_r+0xbe>
 80166da:	2300      	movs	r3, #0
 80166dc:	9305      	str	r3, [sp, #20]
 80166de:	4618      	mov	r0, r3
 80166e0:	240a      	movs	r4, #10
 80166e2:	460f      	mov	r7, r1
 80166e4:	3101      	adds	r1, #1
 80166e6:	783a      	ldrb	r2, [r7, #0]
 80166e8:	3a30      	subs	r2, #48	; 0x30
 80166ea:	2a09      	cmp	r2, #9
 80166ec:	d903      	bls.n	80166f6 <_svfiprintf_r+0x192>
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d0ca      	beq.n	8016688 <_svfiprintf_r+0x124>
 80166f2:	9005      	str	r0, [sp, #20]
 80166f4:	e7c8      	b.n	8016688 <_svfiprintf_r+0x124>
 80166f6:	fb04 2000 	mla	r0, r4, r0, r2
 80166fa:	2301      	movs	r3, #1
 80166fc:	e7f1      	b.n	80166e2 <_svfiprintf_r+0x17e>
 80166fe:	ab03      	add	r3, sp, #12
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	462a      	mov	r2, r5
 8016704:	4b10      	ldr	r3, [pc, #64]	; (8016748 <_svfiprintf_r+0x1e4>)
 8016706:	a904      	add	r1, sp, #16
 8016708:	4640      	mov	r0, r8
 801670a:	f7fd fd3b 	bl	8014184 <_printf_float>
 801670e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016712:	4681      	mov	r9, r0
 8016714:	d1d9      	bne.n	80166ca <_svfiprintf_r+0x166>
 8016716:	89ab      	ldrh	r3, [r5, #12]
 8016718:	065b      	lsls	r3, r3, #25
 801671a:	f53f af38 	bmi.w	801658e <_svfiprintf_r+0x2a>
 801671e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016720:	b01d      	add	sp, #116	; 0x74
 8016722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016726:	ab03      	add	r3, sp, #12
 8016728:	9300      	str	r3, [sp, #0]
 801672a:	462a      	mov	r2, r5
 801672c:	4b06      	ldr	r3, [pc, #24]	; (8016748 <_svfiprintf_r+0x1e4>)
 801672e:	a904      	add	r1, sp, #16
 8016730:	4640      	mov	r0, r8
 8016732:	f7fd ffdd 	bl	80146f0 <_printf_i>
 8016736:	e7ea      	b.n	801670e <_svfiprintf_r+0x1aa>
 8016738:	08019efc 	.word	0x08019efc
 801673c:	08019f02 	.word	0x08019f02
 8016740:	08019f06 	.word	0x08019f06
 8016744:	08014185 	.word	0x08014185
 8016748:	080164ad 	.word	0x080164ad

0801674c <__sfputc_r>:
 801674c:	6893      	ldr	r3, [r2, #8]
 801674e:	3b01      	subs	r3, #1
 8016750:	2b00      	cmp	r3, #0
 8016752:	b410      	push	{r4}
 8016754:	6093      	str	r3, [r2, #8]
 8016756:	da09      	bge.n	801676c <__sfputc_r+0x20>
 8016758:	6994      	ldr	r4, [r2, #24]
 801675a:	42a3      	cmp	r3, r4
 801675c:	db02      	blt.n	8016764 <__sfputc_r+0x18>
 801675e:	b2cb      	uxtb	r3, r1
 8016760:	2b0a      	cmp	r3, #10
 8016762:	d103      	bne.n	801676c <__sfputc_r+0x20>
 8016764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016768:	f7fe ba82 	b.w	8014c70 <__swbuf_r>
 801676c:	6813      	ldr	r3, [r2, #0]
 801676e:	1c58      	adds	r0, r3, #1
 8016770:	6010      	str	r0, [r2, #0]
 8016772:	7019      	strb	r1, [r3, #0]
 8016774:	b2c8      	uxtb	r0, r1
 8016776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801677a:	4770      	bx	lr

0801677c <__sfputs_r>:
 801677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801677e:	4606      	mov	r6, r0
 8016780:	460f      	mov	r7, r1
 8016782:	4614      	mov	r4, r2
 8016784:	18d5      	adds	r5, r2, r3
 8016786:	42ac      	cmp	r4, r5
 8016788:	d101      	bne.n	801678e <__sfputs_r+0x12>
 801678a:	2000      	movs	r0, #0
 801678c:	e007      	b.n	801679e <__sfputs_r+0x22>
 801678e:	463a      	mov	r2, r7
 8016790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016794:	4630      	mov	r0, r6
 8016796:	f7ff ffd9 	bl	801674c <__sfputc_r>
 801679a:	1c43      	adds	r3, r0, #1
 801679c:	d1f3      	bne.n	8016786 <__sfputs_r+0xa>
 801679e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167a0 <_vfiprintf_r>:
 80167a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a4:	b09d      	sub	sp, #116	; 0x74
 80167a6:	460c      	mov	r4, r1
 80167a8:	4617      	mov	r7, r2
 80167aa:	9303      	str	r3, [sp, #12]
 80167ac:	4606      	mov	r6, r0
 80167ae:	b118      	cbz	r0, 80167b8 <_vfiprintf_r+0x18>
 80167b0:	6983      	ldr	r3, [r0, #24]
 80167b2:	b90b      	cbnz	r3, 80167b8 <_vfiprintf_r+0x18>
 80167b4:	f7ff fa78 	bl	8015ca8 <__sinit>
 80167b8:	4b7c      	ldr	r3, [pc, #496]	; (80169ac <_vfiprintf_r+0x20c>)
 80167ba:	429c      	cmp	r4, r3
 80167bc:	d157      	bne.n	801686e <_vfiprintf_r+0xce>
 80167be:	6874      	ldr	r4, [r6, #4]
 80167c0:	89a3      	ldrh	r3, [r4, #12]
 80167c2:	0718      	lsls	r0, r3, #28
 80167c4:	d55d      	bpl.n	8016882 <_vfiprintf_r+0xe2>
 80167c6:	6923      	ldr	r3, [r4, #16]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d05a      	beq.n	8016882 <_vfiprintf_r+0xe2>
 80167cc:	2300      	movs	r3, #0
 80167ce:	9309      	str	r3, [sp, #36]	; 0x24
 80167d0:	2320      	movs	r3, #32
 80167d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167d6:	2330      	movs	r3, #48	; 0x30
 80167d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167dc:	f04f 0b01 	mov.w	fp, #1
 80167e0:	46b8      	mov	r8, r7
 80167e2:	4645      	mov	r5, r8
 80167e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d155      	bne.n	8016898 <_vfiprintf_r+0xf8>
 80167ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80167f0:	d00b      	beq.n	801680a <_vfiprintf_r+0x6a>
 80167f2:	4653      	mov	r3, sl
 80167f4:	463a      	mov	r2, r7
 80167f6:	4621      	mov	r1, r4
 80167f8:	4630      	mov	r0, r6
 80167fa:	f7ff ffbf 	bl	801677c <__sfputs_r>
 80167fe:	3001      	adds	r0, #1
 8016800:	f000 80c4 	beq.w	801698c <_vfiprintf_r+0x1ec>
 8016804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016806:	4453      	add	r3, sl
 8016808:	9309      	str	r3, [sp, #36]	; 0x24
 801680a:	f898 3000 	ldrb.w	r3, [r8]
 801680e:	2b00      	cmp	r3, #0
 8016810:	f000 80bc 	beq.w	801698c <_vfiprintf_r+0x1ec>
 8016814:	2300      	movs	r3, #0
 8016816:	f04f 32ff 	mov.w	r2, #4294967295
 801681a:	9304      	str	r3, [sp, #16]
 801681c:	9307      	str	r3, [sp, #28]
 801681e:	9205      	str	r2, [sp, #20]
 8016820:	9306      	str	r3, [sp, #24]
 8016822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016826:	931a      	str	r3, [sp, #104]	; 0x68
 8016828:	2205      	movs	r2, #5
 801682a:	7829      	ldrb	r1, [r5, #0]
 801682c:	4860      	ldr	r0, [pc, #384]	; (80169b0 <_vfiprintf_r+0x210>)
 801682e:	f7e9 fd07 	bl	8000240 <memchr>
 8016832:	f105 0801 	add.w	r8, r5, #1
 8016836:	9b04      	ldr	r3, [sp, #16]
 8016838:	2800      	cmp	r0, #0
 801683a:	d131      	bne.n	80168a0 <_vfiprintf_r+0x100>
 801683c:	06d9      	lsls	r1, r3, #27
 801683e:	bf44      	itt	mi
 8016840:	2220      	movmi	r2, #32
 8016842:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016846:	071a      	lsls	r2, r3, #28
 8016848:	bf44      	itt	mi
 801684a:	222b      	movmi	r2, #43	; 0x2b
 801684c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016850:	782a      	ldrb	r2, [r5, #0]
 8016852:	2a2a      	cmp	r2, #42	; 0x2a
 8016854:	d02c      	beq.n	80168b0 <_vfiprintf_r+0x110>
 8016856:	9a07      	ldr	r2, [sp, #28]
 8016858:	2100      	movs	r1, #0
 801685a:	200a      	movs	r0, #10
 801685c:	46a8      	mov	r8, r5
 801685e:	3501      	adds	r5, #1
 8016860:	f898 3000 	ldrb.w	r3, [r8]
 8016864:	3b30      	subs	r3, #48	; 0x30
 8016866:	2b09      	cmp	r3, #9
 8016868:	d96d      	bls.n	8016946 <_vfiprintf_r+0x1a6>
 801686a:	b371      	cbz	r1, 80168ca <_vfiprintf_r+0x12a>
 801686c:	e026      	b.n	80168bc <_vfiprintf_r+0x11c>
 801686e:	4b51      	ldr	r3, [pc, #324]	; (80169b4 <_vfiprintf_r+0x214>)
 8016870:	429c      	cmp	r4, r3
 8016872:	d101      	bne.n	8016878 <_vfiprintf_r+0xd8>
 8016874:	68b4      	ldr	r4, [r6, #8]
 8016876:	e7a3      	b.n	80167c0 <_vfiprintf_r+0x20>
 8016878:	4b4f      	ldr	r3, [pc, #316]	; (80169b8 <_vfiprintf_r+0x218>)
 801687a:	429c      	cmp	r4, r3
 801687c:	bf08      	it	eq
 801687e:	68f4      	ldreq	r4, [r6, #12]
 8016880:	e79e      	b.n	80167c0 <_vfiprintf_r+0x20>
 8016882:	4621      	mov	r1, r4
 8016884:	4630      	mov	r0, r6
 8016886:	f7fe fa53 	bl	8014d30 <__swsetup_r>
 801688a:	2800      	cmp	r0, #0
 801688c:	d09e      	beq.n	80167cc <_vfiprintf_r+0x2c>
 801688e:	f04f 30ff 	mov.w	r0, #4294967295
 8016892:	b01d      	add	sp, #116	; 0x74
 8016894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016898:	2b25      	cmp	r3, #37	; 0x25
 801689a:	d0a7      	beq.n	80167ec <_vfiprintf_r+0x4c>
 801689c:	46a8      	mov	r8, r5
 801689e:	e7a0      	b.n	80167e2 <_vfiprintf_r+0x42>
 80168a0:	4a43      	ldr	r2, [pc, #268]	; (80169b0 <_vfiprintf_r+0x210>)
 80168a2:	1a80      	subs	r0, r0, r2
 80168a4:	fa0b f000 	lsl.w	r0, fp, r0
 80168a8:	4318      	orrs	r0, r3
 80168aa:	9004      	str	r0, [sp, #16]
 80168ac:	4645      	mov	r5, r8
 80168ae:	e7bb      	b.n	8016828 <_vfiprintf_r+0x88>
 80168b0:	9a03      	ldr	r2, [sp, #12]
 80168b2:	1d11      	adds	r1, r2, #4
 80168b4:	6812      	ldr	r2, [r2, #0]
 80168b6:	9103      	str	r1, [sp, #12]
 80168b8:	2a00      	cmp	r2, #0
 80168ba:	db01      	blt.n	80168c0 <_vfiprintf_r+0x120>
 80168bc:	9207      	str	r2, [sp, #28]
 80168be:	e004      	b.n	80168ca <_vfiprintf_r+0x12a>
 80168c0:	4252      	negs	r2, r2
 80168c2:	f043 0302 	orr.w	r3, r3, #2
 80168c6:	9207      	str	r2, [sp, #28]
 80168c8:	9304      	str	r3, [sp, #16]
 80168ca:	f898 3000 	ldrb.w	r3, [r8]
 80168ce:	2b2e      	cmp	r3, #46	; 0x2e
 80168d0:	d110      	bne.n	80168f4 <_vfiprintf_r+0x154>
 80168d2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80168d6:	2b2a      	cmp	r3, #42	; 0x2a
 80168d8:	f108 0101 	add.w	r1, r8, #1
 80168dc:	d137      	bne.n	801694e <_vfiprintf_r+0x1ae>
 80168de:	9b03      	ldr	r3, [sp, #12]
 80168e0:	1d1a      	adds	r2, r3, #4
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	9203      	str	r2, [sp, #12]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	bfb8      	it	lt
 80168ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80168ee:	f108 0802 	add.w	r8, r8, #2
 80168f2:	9305      	str	r3, [sp, #20]
 80168f4:	4d31      	ldr	r5, [pc, #196]	; (80169bc <_vfiprintf_r+0x21c>)
 80168f6:	f898 1000 	ldrb.w	r1, [r8]
 80168fa:	2203      	movs	r2, #3
 80168fc:	4628      	mov	r0, r5
 80168fe:	f7e9 fc9f 	bl	8000240 <memchr>
 8016902:	b140      	cbz	r0, 8016916 <_vfiprintf_r+0x176>
 8016904:	2340      	movs	r3, #64	; 0x40
 8016906:	1b40      	subs	r0, r0, r5
 8016908:	fa03 f000 	lsl.w	r0, r3, r0
 801690c:	9b04      	ldr	r3, [sp, #16]
 801690e:	4303      	orrs	r3, r0
 8016910:	9304      	str	r3, [sp, #16]
 8016912:	f108 0801 	add.w	r8, r8, #1
 8016916:	f898 1000 	ldrb.w	r1, [r8]
 801691a:	4829      	ldr	r0, [pc, #164]	; (80169c0 <_vfiprintf_r+0x220>)
 801691c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016920:	2206      	movs	r2, #6
 8016922:	f108 0701 	add.w	r7, r8, #1
 8016926:	f7e9 fc8b 	bl	8000240 <memchr>
 801692a:	2800      	cmp	r0, #0
 801692c:	d034      	beq.n	8016998 <_vfiprintf_r+0x1f8>
 801692e:	4b25      	ldr	r3, [pc, #148]	; (80169c4 <_vfiprintf_r+0x224>)
 8016930:	bb03      	cbnz	r3, 8016974 <_vfiprintf_r+0x1d4>
 8016932:	9b03      	ldr	r3, [sp, #12]
 8016934:	3307      	adds	r3, #7
 8016936:	f023 0307 	bic.w	r3, r3, #7
 801693a:	3308      	adds	r3, #8
 801693c:	9303      	str	r3, [sp, #12]
 801693e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016940:	444b      	add	r3, r9
 8016942:	9309      	str	r3, [sp, #36]	; 0x24
 8016944:	e74c      	b.n	80167e0 <_vfiprintf_r+0x40>
 8016946:	fb00 3202 	mla	r2, r0, r2, r3
 801694a:	2101      	movs	r1, #1
 801694c:	e786      	b.n	801685c <_vfiprintf_r+0xbc>
 801694e:	2300      	movs	r3, #0
 8016950:	9305      	str	r3, [sp, #20]
 8016952:	4618      	mov	r0, r3
 8016954:	250a      	movs	r5, #10
 8016956:	4688      	mov	r8, r1
 8016958:	3101      	adds	r1, #1
 801695a:	f898 2000 	ldrb.w	r2, [r8]
 801695e:	3a30      	subs	r2, #48	; 0x30
 8016960:	2a09      	cmp	r2, #9
 8016962:	d903      	bls.n	801696c <_vfiprintf_r+0x1cc>
 8016964:	2b00      	cmp	r3, #0
 8016966:	d0c5      	beq.n	80168f4 <_vfiprintf_r+0x154>
 8016968:	9005      	str	r0, [sp, #20]
 801696a:	e7c3      	b.n	80168f4 <_vfiprintf_r+0x154>
 801696c:	fb05 2000 	mla	r0, r5, r0, r2
 8016970:	2301      	movs	r3, #1
 8016972:	e7f0      	b.n	8016956 <_vfiprintf_r+0x1b6>
 8016974:	ab03      	add	r3, sp, #12
 8016976:	9300      	str	r3, [sp, #0]
 8016978:	4622      	mov	r2, r4
 801697a:	4b13      	ldr	r3, [pc, #76]	; (80169c8 <_vfiprintf_r+0x228>)
 801697c:	a904      	add	r1, sp, #16
 801697e:	4630      	mov	r0, r6
 8016980:	f7fd fc00 	bl	8014184 <_printf_float>
 8016984:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016988:	4681      	mov	r9, r0
 801698a:	d1d8      	bne.n	801693e <_vfiprintf_r+0x19e>
 801698c:	89a3      	ldrh	r3, [r4, #12]
 801698e:	065b      	lsls	r3, r3, #25
 8016990:	f53f af7d 	bmi.w	801688e <_vfiprintf_r+0xee>
 8016994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016996:	e77c      	b.n	8016892 <_vfiprintf_r+0xf2>
 8016998:	ab03      	add	r3, sp, #12
 801699a:	9300      	str	r3, [sp, #0]
 801699c:	4622      	mov	r2, r4
 801699e:	4b0a      	ldr	r3, [pc, #40]	; (80169c8 <_vfiprintf_r+0x228>)
 80169a0:	a904      	add	r1, sp, #16
 80169a2:	4630      	mov	r0, r6
 80169a4:	f7fd fea4 	bl	80146f0 <_printf_i>
 80169a8:	e7ec      	b.n	8016984 <_vfiprintf_r+0x1e4>
 80169aa:	bf00      	nop
 80169ac:	08019db8 	.word	0x08019db8
 80169b0:	08019efc 	.word	0x08019efc
 80169b4:	08019dd8 	.word	0x08019dd8
 80169b8:	08019d98 	.word	0x08019d98
 80169bc:	08019f02 	.word	0x08019f02
 80169c0:	08019f06 	.word	0x08019f06
 80169c4:	08014185 	.word	0x08014185
 80169c8:	0801677d 	.word	0x0801677d

080169cc <__sread>:
 80169cc:	b510      	push	{r4, lr}
 80169ce:	460c      	mov	r4, r1
 80169d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169d4:	f000 f8b8 	bl	8016b48 <_read_r>
 80169d8:	2800      	cmp	r0, #0
 80169da:	bfab      	itete	ge
 80169dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80169de:	89a3      	ldrhlt	r3, [r4, #12]
 80169e0:	181b      	addge	r3, r3, r0
 80169e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80169e6:	bfac      	ite	ge
 80169e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80169ea:	81a3      	strhlt	r3, [r4, #12]
 80169ec:	bd10      	pop	{r4, pc}

080169ee <__swrite>:
 80169ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169f2:	461f      	mov	r7, r3
 80169f4:	898b      	ldrh	r3, [r1, #12]
 80169f6:	05db      	lsls	r3, r3, #23
 80169f8:	4605      	mov	r5, r0
 80169fa:	460c      	mov	r4, r1
 80169fc:	4616      	mov	r6, r2
 80169fe:	d505      	bpl.n	8016a0c <__swrite+0x1e>
 8016a00:	2302      	movs	r3, #2
 8016a02:	2200      	movs	r2, #0
 8016a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a08:	f000 f868 	bl	8016adc <_lseek_r>
 8016a0c:	89a3      	ldrh	r3, [r4, #12]
 8016a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016a16:	81a3      	strh	r3, [r4, #12]
 8016a18:	4632      	mov	r2, r6
 8016a1a:	463b      	mov	r3, r7
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a22:	f000 b817 	b.w	8016a54 <_write_r>

08016a26 <__sseek>:
 8016a26:	b510      	push	{r4, lr}
 8016a28:	460c      	mov	r4, r1
 8016a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a2e:	f000 f855 	bl	8016adc <_lseek_r>
 8016a32:	1c43      	adds	r3, r0, #1
 8016a34:	89a3      	ldrh	r3, [r4, #12]
 8016a36:	bf15      	itete	ne
 8016a38:	6560      	strne	r0, [r4, #84]	; 0x54
 8016a3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016a3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016a42:	81a3      	strheq	r3, [r4, #12]
 8016a44:	bf18      	it	ne
 8016a46:	81a3      	strhne	r3, [r4, #12]
 8016a48:	bd10      	pop	{r4, pc}

08016a4a <__sclose>:
 8016a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a4e:	f000 b813 	b.w	8016a78 <_close_r>
	...

08016a54 <_write_r>:
 8016a54:	b538      	push	{r3, r4, r5, lr}
 8016a56:	4c07      	ldr	r4, [pc, #28]	; (8016a74 <_write_r+0x20>)
 8016a58:	4605      	mov	r5, r0
 8016a5a:	4608      	mov	r0, r1
 8016a5c:	4611      	mov	r1, r2
 8016a5e:	2200      	movs	r2, #0
 8016a60:	6022      	str	r2, [r4, #0]
 8016a62:	461a      	mov	r2, r3
 8016a64:	f7fc f9b8 	bl	8012dd8 <_write>
 8016a68:	1c43      	adds	r3, r0, #1
 8016a6a:	d102      	bne.n	8016a72 <_write_r+0x1e>
 8016a6c:	6823      	ldr	r3, [r4, #0]
 8016a6e:	b103      	cbz	r3, 8016a72 <_write_r+0x1e>
 8016a70:	602b      	str	r3, [r5, #0]
 8016a72:	bd38      	pop	{r3, r4, r5, pc}
 8016a74:	20001b08 	.word	0x20001b08

08016a78 <_close_r>:
 8016a78:	b538      	push	{r3, r4, r5, lr}
 8016a7a:	4c06      	ldr	r4, [pc, #24]	; (8016a94 <_close_r+0x1c>)
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	4605      	mov	r5, r0
 8016a80:	4608      	mov	r0, r1
 8016a82:	6023      	str	r3, [r4, #0]
 8016a84:	f000 f872 	bl	8016b6c <_close>
 8016a88:	1c43      	adds	r3, r0, #1
 8016a8a:	d102      	bne.n	8016a92 <_close_r+0x1a>
 8016a8c:	6823      	ldr	r3, [r4, #0]
 8016a8e:	b103      	cbz	r3, 8016a92 <_close_r+0x1a>
 8016a90:	602b      	str	r3, [r5, #0]
 8016a92:	bd38      	pop	{r3, r4, r5, pc}
 8016a94:	20001b08 	.word	0x20001b08

08016a98 <_fstat_r>:
 8016a98:	b538      	push	{r3, r4, r5, lr}
 8016a9a:	4c07      	ldr	r4, [pc, #28]	; (8016ab8 <_fstat_r+0x20>)
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	4605      	mov	r5, r0
 8016aa0:	4608      	mov	r0, r1
 8016aa2:	4611      	mov	r1, r2
 8016aa4:	6023      	str	r3, [r4, #0]
 8016aa6:	f000 f869 	bl	8016b7c <_fstat>
 8016aaa:	1c43      	adds	r3, r0, #1
 8016aac:	d102      	bne.n	8016ab4 <_fstat_r+0x1c>
 8016aae:	6823      	ldr	r3, [r4, #0]
 8016ab0:	b103      	cbz	r3, 8016ab4 <_fstat_r+0x1c>
 8016ab2:	602b      	str	r3, [r5, #0]
 8016ab4:	bd38      	pop	{r3, r4, r5, pc}
 8016ab6:	bf00      	nop
 8016ab8:	20001b08 	.word	0x20001b08

08016abc <_isatty_r>:
 8016abc:	b538      	push	{r3, r4, r5, lr}
 8016abe:	4c06      	ldr	r4, [pc, #24]	; (8016ad8 <_isatty_r+0x1c>)
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	4605      	mov	r5, r0
 8016ac4:	4608      	mov	r0, r1
 8016ac6:	6023      	str	r3, [r4, #0]
 8016ac8:	f000 f860 	bl	8016b8c <_isatty>
 8016acc:	1c43      	adds	r3, r0, #1
 8016ace:	d102      	bne.n	8016ad6 <_isatty_r+0x1a>
 8016ad0:	6823      	ldr	r3, [r4, #0]
 8016ad2:	b103      	cbz	r3, 8016ad6 <_isatty_r+0x1a>
 8016ad4:	602b      	str	r3, [r5, #0]
 8016ad6:	bd38      	pop	{r3, r4, r5, pc}
 8016ad8:	20001b08 	.word	0x20001b08

08016adc <_lseek_r>:
 8016adc:	b538      	push	{r3, r4, r5, lr}
 8016ade:	4c07      	ldr	r4, [pc, #28]	; (8016afc <_lseek_r+0x20>)
 8016ae0:	4605      	mov	r5, r0
 8016ae2:	4608      	mov	r0, r1
 8016ae4:	4611      	mov	r1, r2
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	6022      	str	r2, [r4, #0]
 8016aea:	461a      	mov	r2, r3
 8016aec:	f000 f856 	bl	8016b9c <_lseek>
 8016af0:	1c43      	adds	r3, r0, #1
 8016af2:	d102      	bne.n	8016afa <_lseek_r+0x1e>
 8016af4:	6823      	ldr	r3, [r4, #0]
 8016af6:	b103      	cbz	r3, 8016afa <_lseek_r+0x1e>
 8016af8:	602b      	str	r3, [r5, #0]
 8016afa:	bd38      	pop	{r3, r4, r5, pc}
 8016afc:	20001b08 	.word	0x20001b08

08016b00 <memmove>:
 8016b00:	4288      	cmp	r0, r1
 8016b02:	b510      	push	{r4, lr}
 8016b04:	eb01 0302 	add.w	r3, r1, r2
 8016b08:	d803      	bhi.n	8016b12 <memmove+0x12>
 8016b0a:	1e42      	subs	r2, r0, #1
 8016b0c:	4299      	cmp	r1, r3
 8016b0e:	d10c      	bne.n	8016b2a <memmove+0x2a>
 8016b10:	bd10      	pop	{r4, pc}
 8016b12:	4298      	cmp	r0, r3
 8016b14:	d2f9      	bcs.n	8016b0a <memmove+0xa>
 8016b16:	1881      	adds	r1, r0, r2
 8016b18:	1ad2      	subs	r2, r2, r3
 8016b1a:	42d3      	cmn	r3, r2
 8016b1c:	d100      	bne.n	8016b20 <memmove+0x20>
 8016b1e:	bd10      	pop	{r4, pc}
 8016b20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b24:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016b28:	e7f7      	b.n	8016b1a <memmove+0x1a>
 8016b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016b32:	e7eb      	b.n	8016b0c <memmove+0xc>

08016b34 <_malloc_usable_size_r>:
 8016b34:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	f1a0 0004 	sub.w	r0, r0, #4
 8016b3e:	bfbc      	itt	lt
 8016b40:	580b      	ldrlt	r3, [r1, r0]
 8016b42:	18c0      	addlt	r0, r0, r3
 8016b44:	4770      	bx	lr
	...

08016b48 <_read_r>:
 8016b48:	b538      	push	{r3, r4, r5, lr}
 8016b4a:	4c07      	ldr	r4, [pc, #28]	; (8016b68 <_read_r+0x20>)
 8016b4c:	4605      	mov	r5, r0
 8016b4e:	4608      	mov	r0, r1
 8016b50:	4611      	mov	r1, r2
 8016b52:	2200      	movs	r2, #0
 8016b54:	6022      	str	r2, [r4, #0]
 8016b56:	461a      	mov	r2, r3
 8016b58:	f7fc f972 	bl	8012e40 <_read>
 8016b5c:	1c43      	adds	r3, r0, #1
 8016b5e:	d102      	bne.n	8016b66 <_read_r+0x1e>
 8016b60:	6823      	ldr	r3, [r4, #0]
 8016b62:	b103      	cbz	r3, 8016b66 <_read_r+0x1e>
 8016b64:	602b      	str	r3, [r5, #0]
 8016b66:	bd38      	pop	{r3, r4, r5, pc}
 8016b68:	20001b08 	.word	0x20001b08

08016b6c <_close>:
 8016b6c:	4b02      	ldr	r3, [pc, #8]	; (8016b78 <_close+0xc>)
 8016b6e:	2258      	movs	r2, #88	; 0x58
 8016b70:	601a      	str	r2, [r3, #0]
 8016b72:	f04f 30ff 	mov.w	r0, #4294967295
 8016b76:	4770      	bx	lr
 8016b78:	20001b08 	.word	0x20001b08

08016b7c <_fstat>:
 8016b7c:	4b02      	ldr	r3, [pc, #8]	; (8016b88 <_fstat+0xc>)
 8016b7e:	2258      	movs	r2, #88	; 0x58
 8016b80:	601a      	str	r2, [r3, #0]
 8016b82:	f04f 30ff 	mov.w	r0, #4294967295
 8016b86:	4770      	bx	lr
 8016b88:	20001b08 	.word	0x20001b08

08016b8c <_isatty>:
 8016b8c:	4b02      	ldr	r3, [pc, #8]	; (8016b98 <_isatty+0xc>)
 8016b8e:	2258      	movs	r2, #88	; 0x58
 8016b90:	601a      	str	r2, [r3, #0]
 8016b92:	2000      	movs	r0, #0
 8016b94:	4770      	bx	lr
 8016b96:	bf00      	nop
 8016b98:	20001b08 	.word	0x20001b08

08016b9c <_lseek>:
 8016b9c:	4b02      	ldr	r3, [pc, #8]	; (8016ba8 <_lseek+0xc>)
 8016b9e:	2258      	movs	r2, #88	; 0x58
 8016ba0:	601a      	str	r2, [r3, #0]
 8016ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ba6:	4770      	bx	lr
 8016ba8:	20001b08 	.word	0x20001b08

08016bac <_sbrk>:
 8016bac:	4b04      	ldr	r3, [pc, #16]	; (8016bc0 <_sbrk+0x14>)
 8016bae:	6819      	ldr	r1, [r3, #0]
 8016bb0:	4602      	mov	r2, r0
 8016bb2:	b909      	cbnz	r1, 8016bb8 <_sbrk+0xc>
 8016bb4:	4903      	ldr	r1, [pc, #12]	; (8016bc4 <_sbrk+0x18>)
 8016bb6:	6019      	str	r1, [r3, #0]
 8016bb8:	6818      	ldr	r0, [r3, #0]
 8016bba:	4402      	add	r2, r0
 8016bbc:	601a      	str	r2, [r3, #0]
 8016bbe:	4770      	bx	lr
 8016bc0:	200004a0 	.word	0x200004a0
 8016bc4:	20001b0c 	.word	0x20001b0c

08016bc8 <_init>:
 8016bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bca:	bf00      	nop
 8016bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bce:	bc08      	pop	{r3}
 8016bd0:	469e      	mov	lr, r3
 8016bd2:	4770      	bx	lr

08016bd4 <_fini>:
 8016bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bd6:	bf00      	nop
 8016bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bda:	bc08      	pop	{r3}
 8016bdc:	469e      	mov	lr, r3
 8016bde:	4770      	bx	lr
