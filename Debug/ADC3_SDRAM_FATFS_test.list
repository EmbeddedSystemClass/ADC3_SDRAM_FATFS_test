
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003340  08013140  08013140  00023140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016480  08016480  00026480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016488  08016488  00026488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801648c  0801648c  0002648c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000034c  20000000  08016490  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002acc  2000034c  080167dc  0003034c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002e18  080167dc  00032e18  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041745  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006b19  00000000  00000000  00071ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000021b0  00000000  00000000  000785e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001ed8  00000000  00000000  0007a790  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015021  00000000  00000000  0007c668  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a189  00000000  00000000  00091689  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0009b812  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009ed0  00000000  00000000  0009b890  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000006c  00000000  00000000  000a5760  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000e3  00000000  00000000  000a57cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000034c 	.word	0x2000034c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013128 	.word	0x08013128

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000350 	.word	0x20000350
 800020c:	08013128 	.word	0x08013128

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2uiz>:
 8000c00:	004a      	lsls	r2, r1, #1
 8000c02:	d211      	bcs.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c08:	d211      	bcs.n	8000c2e <__aeabi_d2uiz+0x2e>
 8000c0a:	d50d      	bpl.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c14:	d40e      	bmi.n	8000c34 <__aeabi_d2uiz+0x34>
 8000c16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c22:	fa23 f002 	lsr.w	r0, r3, r2
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d102      	bne.n	8000c3a <__aeabi_d2uiz+0x3a>
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_d2f>:
 8000c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c48:	bf24      	itt	cs
 8000c4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c52:	d90d      	bls.n	8000c70 <__aeabi_d2f+0x30>
 8000c54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c74:	d121      	bne.n	8000cba <__aeabi_d2f+0x7a>
 8000c76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7a:	bfbc      	itt	lt
 8000c7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	4770      	bxlt	lr
 8000c82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8a:	f1c2 0218 	rsb	r2, r2, #24
 8000c8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c96:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ca0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cac:	ea40 000c 	orr.w	r0, r0, ip
 8000cb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb8:	e7cc      	b.n	8000c54 <__aeabi_d2f+0x14>
 8000cba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cbe:	d107      	bne.n	8000cd0 <__aeabi_d2f+0x90>
 8000cc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bxne	lr
 8000cd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_uldivmod>:
 8000ce0:	b953      	cbnz	r3, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce2:	b94a      	cbnz	r2, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	2800      	cmpeq	r0, #0
 8000cea:	bf1c      	itt	ne
 8000cec:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf4:	f000 b97a 	b.w	8000fec <__aeabi_idiv0>
 8000cf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d00:	f000 f806 	bl	8000d10 <__udivmoddi4>
 8000d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0c:	b004      	add	sp, #16
 8000d0e:	4770      	bx	lr

08000d10 <__udivmoddi4>:
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	468c      	mov	ip, r1
 8000d16:	460d      	mov	r5, r1
 8000d18:	4604      	mov	r4, r0
 8000d1a:	9e08      	ldr	r6, [sp, #32]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d151      	bne.n	8000dc4 <__udivmoddi4+0xb4>
 8000d20:	428a      	cmp	r2, r1
 8000d22:	4617      	mov	r7, r2
 8000d24:	d96d      	bls.n	8000e02 <__udivmoddi4+0xf2>
 8000d26:	fab2 fe82 	clz	lr, r2
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d00b      	beq.n	8000d48 <__udivmoddi4+0x38>
 8000d30:	f1ce 0c20 	rsb	ip, lr, #32
 8000d34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d4c:	0c25      	lsrs	r5, r4, #16
 8000d4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d52:	fa1f f987 	uxth.w	r9, r7
 8000d56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d5e:	fb08 f309 	mul.w	r3, r8, r9
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x6c>
 8000d66:	19ed      	adds	r5, r5, r7
 8000d68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d6c:	f080 8123 	bcs.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f240 8120 	bls.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aed      	subs	r5, r5, r3
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	fb00 f909 	mul.w	r9, r0, r9
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x98>
 8000d94:	19e4      	adds	r4, r4, r7
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	f080 810a 	bcs.w	8000fb2 <__udivmoddi4+0x2a2>
 8000d9e:	45a1      	cmp	r9, r4
 8000da0:	f240 8107 	bls.w	8000fb2 <__udivmoddi4+0x2a2>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 0409 	sub.w	r4, r4, r9
 8000dac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db0:	2100      	movs	r1, #0
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d061      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000db6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6034      	str	r4, [r6, #0]
 8000dbe:	6073      	str	r3, [r6, #4]
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xc8>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d054      	beq.n	8000e76 <__udivmoddi4+0x166>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	f040 808e 	bne.w	8000efe <__udivmoddi4+0x1ee>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xdc>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80fa 	bhi.w	8000fe0 <__udivmoddi4+0x2d0>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb65 0503 	sbc.w	r5, r5, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	46ac      	mov	ip, r5
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d03f      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000dfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b912      	cbnz	r2, 8000e0a <__udivmoddi4+0xfa>
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e0a:	fab7 fe87 	clz	lr, r7
 8000e0e:	f1be 0f00 	cmp.w	lr, #0
 8000e12:	d134      	bne.n	8000e7e <__udivmoddi4+0x16e>
 8000e14:	1beb      	subs	r3, r5, r7
 8000e16:	0c3a      	lsrs	r2, r7, #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e22:	0c25      	lsrs	r5, r4, #16
 8000e24:	fb02 3318 	mls	r3, r2, r8, r3
 8000e28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2c:	fb0c f308 	mul.w	r3, ip, r8
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x134>
 8000e34:	19ed      	adds	r5, r5, r7
 8000e36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x132>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	f200 80d1 	bhi.w	8000fe4 <__udivmoddi4+0x2d4>
 8000e42:	4680      	mov	r8, r0
 8000e44:	1aed      	subs	r5, r5, r3
 8000e46:	b2a3      	uxth	r3, r4
 8000e48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e54:	fb0c fc00 	mul.w	ip, ip, r0
 8000e58:	45a4      	cmp	ip, r4
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x15c>
 8000e5c:	19e4      	adds	r4, r4, r7
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x15a>
 8000e64:	45a4      	cmp	ip, r4
 8000e66:	f200 80b8 	bhi.w	8000fda <__udivmoddi4+0x2ca>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	eba4 040c 	sub.w	r4, r4, ip
 8000e70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e74:	e79d      	b.n	8000db2 <__udivmoddi4+0xa2>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	f1ce 0420 	rsb	r4, lr, #32
 8000e82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e8e:	0c3a      	lsrs	r2, r7, #16
 8000e90:	fa25 f404 	lsr.w	r4, r5, r4
 8000e94:	ea48 0803 	orr.w	r8, r8, r3
 8000e98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ea0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000eac:	fb01 f30c 	mul.w	r3, r1, ip
 8000eb0:	42ab      	cmp	r3, r5
 8000eb2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000eb6:	d909      	bls.n	8000ecc <__udivmoddi4+0x1bc>
 8000eb8:	19ed      	adds	r5, r5, r7
 8000eba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ebe:	f080 808a 	bcs.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec2:	42ab      	cmp	r3, r5
 8000ec4:	f240 8087 	bls.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	443d      	add	r5, r7
 8000ecc:	1aeb      	subs	r3, r5, r3
 8000ece:	fa1f f588 	uxth.w	r5, r8
 8000ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ed6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ede:	fb00 f30c 	mul.w	r3, r0, ip
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1e6>
 8000ee6:	19ed      	adds	r5, r5, r7
 8000ee8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eec:	d26f      	bcs.n	8000fce <__udivmoddi4+0x2be>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d96d      	bls.n	8000fce <__udivmoddi4+0x2be>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	443d      	add	r5, r7
 8000ef6:	1aeb      	subs	r3, r5, r3
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	e78f      	b.n	8000e1e <__udivmoddi4+0x10e>
 8000efe:	f1c1 0720 	rsb	r7, r1, #32
 8000f02:	fa22 f807 	lsr.w	r8, r2, r7
 8000f06:	408b      	lsls	r3, r1
 8000f08:	fa05 f401 	lsl.w	r4, r5, r1
 8000f0c:	ea48 0303 	orr.w	r3, r8, r3
 8000f10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f2a:	fa1f f883 	uxth.w	r8, r3
 8000f2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f32:	fb09 f408 	mul.w	r4, r9, r8
 8000f36:	42ac      	cmp	r4, r5
 8000f38:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x244>
 8000f42:	18ed      	adds	r5, r5, r3
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d243      	bcs.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	d941      	bls.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	441d      	add	r5, r3
 8000f54:	1b2d      	subs	r5, r5, r4
 8000f56:	fa1f fe8e 	uxth.w	lr, lr
 8000f5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x26e>
 8000f6e:	18e4      	adds	r4, r4, r3
 8000f70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f74:	d229      	bcs.n	8000fca <__udivmoddi4+0x2ba>
 8000f76:	45a0      	cmp	r8, r4
 8000f78:	d927      	bls.n	8000fca <__udivmoddi4+0x2ba>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	441c      	add	r4, r3
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba4 0408 	sub.w	r4, r4, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454c      	cmp	r4, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	464d      	mov	r5, r9
 8000f90:	d315      	bcc.n	8000fbe <__udivmoddi4+0x2ae>
 8000f92:	d012      	beq.n	8000fba <__udivmoddi4+0x2aa>
 8000f94:	b156      	cbz	r6, 8000fac <__udivmoddi4+0x29c>
 8000f96:	ebba 030e 	subs.w	r3, sl, lr
 8000f9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000fa2:	40cb      	lsrs	r3, r1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	40cc      	lsrs	r4, r1
 8000fa8:	6037      	str	r7, [r6, #0]
 8000faa:	6074      	str	r4, [r6, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e6f8      	b.n	8000da8 <__udivmoddi4+0x98>
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	e6e0      	b.n	8000d7c <__udivmoddi4+0x6c>
 8000fba:	45c2      	cmp	sl, r8
 8000fbc:	d2ea      	bcs.n	8000f94 <__udivmoddi4+0x284>
 8000fbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7e4      	b.n	8000f94 <__udivmoddi4+0x284>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	e7d7      	b.n	8000f7e <__udivmoddi4+0x26e>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	e791      	b.n	8000ef6 <__udivmoddi4+0x1e6>
 8000fd2:	4681      	mov	r9, r0
 8000fd4:	e7be      	b.n	8000f54 <__udivmoddi4+0x244>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	e778      	b.n	8000ecc <__udivmoddi4+0x1bc>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	443c      	add	r4, r7
 8000fde:	e745      	b.n	8000e6c <__udivmoddi4+0x15c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xe6>
 8000fe4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe8:	443d      	add	r5, r7
 8000fea:	e72b      	b.n	8000e44 <__udivmoddi4+0x134>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001002:	2235      	movs	r2, #53	; 0x35
 8001004:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001008:	220b      	movs	r2, #11
 800100a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <BSP_LCD_Init+0xcc>)
 800100e:	f240 121b 	movw	r2, #283	; 0x11b
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001016:	f240 2215 	movw	r2, #533	; 0x215
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <BSP_LCD_Init+0xcc>)
 800101e:	f240 121d 	movw	r2, #285	; 0x11d
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001026:	f240 2235 	movw	r2, #565	; 0x235
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800102c:	2100      	movs	r1, #0
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001030:	f000 fcae 	bl	8001990 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001036:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800103a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <BSP_LCD_Init+0xcc>)
 800103e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001042:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <BSP_LCD_Init+0xcc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <BSP_LCD_Init+0xcc>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <BSP_LCD_Init+0xcc>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <BSP_LCD_Init+0xd0>)
 8001078:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <BSP_LCD_Init+0xcc>)
 800107c:	f002 fcc4 	bl	8003a08 <HAL_LTDC_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001086:	2100      	movs	r1, #0
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <BSP_LCD_Init+0xcc>)
 800108a:	f000 fba7 	bl	80017dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001090:	f002 fba0 	bl	80037d4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <BSP_LCD_Init+0xd4>)
 800109c:	f002 fa58 	bl	8003550 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2108      	movs	r1, #8
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <BSP_LCD_Init+0xd8>)
 80010a6:	f002 fa53 	bl	8003550 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80010aa:	f00c f821 	bl	800d0f0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <BSP_LCD_Init+0xdc>)
 80010b0:	f000 f8d8 	bl	8001264 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200004b0 	.word	0x200004b0
 80010c0:	40016800 	.word	0x40016800
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40022800 	.word	0x40022800
 80010cc:	20000000 	.word	0x20000000

080010d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <BSP_LCD_GetXSize+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <BSP_LCD_GetXSize+0x24>)
 80010da:	2134      	movs	r1, #52	; 0x34
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	3360      	adds	r3, #96	; 0x60
 80010e4:	681b      	ldr	r3, [r3, #0]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	200003a8 	.word	0x200003a8
 80010f4:	200004b0 	.word	0x200004b0

080010f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <BSP_LCD_GetYSize+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <BSP_LCD_GetYSize+0x24>)
 8001102:	2134      	movs	r1, #52	; 0x34
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3364      	adds	r3, #100	; 0x64
 800110c:	681b      	ldr	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	200003a8 	.word	0x200003a8
 800111c:	200004b0 	.word	0x200004b0

08001120 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001130:	f7ff ffce 	bl	80010d0 <BSP_LCD_GetXSize>
 8001134:	4603      	mov	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800113c:	f7ff ffdc 	bl	80010f8 <BSP_LCD_GetYSize>
 8001140:	4603      	mov	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800116c:	2307      	movs	r3, #7
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001170:	f7ff ffae 	bl	80010d0 <BSP_LCD_GetXSize>
 8001174:	4603      	mov	r3, r0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001178:	f7ff ffbe 	bl	80010f8 <BSP_LCD_GetYSize>
 800117c:	4603      	mov	r3, r0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800118a:	f002 fbff 	bl	800398c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	4911      	ldr	r1, [pc, #68]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3304      	adds	r3, #4
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	490c      	ldr	r1, [pc, #48]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80011b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3740      	adds	r7, #64	; 0x40
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200004b0 	.word	0x200004b0
 80011d8:	200003ac 	.word	0x200003ac
 80011dc:	20000000 	.word	0x20000000

080011e0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <BSP_LCD_SelectLayer+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
} 
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200003a8 	.word	0x200003a8

08001200 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <BSP_LCD_SetTextColor+0x28>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <BSP_LCD_SetTextColor+0x2c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	200003a8 	.word	0x200003a8
 800122c:	200003ac 	.word	0x200003ac

08001230 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <BSP_LCD_SetBackColor+0x2c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4908      	ldr	r1, [pc, #32]	; (8001260 <BSP_LCD_SetBackColor+0x30>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3304      	adds	r3, #4
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200003a8 	.word	0x200003a8
 8001260:	200003ac 	.word	0x200003ac

08001264 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <BSP_LCD_SetFont+0x2c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <BSP_LCD_SetFont+0x30>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	3308      	adds	r3, #8
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200003a8 	.word	0x200003a8
 8001294:	200003ac 	.word	0x200003ac

08001298 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <BSP_LCD_GetFont+0x24>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <BSP_LCD_GetFont+0x28>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	3308      	adds	r3, #8
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003a8 	.word	0x200003a8
 80012c0:	200003ac 	.word	0x200003ac

080012c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <BSP_LCD_Clear+0x48>)
 80012ce:	681c      	ldr	r4, [r3, #0]
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <BSP_LCD_Clear+0x48>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <BSP_LCD_Clear+0x4c>)
 80012d6:	2134      	movs	r1, #52	; 0x34
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	335c      	adds	r3, #92	; 0x5c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461d      	mov	r5, r3
 80012e4:	f7ff fef4 	bl	80010d0 <BSP_LCD_GetXSize>
 80012e8:	4606      	mov	r6, r0
 80012ea:	f7ff ff05 	bl	80010f8 <BSP_LCD_GetYSize>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	4632      	mov	r2, r6
 80012fc:	4629      	mov	r1, r5
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fc1a 	bl	8001b38 <LL_FillBuffer>
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	200003a8 	.word	0x200003a8
 8001310:	200004b0 	.word	0x200004b0

08001314 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	492d      	ldr	r1, [pc, #180]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800133a:	460b      	mov	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4403      	add	r3, r0
 8001344:	3304      	adds	r3, #4
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4403      	add	r3, r0
 8001354:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	491f      	ldr	r1, [pc, #124]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	88da      	ldrh	r2, [r3, #6]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	fb12 f303 	smulbb	r3, r2, r3
 8001374:	b29c      	uxth	r4, r3
 8001376:	f7ff feab 	bl	80010d0 <BSP_LCD_GetXSize>
 800137a:	4603      	mov	r3, r0
 800137c:	b298      	uxth	r0, r3
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4915      	ldr	r1, [pc, #84]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3308      	adds	r3, #8
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	4602      	mov	r2, r0
 8001396:	4621      	mov	r1, r4
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f987 	bl	80016ac <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff1b 	bl	8001200 <BSP_LCD_SetTextColor>
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200003a8 	.word	0x200003a8
 80013d8:	200003ac 	.word	0x200003ac

080013dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	460b      	mov	r3, r1
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3308      	adds	r3, #8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4c14      	ldr	r4, [pc, #80]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4423      	add	r3, r4
 800141a:	3308      	adds	r3, #8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001420:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4423      	add	r3, r4
 8001434:	3308      	adds	r3, #8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	3307      	adds	r3, #7
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <BSP_LCD_DisplayChar+0x66>
 8001440:	3307      	adds	r3, #7
 8001442:	10db      	asrs	r3, r3, #3
 8001444:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001448:	18ca      	adds	r2, r1, r3
 800144a:	88b9      	ldrh	r1, [r7, #4]
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 faba 	bl	80019c8 <DrawChar>
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	200003a8 	.word	0x200003a8
 8001460:	200003ac 	.word	0x200003ac

08001464 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	460b      	mov	r3, r1
 8001474:	81bb      	strh	r3, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800147a:	2301      	movs	r3, #1
 800147c:	83fb      	strh	r3, [r7, #30]
 800147e:	2300      	movs	r3, #0
 8001480:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800148e:	e002      	b.n	8001496 <BSP_LCD_DisplayStringAt+0x32>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3301      	adds	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	617a      	str	r2, [r7, #20]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f6      	bne.n	8001490 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80014a2:	f7ff fe15 	bl	80010d0 <BSP_LCD_GetXSize>
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	494f      	ldr	r1, [pc, #316]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3308      	adds	r3, #8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01c      	beq.n	8001502 <BSP_LCD_DisplayStringAt+0x9e>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <BSP_LCD_DisplayStringAt+0x98>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12e      	bne.n	800152e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4843      	ldr	r0, [pc, #268]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	3308      	adds	r3, #8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	fb03 f301 	mul.w	r3, r3, r1
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	4413      	add	r3, r2
 80014f8:	83fb      	strh	r3, [r7, #30]
      break;
 80014fa:	e01b      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001500:	e018      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b299      	uxth	r1, r3
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4836      	ldr	r0, [pc, #216]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3308      	adds	r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	fb11 f303 	smulbb	r3, r1, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	83fb      	strh	r3, [r7, #30]
      break;
 800152c:	e002      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	83fb      	strh	r3, [r7, #30]
      break;
 8001532:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <BSP_LCD_DisplayStringAt+0xde>
 800153a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da1d      	bge.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001546:	e01a      	b.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	89b9      	ldrh	r1, [r7, #12]
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff43 	bl	80013dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4923      	ldr	r1, [pc, #140]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	889a      	ldrh	r2, [r3, #4]
 800156c:	8bfb      	ldrh	r3, [r7, #30]
 800156e:	4413      	add	r3, r2
 8001570:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
    i++;
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	3301      	adds	r3, #1
 800157c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2dc      	uxtb	r4, r3
 800158c:	f7ff fda0 	bl	80010d0 <BSP_LCD_GetXSize>
 8001590:	4605      	mov	r5, r0
 8001592:	8bb9      	ldrh	r1, [r7, #28]
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4403      	add	r3, r0
 80015a4:	3308      	adds	r3, #8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	fb03 f301 	mul.w	r3, r3, r1
 80015ae:	1aeb      	subs	r3, r5, r3
 80015b0:	b299      	uxth	r1, r3
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3308      	adds	r3, #8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	4299      	cmp	r1, r3
 80015ca:	bf2c      	ite	cs
 80015cc:	2301      	movcs	r3, #1
 80015ce:	2300      	movcc	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4023      	ands	r3, r4
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1b6      	bne.n	8001548 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003a8 	.word	0x200003a8
 80015e8:	200003ac 	.word	0x200003ac

080015ec <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015f8:	f7ff fe4e 	bl	8001298 <BSP_LCD_GetFont>
 80015fc:	4603      	mov	r3, r0
 80015fe:	88db      	ldrh	r3, [r3, #6]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	fb12 f303 	smulbb	r3, r2, r3
 8001606:	b299      	uxth	r1, r3
 8001608:	2303      	movs	r3, #3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff29 	bl	8001464 <BSP_LCD_DisplayStringAt>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	460b      	mov	r3, r1
 800162a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001632:	2134      	movs	r1, #52	; 0x34
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3348      	adds	r3, #72	; 0x48
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d116      	bne.n	8001670 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001648:	2134      	movs	r1, #52	; 0x34
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	335c      	adds	r3, #92	; 0x5c
 8001652:	681c      	ldr	r4, [r3, #0]
 8001654:	88bd      	ldrh	r5, [r7, #4]
 8001656:	f7ff fd3b 	bl	80010d0 <BSP_LCD_GetXSize>
 800165a:	4603      	mov	r3, r0
 800165c:	fb03 f205 	mul.w	r2, r3, r5
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4423      	add	r3, r4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b292      	uxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800166e:	e015      	b.n	800169c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001676:	2134      	movs	r1, #52	; 0x34
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	335c      	adds	r3, #92	; 0x5c
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	88bd      	ldrh	r5, [r7, #4]
 8001684:	f7ff fd24 	bl	80010d0 <BSP_LCD_GetXSize>
 8001688:	4603      	mov	r3, r0
 800168a:	fb03 f205 	mul.w	r2, r3, r5
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4423      	add	r3, r4
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	200003a8 	.word	0x200003a8
 80016a8:	200004b0 	.word	0x200004b0

080016ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <BSP_LCD_FillRect+0xec>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd8c 	bl	8001200 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2b      	ldr	r2, [pc, #172]	; (800179c <BSP_LCD_FillRect+0xf0>)
 80016ee:	2134      	movs	r1, #52	; 0x34
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3348      	adds	r3, #72	; 0x48
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d114      	bne.n	8001728 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <BSP_LCD_FillRect+0xf0>)
 8001704:	2134      	movs	r1, #52	; 0x34
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	335c      	adds	r3, #92	; 0x5c
 800170e:	681c      	ldr	r4, [r3, #0]
 8001710:	f7ff fcde 	bl	80010d0 <BSP_LCD_GetXSize>
 8001714:	4602      	mov	r2, r0
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	fb03 f202 	mul.w	r2, r3, r2
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4423      	add	r3, r4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e013      	b.n	8001750 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <BSP_LCD_FillRect+0xf0>)
 800172e:	2134      	movs	r1, #52	; 0x34
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	335c      	adds	r3, #92	; 0x5c
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	f7ff fcc9 	bl	80010d0 <BSP_LCD_GetXSize>
 800173e:	4602      	mov	r2, r0
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4423      	add	r3, r4
 800174e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	68fd      	ldr	r5, [r7, #12]
 8001756:	887e      	ldrh	r6, [r7, #2]
 8001758:	f8b7 8000 	ldrh.w	r8, [r7]
 800175c:	f7ff fcb8 	bl	80010d0 <BSP_LCD_GetXSize>
 8001760:	4602      	mov	r2, r0
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	1ad1      	subs	r1, r2, r3
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <BSP_LCD_FillRect+0xec>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	9100      	str	r1, [sp, #0]
 800177c:	4643      	mov	r3, r8
 800177e:	4632      	mov	r2, r6
 8001780:	4629      	mov	r1, r5
 8001782:	4620      	mov	r0, r4
 8001784:	f000 f9d8 	bl	8001b38 <LL_FillBuffer>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001792:	bf00      	nop
 8001794:	200003a8 	.word	0x200003a8
 8001798:	200003ac 	.word	0x200003ac
 800179c:	200004b0 	.word	0x200004b0

080017a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	6992      	ldr	r2, [r2, #24]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <BSP_LCD_DisplayOn+0x34>)
 80017bc:	f001 fec8 	bl	8003550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80017c0:	2201      	movs	r2, #1
 80017c2:	2108      	movs	r1, #8
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <BSP_LCD_DisplayOn+0x38>)
 80017c6:	f001 fec3 	bl	8003550 <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200004b0 	.word	0x200004b0
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40022800 	.word	0x40022800

080017dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017e6:	4a64      	ldr	r2, [pc, #400]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	4a52      	ldr	r2, [pc, #328]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001876:	4a40      	ldr	r2, [pc, #256]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800188e:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80018be:	2310      	movs	r3, #16
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80018ce:	230e      	movs	r3, #14
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <BSP_LCD_MspInit+0x1a0>)
 80018da:	f001 fc8f 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80018e8:	2309      	movs	r3, #9
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <BSP_LCD_MspInit+0x1a4>)
 80018f4:	f001 fc82 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80018f8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001902:	230e      	movs	r3, #14
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 800190e:	f001 fc75 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001912:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800191c:	230e      	movs	r3, #14
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <BSP_LCD_MspInit+0x1ac>)
 8001928:	f001 fc68 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800192c:	23f7      	movs	r3, #247	; 0xf7
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001934:	230e      	movs	r3, #14
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 8001940:	f001 fc5c 	bl	80031fc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 8001956:	f001 fc51 	bl	80031fc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 800196a:	f001 fc47 	bl	80031fc <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	; 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40021800 	.word	0x40021800
 8001984:	40022000 	.word	0x40022000
 8001988:	40022400 	.word	0x40022400
 800198c:	40022800 	.word	0x40022800

08001990 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 800199c:	2208      	movs	r2, #8
 800199e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a2:	22c0      	movs	r2, #192	; 0xc0
 80019a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a8:	2205      	movs	r2, #5
 80019aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019b6:	f004 f815 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200003c4 	.word	0x200003c4

080019c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <DrawChar+0x168>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4953      	ldr	r1, [pc, #332]	; (8001b34 <DrawChar+0x16c>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	88db      	ldrh	r3, [r3, #6]
 80019f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <DrawChar+0x168>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <DrawChar+0x16c>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001a10:	8a3b      	ldrh	r3, [r7, #16]
 8001a12:	3307      	adds	r3, #7
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da00      	bge.n	8001a1a <DrawChar+0x52>
 8001a18:	3307      	adds	r3, #7
 8001a1a:	10db      	asrs	r3, r3, #3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	8a3b      	ldrh	r3, [r7, #16]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e076      	b.n	8001b1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a30:	8a3b      	ldrh	r3, [r7, #16]
 8001a32:	3307      	adds	r3, #7
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da00      	bge.n	8001a3a <DrawChar+0x72>
 8001a38:	3307      	adds	r3, #7
 8001a3a:	10db      	asrs	r3, r3, #3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fb03 f302 	mul.w	r3, r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001a4a:	8a3b      	ldrh	r3, [r7, #16]
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da00      	bge.n	8001a54 <DrawChar+0x8c>
 8001a52:	3307      	adds	r3, #7
 8001a54:	10db      	asrs	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <DrawChar+0x98>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <DrawChar+0xa0>
 8001a5e:	e00c      	b.n	8001a7a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	617b      	str	r3, [r7, #20]
      break;
 8001a66:	e016      	b.n	8001a96 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	3201      	adds	r2, #1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
      break;
 8001a78:	e00d      	b.n	8001a96 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	3202      	adds	r2, #2
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e036      	b.n	8001b0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001a9c:	8a3a      	ldrh	r2, [r7, #16]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <DrawChar+0x168>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <DrawChar+0x16c>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fda0 	bl	800161c <BSP_LCD_DrawPixel>
 8001adc:	e012      	b.n	8001b04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <DrawChar+0x168>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4911      	ldr	r1, [pc, #68]	; (8001b34 <DrawChar+0x16c>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fd8c 	bl	800161c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	8a3a      	ldrh	r2, [r7, #16]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8c4      	bhi.n	8001a9c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	8a7a      	ldrh	r2, [r7, #18]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d884      	bhi.n	8001a30 <DrawChar+0x68>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200003a8 	.word	0x200003a8
 8001b34:	200003ac 	.word	0x200003ac

08001b38 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b4c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <LL_FillBuffer+0x8c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <LL_FillBuffer+0x90>)
 8001b54:	2134      	movs	r1, #52	; 0x34
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3348      	adds	r3, #72	; 0x48
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d103      	bne.n	8001b6c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	e002      	b.n	8001b72 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <LL_FillBuffer+0x94>)
 8001b7c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b80:	f001 f8a4 	bl	8002ccc <HAL_DMA2D_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b8e:	f001 f9fb 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10e      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001ba4:	f001 f8dc 	bl	8002d60 <HAL_DMA2D_Start>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001bae:	210a      	movs	r1, #10
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001bb2:	f001 f900 	bl	8002db6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000368 	.word	0x20000368
 8001bc4:	200003a8 	.word	0x200003a8
 8001bc8:	200004b0 	.word	0x200004b0
 8001bcc:	4002b000 	.word	0x4002b000

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fc3b 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f00d fd58 	bl	800f6a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f00d fabe 	bl	800f178 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	20000558 	.word	0x20000558

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000558 	.word	0x20000558

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_Delay+0x40>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3f7      	bcc.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000010 	.word	0x20000010

08001c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e031      	b.n	8001d06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f00d fa8f 	bl	800f1dc <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_ADC_Init+0x84>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa02 	bl	80020e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	ffffeefd 	.word	0xffffeefd

08001d14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x1a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e085      	b.n	8001e3a <HAL_ADC_Start+0x126>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d018      	beq.n	8001d76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6892      	ldr	r2, [r2, #8]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_ADC_Start+0x134>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <HAL_ADC_Start+0x138>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9a      	lsrs	r2, r3, #18
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d059      	beq.n	8001e38 <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_ADC_Start+0x13c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_ADC_Start+0x140>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11c      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	6892      	ldr	r2, [r2, #8]
 8001e08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e013      	b.n	8001e38 <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_ADC_Start+0x144>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_Start+0x124>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	6892      	ldr	r2, [r2, #8]
 8001e32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e36:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000124 	.word	0x20000124
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	fffff8fe 	.word	0xfffff8fe
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000

08001e5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e117      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x24c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d936      	bls.n	8001f12 <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d10a      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68d1      	ldr	r1, [r2, #12]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	0612      	lsls	r2, r2, #24
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	e037      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461c      	mov	r4, r3
 8001f00:	4623      	mov	r3, r4
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4423      	add	r3, r4
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f303 	lsl.w	r3, r0, r3
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	e023      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	400b      	ands	r3, r1
 8001f34:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4423      	add	r3, r4
 8001f52:	fa00 f303 	lsl.w	r3, r0, r3
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d824      	bhi.n	8001fac <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b05      	subs	r3, #5
 8001f78:	221f      	movs	r2, #31
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4003      	ands	r3, r0
 8001f82:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461c      	mov	r4, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b05      	subs	r3, #5
 8001fa2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8001faa:	e04c      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d824      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b23      	subs	r3, #35	; 0x23
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b23      	subs	r3, #35	; 0x23
 8001ff4:	fa04 f303 	lsl.w	r3, r4, r3
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	630b      	str	r3, [r1, #48]	; 0x30
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4003      	ands	r3, r0
 800201e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461c      	mov	r4, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b41      	subs	r3, #65	; 0x41
 800203e:	fa04 f303 	lsl.w	r3, r4, r3
 8002042:	4303      	orrs	r3, r0
 8002044:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d109      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002062:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d125      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <HAL_ADC_ConfigChannel+0x208>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b11      	cmp	r3, #17
 800207e:	d11c      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d111      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x264>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x268>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	0c9a      	lsrs	r2, r3, #18
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc90      	pop	{r4, r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	10000012 	.word	0x10000012
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40012300 	.word	0x40012300
 80020dc:	20000124 	.word	0x20000124
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020ee:	4b77      	ldr	r3, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	4974      	ldr	r1, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6851      	ldr	r1, [r2, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6912      	ldr	r2, [r2, #16]
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	6852      	ldr	r2, [r2, #4]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	6851      	ldr	r1, [r2, #4]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6892      	ldr	r2, [r2, #8]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6891      	ldr	r1, [r2, #8]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <ADC_Init+0x1ec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6891      	ldr	r1, [r2, #8]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6891      	ldr	r1, [r2, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	6892      	ldr	r2, [r2, #8]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	6892      	ldr	r2, [r2, #8]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	6891      	ldr	r1, [r2, #8]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6992      	ldr	r2, [r2, #24]
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01b      	beq.n	8002242 <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6852      	ldr	r2, [r2, #4]
 8002214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002228:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6851      	ldr	r1, [r2, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	3a01      	subs	r2, #1
 800223a:	0352      	lsls	r2, r2, #13
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	e007      	b.n	8002252 <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800225c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	69d2      	ldr	r2, [r2, #28]
 8002270:	3a01      	subs	r2, #1
 8002272:	0512      	lsls	r2, r2, #20
 8002274:	430a      	orrs	r2, r1
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6891      	ldr	r1, [r2, #8]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002296:	0252      	lsls	r2, r2, #9
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6891      	ldr	r1, [r2, #8]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6952      	ldr	r2, [r2, #20]
 80022ba:	0292      	lsls	r2, r2, #10
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <NVIC_SetPriorityGrouping+0x44>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0000 	.word	0x05fa0000

0800231c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002342:	4909      	ldr	r1, [pc, #36]	; (8002368 <NVIC_EnableIRQ+0x30>)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0b      	bge.n	8002398 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <NVIC_SetPriority+0x4c>)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	3b04      	subs	r3, #4
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002396:	e009      	b.n	80023ac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	4908      	ldr	r1, [pc, #32]	; (80023bc <NVIC_SetPriority+0x50>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	2201      	movs	r2, #1
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	401a      	ands	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002406:	2101      	movs	r1, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	1e59      	subs	r1, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff90 	bl	800236c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff2f 	bl	80022d4 <NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff44 	bl	800231c <NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff90 	bl	80023c0 <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5f 	bl	800236c <NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff37 	bl	8002338 <NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d106      	bne.n	8002508 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002506:	e005      	b.n	8002514 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002528:	f000 f802 	bl	8002530 <HAL_SYSTICK_Callback>
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e054      	b.n	80025fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f5b      	ldrb	r3, [r3, #29]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f00c fe74 	bl	800f250 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_CRC_Init+0xc4>)
 800257c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	f022 0218 	bic.w	r2, r2, #24
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	e00c      	b.n	80025aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	461a      	mov	r2, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f834 	bl	8002608 <HAL_CRCEx_Polynomial_Set>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e028      	b.n	80025fc <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	795b      	ldrb	r3, [r3, #5]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	e004      	b.n	80025c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6912      	ldr	r2, [r2, #16]
 80025c6:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6952      	ldr	r2, [r2, #20]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	6892      	ldr	r2, [r2, #8]
 80025e8:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6992      	ldr	r2, [r2, #24]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	04c11db7 	.word	0x04c11db7

08002608 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002614:	231f      	movs	r3, #31
 8002616:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8002618:	bf00      	nop
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <HAL_CRCEx_Polynomial_Set+0x2c>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	617a      	str	r2, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f2      	bne.n	800261a <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b18      	cmp	r3, #24
 8002638:	d843      	bhi.n	80026c2 <HAL_CRCEx_Polynomial_Set+0xba>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_CRCEx_Polynomial_Set+0x38>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	080026c3 	.word	0x080026c3
 8002644:	080026c3 	.word	0x080026c3
 8002648:	080026c3 	.word	0x080026c3
 800264c:	080026c3 	.word	0x080026c3
 8002650:	080026c3 	.word	0x080026c3
 8002654:	080026c3 	.word	0x080026c3
 8002658:	080026c3 	.word	0x080026c3
 800265c:	080026c3 	.word	0x080026c3
 8002660:	080026b9 	.word	0x080026b9
 8002664:	080026c3 	.word	0x080026c3
 8002668:	080026c3 	.word	0x080026c3
 800266c:	080026c3 	.word	0x080026c3
 8002670:	080026c3 	.word	0x080026c3
 8002674:	080026c3 	.word	0x080026c3
 8002678:	080026c3 	.word	0x080026c3
 800267c:	080026c3 	.word	0x080026c3
 8002680:	080026af 	.word	0x080026af
 8002684:	080026c3 	.word	0x080026c3
 8002688:	080026c3 	.word	0x080026c3
 800268c:	080026c3 	.word	0x080026c3
 8002690:	080026c3 	.word	0x080026c3
 8002694:	080026c3 	.word	0x080026c3
 8002698:	080026c3 	.word	0x080026c3
 800269c:	080026c3 	.word	0x080026c3
 80026a0:	080026a5 	.word	0x080026a5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d90d      	bls.n	80026c6 <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e01f      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b07      	cmp	r3, #7
 80026b2:	d90a      	bls.n	80026ca <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01a      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	d907      	bls.n	80026ce <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e015      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 80026c2:	bf00      	nop
 80026c4:	e004      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ce:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	f022 0118 	bic.w	r1, r2, #24
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fa92 	bl	8001c30 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e099      	b.n	800284c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002738:	e00f      	b.n	800275a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273a:	f7ff fa79 	bl	8001c30 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	d908      	bls.n	800275a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2203      	movs	r2, #3
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e078      	b.n	800284c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e8      	bne.n	800273a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_DMA_Init+0x158>)
 8002774:	4013      	ands	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d117      	bne.n	800281e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f9e9 	bl	8002bd8 <DMA_CheckFifoParam>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800281a:	2301      	movs	r3, #1
 800281c:	e016      	b.n	800284c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9a0 	bl	8002b6c <DMA_CalcBaseAndBitshift>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	f010803f 	.word	0xf010803f

08002858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002864:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <HAL_DMA_IRQHandler+0x258>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_DMA_IRQHandler+0x25c>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2208      	movs	r2, #8
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	f022 0204 	bic.w	r2, r2, #4
 80028aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2208      	movs	r2, #8
 80028b2:	409a      	lsls	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2201      	movs	r2, #1
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2201      	movs	r2, #1
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2204      	movs	r2, #4
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2204      	movs	r2, #4
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2210      	movs	r2, #16
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d043      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d03c      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2210      	movs	r2, #16
 8002954:	409a      	lsls	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d018      	beq.n	800299a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d024      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e01f      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
 8002998:	e016      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f022 0208 	bic.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	2220      	movs	r2, #32
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 808e 	beq.w	8002af6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8086 	beq.w	8002af6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2220      	movs	r2, #32
 80029f0:	409a      	lsls	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d136      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	f022 0216 	bic.w	r2, r2, #22
 8002a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	6952      	ldr	r2, [r2, #20]
 8002a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_DMA_IRQHandler+0x1da>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	223f      	movs	r2, #63	; 0x3f
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d07d      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
        }
        return;
 8002a6e:	e078      	b.n	8002b62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01c      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d030      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	e02b      	b.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e022      	b.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
 8002ab0:	20000124 	.word	0x20000124
 8002ab4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f022 0210 	bic.w	r2, r2, #16
 8002ad4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d032      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d022      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2205      	movs	r2, #5
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d807      	bhi.n	8002b3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f2      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x2ca>
 8002b3c:	e000      	b.n	8002b40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e000      	b.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b62:	bf00      	nop
    }
  }
}
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop

08002b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b10      	subs	r3, #16
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <DMA_CalcBaseAndBitshift+0x60>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d908      	bls.n	8002bac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8002baa:	e006      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	080160e8 	.word	0x080160e8
 8002bd4:	fffffc00 	.word	0xfffffc00

08002bd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11f      	bne.n	8002c32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d855      	bhi.n	8002ca4 <DMA_CheckFifoParam+0xcc>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x28>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c23 	.word	0x08002c23
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002ca5 	.word	0x08002ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d045      	beq.n	8002ca8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e042      	b.n	8002ca8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c2a:	d13f      	bne.n	8002cac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e03c      	b.n	8002cac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d121      	bne.n	8002c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d836      	bhi.n	8002cb0 <DMA_CheckFifoParam+0xd8>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <DMA_CheckFifoParam+0x70>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c5f 	.word	0x08002c5f
 8002c50:	08002c59 	.word	0x08002c59
 8002c54:	08002c71 	.word	0x08002c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e02f      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d024      	beq.n	8002cb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e021      	b.n	8002cb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c78:	d11e      	bne.n	8002cb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7e:	e01b      	b.n	8002cb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <DMA_CheckFifoParam+0xb4>
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d003      	beq.n	8002c92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c8a:	e018      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e015      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca2:	e00b      	b.n	8002cbc <DMA_CheckFifoParam+0xe4>
      break;
 8002ca4:	bf00      	nop
 8002ca6:	e00a      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e008      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cac:	bf00      	nop
 8002cae:	e006      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;   
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cbc:	bf00      	nop
    }
  } 
  
  return status; 
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e039      	b.n	8002d52 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f00c facc 	bl	800f290 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6852      	ldr	r2, [r2, #4]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d20:	f022 0107 	bic.w	r1, r2, #7
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_DMA2D_Init+0x90>)
 8002d38:	400b      	ands	r3, r1
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68c9      	ldr	r1, [r1, #12]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	ffffc000 	.word	0xffffc000

08002d60 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA2D_Start+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e018      	b.n	8002dae <HAL_DMA2D_Start+0x4e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f98a 	bl	80030b0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d056      	beq.n	8002e84 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002dd6:	f7fe ff2b 	bl	8001c30 <HAL_GetTick>
 8002dda:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002ddc:	e04b      	b.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0a2      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d01a      	beq.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA2D_PollForTransfer+0xa0>
 8002e46:	f7fe fef3 	bl	8001c30 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90f      	bls.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e083      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ac      	beq.n	8002dde <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d061      	beq.n	8002f64 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fec6 	bl	8001c30 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002ea6:	e056      	b.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02e      	beq.n	8002f18 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2229      	movs	r2, #41	; 0x29
 8002f02:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d01a      	beq.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA2D_PollForTransfer+0x180>
 8002f26:	f7fe fe83 	bl	8001c30 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d90f      	bls.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e013      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0a1      	beq.n	8002ea8 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2212      	movs	r2, #18
 8002f6a:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3318      	adds	r3, #24
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMA2D_ConfigLayer+0x34>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e071      	b.n	80030a0 <HAL_DMA2D_ConfigLayer+0x118>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fda:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_DMA2D_ConfigLayer+0x124>)
 8002fdc:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b0a      	cmp	r3, #10
 8002fe4:	d003      	beq.n	8002fee <HAL_DMA2D_ConfigLayer+0x66>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	d107      	bne.n	8002ffe <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e005      	b.n	800300a <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11f      	bne.n	8003050 <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	43d2      	mvns	r2, r2
 800301e:	4011      	ands	r1, r2
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	430a      	orrs	r2, r1
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b0a      	cmp	r3, #10
 8003036:	d003      	beq.n	8003040 <HAL_DMA2D_ConfigLayer+0xb8>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b09      	cmp	r3, #9
 800303e:	d126      	bne.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68d2      	ldr	r2, [r2, #12]
 8003048:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
 800304e:	e01e      	b.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	69d1      	ldr	r1, [r2, #28]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	43d2      	mvns	r2, r2
 800305e:	4011      	ands	r1, r2
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	430a      	orrs	r2, r1
 8003064:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d003      	beq.n	8003080 <HAL_DMA2D_ConfigLayer+0xf8>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b09      	cmp	r3, #9
 800307e:	d106      	bne.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	68d2      	ldr	r2, [r2, #12]
 8003088:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800308c:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	ff03000f 	.word	0xff03000f

080030b0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80030b0:	b480      	push	{r7}
 80030b2:	b08b      	sub	sp, #44	; 0x2c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030dc:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	0410      	lsls	r0, r2, #16
 80030e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e6:	4302      	orrs	r2, r0
 80030e8:	430a      	orrs	r2, r1
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030fc:	d174      	bne.n	80031e8 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003104:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800310c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003114:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d108      	bne.n	8003136 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	431a      	orrs	r2, r3
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e053      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d106      	bne.n	800314c <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	431a      	orrs	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	e048      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d111      	bne.n	8003178 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	0cdb      	lsrs	r3, r3, #19
 8003158:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	0a9b      	lsrs	r3, r3, #10
 800315e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	08db      	lsrs	r3, r3, #3
 8003164:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	02db      	lsls	r3, r3, #11
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	e032      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d117      	bne.n	80031b0 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	0fdb      	lsrs	r3, r3, #31
 8003184:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	0cdb      	lsrs	r3, r3, #19
 800318a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	431a      	orrs	r2, r3
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	03db      	lsls	r3, r3, #15
 80031a6:	431a      	orrs	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e016      	b.n	80031de <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	0f1b      	lsrs	r3, r3, #28
 80031b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	0b1b      	lsrs	r3, r3, #12
 80031c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	011a      	lsls	r2, r3, #4
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	431a      	orrs	r2, r3
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	031b      	lsls	r3, r3, #12
 80031d6:	431a      	orrs	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031e6:	e003      	b.n	80031f0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	60da      	str	r2, [r3, #12]
}
 80031f0:	bf00      	nop
 80031f2:	372c      	adds	r7, #44	; 0x2c
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e175      	b.n	8003508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8164 	bne.w	8003502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x4e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d123      	bne.n	8003292 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00b      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80be 	beq.w	8003502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4a65      	ldr	r2, [pc, #404]	; (800351c <HAL_GPIO_Init+0x320>)
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_GPIO_Init+0x320>)
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_GPIO_Init+0x320>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800339e:	4a60      	ldr	r2, [pc, #384]	; (8003520 <HAL_GPIO_Init+0x324>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_GPIO_Init+0x328>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d037      	beq.n	800343a <HAL_GPIO_Init+0x23e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_GPIO_Init+0x32c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_GPIO_Init+0x23a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a55      	ldr	r2, [pc, #340]	; (800352c <HAL_GPIO_Init+0x330>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <HAL_GPIO_Init+0x236>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_GPIO_Init+0x334>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d025      	beq.n	800342e <HAL_GPIO_Init+0x232>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a53      	ldr	r2, [pc, #332]	; (8003534 <HAL_GPIO_Init+0x338>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <HAL_GPIO_Init+0x22e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_GPIO_Init+0x33c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x22a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_GPIO_Init+0x340>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x226>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a50      	ldr	r2, [pc, #320]	; (8003540 <HAL_GPIO_Init+0x344>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x222>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <HAL_GPIO_Init+0x348>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x21e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4e      	ldr	r2, [pc, #312]	; (8003548 <HAL_GPIO_Init+0x34c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x21a>
 8003412:	2309      	movs	r3, #9
 8003414:	e012      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003416:	230a      	movs	r3, #10
 8003418:	e010      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341a:	2308      	movs	r3, #8
 800341c:	e00e      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341e:	2307      	movs	r3, #7
 8003420:	e00c      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003422:	2306      	movs	r3, #6
 8003424:	e00a      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003426:	2305      	movs	r3, #5
 8003428:	e008      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342a:	2304      	movs	r3, #4
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342e:	2303      	movs	r3, #3
 8003430:	e004      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003432:	2302      	movs	r3, #2
 8003434:	e002      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x240>
 800343a:	2300      	movs	r3, #0
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f002 0203 	and.w	r2, r2, #3
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4093      	lsls	r3, r2
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800344c:	4934      	ldr	r1, [pc, #208]	; (8003520 <HAL_GPIO_Init+0x324>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	3302      	adds	r3, #2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <HAL_GPIO_Init+0x350>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800347e:	4a33      	ldr	r2, [pc, #204]	; (800354c <HAL_GPIO_Init+0x350>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_GPIO_Init+0x350>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_GPIO_Init+0x350>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_GPIO_Init+0x350>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_GPIO_Init+0x350>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d8:	4b1c      	ldr	r3, [pc, #112]	; (800354c <HAL_GPIO_Init+0x350>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <HAL_GPIO_Init+0x350>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	f67f ae86 	bls.w	800321c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3724      	adds	r7, #36	; 0x24
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800
 8003540:	40021c00 	.word	0x40021c00
 8003544:	40022000 	.word	0x40022000
 8003548:	40022400 	.word	0x40022400
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07e      	b.n	8003694 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f00b fe90 	bl	800f2d0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	; 0x24
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6852      	ldr	r2, [r2, #4]
 80035d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6892      	ldr	r2, [r2, #8]
 80035f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e006      	b.n	800360c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800360a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d104      	bne.n	800361e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_I2C_Init+0x118>)
 800362a:	430b      	orrs	r3, r1
 800362c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6911      	ldr	r1, [r2, #16]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6952      	ldr	r2, [r2, #20]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6992      	ldr	r2, [r2, #24]
 8003650:	0212      	lsls	r2, r2, #8
 8003652:	430a      	orrs	r2, r1
 8003654:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	69d1      	ldr	r1, [r2, #28]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a12      	ldr	r2, [r2, #32]
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	02008000 	.word	0x02008000

080036a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d138      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e032      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b20      	cmp	r3, #32
 800374e:	d139      	bne.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800375a:	2302      	movs	r3, #2
 800375c:	e033      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800378c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0c7      	b.n	800397e <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f00b fe00 	bl	800f408 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	6992      	ldr	r2, [r2, #24]
 800381a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800381e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	6991      	ldr	r1, [r2, #24]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6850      	ldr	r0, [r2, #4]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6892      	ldr	r2, [r2, #8]
 8003832:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003838:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6912      	ldr	r2, [r2, #16]
 800383e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 8003850:	400b      	ands	r3, r1
 8003852:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6891      	ldr	r1, [r2, #8]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6990      	ldr	r0, [r2, #24]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4302      	orrs	r2, r0
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68d9      	ldr	r1, [r3, #12]
 800387c:	4b42      	ldr	r3, [pc, #264]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 800387e:	400b      	ands	r3, r1
 8003880:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	68d1      	ldr	r1, [r2, #12]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6a10      	ldr	r0, [r2, #32]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4302      	orrs	r2, r0
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6919      	ldr	r1, [r3, #16]
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 80038ac:	400b      	ands	r3, r1
 80038ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	6911      	ldr	r1, [r2, #16]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4302      	orrs	r2, r0
 80038ca:	430a      	orrs	r2, r1
 80038cc:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6959      	ldr	r1, [r3, #20]
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 80038da:	400b      	ands	r3, r1
 80038dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6951      	ldr	r1, [r2, #20]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4302      	orrs	r2, r0
 80038f8:	430a      	orrs	r2, r1
 80038fa:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800391a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800392a:	68b8      	ldr	r0, [r7, #8]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4302      	orrs	r2, r0
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003936:	4302      	orrs	r2, r0
 8003938:	430a      	orrs	r2, r1
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003946:	f042 0204 	orr.w	r2, r2, #4
 800394a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003956:	f042 0202 	orr.w	r2, r2, #2
 800395a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	6992      	ldr	r2, [r2, #24]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	f000f800 	.word	0xf000f800

0800398c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_LTDC_ConfigLayer+0x1a>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e02c      	b.n	8003a00 <HAL_LTDC_ConfigLayer+0x74>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2134      	movs	r1, #52	; 0x34
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f81f 	bl	8003a24 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdb0      	pop	{r4, r5, r7, pc}

08003a08 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003a16:	b2db      	uxtb	r3, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	0c1b      	lsrs	r3, r3, #16
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	4413      	add	r3, r2
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	01db      	lsls	r3, r3, #7
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3384      	adds	r3, #132	; 0x84
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3384      	adds	r3, #132	; 0x84
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a76:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	01db      	lsls	r3, r3, #7
 8003a82:	4413      	add	r3, r2
 8003a84:	3384      	adds	r3, #132	; 0x84
 8003a86:	4619      	mov	r1, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	4413      	add	r3, r2
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab0:	4413      	add	r3, r2
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	01db      	lsls	r3, r3, #7
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3384      	adds	r3, #132	; 0x84
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3384      	adds	r3, #132	; 0x84
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ada:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	01db      	lsls	r3, r3, #7
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3384      	adds	r3, #132	; 0x84
 8003aea:	4619      	mov	r1, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003afa:	4413      	add	r3, r2
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	01db      	lsls	r3, r3, #7
 8003b0e:	4413      	add	r3, r2
 8003b10:	3384      	adds	r3, #132	; 0x84
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	01db      	lsls	r3, r3, #7
 8003b1e:	440b      	add	r3, r1
 8003b20:	3384      	adds	r3, #132	; 0x84
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f023 0307 	bic.w	r3, r3, #7
 8003b28:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	01db      	lsls	r3, r3, #7
 8003b34:	4413      	add	r3, r2
 8003b36:	3384      	adds	r3, #132	; 0x84
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	01db      	lsls	r3, r3, #7
 8003b66:	4413      	add	r3, r2
 8003b68:	3384      	adds	r3, #132	; 0x84
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	01db      	lsls	r3, r3, #7
 8003b76:	4413      	add	r3, r2
 8003b78:	3384      	adds	r3, #132	; 0x84
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	01db      	lsls	r3, r3, #7
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3384      	adds	r3, #132	; 0x84
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b96:	461a      	mov	r2, r3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	01db      	lsls	r3, r3, #7
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3384      	adds	r3, #132	; 0x84
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	01db      	lsls	r3, r3, #7
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3384      	adds	r3, #132	; 0x84
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	01db      	lsls	r3, r3, #7
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3384      	adds	r3, #132	; 0x84
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	01db      	lsls	r3, r3, #7
 8003bec:	4413      	add	r3, r2
 8003bee:	3384      	adds	r3, #132	; 0x84
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	01db      	lsls	r3, r3, #7
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3384      	adds	r3, #132	; 0x84
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <LTDC_SetConfig+0x348>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	4413      	add	r3, r2
 8003c14:	3384      	adds	r3, #132	; 0x84
 8003c16:	4619      	mov	r1, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	4413      	add	r3, r2
 8003c30:	3384      	adds	r3, #132	; 0x84
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	01db      	lsls	r3, r3, #7
 8003c3e:	4413      	add	r3, r2
 8003c40:	3384      	adds	r3, #132	; 0x84
 8003c42:	461a      	mov	r2, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	01db      	lsls	r3, r3, #7
 8003c52:	4413      	add	r3, r2
 8003c54:	3384      	adds	r3, #132	; 0x84
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 8003c66:	2304      	movs	r3, #4
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e01b      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 8003c74:	2303      	movs	r3, #3
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	e014      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00b      	beq.n	8003c9a <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d007      	beq.n	8003c9a <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d003      	beq.n	8003c9a <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d102      	bne.n	8003ca0 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e001      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	01db      	lsls	r3, r3, #7
 8003cae:	4413      	add	r3, r2
 8003cb0:	3384      	adds	r3, #132	; 0x84
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	01db      	lsls	r3, r3, #7
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3384      	adds	r3, #132	; 0x84
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3384      	adds	r3, #132	; 0x84
 8003cd8:	4618      	mov	r0, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	69f9      	ldr	r1, [r7, #28]
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	3303      	adds	r3, #3
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	01db      	lsls	r3, r3, #7
 8003d06:	4413      	add	r3, r2
 8003d08:	3384      	adds	r3, #132	; 0x84
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	01db      	lsls	r3, r3, #7
 8003d16:	4413      	add	r3, r2
 8003d18:	3384      	adds	r3, #132	; 0x84
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <LTDC_SetConfig+0x34c>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	01db      	lsls	r3, r3, #7
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3384      	adds	r3, #132	; 0x84
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	01db      	lsls	r3, r3, #7
 8003d42:	4413      	add	r3, r2
 8003d44:	3384      	adds	r3, #132	; 0x84
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	01db      	lsls	r3, r3, #7
 8003d52:	440b      	add	r3, r1
 8003d54:	3384      	adds	r3, #132	; 0x84
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	fffff8f8 	.word	0xfffff8f8
 8003d70:	fffff800 	.word	0xfffff800

08003d74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b08f      	sub	sp, #60	; 0x3c
 8003d78:	af0a      	add	r7, sp, #40	; 0x28
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0fe      	b.n	8003f88 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f00b fdfc 	bl	800f990 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f003 fbee 	bl	800757e <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	687e      	ldr	r6, [r7, #4]
 8003daa:	466d      	mov	r5, sp
 8003dac:	f106 0410 	add.w	r4, r6, #16
 8003db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc0:	1d33      	adds	r3, r6, #4
 8003dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f003 fb77 	bl	80074b8 <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f003 fbe5 	bl	80075a0 <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e04c      	b.n	8003e76 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3339      	adds	r3, #57	; 0x39
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	b2d8      	uxtb	r0, r3
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3338      	adds	r3, #56	; 0x38
 8003e04:	4602      	mov	r2, r0
 8003e06:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	b298      	uxth	r0, r3
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	333e      	adds	r3, #62	; 0x3e
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	333b      	adds	r3, #59	; 0x3b
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3340      	adds	r3, #64	; 0x40
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3344      	adds	r3, #68	; 0x44
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334c      	adds	r3, #76	; 0x4c
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b0e      	cmp	r3, #14
 8003e7a:	d9af      	bls.n	8003ddc <HAL_PCD_Init+0x68>
 }

 for (i = 0; i < 15 ; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e05a      	b.n	8003f38 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	b2d8      	uxtb	r0, r3
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003eae:	4602      	mov	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	b298      	uxth	r0, r3
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	333e      	adds	r3, #62	; 0x3e
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3340      	adds	r3, #64	; 0x40
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b0e      	cmp	r3, #14
 8003f3c:	d9a1      	bls.n	8003e82 <HAL_PCD_Init+0x10e>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	687e      	ldr	r6, [r7, #4]
 8003f46:	466d      	mov	r5, sp
 8003f48:	f106 0410 	add.w	r4, r6, #16
 8003f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5c:	1d33      	adds	r3, r6, #4
 8003f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f60:	6838      	ldr	r0, [r7, #0]
 8003f62:	f003 fb45 	bl	80075f0 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d102      	bne.n	8003f7c <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f001 f84c 	bl	8005014 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fb3a 	bl	80085fa <USB_DevDisconnect>
 return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f90 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_PCD_Start+0x16>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e012      	b.n	8003fcc <HAL_PCD_Start+0x3c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 fb0a 	bl	80085cc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 facd 	bl	800755c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 8003ffe:	4b98      	ldr	r3, [pc, #608]	; (8004260 <HAL_PCD_IRQHandler+0x28c>)
 8004000:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f004 fb99 	bl	800873e <USB_GetMode>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 84e1 	bne.w	80049d6 <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f004 fb05 	bl	8008628 <USB_ReadInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 84d7 	beq.w	80049d4 <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f004 fafc 	bl	8008628 <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d103      	bne.n	8004042 <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2202      	movs	r2, #2
 8004040:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f004 faee 	bl	8008628 <USB_ReadInterrupts>
 800404c:	4603      	mov	r3, r0
 800404e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004052:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004056:	f040 80ed 	bne.w	8004234 <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f004 faf5 	bl	8008652 <USB_ReadDevAllOutEpInterrupt>
 8004068:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 800406a:	e0df      	b.n	800422c <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80d4 	beq.w	8004220 <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fb15 	bl	80086b2 <USB_ReadDevOutEPInterrupt>
 8004088:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8082 	beq.w	800419a <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	2301      	movs	r3, #1
 80040a6:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d111      	bne.n	80040d4 <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d13c      	bne.n	8004156 <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	1ad1      	subs	r1, r2, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4403      	add	r3, r0
 8004112:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004116:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800412a:	6819      	ldr	r1, [r3, #0]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4403      	add	r3, r0
 800413a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4419      	add	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004154:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f00b fca3 	bl	800faa8 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d117      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	d114      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004192:	461a      	mov	r2, r3
 8004194:	2101      	movs	r1, #1
 8004196:	f004 fb17 	bl	80087c8 <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d021      	beq.n	80041e8 <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d111      	bne.n	80041d0 <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ce:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f00b fc57 	bl	800fa84 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	461a      	mov	r2, r3
 80041e4:	2308      	movs	r3, #8
 80041e6:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	2310      	movs	r3, #16
 8004202:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	2320      	movs	r3, #32
 800421e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	3301      	adds	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	f47f af1c 	bne.w	800406c <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f004 f9f5 	bl	8008628 <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004248:	f040 80c6 	bne.w	80043d8 <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 fa16 	bl	8008682 <USB_ReadDevAllInEpInterrupt>
 8004256:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 800425c:	e0b8      	b.n	80043d0 <HAL_PCD_IRQHandler+0x3fc>
 800425e:	bf00      	nop
 8004260:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80aa 	beq.w	80043c4 <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 fa35 	bl	80086ea <USB_ReadDevInEPInterrupt>
 8004280:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05a      	beq.n	8004342 <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 800428c:	2201      	movs	r2, #1
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	4619      	mov	r1, r3
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	4013      	ands	r3, r2
 80042ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ba:	461a      	mov	r2, r3
 80042bc:	2301      	movs	r3, #1
 80042be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d11b      	bne.n	8004300 <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3344      	adds	r3, #68	; 0x44
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4403      	add	r3, r0
 80042e8:	3340      	adds	r3, #64	; 0x40
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4419      	add	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4403      	add	r3, r0
 80042fc:	3344      	adds	r3, #68	; 0x44
 80042fe:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f00b fbe9 	bl	800fade <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d116      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334c      	adds	r3, #76	; 0x4c
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d108      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800433a:	461a      	mov	r2, r3
 800433c:	2101      	movs	r1, #1
 800433e:	f004 fa43 	bl	80087c8 <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	2308      	movs	r3, #8
 800435c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2310      	movs	r3, #16
 8004378:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	2302      	movs	r3, #2
 80043b0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80043bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fd43 	bl	8004e4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	3301      	adds	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af46 	bne.w	8004264 <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 f923 	bl	8008628 <USB_ReadInterrupts>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ec:	d120      	bne.n	8004430 <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f4:	461a      	mov	r2, r3
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800440a:	2b01      	cmp	r3, #1
 800440c:	d108      	bne.n	8004420 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004416:	2100      	movs	r1, #0
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f00b fe7b 	bl	8010114 <HAL_PCDEx_LPM_Callback>
 800441e:	e002      	b.n	8004426 <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f00b fbd5 	bl	800fbd0 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800442e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f004 f8f7 	bl	8008628 <USB_ReadInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004444:	d10f      	bne.n	8004466 <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f00b fb92 	bl	800fb80 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004464:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f004 f8dc 	bl	8008628 <USB_ReadInterrupts>
 8004470:	4603      	mov	r3, r0
 8004472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447a:	d11e      	bne.n	80044ba <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004484:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044aa:	2101      	movs	r1, #1
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f00b fe31 	bl	8010114 <HAL_PCDEx_LPM_Callback>
 80044b2:	e002      	b.n	80044ba <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f00b fb63 	bl	800fb80 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 f8b2 	bl	8008628 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	f040 80b0 	bne.w	8004632 <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	461a      	mov	r2, r3
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2110      	movs	r1, #16
 80044ee:	4618      	mov	r0, r3
 80044f0:	f003 f9cc 	bl	800788c <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f8:	e036      	b.n	8004568 <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	461a      	mov	r2, r3
 8004508:	23ff      	movs	r3, #255	; 0xff
 800450a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	4619      	mov	r1, r3
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800452c:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	461a      	mov	r2, r3
 800453c:	23ff      	movs	r3, #255	; 0xff
 800453e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	4619      	mov	r1, r3
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004560:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	3301      	adds	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	429a      	cmp	r2, r3
 8004570:	d8c3      	bhi.n	80044fa <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	461a      	mov	r2, r3
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004594:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	461a      	mov	r2, r3
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b0:	f043 030b 	orr.w	r3, r3, #11
 80045b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	461a      	mov	r2, r3
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	f043 030b 	orr.w	r3, r3, #11
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	e015      	b.n	80045fc <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d6:	461a      	mov	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80045e4:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	461a      	mov	r2, r3
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f043 030b 	orr.w	r3, r3, #11
 80045fa:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	461a      	mov	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004610:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	b2d9      	uxtb	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004622:	461a      	mov	r2, r3
 8004624:	f004 f8d0 	bl	80087c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f003 fff6 	bl	8008628 <USB_ReadInterrupts>
 800463c:	4603      	mov	r3, r0
 800463e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	f040 80d7 	bne.w	80047f8 <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f004 f884 	bl	800875c <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004662:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f003 f96f 	bl	800794c <USB_GetDevSpeed>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10f      	bne.n	8004694 <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e0a9      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2240      	movs	r2, #64	; 0x40
 800469e:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 80046a0:	f001 f93a 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 80046a4:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a79      	ldr	r2, [pc, #484]	; (8004890 <HAL_PCD_IRQHandler+0x8bc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d90c      	bls.n	80046c8 <HAL_PCD_IRQHandler+0x6f4>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a78      	ldr	r2, [pc, #480]	; (8004894 <HAL_PCD_IRQHandler+0x8c0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d808      	bhi.n	80046c8 <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	68d2      	ldr	r2, [r2, #12]
 80046c0:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	e08f      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a72      	ldr	r2, [pc, #456]	; (8004894 <HAL_PCD_IRQHandler+0x8c0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d90c      	bls.n	80046ea <HAL_PCD_IRQHandler+0x716>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a71      	ldr	r2, [pc, #452]	; (8004898 <HAL_PCD_IRQHandler+0x8c4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d808      	bhi.n	80046ea <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	68d2      	ldr	r2, [r2, #12]
 80046e2:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e07e      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a6a      	ldr	r2, [pc, #424]	; (8004898 <HAL_PCD_IRQHandler+0x8c4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d90c      	bls.n	800470c <HAL_PCD_IRQHandler+0x738>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a69      	ldr	r2, [pc, #420]	; (800489c <HAL_PCD_IRQHandler+0x8c8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d808      	bhi.n	800470c <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	68d2      	ldr	r2, [r2, #12]
 8004704:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e06d      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a63      	ldr	r2, [pc, #396]	; (800489c <HAL_PCD_IRQHandler+0x8c8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d90c      	bls.n	800472e <HAL_PCD_IRQHandler+0x75a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a62      	ldr	r2, [pc, #392]	; (80048a0 <HAL_PCD_IRQHandler+0x8cc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d808      	bhi.n	800472e <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e05c      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a5b      	ldr	r2, [pc, #364]	; (80048a0 <HAL_PCD_IRQHandler+0x8cc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d90c      	bls.n	8004750 <HAL_PCD_IRQHandler+0x77c>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a5a      	ldr	r2, [pc, #360]	; (80048a4 <HAL_PCD_IRQHandler+0x8d0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d808      	bhi.n	8004750 <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	68d2      	ldr	r2, [r2, #12]
 8004748:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	e04b      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a54      	ldr	r2, [pc, #336]	; (80048a4 <HAL_PCD_IRQHandler+0x8d0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d90c      	bls.n	8004772 <HAL_PCD_IRQHandler+0x79e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a53      	ldr	r2, [pc, #332]	; (80048a8 <HAL_PCD_IRQHandler+0x8d4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d808      	bhi.n	8004772 <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e03a      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a4c      	ldr	r2, [pc, #304]	; (80048a8 <HAL_PCD_IRQHandler+0x8d4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d90c      	bls.n	8004794 <HAL_PCD_IRQHandler+0x7c0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a4b      	ldr	r2, [pc, #300]	; (80048ac <HAL_PCD_IRQHandler+0x8d8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d808      	bhi.n	8004794 <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	68d2      	ldr	r2, [r2, #12]
 800478c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e029      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a45      	ldr	r2, [pc, #276]	; (80048ac <HAL_PCD_IRQHandler+0x8d8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d90c      	bls.n	80047b6 <HAL_PCD_IRQHandler+0x7e2>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <HAL_PCD_IRQHandler+0x8dc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d808      	bhi.n	80047b6 <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e018      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_PCD_IRQHandler+0x8dc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d90c      	bls.n	80047d8 <HAL_PCD_IRQHandler+0x804>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <HAL_PCD_IRQHandler+0x8e0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d808      	bhi.n	80047d8 <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	68d2      	ldr	r2, [r2, #12]
 80047d0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e007      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80047e6:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f00b f9a0 	bl	800fb2e <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 ff13 	bl	8008628 <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d174      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	6992      	ldr	r2, [r2, #24]
 8004816:	f022 0210 	bic.w	r2, r2, #16
 800481a:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0c5b      	lsrs	r3, r3, #17
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	2b02      	cmp	r3, #2
 8004844:	d138      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d049      	beq.n	80048e6 <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	68d9      	ldr	r1, [r3, #12]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	b29b      	uxth	r3, r3
 800485c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	6a38      	ldr	r0, [r7, #32]
 8004866:	f003 fd83 	bl	8008370 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004876:	441a      	add	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	091b      	lsrs	r3, r3, #4
 8004884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004888:	441a      	add	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	619a      	str	r2, [r3, #24]
 800488e:	e02a      	b.n	80048e6 <HAL_PCD_IRQHandler+0x912>
 8004890:	00d8acbf 	.word	0x00d8acbf
 8004894:	00e4e1bf 	.word	0x00e4e1bf
 8004898:	00f423ff 	.word	0x00f423ff
 800489c:	0106737f 	.word	0x0106737f
 80048a0:	011a499f 	.word	0x011a499f
 80048a4:	01312cff 	.word	0x01312cff
 80048a8:	014ca43f 	.word	0x014ca43f
 80048ac:	016e35ff 	.word	0x016e35ff
 80048b0:	01a6ab1f 	.word	0x01a6ab1f
 80048b4:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	0c5b      	lsrs	r3, r3, #17
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d110      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80048ca:	2208      	movs	r2, #8
 80048cc:	4619      	mov	r1, r3
 80048ce:	6a38      	ldr	r0, [r7, #32]
 80048d0:	f003 fd4e 	bl	8008370 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048e0:	441a      	add	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	6992      	ldr	r2, [r2, #24]
 80048f0:	f042 0210 	orr.w	r2, r2, #16
 80048f4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f003 fe94 	bl	8008628 <USB_ReadInterrupts>
 8004900:	4603      	mov	r3, r0
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b08      	cmp	r3, #8
 8004908:	d106      	bne.n	8004918 <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f00b f901 	bl	800fb12 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f003 fe83 	bl	8008628 <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	d10a      	bne.n	8004944 <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f00b f96b 	bl	800fc10 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f003 fe6d 	bl	8008628 <USB_ReadInterrupts>
 800494e:	4603      	mov	r3, r0
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004958:	d10a      	bne.n	8004970 <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f00b f943 	bl	800fbec <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800496e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f003 fe57 	bl	8008628 <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d107      	bne.n	8004996 <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f00b f954 	bl	800fc34 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f003 fe44 	bl	8008628 <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d115      	bne.n	80049d6 <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f00b f947 	bl	800fc50 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	6851      	ldr	r1, [r2, #4]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	e000      	b.n	80049d6 <HAL_PCD_IRQHandler+0xa02>
      return;
 80049d4:	bf00      	nop
    }
  }
}
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_PCD_SetAddress+0x1a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e00f      	b.n	8004a16 <HAL_PCD_SetAddress+0x3a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f003 fdba 	bl	8008580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	4608      	mov	r0, r1
 8004a28:	4611      	mov	r1, r2
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	70fb      	strb	r3, [r7, #3]
 8004a30:	460b      	mov	r3, r1
 8004a32:	803b      	strh	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da0b      	bge.n	8004a5c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	3338      	adds	r3, #56	; 0x38
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e00b      	b.n	8004a74 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	09db      	lsrs	r3, r3, #7
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8004a90:	883a      	ldrh	r2, [r7, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	78ba      	ldrb	r2, [r7, #2]
 8004a9a:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8004aae:	78bb      	ldrb	r3, [r7, #2]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d102      	bne.n	8004aba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_PCD_EP_Open+0xaa>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e00e      	b.n	8004ae6 <HAL_PCD_EP_Open+0xc8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 ff6e 	bl	80079b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0b      	bge.n	8004b1a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	3338      	adds	r3, #56	; 0x38
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e00b      	b.n	8004b32 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	09db      	lsrs	r3, r3, #7
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_PCD_EP_Close+0x6e>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e00e      	b.n	8004b7a <HAL_PCD_EP_Close+0x8c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f002 ffac 	bl	8007ac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d102      	bne.n	8004bdc <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6979      	ldr	r1, [r7, #20]
 8004bf4:	f003 fa28 	bl	8008048 <USB_EP0StartXfer>
 8004bf8:	e008      	b.n	8004c0c <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	6979      	ldr	r1, [r7, #20]
 8004c08:	f002 ffda 	bl	8007bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	3338      	adds	r3, #56	; 0x38
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2201      	movs	r2, #1
 8004c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	f003 f9c6 	bl	8008048 <USB_EP0StartXfer>
 8004cbc:	e008      	b.n	8004cd0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	f002 ff78 	bl	8007bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d901      	bls.n	8004cf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e050      	b.n	8004d9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da0b      	bge.n	8004d18 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	3338      	adds	r3, #56	; 0x38
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e009      	b.n	8004d2c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_PCD_EP_SetStall+0x82>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e01e      	b.n	8004d9a <HAL_PCD_EP_SetStall+0xc0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 fb2a 	bl	80083c4 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	b2d9      	uxtb	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f003 fd1c 	bl	80087c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d901      	bls.n	8004dc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e040      	b.n	8004e42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da0b      	bge.n	8004de0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	3338      	adds	r3, #56	; 0x38
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e009      	b.n	8004df4 <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	09db      	lsrs	r3, r3, #7
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_PCD_EP_ClrStall+0x82>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e00e      	b.n	8004e42 <HAL_PCD_EP_ClrStall+0xa0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 fb37 	bl	80084a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	3338      	adds	r3, #56	; 0x38
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d202      	bcs.n	8004e90 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3303      	adds	r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da00      	bge.n	8004e9a <PCD_WriteEmptyTxFifo+0x50>
 8004e98:	3303      	adds	r3, #3
 8004e9a:	109b      	asrs	r3, r3, #2
 8004e9c:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004e9e:	e02e      	b.n	8004efe <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d202      	bcs.n	8004ebc <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3303      	adds	r3, #3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da00      	bge.n	8004ec6 <PCD_WriteEmptyTxFifo+0x7c>
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	109b      	asrs	r3, r3, #2
 8004ec8:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	b298      	uxth	r0, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4603      	mov	r3, r0
 8004ee0:	6978      	ldr	r0, [r7, #20]
 8004ee2:	f003 fa0d 	bl	8008300 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	441a      	add	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d909      	bls.n	8004f28 <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d203      	bcs.n	8004f28 <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1bb      	bne.n	8004ea0 <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dc10      	bgt.n	8004f50 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8004f2e:	2201      	movs	r2, #1
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	4619      	mov	r1, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	70fb      	strb	r3, [r7, #3]
 8004f66:	4613      	mov	r3, r2
 8004f68:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	883a      	ldrh	r2, [r7, #0]
 8004f86:	0411      	lsls	r1, r2, #16
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f8e:	e028      	b.n	8004fe2 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	e00d      	b.n	8004fc0 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	3340      	adds	r3, #64	; 0x40
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	dbec      	blt.n	8004fa4 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	883a      	ldrh	r2, [r7, #0]
 8004fd4:	0410      	lsls	r0, r2, #16
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4302      	orrs	r2, r0
 8004fda:	3340      	adds	r3, #64	; 0x40
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	887a      	ldrh	r2, [r7, #2]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_PCDEx_ActivateLPM+0x44>)
 8005044:	4313      	orrs	r3, r2
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	10000003 	.word	0x10000003

0800505c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	; 0x40
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005080:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800508a:	f7fc fdd1 	bl	8001c30 <HAL_GetTick>
 800508e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005090:	e009      	b.n	80050a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005092:	f7fc fdcd 	bl	8001c30 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a0:	d901      	bls.n	80050a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e022      	b.n	80050ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b2:	d1ee      	bne.n	8005092 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050b4:	4a10      	ldr	r2, [pc, #64]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050c0:	f7fc fdb6 	bl	8001c30 <HAL_GetTick>
 80050c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050c6:	e009      	b.n	80050dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050c8:	f7fc fdb2 	bl	8001c30 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d6:	d901      	bls.n	80050dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e007      	b.n	80050ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e8:	d1ee      	bne.n	80050c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40007000 	.word	0x40007000

080050fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e25c      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8087 	beq.w	800522e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005120:	4b96      	ldr	r3, [pc, #600]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b04      	cmp	r3, #4
 800512a:	d00c      	beq.n	8005146 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512c:	4b93      	ldr	r3, [pc, #588]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b08      	cmp	r3, #8
 8005136:	d112      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
 8005138:	4b90      	ldr	r3, [pc, #576]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d10b      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005146:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d06c      	beq.n	800522c <HAL_RCC_OscConfig+0x130>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d168      	bne.n	800522c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e236      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x7a>
 8005168:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516a:	4b84      	ldr	r3, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e02e      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x9c>
 800517e:	4a7f      	ldr	r2, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005180:	4b7e      	ldr	r3, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4a7c      	ldr	r2, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800518c:	4b7b      	ldr	r3, [pc, #492]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e01d      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a0:	d10c      	bne.n	80051bc <HAL_RCC_OscConfig+0xc0>
 80051a2:	4a76      	ldr	r2, [pc, #472]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a4:	4b75      	ldr	r3, [pc, #468]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	4a73      	ldr	r2, [pc, #460]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b0:	4b72      	ldr	r3, [pc, #456]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e00b      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 80051bc:	4a6f      	ldr	r2, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051be:	4b6f      	ldr	r3, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4a6c      	ldr	r2, [pc, #432]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051ca:	4b6c      	ldr	r3, [pc, #432]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fc fd28 	bl	8001c30 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fc fd24 	bl	8001c30 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1ea      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0xe8>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc fd14 	bl	8001c30 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800520c:	f7fc fd10 	bl	8001c30 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	; 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e1d6      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521e:	4b57      	ldr	r3, [pc, #348]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x110>
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d069      	beq.n	800530e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800523a:	4b50      	ldr	r3, [pc, #320]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005246:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d11c      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
 8005252:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525e:	4b47      	ldr	r3, [pc, #284]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d001      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e1aa      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005276:	4941      	ldr	r1, [pc, #260]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528a:	e040      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d023      	beq.n	80052dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005294:	4a39      	ldr	r2, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005296:	4b39      	ldr	r3, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fc fcc6 	bl	8001c30 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a8:	f7fc fcc2 	bl	8001c30 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e188      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c6:	492d      	ldr	r1, [pc, #180]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052c8:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]
 80052da:	e018      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052de:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fc fca2 	bl	8001c30 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f0:	f7fc fc9e 	bl	8001c30 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e164      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d038      	beq.n	800538c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d019      	beq.n	8005356 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fc fc7f 	bl	8001c30 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005336:	f7fc fc7b 	bl	8001c30 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e141      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800534a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x23a>
 8005354:	e01a      	b.n	800538c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800535a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fc fc65 	bl	8001c30 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800536a:	f7fc fc61 	bl	8001c30 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d903      	bls.n	8005380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e127      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
 800537c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ee      	bne.n	800536a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a4 	beq.w	80054e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539a:	4b8e      	ldr	r3, [pc, #568]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4a8b      	ldr	r2, [pc, #556]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053a8:	4b8a      	ldr	r3, [pc, #552]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b88      	ldr	r3, [pc, #544]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c2:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d118      	bne.n	8005400 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053ce:	4a82      	ldr	r2, [pc, #520]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053d0:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053da:	f7fc fc29 	bl	8001c30 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053e2:	f7fc fc25 	bl	8001c30 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b64      	cmp	r3, #100	; 0x64
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0eb      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x31a>
 8005408:	4a72      	ldr	r2, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800540a:	4b72      	ldr	r3, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	; 0x70
 8005414:	e02d      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x33c>
 800541e:	4a6d      	ldr	r2, [pc, #436]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005420:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	4a6a      	ldr	r2, [pc, #424]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800542c:	4b69      	ldr	r3, [pc, #420]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	f023 0304 	bic.w	r3, r3, #4
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
 8005436:	e01c      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b05      	cmp	r3, #5
 800543e:	d10c      	bne.n	800545a <HAL_RCC_OscConfig+0x35e>
 8005440:	4a64      	ldr	r2, [pc, #400]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005442:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	4a61      	ldr	r2, [pc, #388]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800544e:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
 8005458:	e00b      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 800545a:	4a5e      	ldr	r2, [pc, #376]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800545c:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
 8005466:	4a5b      	ldr	r2, [pc, #364]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005468:	4b5a      	ldr	r3, [pc, #360]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d015      	beq.n	80054a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fc fbd9 	bl	8001c30 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fc fbd5 	bl	8001c30 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e099      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ee      	beq.n	8005482 <HAL_RCC_OscConfig+0x386>
 80054a4:	e014      	b.n	80054d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a6:	f7fc fbc3 	bl	8001c30 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fc fbbf 	bl	8001c30 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e083      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c4:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ee      	bne.n	80054ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d6:	4a3f      	ldr	r2, [pc, #252]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054d8:	4b3e      	ldr	r3, [pc, #248]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d06f      	beq.n	80055ca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d067      	beq.n	80055c6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d149      	bne.n	8005592 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fc fb91 	bl	8001c30 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005512:	f7fc fb8d 	bl	8001c30 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e053      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005530:	4928      	ldr	r1, [pc, #160]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	4313      	orrs	r3, r2
 8005558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800555c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005560:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fc fb61 	bl	8001c30 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005572:	f7fc fb5d 	bl	8001c30 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e023      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x476>
 8005590:	e01b      	b.n	80055ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fc fb47 	bl	8001c30 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fc fb43 	bl	8001c30 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e009      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b8:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <HAL_RCC_OscConfig+0x4aa>
 80055c4:	e001      	b.n	80055ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40007000 	.word	0x40007000

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0ce      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b69      	ldr	r3, [pc, #420]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d210      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4966      	ldr	r1, [pc, #408]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 020f 	bic.w	r2, r3, #15
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b62      	ldr	r3, [pc, #392]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 020f 	and.w	r2, r3, #15
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0b6      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800563c:	4a58      	ldr	r2, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	4b58      	ldr	r3, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005654:	4a52      	ldr	r2, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800565e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	494f      	ldr	r1, [pc, #316]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d040      	beq.n	8005700 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d115      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e07d      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569e:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e071      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ae:	4b3c      	ldr	r3, [pc, #240]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e069      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056be:	4938      	ldr	r1, [pc, #224]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f023 0203 	bic.w	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d0:	f7fc faae 	bl	8001c30 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d8:	f7fc faaa 	bl	8001c30 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e051      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 020c 	and.w	r2, r3, #12
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1eb      	bne.n	80056d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d910      	bls.n	8005730 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4923      	ldr	r1, [pc, #140]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 020f 	bic.w	r2, r3, #15
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b1f      	ldr	r3, [pc, #124]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e030      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573c:	4918      	ldr	r1, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800575a:	4911      	ldr	r1, [pc, #68]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4313      	orrs	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800576e:	f000 f81d 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8005772:	4601      	mov	r1, r0
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	fa21 f303 	lsr.w	r3, r1, r3
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_RCC_ClockConfig+0x1cc>)
 8005788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800578a:	2000      	movs	r0, #0
 800578c:	f009 ff8c 	bl	800f6a8 <HAL_InitTick>

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40023c00 	.word	0x40023c00
 80057a0:	40023800 	.word	0x40023800
 80057a4:	080161a4 	.word	0x080161a4
 80057a8:	20000124 	.word	0x20000124

080057ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057b4:	2200      	movs	r2, #0
 80057b6:	60fa      	str	r2, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	617a      	str	r2, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 80057c0:	2200      	movs	r2, #0
 80057c2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c4:	4a51      	ldr	r2, [pc, #324]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	f002 020c 	and.w	r2, r2, #12
 80057cc:	2a04      	cmp	r2, #4
 80057ce:	d007      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0x34>
 80057d0:	2a08      	cmp	r2, #8
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f040 8090 	bne.w	80058fa <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057da:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <HAL_RCC_GetSysClockFreq+0x164>)
 80057dc:	613b      	str	r3, [r7, #16]
       break;
 80057de:	e08f      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e0:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 80057e2:	613b      	str	r3, [r7, #16]
      break;
 80057e4:	e08c      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e6:	4a49      	ldr	r2, [pc, #292]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057e8:	6852      	ldr	r2, [r2, #4]
 80057ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057ee:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057f0:	4a46      	ldr	r2, [pc, #280]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057f2:	6852      	ldr	r2, [r2, #4]
 80057f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d023      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fc:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	099b      	lsrs	r3, r3, #6
 8005802:	f04f 0400 	mov.w	r4, #0
 8005806:	f240 11ff 	movw	r1, #511	; 0x1ff
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	ea03 0301 	and.w	r3, r3, r1
 8005812:	ea04 0402 	and.w	r4, r4, r2
 8005816:	4a3f      	ldr	r2, [pc, #252]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 8005818:	fb02 f104 	mul.w	r1, r2, r4
 800581c:	2200      	movs	r2, #0
 800581e:	fb02 f203 	mul.w	r2, r2, r3
 8005822:	440a      	add	r2, r1
 8005824:	493b      	ldr	r1, [pc, #236]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 8005826:	fba3 0101 	umull	r0, r1, r3, r1
 800582a:	1853      	adds	r3, r2, r1
 800582c:	4619      	mov	r1, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	461a      	mov	r2, r3
 8005836:	4623      	mov	r3, r4
 8005838:	f7fb fa52 	bl	8000ce0 <__aeabi_uldivmod>
 800583c:	4603      	mov	r3, r0
 800583e:	460c      	mov	r4, r1
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e04c      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005844:	4a31      	ldr	r2, [pc, #196]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	0992      	lsrs	r2, r2, #6
 800584a:	4611      	mov	r1, r2
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005854:	f04f 0600 	mov.w	r6, #0
 8005858:	ea05 0501 	and.w	r5, r5, r1
 800585c:	ea06 0602 	and.w	r6, r6, r2
 8005860:	4629      	mov	r1, r5
 8005862:	4632      	mov	r2, r6
 8005864:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8005868:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 800586c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005870:	4651      	mov	r1, sl
 8005872:	465a      	mov	r2, fp
 8005874:	46aa      	mov	sl, r5
 8005876:	46b3      	mov	fp, r6
 8005878:	4655      	mov	r5, sl
 800587a:	465e      	mov	r6, fp
 800587c:	1b4d      	subs	r5, r1, r5
 800587e:	eb62 0606 	sbc.w	r6, r2, r6
 8005882:	4629      	mov	r1, r5
 8005884:	4632      	mov	r2, r6
 8005886:	0194      	lsls	r4, r2, #6
 8005888:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800588c:	018b      	lsls	r3, r1, #6
 800588e:	1a5b      	subs	r3, r3, r1
 8005890:	eb64 0402 	sbc.w	r4, r4, r2
 8005894:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005898:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800589c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80058a0:	4643      	mov	r3, r8
 80058a2:	464c      	mov	r4, r9
 80058a4:	4655      	mov	r5, sl
 80058a6:	465e      	mov	r6, fp
 80058a8:	18ed      	adds	r5, r5, r3
 80058aa:	eb46 0604 	adc.w	r6, r6, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	4634      	mov	r4, r6
 80058b2:	02a2      	lsls	r2, r4, #10
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80058c6:	4618      	mov	r0, r3
 80058c8:	4621      	mov	r1, r4
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	461a      	mov	r2, r3
 80058d2:	4623      	mov	r3, r4
 80058d4:	f7fb fa04 	bl	8000ce0 <__aeabi_uldivmod>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	3301      	adds	r3, #1
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	613b      	str	r3, [r7, #16]
      break;
 80058f8:	e002      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RCC_GetSysClockFreq+0x164>)
 80058fc:	613b      	str	r3, [r7, #16]
      break;
 80058fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005900:	693b      	ldr	r3, [r7, #16]
}
 8005902:	4618      	mov	r0, r3
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400
 8005914:	017d7840 	.word	0x017d7840

08005918 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000124 	.word	0x20000124

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4601      	mov	r1, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a9b      	lsrs	r3, r3, #10
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4a03      	ldr	r2, [pc, #12]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005946:	5cd3      	ldrb	r3, [r2, r3]
 8005948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40023800 	.word	0x40023800
 8005954:	080161b4 	.word	0x080161b4

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800595c:	f7ff ffdc 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005960:	4601      	mov	r1, r0
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0b5b      	lsrs	r3, r3, #13
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4a03      	ldr	r2, [pc, #12]	; (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 800596e:	5cd3      	ldrb	r3, [r2, r3]
 8005970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40023800 	.word	0x40023800
 800597c:	080161b4 	.word	0x080161b4

08005980 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	220f      	movs	r2, #15
 800598e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059c2:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <HAL_RCC_GetClockConfig+0x60>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40023c00 	.word	0x40023c00

080059e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a0c:	4a69      	ldr	r2, [pc, #420]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	4b69      	ldr	r3, [pc, #420]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a16:	6093      	str	r3, [r2, #8]
 8005a18:	4966      	ldr	r1, [pc, #408]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1a:	4b66      	ldr	r3, [pc, #408]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005a2e:	2301      	movs	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a3e:	495d      	ldr	r1, [pc, #372]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a40:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a7a:	494e      	ldr	r1, [pc, #312]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7c:	4b4d      	ldr	r3, [pc, #308]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a98:	d101      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 808b 	beq.w	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac8:	4a3a      	ldr	r2, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad4:	4b37      	ldr	r3, [pc, #220]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ae0:	4a35      	ldr	r2, [pc, #212]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aea:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fc f8a0 	bl	8001c30 <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af4:	f7fc f89c 	bl	8001c30 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e355      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b06:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b12:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d035      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d02e      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b46:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b52:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d014      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc f864 	bl	8001c30 <HAL_GetTick>
 8005b68:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fc f860 	bl	8001c30 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e317      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ee      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9a:	d111      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b9c:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bac:	400b      	ands	r3, r1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	6083      	str	r3, [r0, #8]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	0ffffcff 	.word	0x0ffffcff
 8005bc0:	4ab0      	ldr	r2, [pc, #704]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc2:	4bb0      	ldr	r3, [pc, #704]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bca:	6093      	str	r3, [r2, #8]
 8005bcc:	49ad      	ldr	r1, [pc, #692]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bce:	4bad      	ldr	r3, [pc, #692]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bea:	4aa6      	ldr	r2, [pc, #664]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bec:	4ba5      	ldr	r3, [pc, #660]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bfa:	49a2      	ldr	r1, [pc, #648]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bfc:	4ba1      	ldr	r3, [pc, #644]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bfe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c18:	499a      	ldr	r1, [pc, #616]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c1a:	4b9a      	ldr	r3, [pc, #616]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c3a:	4992      	ldr	r1, [pc, #584]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c3c:	4b91      	ldr	r3, [pc, #580]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c5c:	4989      	ldr	r1, [pc, #548]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c5e:	4b89      	ldr	r3, [pc, #548]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c7e:	4981      	ldr	r1, [pc, #516]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c80:	4b80      	ldr	r3, [pc, #512]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ca0:	4978      	ldr	r1, [pc, #480]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ca2:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	f023 0203 	bic.w	r2, r3, #3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cc2:	4970      	ldr	r1, [pc, #448]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f023 020c 	bic.w	r2, r3, #12
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ce4:	4967      	ldr	r1, [pc, #412]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ce6:	4b67      	ldr	r3, [pc, #412]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d06:	495f      	ldr	r1, [pc, #380]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d08:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d28:	4956      	ldr	r1, [pc, #344]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d4a:	494e      	ldr	r1, [pc, #312]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d6c:	4945      	ldr	r1, [pc, #276]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d6e:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d8e:	493d      	ldr	r1, [pc, #244]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d90:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005db0:	4934      	ldr	r1, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dd2:	492c      	ldr	r1, [pc, #176]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df0:	d101      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 8005df2:	2301      	movs	r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 8005e02:	2301      	movs	r3, #1
 8005e04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e12:	491c      	ldr	r1, [pc, #112]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e34:	4913      	ldr	r1, [pc, #76]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d005      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e5a:	f040 80d8 	bne.w	800600e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e68:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fb fee1 	bl	8001c30 <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e70:	e00a      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e72:	f7fb fedd 	bl	8001c30 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b64      	cmp	r3, #100	; 0x64
 8005e7e:	d903      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e196      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005e84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e88:	4b6c      	ldr	r3, [pc, #432]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ee      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d021      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11d      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ea8:	4b64      	ldr	r3, [pc, #400]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005eb6:	4b61      	ldr	r3, [pc, #388]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebc:	0e1b      	lsrs	r3, r3, #24
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ec4:	495d      	ldr	r1, [pc, #372]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	019a      	lsls	r2, r3, #6
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02e      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f0e:	d129      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f10:	4b4a      	ldr	r3, [pc, #296]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f24:	0f1b      	lsrs	r3, r3, #28
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f2c:	4943      	ldr	r1, [pc, #268]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	019a      	lsls	r2, r3, #6
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005f4c:	493b      	ldr	r1, [pc, #236]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f023 021f 	bic.w	r2, r3, #31
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01d      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f70:	4b32      	ldr	r3, [pc, #200]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f84:	0f1b      	lsrs	r3, r3, #28
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f8c:	492b      	ldr	r1, [pc, #172]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	019a      	lsls	r2, r3, #6
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	071b      	lsls	r3, r3, #28
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d011      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fb8:	4920      	ldr	r1, [pc, #128]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	019a      	lsls	r2, r3, #6
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fe6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe8:	f7fb fe22 	bl	8001c30 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ff0:	f7fb fe1e 	bl	8001c30 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0d7      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b01      	cmp	r3, #1
 8006012:	f040 80cd 	bne.w	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006020:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fb fe05 	bl	8001c30 <HAL_GetTick>
 8006026:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006028:	e00a      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800602a:	f7fb fe01 	bl	8001c30 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b64      	cmp	r3, #100	; 0x64
 8006036:	d903      	bls.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e0ba      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800603c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006040:	4b5e      	ldr	r3, [pc, #376]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604c:	d0ed      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02e      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d12a      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006076:	4b51      	ldr	r3, [pc, #324]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006084:	4b4d      	ldr	r3, [pc, #308]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	0f1b      	lsrs	r3, r3, #28
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006092:	494a      	ldr	r1, [pc, #296]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	071b      	lsls	r3, r3, #28
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060b2:	4942      	ldr	r1, [pc, #264]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060b4:	4b41      	ldr	r3, [pc, #260]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d022      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e0:	d11d      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	0e1b      	lsrs	r3, r3, #24
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060f0:	4b32      	ldr	r3, [pc, #200]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	0f1b      	lsrs	r3, r3, #28
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060fe:	492f      	ldr	r1, [pc, #188]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	019a      	lsls	r2, r3, #6
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	431a      	orrs	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	431a      	orrs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	071b      	lsls	r3, r3, #28
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d028      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006130:	0e1b      	lsrs	r3, r3, #24
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006146:	491d      	ldr	r1, [pc, #116]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	019a      	lsls	r2, r3, #6
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	431a      	orrs	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	061b      	lsls	r3, r3, #24
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	071b      	lsls	r3, r3, #28
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006166:	4915      	ldr	r1, [pc, #84]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800616a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800617c:	4a0f      	ldr	r2, [pc, #60]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006186:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006188:	f7fb fd52 	bl	8001c30 <HAL_GetTick>
 800618c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006190:	f7fb fd4e 	bl	8001c30 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b64      	cmp	r3, #100	; 0x64
 800619c:	d901      	bls.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e007      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ae:	d1ef      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40023800 	.word	0x40023800

080061c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e025      	b.n	8006220 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f009 fa53 	bl	800f694 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f001 f845 	bl	8007290 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	461a      	mov	r2, r3
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	f001 f8af 	bl	8007374 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_SDRAM_Read_32b+0x20>
 8006244:	2302      	movs	r3, #2
 8006246:	e028      	b.n	800629a <HAL_SDRAM_Read_32b+0x72>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d101      	bne.n	8006260 <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
 800625e:	e01c      	b.n	800629a <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b05      	cmp	r3, #5
 800626a:	d10e      	bne.n	800628a <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 800626c:	2301      	movs	r3, #1
 800626e:	e014      	b.n	800629a <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	3304      	adds	r3, #4
 8006282:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	3b01      	subs	r3, #1
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1ef      	bne.n	8006270 <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b087      	sub	sp, #28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_SDRAM_Write_32b+0x24>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e02a      	b.n	8006320 <HAL_SDRAM_Write_32b+0x7a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d101      	bne.n	80062e6 <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
 80062e4:	e01c      	b.n	8006320 <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d002      	beq.n	80062f2 <HAL_SDRAM_Write_32b+0x4c>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d10e      	bne.n	8006310 <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 80062f2:	2301      	movs	r3, #1
 80062f4:	e014      	b.n	8006320 <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3304      	adds	r3, #4
 8006308:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	3b01      	subs	r3, #1
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1ef      	bne.n	80062f6 <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d101      	bne.n	8006348 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
 8006346:	e018      	b.n	800637a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	4618      	mov	r0, r3
 800635a:	f001 f88b 	bl	8007474 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d104      	bne.n	8006370 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2205      	movs	r2, #5
 800636a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800636e:	e003      	b.n	8006378 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e01d      	b.n	80063d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f815 	bl	80063d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f000 f975 	bl	80066b0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	68d2      	ldr	r2, [r2, #12]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d122      	bne.n	800647e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d11b      	bne.n	800647e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0202 	mvn.w	r2, #2
 800644e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f905 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 800646a:	e005      	b.n	8006478 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8f7 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f908 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d122      	bne.n	80064d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b04      	cmp	r3, #4
 8006498:	d11b      	bne.n	80064d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f06f 0204 	mvn.w	r2, #4
 80064a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8db 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 80064be:	e005      	b.n	80064cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8cd 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8de 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d122      	bne.n	8006526 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d11b      	bne.n	8006526 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f06f 0208 	mvn.w	r2, #8
 80064f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2204      	movs	r2, #4
 80064fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8b1 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 8006512:	e005      	b.n	8006520 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f8a3 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8b4 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b10      	cmp	r3, #16
 8006532:	d122      	bne.n	800657a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b10      	cmp	r3, #16
 8006540:	d11b      	bne.n	800657a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f06f 0210 	mvn.w	r2, #16
 800654a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2208      	movs	r2, #8
 8006550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f887 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 8006566:	e005      	b.n	8006574 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f879 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f88a 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10e      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d107      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f06f 0201 	mvn.w	r2, #1
 800659e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f008 fd03 	bl	800efac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b80      	cmp	r3, #128	; 0x80
 80065b2:	d10e      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d107      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f929 	bl	8006824 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e0:	d10e      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f912 	bl	8006824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f838 	bl	800669c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b20      	cmp	r3, #32
 8006638:	d10e      	bne.n	8006658 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b20      	cmp	r3, #32
 8006646:	d107      	bne.n	8006658 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0220 	mvn.w	r2, #32
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8dc 	bl	8006810 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a47      	ldr	r2, [pc, #284]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d013      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d2:	d00f      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a44      	ldr	r2, [pc, #272]	; (80067e8 <TIM_Base_SetConfig+0x138>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00b      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a43      	ldr	r2, [pc, #268]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <TIM_Base_SetConfig+0x140>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a41      	ldr	r2, [pc, #260]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d101      	bne.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <TIM_Base_SetConfig+0x4a>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d008      	beq.n	8006710 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a34      	ldr	r2, [pc, #208]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d02b      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d027      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a31      	ldr	r2, [pc, #196]	; (80067e8 <TIM_Base_SetConfig+0x138>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d023      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a30      	ldr	r2, [pc, #192]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d01f      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2f      	ldr	r2, [pc, #188]	; (80067f0 <TIM_Base_SetConfig+0x140>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01b      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a2e      	ldr	r2, [pc, #184]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d017      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2d      	ldr	r2, [pc, #180]	; (80067f8 <TIM_Base_SetConfig+0x148>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d013      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2c      	ldr	r2, [pc, #176]	; (80067fc <TIM_Base_SetConfig+0x14c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <TIM_Base_SetConfig+0x150>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <TIM_Base_SetConfig+0x154>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <TIM_Base_SetConfig+0x158>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a28      	ldr	r2, [pc, #160]	; (800680c <TIM_Base_SetConfig+0x15c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d101      	bne.n	8006774 <TIM_Base_SetConfig+0xc4>
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <TIM_Base_SetConfig+0xc6>
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d008      	beq.n	800678c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0x110>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0e      	ldr	r2, [pc, #56]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d101      	bne.n	80067c4 <TIM_Base_SetConfig+0x114>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <TIM_Base_SetConfig+0x116>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	615a      	str	r2, [r3, #20]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	40001800 	.word	0x40001800
 8006808:	40001c00 	.word	0x40001c00
 800680c:	40002000 	.word	0x40002000

08006810 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e043      	b.n	80068d2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f008 fe4c 	bl	800f4fc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f9c3 	bl	8006c08 <UART_SetConfig>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e022      	b.n	80068d2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fc25 	bl	80070e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	6852      	ldr	r2, [r2, #4]
 80068a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	6892      	ldr	r2, [r2, #8]
 80068b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068b8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fcac 	bl	8007228 <UART_CheckIdleState>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b088      	sub	sp, #32
 80068de:	af02      	add	r7, sp, #8
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d175      	bne.n	80069e6 <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_UART_Transmit+0x2c>
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e06e      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_UART_Transmit+0x3e>
 8006914:	2302      	movs	r3, #2
 8006916:	e067      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2221      	movs	r2, #33	; 0x21
 800692a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800692e:	f7fb f97f 	bl	8001c30 <HAL_GetTick>
 8006932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	88fa      	ldrh	r2, [r7, #6]
 8006938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8006944:	e032      	b.n	80069ac <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	2180      	movs	r1, #128	; 0x80
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f906 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e03a      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	d110      	bne.n	800699e <HAL_UART_Transmit+0xc4>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10c      	bne.n	800699e <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	8812      	ldrh	r2, [r2, #0]
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	3302      	adds	r3, #2
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	e006      	b.n	80069ac <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1c6      	bne.n	8006946 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2200      	movs	r2, #0
 80069c0:	2140      	movs	r1, #64	; 0x40
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8d6 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e00a      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e000      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	f040 80ac 	bne.w	8006b6a <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_UART_Receive+0x2e>
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e0a4      	b.n	8006b6c <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_UART_Receive+0x40>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e09d      	b.n	8006b6c <HAL_UART_Receive+0x17c>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2222      	movs	r2, #34	; 0x22
 8006a42:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a46:	f7fb f8f3 	bl	8001c30 <HAL_GetTick>
 8006a4a:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a64:	d10e      	bne.n	8006a84 <HAL_UART_Receive+0x94>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <HAL_UART_Receive+0x8a>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a78:	e028      	b.n	8006acc <HAL_UART_Receive+0xdc>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	22ff      	movs	r2, #255	; 0xff
 8006a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a82:	e023      	b.n	8006acc <HAL_UART_Receive+0xdc>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10d      	bne.n	8006aa8 <HAL_UART_Receive+0xb8>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <HAL_UART_Receive+0xae>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	22ff      	movs	r2, #255	; 0xff
 8006a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9c:	e016      	b.n	8006acc <HAL_UART_Receive+0xdc>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	227f      	movs	r2, #127	; 0x7f
 8006aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa6:	e011      	b.n	8006acc <HAL_UART_Receive+0xdc>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab0:	d10c      	bne.n	8006acc <HAL_UART_Receive+0xdc>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <HAL_UART_Receive+0xd4>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	227f      	movs	r2, #127	; 0x7f
 8006abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac2:	e003      	b.n	8006acc <HAL_UART_Receive+0xdc>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	223f      	movs	r2, #63	; 0x3f
 8006ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ad2:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8006ad4:	e039      	b.n	8006b4a <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2200      	movs	r2, #0
 8006af0:	2120      	movs	r1, #32
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f83e 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e034      	b.n	8006b6c <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0a:	d112      	bne.n	8006b32 <HAL_UART_Receive+0x142>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10e      	bne.n	8006b32 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	8b7b      	ldrh	r3, [r7, #26]
 8006b22:	4013      	ands	r3, r2
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	60bb      	str	r3, [r7, #8]
 8006b30:	e00b      	b.n	8006b4a <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	60ba      	str	r2, [r7, #8]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b3e:	b2d1      	uxtb	r1, r2
 8006b40:	8b7a      	ldrh	r2, [r7, #26]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	400a      	ands	r2, r1
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1bf      	bne.n	8006ad6 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
  }
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b84:	e02c      	b.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d028      	beq.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d007      	beq.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b94:	f7fb f84c 	bl	8001c30 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	1ad2      	subs	r2, r2, r3
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d31d      	bcc.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bb2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	6892      	ldr	r2, [r2, #8]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e00f      	b.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69da      	ldr	r2, [r3, #28]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	401a      	ands	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d0c3      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006c14:	2310      	movs	r3, #16
 8006c16:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6819      	ldr	r1, [r3, #0]
 8006c46:	4baa      	ldr	r3, [pc, #680]	; (8006ef0 <UART_SetConfig+0x2e8>)
 8006c48:	400b      	ands	r3, r1
 8006c4a:	68f9      	ldr	r1, [r7, #12]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6812      	ldr	r2, [r2, #0]
 8006c58:	6852      	ldr	r2, [r2, #4]
 8006c5a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	68d2      	ldr	r2, [r2, #12]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	6892      	ldr	r2, [r2, #8]
 8006c7c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a9a      	ldr	r2, [pc, #616]	; (8006ef4 <UART_SetConfig+0x2ec>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d11f      	bne.n	8006cd0 <UART_SetConfig+0xc8>
 8006c90:	4b99      	ldr	r3, [pc, #612]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	f200 813e 	bhi.w	8006f1c <UART_SetConfig+0x314>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0xa0>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cc5 	.word	0x08006cc5
 8006cb0:	08006cbf 	.word	0x08006cbf
 8006cb4:	08006ccb 	.word	0x08006ccb
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
 8006cbc:	e12e      	b.n	8006f1c <UART_SetConfig+0x314>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	75fb      	strb	r3, [r7, #23]
 8006cc2:	e12b      	b.n	8006f1c <UART_SetConfig+0x314>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	75fb      	strb	r3, [r7, #23]
 8006cc8:	e128      	b.n	8006f1c <UART_SetConfig+0x314>
 8006cca:	2308      	movs	r3, #8
 8006ccc:	75fb      	strb	r3, [r7, #23]
 8006cce:	e125      	b.n	8006f1c <UART_SetConfig+0x314>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a89      	ldr	r2, [pc, #548]	; (8006efc <UART_SetConfig+0x2f4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d130      	bne.n	8006d3c <UART_SetConfig+0x134>
 8006cda:	4b87      	ldr	r3, [pc, #540]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	f200 8119 	bhi.w	8006f1c <UART_SetConfig+0x314>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0xe8>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d25 	.word	0x08006d25
 8006cf4:	08006f1d 	.word	0x08006f1d
 8006cf8:	08006f1d 	.word	0x08006f1d
 8006cfc:	08006f1d 	.word	0x08006f1d
 8006d00:	08006d31 	.word	0x08006d31
 8006d04:	08006f1d 	.word	0x08006f1d
 8006d08:	08006f1d 	.word	0x08006f1d
 8006d0c:	08006f1d 	.word	0x08006f1d
 8006d10:	08006d2b 	.word	0x08006d2b
 8006d14:	08006f1d 	.word	0x08006f1d
 8006d18:	08006f1d 	.word	0x08006f1d
 8006d1c:	08006f1d 	.word	0x08006f1d
 8006d20:	08006d37 	.word	0x08006d37
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
 8006d28:	e0f8      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	75fb      	strb	r3, [r7, #23]
 8006d2e:	e0f5      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d30:	2304      	movs	r3, #4
 8006d32:	75fb      	strb	r3, [r7, #23]
 8006d34:	e0f2      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d36:	2308      	movs	r3, #8
 8006d38:	75fb      	strb	r3, [r7, #23]
 8006d3a:	e0ef      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a6f      	ldr	r2, [pc, #444]	; (8006f00 <UART_SetConfig+0x2f8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d11c      	bne.n	8006d80 <UART_SetConfig+0x178>
 8006d46:	4b6c      	ldr	r3, [pc, #432]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d00f      	beq.n	8006d74 <UART_SetConfig+0x16c>
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d802      	bhi.n	8006d5e <UART_SetConfig+0x156>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <UART_SetConfig+0x160>
 8006d5c:	e0de      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d005      	beq.n	8006d6e <UART_SetConfig+0x166>
 8006d62:	2b30      	cmp	r3, #48	; 0x30
 8006d64:	d009      	beq.n	8006d7a <UART_SetConfig+0x172>
 8006d66:	e0d9      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	75fb      	strb	r3, [r7, #23]
 8006d6c:	e0d6      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	75fb      	strb	r3, [r7, #23]
 8006d72:	e0d3      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d74:	2304      	movs	r3, #4
 8006d76:	75fb      	strb	r3, [r7, #23]
 8006d78:	e0d0      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	75fb      	strb	r3, [r7, #23]
 8006d7e:	e0cd      	b.n	8006f1c <UART_SetConfig+0x314>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a5f      	ldr	r2, [pc, #380]	; (8006f04 <UART_SetConfig+0x2fc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d11c      	bne.n	8006dc4 <UART_SetConfig+0x1bc>
 8006d8a:	4b5b      	ldr	r3, [pc, #364]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d00f      	beq.n	8006db8 <UART_SetConfig+0x1b0>
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	d802      	bhi.n	8006da2 <UART_SetConfig+0x19a>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <UART_SetConfig+0x1a4>
 8006da0:	e0bc      	b.n	8006f1c <UART_SetConfig+0x314>
 8006da2:	2b80      	cmp	r3, #128	; 0x80
 8006da4:	d005      	beq.n	8006db2 <UART_SetConfig+0x1aa>
 8006da6:	2bc0      	cmp	r3, #192	; 0xc0
 8006da8:	d009      	beq.n	8006dbe <UART_SetConfig+0x1b6>
 8006daa:	e0b7      	b.n	8006f1c <UART_SetConfig+0x314>
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]
 8006db0:	e0b4      	b.n	8006f1c <UART_SetConfig+0x314>
 8006db2:	2302      	movs	r3, #2
 8006db4:	75fb      	strb	r3, [r7, #23]
 8006db6:	e0b1      	b.n	8006f1c <UART_SetConfig+0x314>
 8006db8:	2304      	movs	r3, #4
 8006dba:	75fb      	strb	r3, [r7, #23]
 8006dbc:	e0ae      	b.n	8006f1c <UART_SetConfig+0x314>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	75fb      	strb	r3, [r7, #23]
 8006dc2:	e0ab      	b.n	8006f1c <UART_SetConfig+0x314>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a4f      	ldr	r2, [pc, #316]	; (8006f08 <UART_SetConfig+0x300>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d120      	bne.n	8006e10 <UART_SetConfig+0x208>
 8006dce:	4b4a      	ldr	r3, [pc, #296]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ddc:	d012      	beq.n	8006e04 <UART_SetConfig+0x1fc>
 8006dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de2:	d802      	bhi.n	8006dea <UART_SetConfig+0x1e2>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <UART_SetConfig+0x1f0>
 8006de8:	e098      	b.n	8006f1c <UART_SetConfig+0x314>
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dee:	d006      	beq.n	8006dfe <UART_SetConfig+0x1f6>
 8006df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df4:	d009      	beq.n	8006e0a <UART_SetConfig+0x202>
 8006df6:	e091      	b.n	8006f1c <UART_SetConfig+0x314>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	75fb      	strb	r3, [r7, #23]
 8006dfc:	e08e      	b.n	8006f1c <UART_SetConfig+0x314>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	75fb      	strb	r3, [r7, #23]
 8006e02:	e08b      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e04:	2304      	movs	r3, #4
 8006e06:	75fb      	strb	r3, [r7, #23]
 8006e08:	e088      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	75fb      	strb	r3, [r7, #23]
 8006e0e:	e085      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a3d      	ldr	r2, [pc, #244]	; (8006f0c <UART_SetConfig+0x304>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d120      	bne.n	8006e5c <UART_SetConfig+0x254>
 8006e1a:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e28:	d012      	beq.n	8006e50 <UART_SetConfig+0x248>
 8006e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2e:	d802      	bhi.n	8006e36 <UART_SetConfig+0x22e>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <UART_SetConfig+0x23c>
 8006e34:	e072      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3a:	d006      	beq.n	8006e4a <UART_SetConfig+0x242>
 8006e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e40:	d009      	beq.n	8006e56 <UART_SetConfig+0x24e>
 8006e42:	e06b      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
 8006e48:	e068      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	75fb      	strb	r3, [r7, #23]
 8006e4e:	e065      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e50:	2304      	movs	r3, #4
 8006e52:	75fb      	strb	r3, [r7, #23]
 8006e54:	e062      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e56:	2308      	movs	r3, #8
 8006e58:	75fb      	strb	r3, [r7, #23]
 8006e5a:	e05f      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a2b      	ldr	r2, [pc, #172]	; (8006f10 <UART_SetConfig+0x308>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d120      	bne.n	8006ea8 <UART_SetConfig+0x2a0>
 8006e66:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e74:	d012      	beq.n	8006e9c <UART_SetConfig+0x294>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	d802      	bhi.n	8006e82 <UART_SetConfig+0x27a>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <UART_SetConfig+0x288>
 8006e80:	e04c      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e86:	d006      	beq.n	8006e96 <UART_SetConfig+0x28e>
 8006e88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e8c:	d009      	beq.n	8006ea2 <UART_SetConfig+0x29a>
 8006e8e:	e045      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e90:	2300      	movs	r3, #0
 8006e92:	75fb      	strb	r3, [r7, #23]
 8006e94:	e042      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e96:	2302      	movs	r3, #2
 8006e98:	75fb      	strb	r3, [r7, #23]
 8006e9a:	e03f      	b.n	8006f1c <UART_SetConfig+0x314>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	75fb      	strb	r3, [r7, #23]
 8006ea0:	e03c      	b.n	8006f1c <UART_SetConfig+0x314>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	75fb      	strb	r3, [r7, #23]
 8006ea6:	e039      	b.n	8006f1c <UART_SetConfig+0x314>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a19      	ldr	r2, [pc, #100]	; (8006f14 <UART_SetConfig+0x30c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d135      	bne.n	8006f1e <UART_SetConfig+0x316>
 8006eb2:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <UART_SetConfig+0x2f0>)
 8006eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec0:	d012      	beq.n	8006ee8 <UART_SetConfig+0x2e0>
 8006ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec6:	d802      	bhi.n	8006ece <UART_SetConfig+0x2c6>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d007      	beq.n	8006edc <UART_SetConfig+0x2d4>
 8006ecc:	e026      	b.n	8006f1c <UART_SetConfig+0x314>
 8006ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed2:	d006      	beq.n	8006ee2 <UART_SetConfig+0x2da>
 8006ed4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ed8:	d01e      	beq.n	8006f18 <UART_SetConfig+0x310>
 8006eda:	e01f      	b.n	8006f1c <UART_SetConfig+0x314>
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
 8006ee0:	e01c      	b.n	8006f1c <UART_SetConfig+0x314>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	75fb      	strb	r3, [r7, #23]
 8006ee6:	e019      	b.n	8006f1c <UART_SetConfig+0x314>
 8006ee8:	2304      	movs	r3, #4
 8006eea:	75fb      	strb	r3, [r7, #23]
 8006eec:	e016      	b.n	8006f1c <UART_SetConfig+0x314>
 8006eee:	bf00      	nop
 8006ef0:	efff69f3 	.word	0xefff69f3
 8006ef4:	40011000 	.word	0x40011000
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	40004400 	.word	0x40004400
 8006f00:	40004800 	.word	0x40004800
 8006f04:	40004c00 	.word	0x40004c00
 8006f08:	40005000 	.word	0x40005000
 8006f0c:	40011400 	.word	0x40011400
 8006f10:	40007800 	.word	0x40007800
 8006f14:	40007c00 	.word	0x40007c00
 8006f18:	2308      	movs	r3, #8
 8006f1a:	75fb      	strb	r3, [r7, #23]
 8006f1c:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f26:	d16c      	bne.n	8007002 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d854      	bhi.n	8006fd8 <UART_SetConfig+0x3d0>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <UART_SetConfig+0x32c>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f75 	.word	0x08006f75
 8006f3c:	08006f91 	.word	0x08006f91
 8006f40:	08006fd9 	.word	0x08006fd9
 8006f44:	08006fa7 	.word	0x08006fa7
 8006f48:	08006fd9 	.word	0x08006fd9
 8006f4c:	08006fd9 	.word	0x08006fd9
 8006f50:	08006fd9 	.word	0x08006fd9
 8006f54:	08006fc3 	.word	0x08006fc3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f58:	f7fe fcea 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	005a      	lsls	r2, r3, #1
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	441a      	add	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	82bb      	strh	r3, [r7, #20]
      break;
 8006f72:	e034      	b.n	8006fde <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f74:	f7fe fcf0 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	005a      	lsls	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	441a      	add	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8c:	82bb      	strh	r3, [r7, #20]
      break;
 8006f8e:	e026      	b.n	8006fde <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	085a      	lsrs	r2, r3, #1
 8006f96:	4b51      	ldr	r3, [pc, #324]	; (80070dc <UART_SetConfig+0x4d4>)
 8006f98:	4413      	add	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6852      	ldr	r2, [r2, #4]
 8006f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa2:	82bb      	strh	r3, [r7, #20]
      break;
 8006fa4:	e01b      	b.n	8006fde <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006fa6:	f7fe fc01 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8006faa:	4603      	mov	r3, r0
 8006fac:	005a      	lsls	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	441a      	add	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbe:	82bb      	strh	r3, [r7, #20]
      break;
 8006fc0:	e00d      	b.n	8006fde <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd4:	82bb      	strh	r3, [r7, #20]
      break;
 8006fd6:	e002      	b.n	8006fde <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	74fb      	strb	r3, [r7, #19]
      break;
 8006fdc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8006fde:	8abb      	ldrh	r3, [r7, #20]
 8006fe0:	f023 030f 	bic.w	r3, r3, #15
 8006fe4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fe6:	8abb      	ldrh	r3, [r7, #20]
 8006fe8:	105b      	asrs	r3, r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	897b      	ldrh	r3, [r7, #10]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	897a      	ldrh	r2, [r7, #10]
 8006ffe:	60da      	str	r2, [r3, #12]
 8007000:	e067      	b.n	80070d2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d861      	bhi.n	80070cc <UART_SetConfig+0x4c4>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <UART_SetConfig+0x408>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007035 	.word	0x08007035
 8007014:	08007055 	.word	0x08007055
 8007018:	08007075 	.word	0x08007075
 800701c:	080070cd 	.word	0x080070cd
 8007020:	08007091 	.word	0x08007091
 8007024:	080070cd 	.word	0x080070cd
 8007028:	080070cd 	.word	0x080070cd
 800702c:	080070cd 	.word	0x080070cd
 8007030:	080070b1 	.word	0x080070b1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681c      	ldr	r4, [r3, #0]
 8007038:	f7fe fc7a 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 800703c:	4602      	mov	r2, r0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	b29b      	uxth	r3, r3
 8007050:	60e3      	str	r3, [r4, #12]
      break;
 8007052:	e03e      	b.n	80070d2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681c      	ldr	r4, [r3, #0]
 8007058:	f7fe fc7e 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 800705c:	4602      	mov	r2, r0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	441a      	add	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	60e3      	str	r3, [r4, #12]
      break;
 8007072:	e02e      	b.n	80070d2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	0859      	lsrs	r1, r3, #1
 800707e:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <UART_SetConfig+0x4d8>)
 8007080:	440b      	add	r3, r1
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	6849      	ldr	r1, [r1, #4]
 8007086:	fbb3 f3f1 	udiv	r3, r3, r1
 800708a:	b29b      	uxth	r3, r3
 800708c:	60d3      	str	r3, [r2, #12]
      break;
 800708e:	e020      	b.n	80070d2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681c      	ldr	r4, [r3, #0]
 8007094:	f7fe fb8a 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8007098:	4602      	mov	r2, r0
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	441a      	add	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	60e3      	str	r3, [r4, #12]
      break;
 80070ae:	e010      	b.n	80070d2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6852      	ldr	r2, [r2, #4]
 80070b8:	0852      	lsrs	r2, r2, #1
 80070ba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6852      	ldr	r2, [r2, #4]
 80070c2:	fbb1 f2f2 	udiv	r2, r1, r2
 80070c6:	b292      	uxth	r2, r2
 80070c8:	60da      	str	r2, [r3, #12]
      break;
 80070ca:	e002      	b.n	80070d2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	74fb      	strb	r3, [r7, #19]
      break;
 80070d0:	bf00      	nop
    }
  }

  return ret;
 80070d2:	7cfb      	ldrb	r3, [r7, #19]

}
 80070d4:	4618      	mov	r0, r3
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}
 80070dc:	01e84800 	.word	0x01e84800
 80070e0:	00f42400 	.word	0x00f42400

080070e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	6852      	ldr	r2, [r2, #4]
 8007102:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	6852      	ldr	r2, [r2, #4]
 8007124:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800712c:	430a      	orrs	r2, r1
 800712e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	6852      	ldr	r2, [r2, #4]
 8007146:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	6852      	ldr	r2, [r2, #4]
 8007168:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	6892      	ldr	r2, [r2, #8]
 800718a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007192:	430a      	orrs	r2, r1
 8007194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6812      	ldr	r2, [r2, #0]
 80071aa:	6892      	ldr	r2, [r2, #8]
 80071ac:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071b4:	430a      	orrs	r2, r1
 80071b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01a      	beq.n	80071fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	6852      	ldr	r2, [r2, #4]
 80071ce:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e2:	d10a      	bne.n	80071fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	6852      	ldr	r2, [r2, #4]
 80071ee:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	6852      	ldr	r2, [r2, #4]
 8007210:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af02      	add	r7, sp, #8
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800723a:	f7fa fcf9 	bl	8001c30 <HAL_GetTick>
 800723e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b08      	cmp	r3, #8
 800724c:	d10e      	bne.n	800726c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800724e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff fc89 	bl	8006b74 <UART_WaitOnFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e00c      	b.n	8007286 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d027      	beq.n	80072fa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4b2f      	ldr	r3, [pc, #188]	; (8007370 <FMC_SDRAM_Init+0xe0>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072c0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80072c6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80072cc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80072d2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80072d8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80072de:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80072e4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80072ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	e032      	b.n	8007360 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007306:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007310:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007316:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <FMC_SDRAM_Init+0xe0>)
 8007328:	4013      	ands	r3, r2
 800732a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007334:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800733a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007340:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007346:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800734c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4313      	orrs	r3, r2
 8007352:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	ffff8000 	.word	0xffff8000

08007374 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d02e      	beq.n	80073ec <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800739a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073aa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80073b4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80073be:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80073c8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80073d2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	3b01      	subs	r3, #1
 80073da:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073dc:	4313      	orrs	r3, r2
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	609a      	str	r2, [r3, #8]
 80073ea:	e039      	b.n	8007460 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <FMC_SDRAM_Timing_Init+0xfc>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	3b01      	subs	r3, #1
 8007408:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800740a:	4313      	orrs	r3, r2
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800741e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	3b01      	subs	r3, #1
 800742c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800742e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	3b01      	subs	r3, #1
 8007436:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007438:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	3b01      	subs	r3, #1
 8007440:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007442:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	3b01      	subs	r3, #1
 800744a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800744c:	4313      	orrs	r3, r2
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	ff0f0fff 	.word	0xff0f0fff

08007474 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800748c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	3b01      	subs	r3, #1
 8007494:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007496:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074b8:	b084      	sub	sp, #16
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	f107 0014 	add.w	r0, r7, #20
 80074c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d11e      	bne.n	800750e <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <USB_CoreInit+0xa0>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 80074f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d105      	bne.n	8007506 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 f9a4 	bl	8008854 <USB_CoreReset>
 800750c:	e00c      	b.n	8007528 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 f99a 	bl	8008854 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d10b      	bne.n	8007546 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f043 0206 	orr.w	r2, r3, #6
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f043 0220 	orr.w	r2, r3, #32
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007552:	b004      	add	sp, #16
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	ffbdffbf 	.word	0xffbdffbf

0800755c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f043 0201 	orr.w	r2, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f023 0201 	bic.w	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d106      	bne.n	80075cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	e008      	b.n	80075de <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 80075de:	2032      	movs	r0, #50	; 0x32
 80075e0:	f7fa fb32 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075f0:	b084      	sub	sp, #16
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	f107 001c 	add.w	r0, r7, #28
 80075fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 8007612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007614:	2b00      	cmp	r3, #0
 8007616:	d111      	bne.n	800763c <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007642:	461a      	mov	r2, r3
 8007644:	2300      	movs	r3, #0
 8007646:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764e:	461a      	mov	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10c      	bne.n	800767a <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d104      	bne.n	8007670 <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8007666:	2100      	movs	r1, #0
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f957 	bl	800791c <USB_SetDevSpeed>
 800766e:	e018      	b.n	80076a2 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8007670:	2101      	movs	r1, #1
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f952 	bl	800791c <USB_SetDevSpeed>
 8007678:	e013      	b.n	80076a2 <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	2b03      	cmp	r3, #3
 800767e:	d10c      	bne.n	800769a <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8007686:	2100      	movs	r1, #0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f947 	bl	800791c <USB_SetDevSpeed>
 800768e:	e008      	b.n	80076a2 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8007690:	2101      	movs	r1, #1
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f942 	bl	800791c <USB_SetDevSpeed>
 8007698:	e003      	b.n	80076a2 <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800769a:	2103      	movs	r1, #3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f93d 	bl	800791c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80076a2:	2110      	movs	r1, #16
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f8f1 	bl	800788c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f914 	bl	80078d8 <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b6:	461a      	mov	r2, r3
 80076b8:	2300      	movs	r3, #0
 80076ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	461a      	mov	r2, r3
 80076c4:	2300      	movs	r3, #0
 80076c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	461a      	mov	r2, r3
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295
 80076d4:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076dc:	461a      	mov	r2, r3
 80076de:	2300      	movs	r3, #0
 80076e0:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	e034      	b.n	8007752 <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076fe:	d10a      	bne.n	8007716 <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770c:	461a      	mov	r2, r3
 800770e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	e008      	b.n	8007728 <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007722:	461a      	mov	r2, r3
 8007724:	2300      	movs	r3, #0
 8007726:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	461a      	mov	r2, r3
 8007736:	2300      	movs	r3, #0
 8007738:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	461a      	mov	r2, r3
 8007748:	23ff      	movs	r3, #255	; 0xff
 800774a:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3301      	adds	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	429a      	cmp	r2, r3
 8007758:	d8c6      	bhi.n	80076e8 <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e034      	b.n	80077ca <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007776:	d10a      	bne.n	800778e <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	461a      	mov	r2, r3
 8007786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e008      	b.n	80077a0 <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779a:	461a      	mov	r2, r3
 800779c:	2300      	movs	r3, #0
 800779e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ac:	461a      	mov	r2, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	461a      	mov	r2, r3
 80077c0:	23ff      	movs	r3, #255	; 0xff
 80077c2:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d8c6      	bhi.n	8007760 <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	461a      	mov	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d115      	bne.n	800781a <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b21      	ldr	r3, [pc, #132]	; (800787c <USB_DevInit+0x28c>)
 80077f8:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	4619      	mov	r1, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780a:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <USB_DevInit+0x290>)
 800780c:	4313      	orrs	r3, r2
 800780e:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007826:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f043 0210 	orr.w	r2, r3, #16
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	4b11      	ldr	r3, [pc, #68]	; (8007884 <USB_DevInit+0x294>)
 8007840:	4313      	orrs	r3, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8007846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f043 0208 	orr.w	r2, r3, #8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8007858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785a:	2b01      	cmp	r3, #1
 800785c:	d105      	bne.n	800786a <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <USB_DevInit+0x298>)
 8007864:	4313      	orrs	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007876:	b004      	add	sp, #16
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	00800100 	.word	0x00800100
 8007880:	00010003 	.word	0x00010003
 8007884:	803c3800 	.word	0x803c3800
 8007888:	40000004 	.word	0x40000004

0800788c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	f043 0220 	orr.w	r2, r3, #32
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <USB_FlushTxFifo+0x48>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d901      	bls.n	80078b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e006      	b.n	80078c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d0f0      	beq.n	80078a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	00030d40 	.word	0x00030d40

080078d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2210      	movs	r2, #16
 80078e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a09      	ldr	r2, [pc, #36]	; (8007918 <USB_FlushRxFifo+0x40>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e006      	b.n	800790a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b10      	cmp	r3, #16
 8007906:	d0f0      	beq.n	80078ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	00030d40 	.word	0x00030d40

0800791c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	4619      	mov	r1, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	4313      	orrs	r3, r2
 800793c:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0306 	and.w	r3, r3, #6
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
 800796c:	e01c      	b.n	80079a8 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 0306 	and.w	r3, r3, #6
 800797a:	2b02      	cmp	r3, #2
 800797c:	d007      	beq.n	800798e <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800798a:	2b06      	cmp	r3, #6
 800798c:	d102      	bne.n	8007994 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 800798e:	2303      	movs	r3, #3
 8007990:	73fb      	strb	r3, [r7, #15]
 8007992:	e009      	b.n	80079a8 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0306 	and.w	r3, r3, #6
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d101      	bne.n	80079a8 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 80079a4:	2302      	movs	r3, #2
 80079a6:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d13c      	bne.n	8007a44 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d0:	4619      	mov	r1, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	2301      	movs	r3, #1
 80079e2:	4083      	lsls	r3, r0
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4313      	orrs	r3, r2
 80079e8:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d158      	bne.n	8007ab4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	4618      	mov	r0, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	78c9      	ldrb	r1, [r1, #3]
 8007a2e:	0489      	lsls	r1, r1, #18
 8007a30:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	7809      	ldrb	r1, [r1, #0]
 8007a36:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <USB_ActivateEndpoint+0x10c>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	6003      	str	r3, [r0, #0]
 8007a42:	e037      	b.n	8007ab4 <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	7812      	ldrb	r2, [r2, #0]
 8007a58:	4610      	mov	r0, r2
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	4082      	lsls	r2, r0
 8007a5e:	0412      	lsls	r2, r2, #16
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11b      	bne.n	8007ab4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	78c9      	ldrb	r1, [r1, #3]
 8007aa8:	0489      	lsls	r1, r1, #18
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	431a      	orrs	r2, r3
 8007aae:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <USB_ActivateEndpoint+0x10c>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	10008000 	.word	0x10008000

08007ac8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d135      	bne.n	8007b46 <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	2301      	movs	r3, #1
 8007af2:	4083      	lsls	r3, r0
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	43db      	mvns	r3, r3
 8007af8:	4013      	ands	r3, r2
 8007afa:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	4619      	mov	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	2301      	movs	r3, #1
 8007b14:	4083      	lsls	r3, r0
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b42:	600b      	str	r3, [r1, #0]
 8007b44:	e034      	b.n	8007bb0 <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4083      	lsls	r3, r0
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	43db      	mvns	r3, r3
 8007b64:	4013      	ands	r3, r2
 8007b66:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6e:	4619      	mov	r1, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4083      	lsls	r3, r0
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	43db      	mvns	r3, r3
 8007b86:	4013      	ands	r3, r2
 8007b88:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	4619      	mov	r1, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bae:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
	...

08007bc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	f040 8148 	bne.w	8007e6c <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d139      	bne.n	8007c58 <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	4b96      	ldr	r3, [pc, #600]	; (8007e60 <USB_EPStartXfer+0x2a0>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c18:	4619      	mov	r1, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3e:	4619      	mov	r1, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	4b84      	ldr	r3, [pc, #528]	; (8007e64 <USB_EPStartXfer+0x2a4>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	610b      	str	r3, [r1, #16]
 8007c56:	e084      	b.n	8007d62 <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c66:	4619      	mov	r1, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	4b7a      	ldr	r3, [pc, #488]	; (8007e64 <USB_EPStartXfer+0x2a4>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	4b70      	ldr	r3, [pc, #448]	; (8007e60 <USB_EPStartXfer+0x2a0>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6959      	ldr	r1, [r3, #20]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	440b      	add	r3, r1
 8007cce:	1e59      	subs	r1, r3, #1
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cd8:	04d9      	lsls	r1, r3, #19
 8007cda:	4b63      	ldr	r3, [pc, #396]	; (8007e68 <USB_EPStartXfer+0x2a8>)
 8007cdc:	400b      	ands	r3, r1
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d00:	691a      	ldr	r2, [r3, #16]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	78db      	ldrb	r3, [r3, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d125      	bne.n	8007d62 <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	4619      	mov	r1, r3
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d3a:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d60:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d10b      	bne.n	8007d80 <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d76:	461a      	mov	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	6153      	str	r3, [r2, #20]
 8007d7e:	e016      	b.n	8007dae <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	78db      	ldrb	r3, [r3, #3]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d012      	beq.n	8007dae <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d96:	4619      	mov	r1, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	4610      	mov	r0, r2
 8007da6:	2201      	movs	r2, #1
 8007da8:	4082      	lsls	r2, r0
 8007daa:	4313      	orrs	r3, r2
 8007dac:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	78db      	ldrb	r3, [r3, #3]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d12e      	bne.n	8007e14 <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d113      	bne.n	8007dee <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dea:	600b      	str	r3, [r1, #0]
 8007dec:	e012      	b.n	8007e14 <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e12:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e22:	4619      	mov	r1, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e38:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	78db      	ldrb	r3, [r3, #3]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	f040 80f7 	bne.w	8008032 <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	68d9      	ldr	r1, [r3, #12]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	b298      	uxth	r0, r3
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	4603      	mov	r3, r0
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 fa51 	bl	8008300 <USB_WritePacket>
 8007e5e:	e0e8      	b.n	8008032 <USB_EPStartXfer+0x472>
 8007e60:	e007ffff 	.word	0xe007ffff
 8007e64:	fff80000 	.word	0xfff80000
 8007e68:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	4b6b      	ldr	r3, [pc, #428]	; (800803c <USB_EPStartXfer+0x47c>)
 8007e8e:	4013      	ands	r3, r2
 8007e90:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	4b63      	ldr	r3, [pc, #396]	; (8008040 <USB_EPStartXfer+0x480>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d129      	bne.n	8007f14 <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ece:	4619      	mov	r1, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efa:	4619      	mov	r1, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f10:	610b      	str	r3, [r1, #16]
 8007f12:	e03a      	b.n	8007f8a <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	695a      	ldr	r2, [r3, #20]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	1e5a      	subs	r2, r3, #1
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f38:	4619      	mov	r1, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	8afb      	ldrh	r3, [r7, #22]
 8007f4c:	04db      	lsls	r3, r3, #19
 8007f4e:	4618      	mov	r0, r3
 8007f50:	4b3c      	ldr	r3, [pc, #240]	; (8008044 <USB_EPStartXfer+0x484>)
 8007f52:	4003      	ands	r3, r0
 8007f54:	4313      	orrs	r3, r2
 8007f56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f66:	4618      	mov	r0, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	8af9      	ldrh	r1, [r7, #22]
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f86:	4313      	orrs	r3, r2
 8007f88:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10a      	bne.n	8007fa6 <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	78db      	ldrb	r3, [r3, #3]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d12e      	bne.n	800800c <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d113      	bne.n	8007fe6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	4619      	mov	r1, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fe2:	600b      	str	r3, [r1, #0]
 8007fe4:	e012      	b.n	800800c <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800800a:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	4619      	mov	r1, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008030:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	fff80000 	.word	0xfff80000
 8008040:	e007ffff 	.word	0xe007ffff
 8008044:	1ff80000 	.word	0x1ff80000

08008048 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	785b      	ldrb	r3, [r3, #1]
 800805a:	2b01      	cmp	r3, #1
 800805c:	f040 80cd 	bne.w	80081fa <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d139      	bne.n	80080dc <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	4619      	mov	r1, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	4b9b      	ldr	r3, [pc, #620]	; (80082f8 <USB_EP0StartXfer+0x2b0>)
 800808a:	4013      	ands	r3, r2
 800808c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	4619      	mov	r1, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c2:	4619      	mov	r1, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	4b89      	ldr	r3, [pc, #548]	; (80082fc <USB_EP0StartXfer+0x2b4>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]
 80080da:	e058      	b.n	800818e <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ea:	4619      	mov	r1, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fa:	691a      	ldr	r2, [r3, #16]
 80080fc:	4b7f      	ldr	r3, [pc, #508]	; (80082fc <USB_EP0StartXfer+0x2b4>)
 80080fe:	4013      	ands	r3, r2
 8008100:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008110:	4619      	mov	r1, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008120:	691a      	ldr	r2, [r3, #16]
 8008122:	4b75      	ldr	r3, [pc, #468]	; (80082f8 <USB_EP0StartXfer+0x2b0>)
 8008124:	4013      	ands	r3, r2
 8008126:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	d903      	bls.n	800813c <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814a:	4619      	mov	r1, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008160:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008170:	4619      	mov	r1, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800818a:	4313      	orrs	r3, r2
 800818c:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d10b      	bne.n	80081ac <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a2:	461a      	mov	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	6153      	str	r3, [r2, #20]
 80081aa:	e012      	b.n	80081d2 <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ba:	4619      	mov	r1, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	2301      	movs	r3, #1
 80081cc:	4083      	lsls	r3, r0
 80081ce:	4313      	orrs	r3, r2
 80081d0:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e0:	4619      	mov	r1, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081f6:	600b      	str	r3, [r1, #0]
 80081f8:	e077      	b.n	80082ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008208:	4619      	mov	r1, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008218:	691a      	ldr	r2, [r3, #16]
 800821a:	4b38      	ldr	r3, [pc, #224]	; (80082fc <USB_EP0StartXfer+0x2b4>)
 800821c:	4013      	ands	r3, r2
 800821e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	4619      	mov	r1, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	4b2d      	ldr	r3, [pc, #180]	; (80082f8 <USB_EP0StartXfer+0x2b0>)
 8008242:	4013      	ands	r3, r2
 8008244:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008264:	4619      	mov	r1, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800827a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	4619      	mov	r1, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082a4:	4313      	orrs	r3, r2
 80082a6:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d10a      	bne.n	80082c4 <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082bc:	461a      	mov	r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	4619      	mov	r1, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082e8:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	e007ffff 	.word	0xe007ffff
 80082fc:	fff80000 	.word	0xfff80000

08008300 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4611      	mov	r1, r2
 800830c:	461a      	mov	r2, r3
 800830e:	460b      	mov	r3, r1
 8008310:	71fb      	strb	r3, [r7, #7]
 8008312:	4613      	mov	r3, r2
 8008314:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 8008316:	2300      	movs	r3, #0
 8008318:	613b      	str	r3, [r7, #16]
 800831a:	2300      	movs	r3, #0
 800831c:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 800831e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d11d      	bne.n	8008362 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 8008326:	88bb      	ldrh	r3, [r7, #4]
 8008328:	3303      	adds	r3, #3
 800832a:	2b00      	cmp	r3, #0
 800832c:	da00      	bge.n	8008330 <USB_WritePacket+0x30>
 800832e:	3303      	adds	r3, #3
 8008330:	109b      	asrs	r3, r3, #2
 8008332:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e00f      	b.n	800835a <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	031a      	lsls	r2, r3, #12
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008346:	461a      	mov	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	3301      	adds	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	3304      	adds	r3, #4
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	429a      	cmp	r2, r3
 8008360:	d3eb      	bcc.n	800833a <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	371c      	adds	r7, #28
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	3303      	adds	r3, #3
 8008386:	2b00      	cmp	r3, #0
 8008388:	da00      	bge.n	800838c <USB_ReadPacket+0x1c>
 800838a:	3303      	adds	r3, #3
 800838c:	109b      	asrs	r3, r3, #2
 800838e:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	e00b      	b.n	80083ae <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	3301      	adds	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	3304      	adds	r3, #4
 80083ac:	60bb      	str	r3, [r7, #8]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d3ef      	bcc.n	8008396 <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 80083b6:	68bb      	ldr	r3, [r7, #8]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d130      	bne.n	8008438 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db12      	blt.n	8008410 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f8:	4619      	mov	r1, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800840e:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841e:	4619      	mov	r1, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008434:	600b      	str	r3, [r1, #0]
 8008436:	e02f      	b.n	8008498 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	db12      	blt.n	8008472 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	4619      	mov	r1, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008470:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	4619      	mov	r1, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008496:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	785b      	ldrb	r3, [r3, #1]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d12e      	bne.n	8008516 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c6:	4619      	mov	r1, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084dc:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	78db      	ldrb	r3, [r3, #3]
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d003      	beq.n	80084ee <USB_EPClearStall+0x48>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	78db      	ldrb	r3, [r3, #3]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d141      	bne.n	8008572 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	4619      	mov	r1, r3
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008512:	600b      	str	r3, [r1, #0]
 8008514:	e02d      	b.n	8008572 <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008524:	4619      	mov	r1, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800853a:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	78db      	ldrb	r3, [r3, #3]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d003      	beq.n	800854c <USB_EPClearStall+0xa6>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	78db      	ldrb	r3, [r3, #3]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d112      	bne.n	8008572 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855a:	4619      	mov	r1, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008570:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008592:	461a      	mov	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a8:	4619      	mov	r1, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085ba:	4313      	orrs	r3, r2
 80085bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f023 0302 	bic.w	r3, r3, #2
 80085e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 80085ea:	2003      	movs	r0, #3
 80085ec:	f7f9 fb2c 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008608:	461a      	mov	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f043 0302 	orr.w	r3, r3, #2
 8008616:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8008618:	2003      	movs	r0, #3
 800861a:	f7f9 fb15 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4013      	ands	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  return v;
 8008644:	68fb      	ldr	r3, [r7, #12]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4013      	ands	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	0c1b      	lsrs	r3, r3, #16
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8008682:	b480      	push	{r7}
 8008684:	b085      	sub	sp, #20
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4013      	ands	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	b29b      	uxth	r3, r3
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4013      	ands	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
  return v;
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008708:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	fa22 f303 	lsr.w	r3, r2, r3
 8008712:	01db      	lsls	r3, r3, #7
 8008714:	b2db      	uxtb	r3, r3
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4013      	ands	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  return v;
 8008730:	68fb      	ldr	r3, [r7, #12]
}
 8008732:	4618      	mov	r0, r3
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	f003 0301 	and.w	r3, r3, #1
}
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876a:	4619      	mov	r1, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	4b13      	ldr	r3, [pc, #76]	; (80087c4 <USB_ActivateSetup+0x68>)
 8008776:	4013      	ands	r3, r2
 8008778:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0306 	and.w	r3, r3, #6
 8008786:	2b04      	cmp	r3, #4
 8008788:	d10a      	bne.n	80087a0 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008790:	461a      	mov	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f043 0303 	orr.w	r3, r3, #3
 800879e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	fffff800 	.word	0xfffff800

080087c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	460b      	mov	r3, r1
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087dc:	461a      	mov	r2, r3
 80087de:	2300      	movs	r3, #0
 80087e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	461a      	mov	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087f6:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	461a      	mov	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f043 0318 	orr.w	r3, r3, #24
 800880c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008814:	461a      	mov	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008822:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d10c      	bne.n	8008844 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	461a      	mov	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8008842:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4a13      	ldr	r2, [pc, #76]	; (80088b8 <USB_CoreReset+0x64>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d901      	bls.n	8008872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e01b      	b.n	80088aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	daf2      	bge.n	8008860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f043 0201 	orr.w	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a09      	ldr	r2, [pc, #36]	; (80088b8 <USB_CoreReset+0x64>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d901      	bls.n	800889c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e006      	b.n	80088aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d0f0      	beq.n	800888a <USB_CoreReset+0x36>

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	00030d40 	.word	0x00030d40

080088bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	4a08      	ldr	r2, [pc, #32]	; (80088ec <disk_status+0x30>)
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	79fa      	ldrb	r2, [r7, #7]
 80088d4:	4905      	ldr	r1, [pc, #20]	; (80088ec <disk_status+0x30>)
 80088d6:	440a      	add	r2, r1
 80088d8:	7b12      	ldrb	r2, [r2, #12]
 80088da:	4610      	mov	r0, r2
 80088dc:	4798      	blx	r3
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20000474 	.word	0x20000474

080088f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	4a0d      	ldr	r2, [pc, #52]	; (8008938 <disk_initialize+0x48>)
 8008902:	5cd3      	ldrb	r3, [r2, r3]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d111      	bne.n	800892c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	4a0b      	ldr	r2, [pc, #44]	; (8008938 <disk_initialize+0x48>)
 800890c:	2101      	movs	r1, #1
 800890e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	4a09      	ldr	r2, [pc, #36]	; (8008938 <disk_initialize+0x48>)
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	79fa      	ldrb	r2, [r7, #7]
 800891e:	4906      	ldr	r1, [pc, #24]	; (8008938 <disk_initialize+0x48>)
 8008920:	440a      	add	r2, r1
 8008922:	7b12      	ldrb	r2, [r2, #12]
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000474 	.word	0x20000474

0800893c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800893c:	b590      	push	{r4, r7, lr}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	4a0a      	ldr	r2, [pc, #40]	; (8008978 <disk_read+0x3c>)
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	689c      	ldr	r4, [r3, #8]
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4a07      	ldr	r2, [pc, #28]	; (8008978 <disk_read+0x3c>)
 800895c:	4413      	add	r3, r2
 800895e:	7b18      	ldrb	r0, [r3, #12]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	47a0      	blx	r4
 8008968:	4603      	mov	r3, r0
 800896a:	75fb      	strb	r3, [r7, #23]
  return res;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
}
 800896e:	4618      	mov	r0, r3
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	bd90      	pop	{r4, r7, pc}
 8008976:	bf00      	nop
 8008978:	20000474 	.word	0x20000474

0800897c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800897c:	b590      	push	{r4, r7, lr}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	607a      	str	r2, [r7, #4]
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4a0a      	ldr	r2, [pc, #40]	; (80089b8 <disk_write+0x3c>)
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	68dc      	ldr	r4, [r3, #12]
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <disk_write+0x3c>)
 800899c:	4413      	add	r3, r2
 800899e:	7b18      	ldrb	r0, [r3, #12]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	47a0      	blx	r4
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd90      	pop	{r4, r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20000474 	.word	0x20000474

080089bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	603a      	str	r2, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
 80089c8:	460b      	mov	r3, r1
 80089ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <disk_ioctl+0x38>)
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	79fa      	ldrb	r2, [r7, #7]
 80089da:	4906      	ldr	r1, [pc, #24]	; (80089f4 <disk_ioctl+0x38>)
 80089dc:	440a      	add	r2, r1
 80089de:	7b10      	ldrb	r0, [r2, #12]
 80089e0:	79b9      	ldrb	r1, [r7, #6]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	4798      	blx	r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20000474 	.word	0x20000474

080089f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3301      	adds	r3, #1
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008a08:	89fb      	ldrh	r3, [r7, #14]
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b21a      	sxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	b21b      	sxth	r3, r3
 8008a14:	4313      	orrs	r3, r2
 8008a16:	b21b      	sxth	r3, r3
 8008a18:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008a1a:	89fb      	ldrh	r3, [r7, #14]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3303      	adds	r3, #3
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	3202      	adds	r2, #2
 8008a40:	7812      	ldrb	r2, [r2, #0]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	3201      	adds	r2, #1
 8008a4e:	7812      	ldrb	r2, [r2, #0]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7812      	ldrb	r2, [r2, #0]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008a60:	68fb      	ldr	r3, [r7, #12]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	887a      	ldrh	r2, [r7, #2]
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	887b      	ldrh	r3, [r7, #2]
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	607a      	str	r2, [r7, #4]
 8008a92:	887a      	ldrh	r2, [r7, #2]
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	b2d2      	uxtb	r2, r2
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	0a1b      	lsrs	r3, r3, #8
 8008abe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	607a      	str	r2, [r7, #4]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	701a      	strb	r2, [r3, #0]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	0a1b      	lsrs	r3, r3, #8
 8008ae2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	607a      	str	r2, [r7, #4]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	701a      	strb	r2, [r3, #0]
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00d      	beq.n	8008b32 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	617a      	str	r2, [r7, #20]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	1c51      	adds	r1, r2, #1
 8008b20:	6139      	str	r1, [r7, #16]
 8008b22:	7812      	ldrb	r2, [r2, #0]
 8008b24:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1f1      	bne.n	8008b16 <mem_cpy+0x1a>
	}
}
 8008b32:	bf00      	nop
 8008b34:	371c      	adds	r7, #28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b3e:	b480      	push	{r7}
 8008b40:	b087      	sub	sp, #28
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	617a      	str	r2, [r7, #20]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	b2d2      	uxtb	r2, r2
 8008b58:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	607b      	str	r3, [r7, #4]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f3      	bne.n	8008b4e <mem_set+0x10>
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008b72:	b480      	push	{r7}
 8008b74:	b089      	sub	sp, #36	; 0x24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	61fa      	str	r2, [r7, #28]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	4619      	mov	r1, r3
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	61ba      	str	r2, [r7, #24]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	1acb      	subs	r3, r1, r3
 8008b9e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <mem_cmp+0x40>
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0eb      	beq.n	8008b8a <mem_cmp+0x18>

	return r;
 8008bb2:	697b      	ldr	r3, [r7, #20]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3724      	adds	r7, #36	; 0x24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008bca:	e002      	b.n	8008bd2 <chk_chr+0x12>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <chk_chr+0x26>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d1f2      	bne.n	8008bcc <chk_chr+0xc>
	return *str;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	781b      	ldrb	r3, [r3, #0]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c02:	2300      	movs	r3, #0
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	e029      	b.n	8008c60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008c0c:	4a27      	ldr	r2, [pc, #156]	; (8008cac <chk_lock+0xb4>)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	4413      	add	r3, r2
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01d      	beq.n	8008c56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c1a:	4a24      	ldr	r2, [pc, #144]	; (8008cac <chk_lock+0xb4>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	4413      	add	r3, r2
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d116      	bne.n	8008c5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008c2c:	4a1f      	ldr	r2, [pc, #124]	; (8008cac <chk_lock+0xb4>)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	011b      	lsls	r3, r3, #4
 8008c32:	4413      	add	r3, r2
 8008c34:	3304      	adds	r3, #4
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d10c      	bne.n	8008c5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c40:	4a1a      	ldr	r2, [pc, #104]	; (8008cac <chk_lock+0xb4>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	4413      	add	r3, r2
 8008c48:	3308      	adds	r3, #8
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d102      	bne.n	8008c5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c54:	e007      	b.n	8008c66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d9d2      	bls.n	8008c0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d109      	bne.n	8008c80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <chk_lock+0x80>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d101      	bne.n	8008c7c <chk_lock+0x84>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e010      	b.n	8008c9e <chk_lock+0xa6>
 8008c7c:	2312      	movs	r3, #18
 8008c7e:	e00e      	b.n	8008c9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d108      	bne.n	8008c98 <chk_lock+0xa0>
 8008c86:	4a09      	ldr	r2, [pc, #36]	; (8008cac <chk_lock+0xb4>)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	4413      	add	r3, r2
 8008c8e:	330c      	adds	r3, #12
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c96:	d101      	bne.n	8008c9c <chk_lock+0xa4>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	e000      	b.n	8008c9e <chk_lock+0xa6>
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000454 	.word	0x20000454

08008cb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	607b      	str	r3, [r7, #4]
 8008cba:	e002      	b.n	8008cc2 <enq_lock+0x12>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d806      	bhi.n	8008cd6 <enq_lock+0x26>
 8008cc8:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <enq_lock+0x40>)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	4413      	add	r3, r2
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f2      	bne.n	8008cbc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	bf14      	ite	ne
 8008cdc:	2301      	movne	r3, #1
 8008cde:	2300      	moveq	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20000454 	.word	0x20000454

08008cf4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	e01f      	b.n	8008d44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008d04:	4a41      	ldr	r2, [pc, #260]	; (8008e0c <inc_lock+0x118>)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	4413      	add	r3, r2
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d113      	bne.n	8008d3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008d16:	4a3d      	ldr	r2, [pc, #244]	; (8008e0c <inc_lock+0x118>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	011b      	lsls	r3, r3, #4
 8008d1c:	4413      	add	r3, r2
 8008d1e:	3304      	adds	r3, #4
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d109      	bne.n	8008d3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008d2a:	4a38      	ldr	r2, [pc, #224]	; (8008e0c <inc_lock+0x118>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	4413      	add	r3, r2
 8008d32:	3308      	adds	r3, #8
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d006      	beq.n	8008d4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d9dc      	bls.n	8008d04 <inc_lock+0x10>
 8008d4a:	e000      	b.n	8008d4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008d4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d132      	bne.n	8008dba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	e002      	b.n	8008d60 <inc_lock+0x6c>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d806      	bhi.n	8008d74 <inc_lock+0x80>
 8008d66:	4a29      	ldr	r2, [pc, #164]	; (8008e0c <inc_lock+0x118>)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	4413      	add	r3, r2
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f2      	bne.n	8008d5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d101      	bne.n	8008d7e <inc_lock+0x8a>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e040      	b.n	8008e00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4922      	ldr	r1, [pc, #136]	; (8008e0c <inc_lock+0x118>)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	440b      	add	r3, r1
 8008d8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	491e      	ldr	r1, [pc, #120]	; (8008e0c <inc_lock+0x118>)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	440b      	add	r3, r1
 8008d98:	3304      	adds	r3, #4
 8008d9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	695a      	ldr	r2, [r3, #20]
 8008da0:	491a      	ldr	r1, [pc, #104]	; (8008e0c <inc_lock+0x118>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	440b      	add	r3, r1
 8008da8:	3308      	adds	r3, #8
 8008daa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008dac:	4a17      	ldr	r2, [pc, #92]	; (8008e0c <inc_lock+0x118>)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	4413      	add	r3, r2
 8008db4:	330c      	adds	r3, #12
 8008db6:	2200      	movs	r2, #0
 8008db8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d009      	beq.n	8008dd4 <inc_lock+0xe0>
 8008dc0:	4a12      	ldr	r2, [pc, #72]	; (8008e0c <inc_lock+0x118>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	4413      	add	r3, r2
 8008dc8:	330c      	adds	r3, #12
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <inc_lock+0xe0>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e015      	b.n	8008e00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d108      	bne.n	8008dec <inc_lock+0xf8>
 8008dda:	4a0c      	ldr	r2, [pc, #48]	; (8008e0c <inc_lock+0x118>)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	4413      	add	r3, r2
 8008de2:	330c      	adds	r3, #12
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	3301      	adds	r3, #1
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	e001      	b.n	8008df0 <inc_lock+0xfc>
 8008dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008df0:	4906      	ldr	r1, [pc, #24]	; (8008e0c <inc_lock+0x118>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	440b      	add	r3, r1
 8008df8:	330c      	adds	r3, #12
 8008dfa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3301      	adds	r3, #1
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	20000454 	.word	0x20000454

08008e10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d825      	bhi.n	8008e70 <dec_lock+0x60>
		n = Files[i].ctr;
 8008e24:	4a17      	ldr	r2, [pc, #92]	; (8008e84 <dec_lock+0x74>)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	4413      	add	r3, r2
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008e32:	89fb      	ldrh	r3, [r7, #14]
 8008e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e38:	d101      	bne.n	8008e3e <dec_lock+0x2e>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008e3e:	89fb      	ldrh	r3, [r7, #14]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <dec_lock+0x3a>
 8008e44:	89fb      	ldrh	r3, [r7, #14]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008e4a:	4a0e      	ldr	r2, [pc, #56]	; (8008e84 <dec_lock+0x74>)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	4413      	add	r3, r2
 8008e52:	330c      	adds	r3, #12
 8008e54:	89fa      	ldrh	r2, [r7, #14]
 8008e56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008e58:	89fb      	ldrh	r3, [r7, #14]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <dec_lock+0x5a>
 8008e5e:	4a09      	ldr	r2, [pc, #36]	; (8008e84 <dec_lock+0x74>)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	011b      	lsls	r3, r3, #4
 8008e64:	4413      	add	r3, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	737b      	strb	r3, [r7, #13]
 8008e6e:	e001      	b.n	8008e74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008e70:	2302      	movs	r3, #2
 8008e72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008e74:	7b7b      	ldrb	r3, [r7, #13]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000454 	.word	0x20000454

08008e88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e010      	b.n	8008eb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e96:	4a0d      	ldr	r2, [pc, #52]	; (8008ecc <clear_lock+0x44>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	4413      	add	r3, r2
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d105      	bne.n	8008eb2 <clear_lock+0x2a>
 8008ea6:	4a09      	ldr	r2, [pc, #36]	; (8008ecc <clear_lock+0x44>)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	4413      	add	r3, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d9eb      	bls.n	8008e96 <clear_lock+0xe>
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000454 	.word	0x20000454

08008ed0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	78db      	ldrb	r3, [r3, #3]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d034      	beq.n	8008f4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7858      	ldrb	r0, [r3, #1]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	f7ff fd40 	bl	800897c <disk_write>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
 8008f06:	e022      	b.n	8008f4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d217      	bcs.n	8008f4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	789b      	ldrb	r3, [r3, #2]
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	e010      	b.n	8008f48 <sync_window+0x78>
					wsect += fs->fsize;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7858      	ldrb	r0, [r3, #1]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	f7ff fd1d 	bl	800897c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d8eb      	bhi.n	8008f26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d01b      	beq.n	8008fa8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ffad 	bl	8008ed0 <sync_window>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d113      	bne.n	8008fa8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	7858      	ldrb	r0, [r3, #1]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	f7ff fcd5 	bl	800893c <disk_read>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ff87 	bl	8008ed0 <sync_window>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d158      	bne.n	800907e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d148      	bne.n	8009066 <sync_fs+0xb2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	791b      	ldrb	r3, [r3, #4]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d144      	bne.n	8009066 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3330      	adds	r3, #48	; 0x30
 8008fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff fda9 	bl	8008b3e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3330      	adds	r3, #48	; 0x30
 8008ff0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ff4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fd38 	bl	8008a6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3330      	adds	r3, #48	; 0x30
 8009002:	4921      	ldr	r1, [pc, #132]	; (8009088 <sync_fs+0xd4>)
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff fd4d 	bl	8008aa4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3330      	adds	r3, #48	; 0x30
 800900e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009012:	491e      	ldr	r1, [pc, #120]	; (800908c <sync_fs+0xd8>)
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff fd45 	bl	8008aa4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3330      	adds	r3, #48	; 0x30
 800901e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	4619      	mov	r1, r3
 8009028:	4610      	mov	r0, r2
 800902a:	f7ff fd3b 	bl	8008aa4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3330      	adds	r3, #48	; 0x30
 8009032:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	4619      	mov	r1, r3
 800903c:	4610      	mov	r0, r2
 800903e:	f7ff fd31 	bl	8008aa4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7858      	ldrb	r0, [r3, #1]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905a:	2301      	movs	r3, #1
 800905c:	f7ff fc8e 	bl	800897c <disk_write>
			fs->fsi_flag = 0;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	785b      	ldrb	r3, [r3, #1]
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff fca4 	bl	80089bc <disk_ioctl>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <sync_fs+0xca>
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800907e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	41615252 	.word	0x41615252
 800908c:	61417272 	.word	0x61417272

08009090 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	3b02      	subs	r3, #2
 800909e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	1e9a      	subs	r2, r3, #2
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d801      	bhi.n	80090b0 <clust2sect+0x20>
 80090ac:	2300      	movs	r3, #0
 80090ae:	e008      	b.n	80090c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	895b      	ldrh	r3, [r3, #10]
 80090b4:	461a      	mov	r2, r3
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	fb03 f202 	mul.w	r2, r3, r2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	4413      	add	r3, r2
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d904      	bls.n	80090ee <get_fat+0x20>
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	695a      	ldr	r2, [r3, #20]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d802      	bhi.n	80090f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e08c      	b.n	800920e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295
 80090f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d045      	beq.n	800918e <get_fat+0xc0>
 8009102:	2b03      	cmp	r3, #3
 8009104:	d05d      	beq.n	80091c2 <get_fat+0xf4>
 8009106:	2b01      	cmp	r3, #1
 8009108:	d177      	bne.n	80091fa <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	085b      	lsrs	r3, r3, #1
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6a1a      	ldr	r2, [r3, #32]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	0a5b      	lsrs	r3, r3, #9
 8009120:	4413      	add	r3, r2
 8009122:	4619      	mov	r1, r3
 8009124:	6938      	ldr	r0, [r7, #16]
 8009126:	f7ff ff17 	bl	8008f58 <move_window>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d167      	bne.n	8009200 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	60fa      	str	r2, [r7, #12]
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4413      	add	r3, r2
 800913e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009142:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	6a1a      	ldr	r2, [r3, #32]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	0a5b      	lsrs	r3, r3, #9
 800914c:	4413      	add	r3, r2
 800914e:	4619      	mov	r1, r3
 8009150:	6938      	ldr	r0, [r7, #16]
 8009152:	f7ff ff01 	bl	8008f58 <move_window>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d153      	bne.n	8009204 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	4413      	add	r3, r2
 8009166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	461a      	mov	r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	4313      	orrs	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <get_fat+0xb6>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	091b      	lsrs	r3, r3, #4
 8009182:	e002      	b.n	800918a <get_fat+0xbc>
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800918a:	617b      	str	r3, [r7, #20]
			break;
 800918c:	e03f      	b.n	800920e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6a1a      	ldr	r2, [r3, #32]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	0a1b      	lsrs	r3, r3, #8
 8009196:	4413      	add	r3, r2
 8009198:	4619      	mov	r1, r3
 800919a:	6938      	ldr	r0, [r7, #16]
 800919c:	f7ff fedc 	bl	8008f58 <move_window>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d130      	bne.n	8009208 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80091b4:	4413      	add	r3, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff fc1e 	bl	80089f8 <ld_word>
 80091bc:	4603      	mov	r3, r0
 80091be:	617b      	str	r3, [r7, #20]
			break;
 80091c0:	e025      	b.n	800920e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	09db      	lsrs	r3, r3, #7
 80091ca:	4413      	add	r3, r2
 80091cc:	4619      	mov	r1, r3
 80091ce:	6938      	ldr	r0, [r7, #16]
 80091d0:	f7ff fec2 	bl	8008f58 <move_window>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d118      	bne.n	800920c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80091e8:	4413      	add	r3, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff fc1c 	bl	8008a28 <ld_dword>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091f6:	617b      	str	r3, [r7, #20]
			break;
 80091f8:	e009      	b.n	800920e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80091fa:	2301      	movs	r3, #1
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	e006      	b.n	800920e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009200:	bf00      	nop
 8009202:	e004      	b.n	800920e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009204:	bf00      	nop
 8009206:	e002      	b.n	800920e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800920c:	bf00      	nop
		}
	}

	return val;
 800920e:	697b      	ldr	r3, [r7, #20]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b089      	sub	sp, #36	; 0x24
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009224:	2302      	movs	r3, #2
 8009226:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b01      	cmp	r3, #1
 800922c:	f240 80d6 	bls.w	80093dc <put_fat+0x1c4>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	695a      	ldr	r2, [r3, #20]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	429a      	cmp	r2, r3
 8009238:	f240 80d0 	bls.w	80093dc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b02      	cmp	r3, #2
 8009242:	d073      	beq.n	800932c <put_fat+0x114>
 8009244:	2b03      	cmp	r3, #3
 8009246:	f000 8091 	beq.w	800936c <put_fat+0x154>
 800924a:	2b01      	cmp	r3, #1
 800924c:	f040 80c6 	bne.w	80093dc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	61bb      	str	r3, [r7, #24]
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	4413      	add	r3, r2
 800925c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a1a      	ldr	r2, [r3, #32]
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	0a5b      	lsrs	r3, r3, #9
 8009266:	4413      	add	r3, r2
 8009268:	4619      	mov	r1, r3
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff fe74 	bl	8008f58 <move_window>
 8009270:	4603      	mov	r3, r0
 8009272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009274:	7ffb      	ldrb	r3, [r7, #31]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f040 80a9 	bne.w	80093ce <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	1c59      	adds	r1, r3, #1
 8009286:	61b9      	str	r1, [r7, #24]
 8009288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928c:	4413      	add	r3, r2
 800928e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <put_fat+0x9e>
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	b25b      	sxtb	r3, r3
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	b25a      	sxtb	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	b25b      	sxtb	r3, r3
 80092ae:	4313      	orrs	r3, r2
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	e001      	b.n	80092ba <put_fat+0xa2>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a1a      	ldr	r2, [r3, #32]
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	0a5b      	lsrs	r3, r3, #9
 80092cc:	4413      	add	r3, r2
 80092ce:	4619      	mov	r1, r3
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff fe41 	bl	8008f58 <move_window>
 80092d6:	4603      	mov	r3, r0
 80092d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092da:	7ffb      	ldrb	r3, [r7, #31]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d178      	bne.n	80093d2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ec:	4413      	add	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <put_fat+0xea>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	e00e      	b.n	8009320 <put_fat+0x108>
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b25b      	sxtb	r3, r3
 8009308:	f023 030f 	bic.w	r3, r3, #15
 800930c:	b25a      	sxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	b25b      	sxtb	r3, r3
 8009314:	f003 030f 	and.w	r3, r3, #15
 8009318:	b25b      	sxtb	r3, r3
 800931a:	4313      	orrs	r3, r2
 800931c:	b25b      	sxtb	r3, r3
 800931e:	b2db      	uxtb	r3, r3
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	70da      	strb	r2, [r3, #3]
			break;
 800932a:	e057      	b.n	80093dc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a1a      	ldr	r2, [r3, #32]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	4413      	add	r3, r2
 8009336:	4619      	mov	r1, r3
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f7ff fe0d 	bl	8008f58 <move_window>
 800933e:	4603      	mov	r3, r0
 8009340:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009342:	7ffb      	ldrb	r3, [r7, #31]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d146      	bne.n	80093d6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009356:	4413      	add	r3, r2
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	b292      	uxth	r2, r2
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fb85 	bl	8008a6e <st_word>
			fs->wflag = 1;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	70da      	strb	r2, [r3, #3]
			break;
 800936a:	e037      	b.n	80093dc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a1a      	ldr	r2, [r3, #32]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	09db      	lsrs	r3, r3, #7
 8009374:	4413      	add	r3, r2
 8009376:	4619      	mov	r1, r3
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7ff fded 	bl	8008f58 <move_window>
 800937e:	4603      	mov	r3, r0
 8009380:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009382:	7ffb      	ldrb	r3, [r7, #31]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d128      	bne.n	80093da <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800939c:	4413      	add	r3, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff fb42 	bl	8008a28 <ld_dword>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093aa:	4323      	orrs	r3, r4
 80093ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80093bc:	4413      	add	r3, r2
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff fb6f 	bl	8008aa4 <st_dword>
			fs->wflag = 1;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	70da      	strb	r2, [r3, #3]
			break;
 80093cc:	e006      	b.n	80093dc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093ce:	bf00      	nop
 80093d0:	e004      	b.n	80093dc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093d2:	bf00      	nop
 80093d4:	e002      	b.n	80093dc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093d6:	bf00      	nop
 80093d8:	e000      	b.n	80093dc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093da:	bf00      	nop
		}
	}
	return res;
 80093dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3724      	adds	r7, #36	; 0x24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd90      	pop	{r4, r7, pc}

080093e6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b088      	sub	sp, #32
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d904      	bls.n	800940c <remove_chain+0x26>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	695a      	ldr	r2, [r3, #20]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	429a      	cmp	r2, r3
 800940a:	d801      	bhi.n	8009410 <remove_chain+0x2a>
 800940c:	2302      	movs	r3, #2
 800940e:	e04b      	b.n	80094a8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00c      	beq.n	8009430 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	69b8      	ldr	r0, [r7, #24]
 800941e:	f7ff fefb 	bl	8009218 <put_fat>
 8009422:	4603      	mov	r3, r0
 8009424:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009426:	7ffb      	ldrb	r3, [r7, #31]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <remove_chain+0x4a>
 800942c:	7ffb      	ldrb	r3, [r7, #31]
 800942e:	e03b      	b.n	80094a8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009430:	68b9      	ldr	r1, [r7, #8]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fe4b 	bl	80090ce <get_fat>
 8009438:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d031      	beq.n	80094a4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <remove_chain+0x64>
 8009446:	2302      	movs	r3, #2
 8009448:	e02e      	b.n	80094a8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009450:	d101      	bne.n	8009456 <remove_chain+0x70>
 8009452:	2301      	movs	r3, #1
 8009454:	e028      	b.n	80094a8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009456:	2200      	movs	r2, #0
 8009458:	68b9      	ldr	r1, [r7, #8]
 800945a:	69b8      	ldr	r0, [r7, #24]
 800945c:	f7ff fedc 	bl	8009218 <put_fat>
 8009460:	4603      	mov	r3, r0
 8009462:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009464:	7ffb      	ldrb	r3, [r7, #31]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <remove_chain+0x88>
 800946a:	7ffb      	ldrb	r3, [r7, #31]
 800946c:	e01c      	b.n	80094a8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	3b02      	subs	r3, #2
 8009478:	429a      	cmp	r2, r3
 800947a:	d20b      	bcs.n	8009494 <remove_chain+0xae>
			fs->free_clst++;
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	791b      	ldrb	r3, [r3, #4]
 800948a:	f043 0301 	orr.w	r3, r3, #1
 800948e:	b2da      	uxtb	r2, r3
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	695a      	ldr	r2, [r3, #20]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d8c6      	bhi.n	8009430 <remove_chain+0x4a>
 80094a2:	e000      	b.n	80094a6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80094a4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d004      	beq.n	80094dc <create_chain+0x2c>
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	695a      	ldr	r2, [r3, #20]
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d81b      	bhi.n	8009514 <create_chain+0x64>
 80094dc:	2301      	movs	r3, #1
 80094de:	61bb      	str	r3, [r7, #24]
 80094e0:	e018      	b.n	8009514 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff fdf2 	bl	80090ce <get_fat>
 80094ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d801      	bhi.n	80094f6 <create_chain+0x46>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e070      	b.n	80095d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fc:	d101      	bne.n	8009502 <create_chain+0x52>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	e06a      	b.n	80095d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	695a      	ldr	r2, [r3, #20]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	429a      	cmp	r2, r3
 800950a:	d901      	bls.n	8009510 <create_chain+0x60>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	e063      	b.n	80095d8 <create_chain+0x128>
		scl = clst;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	3301      	adds	r3, #1
 800951c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	429a      	cmp	r2, r3
 8009526:	d807      	bhi.n	8009538 <create_chain+0x88>
				ncl = 2;
 8009528:	2302      	movs	r3, #2
 800952a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800952c:	69fa      	ldr	r2, [r7, #28]
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	429a      	cmp	r2, r3
 8009532:	d901      	bls.n	8009538 <create_chain+0x88>
 8009534:	2300      	movs	r3, #0
 8009536:	e04f      	b.n	80095d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009538:	69f9      	ldr	r1, [r7, #28]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fdc7 	bl	80090ce <get_fat>
 8009540:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00e      	beq.n	8009566 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d003      	beq.n	8009556 <create_chain+0xa6>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009554:	d101      	bne.n	800955a <create_chain+0xaa>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	e03e      	b.n	80095d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	429a      	cmp	r2, r3
 8009560:	d1da      	bne.n	8009518 <create_chain+0x68>
 8009562:	2300      	movs	r3, #0
 8009564:	e038      	b.n	80095d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009566:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009568:	f04f 32ff 	mov.w	r2, #4294967295
 800956c:	69f9      	ldr	r1, [r7, #28]
 800956e:	6938      	ldr	r0, [r7, #16]
 8009570:	f7ff fe52 	bl	8009218 <put_fat>
 8009574:	4603      	mov	r3, r0
 8009576:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d109      	bne.n	8009592 <create_chain+0xe2>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6938      	ldr	r0, [r7, #16]
 800958a:	f7ff fe45 	bl	8009218 <put_fat>
 800958e:	4603      	mov	r3, r0
 8009590:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d116      	bne.n	80095c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	691a      	ldr	r2, [r3, #16]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	3b02      	subs	r3, #2
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d804      	bhi.n	80095b6 <create_chain+0x106>
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	1e5a      	subs	r2, r3, #1
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	791b      	ldrb	r3, [r3, #4]
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	711a      	strb	r2, [r3, #4]
 80095c4:	e007      	b.n	80095d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d102      	bne.n	80095d2 <create_chain+0x122>
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295
 80095d0:	e000      	b.n	80095d4 <create_chain+0x124>
 80095d2:	2301      	movs	r3, #1
 80095d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80095d6:	69fb      	ldr	r3, [r7, #28]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	3304      	adds	r3, #4
 80095f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	0a5b      	lsrs	r3, r3, #9
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	8952      	ldrh	r2, [r2, #10]
 8009600:	fbb3 f3f2 	udiv	r3, r3, r2
 8009604:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	1d1a      	adds	r2, r3, #4
 800960a:	613a      	str	r2, [r7, #16]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <clmt_clust+0x3a>
 8009616:	2300      	movs	r3, #0
 8009618:	e010      	b.n	800963c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	d307      	bcc.n	8009632 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	617b      	str	r3, [r7, #20]
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3304      	adds	r3, #4
 800962e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009630:	e7e9      	b.n	8009606 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009632:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	4413      	add	r3, r2
}
 800963c:	4618      	mov	r0, r3
 800963e:	371c      	adds	r7, #28
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800965e:	d204      	bcs.n	800966a <dir_sdi+0x22>
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f003 031f 	and.w	r3, r3, #31
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <dir_sdi+0x26>
		return FR_INT_ERR;
 800966a:	2302      	movs	r3, #2
 800966c:	e063      	b.n	8009736 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <dir_sdi+0x46>
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b02      	cmp	r3, #2
 8009686:	d902      	bls.n	800968e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10c      	bne.n	80096ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	095b      	lsrs	r3, r3, #5
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	8912      	ldrh	r2, [r2, #8]
 800969c:	4293      	cmp	r3, r2
 800969e:	d301      	bcc.n	80096a4 <dir_sdi+0x5c>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e048      	b.n	8009736 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	61da      	str	r2, [r3, #28]
 80096ac:	e029      	b.n	8009702 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	895b      	ldrh	r3, [r3, #10]
 80096b2:	025b      	lsls	r3, r3, #9
 80096b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096b6:	e019      	b.n	80096ec <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6979      	ldr	r1, [r7, #20]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fd06 	bl	80090ce <get_fat>
 80096c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d101      	bne.n	80096d0 <dir_sdi+0x88>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e032      	b.n	8009736 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d904      	bls.n	80096e0 <dir_sdi+0x98>
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d801      	bhi.n	80096e4 <dir_sdi+0x9c>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e028      	b.n	8009736 <dir_sdi+0xee>
			ofs -= csz;
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d2e1      	bcs.n	80096b8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80096f4:	6979      	ldr	r1, [r7, #20]
 80096f6:	6938      	ldr	r0, [r7, #16]
 80096f8:	f7ff fcca 	bl	8009090 <clust2sect>
 80096fc:	4602      	mov	r2, r0
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <dir_sdi+0xcc>
 8009710:	2302      	movs	r3, #2
 8009712:	e010      	b.n	8009736 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	69da      	ldr	r2, [r3, #28]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	0a5b      	lsrs	r3, r3, #9
 800971c:	441a      	add	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972e:	441a      	add	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b086      	sub	sp, #24
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	3320      	adds	r3, #32
 8009754:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <dir_next+0x28>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009764:	d301      	bcc.n	800976a <dir_next+0x2c>
 8009766:	2304      	movs	r3, #4
 8009768:	e0aa      	b.n	80098c0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009770:	2b00      	cmp	r3, #0
 8009772:	f040 8098 	bne.w	80098a6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10b      	bne.n	80097a0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	8912      	ldrh	r2, [r2, #8]
 8009790:	4293      	cmp	r3, r2
 8009792:	f0c0 8088 	bcc.w	80098a6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	61da      	str	r2, [r3, #28]
 800979c:	2304      	movs	r3, #4
 800979e:	e08f      	b.n	80098c0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	0a5b      	lsrs	r3, r3, #9
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	8952      	ldrh	r2, [r2, #10]
 80097a8:	3a01      	subs	r2, #1
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d17a      	bne.n	80098a6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f7ff fc88 	bl	80090ce <get_fat>
 80097be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d801      	bhi.n	80097ca <dir_next+0x8c>
 80097c6:	2302      	movs	r3, #2
 80097c8:	e07a      	b.n	80098c0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d0:	d101      	bne.n	80097d6 <dir_next+0x98>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e074      	b.n	80098c0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	695a      	ldr	r2, [r3, #20]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d858      	bhi.n	8009892 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	61da      	str	r2, [r3, #28]
 80097ec:	2304      	movs	r3, #4
 80097ee:	e067      	b.n	80098c0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f7ff fe59 	bl	80094b0 <create_chain>
 80097fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <dir_next+0xcc>
 8009806:	2307      	movs	r3, #7
 8009808:	e05a      	b.n	80098c0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d101      	bne.n	8009814 <dir_next+0xd6>
 8009810:	2302      	movs	r3, #2
 8009812:	e055      	b.n	80098c0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d101      	bne.n	8009820 <dir_next+0xe2>
 800981c:	2301      	movs	r3, #1
 800981e:	e04f      	b.n	80098c0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff fb55 	bl	8008ed0 <sync_window>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <dir_next+0xf2>
 800982c:	2301      	movs	r3, #1
 800982e:	e047      	b.n	80098c0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3330      	adds	r3, #48	; 0x30
 8009834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009838:	2100      	movs	r1, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f7ff f97f 	bl	8008b3e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009840:	2300      	movs	r3, #0
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	6979      	ldr	r1, [r7, #20]
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fc22 	bl	8009090 <clust2sect>
 800984c:	4602      	mov	r2, r0
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	62da      	str	r2, [r3, #44]	; 0x2c
 8009852:	e012      	b.n	800987a <dir_next+0x13c>
						fs->wflag = 1;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2201      	movs	r2, #1
 8009858:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff fb38 	bl	8008ed0 <sync_window>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <dir_next+0x12c>
 8009866:	2301      	movs	r3, #1
 8009868:	e02a      	b.n	80098c0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3301      	adds	r3, #1
 800986e:	613b      	str	r3, [r7, #16]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	62da      	str	r2, [r3, #44]	; 0x2c
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	895b      	ldrh	r3, [r3, #10]
 800987e:	461a      	mov	r2, r3
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	429a      	cmp	r2, r3
 8009884:	d8e6      	bhi.n	8009854 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	1ad2      	subs	r2, r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009898:	6979      	ldr	r1, [r7, #20]
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff fbf8 	bl	8009090 <clust2sect>
 80098a0:	4602      	mov	r2, r0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b8:	441a      	add	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80098d8:	2100      	movs	r1, #0
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff feb4 	bl	8009648 <dir_sdi>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d12b      	bne.n	8009942 <dir_alloc+0x7a>
		n = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	4619      	mov	r1, r3
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f7ff fb2f 	bl	8008f58 <move_window>
 80098fa:	4603      	mov	r3, r0
 80098fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d11d      	bne.n	8009940 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2be5      	cmp	r3, #229	; 0xe5
 800990c:	d004      	beq.n	8009918 <dir_alloc+0x50>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d107      	bne.n	8009928 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	3301      	adds	r3, #1
 800991c:	613b      	str	r3, [r7, #16]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d102      	bne.n	800992c <dir_alloc+0x64>
 8009926:	e00c      	b.n	8009942 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009928:	2300      	movs	r3, #0
 800992a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800992c:	2101      	movs	r1, #1
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff ff05 	bl	800973e <dir_next>
 8009934:	4603      	mov	r3, r0
 8009936:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0d7      	beq.n	80098ee <dir_alloc+0x26>
 800993e:	e000      	b.n	8009942 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009940:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b04      	cmp	r3, #4
 8009946:	d101      	bne.n	800994c <dir_alloc+0x84>
 8009948:	2307      	movs	r3, #7
 800994a:	75fb      	strb	r3, [r7, #23]
	return res;
 800994c:	7dfb      	ldrb	r3, [r7, #23]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	331a      	adds	r3, #26
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff f847 	bl	80089f8 <ld_word>
 800996a:	4603      	mov	r3, r0
 800996c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b03      	cmp	r3, #3
 8009974:	d109      	bne.n	800998a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	3314      	adds	r3, #20
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff f83c 	bl	80089f8 <ld_word>
 8009980:	4603      	mov	r3, r0
 8009982:	041b      	lsls	r3, r3, #16
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800998a:	68fb      	ldr	r3, [r7, #12]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	331a      	adds	r3, #26
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	b292      	uxth	r2, r2
 80099a8:	4611      	mov	r1, r2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff f85f 	bl	8008a6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d109      	bne.n	80099cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f103 0214 	add.w	r2, r3, #20
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	0c1b      	lsrs	r3, r3, #16
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7ff f851 	bl	8008a6e <st_word>
	}
}
 80099cc:	bf00      	nop
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80099de:	2304      	movs	r3, #4
 80099e0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80099e8:	e03c      	b.n	8009a64 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	4619      	mov	r1, r3
 80099f0:	6938      	ldr	r0, [r7, #16]
 80099f2:	f7ff fab1 	bl	8008f58 <move_window>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d136      	bne.n	8009a6e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009a0e:	2304      	movs	r3, #4
 8009a10:	75fb      	strb	r3, [r7, #23]
 8009a12:	e031      	b.n	8009a78 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	330b      	adds	r3, #11
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a20:	73bb      	strb	r3, [r7, #14]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	7bba      	ldrb	r2, [r7, #14]
 8009a26:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2be5      	cmp	r3, #229	; 0xe5
 8009a2c:	d011      	beq.n	8009a52 <dir_read+0x7e>
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	2b2e      	cmp	r3, #46	; 0x2e
 8009a32:	d00e      	beq.n	8009a52 <dir_read+0x7e>
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b0f      	cmp	r3, #15
 8009a38:	d00b      	beq.n	8009a52 <dir_read+0x7e>
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	f023 0320 	bic.w	r3, r3, #32
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	bf0c      	ite	eq
 8009a44:	2301      	moveq	r3, #1
 8009a46:	2300      	movne	r3, #0
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d00f      	beq.n	8009a72 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009a52:	2100      	movs	r1, #0
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff fe72 	bl	800973e <dir_next>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d108      	bne.n	8009a76 <dir_read+0xa2>
	while (dp->sect) {
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1be      	bne.n	80099ea <dir_read+0x16>
 8009a6c:	e004      	b.n	8009a78 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009a6e:	bf00      	nop
 8009a70:	e002      	b.n	8009a78 <dir_read+0xa4>
				break;
 8009a72:	bf00      	nop
 8009a74:	e000      	b.n	8009a78 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009a76:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <dir_read+0xb0>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	61da      	str	r2, [r3, #28]
	return res;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff fdd2 	bl	8009648 <dir_sdi>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <dir_find+0x24>
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	e03e      	b.n	8009b30 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6938      	ldr	r0, [r7, #16]
 8009aba:	f7ff fa4d 	bl	8008f58 <move_window>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d12f      	bne.n	8009b28 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d102      	bne.n	8009adc <dir_find+0x4e>
 8009ad6:	2304      	movs	r3, #4
 8009ad8:	75fb      	strb	r3, [r7, #23]
 8009ada:	e028      	b.n	8009b2e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	330b      	adds	r3, #11
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	330b      	adds	r3, #11
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	f003 0308 	and.w	r3, r3, #8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <dir_find+0x86>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a18      	ldr	r0, [r3, #32]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3324      	adds	r3, #36	; 0x24
 8009b06:	220b      	movs	r2, #11
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f7ff f832 	bl	8008b72 <mem_cmp>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009b14:	2100      	movs	r1, #0
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff fe11 	bl	800973e <dir_next>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0c5      	beq.n	8009ab2 <dir_find+0x24>
 8009b26:	e002      	b.n	8009b2e <dir_find+0xa0>
		if (res != FR_OK) break;
 8009b28:	bf00      	nop
 8009b2a:	e000      	b.n	8009b2e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009b2c:	bf00      	nop

	return res;
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009b46:	2101      	movs	r1, #1
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff febd 	bl	80098c8 <dir_alloc>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11c      	bne.n	8009b92 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	68b8      	ldr	r0, [r7, #8]
 8009b60:	f7ff f9fa 	bl	8008f58 <move_window>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d111      	bne.n	8009b92 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	2220      	movs	r2, #32
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe ffe1 	bl	8008b3e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a18      	ldr	r0, [r3, #32]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3324      	adds	r3, #36	; 0x24
 8009b84:	220b      	movs	r2, #11
 8009b86:	4619      	mov	r1, r3
 8009b88:	f7fe ffb8 	bl	8008afc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d04e      	beq.n	8009c52 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	613b      	str	r3, [r7, #16]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009bbc:	e021      	b.n	8009c02 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1a      	ldr	r2, [r3, #32]
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	1c59      	adds	r1, r3, #1
 8009bc6:	6179      	str	r1, [r7, #20]
 8009bc8:	4413      	add	r3, r2
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	d100      	bne.n	8009bd6 <get_fileinfo+0x3a>
 8009bd4:	e015      	b.n	8009c02 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	2b05      	cmp	r3, #5
 8009bda:	d101      	bne.n	8009be0 <get_fileinfo+0x44>
 8009bdc:	23e5      	movs	r3, #229	; 0xe5
 8009bde:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b09      	cmp	r3, #9
 8009be4:	d106      	bne.n	8009bf4 <get_fileinfo+0x58>
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	613a      	str	r2, [r7, #16]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	4413      	add	r3, r2
 8009bf0:	222e      	movs	r2, #46	; 0x2e
 8009bf2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	613a      	str	r2, [r7, #16]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	7bfa      	ldrb	r2, [r7, #15]
 8009c00:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b0a      	cmp	r3, #10
 8009c06:	d9da      	bls.n	8009bbe <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	3309      	adds	r3, #9
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	7ada      	ldrb	r2, [r3, #11]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	331c      	adds	r3, #28
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fe feff 	bl	8008a28 <ld_dword>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	3316      	adds	r3, #22
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fef6 	bl	8008a28 <ld_dword>
 8009c3c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	80da      	strh	r2, [r3, #6]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	0c1b      	lsrs	r3, r3, #16
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	809a      	strh	r2, [r3, #4]
 8009c50:	e000      	b.n	8009c54 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009c52:	bf00      	nop
}
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3324      	adds	r3, #36	; 0x24
 8009c70:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009c72:	220b      	movs	r2, #11
 8009c74:	2120      	movs	r1, #32
 8009c76:	68b8      	ldr	r0, [r7, #8]
 8009c78:	f7fe ff61 	bl	8008b3e <mem_set>
	si = i = 0; ni = 8;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	613b      	str	r3, [r7, #16]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	2308      	movs	r3, #8
 8009c86:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	617a      	str	r2, [r7, #20]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009c96:	7ffb      	ldrb	r3, [r7, #31]
 8009c98:	2b20      	cmp	r3, #32
 8009c9a:	d94e      	bls.n	8009d3a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009c9c:	7ffb      	ldrb	r3, [r7, #31]
 8009c9e:	2b2f      	cmp	r3, #47	; 0x2f
 8009ca0:	d006      	beq.n	8009cb0 <create_name+0x54>
 8009ca2:	7ffb      	ldrb	r3, [r7, #31]
 8009ca4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ca6:	d110      	bne.n	8009cca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009ca8:	e002      	b.n	8009cb0 <create_name+0x54>
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	3301      	adds	r3, #1
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8009cba:	d0f6      	beq.n	8009caa <create_name+0x4e>
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b5c      	cmp	r3, #92	; 0x5c
 8009cc6:	d0f0      	beq.n	8009caa <create_name+0x4e>
			break;
 8009cc8:	e038      	b.n	8009d3c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009cca:	7ffb      	ldrb	r3, [r7, #31]
 8009ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8009cce:	d003      	beq.n	8009cd8 <create_name+0x7c>
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d30c      	bcc.n	8009cf2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	2b0b      	cmp	r3, #11
 8009cdc:	d002      	beq.n	8009ce4 <create_name+0x88>
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
 8009ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce2:	d001      	beq.n	8009ce8 <create_name+0x8c>
 8009ce4:	2306      	movs	r3, #6
 8009ce6:	e044      	b.n	8009d72 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009ce8:	2308      	movs	r3, #8
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	230b      	movs	r3, #11
 8009cee:	61bb      	str	r3, [r7, #24]
			continue;
 8009cf0:	e022      	b.n	8009d38 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	da04      	bge.n	8009d04 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009cfa:	7ffb      	ldrb	r3, [r7, #31]
 8009cfc:	3b80      	subs	r3, #128	; 0x80
 8009cfe:	4a1f      	ldr	r2, [pc, #124]	; (8009d7c <create_name+0x120>)
 8009d00:	5cd3      	ldrb	r3, [r2, r3]
 8009d02:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009d04:	7ffb      	ldrb	r3, [r7, #31]
 8009d06:	4619      	mov	r1, r3
 8009d08:	481d      	ldr	r0, [pc, #116]	; (8009d80 <create_name+0x124>)
 8009d0a:	f7fe ff59 	bl	8008bc0 <chk_chr>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <create_name+0xbc>
 8009d14:	2306      	movs	r3, #6
 8009d16:	e02c      	b.n	8009d72 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009d18:	7ffb      	ldrb	r3, [r7, #31]
 8009d1a:	2b60      	cmp	r3, #96	; 0x60
 8009d1c:	d905      	bls.n	8009d2a <create_name+0xce>
 8009d1e:	7ffb      	ldrb	r3, [r7, #31]
 8009d20:	2b7a      	cmp	r3, #122	; 0x7a
 8009d22:	d802      	bhi.n	8009d2a <create_name+0xce>
 8009d24:	7ffb      	ldrb	r3, [r7, #31]
 8009d26:	3b20      	subs	r3, #32
 8009d28:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	613a      	str	r2, [r7, #16]
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	4413      	add	r3, r2
 8009d34:	7ffa      	ldrb	r2, [r7, #31]
 8009d36:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009d38:	e7a6      	b.n	8009c88 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d3a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	441a      	add	r2, r3
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d101      	bne.n	8009d50 <create_name+0xf4>
 8009d4c:	2306      	movs	r3, #6
 8009d4e:	e010      	b.n	8009d72 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2be5      	cmp	r3, #229	; 0xe5
 8009d56:	d102      	bne.n	8009d5e <create_name+0x102>
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2205      	movs	r2, #5
 8009d5c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	330b      	adds	r3, #11
 8009d62:	7ffa      	ldrb	r2, [r7, #31]
 8009d64:	2a20      	cmp	r2, #32
 8009d66:	d801      	bhi.n	8009d6c <create_name+0x110>
 8009d68:	2204      	movs	r2, #4
 8009d6a:	e000      	b.n	8009d6e <create_name+0x112>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009d70:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3720      	adds	r7, #32
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	080160f0 	.word	0x080160f0
 8009d80:	08013140 	.word	0x08013140

08009d84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009d98:	e002      	b.n	8009da0 <follow_path+0x1c>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b2f      	cmp	r3, #47	; 0x2f
 8009da6:	d0f8      	beq.n	8009d9a <follow_path+0x16>
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b5c      	cmp	r3, #92	; 0x5c
 8009dae:	d0f4      	beq.n	8009d9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2200      	movs	r2, #0
 8009db4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	2b1f      	cmp	r3, #31
 8009dbc:	d80a      	bhi.n	8009dd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2280      	movs	r2, #128	; 0x80
 8009dc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff fc3d 	bl	8009648 <dir_sdi>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
 8009dd2:	e043      	b.n	8009e5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff ff3f 	bl	8009c5c <create_name>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d134      	bne.n	8009e52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fe50 	bl	8009a8e <dir_find>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009df8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00a      	beq.n	8009e16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d127      	bne.n	8009e56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d122      	bne.n	8009e56 <follow_path+0xd2>
 8009e10:	2305      	movs	r3, #5
 8009e12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009e14:	e01f      	b.n	8009e56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d11c      	bne.n	8009e5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	799b      	ldrb	r3, [r3, #6]
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009e2c:	2305      	movs	r3, #5
 8009e2e:	75fb      	strb	r3, [r7, #23]
 8009e30:	e014      	b.n	8009e5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e40:	4413      	add	r3, r2
 8009e42:	4619      	mov	r1, r3
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff fd86 	bl	8009956 <ld_clust>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e50:	e7c0      	b.n	8009dd4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009e52:	bf00      	nop
 8009e54:	e002      	b.n	8009e5c <follow_path+0xd8>
				break;
 8009e56:	bf00      	nop
 8009e58:	e000      	b.n	8009e5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e5a:	bf00      	nop
			}
		}
	}

	return res;
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b087      	sub	sp, #28
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d031      	beq.n	8009ee0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	617b      	str	r3, [r7, #20]
 8009e82:	e002      	b.n	8009e8a <get_ldnumber+0x24>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	3301      	adds	r3, #1
 8009e88:	617b      	str	r3, [r7, #20]
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d903      	bls.n	8009e9a <get_ldnumber+0x34>
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	2b3a      	cmp	r3, #58	; 0x3a
 8009e98:	d1f4      	bne.n	8009e84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	2b3a      	cmp	r3, #58	; 0x3a
 8009ea0:	d11c      	bne.n	8009edc <get_ldnumber+0x76>
			tp = *path;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	60fa      	str	r2, [r7, #12]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	3b30      	subs	r3, #48	; 0x30
 8009eb2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d80e      	bhi.n	8009ed8 <get_ldnumber+0x72>
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d10a      	bne.n	8009ed8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d807      	bhi.n	8009ed8 <get_ldnumber+0x72>
					vol = (int)i;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	e002      	b.n	8009ee2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009edc:	2300      	movs	r3, #0
 8009ede:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009ee0:	693b      	ldr	r3, [r7, #16]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
	...

08009ef0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	70da      	strb	r2, [r3, #3]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f04f 32ff 	mov.w	r2, #4294967295
 8009f06:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff f824 	bl	8008f58 <move_window>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <check_fs+0x2a>
 8009f16:	2304      	movs	r3, #4
 8009f18:	e038      	b.n	8009f8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3330      	adds	r3, #48	; 0x30
 8009f1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fd68 	bl	80089f8 <ld_word>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d001      	beq.n	8009f38 <check_fs+0x48>
 8009f34:	2303      	movs	r3, #3
 8009f36:	e029      	b.n	8009f8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f3e:	2be9      	cmp	r3, #233	; 0xe9
 8009f40:	d009      	beq.n	8009f56 <check_fs+0x66>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f48:	2beb      	cmp	r3, #235	; 0xeb
 8009f4a:	d11e      	bne.n	8009f8a <check_fs+0x9a>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009f52:	2b90      	cmp	r3, #144	; 0x90
 8009f54:	d119      	bne.n	8009f8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	3330      	adds	r3, #48	; 0x30
 8009f5a:	3336      	adds	r3, #54	; 0x36
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fd63 	bl	8008a28 <ld_dword>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f68:	4a0a      	ldr	r2, [pc, #40]	; (8009f94 <check_fs+0xa4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d101      	bne.n	8009f72 <check_fs+0x82>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e00c      	b.n	8009f8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3330      	adds	r3, #48	; 0x30
 8009f76:	3352      	adds	r3, #82	; 0x52
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fd55 	bl	8008a28 <ld_dword>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <check_fs+0xa8>)
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d101      	bne.n	8009f8a <check_fs+0x9a>
 8009f86:	2300      	movs	r3, #0
 8009f88:	e000      	b.n	8009f8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009f8a:	2302      	movs	r3, #2
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	00544146 	.word	0x00544146
 8009f98:	33544146 	.word	0x33544146

08009f9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b096      	sub	sp, #88	; 0x58
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff ff58 	bl	8009e66 <get_ldnumber>
 8009fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	da01      	bge.n	8009fc2 <find_volume+0x26>
 8009fbe:	230b      	movs	r3, #11
 8009fc0:	e22e      	b.n	800a420 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009fc2:	4aa8      	ldr	r2, [pc, #672]	; (800a264 <find_volume+0x2c8>)
 8009fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <find_volume+0x3a>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	e224      	b.n	800a420 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	f023 0301 	bic.w	r3, r3, #1
 8009fe2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01a      	beq.n	800a022 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe fc63 	bl	80088bc <disk_status>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10c      	bne.n	800a022 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d007      	beq.n	800a01e <find_volume+0x82>
 800a00e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a012:	f003 0304 	and.w	r3, r3, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a01a:	230a      	movs	r3, #10
 800a01c:	e200      	b.n	800a420 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a01e:	2300      	movs	r3, #0
 800a020:	e1fe      	b.n	800a420 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a032:	785b      	ldrb	r3, [r3, #1]
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe fc5b 	bl	80088f0 <disk_initialize>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a04c:	2303      	movs	r3, #3
 800a04e:	e1e7      	b.n	800a420 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d007      	beq.n	800a066 <find_volume+0xca>
 800a056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a062:	230a      	movs	r3, #10
 800a064:	e1dc      	b.n	800a420 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a06a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a06c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a06e:	f7ff ff3f 	bl	8009ef0 <check_fs>
 800a072:	4603      	mov	r3, r0
 800a074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d14b      	bne.n	800a118 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a080:	2300      	movs	r3, #0
 800a082:	643b      	str	r3, [r7, #64]	; 0x40
 800a084:	e01f      	b.n	800a0c6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a094:	4413      	add	r3, r2
 800a096:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	3304      	adds	r3, #4
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <find_volume+0x114>
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fcbe 	bl	8008a28 <ld_dword>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	e000      	b.n	800a0b2 <find_volume+0x116>
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a0ba:	440b      	add	r3, r1
 800a0bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d9dc      	bls.n	800a086 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <find_volume+0x140>
 800a0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a0ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <find_volume+0x162>
 800a0f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0f6:	f7ff fefb 	bl	8009ef0 <check_fs>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	e000      	b.n	800a100 <find_volume+0x164>
 800a0fe:	2303      	movs	r3, #3
 800a100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d905      	bls.n	800a118 <find_volume+0x17c>
 800a10c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a10e:	3301      	adds	r3, #1
 800a110:	643b      	str	r3, [r7, #64]	; 0x40
 800a112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a114:	2b03      	cmp	r3, #3
 800a116:	d9e1      	bls.n	800a0dc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d101      	bne.n	800a124 <find_volume+0x188>
 800a120:	2301      	movs	r3, #1
 800a122:	e17d      	b.n	800a420 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d901      	bls.n	800a130 <find_volume+0x194>
 800a12c:	230d      	movs	r3, #13
 800a12e:	e177      	b.n	800a420 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	3330      	adds	r3, #48	; 0x30
 800a134:	330b      	adds	r3, #11
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe fc5e 	bl	80089f8 <ld_word>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a142:	d001      	beq.n	800a148 <find_volume+0x1ac>
 800a144:	230d      	movs	r3, #13
 800a146:	e16b      	b.n	800a420 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	3330      	adds	r3, #48	; 0x30
 800a14c:	3316      	adds	r3, #22
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fe fc52 	bl	80089f8 <ld_word>
 800a154:	4603      	mov	r3, r0
 800a156:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d106      	bne.n	800a16c <find_volume+0x1d0>
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	3330      	adds	r3, #48	; 0x30
 800a162:	3324      	adds	r3, #36	; 0x24
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fc5f 	bl	8008a28 <ld_dword>
 800a16a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a170:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	789b      	ldrb	r3, [r3, #2]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d005      	beq.n	800a190 <find_volume+0x1f4>
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	789b      	ldrb	r3, [r3, #2]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d001      	beq.n	800a190 <find_volume+0x1f4>
 800a18c:	230d      	movs	r3, #13
 800a18e:	e147      	b.n	800a420 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	789b      	ldrb	r3, [r3, #2]
 800a194:	461a      	mov	r2, r3
 800a196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a198:	fb02 f303 	mul.w	r3, r2, r3
 800a19c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ac:	895b      	ldrh	r3, [r3, #10]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <find_volume+0x228>
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	895b      	ldrh	r3, [r3, #10]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	895b      	ldrh	r3, [r3, #10]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	4013      	ands	r3, r2
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <find_volume+0x22c>
 800a1c4:	230d      	movs	r3, #13
 800a1c6:	e12b      	b.n	800a420 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	3330      	adds	r3, #48	; 0x30
 800a1cc:	3311      	adds	r3, #17
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fc12 	bl	80089f8 <ld_word>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	891b      	ldrh	r3, [r3, #8]
 800a1e0:	f003 030f 	and.w	r3, r3, #15
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <find_volume+0x252>
 800a1ea:	230d      	movs	r3, #13
 800a1ec:	e118      	b.n	800a420 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	3330      	adds	r3, #48	; 0x30
 800a1f2:	3313      	adds	r3, #19
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe fbff 	bl	80089f8 <ld_word>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a200:	2b00      	cmp	r3, #0
 800a202:	d106      	bne.n	800a212 <find_volume+0x276>
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	3330      	adds	r3, #48	; 0x30
 800a208:	3320      	adds	r3, #32
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fc0c 	bl	8008a28 <ld_dword>
 800a210:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	3330      	adds	r3, #48	; 0x30
 800a216:	330e      	adds	r3, #14
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe fbed 	bl	80089f8 <ld_word>
 800a21e:	4603      	mov	r3, r0
 800a220:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a222:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <find_volume+0x290>
 800a228:	230d      	movs	r3, #13
 800a22a:	e0f9      	b.n	800a420 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a22c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a230:	4413      	add	r3, r2
 800a232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a234:	8912      	ldrh	r2, [r2, #8]
 800a236:	0912      	lsrs	r2, r2, #4
 800a238:	b292      	uxth	r2, r2
 800a23a:	4413      	add	r3, r2
 800a23c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a23e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	429a      	cmp	r2, r3
 800a244:	d201      	bcs.n	800a24a <find_volume+0x2ae>
 800a246:	230d      	movs	r3, #13
 800a248:	e0ea      	b.n	800a420 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a24a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a252:	8952      	ldrh	r2, [r2, #10]
 800a254:	fbb3 f3f2 	udiv	r3, r3, r2
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d103      	bne.n	800a268 <find_volume+0x2cc>
 800a260:	230d      	movs	r3, #13
 800a262:	e0dd      	b.n	800a420 <find_volume+0x484>
 800a264:	20000448 	.word	0x20000448
		fmt = FS_FAT32;
 800a268:	2303      	movs	r3, #3
 800a26a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a274:	4293      	cmp	r3, r2
 800a276:	d802      	bhi.n	800a27e <find_volume+0x2e2>
 800a278:	2302      	movs	r3, #2
 800a27a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a284:	4293      	cmp	r3, r2
 800a286:	d802      	bhi.n	800a28e <find_volume+0x2f2>
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	1c9a      	adds	r2, r3, #2
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a29a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a29c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2a0:	441a      	add	r2, r3
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a2a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	441a      	add	r2, r3
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a2b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2b4:	2b03      	cmp	r3, #3
 800a2b6:	d11e      	bne.n	800a2f6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	3330      	adds	r3, #48	; 0x30
 800a2bc:	332a      	adds	r3, #42	; 0x2a
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fb9a 	bl	80089f8 <ld_word>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <find_volume+0x332>
 800a2ca:	230d      	movs	r3, #13
 800a2cc:	e0a8      	b.n	800a420 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	891b      	ldrh	r3, [r3, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <find_volume+0x33e>
 800a2d6:	230d      	movs	r3, #13
 800a2d8:	e0a2      	b.n	800a420 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	3330      	adds	r3, #48	; 0x30
 800a2de:	332c      	adds	r3, #44	; 0x2c
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe fba1 	bl	8008a28 <ld_dword>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2f4:	e01f      	b.n	800a336 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	891b      	ldrh	r3, [r3, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <find_volume+0x366>
 800a2fe:	230d      	movs	r3, #13
 800a300:	e08e      	b.n	800a420 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	6a1a      	ldr	r2, [r3, #32]
 800a306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a308:	441a      	add	r2, r3
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a30e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a312:	2b02      	cmp	r3, #2
 800a314:	d103      	bne.n	800a31e <find_volume+0x382>
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	e00a      	b.n	800a334 <find_volume+0x398>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	695a      	ldr	r2, [r3, #20]
 800a322:	4613      	mov	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4413      	add	r3, r2
 800a328:	085a      	lsrs	r2, r3, #1
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a334:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	699a      	ldr	r2, [r3, #24]
 800a33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a33c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a340:	0a5b      	lsrs	r3, r3, #9
 800a342:	429a      	cmp	r2, r3
 800a344:	d201      	bcs.n	800a34a <find_volume+0x3ae>
 800a346:	230d      	movs	r3, #13
 800a348:	e06a      	b.n	800a420 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	f04f 32ff 	mov.w	r2, #4294967295
 800a350:	611a      	str	r2, [r3, #16]
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	691a      	ldr	r2, [r3, #16]
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	2280      	movs	r2, #128	; 0x80
 800a35e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a364:	2b03      	cmp	r3, #3
 800a366:	d149      	bne.n	800a3fc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	3330      	adds	r3, #48	; 0x30
 800a36c:	3330      	adds	r3, #48	; 0x30
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe fb42 	bl	80089f8 <ld_word>
 800a374:	4603      	mov	r3, r0
 800a376:	2b01      	cmp	r3, #1
 800a378:	d140      	bne.n	800a3fc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a37c:	3301      	adds	r3, #1
 800a37e:	4619      	mov	r1, r3
 800a380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a382:	f7fe fde9 	bl	8008f58 <move_window>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d137      	bne.n	800a3fc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38e:	2200      	movs	r2, #0
 800a390:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	3330      	adds	r3, #48	; 0x30
 800a396:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe fb2c 	bl	80089f8 <ld_word>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d127      	bne.n	800a3fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	3330      	adds	r3, #48	; 0x30
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fe fb39 	bl	8008a28 <ld_dword>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	4b1b      	ldr	r3, [pc, #108]	; (800a428 <find_volume+0x48c>)
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d11e      	bne.n	800a3fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	3330      	adds	r3, #48	; 0x30
 800a3c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fb2e 	bl	8008a28 <ld_dword>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	4b17      	ldr	r3, [pc, #92]	; (800a42c <find_volume+0x490>)
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d113      	bne.n	800a3fc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d6:	3330      	adds	r3, #48	; 0x30
 800a3d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fe fb23 	bl	8008a28 <ld_dword>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ea:	3330      	adds	r3, #48	; 0x30
 800a3ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe fb19 	bl	8008a28 <ld_dword>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a402:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a404:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <find_volume+0x494>)
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	3301      	adds	r3, #1
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	4b08      	ldr	r3, [pc, #32]	; (800a430 <find_volume+0x494>)
 800a40e:	801a      	strh	r2, [r3, #0]
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <find_volume+0x494>)
 800a412:	881a      	ldrh	r2, [r3, #0]
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a41a:	f7fe fd35 	bl	8008e88 <clear_lock>
#endif
	return FR_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3758      	adds	r7, #88	; 0x58
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	41615252 	.word	0x41615252
 800a42c:	61417272 	.word	0x61417272
 800a430:	20000450 	.word	0x20000450

0800a434 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d01a      	beq.n	800a47a <validate+0x46>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d016      	beq.n	800a47a <validate+0x46>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d011      	beq.n	800a47a <validate+0x46>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	88da      	ldrh	r2, [r3, #6]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	889b      	ldrh	r3, [r3, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d10a      	bne.n	800a47a <validate+0x46>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	785b      	ldrb	r3, [r3, #1]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fa26 	bl	80088bc <disk_status>
 800a470:	4603      	mov	r3, r0
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <validate+0x52>
		*fs = 0;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2200      	movs	r2, #0
 800a47e:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800a480:	2309      	movs	r3, #9
 800a482:	73fb      	strb	r3, [r7, #15]
 800a484:	e005      	b.n	800a492 <validate+0x5e>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a4ae:	f107 0310 	add.w	r3, r7, #16
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fcd7 	bl	8009e66 <get_ldnumber>
 800a4b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	da01      	bge.n	800a4c4 <f_mount+0x28>
 800a4c0:	230b      	movs	r3, #11
 800a4c2:	e02b      	b.n	800a51c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a4c4:	4a17      	ldr	r2, [pc, #92]	; (800a524 <f_mount+0x88>)
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a4d4:	69b8      	ldr	r0, [r7, #24]
 800a4d6:	f7fe fcd7 	bl	8008e88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	490d      	ldr	r1, [pc, #52]	; (800a524 <f_mount+0x88>)
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <f_mount+0x66>
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d001      	beq.n	800a506 <f_mount+0x6a>
 800a502:	2300      	movs	r3, #0
 800a504:	e00a      	b.n	800a51c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a506:	f107 010c 	add.w	r1, r7, #12
 800a50a:	f107 0308 	add.w	r3, r7, #8
 800a50e:	2200      	movs	r2, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff fd43 	bl	8009f9c <find_volume>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3720      	adds	r7, #32
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	20000448 	.word	0x20000448

0800a528 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b098      	sub	sp, #96	; 0x60
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	4613      	mov	r3, r2
 800a534:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <f_open+0x18>
 800a53c:	2309      	movs	r3, #9
 800a53e:	e1ad      	b.n	800a89c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a546:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a548:	79fa      	ldrb	r2, [r7, #7]
 800a54a:	f107 0110 	add.w	r1, r7, #16
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff fd22 	bl	8009f9c <find_volume>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a55e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a562:	2b00      	cmp	r3, #0
 800a564:	f040 8191 	bne.w	800a88a <f_open+0x362>
		dj.obj.fs = fs;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	f107 0314 	add.w	r3, r7, #20
 800a572:	4611      	mov	r1, r2
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff fc05 	bl	8009d84 <follow_path>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a584:	2b00      	cmp	r3, #0
 800a586:	d11a      	bne.n	800a5be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a588:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a58c:	b25b      	sxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	da03      	bge.n	800a59a <f_open+0x72>
				res = FR_INVALID_NAME;
 800a592:	2306      	movs	r3, #6
 800a594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a598:	e011      	b.n	800a5be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a59a:	79fb      	ldrb	r3, [r7, #7]
 800a59c:	f023 0301 	bic.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bf14      	ite	ne
 800a5a4:	2301      	movne	r3, #1
 800a5a6:	2300      	moveq	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f107 0314 	add.w	r3, r7, #20
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe fb20 	bl	8008bf8 <chk_lock>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	f003 031c 	and.w	r3, r3, #28
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d07f      	beq.n	800a6c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d017      	beq.n	800a600 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d10e      	bne.n	800a5f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a5d8:	f7fe fb6a 	bl	8008cb0 <enq_lock>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d006      	beq.n	800a5f0 <f_open+0xc8>
 800a5e2:	f107 0314 	add.w	r3, r7, #20
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff faa6 	bl	8009b38 <dir_register>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	e000      	b.n	800a5f2 <f_open+0xca>
 800a5f0:	2312      	movs	r3, #18
 800a5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a5f6:	79fb      	ldrb	r3, [r7, #7]
 800a5f8:	f043 0308 	orr.w	r3, r3, #8
 800a5fc:	71fb      	strb	r3, [r7, #7]
 800a5fe:	e010      	b.n	800a622 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a600:	7ebb      	ldrb	r3, [r7, #26]
 800a602:	f003 0311 	and.w	r3, r3, #17
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <f_open+0xea>
					res = FR_DENIED;
 800a60a:	2307      	movs	r3, #7
 800a60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a610:	e007      	b.n	800a622 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <f_open+0xfa>
 800a61c:	2308      	movs	r3, #8
 800a61e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a626:	2b00      	cmp	r3, #0
 800a628:	d168      	bne.n	800a6fc <f_open+0x1d4>
 800a62a:	79fb      	ldrb	r3, [r7, #7]
 800a62c:	f003 0308 	and.w	r3, r3, #8
 800a630:	2b00      	cmp	r3, #0
 800a632:	d063      	beq.n	800a6fc <f_open+0x1d4>
				dw = GET_FATTIME();
 800a634:	f002 fe3c 	bl	800d2b0 <get_fattime>
 800a638:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	330e      	adds	r3, #14
 800a63e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fa2f 	bl	8008aa4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	3316      	adds	r3, #22
 800a64a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fa29 	bl	8008aa4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a654:	330b      	adds	r3, #11
 800a656:	2220      	movs	r2, #32
 800a658:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a65e:	4611      	mov	r1, r2
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff f978 	bl	8009956 <ld_clust>
 800a666:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a66c:	2200      	movs	r2, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff f990 	bl	8009994 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a676:	331c      	adds	r3, #28
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fa12 	bl	8008aa4 <st_dword>
					fs->wflag = 1;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2201      	movs	r2, #1
 800a684:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d037      	beq.n	800a6fc <f_open+0x1d4>
						dw = fs->winsect;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a692:	f107 0314 	add.w	r3, r7, #20
 800a696:	2200      	movs	r2, #0
 800a698:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe fea3 	bl	80093e6 <remove_chain>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a6a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d126      	bne.n	800a6fc <f_open+0x1d4>
							res = move_window(fs, dw);
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fc50 	bl	8008f58 <move_window>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6c2:	3a01      	subs	r2, #1
 800a6c4:	60da      	str	r2, [r3, #12]
 800a6c6:	e019      	b.n	800a6fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d115      	bne.n	800a6fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a6d0:	7ebb      	ldrb	r3, [r7, #26]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a6da:	2304      	movs	r3, #4
 800a6dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6e0:	e00c      	b.n	800a6fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d007      	beq.n	800a6fc <f_open+0x1d4>
 800a6ec:	7ebb      	ldrb	r3, [r7, #26]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <f_open+0x1d4>
						res = FR_DENIED;
 800a6f6:	2307      	movs	r3, #7
 800a6f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a6fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a700:	2b00      	cmp	r3, #0
 800a702:	d128      	bne.n	800a756 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	f003 0308 	and.w	r3, r3, #8
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a714:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a724:	79fb      	ldrb	r3, [r7, #7]
 800a726:	f023 0301 	bic.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bf14      	ite	ne
 800a72e:	2301      	movne	r3, #1
 800a730:	2300      	moveq	r3, #0
 800a732:	b2db      	uxtb	r3, r3
 800a734:	461a      	mov	r2, r3
 800a736:	f107 0314 	add.w	r3, r7, #20
 800a73a:	4611      	mov	r1, r2
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fad9 	bl	8008cf4 <inc_lock>
 800a742:	4602      	mov	r2, r0
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d102      	bne.n	800a756 <f_open+0x22e>
 800a750:	2302      	movs	r3, #2
 800a752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f040 8095 	bne.w	800a88a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff f8f5 	bl	8009956 <ld_clust>
 800a76c:	4602      	mov	r2, r0
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a774:	331c      	adds	r3, #28
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe f956 	bl	8008a28 <ld_dword>
 800a77c:	4602      	mov	r2, r0
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	88da      	ldrh	r2, [r3, #6]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	79fa      	ldrb	r2, [r7, #7]
 800a79a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3330      	adds	r3, #48	; 0x30
 800a7b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fe f9c0 	bl	8008b3e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d060      	beq.n	800a88a <f_open+0x362>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d05c      	beq.n	800a88a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	68da      	ldr	r2, [r3, #12]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	895b      	ldrh	r3, [r3, #10]
 800a7dc:	025b      	lsls	r3, r3, #9
 800a7de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	657b      	str	r3, [r7, #84]	; 0x54
 800a7ec:	e016      	b.n	800a81c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fc6b 	bl	80090ce <get_fat>
 800a7f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a7fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d802      	bhi.n	800a806 <f_open+0x2de>
 800a800:	2302      	movs	r3, #2
 800a802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80c:	d102      	bne.n	800a814 <f_open+0x2ec>
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	657b      	str	r3, [r7, #84]	; 0x54
 800a81c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a820:	2b00      	cmp	r3, #0
 800a822:	d103      	bne.n	800a82c <f_open+0x304>
 800a824:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a828:	429a      	cmp	r2, r3
 800a82a:	d8e0      	bhi.n	800a7ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a830:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a836:	2b00      	cmp	r3, #0
 800a838:	d127      	bne.n	800a88a <f_open+0x362>
 800a83a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a840:	2b00      	cmp	r3, #0
 800a842:	d022      	beq.n	800a88a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fe fc21 	bl	8009090 <clust2sect>
 800a84e:	6478      	str	r0, [r7, #68]	; 0x44
 800a850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a852:	2b00      	cmp	r3, #0
 800a854:	d103      	bne.n	800a85e <f_open+0x336>
						res = FR_INT_ERR;
 800a856:	2302      	movs	r3, #2
 800a858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a85c:	e015      	b.n	800a88a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a860:	0a5a      	lsrs	r2, r3, #9
 800a862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a864:	441a      	add	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	7858      	ldrb	r0, [r3, #1]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6a1a      	ldr	r2, [r3, #32]
 800a878:	2301      	movs	r3, #1
 800a87a:	f7fe f85f 	bl	800893c <disk_read>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <f_open+0x362>
 800a884:	2301      	movs	r3, #1
 800a886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a88a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d002      	beq.n	800a898 <f_open+0x370>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3760      	adds	r7, #96	; 0x60
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08e      	sub	sp, #56	; 0x38
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f107 0214 	add.w	r2, r7, #20
 800a8c2:	4611      	mov	r1, r2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7ff fdb5 	bl	800a434 <validate>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a8d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d107      	bne.n	800a8e8 <f_read+0x44>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	7d5b      	ldrb	r3, [r3, #21]
 800a8dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a8e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <f_read+0x4a>
 800a8e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8ec:	e115      	b.n	800ab1a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	7d1b      	ldrb	r3, [r3, #20]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <f_read+0x5a>
 800a8fa:	2307      	movs	r3, #7
 800a8fc:	e10d      	b.n	800ab1a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	429a      	cmp	r2, r3
 800a910:	f240 80fe 	bls.w	800ab10 <f_read+0x26c>
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a918:	e0fa      	b.n	800ab10 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a922:	2b00      	cmp	r3, #0
 800a924:	f040 80c6 	bne.w	800aab4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	0a5b      	lsrs	r3, r3, #9
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	8952      	ldrh	r2, [r2, #10]
 800a932:	3a01      	subs	r2, #1
 800a934:	4013      	ands	r3, r2
 800a936:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d12f      	bne.n	800a99e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d103      	bne.n	800a94e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	633b      	str	r3, [r7, #48]	; 0x30
 800a94c:	e013      	b.n	800a976 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	4619      	mov	r1, r3
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7fe fe3f 	bl	80095e0 <clmt_clust>
 800a962:	6338      	str	r0, [r7, #48]	; 0x30
 800a964:	e007      	b.n	800a976 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f7fe fbad 	bl	80090ce <get_fat>
 800a974:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d804      	bhi.n	800a986 <f_read+0xe2>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2202      	movs	r2, #2
 800a980:	755a      	strb	r2, [r3, #21]
 800a982:	2302      	movs	r3, #2
 800a984:	e0c9      	b.n	800ab1a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d104      	bne.n	800a998 <f_read+0xf4>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	755a      	strb	r2, [r3, #21]
 800a994:	2301      	movs	r3, #1
 800a996:	e0c0      	b.n	800ab1a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a99c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7fe fb72 	bl	8009090 <clust2sect>
 800a9ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <f_read+0x11a>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	755a      	strb	r2, [r3, #21]
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e0ad      	b.n	800ab1a <f_read+0x276>
			sect += csect;
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	0a5b      	lsrs	r3, r3, #9
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d039      	beq.n	800aa46 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a9d2:	69fa      	ldr	r2, [r7, #28]
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	4413      	add	r3, r2
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	8952      	ldrh	r2, [r2, #10]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d905      	bls.n	800a9ec <f_read+0x148>
					cc = fs->csize - csect;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	895b      	ldrh	r3, [r3, #10]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	7858      	ldrb	r0, [r3, #1]
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9f6:	f7fd ffa1 	bl	800893c <disk_read>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <f_read+0x166>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2201      	movs	r2, #1
 800aa04:	755a      	strb	r2, [r3, #21]
 800aa06:	2301      	movs	r3, #1
 800aa08:	e087      	b.n	800ab1a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	7d1b      	ldrb	r3, [r3, #20]
 800aa0e:	b25b      	sxtb	r3, r3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	da14      	bge.n	800aa3e <f_read+0x19a>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a1a      	ldr	r2, [r3, #32]
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	1ad2      	subs	r2, r2, r3
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d20d      	bcs.n	800aa3e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6a1a      	ldr	r2, [r3, #32]
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	025b      	lsls	r3, r3, #9
 800aa2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2e:	18d0      	adds	r0, r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3330      	adds	r3, #48	; 0x30
 800aa34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa38:	4619      	mov	r1, r3
 800aa3a:	f7fe f85f 	bl	8008afc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	025b      	lsls	r3, r3, #9
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800aa44:	e050      	b.n	800aae8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6a1a      	ldr	r2, [r3, #32]
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d02e      	beq.n	800aaae <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	7d1b      	ldrb	r3, [r3, #20]
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da18      	bge.n	800aa8c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	7858      	ldrb	r0, [r3, #1]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6a1a      	ldr	r2, [r3, #32]
 800aa68:	2301      	movs	r3, #1
 800aa6a:	f7fd ff87 	bl	800897c <disk_write>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d004      	beq.n	800aa7e <f_read+0x1da>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2201      	movs	r2, #1
 800aa78:	755a      	strb	r2, [r3, #21]
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e04d      	b.n	800ab1a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	7d1b      	ldrb	r3, [r3, #20]
 800aa82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	7858      	ldrb	r0, [r3, #1]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa96:	2301      	movs	r3, #1
 800aa98:	69ba      	ldr	r2, [r7, #24]
 800aa9a:	f7fd ff4f 	bl	800893c <disk_read>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <f_read+0x20a>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	755a      	strb	r2, [r3, #21]
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e035      	b.n	800ab1a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800aac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d901      	bls.n	800aace <f_read+0x22a>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aadc:	4413      	add	r3, r2
 800aade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae0:	4619      	mov	r1, r3
 800aae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aae4:	f7fe f80a 	bl	8008afc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	4413      	add	r3, r2
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	699a      	ldr	r2, [r3, #24]
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	441a      	add	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	619a      	str	r2, [r3, #24]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab02:	441a      	add	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f47f af01 	bne.w	800a91a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3738      	adds	r7, #56	; 0x38
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b08c      	sub	sp, #48	; 0x30
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	607a      	str	r2, [r7, #4]
 800ab2e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2200      	movs	r2, #0
 800ab38:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f107 0210 	add.w	r2, r7, #16
 800ab40:	4611      	mov	r1, r2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff fc76 	bl	800a434 <validate>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d107      	bne.n	800ab66 <f_write+0x44>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	7d5b      	ldrb	r3, [r3, #21]
 800ab5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <f_write+0x4a>
 800ab66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab6a:	e14b      	b.n	800ae04 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	7d1b      	ldrb	r3, [r3, #20]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <f_write+0x5a>
 800ab78:	2307      	movs	r3, #7
 800ab7a:	e143      	b.n	800ae04 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	699a      	ldr	r2, [r3, #24]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	441a      	add	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	f080 812d 	bcs.w	800ade8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	43db      	mvns	r3, r3
 800ab94:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ab96:	e127      	b.n	800ade8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f040 80e3 	bne.w	800ad6c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	0a5b      	lsrs	r3, r3, #9
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	8952      	ldrh	r2, [r2, #10]
 800abb0:	3a01      	subs	r2, #1
 800abb2:	4013      	ands	r3, r2
 800abb4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d143      	bne.n	800ac44 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10c      	bne.n	800abde <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d11a      	bne.n	800ac06 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2100      	movs	r1, #0
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fe fc6b 	bl	80094b0 <create_chain>
 800abda:	62b8      	str	r0, [r7, #40]	; 0x28
 800abdc:	e013      	b.n	800ac06 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d007      	beq.n	800abf6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	4619      	mov	r1, r3
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7fe fcf7 	bl	80095e0 <clmt_clust>
 800abf2:	62b8      	str	r0, [r7, #40]	; 0x28
 800abf4:	e007      	b.n	800ac06 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	69db      	ldr	r3, [r3, #28]
 800abfc:	4619      	mov	r1, r3
 800abfe:	4610      	mov	r0, r2
 800ac00:	f7fe fc56 	bl	80094b0 <create_chain>
 800ac04:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 80f2 	beq.w	800adf2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d104      	bne.n	800ac1e <f_write+0xfc>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2202      	movs	r2, #2
 800ac18:	755a      	strb	r2, [r3, #21]
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e0f2      	b.n	800ae04 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac24:	d104      	bne.n	800ac30 <f_write+0x10e>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	755a      	strb	r2, [r3, #21]
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e0e9      	b.n	800ae04 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac34:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d102      	bne.n	800ac44 <f_write+0x122>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac42:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	7d1b      	ldrb	r3, [r3, #20]
 800ac48:	b25b      	sxtb	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	da18      	bge.n	800ac80 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	7858      	ldrb	r0, [r3, #1]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6a1a      	ldr	r2, [r3, #32]
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f7fd fe8d 	bl	800897c <disk_write>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d004      	beq.n	800ac72 <f_write+0x150>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	755a      	strb	r2, [r3, #21]
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e0c8      	b.n	800ae04 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	7d1b      	ldrb	r3, [r3, #20]
 800ac76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	4619      	mov	r1, r3
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f7fe fa01 	bl	8009090 <clust2sect>
 800ac8e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d104      	bne.n	800aca0 <f_write+0x17e>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2202      	movs	r2, #2
 800ac9a:	755a      	strb	r2, [r3, #21]
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e0b1      	b.n	800ae04 <f_write+0x2e2>
			sect += csect;
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	4413      	add	r3, r2
 800aca6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	0a5b      	lsrs	r3, r3, #9
 800acac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d03c      	beq.n	800ad2e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	4413      	add	r3, r2
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	8952      	ldrh	r2, [r2, #10]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d905      	bls.n	800acce <f_write+0x1ac>
					cc = fs->csize - csect;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	895b      	ldrh	r3, [r3, #10]
 800acc6:	461a      	mov	r2, r3
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	7858      	ldrb	r0, [r3, #1]
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	69f9      	ldr	r1, [r7, #28]
 800acd8:	f7fd fe50 	bl	800897c <disk_write>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d004      	beq.n	800acec <f_write+0x1ca>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	755a      	strb	r2, [r3, #21]
 800ace8:	2301      	movs	r3, #1
 800acea:	e08b      	b.n	800ae04 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6a1a      	ldr	r2, [r3, #32]
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	1ad2      	subs	r2, r2, r3
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d215      	bcs.n	800ad26 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a1a      	ldr	r2, [r3, #32]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	025b      	lsls	r3, r3, #9
 800ad0a:	69fa      	ldr	r2, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad12:	4619      	mov	r1, r3
 800ad14:	f7fd fef2 	bl	8008afc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	7d1b      	ldrb	r3, [r3, #20]
 800ad1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	025b      	lsls	r3, r3, #9
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ad2c:	e03f      	b.n	800adae <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6a1a      	ldr	r2, [r3, #32]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d016      	beq.n	800ad66 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	699a      	ldr	r2, [r3, #24]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d210      	bcs.n	800ad66 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	7858      	ldrb	r0, [r3, #1]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad4e:	2301      	movs	r3, #1
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	f7fd fdf3 	bl	800893c <disk_read>
 800ad56:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	755a      	strb	r2, [r3, #21]
 800ad62:	2301      	movs	r3, #1
 800ad64:	e04e      	b.n	800ae04 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad74:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d901      	bls.n	800ad86 <f_write+0x264>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad94:	4413      	add	r3, r2
 800ad96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad98:	69f9      	ldr	r1, [r7, #28]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fd feae 	bl	8008afc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	7d1b      	ldrb	r3, [r3, #20]
 800ada4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	4413      	add	r3, r2
 800adb4:	61fb      	str	r3, [r7, #28]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	441a      	add	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	619a      	str	r2, [r3, #24]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	429a      	cmp	r2, r3
 800adcc:	bf38      	it	cc
 800adce:	461a      	movcc	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	60da      	str	r2, [r3, #12]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	441a      	add	r2, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f47f aed4 	bne.w	800ab98 <f_write+0x76>
 800adf0:	e000      	b.n	800adf4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800adf2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3730      	adds	r7, #48	; 0x30
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f107 0208 	add.w	r2, r7, #8
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff fb09 	bl	800a434 <validate>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d168      	bne.n	800aefe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d062      	beq.n	800aefe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7d1b      	ldrb	r3, [r3, #20]
 800ae3c:	b25b      	sxtb	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	da15      	bge.n	800ae6e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	7858      	ldrb	r0, [r3, #1]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a1a      	ldr	r2, [r3, #32]
 800ae50:	2301      	movs	r3, #1
 800ae52:	f7fd fd93 	bl	800897c <disk_write>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <f_sync+0x54>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e04f      	b.n	800af00 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7d1b      	ldrb	r3, [r3, #20]
 800ae64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae6e:	f002 fa1f 	bl	800d2b0 <get_fattime>
 800ae72:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	f7fe f86b 	bl	8008f58 <move_window>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d138      	bne.n	800aefe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae90:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	330b      	adds	r3, #11
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	320b      	adds	r2, #11
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	f042 0220 	orr.w	r2, r2, #32
 800aea0:	b2d2      	uxtb	r2, r2
 800aea2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	461a      	mov	r2, r3
 800aeae:	68f9      	ldr	r1, [r7, #12]
 800aeb0:	f7fe fd70 	bl	8009994 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f103 021c 	add.w	r2, r3, #28
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fd fdef 	bl	8008aa4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3316      	adds	r3, #22
 800aeca:	6939      	ldr	r1, [r7, #16]
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fd fde9 	bl	8008aa4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3312      	adds	r3, #18
 800aed6:	2100      	movs	r1, #0
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fd fdc8 	bl	8008a6e <st_word>
					fs->wflag = 1;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2201      	movs	r2, #1
 800aee2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe f864 	bl	8008fb4 <sync_fs>
 800aeec:	4603      	mov	r3, r0
 800aeee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7d1b      	ldrb	r3, [r3, #20]
 800aef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff ff7b 	bl	800ae0c <f_sync>
 800af16:	4603      	mov	r3, r0
 800af18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d118      	bne.n	800af52 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f107 0208 	add.w	r2, r7, #8
 800af26:	4611      	mov	r1, r2
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fa83 	bl	800a434 <validate>
 800af2e:	4603      	mov	r3, r0
 800af30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af32:	7bfb      	ldrb	r3, [r7, #15]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10c      	bne.n	800af52 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fd ff67 	bl	8008e10 <dec_lock>
 800af42:	4603      	mov	r3, r0
 800af44:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800af46:	7bfb      	ldrb	r3, [r7, #15]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d102      	bne.n	800af52 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800af52:	7bfb      	ldrb	r3, [r7, #15]
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <f_opendir+0x14>
 800af6c:	2309      	movs	r3, #9
 800af6e:	e064      	b.n	800b03a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800af74:	f107 010c 	add.w	r1, r7, #12
 800af78:	463b      	mov	r3, r7
 800af7a:	2200      	movs	r2, #0
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff f80d 	bl	8009f9c <find_volume>
 800af82:	4603      	mov	r3, r0
 800af84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af86:	7dfb      	ldrb	r3, [r7, #23]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d14f      	bne.n	800b02c <f_opendir+0xd0>
		obj->fs = fs;
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7fe fef4 	bl	8009d84 <follow_path>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d13d      	bne.n	800b022 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afac:	b25b      	sxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	db12      	blt.n	800afd8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	799b      	ldrb	r3, [r3, #6]
 800afb6:	f003 0310 	and.w	r3, r3, #16
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00a      	beq.n	800afd4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f7fe fcc5 	bl	8009956 <ld_clust>
 800afcc:	4602      	mov	r2, r0
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	609a      	str	r2, [r3, #8]
 800afd2:	e001      	b.n	800afd8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800afd4:	2305      	movs	r3, #5
 800afd6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d121      	bne.n	800b022 <f_opendir+0xc6>
				obj->id = fs->id;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	88da      	ldrh	r2, [r3, #6]
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800afe6:	2100      	movs	r1, #0
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7fe fb2d 	bl	8009648 <dir_sdi>
 800afee:	4603      	mov	r3, r0
 800aff0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d114      	bne.n	800b022 <f_opendir+0xc6>
					if (obj->sclust) {
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00d      	beq.n	800b01c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b000:	2100      	movs	r1, #0
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7fd fe76 	bl	8008cf4 <inc_lock>
 800b008:	4602      	mov	r2, r0
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d105      	bne.n	800b022 <f_opendir+0xc6>
 800b016:	2312      	movs	r3, #18
 800b018:	75fb      	strb	r3, [r7, #23]
 800b01a:	e002      	b.n	800b022 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	2200      	movs	r2, #0
 800b020:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b022:	7dfb      	ldrb	r3, [r7, #23]
 800b024:	2b04      	cmp	r3, #4
 800b026:	d101      	bne.n	800b02c <f_opendir+0xd0>
 800b028:	2305      	movs	r3, #5
 800b02a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <f_opendir+0xdc>
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2200      	movs	r2, #0
 800b036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b038:	7dfb      	ldrb	r3, [r7, #23]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b084      	sub	sp, #16
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f107 0208 	add.w	r2, r7, #8
 800b050:	4611      	mov	r1, r2
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff f9ee 	bl	800a434 <validate>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d110      	bne.n	800b084 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d006      	beq.n	800b078 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fd fece 	bl	8008e10 <dec_lock>
 800b074:	4603      	mov	r3, r0
 800b076:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	4611      	mov	r1, r2
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff f9c7 	bl	800a434 <validate>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d126      	bne.n	800b0fe <f_readdir+0x70>
		if (!fno) {
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7fe fac5 	bl	8009648 <dir_sdi>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73fb      	strb	r3, [r7, #15]
 800b0c2:	e01c      	b.n	800b0fe <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fe fc84 	bl	80099d4 <dir_read>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	d101      	bne.n	800b0da <f_readdir+0x4c>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10e      	bne.n	800b0fe <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b0e0:	6839      	ldr	r1, [r7, #0]
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7fe fd5a 	bl	8009b9c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7fe fb27 	bl	800973e <dir_next>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d101      	bne.n	800b0fe <f_readdir+0x70>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b092      	sub	sp, #72	; 0x48
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b114:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b118:	f107 030c 	add.w	r3, r7, #12
 800b11c:	2200      	movs	r2, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe ff3c 	bl	8009f9c <find_volume>
 800b124:	4603      	mov	r3, r0
 800b126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b12a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f040 8099 	bne.w	800b266 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	691a      	ldr	r2, [r3, #16]
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	3b02      	subs	r3, #2
 800b144:	429a      	cmp	r2, r3
 800b146:	d804      	bhi.n	800b152 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14a:	691a      	ldr	r2, [r3, #16]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	e089      	b.n	800b266 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d128      	bne.n	800b1b0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b15e:	2302      	movs	r3, #2
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b166:	f107 0314 	add.w	r3, r7, #20
 800b16a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fd ffae 	bl	80090ce <get_fat>
 800b172:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17a:	d103      	bne.n	800b184 <f_getfree+0x7c>
 800b17c:	2301      	movs	r3, #1
 800b17e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b182:	e063      	b.n	800b24c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b186:	2b01      	cmp	r3, #1
 800b188:	d103      	bne.n	800b192 <f_getfree+0x8a>
 800b18a:	2302      	movs	r3, #2
 800b18c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b190:	e05c      	b.n	800b24c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	2b00      	cmp	r3, #0
 800b196:	d102      	bne.n	800b19e <f_getfree+0x96>
 800b198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19a:	3301      	adds	r3, #1
 800b19c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d3db      	bcc.n	800b166 <f_getfree+0x5e>
 800b1ae:	e04d      	b.n	800b24c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d113      	bne.n	800b1f2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	63ba      	str	r2, [r7, #56]	; 0x38
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	f7fd fec0 	bl	8008f58 <move_window>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b1de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d131      	bne.n	800b24a <f_getfree+0x142>
							p = fs->win;
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	3330      	adds	r3, #48	; 0x30
 800b1ea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b1ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d10f      	bne.n	800b21a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b1fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1fc:	f7fd fbfc 	bl	80089f8 <ld_word>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <f_getfree+0x104>
 800b206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b208:	3301      	adds	r3, #1
 800b20a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	3302      	adds	r3, #2
 800b210:	633b      	str	r3, [r7, #48]	; 0x30
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	3b02      	subs	r3, #2
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
 800b218:	e010      	b.n	800b23c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b21a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b21c:	f7fd fc04 	bl	8008a28 <ld_dword>
 800b220:	4603      	mov	r3, r0
 800b222:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <f_getfree+0x128>
 800b22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b22c:	3301      	adds	r3, #1
 800b22e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	3304      	adds	r3, #4
 800b234:	633b      	str	r3, [r7, #48]	; 0x30
 800b236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b238:	3b04      	subs	r3, #4
 800b23a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23e:	3b01      	subs	r3, #1
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1bd      	bne.n	800b1c4 <f_getfree+0xbc>
 800b248:	e000      	b.n	800b24c <f_getfree+0x144>
							if (res != FR_OK) break;
 800b24a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b250:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b256:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b25c:	7912      	ldrb	r2, [r2, #4]
 800b25e:	f042 0201 	orr.w	r2, r2, #1
 800b262:	b2d2      	uxtb	r2, r2
 800b264:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b266:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3748      	adds	r7, #72	; 0x48
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b274:	b590      	push	{r4, r7, lr}
 800b276:	b09d      	sub	sp, #116	; 0x74
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	607a      	str	r2, [r7, #4]
 800b27e:	603b      	str	r3, [r7, #0]
 800b280:	460b      	mov	r3, r1
 800b282:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b284:	2301      	movs	r3, #1
 800b286:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b28c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b28e:	f107 030c 	add.w	r3, r7, #12
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fde7 	bl	8009e66 <get_ldnumber>
 800b298:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	da02      	bge.n	800b2a6 <f_mkfs+0x32>
 800b2a0:	230b      	movs	r3, #11
 800b2a2:	f000 bc0d 	b.w	800bac0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b2a6:	4a94      	ldr	r2, [pc, #592]	; (800b4f8 <f_mkfs+0x284>)
 800b2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d005      	beq.n	800b2be <f_mkfs+0x4a>
 800b2b2:	4a91      	ldr	r2, [pc, #580]	; (800b4f8 <f_mkfs+0x284>)
 800b2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b2ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fd fb0e 	bl	80088f0 <disk_initialize>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b2da:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <f_mkfs+0x76>
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e3ea      	b.n	800bac0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b2ea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b2ee:	f003 0304 	and.w	r3, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <f_mkfs+0x86>
 800b2f6:	230a      	movs	r3, #10
 800b2f8:	e3e2      	b.n	800bac0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b2fa:	f107 0214 	add.w	r2, r7, #20
 800b2fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b302:	2103      	movs	r1, #3
 800b304:	4618      	mov	r0, r3
 800b306:	f7fd fb59 	bl	80089bc <disk_ioctl>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10c      	bne.n	800b32a <f_mkfs+0xb6>
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <f_mkfs+0xb6>
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b31c:	d805      	bhi.n	800b32a <f_mkfs+0xb6>
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	1e5a      	subs	r2, r3, #1
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	4013      	ands	r3, r2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <f_mkfs+0xba>
 800b32a:	2301      	movs	r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b32e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b332:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <f_mkfs+0xce>
 800b33a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d809      	bhi.n	800b356 <f_mkfs+0xe2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b348:	d805      	bhi.n	800b356 <f_mkfs+0xe2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	1e5a      	subs	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4013      	ands	r3, r2
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <f_mkfs+0xe6>
 800b356:	2313      	movs	r3, #19
 800b358:	e3b2      	b.n	800bac0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b35a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b362:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b368:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b36a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b372:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b374:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b378:	fb02 f303 	mul.w	r3, r2, r3
 800b37c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <f_mkfs+0x114>
 800b384:	230e      	movs	r3, #14
 800b386:	e39b      	b.n	800bac0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b388:	f107 0210 	add.w	r2, r7, #16
 800b38c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b390:	2101      	movs	r1, #1
 800b392:	4618      	mov	r0, r3
 800b394:	f7fd fb12 	bl	80089bc <disk_ioctl>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <f_mkfs+0x12e>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e38e      	b.n	800bac0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b3a2:	7afb      	ldrb	r3, [r7, #11]
 800b3a4:	f003 0308 	and.w	r3, r3, #8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <f_mkfs+0x13c>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e000      	b.n	800b3b2 <f_mkfs+0x13e>
 800b3b0:	233f      	movs	r3, #63	; 0x3f
 800b3b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d201      	bcs.n	800b3c0 <f_mkfs+0x14c>
 800b3bc:	230e      	movs	r3, #14
 800b3be:	e37f      	b.n	800bac0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	2b7f      	cmp	r3, #127	; 0x7f
 800b3cc:	d801      	bhi.n	800b3d2 <f_mkfs+0x15e>
 800b3ce:	230e      	movs	r3, #14
 800b3d0:	e376      	b.n	800bac0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b80      	cmp	r3, #128	; 0x80
 800b3d6:	d901      	bls.n	800b3dc <f_mkfs+0x168>
 800b3d8:	2313      	movs	r3, #19
 800b3da:	e371      	b.n	800bac0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	f003 0302 	and.w	r3, r3, #2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00d      	beq.n	800b402 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b3e6:	7afb      	ldrb	r3, [r7, #11]
 800b3e8:	f003 0307 	and.w	r3, r3, #7
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d004      	beq.n	800b3fa <f_mkfs+0x186>
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b400:	e009      	b.n	800b416 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b402:	7afb      	ldrb	r3, [r7, #11]
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <f_mkfs+0x19c>
 800b40c:	2313      	movs	r3, #19
 800b40e:	e357      	b.n	800bac0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b410:	2302      	movs	r3, #2
 800b412:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b41a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d13c      	bne.n	800b49c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11b      	bne.n	800b460 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	0c5b      	lsrs	r3, r3, #17
 800b42c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b42e:	2300      	movs	r3, #0
 800b430:	64bb      	str	r3, [r7, #72]	; 0x48
 800b432:	2301      	movs	r3, #1
 800b434:	66bb      	str	r3, [r7, #104]	; 0x68
 800b436:	e005      	b.n	800b444 <f_mkfs+0x1d0>
 800b438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43a:	3301      	adds	r3, #1
 800b43c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b43e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	66bb      	str	r3, [r7, #104]	; 0x68
 800b444:	4a2d      	ldr	r2, [pc, #180]	; (800b4fc <f_mkfs+0x288>)
 800b446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d007      	beq.n	800b460 <f_mkfs+0x1ec>
 800b450:	4a2a      	ldr	r2, [pc, #168]	; (800b4fc <f_mkfs+0x288>)
 800b452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b458:	461a      	mov	r2, r3
 800b45a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d9eb      	bls.n	800b438 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b464:	fbb2 f3f3 	udiv	r3, r2, r3
 800b468:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	3302      	adds	r3, #2
 800b46e:	009a      	lsls	r2, r3, #2
 800b470:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b472:	4413      	add	r3, r2
 800b474:	1e5a      	subs	r2, r3, #1
 800b476:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b478:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47c:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 32;	/* Number of reserved sectors */
 800b47e:	2320      	movs	r3, #32
 800b480:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b482:	2300      	movs	r3, #0
 800b484:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d903      	bls.n	800b498 <f_mkfs+0x224>
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	4a1b      	ldr	r2, [pc, #108]	; (800b500 <f_mkfs+0x28c>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d952      	bls.n	800b53e <f_mkfs+0x2ca>
 800b498:	230e      	movs	r3, #14
 800b49a:	e311      	b.n	800bac0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b49c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d11b      	bne.n	800b4da <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	0b1b      	lsrs	r3, r3, #12
 800b4a6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4b0:	e005      	b.n	800b4be <f_mkfs+0x24a>
 800b4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4be:	4a11      	ldr	r2, [pc, #68]	; (800b504 <f_mkfs+0x290>)
 800b4c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d007      	beq.n	800b4da <f_mkfs+0x266>
 800b4ca:	4a0e      	ldr	r2, [pc, #56]	; (800b504 <f_mkfs+0x290>)
 800b4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d9eb      	bls.n	800b4b2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d90c      	bls.n	800b508 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	3302      	adds	r3, #2
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4f6:	e012      	b.n	800b51e <f_mkfs+0x2aa>
 800b4f8:	20000448 	.word	0x20000448
 800b4fc:	08016170 	.word	0x08016170
 800b500:	0ffffff5 	.word	0x0ffffff5
 800b504:	08016180 	.word	0x08016180
				} else {
					fmt = FS_FAT12;
 800b508:	2301      	movs	r3, #1
 800b50a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b50e:	6a3a      	ldr	r2, [r7, #32]
 800b510:	4613      	mov	r3, r2
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	4413      	add	r3, r2
 800b516:	3301      	adds	r3, #1
 800b518:	085b      	lsrs	r3, r3, #1
 800b51a:	3303      	adds	r3, #3
 800b51c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b51e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b522:	4413      	add	r3, r2
 800b524:	1e5a      	subs	r2, r3, #1
 800b526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b528:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52c:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 1;						/* Number of reserved sectors */
 800b52e:	2301      	movs	r3, #1
 800b530:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b538:	fbb2 f3f3 	udiv	r3, r2, r3
 800b53c:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b542:	4413      	add	r3, r2
 800b544:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b54a:	fb02 f203 	mul.w	r2, r2, r3
 800b54e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b550:	441a      	add	r2, r3
 800b552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b554:	4413      	add	r3, r2
 800b556:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	4413      	add	r3, r2
 800b55e:	1e5a      	subs	r2, r3, #1
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	425b      	negs	r3, r3
 800b564:	401a      	ands	r2, r3
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b56c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b570:	2b03      	cmp	r3, #3
 800b572:	d108      	bne.n	800b586 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800b574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b578:	4413      	add	r3, r2
 800b57a:	657b      	str	r3, [r7, #84]	; 0x54
 800b57c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b57e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b580:	4413      	add	r3, r2
 800b582:	65bb      	str	r3, [r7, #88]	; 0x58
 800b584:	e006      	b.n	800b594 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800b586:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b58e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b590:	4413      	add	r3, r2
 800b592:	653b      	str	r3, [r7, #80]	; 0x50
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800b594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b596:	011a      	lsls	r2, r3, #4
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	441a      	add	r2, r3
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d901      	bls.n	800b5aa <f_mkfs+0x336>
 800b5a6:	230e      	movs	r3, #14
 800b5a8:	e28a      	b.n	800bac0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ae:	1ad2      	subs	r2, r2, r3
 800b5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5b4:	fb01 f303 	mul.w	r3, r1, r3
 800b5b8:	1ad2      	subs	r2, r2, r3
 800b5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5bc:	1ad2      	subs	r2, r2, r3
 800b5be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800b5c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d10f      	bne.n	800b5ee <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d80a      	bhi.n	800b5ee <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d105      	bne.n	800b5ea <f_mkfs+0x376>
 800b5de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e0:	085b      	lsrs	r3, r3, #1
 800b5e2:	607b      	str	r3, [r7, #4]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d144      	bne.n	800b674 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800b5ea:	230e      	movs	r3, #14
 800b5ec:	e268      	b.n	800bac0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800b5ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d133      	bne.n	800b65e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d91e      	bls.n	800b63e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d107      	bne.n	800b616 <f_mkfs+0x3a2>
 800b606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	2b40      	cmp	r3, #64	; 0x40
 800b60c:	d803      	bhi.n	800b616 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800b60e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	607b      	str	r3, [r7, #4]
 800b614:	e033      	b.n	800b67e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800b616:	7afb      	ldrb	r3, [r7, #11]
 800b618:	f003 0302 	and.w	r3, r3, #2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b620:	2303      	movs	r3, #3
 800b622:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b626:	e02a      	b.n	800b67e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d105      	bne.n	800b63a <f_mkfs+0x3c6>
 800b62e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	607b      	str	r3, [r7, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b80      	cmp	r3, #128	; 0x80
 800b638:	d91e      	bls.n	800b678 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800b63a:	230e      	movs	r3, #14
 800b63c:	e240      	b.n	800bac0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b644:	4293      	cmp	r3, r2
 800b646:	d80a      	bhi.n	800b65e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d105      	bne.n	800b65a <f_mkfs+0x3e6>
 800b64e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	607b      	str	r3, [r7, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b80      	cmp	r3, #128	; 0x80
 800b658:	d910      	bls.n	800b67c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800b65a:	230e      	movs	r3, #14
 800b65c:	e230      	b.n	800bac0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800b65e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b662:	2b01      	cmp	r3, #1
 800b664:	d10c      	bne.n	800b680 <f_mkfs+0x40c>
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d907      	bls.n	800b680 <f_mkfs+0x40c>
 800b670:	230e      	movs	r3, #14
 800b672:	e225      	b.n	800bac0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b674:	bf00      	nop
 800b676:	e6ce      	b.n	800b416 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b678:	bf00      	nop
 800b67a:	e6cc      	b.n	800b416 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b67c:	bf00      	nop
			pau = au;
 800b67e:	e6ca      	b.n	800b416 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800b680:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800b682:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b684:	461a      	mov	r2, r3
 800b686:	2100      	movs	r1, #0
 800b688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b68a:	f7fd fa58 	bl	8008b3e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800b68e:	220b      	movs	r2, #11
 800b690:	49bc      	ldr	r1, [pc, #752]	; (800b984 <f_mkfs+0x710>)
 800b692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b694:	f7fd fa32 	bl	8008afc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	330b      	adds	r3, #11
 800b69c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b69e:	4611      	mov	r1, r2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fd f9e4 	bl	8008a6e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	330d      	adds	r3, #13
 800b6aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	330e      	adds	r3, #14
 800b6b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fd f9d7 	bl	8008a6e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	3310      	adds	r3, #16
 800b6c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	f103 0211 	add.w	r2, r3, #17
 800b6d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d002      	beq.n	800b6de <f_mkfs+0x46a>
 800b6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	e000      	b.n	800b6e0 <f_mkfs+0x46c>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	f7fd f9c3 	bl	8008a6e <st_word>
		if (sz_vol < 0x10000) {
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ee:	d208      	bcs.n	800b702 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	3313      	adds	r3, #19
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	b292      	uxth	r2, r2
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fd f9b7 	bl	8008a6e <st_word>
 800b700:	e006      	b.n	800b710 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	3320      	adds	r3, #32
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	4611      	mov	r1, r2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd f9ca 	bl	8008aa4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	3315      	adds	r3, #21
 800b714:	22f8      	movs	r2, #248	; 0xf8
 800b716:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	3318      	adds	r3, #24
 800b71c:	213f      	movs	r1, #63	; 0x3f
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fd f9a5 	bl	8008a6e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	331a      	adds	r3, #26
 800b728:	21ff      	movs	r1, #255	; 0xff
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fd f99f 	bl	8008a6e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	331c      	adds	r3, #28
 800b734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b736:	4618      	mov	r0, r3
 800b738:	f7fd f9b4 	bl	8008aa4 <st_dword>
		if (fmt == FS_FAT32) {
 800b73c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b740:	2b03      	cmp	r3, #3
 800b742:	d131      	bne.n	800b7a8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800b74a:	f001 fdb1 	bl	800d2b0 <get_fattime>
 800b74e:	4603      	mov	r3, r0
 800b750:	4619      	mov	r1, r3
 800b752:	4620      	mov	r0, r4
 800b754:	f7fd f9a6 	bl	8008aa4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75a:	3324      	adds	r3, #36	; 0x24
 800b75c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fd f9a0 	bl	8008aa4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b766:	332c      	adds	r3, #44	; 0x2c
 800b768:	2102      	movs	r1, #2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fd f99a 	bl	8008aa4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	3330      	adds	r3, #48	; 0x30
 800b774:	2101      	movs	r1, #1
 800b776:	4618      	mov	r0, r3
 800b778:	f7fd f979 	bl	8008a6e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	3332      	adds	r3, #50	; 0x32
 800b780:	2106      	movs	r1, #6
 800b782:	4618      	mov	r0, r3
 800b784:	f7fd f973 	bl	8008a6e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78a:	3340      	adds	r3, #64	; 0x40
 800b78c:	2280      	movs	r2, #128	; 0x80
 800b78e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b792:	3342      	adds	r3, #66	; 0x42
 800b794:	2229      	movs	r2, #41	; 0x29
 800b796:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	3347      	adds	r3, #71	; 0x47
 800b79c:	2213      	movs	r2, #19
 800b79e:	497a      	ldr	r1, [pc, #488]	; (800b988 <f_mkfs+0x714>)
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fd f9ab 	bl	8008afc <mem_cpy>
 800b7a6:	e020      	b.n	800b7ea <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800b7ae:	f001 fd7f 	bl	800d2b0 <get_fattime>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7fd f974 	bl	8008aa4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7be:	3316      	adds	r3, #22
 800b7c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7c2:	b292      	uxth	r2, r2
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fd f951 	bl	8008a6e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	3324      	adds	r3, #36	; 0x24
 800b7d0:	2280      	movs	r2, #128	; 0x80
 800b7d2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	3326      	adds	r3, #38	; 0x26
 800b7d8:	2229      	movs	r2, #41	; 0x29
 800b7da:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	332b      	adds	r3, #43	; 0x2b
 800b7e0:	2213      	movs	r2, #19
 800b7e2:	496a      	ldr	r1, [pc, #424]	; (800b98c <f_mkfs+0x718>)
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fd f989 	bl	8008afc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b7f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fd f93a 	bl	8008a6e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800b7fa:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b7fe:	2301      	movs	r3, #1
 800b800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b804:	f7fd f8ba 	bl	800897c <disk_write>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <f_mkfs+0x59e>
 800b80e:	2301      	movs	r3, #1
 800b810:	e156      	b.n	800bac0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800b812:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b816:	2b03      	cmp	r3, #3
 800b818:	d140      	bne.n	800b89c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	1d9a      	adds	r2, r3, #6
 800b81e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b822:	2301      	movs	r3, #1
 800b824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b826:	f7fd f8a9 	bl	800897c <disk_write>
			mem_set(buf, 0, ss);
 800b82a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b82c:	461a      	mov	r2, r3
 800b82e:	2100      	movs	r1, #0
 800b830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b832:	f7fd f984 	bl	8008b3e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800b836:	4956      	ldr	r1, [pc, #344]	; (800b990 <f_mkfs+0x71c>)
 800b838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b83a:	f7fd f933 	bl	8008aa4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b844:	4953      	ldr	r1, [pc, #332]	; (800b994 <f_mkfs+0x720>)
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd f92c 	bl	8008aa4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800b84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	3b01      	subs	r3, #1
 800b856:	4619      	mov	r1, r3
 800b858:	4610      	mov	r0, r2
 800b85a:	f7fd f923 	bl	8008aa4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b864:	2102      	movs	r1, #2
 800b866:	4618      	mov	r0, r3
 800b868:	f7fd f91c 	bl	8008aa4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800b86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b872:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b876:	4618      	mov	r0, r3
 800b878:	f7fd f8f9 	bl	8008a6e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	1dda      	adds	r2, r3, #7
 800b880:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b884:	2301      	movs	r3, #1
 800b886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b888:	f7fd f878 	bl	800897c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	1c5a      	adds	r2, r3, #1
 800b890:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b894:	2301      	movs	r3, #1
 800b896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b898:	f7fd f870 	bl	800897c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800b89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89e:	2100      	movs	r1, #0
 800b8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8a2:	f7fd f94c 	bl	8008b3e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800b8a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8a8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ae:	e04b      	b.n	800b948 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800b8b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d113      	bne.n	800b8e0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800b8b8:	f06f 0107 	mvn.w	r1, #7
 800b8bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8be:	f7fd f8f1 	bl	8008aa4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	f04f 31ff 	mov.w	r1, #4294967295
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fd f8ea 	bl	8008aa4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	3308      	adds	r3, #8
 800b8d4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fd f8e3 	bl	8008aa4 <st_dword>
 800b8de:	e00b      	b.n	800b8f8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800b8e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d101      	bne.n	800b8ec <f_mkfs+0x678>
 800b8e8:	4b2b      	ldr	r3, [pc, #172]	; (800b998 <f_mkfs+0x724>)
 800b8ea:	e001      	b.n	800b8f0 <f_mkfs+0x67c>
 800b8ec:	f06f 0307 	mvn.w	r3, #7
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f4:	f7fd f8d6 	bl	8008aa4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8fa:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b8fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b900:	4293      	cmp	r3, r2
 800b902:	bf28      	it	cs
 800b904:	4613      	movcs	r3, r2
 800b906:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b908:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b90c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b90e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b912:	f7fd f833 	bl	800897c <disk_write>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <f_mkfs+0x6ac>
 800b91c:	2301      	movs	r3, #1
 800b91e:	e0cf      	b.n	800bac0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800b920:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b922:	461a      	mov	r2, r3
 800b924:	2100      	movs	r1, #0
 800b926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b928:	f7fd f909 	bl	8008b3e <mem_set>
				sect += n; nsect -= n;
 800b92c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b92e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b930:	4413      	add	r3, r2
 800b932:	667b      	str	r3, [r7, #100]	; 0x64
 800b934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800b93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1dc      	bne.n	800b8fc <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b944:	3301      	adds	r3, #1
 800b946:	64bb      	str	r3, [r7, #72]	; 0x48
 800b948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d3af      	bcc.n	800b8b0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800b950:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b954:	2b03      	cmp	r3, #3
 800b956:	d101      	bne.n	800b95c <f_mkfs+0x6e8>
 800b958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b95a:	e000      	b.n	800b95e <f_mkfs+0x6ea>
 800b95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800b960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b964:	4293      	cmp	r3, r2
 800b966:	bf28      	it	cs
 800b968:	4613      	movcs	r3, r2
 800b96a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b96c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b972:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b976:	f7fd f801 	bl	800897c <disk_write>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00d      	beq.n	800b99c <f_mkfs+0x728>
 800b980:	2301      	movs	r3, #1
 800b982:	e09d      	b.n	800bac0 <f_mkfs+0x84c>
 800b984:	08013150 	.word	0x08013150
 800b988:	0801315c 	.word	0x0801315c
 800b98c:	08013170 	.word	0x08013170
 800b990:	41615252 	.word	0x41615252
 800b994:	61417272 	.word	0x61417272
 800b998:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800b99c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b99e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9a0:	4413      	add	r3, r2
 800b9a2:	667b      	str	r3, [r7, #100]	; 0x64
 800b9a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800b9ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1d6      	bne.n	800b960 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800b9b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d103      	bne.n	800b9c2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b9c0:	e010      	b.n	800b9e4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9c8:	d303      	bcc.n	800b9d2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800b9ca:	2306      	movs	r3, #6
 800b9cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b9d0:	e008      	b.n	800b9e4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800b9d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d101      	bne.n	800b9de <f_mkfs+0x76a>
 800b9da:	2304      	movs	r3, #4
 800b9dc:	e000      	b.n	800b9e0 <f_mkfs+0x76c>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	f003 0308 	and.w	r3, r3, #8
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d15b      	bne.n	800baa6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800b9ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9f6:	f7fd f8a2 	bl	8008b3e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba00:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fd f832 	bl	8008a6e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ba10:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	3302      	adds	r3, #2
 800ba24:	2201      	movs	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	3303      	adds	r3, #3
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	3304      	adds	r3, #4
 800ba34:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800ba38:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	441a      	add	r2, r3
 800ba40:	4b21      	ldr	r3, [pc, #132]	; (800bac8 <f_mkfs+0x854>)
 800ba42:	fba3 1302 	umull	r1, r3, r3, r2
 800ba46:	1ad2      	subs	r2, r2, r3
 800ba48:	0852      	lsrs	r2, r2, #1
 800ba4a:	4413      	add	r3, r2
 800ba4c:	0b5b      	lsrs	r3, r3, #13
 800ba4e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	3305      	adds	r3, #5
 800ba54:	22fe      	movs	r2, #254	; 0xfe
 800ba56:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	3306      	adds	r3, #6
 800ba5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba5e:	0892      	lsrs	r2, r2, #2
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ba66:	b2d2      	uxtb	r2, r2
 800ba68:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	3307      	adds	r3, #7
 800ba6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	3308      	adds	r3, #8
 800ba78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fd f812 	bl	8008aa4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	330c      	adds	r3, #12
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4611      	mov	r1, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fd f80b 	bl	8008aa4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ba8e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ba92:	2301      	movs	r3, #1
 800ba94:	2200      	movs	r2, #0
 800ba96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba98:	f7fc ff70 	bl	800897c <disk_write>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <f_mkfs+0x832>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e00c      	b.n	800bac0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800baa6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800baaa:	2200      	movs	r2, #0
 800baac:	2100      	movs	r1, #0
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fc ff84 	bl	80089bc <disk_ioctl>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <f_mkfs+0x84a>
 800baba:	2301      	movs	r3, #1
 800babc:	e000      	b.n	800bac0 <f_mkfs+0x84c>

	return FR_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3774      	adds	r7, #116	; 0x74
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd90      	pop	{r4, r7, pc}
 800bac8:	0515565b 	.word	0x0515565b

0800bacc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bacc:	b480      	push	{r7}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	4613      	mov	r3, r2
 800bad8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bada:	2301      	movs	r3, #1
 800badc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bade:	2300      	movs	r3, #0
 800bae0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bae2:	4b1f      	ldr	r3, [pc, #124]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800bae4:	7b9b      	ldrb	r3, [r3, #14]
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d831      	bhi.n	800bb50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800baec:	4b1c      	ldr	r3, [pc, #112]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800baee:	7b9b      	ldrb	r3, [r3, #14]
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	4b1a      	ldr	r3, [pc, #104]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800baf6:	2100      	movs	r1, #0
 800baf8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bafa:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800bafc:	7b9b      	ldrb	r3, [r3, #14]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	4a17      	ldr	r2, [pc, #92]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb0a:	4b15      	ldr	r3, [pc, #84]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800bb0c:	7b9b      	ldrb	r3, [r3, #14]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	461a      	mov	r2, r3
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800bb14:	4413      	add	r3, r2
 800bb16:	79fa      	ldrb	r2, [r7, #7]
 800bb18:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800bb1a:	4b11      	ldr	r3, [pc, #68]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800bb1c:	7b9b      	ldrb	r3, [r3, #14]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	b2d1      	uxtb	r1, r2
 800bb24:	4a0e      	ldr	r2, [pc, #56]	; (800bb60 <FATFS_LinkDriverEx+0x94>)
 800bb26:	7391      	strb	r1, [r2, #14]
 800bb28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb2a:	7dbb      	ldrb	r3, [r7, #22]
 800bb2c:	3330      	adds	r3, #48	; 0x30
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	3301      	adds	r3, #1
 800bb38:	223a      	movs	r2, #58	; 0x3a
 800bb3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	3302      	adds	r3, #2
 800bb40:	222f      	movs	r2, #47	; 0x2f
 800bb42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	3303      	adds	r3, #3
 800bb48:	2200      	movs	r2, #0
 800bb4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	371c      	adds	r7, #28
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	20000474 	.word	0x20000474

0800bb64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bb6e:	2200      	movs	r2, #0
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff ffaa 	bl	800bacc <FATFS_LinkDriverEx>
 800bb78:	4603      	mov	r3, r0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800bb94:	2301      	movs	r3, #1
 800bb96:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800bb98:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <FATFS_UnLinkDriverEx+0x6c>)
 800bb9a:	7b9b      	ldrb	r3, [r3, #14]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d01e      	beq.n	800bbe0 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	3b30      	subs	r3, #48	; 0x30
 800bba8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
 800bbac:	4a10      	ldr	r2, [pc, #64]	; (800bbf0 <FATFS_UnLinkDriverEx+0x6c>)
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d013      	beq.n	800bbe0 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	4a0d      	ldr	r2, [pc, #52]	; (800bbf0 <FATFS_UnLinkDriverEx+0x6c>)
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
 800bbc6:	4a0a      	ldr	r2, [pc, #40]	; (800bbf0 <FATFS_UnLinkDriverEx+0x6c>)
 800bbc8:	4413      	add	r3, r2
 800bbca:	2200      	movs	r2, #0
 800bbcc:	731a      	strb	r2, [r3, #12]
      disk.nbr--;
 800bbce:	4b08      	ldr	r3, [pc, #32]	; (800bbf0 <FATFS_UnLinkDriverEx+0x6c>)
 800bbd0:	7b9b      	ldrb	r3, [r3, #14]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <FATFS_UnLinkDriverEx+0x6c>)
 800bbda:	739a      	strb	r2, [r3, #14]
      ret = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	20000474 	.word	0x20000474

0800bbf4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff ffc0 	bl	800bb84 <FATFS_UnLinkDriverEx>
 800bc04:	4603      	mov	r3, r0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7c1b      	ldrb	r3, [r3, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10e      	bne.n	800bc44 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800bc26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	2181      	movs	r1, #129	; 0x81
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f004 f8a6 	bl	800fd80 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800bc34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc38:	2202      	movs	r2, #2
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f004 f89f 	bl	800fd80 <USBD_LL_OpenEP>
 800bc42:	e00b      	b.n	800bc5c <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800bc44:	2340      	movs	r3, #64	; 0x40
 800bc46:	2202      	movs	r2, #2
 800bc48:	2181      	movs	r1, #129	; 0x81
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f004 f898 	bl	800fd80 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800bc50:	2340      	movs	r3, #64	; 0x40
 800bc52:	2202      	movs	r2, #2
 800bc54:	2101      	movs	r1, #1
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f004 f892 	bl	800fd80 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800bc5c:	2308      	movs	r3, #8
 800bc5e:	2203      	movs	r2, #3
 800bc60:	2182      	movs	r1, #130	; 0x82
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f004 f88c 	bl	800fd80 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bc68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc6c:	f004 fbc4 	bl	80103f8 <malloc>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 800bc84:	2301      	movs	r3, #1
 800bc86:	73fb      	strb	r3, [r7, #15]
 800bc88:	e026      	b.n	800bcd8 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc90:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	7c1b      	ldrb	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d109      	bne.n	800bcc8 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f004 f9d9 	bl	8010078 <USBD_LL_PrepareReceive>
 800bcc6:	e007      	b.n	800bcd8 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcce:	2340      	movs	r3, #64	; 0x40
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f004 f9d0 	bl	8010078 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800bcf2:	2181      	movs	r1, #129	; 0x81
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f004 f881 	bl	800fdfc <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f004 f87d 	bl	800fdfc <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800bd02:	2182      	movs	r1, #130	; 0x82
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f004 f879 	bl	800fdfc <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00e      	beq.n	800bd32 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bd24:	4618      	mov	r0, r3
 800bd26:	f004 fb6f 	bl	8010408 <free>
    pdev->pClassData = NULL;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bd4c:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d03a      	beq.n	800bdd0 <USBD_CDC_Setup+0x94>
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d000      	beq.n	800bd60 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800bd5e:	e043      	b.n	800bde8 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	88db      	ldrh	r3, [r3, #6]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d029      	beq.n	800bdbc <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	b25b      	sxtb	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	da11      	bge.n	800bd96 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800bd7e:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	88d2      	ldrh	r2, [r2, #6]
 800bd84:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800bd86:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	88db      	ldrh	r3, [r3, #6]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f001 f848 	bl	800ce24 <USBD_CtlSendData>
    break;
 800bd94:	e029      	b.n	800bdea <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	785a      	ldrb	r2, [r3, #1]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	88db      	ldrh	r3, [r3, #6]
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800bdac:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	88db      	ldrh	r3, [r3, #6]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f001 f863 	bl	800ce80 <USBD_CtlPrepareRx>
    break;
 800bdba:	e016      	b.n	800bdea <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	7850      	ldrb	r0, [r2, #1]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	4798      	blx	r3
    break;
 800bdce:	e00c      	b.n	800bdea <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	785b      	ldrb	r3, [r3, #1]
 800bdd4:	2b0a      	cmp	r3, #10
 800bdd6:	d001      	beq.n	800bddc <USBD_CDC_Setup+0xa0>
 800bdd8:	2b0b      	cmp	r3, #11
      break;
 800bdda:	e005      	b.n	800bde8 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800bddc:	2201      	movs	r2, #1
 800bdde:	4905      	ldr	r1, [pc, #20]	; (800bdf4 <USBD_CDC_Setup+0xb8>)
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 f81f 	bl	800ce24 <USBD_CtlSendData>
      break;
 800bde6:	bf00      	nop
    break;
 800bde8:	bf00      	nop
  }
  return USBD_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20000484 	.word	0x20000484

0800bdf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be0a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be12:	2b00      	cmp	r3, #0
 800be14:	d005      	beq.n	800be22 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	e000      	b.n	800be24 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800be22:	2302      	movs	r3, #2
  }
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be42:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f004 f94f 	bl	80100ec <USBD_LL_GetRxDataSize>
 800be4e:	4602      	mov	r2, r0
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00d      	beq.n	800be7c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800be74:	4611      	mov	r1, r2
 800be76:	4798      	blx	r3

    return USBD_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	e000      	b.n	800be7e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800be7c:	2302      	movs	r3, #2
  }
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be94:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d015      	beq.n	800becc <USBD_CDC_EP0_RxReady+0x46>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bea6:	2bff      	cmp	r3, #255	; 0xff
 800bea8:	d010      	beq.n	800becc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800beb8:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bec0:	b292      	uxth	r2, r2
 800bec2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	22ff      	movs	r2, #255	; 0xff
 800bec8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
	...

0800bed8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2243      	movs	r2, #67	; 0x43
 800bee4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bee6:	4b03      	ldr	r3, [pc, #12]	; (800bef4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bee8:	4618      	mov	r0, r3
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	2000009c 	.word	0x2000009c

0800bef8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2243      	movs	r2, #67	; 0x43
 800bf04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bf06:	4b03      	ldr	r3, [pc, #12]	; (800bf14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	20000058 	.word	0x20000058

0800bf18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2243      	movs	r2, #67	; 0x43
 800bf24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bf26:	4b03      	ldr	r3, [pc, #12]	; (800bf34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	200000e0 	.word	0x200000e0

0800bf38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	220a      	movs	r2, #10
 800bf44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bf46:	4b03      	ldr	r3, [pc, #12]	; (800bf54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	20000014 	.word	0x20000014

0800bf58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bf62:	2302      	movs	r3, #2
 800bf64:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d005      	beq.n	800bf78 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b087      	sub	sp, #28
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	60b9      	str	r1, [r7, #8]
 800bf90:	4613      	mov	r3, r2
 800bf92:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bf9a:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800bfa4:	88fa      	ldrh	r2, [r7, #6]
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b085      	sub	sp, #20
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bfca:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3714      	adds	r7, #20
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bff0:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d017      	beq.n	800c02c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7c1b      	ldrb	r3, [r3, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d109      	bne.n	800c018 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c00a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c00e:	2101      	movs	r1, #1
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f004 f831 	bl	8010078 <USBD_LL_PrepareReceive>
 800c016:	e007      	b.n	800c028 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c01e:	2340      	movs	r3, #64	; 0x40
 800c020:	2101      	movs	r1, #1
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f004 f828 	bl	8010078 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	e000      	b.n	800c02e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c02c:	2302      	movs	r3, #2
  }
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	60f8      	str	r0, [r7, #12]
 800c03e:	60b9      	str	r1, [r7, #8]
 800c040:	4613      	mov	r3, r2
 800c042:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800c04a:	2302      	movs	r3, #2
 800c04c:	e01a      	b.n	800c084 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	79fa      	ldrb	r2, [r7, #7]
 800c07a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f003 fdf5 	bl	800fc6c <USBD_LL_Init>
  
  return USBD_OK; 
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d006      	beq.n	800c0ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	683a      	ldr	r2, [r7, #0]
 800c0a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	73fb      	strb	r3, [r7, #15]
 800c0ac:	e001      	b.n	800c0b2 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f003 fe27 	bl	800fd1c <USBD_LL_Start>
  
  return USBD_OK;  
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00c      	beq.n	800c122 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	78fa      	ldrb	r2, [r7, #3]
 800c112:	4611      	mov	r1, r2
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	4798      	blx	r3
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800c122:	7bfb      	ldrb	r3, [r7, #15]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	78fa      	ldrb	r2, [r7, #3]
 800c142:	4611      	mov	r1, r2
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	4798      	blx	r3
  return USBD_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b082      	sub	sp, #8
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	4618      	mov	r0, r3
 800c166:	f000 fdb4 	bl	800ccd2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800c178:	461a      	mov	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800c186:	f003 031f 	and.w	r3, r3, #31
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d00b      	beq.n	800c1a6 <USBD_LL_SetupStage+0x54>
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d011      	beq.n	800c1b6 <USBD_LL_SetupStage+0x64>
 800c192:	2b00      	cmp	r3, #0
 800c194:	d117      	bne.n	800c1c6 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f9c6 	bl	800c530 <USBD_StdDevReq>
    break;
 800c1a4:	e01a      	b.n	800c1dc <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fa0e 	bl	800c5d0 <USBD_StdItfReq>
    break;
 800c1b4:	e012      	b.n	800c1dc <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fa39 	bl	800c636 <USBD_StdEPReq>
    break;
 800c1c4:	e00a      	b.n	800c1dc <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800c1cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f003 fe47 	bl	800fe68 <USBD_LL_StallEP>
    break;
 800c1da:	bf00      	nop
  }  
  return USBD_OK;  
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b086      	sub	sp, #24
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	60f8      	str	r0, [r7, #12]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	607a      	str	r2, [r7, #4]
 800c1f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800c1f4:	7afb      	ldrb	r3, [r7, #11]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d138      	bne.n	800c26c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c200:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d142      	bne.n	800c292 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	689a      	ldr	r2, [r3, #8]
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	429a      	cmp	r2, r3
 800c216:	d914      	bls.n	800c242 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	1ad2      	subs	r2, r2, r3
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	68da      	ldr	r2, [r3, #12]
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	4293      	cmp	r3, r2
 800c230:	bf28      	it	cs
 800c232:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800c234:	b29b      	uxth	r3, r3
 800c236:	461a      	mov	r2, r3
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 fe3e 	bl	800cebc <USBD_CtlContinueRx>
 800c240:	e027      	b.n	800c292 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00a      	beq.n	800c264 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c254:	2b03      	cmp	r3, #3
 800c256:	d105      	bne.n	800c264 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f000 fe3b 	bl	800cee0 <USBD_CtlSendStatus>
 800c26a:	e012      	b.n	800c292 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00c      	beq.n	800c292 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d107      	bne.n	800c292 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c288:	699b      	ldr	r3, [r3, #24]
 800c28a:	7afa      	ldrb	r2, [r7, #11]
 800c28c:	4611      	mov	r1, r2
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	4798      	blx	r3
  }  
  return USBD_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800c2aa:	7afb      	ldrb	r3, [r7, #11]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d16c      	bne.n	800c38a <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d157      	bne.n	800c370 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	689a      	ldr	r2, [r3, #8]
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d915      	bls.n	800c2f8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	1ad2      	subs	r2, r2, r3
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f000 fdb9 	bl	800ce5c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f003 fec1 	bl	8010078 <USBD_LL_PrepareReceive>
 800c2f6:	e03b      	b.n	800c370 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	68d2      	ldr	r2, [r2, #12]
 800c300:	fbb3 f1f2 	udiv	r1, r3, r2
 800c304:	fb02 f201 	mul.w	r2, r2, r1
 800c308:	1a9b      	subs	r3, r3, r2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d11c      	bne.n	800c348 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800c316:	429a      	cmp	r2, r3
 800c318:	d316      	bcc.n	800c348 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800c324:	429a      	cmp	r2, r3
 800c326:	d20f      	bcs.n	800c348 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800c328:	2200      	movs	r2, #0
 800c32a:	2100      	movs	r1, #0
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 fd95 	bl	800ce5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800c33a:	2300      	movs	r3, #0
 800c33c:	2200      	movs	r2, #0
 800c33e:	2100      	movs	r1, #0
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f003 fe99 	bl	8010078 <USBD_LL_PrepareReceive>
 800c346:	e013      	b.n	800c370 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00a      	beq.n	800c36a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	d105      	bne.n	800c36a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 fdcb 	bl	800cf06 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c376:	2b01      	cmp	r3, #1
 800c378:	d11a      	bne.n	800c3b0 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff feac 	bl	800c0d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800c388:	e012      	b.n	800c3b0 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c390:	695b      	ldr	r3, [r3, #20]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00c      	beq.n	800c3b0 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800c39c:	2b03      	cmp	r3, #3
 800c39e:	d107      	bne.n	800c3b0 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	7afa      	ldrb	r2, [r7, #11]
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	4798      	blx	r3
  }  
  return USBD_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800c3c2:	2340      	movs	r3, #64	; 0x40
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f003 fcd9 	bl	800fd80 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2240      	movs	r2, #64	; 0x40
 800c3d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800c3d6:	2340      	movs	r3, #64	; 0x40
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2180      	movs	r1, #128	; 0x80
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f003 fccf 	bl	800fd80 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2240      	movs	r2, #64	; 0x40
 800c3e6:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d009      	beq.n	800c40e <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	6852      	ldr	r2, [r2, #4]
 800c406:	b2d2      	uxtb	r2, r2
 800c408:	4611      	mov	r1, r2
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
 
  
  return USBD_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	78fa      	ldrb	r2, [r7, #3]
 800c428:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2204      	movs	r2, #4
 800c450:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c462:	b480      	push	{r7}
 800c464:	b083      	sub	sp, #12
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c492:	2b03      	cmp	r3, #3
 800c494:	d10b      	bne.n	800c4ae <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d005      	beq.n	800c4ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b083      	sub	sp, #12
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	6852      	ldr	r2, [r2, #4]
 800c51e:	b2d2      	uxtb	r2, r2
 800c520:	4611      	mov	r1, r2
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	4798      	blx	r3
   
  return USBD_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800c53a:	2300      	movs	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	785b      	ldrb	r3, [r3, #1]
 800c542:	2b09      	cmp	r3, #9
 800c544:	d839      	bhi.n	800c5ba <USBD_StdDevReq+0x8a>
 800c546:	a201      	add	r2, pc, #4	; (adr r2, 800c54c <USBD_StdDevReq+0x1c>)
 800c548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54c:	0800c59d 	.word	0x0800c59d
 800c550:	0800c5b1 	.word	0x0800c5b1
 800c554:	0800c5bb 	.word	0x0800c5bb
 800c558:	0800c5a7 	.word	0x0800c5a7
 800c55c:	0800c5bb 	.word	0x0800c5bb
 800c560:	0800c57f 	.word	0x0800c57f
 800c564:	0800c575 	.word	0x0800c575
 800c568:	0800c5bb 	.word	0x0800c5bb
 800c56c:	0800c593 	.word	0x0800c593
 800c570:	0800c589 	.word	0x0800c589
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f936 	bl	800c7e8 <USBD_GetDescriptor>
    break;
 800c57c:	e022      	b.n	800c5c4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fa41 	bl	800ca08 <USBD_SetAddress>
    break;
 800c586:	e01d      	b.n	800c5c4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fa7a 	bl	800ca84 <USBD_SetConfig>
    break;
 800c590:	e018      	b.n	800c5c4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fafd 	bl	800cb94 <USBD_GetConfig>
    break;
 800c59a:	e013      	b.n	800c5c4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fb2a 	bl	800cbf8 <USBD_GetStatus>
    break;
 800c5a4:	e00e      	b.n	800c5c4 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fb4f 	bl	800cc4c <USBD_SetFeature>
    break;
 800c5ae:	e009      	b.n	800c5c4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fb65 	bl	800cc82 <USBD_ClrFeature>
    break;
 800c5b8:	e004      	b.n	800c5c4 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fbc5 	bl	800cd4c <USBD_CtlError>
    break;
 800c5c2:	bf00      	nop
  }
  
  return ret;
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop

0800c5d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800c5da:	2300      	movs	r3, #0
 800c5dc:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d11b      	bne.n	800c620 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	889b      	ldrh	r3, [r3, #4]
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d811      	bhi.n	800c616 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	88db      	ldrh	r3, [r3, #6]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d110      	bne.n	800c62a <USBD_StdItfReq+0x5a>
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10d      	bne.n	800c62a <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fc66 	bl	800cee0 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800c614:	e009      	b.n	800c62a <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fb97 	bl	800cd4c <USBD_CtlError>
    break;
 800c61e:	e004      	b.n	800c62a <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fb92 	bl	800cd4c <USBD_CtlError>
    break;
 800c628:	e000      	b.n	800c62c <USBD_StdItfReq+0x5c>
    break;
 800c62a:	bf00      	nop
  }
  return USBD_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	889b      	ldrh	r3, [r3, #4]
 800c648:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c652:	2b20      	cmp	r3, #32
 800c654:	d108      	bne.n	800c668 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	4798      	blx	r3
    
    return USBD_OK;
 800c664:	2300      	movs	r3, #0
 800c666:	e0ba      	b.n	800c7de <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	785b      	ldrb	r3, [r3, #1]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d039      	beq.n	800c6e4 <USBD_StdEPReq+0xae>
 800c670:	2b03      	cmp	r3, #3
 800c672:	d002      	beq.n	800c67a <USBD_StdEPReq+0x44>
 800c674:	2b00      	cmp	r3, #0
 800c676:	d06b      	beq.n	800c750 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800c678:	e0b0      	b.n	800c7dc <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c680:	2b02      	cmp	r3, #2
 800c682:	d002      	beq.n	800c68a <USBD_StdEPReq+0x54>
 800c684:	2b03      	cmp	r3, #3
 800c686:	d00c      	beq.n	800c6a2 <USBD_StdEPReq+0x6c>
 800c688:	e025      	b.n	800c6d6 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d027      	beq.n	800c6e0 <USBD_StdEPReq+0xaa>
 800c690:	7bbb      	ldrb	r3, [r7, #14]
 800c692:	2b80      	cmp	r3, #128	; 0x80
 800c694:	d024      	beq.n	800c6e0 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800c696:	7bbb      	ldrb	r3, [r7, #14]
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f003 fbe4 	bl	800fe68 <USBD_LL_StallEP>
      break;	
 800c6a0:	e01e      	b.n	800c6e0 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	885b      	ldrh	r3, [r3, #2]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10a      	bne.n	800c6c0 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c6aa:	7bbb      	ldrb	r3, [r7, #14]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d007      	beq.n	800c6c0 <USBD_StdEPReq+0x8a>
 800c6b0:	7bbb      	ldrb	r3, [r7, #14]
 800c6b2:	2b80      	cmp	r3, #128	; 0x80
 800c6b4:	d004      	beq.n	800c6c0 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f003 fbd4 	bl	800fe68 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fc06 	bl	800cee0 <USBD_CtlSendStatus>
      break;
 800c6d4:	e005      	b.n	800c6e2 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fb37 	bl	800cd4c <USBD_CtlError>
      break;    
 800c6de:	e000      	b.n	800c6e2 <USBD_StdEPReq+0xac>
      break;	
 800c6e0:	bf00      	nop
    break;
 800c6e2:	e07b      	b.n	800c7dc <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d002      	beq.n	800c6f4 <USBD_StdEPReq+0xbe>
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d00c      	beq.n	800c70c <USBD_StdEPReq+0xd6>
 800c6f2:	e024      	b.n	800c73e <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d026      	beq.n	800c748 <USBD_StdEPReq+0x112>
 800c6fa:	7bbb      	ldrb	r3, [r7, #14]
 800c6fc:	2b80      	cmp	r3, #128	; 0x80
 800c6fe:	d023      	beq.n	800c748 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800c700:	7bbb      	ldrb	r3, [r7, #14]
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f003 fbaf 	bl	800fe68 <USBD_LL_StallEP>
      break;	
 800c70a:	e01d      	b.n	800c748 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	885b      	ldrh	r3, [r3, #2]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d11b      	bne.n	800c74c <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800c714:	7bbb      	ldrb	r3, [r7, #14]
 800c716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800c71e:	7bbb      	ldrb	r3, [r7, #14]
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f003 fbd6 	bl	800fed4 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fbd2 	bl	800cee0 <USBD_CtlSendStatus>
      break;
 800c73c:	e006      	b.n	800c74c <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fb03 	bl	800cd4c <USBD_CtlError>
      break;    
 800c746:	e002      	b.n	800c74e <USBD_StdEPReq+0x118>
      break;	
 800c748:	bf00      	nop
 800c74a:	e047      	b.n	800c7dc <USBD_StdEPReq+0x1a6>
      break;
 800c74c:	bf00      	nop
    break;
 800c74e:	e045      	b.n	800c7dc <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c756:	2b02      	cmp	r3, #2
 800c758:	d002      	beq.n	800c760 <USBD_StdEPReq+0x12a>
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	d00b      	beq.n	800c776 <USBD_StdEPReq+0x140>
 800c75e:	e036      	b.n	800c7ce <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800c760:	7bbb      	ldrb	r3, [r7, #14]
 800c762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c766:	2b00      	cmp	r3, #0
 800c768:	d036      	beq.n	800c7d8 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f003 fb7a 	bl	800fe68 <USBD_LL_StallEP>
      break;	
 800c774:	e030      	b.n	800c7d8 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800c776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	da08      	bge.n	800c790 <USBD_StdEPReq+0x15a>
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c784:	3301      	adds	r3, #1
 800c786:	011b      	lsls	r3, r3, #4
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	4413      	add	r3, r2
 800c78c:	3304      	adds	r3, #4
 800c78e:	e007      	b.n	800c7a0 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800c790:	7bbb      	ldrb	r3, [r7, #14]
 800c792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800c796:	3310      	adds	r3, #16
 800c798:	011b      	lsls	r3, r3, #4
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	4413      	add	r3, r2
 800c79e:	3304      	adds	r3, #4
 800c7a0:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f003 fbca 	bl	800ff40 <USBD_LL_IsStallEP>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	e002      	b.n	800c7c0 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800c7c0:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fb2c 	bl	800ce24 <USBD_CtlSendData>
      break;
 800c7cc:	e005      	b.n	800c7da <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fabb 	bl	800cd4c <USBD_CtlError>
      break;
 800c7d6:	e000      	b.n	800c7da <USBD_StdEPReq+0x1a4>
      break;	
 800c7d8:	bf00      	nop
    break;
 800c7da:	bf00      	nop
  }
  return ret;
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
	...

0800c7e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	885b      	ldrh	r3, [r3, #2]
 800c7f6:	0a1b      	lsrs	r3, r3, #8
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	2b0e      	cmp	r3, #14
 800c7fe:	f200 80e5 	bhi.w	800c9cc <USBD_GetDescriptor+0x1e4>
 800c802:	a201      	add	r2, pc, #4	; (adr r2, 800c808 <USBD_GetDescriptor+0x20>)
 800c804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c808:	0800c85d 	.word	0x0800c85d
 800c80c:	0800c875 	.word	0x0800c875
 800c810:	0800c8b5 	.word	0x0800c8b5
 800c814:	0800c9cd 	.word	0x0800c9cd
 800c818:	0800c9cd 	.word	0x0800c9cd
 800c81c:	0800c979 	.word	0x0800c979
 800c820:	0800c99f 	.word	0x0800c99f
 800c824:	0800c9cd 	.word	0x0800c9cd
 800c828:	0800c9cd 	.word	0x0800c9cd
 800c82c:	0800c9cd 	.word	0x0800c9cd
 800c830:	0800c9cd 	.word	0x0800c9cd
 800c834:	0800c9cd 	.word	0x0800c9cd
 800c838:	0800c9cd 	.word	0x0800c9cd
 800c83c:	0800c9cd 	.word	0x0800c9cd
 800c840:	0800c845 	.word	0x0800c845
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c84a:	69db      	ldr	r3, [r3, #28]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	7c12      	ldrb	r2, [r2, #16]
 800c850:	f107 010a 	add.w	r1, r7, #10
 800c854:	4610      	mov	r0, r2
 800c856:	4798      	blx	r3
 800c858:	60f8      	str	r0, [r7, #12]
    break;
 800c85a:	e0bc      	b.n	800c9d6 <USBD_GetDescriptor+0x1ee>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	7c12      	ldrb	r2, [r2, #16]
 800c868:	f107 010a 	add.w	r1, r7, #10
 800c86c:	4610      	mov	r0, r2
 800c86e:	4798      	blx	r3
 800c870:	60f8      	str	r0, [r7, #12]
    break;
 800c872:	e0b0      	b.n	800c9d6 <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	7c1b      	ldrb	r3, [r3, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10d      	bne.n	800c898 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c884:	f107 020a 	add.w	r2, r7, #10
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
 800c88c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3301      	adds	r3, #1
 800c892:	2202      	movs	r2, #2
 800c894:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c896:	e09e      	b.n	800c9d6 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	f107 020a 	add.w	r2, r7, #10
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4798      	blx	r3
 800c8a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	701a      	strb	r2, [r3, #0]
    break;
 800c8b2:	e090      	b.n	800c9d6 <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	885b      	ldrh	r3, [r3, #2]
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b05      	cmp	r3, #5
 800c8bc:	d856      	bhi.n	800c96c <USBD_GetDescriptor+0x184>
 800c8be:	a201      	add	r2, pc, #4	; (adr r2, 800c8c4 <USBD_GetDescriptor+0xdc>)
 800c8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c4:	0800c8dd 	.word	0x0800c8dd
 800c8c8:	0800c8f5 	.word	0x0800c8f5
 800c8cc:	0800c90d 	.word	0x0800c90d
 800c8d0:	0800c925 	.word	0x0800c925
 800c8d4:	0800c93d 	.word	0x0800c93d
 800c8d8:	0800c955 	.word	0x0800c955
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	7c12      	ldrb	r2, [r2, #16]
 800c8e8:	f107 010a 	add.w	r1, r7, #10
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	4798      	blx	r3
 800c8f0:	60f8      	str	r0, [r7, #12]
      break;
 800c8f2:	e040      	b.n	800c976 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	7c12      	ldrb	r2, [r2, #16]
 800c900:	f107 010a 	add.w	r1, r7, #10
 800c904:	4610      	mov	r0, r2
 800c906:	4798      	blx	r3
 800c908:	60f8      	str	r0, [r7, #12]
      break;
 800c90a:	e034      	b.n	800c976 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	7c12      	ldrb	r2, [r2, #16]
 800c918:	f107 010a 	add.w	r1, r7, #10
 800c91c:	4610      	mov	r0, r2
 800c91e:	4798      	blx	r3
 800c920:	60f8      	str	r0, [r7, #12]
      break;
 800c922:	e028      	b.n	800c976 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	7c12      	ldrb	r2, [r2, #16]
 800c930:	f107 010a 	add.w	r1, r7, #10
 800c934:	4610      	mov	r0, r2
 800c936:	4798      	blx	r3
 800c938:	60f8      	str	r0, [r7, #12]
      break;
 800c93a:	e01c      	b.n	800c976 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c942:	695b      	ldr	r3, [r3, #20]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	7c12      	ldrb	r2, [r2, #16]
 800c948:	f107 010a 	add.w	r1, r7, #10
 800c94c:	4610      	mov	r0, r2
 800c94e:	4798      	blx	r3
 800c950:	60f8      	str	r0, [r7, #12]
      break;
 800c952:	e010      	b.n	800c976 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	7c12      	ldrb	r2, [r2, #16]
 800c960:	f107 010a 	add.w	r1, r7, #10
 800c964:	4610      	mov	r0, r2
 800c966:	4798      	blx	r3
 800c968:	60f8      	str	r0, [r7, #12]
      break;
 800c96a:	e004      	b.n	800c976 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f9ec 	bl	800cd4c <USBD_CtlError>
      return;
 800c974:	e044      	b.n	800ca00 <USBD_GetDescriptor+0x218>
#endif   
    }
    break;
 800c976:	e02e      	b.n	800c9d6 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	7c1b      	ldrb	r3, [r3, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d109      	bne.n	800c994 <USBD_GetDescriptor+0x1ac>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c988:	f107 020a 	add.w	r2, r7, #10
 800c98c:	4610      	mov	r0, r2
 800c98e:	4798      	blx	r3
 800c990:	60f8      	str	r0, [r7, #12]
      break;
 800c992:	e020      	b.n	800c9d6 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f9d8 	bl	800cd4c <USBD_CtlError>
      return;
 800c99c:	e030      	b.n	800ca00 <USBD_GetDescriptor+0x218>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	7c1b      	ldrb	r3, [r3, #16]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10d      	bne.n	800c9c2 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ae:	f107 020a 	add.w	r2, r7, #10
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	4798      	blx	r3
 800c9b6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	2207      	movs	r2, #7
 800c9be:	701a      	strb	r2, [r3, #0]
      break; 
 800c9c0:	e009      	b.n	800c9d6 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f9c1 	bl	800cd4c <USBD_CtlError>
      return;
 800c9ca:	e019      	b.n	800ca00 <USBD_GetDescriptor+0x218>
    }

  default: 
     USBD_CtlError(pdev , req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f9bc 	bl	800cd4c <USBD_CtlError>
    return;
 800c9d4:	e014      	b.n	800ca00 <USBD_GetDescriptor+0x218>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800c9d6:	897b      	ldrh	r3, [r7, #10]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d011      	beq.n	800ca00 <USBD_GetDescriptor+0x218>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	88db      	ldrh	r3, [r3, #6]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00d      	beq.n	800ca00 <USBD_GetDescriptor+0x218>
  {
    
    len = MIN(len , req->wLength);
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	88da      	ldrh	r2, [r3, #6]
 800c9e8:	897b      	ldrh	r3, [r7, #10]
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	bf28      	it	cs
 800c9ee:	4613      	movcs	r3, r2
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800c9f4:	897b      	ldrh	r3, [r7, #10]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	68f9      	ldr	r1, [r7, #12]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fa12 	bl	800ce24 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop

0800ca08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	889b      	ldrh	r3, [r3, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d12c      	bne.n	800ca74 <USBD_SetAddress+0x6c>
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	88db      	ldrh	r3, [r3, #6]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d128      	bne.n	800ca74 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	885b      	ldrh	r3, [r3, #2]
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca2c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800ca34:	2b03      	cmp	r3, #3
 800ca36:	d104      	bne.n	800ca42 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f986 	bl	800cd4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800ca40:	e01c      	b.n	800ca7c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	7bfa      	ldrb	r2, [r7, #15]
 800ca46:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f003 faa2 	bl	800ff98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 fa43 	bl	800cee0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2202      	movs	r2, #2
 800ca64:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800ca68:	e008      	b.n	800ca7c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800ca72:	e003      	b.n	800ca7c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f968 	bl	800cd4c <USBD_CtlError>
  } 
}
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	885b      	ldrh	r3, [r3, #2]
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	4b3e      	ldr	r3, [pc, #248]	; (800cb90 <USBD_SetConfig+0x10c>)
 800ca96:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800ca98:	4b3d      	ldr	r3, [pc, #244]	; (800cb90 <USBD_SetConfig+0x10c>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d904      	bls.n	800caaa <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f952 	bl	800cd4c <USBD_CtlError>
 800caa8:	e06f      	b.n	800cb8a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	d002      	beq.n	800caba <USBD_SetConfig+0x36>
 800cab4:	2b03      	cmp	r3, #3
 800cab6:	d023      	beq.n	800cb00 <USBD_SetConfig+0x7c>
 800cab8:	e062      	b.n	800cb80 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800caba:	4b35      	ldr	r3, [pc, #212]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d01a      	beq.n	800caf8 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800cac2:	4b33      	ldr	r3, [pc, #204]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	461a      	mov	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2203      	movs	r2, #3
 800cad0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800cad4:	4b2e      	ldr	r3, [pc, #184]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7ff fb07 	bl	800c0ee <USBD_SetClassConfig>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d104      	bne.n	800caf0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f92f 	bl	800cd4c <USBD_CtlError>
          return;
 800caee:	e04c      	b.n	800cb8a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f9f5 	bl	800cee0 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800caf6:	e048      	b.n	800cb8a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f9f1 	bl	800cee0 <USBD_CtlSendStatus>
      break;
 800cafe:	e044      	b.n	800cb8a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800cb00:	4b23      	ldr	r3, [pc, #140]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d112      	bne.n	800cb2e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800cb10:	4b1f      	ldr	r3, [pc, #124]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	461a      	mov	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800cb1a:	4b1d      	ldr	r3, [pc, #116]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	4619      	mov	r1, r3
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff fb03 	bl	800c12c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f9da 	bl	800cee0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800cb2c:	e02d      	b.n	800cb8a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800cb2e:	4b18      	ldr	r3, [pc, #96]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	461a      	mov	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d01d      	beq.n	800cb78 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7ff faf1 	bl	800c12c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb4a:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800cb54:	4b0e      	ldr	r3, [pc, #56]	; (800cb90 <USBD_SetConfig+0x10c>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7ff fac7 	bl	800c0ee <USBD_SetClassConfig>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d104      	bne.n	800cb70 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f8ef 	bl	800cd4c <USBD_CtlError>
          return;
 800cb6e:	e00c      	b.n	800cb8a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 f9b5 	bl	800cee0 <USBD_CtlSendStatus>
      break;
 800cb76:	e008      	b.n	800cb8a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f9b1 	bl	800cee0 <USBD_CtlSendStatus>
      break;
 800cb7e:	e004      	b.n	800cb8a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f8e2 	bl	800cd4c <USBD_CtlError>
      break;
 800cb88:	bf00      	nop
    }
  }
}
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	20000485 	.word	0x20000485

0800cb94 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	88db      	ldrh	r3, [r3, #6]
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d004      	beq.n	800cbb0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f8cf 	bl	800cd4c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800cbae:	e01f      	b.n	800cbf0 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d002      	beq.n	800cbc0 <USBD_GetConfig+0x2c>
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d00b      	beq.n	800cbd6 <USBD_GetConfig+0x42>
 800cbbe:	e012      	b.n	800cbe6 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800cbca:	2201      	movs	r2, #1
 800cbcc:	4619      	mov	r1, r3
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f928 	bl	800ce24 <USBD_CtlSendData>
      break;
 800cbd4:	e00c      	b.n	800cbf0 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800cbda:	2201      	movs	r2, #1
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 f920 	bl	800ce24 <USBD_CtlSendData>
      break;
 800cbe4:	e004      	b.n	800cbf0 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 f8af 	bl	800cd4c <USBD_CtlError>
      break;
 800cbee:	bf00      	nop
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800cc08:	3b02      	subs	r3, #2
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d815      	bhi.n	800cc3a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2201      	movs	r2, #1
 800cc12:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d005      	beq.n	800cc2a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	f043 0202 	orr.w	r2, r3, #2
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800cc2e:	2202      	movs	r2, #2
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f8f6 	bl	800ce24 <USBD_CtlSendData>
                      2);
    break;
 800cc38:	e004      	b.n	800cc44 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f885 	bl	800cd4c <USBD_CtlError>
    break;
 800cc42:	bf00      	nop
  }
}
 800cc44:	bf00      	nop
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	885b      	ldrh	r3, [r3, #2]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d10d      	bne.n	800cc7a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2201      	movs	r2, #1
 800cc62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f933 	bl	800cee0 <USBD_CtlSendStatus>
  }

}
 800cc7a:	bf00      	nop
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800cc92:	3b02      	subs	r3, #2
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d812      	bhi.n	800ccbe <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	885b      	ldrh	r3, [r3, #2]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d113      	bne.n	800ccc8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f912 	bl	800cee0 <USBD_CtlSendStatus>
    }
    break;
 800ccbc:	e004      	b.n	800ccc8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f843 	bl	800cd4c <USBD_CtlError>
    break;
 800ccc6:	e000      	b.n	800ccca <USBD_ClrFeature+0x48>
    break;
 800ccc8:	bf00      	nop
  }
}
 800ccca:	bf00      	nop
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	781a      	ldrb	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	785a      	ldrb	r2, [r3, #1]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	3302      	adds	r3, #2
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	3303      	adds	r3, #3
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	021b      	lsls	r3, r3, #8
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4413      	add	r3, r2
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	3305      	adds	r3, #5
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	021b      	lsls	r3, r3, #8
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	4413      	add	r3, r2
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	3306      	adds	r3, #6
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	3307      	adds	r3, #7
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	021b      	lsls	r3, r3, #8
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	4413      	add	r3, r2
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	80da      	strh	r2, [r3, #6]

}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800cd56:	2180      	movs	r1, #128	; 0x80
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f003 f885 	bl	800fe68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800cd5e:	2100      	movs	r1, #0
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f003 f881 	bl	800fe68 <USBD_LL_StallEP>
}
 800cd66:	bf00      	nop
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b086      	sub	sp, #24
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	60b9      	str	r1, [r7, #8]
 800cd78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d033      	beq.n	800cdec <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 f835 	bl	800cdf4 <USBD_GetLen>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	75fa      	strb	r2, [r7, #23]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	4413      	add	r3, r2
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	8812      	ldrh	r2, [r2, #0]
 800cda8:	b2d2      	uxtb	r2, r2
 800cdaa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	75fa      	strb	r2, [r7, #23]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	2203      	movs	r2, #3
 800cdba:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800cdbc:	e012      	b.n	800cde4 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	75fa      	strb	r2, [r7, #23]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	441a      	add	r2, r3
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	1c59      	adds	r1, r3, #1
 800cdce:	60f9      	str	r1, [r7, #12]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	75fa      	strb	r2, [r7, #23]
 800cdda:	461a      	mov	r2, r3
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	4413      	add	r3, r2
 800cde0:	2200      	movs	r2, #0
 800cde2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1e8      	bne.n	800cdbe <USBD_GetString+0x50>
    }
  } 
}
 800cdec:	bf00      	nop
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800ce00:	e005      	b.n	800ce0e <USBD_GetLen+0x1a>
    {
        len++;
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	3301      	adds	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
        buf++;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1f5      	bne.n	800ce02 <USBD_GetLen+0xe>
    }

    return len;
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2202      	movs	r2, #2
 800ce36:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800ce3a:	88fa      	ldrh	r2, [r7, #6]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800ce40:	88fa      	ldrh	r2, [r7, #6]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800ce46:	88fb      	ldrh	r3, [r7, #6]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f003 f8d9 	bl	8010004 <USBD_LL_Transmit>
  
  return USBD_OK;
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	4613      	mov	r3, r2
 800ce68:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800ce6a:	88fb      	ldrh	r3, [r7, #6]
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	2100      	movs	r1, #0
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f003 f8c7 	bl	8010004 <USBD_LL_Transmit>
  
  return USBD_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2203      	movs	r2, #3
 800ce92:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800ce96:	88fa      	ldrh	r2, [r7, #6]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800ce9e:	88fa      	ldrh	r2, [r7, #6]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800cea6:	88fb      	ldrh	r3, [r7, #6]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	2100      	movs	r1, #0
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f003 f8e3 	bl	8010078 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800ceca:	88fb      	ldrh	r3, [r7, #6]
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	2100      	movs	r1, #0
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f003 f8d1 	bl	8010078 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2204      	movs	r2, #4
 800ceec:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800cef0:	2300      	movs	r3, #0
 800cef2:	2200      	movs	r2, #0
 800cef4:	2100      	movs	r1, #0
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f003 f884 	bl	8010004 <USBD_LL_Transmit>
  
  return USBD_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b082      	sub	sp, #8
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2205      	movs	r2, #5
 800cf12:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800cf16:	2300      	movs	r3, #0
 800cf18:	2200      	movs	r2, #0
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f003 f8ab 	bl	8010078 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <String_GetString>:
//
//         Any character typed other than those above will be masked with 0x7F and stored in the buffer
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_GetString( uint8_t *Buffer )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
    uint16_t Length = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	82fb      	strh	r3, [r7, #22]
    uint16_t Byte = 1;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	82bb      	strh	r3, [r7, #20]
    uint8_t  *Ptr;
    //
    //  Looop until exited
    //
    Ptr = Buffer;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	613b      	str	r3, [r7, #16]
    while ( Byte != 0 )
 800cf40:	e086      	b.n	800d050 <String_GetString+0x124>
    {
        //
        //  Get the byte
        //
        Byte = String_GetByte() & ASCII_MASK;
 800cf42:	f000 f8c3 	bl	800d0cc <String_GetByte>
 800cf46:	4603      	mov	r3, r0
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4e:	82bb      	strh	r3, [r7, #20]
        //
        //  Handle special characters
        //
        switch ( Byte )
 800cf50:	8abb      	ldrh	r3, [r7, #20]
 800cf52:	3b03      	subs	r3, #3
 800cf54:	2b18      	cmp	r3, #24
 800cf56:	d86c      	bhi.n	800d032 <String_GetString+0x106>
 800cf58:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <String_GetString+0x34>)
 800cf5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5e:	bf00      	nop
 800cf60:	0800cfef 	.word	0x0800cfef
 800cf64:	0800d033 	.word	0x0800d033
 800cf68:	0800d033 	.word	0x0800d033
 800cf6c:	0800d033 	.word	0x0800d033
 800cf70:	0800d033 	.word	0x0800d033
 800cf74:	0800cfd1 	.word	0x0800cfd1
 800cf78:	0800d033 	.word	0x0800d033
 800cf7c:	0800cfc5 	.word	0x0800cfc5
 800cf80:	0800d033 	.word	0x0800d033
 800cf84:	0800d033 	.word	0x0800d033
 800cf88:	0800cfc5 	.word	0x0800cfc5
 800cf8c:	0800d033 	.word	0x0800d033
 800cf90:	0800d033 	.word	0x0800d033
 800cf94:	0800d033 	.word	0x0800d033
 800cf98:	0800d033 	.word	0x0800d033
 800cf9c:	0800cff9 	.word	0x0800cff9
 800cfa0:	0800d033 	.word	0x0800d033
 800cfa4:	0800d033 	.word	0x0800d033
 800cfa8:	0800d00d 	.word	0x0800d00d
 800cfac:	0800d033 	.word	0x0800d033
 800cfb0:	0800d00d 	.word	0x0800d00d
 800cfb4:	0800d033 	.word	0x0800d033
 800cfb8:	0800d033 	.word	0x0800d033
 800cfbc:	0800d033 	.word	0x0800d033
 800cfc0:	0800d00d 	.word	0x0800d00d
            case '\n':
            case '\r':
                //
                //  Add a null to the end of the buffer
                //
                *Ptr = '\0';
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	701a      	strb	r2, [r3, #0]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	82bb      	strh	r3, [r7, #20]
                break;
 800cfce:	e03f      	b.n	800d050 <String_GetString+0x124>
            case '\b':
                //
                //  If we have characters to delete
                //  then delete the last one and decrement the length
                //
                if (Ptr > Buffer )
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d93b      	bls.n	800d050 <String_GetString+0x124>
                {
                    Ptr--;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	613b      	str	r3, [r7, #16]
                    Length--;
 800cfde:	8afb      	ldrh	r3, [r7, #22]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	82fb      	strh	r3, [r7, #22]
                    //
                    //  Erase the character
                    //
                    String_PutStringN("\b \b", 3);
 800cfe4:	2103      	movs	r1, #3
 800cfe6:	481f      	ldr	r0, [pc, #124]	; (800d064 <String_GetString+0x138>)
 800cfe8:	f000 f840 	bl	800d06c <String_PutStringN>
                }
                break;
 800cfec:	e030      	b.n	800d050 <String_GetString+0x124>
            //
            case 'c' & CONTROL_MASK:
                //
                //  Set the length to zero
                //
                Length = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	82fb      	strh	r3, [r7, #22]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	82bb      	strh	r3, [r7, #20]
                break;
 800cff6:	e02b      	b.n	800d050 <String_GetString+0x124>
            //
            case 'r' & CONTROL_MASK:
                //
                //  new line
                //
                String_PutStringN( "\n\r", 2);
 800cff8:	2102      	movs	r1, #2
 800cffa:	481b      	ldr	r0, [pc, #108]	; (800d068 <String_GetString+0x13c>)
 800cffc:	f000 f836 	bl	800d06c <String_PutStringN>
                //
                //  output buffer
                //
                String_PutStringN( (char *)Buffer, Length );
 800d000:	8afb      	ldrh	r3, [r7, #22]
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f831 	bl	800d06c <String_PutStringN>
                break;
 800d00a:	e021      	b.n	800d050 <String_GetString+0x124>
            {
                uint16_t Counter;
                //
                //  Point to the beginning of the buffer
                //
                Ptr = Buffer;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	613b      	str	r3, [r7, #16]
                //
                //  Erase the line visually
                //
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 800d010:	2300      	movs	r3, #0
 800d012:	81fb      	strh	r3, [r7, #14]
 800d014:	e006      	b.n	800d024 <String_GetString+0xf8>
                {
                    String_PutStringN("\b \b", 3);
 800d016:	2103      	movs	r1, #3
 800d018:	4812      	ldr	r0, [pc, #72]	; (800d064 <String_GetString+0x138>)
 800d01a:	f000 f827 	bl	800d06c <String_PutStringN>
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 800d01e:	89fb      	ldrh	r3, [r7, #14]
 800d020:	3301      	adds	r3, #1
 800d022:	81fb      	strh	r3, [r7, #14]
 800d024:	89fa      	ldrh	r2, [r7, #14]
 800d026:	8afb      	ldrh	r3, [r7, #22]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d3f4      	bcc.n	800d016 <String_GetString+0xea>
                }
                //
                //  Zero out the length of the string
                //
                Length = 0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	82fb      	strh	r3, [r7, #22]
                break;
 800d030:	e00e      	b.n	800d050 <String_GetString+0x124>
            //
            default:
                //
                //  Store the byte
                //
                *(Ptr++) = Byte;
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	613a      	str	r2, [r7, #16]
 800d038:	8aba      	ldrh	r2, [r7, #20]
 800d03a:	b2d2      	uxtb	r2, r2
 800d03c:	701a      	strb	r2, [r3, #0]
                //
                //  Increment the length
                //
                Length++;
 800d03e:	8afb      	ldrh	r3, [r7, #22]
 800d040:	3301      	adds	r3, #1
 800d042:	82fb      	strh	r3, [r7, #22]
                //
                // Echo it back to the user
                //
                String_PutByte( Byte );
 800d044:	8abb      	ldrh	r3, [r7, #20]
 800d046:	b2db      	uxtb	r3, r3
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 f82b 	bl	800d0a4 <String_PutByte>
                break;
 800d04e:	bf00      	nop
    while ( Byte != 0 )
 800d050:	8abb      	ldrh	r3, [r7, #20]
 800d052:	2b00      	cmp	r3, #0
 800d054:	f47f af75 	bne.w	800cf42 <String_GetString+0x16>
        }
    }
    return Length;
 800d058:	8afb      	ldrh	r3, [r7, #22]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	08013184 	.word	0x08013184
 800d068:	08013188 	.word	0x08013188

0800d06c <String_PutStringN>:
//
//  Note:   This routine interfaces directly with the STM32CubeMX Hal
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_PutStringN( char *Buffer, uint16_t Length )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	807b      	strh	r3, [r7, #2]
    //
    //  Don't do anything if length is zero
    //
    if ( Length > 0 )
 800d078:	887b      	ldrh	r3, [r7, #2]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00d      	beq.n	800d09a <String_PutStringN+0x2e>
        //
#else
            //
            //  Loop through the buffer
            //
            for ( ; Length > 0 ; Length-- )
 800d07e:	e009      	b.n	800d094 <String_PutStringN+0x28>
            {
                //
                //  output a character
                //
                String_PutByte( (uint8_t)*(Buffer++) );
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	1c5a      	adds	r2, r3, #1
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 f80b 	bl	800d0a4 <String_PutByte>
            for ( ; Length > 0 ; Length-- )
 800d08e:	887b      	ldrh	r3, [r7, #2]
 800d090:	3b01      	subs	r3, #1
 800d092:	807b      	strh	r3, [r7, #2]
 800d094:	887b      	ldrh	r3, [r7, #2]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1f2      	bne.n	800d080 <String_PutStringN+0x14>
            }
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    }
    return Length;
 800d09a:	887b      	ldrh	r3, [r7, #2]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <String_PutByte>:
//  Note:   This function interfaces directly with the STM32CubeMX Hal
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_PutByte( uint8_t Byte )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	71fb      	strb	r3, [r7, #7]
//
#else
    //
    //  output the byte normally
    //
    HAL_UART_Transmit(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 800d0ae:	1df9      	adds	r1, r7, #7
 800d0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	4804      	ldr	r0, [pc, #16]	; (800d0c8 <String_PutByte+0x24>)
 800d0b8:	f7f9 fc0f 	bl	80068da <HAL_UART_Transmit>
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    return Byte;
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20001068 	.word	0x20001068

0800d0cc <String_GetByte>:
//          String_GetRxStatus.
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_GetByte( void )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
    uint8_t Byte;
    //
    //  read the byte normally
    //
    HAL_UART_Receive(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 800d0d2:	1df9      	adds	r1, r7, #7
 800d0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d8:	2201      	movs	r2, #1
 800d0da:	4804      	ldr	r0, [pc, #16]	; (800d0ec <String_GetByte+0x20>)
 800d0dc:	f7f9 fc88 	bl	80069f0 <HAL_UART_Receive>
    return Byte;
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	20001068 	.word	0x20001068

0800d0f0 <BSP_SDRAM_Init>:
/**
 * @brief  Initializes the SDRAM device for SDRAM disk area
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
	uint8_t sdramstatus = SDRAM_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	71fb      	strb	r3, [r7, #7]

  return sdramstatus;
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800d118:	68f9      	ldr	r1, [r7, #12]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	4806      	ldr	r0, [pc, #24]	; (800d138 <BSP_SDRAM_ReadData+0x30>)
 800d120:	f7f9 f882 	bl	8006228 <HAL_SDRAM_Read_32b>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <BSP_SDRAM_ReadData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 800d12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	2000134c 	.word	0x2000134c

0800d13c <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800d14c:	68f9      	ldr	r1, [r7, #12]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	4806      	ldr	r0, [pc, #24]	; (800d16c <BSP_SDRAM_WriteData+0x30>)
 800d154:	f7f9 f8a7 	bl	80062a6 <HAL_SDRAM_Write_32b>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <BSP_SDRAM_WriteData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 800d162:	7dfb      	ldrb	r3, [r7, #23]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	2000134c 	.word	0x2000134c

0800d170 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2201      	movs	r2, #1
 800d182:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	2210      	movs	r2, #16
 800d188:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2201      	movs	r2, #1
 800d18e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	2200      	movs	r2, #0
 800d194:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800d196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7f9 f8c5 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	f7f4 fd50 	bl	8001c48 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	2210      	movs	r2, #16
 800d1b2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800d1c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7f9 f8b0 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	2203      	movs	r2, #3
 800d1d0:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2210      	movs	r2, #16
 800d1d6:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	2208      	movs	r2, #8
 800d1dc:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800d1e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7f9 f89e 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800d1f0:	f44f 7308 	mov.w	r3, #544	; 0x220
 800d1f4:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2204      	movs	r2, #4
 800d1fa:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	2210      	movs	r2, #16
 800d200:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2201      	movs	r2, #1
 800d206:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800d20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7f9 f889 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f240 6203 	movw	r2, #1539	; 0x603
 800d222:	615a      	str	r2, [r3, #20]

}
 800d224:	bf00      	nop
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800d22c:	b480      	push	{r7}
 800d22e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800d230:	4a14      	ldr	r2, [pc, #80]	; (800d284 <DWT_Delay_Init+0x58>)
 800d232:	4b14      	ldr	r3, [pc, #80]	; (800d284 <DWT_Delay_Init+0x58>)
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d23a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800d23c:	4a11      	ldr	r2, [pc, #68]	; (800d284 <DWT_Delay_Init+0x58>)
 800d23e:	4b11      	ldr	r3, [pc, #68]	; (800d284 <DWT_Delay_Init+0x58>)
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d246:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800d248:	4a0f      	ldr	r2, [pc, #60]	; (800d288 <DWT_Delay_Init+0x5c>)
 800d24a:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <DWT_Delay_Init+0x5c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f023 0301 	bic.w	r3, r3, #1
 800d252:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800d254:	4a0c      	ldr	r2, [pc, #48]	; (800d288 <DWT_Delay_Init+0x5c>)
 800d256:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <DWT_Delay_Init+0x5c>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f043 0301 	orr.w	r3, r3, #1
 800d25e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800d260:	4b09      	ldr	r3, [pc, #36]	; (800d288 <DWT_Delay_Init+0x5c>)
 800d262:	2200      	movs	r2, #0
 800d264:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800d266:	bf00      	nop
     __ASM volatile ("NOP");
 800d268:	bf00      	nop
  __ASM volatile ("NOP");
 800d26a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800d26c:	4b06      	ldr	r3, [pc, #24]	; (800d288 <DWT_Delay_Init+0x5c>)
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800d274:	2300      	movs	r3, #0
 800d276:	e000      	b.n	800d27a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800d278:	2301      	movs	r3, #1
  }
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	e000edf0 	.word	0xe000edf0
 800d288:	e0001000 	.word	0xe0001000

0800d28c <MX_FATFS_Init>:

/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void) {
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
	/*## FatFS: Link the SDRAMDISK driver ###########################*/
	retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 800d290:	4904      	ldr	r1, [pc, #16]	; (800d2a4 <MX_FATFS_Init+0x18>)
 800d292:	4805      	ldr	r0, [pc, #20]	; (800d2a8 <MX_FATFS_Init+0x1c>)
 800d294:	f7fe fc66 	bl	800bb64 <FATFS_LinkDriver>
 800d298:	4603      	mov	r3, r0
 800d29a:	461a      	mov	r2, r3
 800d29c:	4b03      	ldr	r3, [pc, #12]	; (800d2ac <MX_FATFS_Init+0x20>)
 800d29e:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN Init */
	/* additional user code for init */
	/* USER CODE END Init */
}
 800d2a0:	bf00      	nop
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	2000055c 	.word	0x2000055c
 800d2a8:	08016190 	.word	0x08016190
 800d2ac:	200009c0 	.word	0x200009c0

0800d2b0 <get_fattime>:
/**
 * @brief  Gets Time from RTC
 * @param  None
 * @retval Time in DWORD
 */
DWORD get_fattime(void) {
 800d2b0:	b480      	push	{r7}
 800d2b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN get_fattime */
	return 0;
 800d2b4:	2300      	movs	r3, #0
	/* USER CODE END get_fattime */
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <DWT_Delay_us+0x3c>)
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800d2ce:	f7f8 fb23 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <DWT_Delay_us+0x40>)
 800d2d6:	fba3 2302 	umull	r2, r3, r3, r2
 800d2da:	0c9b      	lsrs	r3, r3, #18
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	fb02 f303 	mul.w	r3, r2, r3
 800d2e2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800d2e4:	bf00      	nop
 800d2e6:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <DWT_Delay_us+0x3c>)
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1ad2      	subs	r2, r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d3f8      	bcc.n	800d2e6 <DWT_Delay_us+0x26>
}
 800d2f4:	bf00      	nop
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	e0001000 	.word	0xe0001000
 800d300:	431bde83 	.word	0x431bde83

0800d304 <initArray>:
#include <ctype.h>

#include "main.h"
#include "dwt_stm32_delay.h"

void initArray(Array *a, size_t initialSize) {
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
	a->array = (uint16_t *) malloc(initialSize * sizeof(uint16_t));
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	005b      	lsls	r3, r3, #1
 800d312:	4618      	mov	r0, r3
 800d314:	f003 f870 	bl	80103f8 <malloc>
 800d318:	4603      	mov	r3, r0
 800d31a:	461a      	mov	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	601a      	str	r2, [r3, #0]
	a->used = 0;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	605a      	str	r2, [r3, #4]
	a->size = initialSize;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	609a      	str	r2, [r3, #8]
}
 800d32c:	bf00      	nop
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
	a->size = newsize;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	683a      	ldr	r2, [r7, #0]
 800d342:	609a      	str	r2, [r3, #8]
	a->array = (uint16_t *) realloc(a->array, a->size * sizeof(uint16_t));
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	4619      	mov	r1, r3
 800d350:	4610      	mov	r0, r2
 800d352:	f003 fe0f 	bl	8010f74 <realloc>
 800d356:	4602      	mov	r2, r0
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	601a      	str	r2, [r3, #0]
	a->used = 0;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	605a      	str	r2, [r3, #4]
}
 800d362:	bf00      	nop
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <freeArray>:

void freeArray(Array *a) {
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
	free(a->array);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4618      	mov	r0, r3
 800d378:	f003 f846 	bl	8010408 <free>
	a->array = NULL;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
	a->used = a->size = 0;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	609a      	str	r2, [r3, #8]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	689a      	ldr	r2, [r3, #8]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	605a      	str	r2, [r3, #4]
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <string_parser>:

size_t string_parser(char *input, char ***word_array) {
 800d398:	b590      	push	{r4, r7, lr}
 800d39a:	b089      	sub	sp, #36	; 0x24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
	size_t n = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	61fb      	str	r3, [r7, #28]
	const char *p = input;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	61bb      	str	r3, [r7, #24]

	while (*p) {
 800d3aa:	e02d      	b.n	800d408 <string_parser+0x70>
		while (isspace((unsigned char )*p))
			++p;
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	61bb      	str	r3, [r7, #24]
		while (isspace((unsigned char )*p))
 800d3b2:	f003 f813 	bl	80103dc <__locale_ctype_ptr>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	4413      	add	r3, r2
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	f003 0308 	and.w	r3, r3, #8
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1f0      	bne.n	800d3ac <string_parser+0x14>
		n += *p != '\0';
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bf14      	ite	ne
 800d3d2:	2301      	movne	r3, #1
 800d3d4:	2300      	moveq	r3, #0
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	461a      	mov	r2, r3
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	4413      	add	r3, r2
 800d3de:	61fb      	str	r3, [r7, #28]
		while (*p && !isspace((unsigned char )*p))
 800d3e0:	e002      	b.n	800d3e8 <string_parser+0x50>
			++p;
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	61bb      	str	r3, [r7, #24]
		while (*p && !isspace((unsigned char )*p))
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00b      	beq.n	800d408 <string_parser+0x70>
 800d3f0:	f002 fff4 	bl	80103dc <__locale_ctype_ptr>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	4413      	add	r3, r2
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	f003 0308 	and.w	r3, r3, #8
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0ec      	beq.n	800d3e2 <string_parser+0x4a>
	while (*p) {
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1d0      	bne.n	800d3b2 <string_parser+0x1a>
	}

	if (n) {
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d062      	beq.n	800d4dc <string_parser+0x144>
		size_t i = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]

		*word_array = (char**) malloc(n * sizeof(char *));
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4618      	mov	r0, r3
 800d420:	f002 ffea 	bl	80103f8 <malloc>
 800d424:	4603      	mov	r3, r0
 800d426:	461a      	mov	r2, r3
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	601a      	str	r2, [r3, #0]

		p = input;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	61bb      	str	r3, [r7, #24]

		while (*p) {
 800d430:	e050      	b.n	800d4d4 <string_parser+0x13c>
			while (isspace((unsigned char )*p))
				++p;
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	3301      	adds	r3, #1
 800d436:	61bb      	str	r3, [r7, #24]
			while (isspace((unsigned char )*p))
 800d438:	f002 ffd0 	bl	80103dc <__locale_ctype_ptr>
 800d43c:	4602      	mov	r2, r0
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	3301      	adds	r3, #1
 800d444:	4413      	add	r3, r2
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	f003 0308 	and.w	r3, r3, #8
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1f0      	bne.n	800d432 <string_parser+0x9a>
			if (*p) {
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d03d      	beq.n	800d4d4 <string_parser+0x13c>
				const char *q = p;
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	613b      	str	r3, [r7, #16]
				while (*p && !isspace((unsigned char )*p))
 800d45c:	e002      	b.n	800d464 <string_parser+0xcc>
					++p;
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	3301      	adds	r3, #1
 800d462:	61bb      	str	r3, [r7, #24]
				while (*p && !isspace((unsigned char )*p))
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00b      	beq.n	800d484 <string_parser+0xec>
 800d46c:	f002 ffb6 	bl	80103dc <__locale_ctype_ptr>
 800d470:	4602      	mov	r2, r0
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	3301      	adds	r3, #1
 800d478:	4413      	add	r3, r2
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	f003 0308 	and.w	r3, r3, #8
 800d480:	2b00      	cmp	r3, #0
 800d482:	d0ec      	beq.n	800d45e <string_parser+0xc6>

				size_t length = p - q;
 800d484:	69ba      	ldr	r2, [r7, #24]
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	1ad3      	subs	r3, r2, r3
 800d48a:	60fb      	str	r3, [r7, #12]

				(*word_array)[i] = (char *) malloc(length + 1);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	18d4      	adds	r4, r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	3301      	adds	r3, #1
 800d49a:	4618      	mov	r0, r3
 800d49c:	f002 ffac 	bl	80103f8 <malloc>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	6023      	str	r3, [r4, #0]

				strncpy((*word_array)[i], q, length);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4413      	add	r3, r2
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	6939      	ldr	r1, [r7, #16]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f003 fdd5 	bl	8011064 <strncpy>
				(*word_array)[i][length] = '\0';
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	701a      	strb	r2, [r3, #0]

				++i;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	617b      	str	r3, [r7, #20]
		while (*p) {
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1ad      	bne.n	800d438 <string_parser+0xa0>
			}
		}
	}

	return n;
 800d4dc:	69fb      	ldr	r3, [r7, #28]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3724      	adds	r7, #36	; 0x24
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd90      	pop	{r4, r7, pc}

0800d4e6 <PlotData>:

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b082      	sub	sp, #8
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	6039      	str	r1, [r7, #0]
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	b291      	uxth	r1, r2
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f4 f88e 	bl	800161c <BSP_LCD_DrawPixel>
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <InitScreen>:

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]

	BSP_LCD_Clear(BackGroundColor);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7f3 fed6 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7f3 fe89 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 800d51e:	6838      	ldr	r0, [r7, #0]
 800d520:	f7f3 fe6e 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 800d524:	4803      	ldr	r0, [pc, #12]	; (800d534 <InitScreen+0x2c>)
 800d526:	f7f3 fe9d 	bl	8001264 <BSP_LCD_SetFont>
}
 800d52a:	bf00      	nop
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	20000008 	.word	0x20000008

0800d538 <LCDWrite>:

void LCDWrite(uint32_t Line, char Str[]) {
 800d538:	b580      	push	{r7, lr}
 800d53a:	b090      	sub	sp, #64	; 0x40
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
	char IntStr[50];

	BSP_LCD_ClearStringLine(Line);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7f3 fee6 	bl	8001314 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 800d548:	f107 030c 	add.w	r3, r7, #12
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	2132      	movs	r1, #50	; 0x32
 800d550:	4618      	mov	r0, r3
 800d552:	f003 fd27 	bl	8010fa4 <sniprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	b29b      	uxth	r3, r3
 800d55a:	f107 020c 	add.w	r2, r7, #12
 800d55e:	4611      	mov	r1, r2
 800d560:	4618      	mov	r0, r3
 800d562:	f7f4 f843 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
}
 800d566:	bf00      	nop
 800d568:	3740      	adds	r7, #64	; 0x40
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <CountDown>:

void CountDown(uint32_t millisecs) {
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800d578:	f04f 31ff 	mov.w	r1, #4294967295
 800d57c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d580:	f7ff ffc2 	bl	800d508 <InitScreen>

	LCDWrite(5, " ");
 800d584:	491c      	ldr	r1, [pc, #112]	; (800d5f8 <CountDown+0x88>)
 800d586:	2005      	movs	r0, #5
 800d588:	f7ff ffd6 	bl	800d538 <LCDWrite>
	DWT_Delay_us(1000);
 800d58c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d590:	f7ff fe96 	bl	800d2c0 <DWT_Delay_us>

	LCDWrite(5, "Starting in 3... ");
 800d594:	4919      	ldr	r1, [pc, #100]	; (800d5fc <CountDown+0x8c>)
 800d596:	2005      	movs	r0, #5
 800d598:	f7ff ffce 	bl	800d538 <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5a2:	fb02 f303 	mul.w	r3, r2, r3
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7ff fe8a 	bl	800d2c0 <DWT_Delay_us>

	LCDWrite(5, "Starting in 2... ");
 800d5ac:	4914      	ldr	r1, [pc, #80]	; (800d600 <CountDown+0x90>)
 800d5ae:	2005      	movs	r0, #5
 800d5b0:	f7ff ffc2 	bl	800d538 <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5ba:	fb02 f303 	mul.w	r3, r2, r3
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7ff fe7e 	bl	800d2c0 <DWT_Delay_us>

	LCDWrite(5, "Starting in 1... ");
 800d5c4:	490f      	ldr	r1, [pc, #60]	; (800d604 <CountDown+0x94>)
 800d5c6:	2005      	movs	r0, #5
 800d5c8:	f7ff ffb6 	bl	800d538 <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5d2:	fb02 f303 	mul.w	r3, r2, r3
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff fe72 	bl	800d2c0 <DWT_Delay_us>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 800d5dc:	490a      	ldr	r1, [pc, #40]	; (800d608 <CountDown+0x98>)
 800d5de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d5e2:	f7ff ff91 	bl	800d508 <InitScreen>
	LCDWrite(5, "GO!");
 800d5e6:	4909      	ldr	r1, [pc, #36]	; (800d60c <CountDown+0x9c>)
 800d5e8:	2005      	movs	r0, #5
 800d5ea:	f7ff ffa5 	bl	800d538 <LCDWrite>
}
 800d5ee:	bf00      	nop
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	0801318c 	.word	0x0801318c
 800d5fc:	08013190 	.word	0x08013190
 800d600:	080131a4 	.word	0x080131a4
 800d604:	080131b8 	.word	0x080131b8
 800d608:	ffff0000 	.word	0xffff0000
 800d60c:	080131cc 	.word	0x080131cc

0800d610 <scan_files>:

FRESULT scan_files(char* path
// Start node to be scanned, also used as work area
		) {
 800d610:	b580      	push	{r7, lr}
 800d612:	b090      	sub	sp, #64	; 0x40
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 800d618:	f107 0308 	add.w	r3, r7, #8
 800d61c:	6879      	ldr	r1, [r7, #4]
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fd fc9c 	bl	800af5c <f_opendir>
 800d624:	4603      	mov	r3, r0
 800d626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d62a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d140      	bne.n	800d6b4 <scan_files+0xa4>
		for (;;) {
			res = f_readdir(&dir, &fno); /* Read a directory item */
 800d632:	f107 0308 	add.w	r3, r7, #8
 800d636:	4922      	ldr	r1, [pc, #136]	; (800d6c0 <scan_files+0xb0>)
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fd fd28 	bl	800b08e <f_readdir>
 800d63e:	4603      	mov	r3, r0
 800d640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (res != FR_OK || fno.fname[0] == 0)
 800d644:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d12e      	bne.n	800d6aa <scan_files+0x9a>
 800d64c:	4b1c      	ldr	r3, [pc, #112]	; (800d6c0 <scan_files+0xb0>)
 800d64e:	7a5b      	ldrb	r3, [r3, #9]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d02a      	beq.n	800d6aa <scan_files+0x9a>
				break; /* Break on error or end of dir */
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 800d654:	4b1a      	ldr	r3, [pc, #104]	; (800d6c0 <scan_files+0xb0>)
 800d656:	7a1b      	ldrb	r3, [r3, #8]
 800d658:	f003 0310 	and.w	r3, r3, #16
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d01b      	beq.n	800d698 <scan_files+0x88>
				i = strlen(path);
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7f2 fddf 	bl	8000224 <strlen>
 800d666:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(&path[i], "/%s", fno.fname);
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66c:	4413      	add	r3, r2
 800d66e:	4a15      	ldr	r2, [pc, #84]	; (800d6c4 <scan_files+0xb4>)
 800d670:	4915      	ldr	r1, [pc, #84]	; (800d6c8 <scan_files+0xb8>)
 800d672:	4618      	mov	r0, r3
 800d674:	f003 fcca 	bl	801100c <siprintf>
				res = scan_files(path); /* Enter the directory */
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff ffc9 	bl	800d610 <scan_files>
 800d67e:	4603      	mov	r3, r0
 800d680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if (res != FR_OK)
 800d684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10d      	bne.n	800d6a8 <scan_files+0x98>
					break;
				path[i] = 0;
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d690:	4413      	add	r3, r2
 800d692:	2200      	movs	r2, #0
 800d694:	701a      	strb	r2, [r3, #0]
 800d696:	e7cc      	b.n	800d632 <scan_files+0x22>
			} else { /* It is a file. */
				printf("%s/%s 		%lu \r\n", path, fno.fname, fno.fsize);
 800d698:	4b09      	ldr	r3, [pc, #36]	; (800d6c0 <scan_files+0xb0>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a09      	ldr	r2, [pc, #36]	; (800d6c4 <scan_files+0xb4>)
 800d69e:	6879      	ldr	r1, [r7, #4]
 800d6a0:	480a      	ldr	r0, [pc, #40]	; (800d6cc <scan_files+0xbc>)
 800d6a2:	f003 fbeb 	bl	8010e7c <iprintf>
			res = f_readdir(&dir, &fno); /* Read a directory item */
 800d6a6:	e7c4      	b.n	800d632 <scan_files+0x22>
					break;
 800d6a8:	bf00      	nop
			}
		}
		f_closedir(&dir);
 800d6aa:	f107 0308 	add.w	r3, r7, #8
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fd fcc7 	bl	800b042 <f_closedir>
	}

	return res;
 800d6b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3740      	adds	r7, #64	; 0x40
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	20000488 	.word	0x20000488
 800d6c4:	20000491 	.word	0x20000491
 800d6c8:	080131d0 	.word	0x080131d0
 800d6cc:	080131d4 	.word	0x080131d4

0800d6d0 <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 800d6d0:	b590      	push	{r4, r7, lr}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 800d6dc:	4815      	ldr	r0, [pc, #84]	; (800d734 <SamplePoints+0x64>)
 800d6de:	f7f4 fb19 	bl	8001d14 <HAL_ADC_Start>

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	617b      	str	r3, [r7, #20]
 800d6e6:	e010      	b.n	800d70a <SamplePoints+0x3a>
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	18d4      	adds	r4, r2, r3
 800d6f2:	4810      	ldr	r0, [pc, #64]	; (800d734 <SamplePoints+0x64>)
 800d6f4:	f7f4 fbb2 	bl	8001e5c <HAL_ADC_GetValue>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	8023      	strh	r3, [r4, #0]
		DWT_Delay_us(Period_us);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7ff fdde 	bl	800d2c0 <DWT_Delay_us>
	for (i = 0; i < NoOfPoints; i++) {
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	3301      	adds	r3, #1
 800d708:	617b      	str	r3, [r7, #20]
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d3ea      	bcc.n	800d6e8 <SamplePoints+0x18>
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800d712:	f04f 31ff 	mov.w	r1, #4294967295
 800d716:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d71a:	f7ff fef5 	bl	800d508 <InitScreen>
	LCDWrite(5, "DONE!");
 800d71e:	4906      	ldr	r1, [pc, #24]	; (800d738 <SamplePoints+0x68>)
 800d720:	2005      	movs	r0, #5
 800d722:	f7ff ff09 	bl	800d538 <LCDWrite>

	printf("Sampling done.\r\n");
 800d726:	4805      	ldr	r0, [pc, #20]	; (800d73c <SamplePoints+0x6c>)
 800d728:	f003 fc1c 	bl	8010f64 <puts>
}
 800d72c:	bf00      	nop
 800d72e:	371c      	adds	r7, #28
 800d730:	46bd      	mov	sp, r7
 800d732:	bd90      	pop	{r4, r7, pc}
 800d734:	20001020 	.word	0x20001020
 800d738:	080131e4 	.word	0x080131e4
 800d73c:	080131ec 	.word	0x080131ec

0800d740 <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 800d740:	b5b0      	push	{r4, r5, r7, lr}
 800d742:	b09a      	sub	sp, #104	; 0x68
 800d744:	af02      	add	r7, sp, #8
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start averaging... \r\n");
 800d74c:	4842      	ldr	r0, [pc, #264]	; (800d858 <AvgAndPlotPoints+0x118>)
 800d74e:	f003 fc09 	bl	8010f64 <puts>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 800d752:	4942      	ldr	r1, [pc, #264]	; (800d85c <AvgAndPlotPoints+0x11c>)
 800d754:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d758:	f7ff fed6 	bl	800d508 <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800d75c:	2300      	movs	r3, #0
 800d75e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d760:	e059      	b.n	800d816 <AvgAndPlotPoints+0xd6>
		BufferSum = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	657b      	str	r3, [r7, #84]	; 0x54

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 800d766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d768:	65bb      	str	r3, [r7, #88]	; 0x58
 800d76a:	e00c      	b.n	800d786 <AvgAndPlotPoints+0x46>
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	4413      	add	r3, r2
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	461a      	mov	r2, r3
 800d77a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d77c:	4413      	add	r3, r2
 800d77e:	657b      	str	r3, [r7, #84]	; 0x54
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 800d780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d782:	3301      	adds	r3, #1
 800d784:	65bb      	str	r3, [r7, #88]	; 0x58
 800d786:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	441a      	add	r2, r3
 800d78c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d78e:	429a      	cmp	r2, r3
 800d790:	d8ec      	bhi.n	800d76c <AvgAndPlotPoints+0x2c>
		}

		BufferAvg = BufferSum / AvgSize;
 800d792:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	fbb2 f3f3 	udiv	r3, r2, r3
 800d79a:	653b      	str	r3, [r7, #80]	; 0x50

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 800d79c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d79e:	f7f2 fee1 	bl	8000564 <__aeabi_ui2d>
 800d7a2:	f04f 0200 	mov.w	r2, #0
 800d7a6:	4b2e      	ldr	r3, [pc, #184]	; (800d860 <AvgAndPlotPoints+0x120>)
 800d7a8:	f7f2 ff52 	bl	8000650 <__aeabi_dmul>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	4625      	mov	r5, r4
 800d7b2:	461c      	mov	r4, r3
 800d7b4:	68b8      	ldr	r0, [r7, #8]
 800d7b6:	f7f2 fed5 	bl	8000564 <__aeabi_ui2d>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f3 f86f 	bl	80008a4 <__aeabi_ddiv>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	460c      	mov	r4, r1
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	f7f3 fa17 	bl	8000c00 <__aeabi_d2uiz>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		YCoord = (272.0 * (BufferAvg / 65536.0));
 800d7d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d7d8:	f7f2 fec4 	bl	8000564 <__aeabi_ui2d>
 800d7dc:	f04f 0200 	mov.w	r2, #0
 800d7e0:	4b20      	ldr	r3, [pc, #128]	; (800d864 <AvgAndPlotPoints+0x124>)
 800d7e2:	f7f3 f85f 	bl	80008a4 <__aeabi_ddiv>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	460c      	mov	r4, r1
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	f04f 0200 	mov.w	r2, #0
 800d7f2:	4b1d      	ldr	r3, [pc, #116]	; (800d868 <AvgAndPlotPoints+0x128>)
 800d7f4:	f7f2 ff2c 	bl	8000650 <__aeabi_dmul>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	4621      	mov	r1, r4
 800d800:	f7f3 f9fe 	bl	8000c00 <__aeabi_d2uiz>
 800d804:	4603      	mov	r3, r0
 800d806:	64bb      	str	r3, [r7, #72]	; 0x48

		PlotData(XCoord, YCoord);
 800d808:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d80a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d80c:	f7ff fe6b 	bl	800d4e6 <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800d810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d812:	3301      	adds	r3, #1
 800d814:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d816:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d3a1      	bcc.n	800d762 <AvgAndPlotPoints+0x22>
	}

	printf("Averaging done, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d822:	4812      	ldr	r0, [pc, #72]	; (800d86c <AvgAndPlotPoints+0x12c>)
 800d824:	f003 fb2a 	bl	8010e7c <iprintf>

	LCDWrite(0, "");
 800d828:	4911      	ldr	r1, [pc, #68]	; (800d870 <AvgAndPlotPoints+0x130>)
 800d82a:	2000      	movs	r0, #0
 800d82c:	f7ff fe84 	bl	800d538 <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 800d830:	f107 0014 	add.w	r0, r7, #20
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	4a0e      	ldr	r2, [pc, #56]	; (800d874 <AvgAndPlotPoints+0x134>)
 800d83c:	2132      	movs	r1, #50	; 0x32
 800d83e:	f003 fbb1 	bl	8010fa4 <sniprintf>
	LCDWrite(0, MyStr);
 800d842:	f107 0314 	add.w	r3, r7, #20
 800d846:	4619      	mov	r1, r3
 800d848:	2000      	movs	r0, #0
 800d84a:	f7ff fe75 	bl	800d538 <LCDWrite>
}
 800d84e:	bf00      	nop
 800d850:	3760      	adds	r7, #96	; 0x60
 800d852:	46bd      	mov	sp, r7
 800d854:	bdb0      	pop	{r4, r5, r7, pc}
 800d856:	bf00      	nop
 800d858:	080131fc 	.word	0x080131fc
 800d85c:	ffff0000 	.word	0xffff0000
 800d860:	407e0000 	.word	0x407e0000
 800d864:	40f00000 	.word	0x40f00000
 800d868:	40710000 	.word	0x40710000
 800d86c:	08013214 	.word	0x08013214
 800d870:	08013240 	.word	0x08013240
 800d874:	08013244 	.word	0x08013244

0800d878 <WriteData2FS>:

void WriteData2FS(Array *Data, uint32_t NoOfPoints, uint32_t MeasNo) {
 800d878:	b580      	push	{r7, lr}
 800d87a:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
 800d87e:	af00      	add	r7, sp, #0
 800d880:	f107 030c 	add.w	r3, r7, #12
 800d884:	6018      	str	r0, [r3, #0]
 800d886:	f107 0308 	add.w	r3, r7, #8
 800d88a:	6019      	str	r1, [r3, #0]
 800d88c:	1d3b      	adds	r3, r7, #4
 800d88e:	601a      	str	r2, [r3, #0]

	// Create file for data, as meas#.txt

	FRESULT res; // FatFs function common result code
	uint32_t byteswritten, totalbytes; //File write counts
	char buffer[1000] = " ";
 800d890:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800d894:	2220      	movs	r2, #32
 800d896:	601a      	str	r2, [r3, #0]
 800d898:	3304      	adds	r3, #4
 800d89a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d89e:	2100      	movs	r1, #0
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f002 fdcb 	bl	801043c <memset>

	char* fname = (char *) (sprintf("meas_%lu.txt", (char *) MeasNo));
 800d8a6:	1d3b      	adds	r3, r7, #4
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	483b      	ldr	r0, [pc, #236]	; (800d99c <WriteData2FS+0x124>)
 800d8ae:	f003 fbad 	bl	801100c <siprintf>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
	FIL MyFile;
	uint32_t idx;

	totalbytes = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c

	if (f_open(&MyFile, fname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800d8be:	f107 0314 	add.w	r3, r7, #20
 800d8c2:	220a      	movs	r2, #10
 800d8c4:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fc fe2d 	bl	800a528 <f_open>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d004      	beq.n	800d8de <WriteData2FS+0x66>

		// File Open for write Error
		_Error_Handler(__FILE__, __LINE__);
 800d8d4:	21d9      	movs	r1, #217	; 0xd9
 800d8d6:	4832      	ldr	r0, [pc, #200]	; (800d9a0 <WriteData2FS+0x128>)
 800d8d8:	f001 fb7a 	bl	800efd0 <_Error_Handler>
		/*##-6- Close the open text file #################################*/
		f_close(&MyFile);

		printf("Closed file %s OK \r\n", fname);
	}
}
 800d8dc:	e059      	b.n	800d992 <WriteData2FS+0x11a>
		printf("Opened file %s OK \r\n", fname);
 800d8de:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d8e2:	4830      	ldr	r0, [pc, #192]	; (800d9a4 <WriteData2FS+0x12c>)
 800d8e4:	f003 faca 	bl	8010e7c <iprintf>
		for (idx = 0; idx < NoOfPoints; idx++) {
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 800d8ee:	e038      	b.n	800d962 <WriteData2FS+0xea>
			sprintf(buffer, "%lu \r\n", ((uint32_t) Data->array[idx]));
 800d8f0:	f107 030c 	add.w	r3, r7, #12
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800d8fc:	005b      	lsls	r3, r3, #1
 800d8fe:	4413      	add	r3, r2
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	461a      	mov	r2, r3
 800d904:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800d908:	4927      	ldr	r1, [pc, #156]	; (800d9a8 <WriteData2FS+0x130>)
 800d90a:	4618      	mov	r0, r3
 800d90c:	f003 fb7e 	bl	801100c <siprintf>
			res = f_write(&MyFile, buffer, strlen(buffer),
 800d910:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800d914:	4618      	mov	r0, r3
 800d916:	f7f2 fc85 	bl	8000224 <strlen>
 800d91a:	4602      	mov	r2, r0
 800d91c:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 800d920:	f507 7111 	add.w	r1, r7, #580	; 0x244
 800d924:	f107 0014 	add.w	r0, r7, #20
 800d928:	f7fd f8fb 	bl	800ab22 <f_write>
 800d92c:	4603      	mov	r3, r0
 800d92e:	f887 3633 	strb.w	r3, [r7, #1587]	; 0x633
			totalbytes += byteswritten;
 800d932:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800d936:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 800d93a:	4413      	add	r3, r2
 800d93c:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
			if ((byteswritten == 0) || (res != FR_OK)) {
 800d940:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <WriteData2FS+0xd8>
 800d948:	f897 3633 	ldrb.w	r3, [r7, #1587]	; 0x633
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d003      	beq.n	800d958 <WriteData2FS+0xe0>
				_Error_Handler(__FILE__, __LINE__);
 800d950:	21e5      	movs	r1, #229	; 0xe5
 800d952:	4813      	ldr	r0, [pc, #76]	; (800d9a0 <WriteData2FS+0x128>)
 800d954:	f001 fb3c 	bl	800efd0 <_Error_Handler>
		for (idx = 0; idx < NoOfPoints; idx++) {
 800d958:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800d95c:	3301      	adds	r3, #1
 800d95e:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 800d962:	f107 0308 	add.w	r3, r7, #8
 800d966:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d3bf      	bcc.n	800d8f0 <WriteData2FS+0x78>
		printf("File %s, %lu bytes written \r\n", fname, totalbytes);
 800d970:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 800d974:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d978:	480c      	ldr	r0, [pc, #48]	; (800d9ac <WriteData2FS+0x134>)
 800d97a:	f003 fa7f 	bl	8010e7c <iprintf>
		f_close(&MyFile);
 800d97e:	f107 0314 	add.w	r3, r7, #20
 800d982:	4618      	mov	r0, r3
 800d984:	f7fd fac0 	bl	800af08 <f_close>
		printf("Closed file %s OK \r\n", fname);
 800d988:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d98c:	4808      	ldr	r0, [pc, #32]	; (800d9b0 <WriteData2FS+0x138>)
 800d98e:	f003 fa75 	bl	8010e7c <iprintf>
}
 800d992:	bf00      	nop
 800d994:	f507 67c8 	add.w	r7, r7, #1600	; 0x640
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	0801325c 	.word	0x0801325c
 800d9a0:	0801326c 	.word	0x0801326c
 800d9a4:	08013280 	.word	0x08013280
 800d9a8:	08013298 	.word	0x08013298
 800d9ac:	080132a0 	.word	0x080132a0
 800d9b0:	080132c0 	.word	0x080132c0

0800d9b4 <DirList>:

void DirList(void) {
 800d9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9b6:	f5ad 7d55 	sub.w	sp, sp, #852	; 0x354
 800d9ba:	af02      	add	r7, sp, #8
	FATFS fs;
	FRESULT res;
	char buff[256];

	// Should be mounted already
	res = f_mount(&fs, "", 1);
 800d9bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	493e      	ldr	r1, [pc, #248]	; (800dabc <DirList+0x108>)
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fc fd69 	bl	800a49c <f_mount>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	if (res == FR_OK) {
 800d9d0:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d163      	bne.n	800daa0 <DirList+0xec>
		strcpy(buff, "1://");
 800d9d8:	f107 030c 	add.w	r3, r7, #12
 800d9dc:	4a38      	ldr	r2, [pc, #224]	; (800dac0 <DirList+0x10c>)
 800d9de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9e2:	6018      	str	r0, [r3, #0]
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	7019      	strb	r1, [r3, #0]

		// File list
		res = scan_files(buff);
 800d9e8:	f107 030c 	add.w	r3, r7, #12
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7ff fe0f 	bl	800d610 <scan_files>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		// Disk free space
		DWORD fre_clust, fre_sect, tot_sect;
		FATFS *fsp;

		// Get volume information and free clusters of drive 1
		res = f_getfree(buff, &fre_clust, &fsp);
 800d9f8:	1d3a      	adds	r2, r7, #4
 800d9fa:	f107 0108 	add.w	r1, r7, #8
 800d9fe:	f107 030c 	add.w	r3, r7, #12
 800da02:	4618      	mov	r0, r3
 800da04:	f7fd fb80 	bl	800b108 <f_getfree>
 800da08:	4603      	mov	r3, r0
 800da0a:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		if (res) {
 800da0e:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 800da12:	2b00      	cmp	r3, #0
 800da14:	d007      	beq.n	800da26 <DirList+0x72>
			printf("Error: Filesystem free space check failed \r\n");
 800da16:	482b      	ldr	r0, [pc, #172]	; (800dac4 <DirList+0x110>)
 800da18:	f003 faa4 	bl	8010f64 <puts>
			_Error_Handler(__FILE__, __LINE__);
 800da1c:	f44f 7184 	mov.w	r1, #264	; 0x108
 800da20:	4829      	ldr	r0, [pc, #164]	; (800dac8 <DirList+0x114>)
 800da22:	f001 fad5 	bl	800efd0 <_Error_Handler>
		}

		// Get total sectors and free sectors
		tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 800da26:	1d3b      	adds	r3, r7, #4
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	695b      	ldr	r3, [r3, #20]
 800da2c:	3b02      	subs	r3, #2
 800da2e:	1d3a      	adds	r2, r7, #4
 800da30:	6812      	ldr	r2, [r2, #0]
 800da32:	8952      	ldrh	r2, [r2, #10]
 800da34:	fb02 f303 	mul.w	r3, r2, r3
 800da38:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
		fre_sect = fre_clust * fsp->csize;
 800da3c:	1d3b      	adds	r3, r7, #4
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	895b      	ldrh	r3, [r3, #10]
 800da42:	461a      	mov	r2, r3
 800da44:	f107 0308 	add.w	r3, r7, #8
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	fb03 f302 	mul.w	r3, r3, r2
 800da4e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c

		// Print the free space (assuming 512 bytes/sector)
		printf(
 800da52:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800da56:	085d      	lsrs	r5, r3, #1
 800da58:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800da5c:	085e      	lsrs	r6, r3, #1
				"%10lu KiB total drive space.\n%10lu KiB available (%.2f\%%). \n",
				tot_sect / 2, fre_sect / 2,
				(((float) (fre_sect)) / ((float) (tot_sect)) * 100.0));
 800da5e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800da62:	ee07 3a90 	vmov	s15, r3
 800da66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da6a:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800da6e:	ee07 3a90 	vmov	s15, r3
 800da72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800da7a:	ee16 0a90 	vmov	r0, s13
 800da7e:	f7f2 fd93 	bl	80005a8 <__aeabi_f2d>
		printf(
 800da82:	f04f 0200 	mov.w	r2, #0
 800da86:	4b11      	ldr	r3, [pc, #68]	; (800dacc <DirList+0x118>)
 800da88:	f7f2 fde2 	bl	8000650 <__aeabi_dmul>
 800da8c:	4603      	mov	r3, r0
 800da8e:	460c      	mov	r4, r1
 800da90:	e88d 0018 	stmia.w	sp, {r3, r4}
 800da94:	4632      	mov	r2, r6
 800da96:	4629      	mov	r1, r5
 800da98:	480d      	ldr	r0, [pc, #52]	; (800dad0 <DirList+0x11c>)
 800da9a:	f003 f9ef 	bl	8010e7c <iprintf>

	} else {
		printf("Error: Filesystem mount failed \r\n");
		_Error_Handler(__FILE__, __LINE__);
	}
}
 800da9e:	e007      	b.n	800dab0 <DirList+0xfc>
		printf("Error: Filesystem mount failed \r\n");
 800daa0:	480c      	ldr	r0, [pc, #48]	; (800dad4 <DirList+0x120>)
 800daa2:	f003 fa5f 	bl	8010f64 <puts>
		_Error_Handler(__FILE__, __LINE__);
 800daa6:	f240 1117 	movw	r1, #279	; 0x117
 800daaa:	4807      	ldr	r0, [pc, #28]	; (800dac8 <DirList+0x114>)
 800daac:	f001 fa90 	bl	800efd0 <_Error_Handler>
}
 800dab0:	bf00      	nop
 800dab2:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daba:	bf00      	nop
 800dabc:	08013240 	.word	0x08013240
 800dac0:	080132d8 	.word	0x080132d8
 800dac4:	080132e0 	.word	0x080132e0
 800dac8:	0801326c 	.word	0x0801326c
 800dacc:	40590000 	.word	0x40590000
 800dad0:	0801330c 	.word	0x0801330c
 800dad4:	0801334c 	.word	0x0801334c

0800dad8 <SCB_EnableICache>:
{
 800dad8:	b480      	push	{r7}
 800dada:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800dadc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dae0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800dae4:	4b09      	ldr	r3, [pc, #36]	; (800db0c <SCB_EnableICache+0x34>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800daec:	4a07      	ldr	r2, [pc, #28]	; (800db0c <SCB_EnableICache+0x34>)
 800daee:	4b07      	ldr	r3, [pc, #28]	; (800db0c <SCB_EnableICache+0x34>)
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800daf6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800daf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dafc:	f3bf 8f6f 	isb	sy
}
 800db00:	bf00      	nop
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	e000ed00 	.word	0xe000ed00

0800db10 <SCB_EnableDCache>:
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800db16:	4b1d      	ldr	r3, [pc, #116]	; (800db8c <SCB_EnableDCache+0x7c>)
 800db18:	2200      	movs	r2, #0
 800db1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800db1e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800db22:	4b1a      	ldr	r3, [pc, #104]	; (800db8c <SCB_EnableDCache+0x7c>)
 800db24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db28:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	0b5b      	lsrs	r3, r3, #13
 800db2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800db32:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	08db      	lsrs	r3, r3, #3
 800db38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db3c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800db3e:	4913      	ldr	r1, [pc, #76]	; (800db8c <SCB_EnableDCache+0x7c>)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	015a      	lsls	r2, r3, #5
 800db44:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800db48:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800db4e:	4313      	orrs	r3, r2
 800db50:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	1e5a      	subs	r2, r3, #1
 800db58:	60ba      	str	r2, [r7, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1ef      	bne.n	800db3e <SCB_EnableDCache+0x2e>
    } while(sets--);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	1e5a      	subs	r2, r3, #1
 800db62:	60fa      	str	r2, [r7, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1e5      	bne.n	800db34 <SCB_EnableDCache+0x24>
 800db68:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800db6c:	4a07      	ldr	r2, [pc, #28]	; (800db8c <SCB_EnableDCache+0x7c>)
 800db6e:	4b07      	ldr	r3, [pc, #28]	; (800db8c <SCB_EnableDCache+0x7c>)
 800db70:	695b      	ldr	r3, [r3, #20]
 800db72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db76:	6153      	str	r3, [r2, #20]
 800db78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800db7c:	f3bf 8f6f 	isb	sy
}
 800db80:	bf00      	nop
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr
 800db8c:	e000ed00 	.word	0xe000ed00

0800db90 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 800db90:	b5b0      	push	{r4, r5, r7, lr}
 800db92:	b0d6      	sub	sp, #344	; 0x158
 800db94:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 800db96:	4bb8      	ldr	r3, [pc, #736]	; (800de78 <main+0x2e8>)
 800db98:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 800db9c:	461d      	mov	r5, r3
 800db9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dba6:	682b      	ldr	r3, [r5, #0]
 800dba8:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100]; /* File read buffer */

	/* USER CODE END 1 */

	/* Enable I-Cache-------------------------------------------------------------*/
	SCB_EnableICache();
 800dbaa:	f7ff ff95 	bl	800dad8 <SCB_EnableICache>

	/* Enable D-Cache-------------------------------------------------------------*/
	SCB_EnableDCache();
 800dbae:	f7ff ffaf 	bl	800db10 <SCB_EnableDCache>

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800dbb2:	f7f4 f80d 	bl	8001bd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800dbb6:	f000 fb37 	bl	800e228 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800dbba:	f000 fe4f 	bl	800e85c <MX_GPIO_Init>
	MX_DMA_Init();
 800dbbe:	f000 fd95 	bl	800e6ec <MX_DMA_Init>
	MX_FMC_Init();
 800dbc2:	f000 fdff 	bl	800e7c4 <MX_FMC_Init>
	MX_ADC3_Init();
 800dbc6:	f000 fbdd 	bl	800e384 <MX_ADC3_Init>
	MX_USART1_UART_Init();
 800dbca:	f000 fd5b 	bl	800e684 <MX_USART1_UART_Init>
	MX_LTDC_Init();
 800dbce:	f000 fcd7 	bl	800e580 <MX_LTDC_Init>
	MX_FATFS_Init();
 800dbd2:	f7ff fb5b 	bl	800d28c <MX_FATFS_Init>
	MX_I2C3_Init();
 800dbd6:	f000 fc89 	bl	800e4ec <MX_I2C3_Init>
	MX_DMA2D_Init();
 800dbda:	f000 fc4d 	bl	800e478 <MX_DMA2D_Init>
	MX_CRC_Init();
 800dbde:	f000 fc23 	bl	800e428 <MX_CRC_Init>
	MX_USB_DEVICE_Init();
 800dbe2:	f001 fe2b 	bl	800f83c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	// Start SDRAM
	FMC_SDRAM_CommandTypeDef hsdram1Command;
	BSP_SDRAM_Initialization_Sequence(&hsdram1, &hsdram1Command);
 800dbe6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dbea:	4619      	mov	r1, r3
 800dbec:	48a3      	ldr	r0, [pc, #652]	; (800de7c <main+0x2ec>)
 800dbee:	f7ff fabf 	bl	800d170 <BSP_SDRAM_Initialization_Sequence>

	// Start LCD
	BSP_LCD_Init();
 800dbf2:	f7f3 f9fd 	bl	8000ff0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800dbf6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	f7f3 fa90 	bl	8001120 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800dc00:	2000      	movs	r0, #0
 800dc02:	f7f3 faed 	bl	80011e0 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800dc06:	f7f3 fdcb 	bl	80017a0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800dc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0e:	f7f3 fb59 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800dc12:	f04f 30ff 	mov.w	r0, #4294967295
 800dc16:	f7f3 fb0b 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800dc1a:	4899      	ldr	r0, [pc, #612]	; (800de80 <main+0x2f0>)
 800dc1c:	f7f3 faf0 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 1!");
 800dc20:	4998      	ldr	r1, [pc, #608]	; (800de84 <main+0x2f4>)
 800dc22:	2005      	movs	r0, #5
 800dc24:	f7f3 fce2 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800dc28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800dc2c:	f7f4 f80c 	bl	8001c48 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 800dc30:	4893      	ldr	r0, [pc, #588]	; (800de80 <main+0x2f0>)
 800dc32:	f7f3 fb47 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800dc36:	4892      	ldr	r0, [pc, #584]	; (800de80 <main+0x2f0>)
 800dc38:	f7f3 fafa 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800dc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc40:	f7f3 fade 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 2!");
 800dc44:	4990      	ldr	r1, [pc, #576]	; (800de88 <main+0x2f8>)
 800dc46:	2005      	movs	r0, #5
 800dc48:	f7f3 fcd0 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800dc4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800dc50:	f7f3 fffa 	bl	8001c48 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800dc54:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dc58:	f7f3 fb34 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800dc5c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dc60:	f7f3 fae6 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800dc64:	f04f 30ff 	mov.w	r0, #4294967295
 800dc68:	f7f3 faca 	bl	8001200 <BSP_LCD_SetTextColor>

	if (DWT_Delay_Init()) {
 800dc6c:	f7ff fade 	bl	800d22c <DWT_Delay_Init>
	}

	/* USER CODE START 2 */

	/*##-1- Link the SDRAM disk I/O driver ##################################*/
	if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
 800dc70:	4986      	ldr	r1, [pc, #536]	; (800de8c <main+0x2fc>)
 800dc72:	4887      	ldr	r0, [pc, #540]	; (800de90 <main+0x300>)
 800dc74:	f7fd ff76 	bl	800bb64 <FATFS_LinkDriver>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f040 8098 	bne.w	800ddb0 <main+0x220>
		printf("SDRAM FATFS link Success 1. \r\n");
 800dc80:	4884      	ldr	r0, [pc, #528]	; (800de94 <main+0x304>)
 800dc82:	f003 f96f 	bl	8010f64 <puts>
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 800dc86:	2200      	movs	r2, #0
 800dc88:	4980      	ldr	r1, [pc, #512]	; (800de8c <main+0x2fc>)
 800dc8a:	4883      	ldr	r0, [pc, #524]	; (800de98 <main+0x308>)
 800dc8c:	f7fc fc06 	bl	800a49c <f_mount>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d004      	beq.n	800dca0 <main+0x110>
			/* FatFs Initialization Error */
			_Error_Handler(__FILE__, __LINE__);
 800dc96:	21ce      	movs	r1, #206	; 0xce
 800dc98:	4880      	ldr	r0, [pc, #512]	; (800de9c <main+0x30c>)
 800dc9a:	f001 f999 	bl	800efd0 <_Error_Handler>
 800dc9e:	e087      	b.n	800ddb0 <main+0x220>
		} else {
			printf("SDRAM FATFS mount Success 2. \r\n");
 800dca0:	487f      	ldr	r0, [pc, #508]	; (800dea0 <main+0x310>)
 800dca2:	f003 f95f 	bl	8010f64 <puts>
			/*##-3- Create a FAT file system (format) on the logical drive #########*/
			/* WARNING: Formatting the uSD card will delete all content on the device */
			if (f_mkfs((TCHAR const*) SDRAMPath, FM_FAT32, 0, workBuffer,
 800dca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	4b7d      	ldr	r3, [pc, #500]	; (800dea4 <main+0x314>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	2102      	movs	r1, #2
 800dcb2:	4876      	ldr	r0, [pc, #472]	; (800de8c <main+0x2fc>)
 800dcb4:	f7fd fade 	bl	800b274 <f_mkfs>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d004      	beq.n	800dcc8 <main+0x138>
					sizeof(workBuffer)) != FR_OK) {
				/* FatFs Format Error */
				_Error_Handler(__FILE__, __LINE__);
 800dcbe:	21d6      	movs	r1, #214	; 0xd6
 800dcc0:	4876      	ldr	r0, [pc, #472]	; (800de9c <main+0x30c>)
 800dcc2:	f001 f985 	bl	800efd0 <_Error_Handler>
 800dcc6:	e073      	b.n	800ddb0 <main+0x220>
			} else {
				printf("SDRAM FATFS format Success 3. \r\n");
 800dcc8:	4877      	ldr	r0, [pc, #476]	; (800dea8 <main+0x318>)
 800dcca:	f003 f94b 	bl	8010f64 <puts>
				/*##-4- Create and Open a new text file object with write access #####*/
				if (f_open(&MyFile, "1:\\STM32.TXT",
 800dcce:	220a      	movs	r2, #10
 800dcd0:	4976      	ldr	r1, [pc, #472]	; (800deac <main+0x31c>)
 800dcd2:	4877      	ldr	r0, [pc, #476]	; (800deb0 <main+0x320>)
 800dcd4:	f7fc fc28 	bl	800a528 <f_open>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d004      	beq.n	800dce8 <main+0x158>
						FA_CREATE_ALWAYS | FA_WRITE)
						!= FR_OK) {
					/* 'STM32.TXT' file Open for write Error */
					_Error_Handler(__FILE__, __LINE__);
 800dcde:	21de      	movs	r1, #222	; 0xde
 800dce0:	486e      	ldr	r0, [pc, #440]	; (800de9c <main+0x30c>)
 800dce2:	f001 f975 	bl	800efd0 <_Error_Handler>
 800dce6:	e063      	b.n	800ddb0 <main+0x220>
				} else {
					printf("SDRAM FATFS fopen Success 4. \r\n");
 800dce8:	4872      	ldr	r0, [pc, #456]	; (800deb4 <main+0x324>)
 800dcea:	f003 f93b 	bl	8010f64 <puts>
					/*##-5- Write data to the text file ################################*/
					res = f_write(&MyFile, wtext, sizeof(wtext),
 800dcee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800dcf2:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 800dcf6:	2221      	movs	r2, #33	; 0x21
 800dcf8:	486d      	ldr	r0, [pc, #436]	; (800deb0 <main+0x320>)
 800dcfa:	f7fc ff12 	bl	800ab22 <f_write>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
							(void *) &byteswritten);

					if ((byteswritten == 0) || (res != FR_OK)) {
 800dd04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <main+0x184>
 800dd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d004      	beq.n	800dd1e <main+0x18e>
						/* 'STM32.TXT' file Write or EOF Error */
						_Error_Handler(__FILE__, __LINE__);
 800dd14:	21e7      	movs	r1, #231	; 0xe7
 800dd16:	4861      	ldr	r0, [pc, #388]	; (800de9c <main+0x30c>)
 800dd18:	f001 f95a 	bl	800efd0 <_Error_Handler>
 800dd1c:	e048      	b.n	800ddb0 <main+0x220>
					} else {
						printf("SDRAM FATFS write Success 5. \r\n");
 800dd1e:	4866      	ldr	r0, [pc, #408]	; (800deb8 <main+0x328>)
 800dd20:	f003 f920 	bl	8010f64 <puts>
						/*##-6- Close the open text file #################################*/
						f_close(&MyFile);
 800dd24:	4862      	ldr	r0, [pc, #392]	; (800deb0 <main+0x320>)
 800dd26:	f7fd f8ef 	bl	800af08 <f_close>
						printf("SDRAM FATFS fclose Success 6. \r\n");
 800dd2a:	4864      	ldr	r0, [pc, #400]	; (800debc <main+0x32c>)
 800dd2c:	f003 f91a 	bl	8010f64 <puts>

						/*##-7- Open the text file object with read access ###############*/
						if (f_open(&MyFile, "1:\\STM32.TXT", FA_READ)
 800dd30:	2201      	movs	r2, #1
 800dd32:	495e      	ldr	r1, [pc, #376]	; (800deac <main+0x31c>)
 800dd34:	485e      	ldr	r0, [pc, #376]	; (800deb0 <main+0x320>)
 800dd36:	f7fc fbf7 	bl	800a528 <f_open>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d004      	beq.n	800dd4a <main+0x1ba>
								!= FR_OK) {
							/* 'STM32.TXT' file Open for read Error */
							_Error_Handler(__FILE__, __LINE__);
 800dd40:	21f2      	movs	r1, #242	; 0xf2
 800dd42:	4856      	ldr	r0, [pc, #344]	; (800de9c <main+0x30c>)
 800dd44:	f001 f944 	bl	800efd0 <_Error_Handler>
 800dd48:	e032      	b.n	800ddb0 <main+0x220>
						} else {
							printf("SDRAM FATFS fopen(read) Success 7. \r\n");
 800dd4a:	485d      	ldr	r0, [pc, #372]	; (800dec0 <main+0x330>)
 800dd4c:	f003 f90a 	bl	8010f64 <puts>
							/*##-8- Read data from the text file ###########################*/
							res = f_read(&MyFile, rtext, sizeof(rtext),
 800dd50:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800dd54:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800dd58:	2264      	movs	r2, #100	; 0x64
 800dd5a:	4855      	ldr	r0, [pc, #340]	; (800deb0 <main+0x320>)
 800dd5c:	f7fc fda2 	bl	800a8a4 <f_read>
 800dd60:	4603      	mov	r3, r0
 800dd62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
									(UINT*) &bytesread);

							if ((bytesread == 0) || (res != FR_OK)) {
 800dd66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d003      	beq.n	800dd76 <main+0x1e6>
 800dd6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d004      	beq.n	800dd80 <main+0x1f0>
								/* 'STM32.TXT' file Read or EOF Error */
								_Error_Handler(__FILE__, __LINE__);
 800dd76:	21fb      	movs	r1, #251	; 0xfb
 800dd78:	4848      	ldr	r0, [pc, #288]	; (800de9c <main+0x30c>)
 800dd7a:	f001 f929 	bl	800efd0 <_Error_Handler>
 800dd7e:	e017      	b.n	800ddb0 <main+0x220>
							} else {
								printf("SDRAM FATFS read Success 8. \r\n");
 800dd80:	4850      	ldr	r0, [pc, #320]	; (800dec4 <main+0x334>)
 800dd82:	f003 f8ef 	bl	8010f64 <puts>
								/*##-9- Close the open text file #############################*/
								f_close(&MyFile);
 800dd86:	484a      	ldr	r0, [pc, #296]	; (800deb0 <main+0x320>)
 800dd88:	f7fd f8be 	bl	800af08 <f_close>
								printf("SDRAM FATFS fclose Success 9. \r\n");
 800dd8c:	484e      	ldr	r0, [pc, #312]	; (800dec8 <main+0x338>)
 800dd8e:	f003 f8e9 	bl	8010f64 <puts>
								/*##-10- Compare read data with the expected data ############*/
								if ((bytesread != byteswritten)) {
 800dd92:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800dd96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d005      	beq.n	800ddaa <main+0x21a>
									/* Read data is different from the expected data */
									_Error_Handler(__FILE__, __LINE__);
 800dd9e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800dda2:	483e      	ldr	r0, [pc, #248]	; (800de9c <main+0x30c>)
 800dda4:	f001 f914 	bl	800efd0 <_Error_Handler>
 800dda8:	e002      	b.n	800ddb0 <main+0x220>
								} else {
									/* Success of the demo: no error occurrence */
									printf("SDRAM FATFS Success 10. \r\n");
 800ddaa:	4848      	ldr	r0, [pc, #288]	; (800decc <main+0x33c>)
 800ddac:	f003 f8da 	bl	8010f64 <puts>
				}
			}
		}
	}

	DirList();
 800ddb0:	f7ff fe00 	bl	800d9b4 <DirList>

	char Arg[30];
	char Cmd[30];
	char CmdBuffer[30];

	size_t n = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint32_t MeasNo = 0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	uint32_t NoOfPoints = 19200;
 800ddc0:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800ddc4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	uint32_t AvgSize = 10;
 800ddc8:	230a      	movs	r3, #10
 800ddca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint32_t Period_us = 100;
 800ddce:	2364      	movs	r3, #100	; 0x64
 800ddd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	uint32_t Count_ms = 1000;
 800ddd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ddd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	// Clear screen, set it up
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800dddc:	f04f 31ff 	mov.w	r1, #4294967295
 800dde0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dde4:	f7ff fb90 	bl	800d508 <InitScreen>

	// Initialize data storage
	// https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
	Array Data;
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 800dde8:	f107 0318 	add.w	r3, r7, #24
 800ddec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff fa87 	bl	800d304 <initArray>

	// LCDWrite(5, "Ready.");

	Cmd[0] = '\0';
 800ddf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	701a      	strb	r2, [r3, #0]
	Arg[0] = '\0';
 800ddfe:	2300      	movs	r3, #0
 800de00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 800de04:	e1c6      	b.n	800e194 <main+0x604>

		printf(
				"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
						"Sampling will take apprx %f secs \r\n", NoOfPoints,
				AvgSize, Period_us, Count_ms,
				((float) (NoOfPoints * Period_us / 1000000.0)));
 800de06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800de0a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800de0e:	fb02 f303 	mul.w	r3, r2, r3
 800de12:	4618      	mov	r0, r3
 800de14:	f7f2 fba6 	bl	8000564 <__aeabi_ui2d>
 800de18:	a315      	add	r3, pc, #84	; (adr r3, 800de70 <main+0x2e0>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	f7f2 fd41 	bl	80008a4 <__aeabi_ddiv>
 800de22:	4603      	mov	r3, r0
 800de24:	460c      	mov	r4, r1
 800de26:	4618      	mov	r0, r3
 800de28:	4621      	mov	r1, r4
 800de2a:	f7f2 ff09 	bl	8000c40 <__aeabi_d2f>
 800de2e:	4603      	mov	r3, r0
		printf(
 800de30:	4618      	mov	r0, r3
 800de32:	f7f2 fbb9 	bl	80005a8 <__aeabi_f2d>
 800de36:	4603      	mov	r3, r0
 800de38:	460c      	mov	r4, r1
 800de3a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800de3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800de48:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800de4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800de50:	481f      	ldr	r0, [pc, #124]	; (800ded0 <main+0x340>)
 800de52:	f003 f813 	bl	8010e7c <iprintf>

		Cmd[0] = '\0';
 800de56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800de5a:	2200      	movs	r2, #0
 800de5c:	701a      	strb	r2, [r3, #0]
		Arg[0] = '\0';
 800de5e:	2300      	movs	r3, #0
 800de60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

		strcpy(CmdBuffer, " ");
 800de64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de68:	2220      	movs	r2, #32
 800de6a:	801a      	strh	r2, [r3, #0]
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 800de6c:	e037      	b.n	800dede <main+0x34e>
 800de6e:	bf00      	nop
 800de70:	00000000 	.word	0x00000000
 800de74:	412e8480 	.word	0x412e8480
 800de78:	08013680 	.word	0x08013680
 800de7c:	2000134c 	.word	0x2000134c
 800de80:	ff0000ff 	.word	0xff0000ff
 800de84:	08013370 	.word	0x08013370
 800de88:	08013388 	.word	0x08013388
 800de8c:	200010d8 	.word	0x200010d8
 800de90:	08016190 	.word	0x08016190
 800de94:	080133a0 	.word	0x080133a0
 800de98:	20001380 	.word	0x20001380
 800de9c:	080133c0 	.word	0x080133c0
 800dea0:	080133d0 	.word	0x080133d0
 800dea4:	20000e20 	.word	0x20000e20
 800dea8:	080133f0 	.word	0x080133f0
 800deac:	08013410 	.word	0x08013410
 800deb0:	200010dc 	.word	0x200010dc
 800deb4:	08013420 	.word	0x08013420
 800deb8:	08013440 	.word	0x08013440
 800debc:	08013460 	.word	0x08013460
 800dec0:	08013480 	.word	0x08013480
 800dec4:	080134a8 	.word	0x080134a8
 800dec8:	080134c8 	.word	0x080134c8
 800decc:	080134e8 	.word	0x080134e8
 800ded0:	08013504 	.word	0x08013504
			String_GetString((uint8_t *) CmdBuffer);
 800ded4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff f827 	bl	800cf2c <String_GetString>
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 800dede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dee2:	49bf      	ldr	r1, [pc, #764]	; (800e1e0 <main+0x650>)
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7f2 f993 	bl	8000210 <strcmp>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d0f1      	beq.n	800ded4 <main+0x344>
 800def0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d0ec      	beq.n	800ded4 <main+0x344>
		}

		printf("\r\n I got %s \r\n", CmdBuffer);
 800defa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800defe:	4619      	mov	r1, r3
 800df00:	48b8      	ldr	r0, [pc, #736]	; (800e1e4 <main+0x654>)
 800df02:	f002 ffbb 	bl	8010e7c <iprintf>

		// Parse command and possible numeric arg
		char s[] = "Initial string";
 800df06:	f107 0308 	add.w	r3, r7, #8
 800df0a:	4ab7      	ldr	r2, [pc, #732]	; (800e1e8 <main+0x658>)
 800df0c:	461c      	mov	r4, r3
 800df0e:	4613      	mov	r3, r2
 800df10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df12:	c407      	stmia	r4!, {r0, r1, r2}
 800df14:	8023      	strh	r3, [r4, #0]
 800df16:	3402      	adds	r4, #2
 800df18:	0c1b      	lsrs	r3, r3, #16
 800df1a:	7023      	strb	r3, [r4, #0]
		char ** word_array = NULL;
 800df1c:	1d3b      	adds	r3, r7, #4
 800df1e:	2200      	movs	r2, #0
 800df20:	601a      	str	r2, [r3, #0]

		strcpy(s, CmdBuffer);
 800df22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800df26:	f107 0308 	add.w	r3, r7, #8
 800df2a:	4611      	mov	r1, r2
 800df2c:	4618      	mov	r0, r3
 800df2e:	f003 f891 	bl	8011054 <strcpy>
		n = string_parser(s, &word_array);
 800df32:	1d3a      	adds	r2, r7, #4
 800df34:	f107 0308 	add.w	r3, r7, #8
 800df38:	4611      	mov	r1, r2
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff fa2c 	bl	800d398 <string_parser>
 800df40:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144

		for (size_t i = 0; i < n; i++) {
 800df44:	2300      	movs	r3, #0
 800df46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800df4a:	e02d      	b.n	800dfa8 <main+0x418>
			if (i == 0) {
 800df4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10c      	bne.n	800df6e <main+0x3de>
				strcpy(Cmd, word_array[i]);
 800df54:	1d3b      	adds	r3, r7, #4
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800df66:	4611      	mov	r1, r2
 800df68:	4618      	mov	r0, r3
 800df6a:	f003 f873 	bl	8011054 <strcpy>
			}
			if (i == 1) {
 800df6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df72:	2b01      	cmp	r3, #1
 800df74:	d10c      	bne.n	800df90 <main+0x400>
				strcpy(Arg, word_array[i]);
 800df76:	1d3b      	adds	r3, r7, #4
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800df88:	4611      	mov	r1, r2
 800df8a:	4618      	mov	r0, r3
 800df8c:	f003 f862 	bl	8011054 <strcpy>
			}
			if (i > 1) {
 800df90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df94:	2b01      	cmp	r3, #1
 800df96:	d902      	bls.n	800df9e <main+0x40e>
				printf("Wrong number of arguments \r\n");
 800df98:	4894      	ldr	r0, [pc, #592]	; (800e1ec <main+0x65c>)
 800df9a:	f002 ffe3 	bl	8010f64 <puts>
		for (size_t i = 0; i < n; i++) {
 800df9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800dfa8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800dfac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d3cb      	bcc.n	800df4c <main+0x3bc>
			}
		}

		printf("Cmd = %s Arg = %s n = %u \r\n", Cmd, Arg, n);
 800dfb4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dfb8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800dfbc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dfc0:	488b      	ldr	r0, [pc, #556]	; (800e1f0 <main+0x660>)
 800dfc2:	f002 ff5b 	bl	8010e7c <iprintf>

		for (size_t i = 0; i < n; i++)
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800dfcc:	e00e      	b.n	800dfec <main+0x45c>
			free(word_array[i]);
 800dfce:	1d3b      	adds	r3, r7, #4
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f002 fa13 	bl	8010408 <free>
		for (size_t i = 0; i < n; i++)
 800dfe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800dfec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dff0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d3ea      	bcc.n	800dfce <main+0x43e>
		free(word_array);
 800dff8:	1d3b      	adds	r3, r7, #4
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f002 fa03 	bl	8010408 <free>

		// Branch based on command
		// meas: Sample and plot a data set
		if ((strcmp(Cmd, "meas") == 0) && (n == 1)) {
 800e002:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e006:	497b      	ldr	r1, [pc, #492]	; (800e1f4 <main+0x664>)
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f2 f901 	bl	8000210 <strcmp>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d128      	bne.n	800e066 <main+0x4d6>
 800e014:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d124      	bne.n	800e066 <main+0x4d6>

			// Countdown
			CountDown(Count_ms);
 800e01c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800e020:	f7ff faa6 	bl	800d570 <CountDown>

			MeasNo++;
 800e024:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e028:	3301      	adds	r3, #1
 800e02a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

			// Sample & plot data one time
			SamplePoints(&Data, NoOfPoints, Period_us);
 800e02e:	f107 0318 	add.w	r3, r7, #24
 800e032:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800e036:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7ff fb48 	bl	800d6d0 <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 800e040:	f107 0318 	add.w	r3, r7, #24
 800e044:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e048:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff fb77 	bl	800d740 <AvgAndPlotPoints>

			// Write the unaveraged (full) data to file meas#.txt
			WriteData2FS(&Data, NoOfPoints, MeasNo);
 800e052:	f107 0318 	add.w	r3, r7, #24
 800e056:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800e05a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff fc0a 	bl	800d878 <WriteData2FS>
 800e064:	e096      	b.n	800e194 <main+0x604>
		}

		// setpoints: Adjust sampled points
		else if ((strcmp(Cmd, "setpoints") == 0) && (n == 2)) {
 800e066:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e06a:	4963      	ldr	r1, [pc, #396]	; (800e1f8 <main+0x668>)
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7f2 f8cf 	bl	8000210 <strcmp>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d125      	bne.n	800e0c4 <main+0x534>
 800e078:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	d121      	bne.n	800e0c4 <main+0x534>
			// Allocate more or less data space
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 800e080:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e084:	220a      	movs	r2, #10
 800e086:	2100      	movs	r1, #0
 800e088:	4618      	mov	r0, r3
 800e08a:	f003 f881 	bl	8011190 <strtol>
 800e08e:	4603      	mov	r3, r0
 800e090:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			printf("Old Data size is %u New NoOfPOints = %lu \r\n",
 800e094:	f107 0318 	add.w	r3, r7, #24
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800e09e:	4619      	mov	r1, r3
 800e0a0:	4856      	ldr	r0, [pc, #344]	; (800e1fc <main+0x66c>)
 800e0a2:	f002 feeb 	bl	8010e7c <iprintf>
					Data.size, NoOfPoints);

			insertArray(&Data, NoOfPoints);
 800e0a6:	f107 0318 	add.w	r3, r7, #24
 800e0aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff f940 	bl	800d334 <insertArray>
			printf("New Array size is %u \r\n", Data.size);
 800e0b4:	f107 0318 	add.w	r3, r7, #24
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	4850      	ldr	r0, [pc, #320]	; (800e200 <main+0x670>)
 800e0be:	f002 fedd 	bl	8010e7c <iprintf>
 800e0c2:	e067      	b.n	800e194 <main+0x604>
		}

		// setavg: Adjust average amount in samples
		else if ((strcmp(Cmd, "setavg") == 0) && (n == 2)) {
 800e0c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e0c8:	494e      	ldr	r1, [pc, #312]	; (800e204 <main+0x674>)
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7f2 f8a0 	bl	8000210 <strcmp>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d10e      	bne.n	800e0f4 <main+0x564>
 800e0d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d10a      	bne.n	800e0f4 <main+0x564>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 800e0de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e0e2:	220a      	movs	r2, #10
 800e0e4:	2100      	movs	r1, #0
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f003 f852 	bl	8011190 <strtol>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800e0f2:	e04f      	b.n	800e194 <main+0x604>
		}

		// setperiod: Adjust sample period in us
		else if ((strcmp(Cmd, "setperiod") == 0) && (n == 2)) {
 800e0f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e0f8:	4943      	ldr	r1, [pc, #268]	; (800e208 <main+0x678>)
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7f2 f888 	bl	8000210 <strcmp>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d10e      	bne.n	800e124 <main+0x594>
 800e106:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d10a      	bne.n	800e124 <main+0x594>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 800e10e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e112:	220a      	movs	r2, #10
 800e114:	2100      	movs	r1, #0
 800e116:	4618      	mov	r0, r3
 800e118:	f003 f83a 	bl	8011190 <strtol>
 800e11c:	4603      	mov	r3, r0
 800e11e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800e122:	e037      	b.n	800e194 <main+0x604>
		}

		// setcount: Adjust countdown period in ms
		else if ((strcmp(Cmd, "setcount") == 0) && (n == 2)) {
 800e124:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e128:	4938      	ldr	r1, [pc, #224]	; (800e20c <main+0x67c>)
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f2 f870 	bl	8000210 <strcmp>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10e      	bne.n	800e154 <main+0x5c4>
 800e136:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d10a      	bne.n	800e154 <main+0x5c4>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 800e13e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e142:	220a      	movs	r2, #10
 800e144:	2100      	movs	r1, #0
 800e146:	4618      	mov	r0, r3
 800e148:	f003 f822 	bl	8011190 <strtol>
 800e14c:	4603      	mov	r3, r0
 800e14e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e152:	e01f      	b.n	800e194 <main+0x604>
		}
		// dir: Print file listing
		else if ((strcmp(Cmd, "dir") == 0) && (n == 1)) {
 800e154:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e158:	492d      	ldr	r1, [pc, #180]	; (800e210 <main+0x680>)
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7f2 f858 	bl	8000210 <strcmp>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d106      	bne.n	800e174 <main+0x5e4>
 800e166:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d102      	bne.n	800e174 <main+0x5e4>
			DirList();
 800e16e:	f7ff fc21 	bl	800d9b4 <DirList>
 800e172:	e00f      	b.n	800e194 <main+0x604>
		}

		// quit: Exit on next while
		else if ((strcmp(Cmd, "quit") == 0) && (n == 1)) {
 800e174:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e178:	4926      	ldr	r1, [pc, #152]	; (800e214 <main+0x684>)
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7f2 f848 	bl	8000210 <strcmp>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d103      	bne.n	800e18e <main+0x5fe>
 800e186:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d002      	beq.n	800e194 <main+0x604>
			// Do nothing yet
		} else {
			printf("Wrong command or argument \r\n");
 800e18e:	4822      	ldr	r0, [pc, #136]	; (800e218 <main+0x688>)
 800e190:	f002 fee8 	bl	8010f64 <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 800e194:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e198:	491e      	ldr	r1, [pc, #120]	; (800e214 <main+0x684>)
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7f2 f838 	bl	8000210 <strcmp>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f47f ae2f 	bne.w	800de06 <main+0x276>
 800e1a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	f47f ae2a 	bne.w	800de06 <main+0x276>
		}
	}

	// Free memory after quit
	freeArray(&Data);
 800e1b2:	f107 0318 	add.w	r3, r7, #24
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7ff f8d7 	bl	800d36a <freeArray>

	// Unlink the SDRAM disk I/O driver
	FATFS_UnLinkDriver(SDRAMPath);
 800e1bc:	4817      	ldr	r0, [pc, #92]	; (800e21c <main+0x68c>)
 800e1be:	f7fd fd19 	bl	800bbf4 <FATFS_UnLinkDriver>

	// Print informative messages
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800e1c2:	f04f 31ff 	mov.w	r1, #4294967295
 800e1c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800e1ca:	f7ff f99d 	bl	800d508 <InitScreen>
	LCDWrite(5, "Stop.");
 800e1ce:	4914      	ldr	r1, [pc, #80]	; (800e220 <main+0x690>)
 800e1d0:	2005      	movs	r0, #5
 800e1d2:	f7ff f9b1 	bl	800d538 <LCDWrite>

	printf("Exit. Data freed. Stop. \r\n");
 800e1d6:	4813      	ldr	r0, [pc, #76]	; (800e224 <main+0x694>)
 800e1d8:	f002 fec4 	bl	8010f64 <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800e1dc:	e7fe      	b.n	800e1dc <main+0x64c>
 800e1de:	bf00      	nop
 800e1e0:	08013570 	.word	0x08013570
 800e1e4:	08013574 	.word	0x08013574
 800e1e8:	080136a4 	.word	0x080136a4
 800e1ec:	08013584 	.word	0x08013584
 800e1f0:	080135a0 	.word	0x080135a0
 800e1f4:	080135bc 	.word	0x080135bc
 800e1f8:	080135c4 	.word	0x080135c4
 800e1fc:	080135d0 	.word	0x080135d0
 800e200:	080135fc 	.word	0x080135fc
 800e204:	08013614 	.word	0x08013614
 800e208:	0801361c 	.word	0x0801361c
 800e20c:	08013628 	.word	0x08013628
 800e210:	08013634 	.word	0x08013634
 800e214:	08013638 	.word	0x08013638
 800e218:	08013640 	.word	0x08013640
 800e21c:	200010d8 	.word	0x200010d8
 800e220:	0801365c 	.word	0x0801365c
 800e224:	08013664 	.word	0x08013664

0800e228 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800e228:	b580      	push	{r7, lr}
 800e22a:	b0b4      	sub	sp, #208	; 0xd0
 800e22c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800e22e:	4a50      	ldr	r2, [pc, #320]	; (800e370 <SystemClock_Config+0x148>)
 800e230:	4b4f      	ldr	r3, [pc, #316]	; (800e370 <SystemClock_Config+0x148>)
 800e232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e238:	6413      	str	r3, [r2, #64]	; 0x40
 800e23a:	4b4d      	ldr	r3, [pc, #308]	; (800e370 <SystemClock_Config+0x148>)
 800e23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e23e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e242:	607b      	str	r3, [r7, #4]
 800e244:	687b      	ldr	r3, [r7, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e246:	4a4b      	ldr	r2, [pc, #300]	; (800e374 <SystemClock_Config+0x14c>)
 800e248:	4b4a      	ldr	r3, [pc, #296]	; (800e374 <SystemClock_Config+0x14c>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e250:	6013      	str	r3, [r2, #0]
 800e252:	4b48      	ldr	r3, [pc, #288]	; (800e374 <SystemClock_Config+0x14c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e25a:	603b      	str	r3, [r7, #0]
 800e25c:	683b      	ldr	r3, [r7, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e25e:	2301      	movs	r3, #1
 800e260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e26c:	2302      	movs	r3, #2
 800e26e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e276:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 800e27a:	2319      	movs	r3, #25
 800e27c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800e280:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e288:	2302      	movs	r3, #2
 800e28a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800e28e:	2309      	movs	r3, #9
 800e290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800e294:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e298:	4618      	mov	r0, r3
 800e29a:	f7f6 ff2f 	bl	80050fc <HAL_RCC_OscConfig>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d004      	beq.n	800e2ae <SystemClock_Config+0x86>
		_Error_Handler(__FILE__, __LINE__);
 800e2a4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800e2a8:	4833      	ldr	r0, [pc, #204]	; (800e378 <SystemClock_Config+0x150>)
 800e2aa:	f000 fe91 	bl	800efd0 <_Error_Handler>
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800e2ae:	f7f6 fed5 	bl	800505c <HAL_PWREx_EnableOverDrive>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d004      	beq.n	800e2c2 <SystemClock_Config+0x9a>
		_Error_Handler(__FILE__, __LINE__);
 800e2b8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800e2bc:	482e      	ldr	r0, [pc, #184]	; (800e378 <SystemClock_Config+0x150>)
 800e2be:	f000 fe87 	bl	800efd0 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800e2c2:	230f      	movs	r3, #15
 800e2c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e2d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e2d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e2dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800e2e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e2e8:	2106      	movs	r1, #6
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7f7 f976 	bl	80055dc <HAL_RCC_ClockConfig>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d004      	beq.n	800e300 <SystemClock_Config+0xd8>
		_Error_Handler(__FILE__, __LINE__);
 800e2f6:	f240 11db 	movw	r1, #475	; 0x1db
 800e2fa:	481f      	ldr	r0, [pc, #124]	; (800e378 <SystemClock_Config+0x150>)
 800e2fc:	f000 fe68 	bl	800efd0 <_Error_Handler>
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800e300:	4b1e      	ldr	r3, [pc, #120]	; (800e37c <SystemClock_Config+0x154>)
 800e302:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800e304:	23c0      	movs	r3, #192	; 0xc0
 800e306:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800e308:	2305      	movs	r3, #5
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800e30c:	2302      	movs	r3, #2
 800e30e:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800e310:	2300      	movs	r3, #0
 800e312:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800e314:	2301      	movs	r3, #1
 800e316:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800e318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e31c:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800e31e:	2300      	movs	r3, #0
 800e320:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800e322:	2300      	movs	r3, #0
 800e324:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800e326:	f107 0308 	add.w	r3, r7, #8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f7 fb5a 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d004      	beq.n	800e340 <SystemClock_Config+0x118>
		_Error_Handler(__FILE__, __LINE__);
 800e336:	f240 11e9 	movw	r1, #489	; 0x1e9
 800e33a:	480f      	ldr	r0, [pc, #60]	; (800e378 <SystemClock_Config+0x150>)
 800e33c:	f000 fe48 	bl	800efd0 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800e340:	f7f7 faea 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 800e344:	4602      	mov	r2, r0
 800e346:	4b0e      	ldr	r3, [pc, #56]	; (800e380 <SystemClock_Config+0x158>)
 800e348:	fba3 2302 	umull	r2, r3, r3, r2
 800e34c:	099b      	lsrs	r3, r3, #6
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f4 f8bf 	bl	80024d2 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800e354:	2004      	movs	r0, #4
 800e356:	f7f4 f8c9 	bl	80024ec <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800e35a:	2200      	movs	r2, #0
 800e35c:	2100      	movs	r1, #0
 800e35e:	f04f 30ff 	mov.w	r0, #4294967295
 800e362:	f7f4 f88c 	bl	800247e <HAL_NVIC_SetPriority>
}
 800e366:	bf00      	nop
 800e368:	37d0      	adds	r7, #208	; 0xd0
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	40023800 	.word	0x40023800
 800e374:	40007000 	.word	0x40007000
 800e378:	080133c0 	.word	0x080133c0
 800e37c:	00010048 	.word	0x00010048
 800e380:	10624dd3 	.word	0x10624dd3

0800e384 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void) {
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig;

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800e38a:	4b23      	ldr	r3, [pc, #140]	; (800e418 <MX_ADC3_Init+0x94>)
 800e38c:	4a23      	ldr	r2, [pc, #140]	; (800e41c <MX_ADC3_Init+0x98>)
 800e38e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e390:	4b21      	ldr	r3, [pc, #132]	; (800e418 <MX_ADC3_Init+0x94>)
 800e392:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e396:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800e398:	4b1f      	ldr	r3, [pc, #124]	; (800e418 <MX_ADC3_Init+0x94>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800e39e:	4b1e      	ldr	r3, [pc, #120]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800e3a4:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e3aa:	4b1b      	ldr	r3, [pc, #108]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	621a      	str	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e3b0:	4b19      	ldr	r3, [pc, #100]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e3b6:	4b18      	ldr	r3, [pc, #96]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3b8:	4a19      	ldr	r2, [pc, #100]	; (800e420 <MX_ADC3_Init+0x9c>)
 800e3ba:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e3bc:	4b16      	ldr	r3, [pc, #88]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800e3c2:	4b15      	ldr	r3, [pc, #84]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800e3c8:	4b13      	ldr	r3, [pc, #76]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e3ce:	4b12      	ldr	r3, [pc, #72]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800e3d4:	4810      	ldr	r0, [pc, #64]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3d6:	f7f3 fc59 	bl	8001c8c <HAL_ADC_Init>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <MX_ADC3_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 800e3e0:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800e3e4:	480f      	ldr	r0, [pc, #60]	; (800e424 <MX_ADC3_Init+0xa0>)
 800e3e6:	f000 fdf3 	bl	800efd0 <_Error_Handler>
	}

	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800e3f6:	463b      	mov	r3, r7
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4807      	ldr	r0, [pc, #28]	; (800e418 <MX_ADC3_Init+0x94>)
 800e3fc:	f7f3 fd3c 	bl	8001e78 <HAL_ADC_ConfigChannel>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d004      	beq.n	800e410 <MX_ADC3_Init+0x8c>
		_Error_Handler(__FILE__, __LINE__);
 800e406:	f240 2115 	movw	r1, #533	; 0x215
 800e40a:	4806      	ldr	r0, [pc, #24]	; (800e424 <MX_ADC3_Init+0xa0>)
 800e40c:	f000 fde0 	bl	800efd0 <_Error_Handler>
	}

}
 800e410:	bf00      	nop
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	20001020 	.word	0x20001020
 800e41c:	40012200 	.word	0x40012200
 800e420:	0f000001 	.word	0x0f000001
 800e424:	080133c0 	.word	0x080133c0

0800e428 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void) {
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 800e42c:	4b0f      	ldr	r3, [pc, #60]	; (800e46c <MX_CRC_Init+0x44>)
 800e42e:	4a10      	ldr	r2, [pc, #64]	; (800e470 <MX_CRC_Init+0x48>)
 800e430:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800e432:	4b0e      	ldr	r3, [pc, #56]	; (800e46c <MX_CRC_Init+0x44>)
 800e434:	2200      	movs	r2, #0
 800e436:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800e438:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <MX_CRC_Init+0x44>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800e43e:	4b0b      	ldr	r3, [pc, #44]	; (800e46c <MX_CRC_Init+0x44>)
 800e440:	2200      	movs	r2, #0
 800e442:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800e444:	4b09      	ldr	r3, [pc, #36]	; (800e46c <MX_CRC_Init+0x44>)
 800e446:	2200      	movs	r2, #0
 800e448:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800e44a:	4b08      	ldr	r3, [pc, #32]	; (800e46c <MX_CRC_Init+0x44>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800e450:	4806      	ldr	r0, [pc, #24]	; (800e46c <MX_CRC_Init+0x44>)
 800e452:	f7f4 f875 	bl	8002540 <HAL_CRC_Init>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d004      	beq.n	800e466 <MX_CRC_Init+0x3e>
		_Error_Handler(__FILE__, __LINE__);
 800e45c:	f44f 7109 	mov.w	r1, #548	; 0x224
 800e460:	4804      	ldr	r0, [pc, #16]	; (800e474 <MX_CRC_Init+0x4c>)
 800e462:	f000 fdb5 	bl	800efd0 <_Error_Handler>
	}

}
 800e466:	bf00      	nop
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20000d54 	.word	0x20000d54
 800e470:	40023000 	.word	0x40023000
 800e474:	080133c0 	.word	0x080133c0

0800e478 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void) {
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0

	hdma2d.Instance = DMA2D;
 800e47c:	4b18      	ldr	r3, [pc, #96]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e47e:	4a19      	ldr	r2, [pc, #100]	; (800e4e4 <MX_DMA2D_Init+0x6c>)
 800e480:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800e482:	4b17      	ldr	r3, [pc, #92]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e484:	2200      	movs	r2, #0
 800e486:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800e488:	4b15      	ldr	r3, [pc, #84]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800e48e:	4b14      	ldr	r3, [pc, #80]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e490:	2200      	movs	r2, #0
 800e492:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 800e494:	4b12      	ldr	r3, [pc, #72]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e496:	2200      	movs	r2, #0
 800e498:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800e49a:	4b11      	ldr	r3, [pc, #68]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800e4a0:	4b0f      	ldr	r3, [pc, #60]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800e4a6:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800e4ac:	480c      	ldr	r0, [pc, #48]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e4ae:	f7f4 fc0d 	bl	8002ccc <HAL_DMA2D_Init>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d004      	beq.n	800e4c2 <MX_DMA2D_Init+0x4a>
		_Error_Handler(__FILE__, __LINE__);
 800e4b8:	f240 2135 	movw	r1, #565	; 0x235
 800e4bc:	480a      	ldr	r0, [pc, #40]	; (800e4e8 <MX_DMA2D_Init+0x70>)
 800e4be:	f000 fd87 	bl	800efd0 <_Error_Handler>
	}

	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800e4c2:	2101      	movs	r1, #1
 800e4c4:	4806      	ldr	r0, [pc, #24]	; (800e4e0 <MX_DMA2D_Init+0x68>)
 800e4c6:	f7f4 fd5f 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d004      	beq.n	800e4da <MX_DMA2D_Init+0x62>
		_Error_Handler(__FILE__, __LINE__);
 800e4d0:	f240 2139 	movw	r1, #569	; 0x239
 800e4d4:	4804      	ldr	r0, [pc, #16]	; (800e4e8 <MX_DMA2D_Init+0x70>)
 800e4d6:	f000 fd7b 	bl	800efd0 <_Error_Handler>
	}

}
 800e4da:	bf00      	nop
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	2000130c 	.word	0x2000130c
 800e4e4:	4002b000 	.word	0x4002b000
 800e4e8:	080133c0 	.word	0x080133c0

0800e4ec <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void) {
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	af00      	add	r7, sp, #0

	hi2c3.Instance = I2C3;
 800e4f0:	4b1f      	ldr	r3, [pc, #124]	; (800e570 <MX_I2C3_Init+0x84>)
 800e4f2:	4a20      	ldr	r2, [pc, #128]	; (800e574 <MX_I2C3_Init+0x88>)
 800e4f4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 800e4f6:	4b1e      	ldr	r3, [pc, #120]	; (800e570 <MX_I2C3_Init+0x84>)
 800e4f8:	4a1f      	ldr	r2, [pc, #124]	; (800e578 <MX_I2C3_Init+0x8c>)
 800e4fa:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 224;
 800e4fc:	4b1c      	ldr	r3, [pc, #112]	; (800e570 <MX_I2C3_Init+0x84>)
 800e4fe:	22e0      	movs	r2, #224	; 0xe0
 800e500:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e502:	4b1b      	ldr	r3, [pc, #108]	; (800e570 <MX_I2C3_Init+0x84>)
 800e504:	2201      	movs	r2, #1
 800e506:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e508:	4b19      	ldr	r3, [pc, #100]	; (800e570 <MX_I2C3_Init+0x84>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800e50e:	4b18      	ldr	r3, [pc, #96]	; (800e570 <MX_I2C3_Init+0x84>)
 800e510:	2200      	movs	r2, #0
 800e512:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e514:	4b16      	ldr	r3, [pc, #88]	; (800e570 <MX_I2C3_Init+0x84>)
 800e516:	2200      	movs	r2, #0
 800e518:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e51a:	4b15      	ldr	r3, [pc, #84]	; (800e570 <MX_I2C3_Init+0x84>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e520:	4b13      	ldr	r3, [pc, #76]	; (800e570 <MX_I2C3_Init+0x84>)
 800e522:	2200      	movs	r2, #0
 800e524:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800e526:	4812      	ldr	r0, [pc, #72]	; (800e570 <MX_I2C3_Init+0x84>)
 800e528:	f7f5 f82c 	bl	8003584 <HAL_I2C_Init>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d004      	beq.n	800e53c <MX_I2C3_Init+0x50>
		_Error_Handler(__FILE__, __LINE__);
 800e532:	f240 214b 	movw	r1, #587	; 0x24b
 800e536:	4811      	ldr	r0, [pc, #68]	; (800e57c <MX_I2C3_Init+0x90>)
 800e538:	f000 fd4a 	bl	800efd0 <_Error_Handler>
	}

	/**Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800e53c:	2100      	movs	r1, #0
 800e53e:	480c      	ldr	r0, [pc, #48]	; (800e570 <MX_I2C3_Init+0x84>)
 800e540:	f7f5 f8ae 	bl	80036a0 <HAL_I2CEx_ConfigAnalogFilter>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d004      	beq.n	800e554 <MX_I2C3_Init+0x68>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 800e54a:	f240 2152 	movw	r1, #594	; 0x252
 800e54e:	480b      	ldr	r0, [pc, #44]	; (800e57c <MX_I2C3_Init+0x90>)
 800e550:	f000 fd3e 	bl	800efd0 <_Error_Handler>
	}

	/**Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 800e554:	2100      	movs	r1, #0
 800e556:	4806      	ldr	r0, [pc, #24]	; (800e570 <MX_I2C3_Init+0x84>)
 800e558:	f7f5 f8ed 	bl	8003736 <HAL_I2CEx_ConfigDigitalFilter>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d004      	beq.n	800e56c <MX_I2C3_Init+0x80>
		_Error_Handler(__FILE__, __LINE__);
 800e562:	f44f 7116 	mov.w	r1, #600	; 0x258
 800e566:	4805      	ldr	r0, [pc, #20]	; (800e57c <MX_I2C3_Init+0x90>)
 800e568:	f000 fd32 	bl	800efd0 <_Error_Handler>
	}

}
 800e56c:	bf00      	nop
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20000c48 	.word	0x20000c48
 800e574:	40005c00 	.word	0x40005c00
 800e578:	00c0eaff 	.word	0x00c0eaff
 800e57c:	080133c0 	.word	0x080133c0

0800e580 <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void) {
 800e580:	b580      	push	{r7, lr}
 800e582:	b08e      	sub	sp, #56	; 0x38
 800e584:	af00      	add	r7, sp, #0

	LTDC_LayerCfgTypeDef pLayerCfg;

	hltdc.Instance = LTDC;
 800e586:	4b3c      	ldr	r3, [pc, #240]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e588:	4a3c      	ldr	r2, [pc, #240]	; (800e67c <MX_LTDC_Init+0xfc>)
 800e58a:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800e58c:	4b3a      	ldr	r3, [pc, #232]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e58e:	2200      	movs	r2, #0
 800e590:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800e592:	4b39      	ldr	r3, [pc, #228]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e594:	2200      	movs	r2, #0
 800e596:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800e598:	4b37      	ldr	r3, [pc, #220]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800e59e:	4b36      	ldr	r3, [pc, #216]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 800e5a4:	4b34      	ldr	r3, [pc, #208]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5a6:	2228      	movs	r2, #40	; 0x28
 800e5a8:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 800e5aa:	4b33      	ldr	r3, [pc, #204]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5ac:	2209      	movs	r2, #9
 800e5ae:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800e5b0:	4b31      	ldr	r3, [pc, #196]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5b2:	2235      	movs	r2, #53	; 0x35
 800e5b4:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 800e5b6:	4b30      	ldr	r3, [pc, #192]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5b8:	220b      	movs	r2, #11
 800e5ba:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 800e5bc:	4b2e      	ldr	r3, [pc, #184]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5be:	f240 2215 	movw	r2, #533	; 0x215
 800e5c2:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 800e5c4:	4b2c      	ldr	r3, [pc, #176]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5c6:	f240 121b 	movw	r2, #283	; 0x11b
 800e5ca:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 800e5cc:	4b2a      	ldr	r3, [pc, #168]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5ce:	f240 2235 	movw	r2, #565	; 0x235
 800e5d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 800e5d4:	4b28      	ldr	r3, [pc, #160]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5d6:	f240 121d 	movw	r2, #285	; 0x11d
 800e5da:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 800e5dc:	4b26      	ldr	r3, [pc, #152]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800e5e4:	4b24      	ldr	r3, [pc, #144]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800e5ec:	4b22      	ldr	r3, [pc, #136]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800e5f4:	4820      	ldr	r0, [pc, #128]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e5f6:	f7f5 f8ed 	bl	80037d4 <HAL_LTDC_Init>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <MX_LTDC_Init+0x8a>
		_Error_Handler(__FILE__, __LINE__);
 800e600:	f240 2173 	movw	r1, #627	; 0x273
 800e604:	481e      	ldr	r0, [pc, #120]	; (800e680 <MX_LTDC_Init+0x100>)
 800e606:	f000 fce3 	bl	800efd0 <_Error_Handler>
	}

	pLayerCfg.WindowX0 = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 800e60e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800e612:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800e614:	2300      	movs	r3, #0
 800e616:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800e618:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e61c:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800e61e:	2300      	movs	r3, #0
 800e620:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800e622:	23ff      	movs	r3, #255	; 0xff
 800e624:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800e62a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e62e:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800e630:	2305      	movs	r3, #5
 800e632:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = LCD_FB_START_ADDRESS;
 800e634:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800e638:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800e654:	1d3b      	adds	r3, r7, #4
 800e656:	2200      	movs	r2, #0
 800e658:	4619      	mov	r1, r3
 800e65a:	4807      	ldr	r0, [pc, #28]	; (800e678 <MX_LTDC_Init+0xf8>)
 800e65c:	f7f5 f996 	bl	800398c <HAL_LTDC_ConfigLayer>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <MX_LTDC_Init+0xf0>
		_Error_Handler(__FILE__, __LINE__);
 800e666:	f240 2186 	movw	r1, #646	; 0x286
 800e66a:	4805      	ldr	r0, [pc, #20]	; (800e680 <MX_LTDC_Init+0x100>)
 800e66c:	f000 fcb0 	bl	800efd0 <_Error_Handler>
	}

}
 800e670:	bf00      	nop
 800e672:	3738      	adds	r7, #56	; 0x38
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	20000d78 	.word	0x20000d78
 800e67c:	40016800 	.word	0x40016800
 800e680:	080133c0 	.word	0x080133c0

0800e684 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void) {
 800e684:	b580      	push	{r7, lr}
 800e686:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 800e688:	4b15      	ldr	r3, [pc, #84]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e68a:	4a16      	ldr	r2, [pc, #88]	; (800e6e4 <MX_USART1_UART_Init+0x60>)
 800e68c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800e68e:	4b14      	ldr	r3, [pc, #80]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e694:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e696:	4b12      	ldr	r3, [pc, #72]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e698:	2200      	movs	r2, #0
 800e69a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800e69c:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800e6a2:	4b0f      	ldr	r3, [pc, #60]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800e6a8:	4b0d      	ldr	r3, [pc, #52]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e6aa:	220c      	movs	r2, #12
 800e6ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e6ae:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e6b4:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e6ba:	4b09      	ldr	r3, [pc, #36]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e6bc:	2200      	movs	r2, #0
 800e6be:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800e6c6:	4806      	ldr	r0, [pc, #24]	; (800e6e0 <MX_USART1_UART_Init+0x5c>)
 800e6c8:	f7f8 f8b6 	bl	8006838 <HAL_UART_Init>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d004      	beq.n	800e6dc <MX_USART1_UART_Init+0x58>
		_Error_Handler(__FILE__, __LINE__);
 800e6d2:	f240 2199 	movw	r1, #665	; 0x299
 800e6d6:	4804      	ldr	r0, [pc, #16]	; (800e6e8 <MX_USART1_UART_Init+0x64>)
 800e6d8:	f000 fc7a 	bl	800efd0 <_Error_Handler>
	}

}
 800e6dc:	bf00      	nop
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	20001068 	.word	0x20001068
 800e6e4:	40011000 	.word	0x40011000
 800e6e8:	080133c0 	.word	0x080133c0

0800e6ec <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void) {
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE()
 800e6f2:	4a30      	ldr	r2, [pc, #192]	; (800e7b4 <MX_DMA_Init+0xc8>)
 800e6f4:	4b2f      	ldr	r3, [pc, #188]	; (800e7b4 <MX_DMA_Init+0xc8>)
 800e6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e6fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e6fe:	4b2d      	ldr	r3, [pc, #180]	; (800e7b4 <MX_DMA_Init+0xc8>)
 800e700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e706:	607b      	str	r3, [r7, #4]
 800e708:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_DMA1_CLK_ENABLE()
 800e70a:	4a2a      	ldr	r2, [pc, #168]	; (800e7b4 <MX_DMA_Init+0xc8>)
 800e70c:	4b29      	ldr	r3, [pc, #164]	; (800e7b4 <MX_DMA_Init+0xc8>)
 800e70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e714:	6313      	str	r3, [r2, #48]	; 0x30
 800e716:	4b27      	ldr	r3, [pc, #156]	; (800e7b4 <MX_DMA_Init+0xc8>)
 800e718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e71a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e71e:	603b      	str	r3, [r7, #0]
 800e720:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800e722:	4b25      	ldr	r3, [pc, #148]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e724:	4a25      	ldr	r2, [pc, #148]	; (800e7bc <MX_DMA_Init+0xd0>)
 800e726:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800e728:	4b23      	ldr	r3, [pc, #140]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800e72e:	4b22      	ldr	r3, [pc, #136]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e730:	2280      	movs	r2, #128	; 0x80
 800e732:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800e734:	4b20      	ldr	r3, [pc, #128]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e73a:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800e73c:	4b1e      	ldr	r3, [pc, #120]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e73e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e742:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e744:	4b1c      	ldr	r3, [pc, #112]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e746:	2200      	movs	r2, #0
 800e748:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e74a:	4b1b      	ldr	r3, [pc, #108]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e74c:	2200      	movs	r2, #0
 800e74e:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800e750:	4b19      	ldr	r3, [pc, #100]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e752:	2200      	movs	r2, #0
 800e754:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800e756:	4b18      	ldr	r3, [pc, #96]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e758:	2200      	movs	r2, #0
 800e75a:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e75c:	4b16      	ldr	r3, [pc, #88]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e75e:	2204      	movs	r2, #4
 800e760:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e762:	4b15      	ldr	r3, [pc, #84]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e764:	2203      	movs	r2, #3
 800e766:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800e768:	4b13      	ldr	r3, [pc, #76]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e76e:	4b12      	ldr	r3, [pc, #72]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e770:	2200      	movs	r2, #0
 800e772:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK) {
 800e774:	4810      	ldr	r0, [pc, #64]	; (800e7b8 <MX_DMA_Init+0xcc>)
 800e776:	f7f3 ffc1 	bl	80026fc <HAL_DMA_Init>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d004      	beq.n	800e78a <MX_DMA_Init+0x9e>
		_Error_Handler(__FILE__, __LINE__);
 800e780:	f240 21b9 	movw	r1, #697	; 0x2b9
 800e784:	480e      	ldr	r0, [pc, #56]	; (800e7c0 <MX_DMA_Init+0xd4>)
 800e786:	f000 fc23 	bl	800efd0 <_Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800e78a:	2200      	movs	r2, #0
 800e78c:	2100      	movs	r1, #0
 800e78e:	200c      	movs	r0, #12
 800e790:	f7f3 fe75 	bl	800247e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800e794:	200c      	movs	r0, #12
 800e796:	f7f3 fe8e 	bl	80024b6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800e79a:	2200      	movs	r2, #0
 800e79c:	2100      	movs	r1, #0
 800e79e:	200f      	movs	r0, #15
 800e7a0:	f7f3 fe6d 	bl	800247e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800e7a4:	200f      	movs	r0, #15
 800e7a6:	f7f3 fe86 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 800e7aa:	bf00      	nop
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	40023800 	.word	0x40023800
 800e7b8:	20000cf4 	.word	0x20000cf4
 800e7bc:	40026410 	.word	0x40026410
 800e7c0:	080133c0 	.word	0x080133c0

0800e7c4 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void) {
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800e7ca:	4b21      	ldr	r3, [pc, #132]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7cc:	4a21      	ldr	r2, [pc, #132]	; (800e854 <MX_FMC_Init+0x90>)
 800e7ce:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800e7d0:	4b1f      	ldr	r3, [pc, #124]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800e7d6:	4b1e      	ldr	r3, [pc, #120]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800e7dc:	4b1c      	ldr	r3, [pc, #112]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7de:	2204      	movs	r2, #4
 800e7e0:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800e7e2:	4b1b      	ldr	r3, [pc, #108]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7e4:	2210      	movs	r2, #16
 800e7e6:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800e7e8:	4b19      	ldr	r3, [pc, #100]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7ea:	2240      	movs	r2, #64	; 0x40
 800e7ec:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800e7ee:	4b18      	ldr	r3, [pc, #96]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e7f4:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800e7f6:	4b16      	ldr	r3, [pc, #88]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800e7fc:	4b14      	ldr	r3, [pc, #80]	; (800e850 <MX_FMC_Init+0x8c>)
 800e7fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e802:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800e804:	4b12      	ldr	r3, [pc, #72]	; (800e850 <MX_FMC_Init+0x8c>)
 800e806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e80a:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800e80c:	4b10      	ldr	r3, [pc, #64]	; (800e850 <MX_FMC_Init+0x8c>)
 800e80e:	2200      	movs	r2, #0
 800e810:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800e812:	2302      	movs	r3, #2
 800e814:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 800e816:	2307      	movs	r3, #7
 800e818:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 800e81a:	2304      	movs	r3, #4
 800e81c:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 6;
 800e81e:	2306      	movs	r3, #6
 800e820:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 2;
 800e822:	2302      	movs	r3, #2
 800e824:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 800e826:	2302      	movs	r3, #2
 800e828:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 800e82a:	2302      	movs	r3, #2
 800e82c:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800e82e:	1d3b      	adds	r3, r7, #4
 800e830:	4619      	mov	r1, r3
 800e832:	4807      	ldr	r0, [pc, #28]	; (800e850 <MX_FMC_Init+0x8c>)
 800e834:	f7f7 fcc4 	bl	80061c0 <HAL_SDRAM_Init>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d004      	beq.n	800e848 <MX_FMC_Init+0x84>
		_Error_Handler(__FILE__, __LINE__);
 800e83e:	f240 21e1 	movw	r1, #737	; 0x2e1
 800e842:	4805      	ldr	r0, [pc, #20]	; (800e858 <MX_FMC_Init+0x94>)
 800e844:	f000 fbc4 	bl	800efd0 <_Error_Handler>
	}

}
 800e848:	bf00      	nop
 800e84a:	3720      	adds	r7, #32
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	2000134c 	.word	0x2000134c
 800e854:	a0000140 	.word	0xa0000140
 800e858:	080133c0 	.word	0x080133c0

0800e85c <MX_GPIO_Init>:
 PH10   ------> DCMI_D1
 PA7   ------> ETH_CRS_DV
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */
static void MX_GPIO_Init(void) {
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b090      	sub	sp, #64	; 0x40
 800e860:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800e862:	4aae      	ldr	r2, [pc, #696]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e864:	4bad      	ldr	r3, [pc, #692]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e868:	f043 0310 	orr.w	r3, r3, #16
 800e86c:	6313      	str	r3, [r2, #48]	; 0x30
 800e86e:	4bab      	ldr	r3, [pc, #684]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e872:	f003 0310 	and.w	r3, r3, #16
 800e876:	62bb      	str	r3, [r7, #40]	; 0x28
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800e87a:	4aa8      	ldr	r2, [pc, #672]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e87c:	4ba7      	ldr	r3, [pc, #668]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e884:	6313      	str	r3, [r2, #48]	; 0x30
 800e886:	4ba5      	ldr	r3, [pc, #660]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e88e:	627b      	str	r3, [r7, #36]	; 0x24
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800e892:	4aa2      	ldr	r2, [pc, #648]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e894:	4ba1      	ldr	r3, [pc, #644]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e898:	f043 0302 	orr.w	r3, r3, #2
 800e89c:	6313      	str	r3, [r2, #48]	; 0x30
 800e89e:	4b9f      	ldr	r3, [pc, #636]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a2:	f003 0302 	and.w	r3, r3, #2
 800e8a6:	623b      	str	r3, [r7, #32]
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800e8aa:	4a9c      	ldr	r2, [pc, #624]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8ac:	4b9b      	ldr	r3, [pc, #620]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b0:	f043 0308 	orr.w	r3, r3, #8
 800e8b4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8b6:	4b99      	ldr	r3, [pc, #612]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ba:	f003 0308 	and.w	r3, r3, #8
 800e8be:	61fb      	str	r3, [r7, #28]
 800e8c0:	69fb      	ldr	r3, [r7, #28]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800e8c2:	4a96      	ldr	r2, [pc, #600]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8c4:	4b95      	ldr	r3, [pc, #596]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c8:	f043 0304 	orr.w	r3, r3, #4
 800e8cc:	6313      	str	r3, [r2, #48]	; 0x30
 800e8ce:	4b93      	ldr	r3, [pc, #588]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d2:	f003 0304 	and.w	r3, r3, #4
 800e8d6:	61bb      	str	r3, [r7, #24]
 800e8d8:	69bb      	ldr	r3, [r7, #24]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e8da:	4a90      	ldr	r2, [pc, #576]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8dc:	4b8f      	ldr	r3, [pc, #572]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e0:	f043 0301 	orr.w	r3, r3, #1
 800e8e4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8e6:	4b8d      	ldr	r3, [pc, #564]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	617b      	str	r3, [r7, #20]
 800e8f0:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOJ_CLK_ENABLE()
 800e8f2:	4a8a      	ldr	r2, [pc, #552]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8f4:	4b89      	ldr	r3, [pc, #548]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e8fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e8fe:	4b87      	ldr	r3, [pc, #540]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e906:	613b      	str	r3, [r7, #16]
 800e908:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOI_CLK_ENABLE()
 800e90a:	4a84      	ldr	r2, [pc, #528]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e90c:	4b83      	ldr	r3, [pc, #524]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e914:	6313      	str	r3, [r2, #48]	; 0x30
 800e916:	4b81      	ldr	r3, [pc, #516]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
 800e922:	4a7e      	ldr	r2, [pc, #504]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e924:	4b7d      	ldr	r3, [pc, #500]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e92c:	6313      	str	r3, [r2, #48]	; 0x30
 800e92e:	4b7b      	ldr	r3, [pc, #492]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e936:	60bb      	str	r3, [r7, #8]
 800e938:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800e93a:	4a78      	ldr	r2, [pc, #480]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e93c:	4b77      	ldr	r3, [pc, #476]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e940:	f043 0320 	orr.w	r3, r3, #32
 800e944:	6313      	str	r3, [r2, #48]	; 0x30
 800e946:	4b75      	ldr	r3, [pc, #468]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e94a:	f003 0320 	and.w	r3, r3, #32
 800e94e:	607b      	str	r3, [r7, #4]
 800e950:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800e952:	4a72      	ldr	r2, [pc, #456]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e954:	4b71      	ldr	r3, [pc, #452]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e95c:	6313      	str	r3, [r2, #48]	; 0x30
 800e95e:	4b6f      	ldr	r3, [pc, #444]	; (800eb1c <MX_GPIO_Init+0x2c0>)
 800e960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800e96a:	2201      	movs	r2, #1
 800e96c:	2120      	movs	r1, #32
 800e96e:	486c      	ldr	r0, [pc, #432]	; (800eb20 <MX_GPIO_Init+0x2c4>)
 800e970:	f7f4 fdee 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 800e974:	2200      	movs	r2, #0
 800e976:	f241 010c 	movw	r1, #4108	; 0x100c
 800e97a:	486a      	ldr	r0, [pc, #424]	; (800eb24 <MX_GPIO_Init+0x2c8>)
 800e97c:	f7f4 fde8 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800e980:	2200      	movs	r2, #0
 800e982:	2108      	movs	r1, #8
 800e984:	4868      	ldr	r0, [pc, #416]	; (800eb28 <MX_GPIO_Init+0x2cc>)
 800e986:	f7f4 fde3 	bl	8003550 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800e98a:	2200      	movs	r2, #0
 800e98c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e990:	4866      	ldr	r0, [pc, #408]	; (800eb2c <MX_GPIO_Init+0x2d0>)
 800e992:	f7f4 fddd 	bl	8003550 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800e996:	2200      	movs	r2, #0
 800e998:	21c8      	movs	r1, #200	; 0xc8
 800e99a:	4865      	ldr	r0, [pc, #404]	; (800eb30 <MX_GPIO_Init+0x2d4>)
 800e99c:	f7f4 fdd8 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800e9a0:	2308      	movs	r3, #8
 800e9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e9ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4860      	ldr	r0, [pc, #384]	; (800eb34 <MX_GPIO_Init+0x2d8>)
 800e9b4:	f7f4 fc22 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9bc:	2302      	movs	r3, #2
 800e9be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800e9c8:	2309      	movs	r3, #9
 800e9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800e9cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4858      	ldr	r0, [pc, #352]	; (800eb34 <MX_GPIO_Init+0x2d8>)
 800e9d4:	f7f4 fc12 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800e9d8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800e9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9de:	2302      	movs	r3, #2
 800e9e0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e9ea:	230b      	movs	r3, #11
 800e9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e9ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	484e      	ldr	r0, [pc, #312]	; (800eb30 <MX_GPIO_Init+0x2d4>)
 800e9f6:	f7f4 fc01 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800e9fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ea00:	2312      	movs	r3, #18
 800ea02:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ea04:	2301      	movs	r3, #1
 800ea06:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ea10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea14:	4619      	mov	r1, r3
 800ea16:	4848      	ldr	r0, [pc, #288]	; (800eb38 <MX_GPIO_Init+0x2dc>)
 800ea18:	f7f4 fbf0 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800ea1c:	2310      	movs	r3, #16
 800ea1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea20:	2302      	movs	r3, #2
 800ea22:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea24:	2300      	movs	r3, #0
 800ea26:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800ea30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea34:	4619      	mov	r1, r3
 800ea36:	4840      	ldr	r0, [pc, #256]	; (800eb38 <MX_GPIO_Init+0x2dc>)
 800ea38:	f7f4 fbe0 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800ea3c:	2380      	movs	r3, #128	; 0x80
 800ea3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea40:	2302      	movs	r3, #2
 800ea42:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea44:	2300      	movs	r3, #0
 800ea46:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800ea4c:	2308      	movs	r3, #8
 800ea4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800ea50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea54:	4619      	mov	r1, r3
 800ea56:	4832      	ldr	r0, [pc, #200]	; (800eb20 <MX_GPIO_Init+0x2c4>)
 800ea58:	f7f4 fbd0 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800ea5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800ea60:	62fb      	str	r3, [r7, #44]	; 0x2c
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea62:	2302      	movs	r3, #2
 800ea64:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea66:	2300      	movs	r3, #0
 800ea68:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800ea6e:	230c      	movs	r3, #12
 800ea70:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea76:	4619      	mov	r1, r3
 800ea78:	4830      	ldr	r0, [pc, #192]	; (800eb3c <MX_GPIO_Init+0x2e0>)
 800ea7a:	f7f4 fbbf 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800ea7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea82:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea84:	2302      	movs	r3, #2
 800ea86:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ea90:	2301      	movs	r3, #1
 800ea92:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800ea94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4829      	ldr	r0, [pc, #164]	; (800eb40 <MX_GPIO_Init+0x2e4>)
 800ea9c:	f7f4 fbae 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 800eaa0:	2360      	movs	r3, #96	; 0x60
 800eaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eaac:	2300      	movs	r3, #0
 800eaae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800eab0:	230d      	movs	r3, #13
 800eab2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800eab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eab8:	4619      	mov	r1, r3
 800eaba:	481e      	ldr	r0, [pc, #120]	; (800eb34 <MX_GPIO_Init+0x2d8>)
 800eabc:	f7f4 fb9e 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800eac0:	2340      	movs	r3, #64	; 0x40
 800eac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eac4:	2302      	movs	r3, #2
 800eac6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eac8:	2300      	movs	r3, #0
 800eaca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eacc:	2303      	movs	r3, #3
 800eace:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800ead0:	230a      	movs	r3, #10
 800ead2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800ead4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ead8:	4619      	mov	r1, r3
 800eada:	4817      	ldr	r0, [pc, #92]	; (800eb38 <MX_GPIO_Init+0x2dc>)
 800eadc:	f7f4 fb8e 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800eae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eae6:	2300      	movs	r3, #0
 800eae8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaea:	2300      	movs	r3, #0
 800eaec:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800eaee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	4813      	ldr	r0, [pc, #76]	; (800eb44 <MX_GPIO_Init+0x2e8>)
 800eaf6:	f7f4 fb81 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800eafa:	2340      	movs	r3, #64	; 0x40
 800eafc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800eafe:	4b12      	ldr	r3, [pc, #72]	; (800eb48 <MX_GPIO_Init+0x2ec>)
 800eb00:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb02:	2300      	movs	r3, #0
 800eb04:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800eb06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	4804      	ldr	r0, [pc, #16]	; (800eb20 <MX_GPIO_Init+0x2c4>)
 800eb0e:	f7f4 fb75 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800eb12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800eb16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb18:	e018      	b.n	800eb4c <MX_GPIO_Init+0x2f0>
 800eb1a:	bf00      	nop
 800eb1c:	40023800 	.word	0x40023800
 800eb20:	40020c00 	.word	0x40020c00
 800eb24:	40022000 	.word	0x40022000
 800eb28:	40022800 	.word	0x40022800
 800eb2c:	40021c00 	.word	0x40021c00
 800eb30:	40021800 	.word	0x40021800
 800eb34:	40021000 	.word	0x40021000
 800eb38:	40020400 	.word	0x40020400
 800eb3c:	40020800 	.word	0x40020800
 800eb40:	40020000 	.word	0x40020000
 800eb44:	40022400 	.word	0x40022400
 800eb48:	10120000 	.word	0x10120000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb50:	2300      	movs	r3, #0
 800eb52:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb54:	2303      	movs	r3, #3
 800eb56:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb58:	230a      	movs	r3, #10
 800eb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb60:	4619      	mov	r1, r3
 800eb62:	48bb      	ldr	r0, [pc, #748]	; (800ee50 <MX_GPIO_Init+0x5f4>)
 800eb64:	f7f4 fb4a 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 800eb68:	23f0      	movs	r3, #240	; 0xf0
 800eb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			| SAI2_SDA_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb70:	2300      	movs	r3, #0
 800eb72:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb74:	2300      	movs	r3, #0
 800eb76:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800eb78:	230a      	movs	r3, #10
 800eb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800eb7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb80:	4619      	mov	r1, r3
 800eb82:	48b4      	ldr	r0, [pc, #720]	; (800ee54 <MX_GPIO_Init+0x5f8>)
 800eb84:	f7f4 fb3a 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800eb88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb8e:	2302      	movs	r3, #2
 800eb90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb92:	2300      	movs	r3, #0
 800eb94:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb96:	2300      	movs	r3, #0
 800eb98:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800eb9a:	230a      	movs	r3, #10
 800eb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800eb9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eba2:	4619      	mov	r1, r3
 800eba4:	48ac      	ldr	r0, [pc, #688]	; (800ee58 <MX_GPIO_Init+0x5fc>)
 800eba6:	f7f4 fb29 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800ebaa:	2320      	movs	r3, #32
 800ebac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800ebba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	48a6      	ldr	r0, [pc, #664]	; (800ee5c <MX_GPIO_Init+0x600>)
 800ebc2:	f7f4 fb1b 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800ebc6:	2308      	movs	r3, #8
 800ebc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebca:	2302      	movs	r3, #2
 800ebcc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ebd6:	230d      	movs	r3, #13
 800ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800ebda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ebde:	4619      	mov	r1, r3
 800ebe0:	489e      	ldr	r0, [pc, #632]	; (800ee5c <MX_GPIO_Init+0x600>)
 800ebe2:	f7f4 fb0b 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800ebe6:	f241 030c 	movw	r3, #4108	; 0x100c
 800ebea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ebec:	2301      	movs	r3, #1
 800ebee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ebf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4895      	ldr	r0, [pc, #596]	; (800ee54 <MX_GPIO_Init+0x5f8>)
 800ec00:	f7f4 fafc 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800ec04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800ec12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec16:	4619      	mov	r1, r3
 800ec18:	4891      	ldr	r0, [pc, #580]	; (800ee60 <MX_GPIO_Init+0x604>)
 800ec1a:	f7f4 faef 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800ec1e:	2308      	movs	r3, #8
 800ec20:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ec22:	2301      	movs	r3, #1
 800ec24:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec26:	2300      	movs	r3, #0
 800ec28:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ec2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec32:	4619      	mov	r1, r3
 800ec34:	488b      	ldr	r0, [pc, #556]	; (800ee64 <MX_GPIO_Init+0x608>)
 800ec36:	f7f4 fae1 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800ec3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec40:	2302      	movs	r3, #2
 800ec42:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec44:	2300      	movs	r3, #0
 800ec46:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ec4c:	230d      	movs	r3, #13
 800ec4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800ec50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec54:	4619      	mov	r1, r3
 800ec56:	4880      	ldr	r0, [pc, #512]	; (800ee58 <MX_GPIO_Init+0x5fc>)
 800ec58:	f7f4 fad0 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800ec5c:	2310      	movs	r3, #16
 800ec5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ec60:	2300      	movs	r3, #0
 800ec62:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec64:	2300      	movs	r3, #0
 800ec66:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ec68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	487b      	ldr	r0, [pc, #492]	; (800ee5c <MX_GPIO_Init+0x600>)
 800ec70:	f7f4 fac4 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800ec74:	2304      	movs	r3, #4
 800ec76:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec78:	2302      	movs	r3, #2
 800ec7a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec80:	2303      	movs	r3, #3
 800ec82:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800ec84:	230c      	movs	r3, #12
 800ec86:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800ec88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	4873      	ldr	r0, [pc, #460]	; (800ee5c <MX_GPIO_Init+0x600>)
 800ec90:	f7f4 fab4 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800ec94:	f248 0304 	movw	r3, #32772	; 0x8004
 800ec98:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800eca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eca6:	4619      	mov	r1, r3
 800eca8:	486f      	ldr	r0, [pc, #444]	; (800ee68 <MX_GPIO_Init+0x60c>)
 800ecaa:	f7f4 faa7 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800ecae:	2302      	movs	r3, #2
 800ecb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ecbe:	2305      	movs	r3, #5
 800ecc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800ecc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4862      	ldr	r0, [pc, #392]	; (800ee54 <MX_GPIO_Init+0x5f8>)
 800ecca:	f7f4 fa97 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800ecce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ecd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800ece0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ece4:	4619      	mov	r1, r3
 800ece6:	4860      	ldr	r0, [pc, #384]	; (800ee68 <MX_GPIO_Init+0x60c>)
 800ece8:	f7f4 fa88 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 800ecec:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800ecf0:	62fb      	str	r3, [r7, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecf2:	2302      	movs	r3, #2
 800ecf4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ecfe:	230d      	movs	r3, #13
 800ed00:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ed02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed06:	4619      	mov	r1, r3
 800ed08:	4857      	ldr	r0, [pc, #348]	; (800ee68 <MX_GPIO_Init+0x60c>)
 800ed0a:	f7f4 fa77 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed12:	2302      	movs	r3, #2
 800ed14:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed16:	2300      	movs	r3, #0
 800ed18:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ed1e:	2302      	movs	r3, #2
 800ed20:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800ed22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed26:	4619      	mov	r1, r3
 800ed28:	484a      	ldr	r0, [pc, #296]	; (800ee54 <MX_GPIO_Init+0x5f8>)
 800ed2a:	f7f4 fa67 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800ed2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed32:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed34:	2302      	movs	r3, #2
 800ed36:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ed40:	2301      	movs	r3, #1
 800ed42:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800ed44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4841      	ldr	r0, [pc, #260]	; (800ee50 <MX_GPIO_Init+0x5f4>)
 800ed4c:	f7f4 fa56 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800ed50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed54:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ed56:	4b45      	ldr	r3, [pc, #276]	; (800ee6c <MX_GPIO_Init+0x610>)
 800ed58:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800ed5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed62:	4619      	mov	r1, r3
 800ed64:	483b      	ldr	r0, [pc, #236]	; (800ee54 <MX_GPIO_Init+0x5f8>)
 800ed66:	f7f4 fa49 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800ed6a:	23c0      	movs	r3, #192	; 0xc0
 800ed6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed6e:	2302      	movs	r3, #2
 800ed70:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed72:	2300      	movs	r3, #0
 800ed74:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed76:	2303      	movs	r3, #3
 800ed78:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ed7a:	2308      	movs	r3, #8
 800ed7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed82:	4619      	mov	r1, r3
 800ed84:	4836      	ldr	r0, [pc, #216]	; (800ee60 <MX_GPIO_Init+0x604>)
 800ed86:	f7f4 fa39 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800ed8a:	23c8      	movs	r3, #200	; 0xc8
 800ed8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed92:	2300      	movs	r3, #0
 800ed94:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed96:	2300      	movs	r3, #0
 800ed98:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ed9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed9e:	4619      	mov	r1, r3
 800eda0:	482d      	ldr	r0, [pc, #180]	; (800ee58 <MX_GPIO_Init+0x5fc>)
 800eda2:	f7f4 fa2b 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800eda6:	2332      	movs	r3, #50	; 0x32
 800eda8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edaa:	2302      	movs	r3, #2
 800edac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edae:	2300      	movs	r3, #0
 800edb0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edb2:	2303      	movs	r3, #3
 800edb4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800edb6:	230b      	movs	r3, #11
 800edb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800edba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edbe:	4619      	mov	r1, r3
 800edc0:	4827      	ldr	r0, [pc, #156]	; (800ee60 <MX_GPIO_Init+0x604>)
 800edc2:	f7f4 fa1b 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800edc6:	2304      	movs	r3, #4
 800edc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edca:	2302      	movs	r3, #2
 800edcc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edd2:	2303      	movs	r3, #3
 800edd4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800edd6:	2309      	movs	r3, #9
 800edd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800edda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edde:	4619      	mov	r1, r3
 800ede0:	4823      	ldr	r0, [pc, #140]	; (800ee70 <MX_GPIO_Init+0x614>)
 800ede2:	f7f4 fa0b 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800ede6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800edea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edec:	2302      	movs	r3, #2
 800edee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edf0:	2300      	movs	r3, #0
 800edf2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edf4:	2303      	movs	r3, #3
 800edf6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800edf8:	2309      	movs	r3, #9
 800edfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800edfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee00:	4619      	mov	r1, r3
 800ee02:	4816      	ldr	r0, [pc, #88]	; (800ee5c <MX_GPIO_Init+0x600>)
 800ee04:	f7f4 f9fa 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800ee08:	2304      	movs	r3, #4
 800ee0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee10:	2300      	movs	r3, #0
 800ee12:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800ee14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee18:	4619      	mov	r1, r3
 800ee1a:	480f      	ldr	r0, [pc, #60]	; (800ee58 <MX_GPIO_Init+0x5fc>)
 800ee1c:	f7f4 f9ee 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800ee20:	2386      	movs	r3, #134	; 0x86
 800ee22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee24:	2302      	movs	r3, #2
 800ee26:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee2c:	2303      	movs	r3, #3
 800ee2e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ee30:	230b      	movs	r3, #11
 800ee32:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee38:	4619      	mov	r1, r3
 800ee3a:	4805      	ldr	r0, [pc, #20]	; (800ee50 <MX_GPIO_Init+0x5f4>)
 800ee3c:	f7f4 f9de 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 800ee40:	2350      	movs	r3, #80	; 0x50
 800ee42:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee44:	2302      	movs	r3, #2
 800ee46:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	e011      	b.n	800ee74 <MX_GPIO_Init+0x618>
 800ee50:	40020000 	.word	0x40020000
 800ee54:	40022000 	.word	0x40022000
 800ee58:	40021800 	.word	0x40021800
 800ee5c:	40020c00 	.word	0x40020c00
 800ee60:	40020800 	.word	0x40020800
 800ee64:	40022800 	.word	0x40022800
 800ee68:	40021c00 	.word	0x40021c00
 800ee6c:	10120000 	.word	0x10120000
 800ee70:	40020400 	.word	0x40020400
 800ee74:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ee76:	230d      	movs	r3, #13
 800ee78:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee7e:	4619      	mov	r1, r3
 800ee80:	4813      	ldr	r0, [pc, #76]	; (800eed0 <MX_GPIO_Init+0x674>)
 800ee82:	f7f4 f9bb 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800ee86:	2340      	movs	r3, #64	; 0x40
 800ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee8a:	2302      	movs	r3, #2
 800ee8c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee92:	2300      	movs	r3, #0
 800ee94:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800ee96:	2309      	movs	r3, #9
 800ee98:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800ee9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee9e:	4619      	mov	r1, r3
 800eea0:	480c      	ldr	r0, [pc, #48]	; (800eed4 <MX_GPIO_Init+0x678>)
 800eea2:	f7f4 f9ab 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800eea6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800eeaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeac:	2302      	movs	r3, #2
 800eeae:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800eeb8:	2305      	movs	r3, #5
 800eeba:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eec0:	4619      	mov	r1, r3
 800eec2:	4805      	ldr	r0, [pc, #20]	; (800eed8 <MX_GPIO_Init+0x67c>)
 800eec4:	f7f4 f99a 	bl	80031fc <HAL_GPIO_Init>

}
 800eec8:	bf00      	nop
 800eeca:	3740      	adds	r7, #64	; 0x40
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	40020000 	.word	0x40020000
 800eed4:	40021c00 	.word	0x40021c00
 800eed8:	40020400 	.word	0x40020400

0800eedc <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800eeea:	f107 010c 	add.w	r1, r7, #12
 800eeee:	230a      	movs	r3, #10
 800eef0:	2201      	movs	r2, #1
 800eef2:	4804      	ldr	r0, [pc, #16]	; (800ef04 <__io_putchar+0x28>)
 800eef4:	f7f7 fcf1 	bl	80068da <HAL_UART_Transmit>
	return ch;
 800eef8:	687b      	ldr	r3, [r7, #4]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	20001068 	.word	0x20001068

0800ef08 <_write>:

int _write(int file, char *ptr, int len) {
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ef14:	2300      	movs	r3, #0
 800ef16:	617b      	str	r3, [r7, #20]
 800ef18:	e009      	b.n	800ef2e <_write+0x26>
		__io_putchar(*ptr++);
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	1c5a      	adds	r2, r3, #1
 800ef1e:	60ba      	str	r2, [r7, #8]
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7ff ffda 	bl	800eedc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	617b      	str	r3, [r7, #20]
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	dbf1      	blt.n	800ef1a <_write+0x12>
	}
	return len;
 800ef36:	687b      	ldr	r3, [r7, #4]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <__io_getchar>:

int __io_getchar(void) {
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef Status = HAL_BUSY;
 800ef46:	2302      	movs	r3, #2
 800ef48:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	while (Status != HAL_OK)
 800ef4a:	e007      	b.n	800ef5c <__io_getchar+0x1c>
		Status = HAL_UART_Receive(&huart1, &Data, 1, 10);
 800ef4c:	1db9      	adds	r1, r7, #6
 800ef4e:	230a      	movs	r3, #10
 800ef50:	2201      	movs	r2, #1
 800ef52:	4806      	ldr	r0, [pc, #24]	; (800ef6c <__io_getchar+0x2c>)
 800ef54:	f7f7 fd4c 	bl	80069f0 <HAL_UART_Receive>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	71fb      	strb	r3, [r7, #7]
	while (Status != HAL_OK)
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1f4      	bne.n	800ef4c <__io_getchar+0xc>

	return (Data);
 800ef62:	79bb      	ldrb	r3, [r7, #6]
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	20001068 	.word	0x20001068

0800ef70 <_read>:

int _read(int file, char *ptr, int len) {
 800ef70:	b590      	push	{r4, r7, lr}
 800ef72:	b087      	sub	sp, #28
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	617b      	str	r3, [r7, #20]
 800ef80:	e00a      	b.n	800ef98 <_read+0x28>
		*ptr++ = __io_getchar();
 800ef82:	68bc      	ldr	r4, [r7, #8]
 800ef84:	1c63      	adds	r3, r4, #1
 800ef86:	60bb      	str	r3, [r7, #8]
 800ef88:	f7ff ffda 	bl	800ef40 <__io_getchar>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	3301      	adds	r3, #1
 800ef96:	617b      	str	r3, [r7, #20]
 800ef98:	697a      	ldr	r2, [r7, #20]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	dbf0      	blt.n	800ef82 <_read+0x12>
	}
	return len;
 800efa0:	687b      	ldr	r3, [r7, #4]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	371c      	adds	r7, #28
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd90      	pop	{r4, r7, pc}
	...

0800efac <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a04      	ldr	r2, [pc, #16]	; (800efcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d101      	bne.n	800efc2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800efbe:	f7f2 fe23 	bl	8001c08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800efc2:	bf00      	nop
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	40010000 	.word	0x40010000

0800efd0 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	printf("Error file = %s Line = %d", file, line);
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	6879      	ldr	r1, [r7, #4]
 800efde:	4803      	ldr	r0, [pc, #12]	; (800efec <_Error_Handler+0x1c>)
 800efe0:	f001 ff4c 	bl	8010e7c <iprintf>

	/* USER CODE END Error_Handler_Debug */
}
 800efe4:	bf00      	nop
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	080136b4 	.word	0x080136b4

0800eff0 <SDRAMDISK_initialize>:
/**
 * @brief  Initializes a Drive
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SDRAMDISK_initialize(BYTE lun) {
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	4603      	mov	r3, r0
 800eff8:	71fb      	strb	r3, [r7, #7]
	Stat = STA_NOINIT;
 800effa:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <SDRAMDISK_initialize+0x38>)
 800effc:	2201      	movs	r2, #1
 800effe:	701a      	strb	r2, [r3, #0]

	/* Configure the SDRAM device */

	//TV: Assumed ready after main init
	if (BSP_SDRAM_Init() == SDRAM_OK) {
 800f000:	f7fe f876 	bl	800d0f0 <BSP_SDRAM_Init>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d107      	bne.n	800f01a <SDRAMDISK_initialize+0x2a>
		Stat &= ~STA_NOINIT;
 800f00a:	4b07      	ldr	r3, [pc, #28]	; (800f028 <SDRAMDISK_initialize+0x38>)
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	f023 0301 	bic.w	r3, r3, #1
 800f014:	b2da      	uxtb	r2, r3
 800f016:	4b04      	ldr	r3, [pc, #16]	; (800f028 <SDRAMDISK_initialize+0x38>)
 800f018:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800f01a:	4b03      	ldr	r3, [pc, #12]	; (800f028 <SDRAMDISK_initialize+0x38>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	b2db      	uxtb	r3, r3
}
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	20000123 	.word	0x20000123

0800f02c <SDRAMDISK_status>:
/**
 * @brief  Gets Disk Status
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SDRAMDISK_status(BYTE lun) {
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	71fb      	strb	r3, [r7, #7]

	//TV: Assumed ready after main init
	Stat &= ~STA_NOINIT;
 800f036:	4b08      	ldr	r3, [pc, #32]	; (800f058 <SDRAMDISK_status+0x2c>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	f023 0301 	bic.w	r3, r3, #1
 800f040:	b2da      	uxtb	r2, r3
 800f042:	4b05      	ldr	r3, [pc, #20]	; (800f058 <SDRAMDISK_status+0x2c>)
 800f044:	701a      	strb	r2, [r3, #0]

	return Stat;
 800f046:	4b04      	ldr	r3, [pc, #16]	; (800f058 <SDRAMDISK_status+0x2c>)
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	b2db      	uxtb	r3, r3
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	20000123 	.word	0x20000123

0800f05c <SDRAMDISK_read>:
 */

/* USER CODE BEGIN beforeWriteSection */

//TV: Moved to user code because changes
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
 800f062:	60b9      	str	r1, [r7, #8]
 800f064:	607a      	str	r2, [r7, #4]
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	4603      	mov	r3, r0
 800f06a:	73fb      	strb	r3, [r7, #15]
	uint32_t *pSrcBuffer = (uint32_t *) &buff;
 800f06c:	f107 0308 	add.w	r3, r7, #8
 800f070:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	025b      	lsls	r3, r3, #9
 800f076:	089b      	lsrs	r3, r3, #2
 800f078:	61bb      	str	r3, [r7, #24]
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	4b08      	ldr	r3, [pc, #32]	; (800f0a0 <SDRAMDISK_read+0x44>)
 800f07e:	4413      	add	r3, r2
 800f080:	025b      	lsls	r3, r3, #9
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 800f082:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 800f084:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pSrcBuffer, BufferSize);
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 800f08a:	69ba      	ldr	r2, [r7, #24]
 800f08c:	4619      	mov	r1, r3
 800f08e:	f7fe f83b 	bl	800d108 <BSP_SDRAM_ReadData>
 800f092:	4603      	mov	r3, r0
 800f094:	74fb      	strb	r3, [r7, #19]

	return RES_OK;
 800f096:	7cfb      	ldrb	r3, [r7, #19]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3720      	adds	r7, #32
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	00600800 	.word	0x00600800

0800f0a4 <SDRAMDISK_write>:

/* USER CODE BEGIN beforeIoctlSection */

//TV: Moved to user code because changes
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60b9      	str	r1, [r7, #8]
 800f0ac:	607a      	str	r2, [r7, #4]
 800f0ae:	603b      	str	r3, [r7, #0]
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	73fb      	strb	r3, [r7, #15]
	uint32_t *pDstBuffer = (uint32_t *) &buff;
 800f0b4:	f107 0308 	add.w	r3, r7, #8
 800f0b8:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	025b      	lsls	r3, r3, #9
 800f0be:	089b      	lsrs	r3, r3, #2
 800f0c0:	61bb      	str	r3, [r7, #24]
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	4b08      	ldr	r3, [pc, #32]	; (800f0e8 <SDRAMDISK_write+0x44>)
 800f0c6:	4413      	add	r3, r2
 800f0c8:	025b      	lsls	r3, r3, #9
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 800f0ca:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 800f0cc:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pDstBuffer, BufferSize);
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 800f0d2:	69ba      	ldr	r2, [r7, #24]
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	f7fe f831 	bl	800d13c <BSP_SDRAM_WriteData>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*(__IO uint32_t *) pSramAddress++ = *pDstBuffer++;
	//}

	return RES_OK;
 800f0de:	7cfb      	ldrb	r3, [r7, #19]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3720      	adds	r7, #32
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	00600800 	.word	0x00600800

0800f0ec <SDRAMDISK_ioctl>:

/* USER CODE BEGIN lastSection */

//TV: Moved to user code because changes
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	603a      	str	r2, [r7, #0]
 800f0f6:	71fb      	strb	r3, [r7, #7]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT)
 800f100:	4b1b      	ldr	r3, [pc, #108]	; (800f170 <SDRAMDISK_ioctl+0x84>)
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	b2db      	uxtb	r3, r3
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <SDRAMDISK_ioctl+0x26>
		return RES_NOTRDY;
 800f10e:	2303      	movs	r3, #3
 800f110:	e027      	b.n	800f162 <SDRAMDISK_ioctl+0x76>

	switch (cmd) {
 800f112:	79bb      	ldrb	r3, [r7, #6]
 800f114:	2b03      	cmp	r3, #3
 800f116:	d821      	bhi.n	800f15c <SDRAMDISK_ioctl+0x70>
 800f118:	a201      	add	r2, pc, #4	; (adr r2, 800f120 <SDRAMDISK_ioctl+0x34>)
 800f11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f11e:	bf00      	nop
 800f120:	0800f131 	.word	0x0800f131
 800f124:	0800f137 	.word	0x0800f137
 800f128:	0800f143 	.word	0x0800f143
 800f12c:	0800f151 	.word	0x0800f151
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	73fb      	strb	r3, [r7, #15]
		break;
 800f134:	e014      	b.n	800f160 <SDRAMDISK_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	4a0e      	ldr	r2, [pc, #56]	; (800f174 <SDRAMDISK_ioctl+0x88>)
 800f13a:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800f13c:	2300      	movs	r3, #0
 800f13e:	73fb      	strb	r3, [r7, #15]
		break;
 800f140:	e00e      	b.n	800f160 <SDRAMDISK_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f148:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 800f14a:	2300      	movs	r3, #0
 800f14c:	73fb      	strb	r3, [r7, #15]
		break;
 800f14e:	e007      	b.n	800f160 <SDRAMDISK_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2201      	movs	r2, #1
 800f154:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	73fb      	strb	r3, [r7, #15]
		break;
 800f15a:	e001      	b.n	800f160 <SDRAMDISK_ioctl+0x74>

	default:
		res = RES_PARERR;
 800f15c:	2304      	movs	r3, #4
 800f15e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f160:	7bfb      	ldrb	r3, [r7, #15]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	20000123 	.word	0x20000123
 800f174:	007ff800 	.word	0x007ff800

0800f178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f17c:	2003      	movs	r0, #3
 800f17e:	f7f3 f973 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800f182:	2200      	movs	r2, #0
 800f184:	2100      	movs	r1, #0
 800f186:	f06f 000b 	mvn.w	r0, #11
 800f18a:	f7f3 f978 	bl	800247e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800f18e:	2200      	movs	r2, #0
 800f190:	2100      	movs	r1, #0
 800f192:	f06f 000a 	mvn.w	r0, #10
 800f196:	f7f3 f972 	bl	800247e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800f19a:	2200      	movs	r2, #0
 800f19c:	2100      	movs	r1, #0
 800f19e:	f06f 0009 	mvn.w	r0, #9
 800f1a2:	f7f3 f96c 	bl	800247e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	f06f 0004 	mvn.w	r0, #4
 800f1ae:	f7f3 f966 	bl	800247e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	f06f 0003 	mvn.w	r0, #3
 800f1ba:	f7f3 f960 	bl	800247e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800f1be:	2200      	movs	r2, #0
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	f06f 0001 	mvn.w	r0, #1
 800f1c6:	f7f3 f95a 	bl	800247e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d2:	f7f3 f954 	bl	800247e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f1d6:	bf00      	nop
 800f1d8:	bd80      	pop	{r7, pc}
	...

0800f1dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a15      	ldr	r2, [pc, #84]	; (800f240 <HAL_ADC_MspInit+0x64>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d124      	bne.n	800f238 <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f1ee:	4a15      	ldr	r2, [pc, #84]	; (800f244 <HAL_ADC_MspInit+0x68>)
 800f1f0:	4b14      	ldr	r3, [pc, #80]	; (800f244 <HAL_ADC_MspInit+0x68>)
 800f1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f1f8:	6453      	str	r3, [r2, #68]	; 0x44
 800f1fa:	4b12      	ldr	r3, [pc, #72]	; (800f244 <HAL_ADC_MspInit+0x68>)
 800f1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f202:	60bb      	str	r3, [r7, #8]
 800f204:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800f206:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800f20a:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f20c:	2303      	movs	r3, #3
 800f20e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f210:	2300      	movs	r3, #0
 800f212:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f214:	f107 030c 	add.w	r3, r7, #12
 800f218:	4619      	mov	r1, r3
 800f21a:	480b      	ldr	r0, [pc, #44]	; (800f248 <HAL_ADC_MspInit+0x6c>)
 800f21c:	f7f3 ffee 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800f220:	2301      	movs	r3, #1
 800f222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f224:	2303      	movs	r3, #3
 800f226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800f22c:	f107 030c 	add.w	r3, r7, #12
 800f230:	4619      	mov	r1, r3
 800f232:	4806      	ldr	r0, [pc, #24]	; (800f24c <HAL_ADC_MspInit+0x70>)
 800f234:	f7f3 ffe2 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800f238:	bf00      	nop
 800f23a:	3720      	adds	r7, #32
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	40012200 	.word	0x40012200
 800f244:	40023800 	.word	0x40023800
 800f248:	40021400 	.word	0x40021400
 800f24c:	40020000 	.word	0x40020000

0800f250 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a0a      	ldr	r2, [pc, #40]	; (800f288 <HAL_CRC_MspInit+0x38>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d10b      	bne.n	800f27a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800f262:	4a0a      	ldr	r2, [pc, #40]	; (800f28c <HAL_CRC_MspInit+0x3c>)
 800f264:	4b09      	ldr	r3, [pc, #36]	; (800f28c <HAL_CRC_MspInit+0x3c>)
 800f266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f26c:	6313      	str	r3, [r2, #48]	; 0x30
 800f26e:	4b07      	ldr	r3, [pc, #28]	; (800f28c <HAL_CRC_MspInit+0x3c>)
 800f270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f276:	60fb      	str	r3, [r7, #12]
 800f278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800f27a:	bf00      	nop
 800f27c:	3714      	adds	r7, #20
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	40023000 	.word	0x40023000
 800f28c:	40023800 	.word	0x40023800

0800f290 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a0a      	ldr	r2, [pc, #40]	; (800f2c8 <HAL_DMA2D_MspInit+0x38>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d10b      	bne.n	800f2ba <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800f2a2:	4a0a      	ldr	r2, [pc, #40]	; (800f2cc <HAL_DMA2D_MspInit+0x3c>)
 800f2a4:	4b09      	ldr	r3, [pc, #36]	; (800f2cc <HAL_DMA2D_MspInit+0x3c>)
 800f2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f2ac:	6313      	str	r3, [r2, #48]	; 0x30
 800f2ae:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <HAL_DMA2D_MspInit+0x3c>)
 800f2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2b6:	60fb      	str	r3, [r7, #12]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800f2ba:	bf00      	nop
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	4002b000 	.word	0x4002b000
 800f2cc:	40023800 	.word	0x40023800

0800f2d0 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a42      	ldr	r2, [pc, #264]	; (800f3e8 <HAL_I2C_MspInit+0x118>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d17d      	bne.n	800f3de <HAL_I2C_MspInit+0x10e>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800f2e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800f2e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f2e8:	2312      	movs	r3, #18
 800f2ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800f2f4:	2304      	movs	r3, #4
 800f2f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f2f8:	f107 030c 	add.w	r3, r7, #12
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	483b      	ldr	r0, [pc, #236]	; (800f3ec <HAL_I2C_MspInit+0x11c>)
 800f300:	f7f3 ff7c 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800f304:	4a3a      	ldr	r2, [pc, #232]	; (800f3f0 <HAL_I2C_MspInit+0x120>)
 800f306:	4b3a      	ldr	r3, [pc, #232]	; (800f3f0 <HAL_I2C_MspInit+0x120>)
 800f308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f30a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f30e:	6413      	str	r3, [r2, #64]	; 0x40
 800f310:	4b37      	ldr	r3, [pc, #220]	; (800f3f0 <HAL_I2C_MspInit+0x120>)
 800f312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f318:	60bb      	str	r3, [r7, #8]
 800f31a:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 800f31c:	4b35      	ldr	r3, [pc, #212]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f31e:	4a36      	ldr	r2, [pc, #216]	; (800f3f8 <HAL_I2C_MspInit+0x128>)
 800f320:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 800f322:	4b34      	ldr	r3, [pc, #208]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f328:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f32a:	4b32      	ldr	r3, [pc, #200]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f330:	4b30      	ldr	r3, [pc, #192]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f332:	2200      	movs	r2, #0
 800f334:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f336:	4b2f      	ldr	r3, [pc, #188]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f33c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f33e:	4b2d      	ldr	r3, [pc, #180]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f340:	2200      	movs	r2, #0
 800f342:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f344:	4b2b      	ldr	r3, [pc, #172]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f346:	2200      	movs	r2, #0
 800f348:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800f34a:	4b2a      	ldr	r3, [pc, #168]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800f350:	4b28      	ldr	r3, [pc, #160]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f352:	2200      	movs	r2, #0
 800f354:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f356:	4b27      	ldr	r3, [pc, #156]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f358:	2200      	movs	r2, #0
 800f35a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800f35c:	4825      	ldr	r0, [pc, #148]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f35e:	f7f3 f9cd 	bl	80026fc <HAL_DMA_Init>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d004      	beq.n	800f372 <HAL_I2C_MspInit+0xa2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800f368:	f240 110d 	movw	r1, #269	; 0x10d
 800f36c:	4823      	ldr	r0, [pc, #140]	; (800f3fc <HAL_I2C_MspInit+0x12c>)
 800f36e:	f7ff fe2f 	bl	800efd0 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4a1f      	ldr	r2, [pc, #124]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f376:	63da      	str	r2, [r3, #60]	; 0x3c
 800f378:	4a1e      	ldr	r2, [pc, #120]	; (800f3f4 <HAL_I2C_MspInit+0x124>)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800f37e:	4b20      	ldr	r3, [pc, #128]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f380:	4a20      	ldr	r2, [pc, #128]	; (800f404 <HAL_I2C_MspInit+0x134>)
 800f382:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800f384:	4b1e      	ldr	r3, [pc, #120]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f386:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800f38a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f38c:	4b1c      	ldr	r3, [pc, #112]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f38e:	2240      	movs	r2, #64	; 0x40
 800f390:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f392:	4b1b      	ldr	r3, [pc, #108]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f394:	2200      	movs	r2, #0
 800f396:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 800f398:	4b19      	ldr	r3, [pc, #100]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f39a:	2200      	movs	r2, #0
 800f39c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f39e:	4b18      	ldr	r3, [pc, #96]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f3a4:	4b16      	ldr	r3, [pc, #88]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800f3aa:	4b15      	ldr	r3, [pc, #84]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f3b0:	4b13      	ldr	r3, [pc, #76]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f3b6:	4b12      	ldr	r3, [pc, #72]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800f3bc:	4810      	ldr	r0, [pc, #64]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3be:	f7f3 f99d 	bl	80026fc <HAL_DMA_Init>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d004      	beq.n	800f3d2 <HAL_I2C_MspInit+0x102>
    {
      _Error_Handler(__FILE__, __LINE__);
 800f3c8:	f240 111f 	movw	r1, #287	; 0x11f
 800f3cc:	480b      	ldr	r0, [pc, #44]	; (800f3fc <HAL_I2C_MspInit+0x12c>)
 800f3ce:	f7ff fdff 	bl	800efd0 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4a0a      	ldr	r2, [pc, #40]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3d6:	639a      	str	r2, [r3, #56]	; 0x38
 800f3d8:	4a09      	ldr	r2, [pc, #36]	; (800f400 <HAL_I2C_MspInit+0x130>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800f3de:	bf00      	nop
 800f3e0:	3720      	adds	r7, #32
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	40005c00 	.word	0x40005c00
 800f3ec:	40021c00 	.word	0x40021c00
 800f3f0:	40023800 	.word	0x40023800
 800f3f4:	20000c94 	.word	0x20000c94
 800f3f8:	40026028 	.word	0x40026028
 800f3fc:	080136d0 	.word	0x080136d0
 800f400:	200009c4 	.word	0x200009c4
 800f404:	40026070 	.word	0x40026070

0800f408 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a32      	ldr	r2, [pc, #200]	; (800f4e0 <HAL_LTDC_MspInit+0xd8>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d15e      	bne.n	800f4d8 <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800f41a:	4a32      	ldr	r2, [pc, #200]	; (800f4e4 <HAL_LTDC_MspInit+0xdc>)
 800f41c:	4b31      	ldr	r3, [pc, #196]	; (800f4e4 <HAL_LTDC_MspInit+0xdc>)
 800f41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f420:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f424:	6453      	str	r3, [r2, #68]	; 0x44
 800f426:	4b2f      	ldr	r3, [pc, #188]	; (800f4e4 <HAL_LTDC_MspInit+0xdc>)
 800f428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f42a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f42e:	60bb      	str	r3, [r7, #8]
 800f430:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800f432:	2310      	movs	r3, #16
 800f434:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f436:	2302      	movs	r3, #2
 800f438:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f43e:	2300      	movs	r3, #0
 800f440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f442:	230e      	movs	r3, #14
 800f444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800f446:	f107 030c 	add.w	r3, r7, #12
 800f44a:	4619      	mov	r1, r3
 800f44c:	4826      	ldr	r0, [pc, #152]	; (800f4e8 <HAL_LTDC_MspInit+0xe0>)
 800f44e:	f7f3 fed5 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800f452:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800f456:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f458:	2302      	movs	r3, #2
 800f45a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f45c:	2300      	movs	r3, #0
 800f45e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f460:	2300      	movs	r3, #0
 800f462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f464:	230e      	movs	r3, #14
 800f466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800f468:	f107 030c 	add.w	r3, r7, #12
 800f46c:	4619      	mov	r1, r3
 800f46e:	481f      	ldr	r0, [pc, #124]	; (800f4ec <HAL_LTDC_MspInit+0xe4>)
 800f470:	f7f3 fec4 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800f474:	23f7      	movs	r3, #247	; 0xf7
 800f476:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f478:	2302      	movs	r3, #2
 800f47a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f47c:	2300      	movs	r3, #0
 800f47e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f480:	2300      	movs	r3, #0
 800f482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f484:	230e      	movs	r3, #14
 800f486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800f488:	f107 030c 	add.w	r3, r7, #12
 800f48c:	4619      	mov	r1, r3
 800f48e:	4818      	ldr	r0, [pc, #96]	; (800f4f0 <HAL_LTDC_MspInit+0xe8>)
 800f490:	f7f3 feb4 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800f494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f498:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f49a:	2302      	movs	r3, #2
 800f49c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800f4a6:	2309      	movs	r3, #9
 800f4a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800f4aa:	f107 030c 	add.w	r3, r7, #12
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	4810      	ldr	r0, [pc, #64]	; (800f4f4 <HAL_LTDC_MspInit+0xec>)
 800f4b2:	f7f3 fea3 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800f4b6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800f4ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4bc:	2302      	movs	r3, #2
 800f4be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f4c8:	230e      	movs	r3, #14
 800f4ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f4cc:	f107 030c 	add.w	r3, r7, #12
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	4809      	ldr	r0, [pc, #36]	; (800f4f8 <HAL_LTDC_MspInit+0xf0>)
 800f4d4:	f7f3 fe92 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800f4d8:	bf00      	nop
 800f4da:	3720      	adds	r7, #32
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	40016800 	.word	0x40016800
 800f4e4:	40023800 	.word	0x40023800
 800f4e8:	40021000 	.word	0x40021000
 800f4ec:	40022400 	.word	0x40022400
 800f4f0:	40022800 	.word	0x40022800
 800f4f4:	40021800 	.word	0x40021800
 800f4f8:	40022000 	.word	0x40022000

0800f4fc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b088      	sub	sp, #32
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a19      	ldr	r2, [pc, #100]	; (800f570 <HAL_UART_MspInit+0x74>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d12c      	bne.n	800f568 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800f50e:	4a19      	ldr	r2, [pc, #100]	; (800f574 <HAL_UART_MspInit+0x78>)
 800f510:	4b18      	ldr	r3, [pc, #96]	; (800f574 <HAL_UART_MspInit+0x78>)
 800f512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f514:	f043 0310 	orr.w	r3, r3, #16
 800f518:	6453      	str	r3, [r2, #68]	; 0x44
 800f51a:	4b16      	ldr	r3, [pc, #88]	; (800f574 <HAL_UART_MspInit+0x78>)
 800f51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f51e:	f003 0310 	and.w	r3, r3, #16
 800f522:	60bb      	str	r3, [r7, #8]
 800f524:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800f526:	2380      	movs	r3, #128	; 0x80
 800f528:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f52a:	2302      	movs	r3, #2
 800f52c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f52e:	2300      	movs	r3, #0
 800f530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f532:	2300      	movs	r3, #0
 800f534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f536:	2307      	movs	r3, #7
 800f538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800f53a:	f107 030c 	add.w	r3, r7, #12
 800f53e:	4619      	mov	r1, r3
 800f540:	480d      	ldr	r0, [pc, #52]	; (800f578 <HAL_UART_MspInit+0x7c>)
 800f542:	f7f3 fe5b 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800f546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f54a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f54c:	2302      	movs	r3, #2
 800f54e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f550:	2300      	movs	r3, #0
 800f552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f554:	2300      	movs	r3, #0
 800f556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f558:	2307      	movs	r3, #7
 800f55a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800f55c:	f107 030c 	add.w	r3, r7, #12
 800f560:	4619      	mov	r1, r3
 800f562:	4806      	ldr	r0, [pc, #24]	; (800f57c <HAL_UART_MspInit+0x80>)
 800f564:	f7f3 fe4a 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800f568:	bf00      	nop
 800f56a:	3720      	adds	r7, #32
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	40011000 	.word	0x40011000
 800f574:	40023800 	.word	0x40023800
 800f578:	40020400 	.word	0x40020400
 800f57c:	40020000 	.word	0x40020000

0800f580 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800f586:	4b3b      	ldr	r3, [pc, #236]	; (800f674 <HAL_FMC_MspInit+0xf4>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d16d      	bne.n	800f66a <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800f58e:	4b39      	ldr	r3, [pc, #228]	; (800f674 <HAL_FMC_MspInit+0xf4>)
 800f590:	2201      	movs	r2, #1
 800f592:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800f594:	4a38      	ldr	r2, [pc, #224]	; (800f678 <HAL_FMC_MspInit+0xf8>)
 800f596:	4b38      	ldr	r3, [pc, #224]	; (800f678 <HAL_FMC_MspInit+0xf8>)
 800f598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f59a:	f043 0301 	orr.w	r3, r3, #1
 800f59e:	6393      	str	r3, [r2, #56]	; 0x38
 800f5a0:	4b35      	ldr	r3, [pc, #212]	; (800f678 <HAL_FMC_MspInit+0xf8>)
 800f5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a4:	f003 0301 	and.w	r3, r3, #1
 800f5a8:	603b      	str	r3, [r7, #0]
 800f5aa:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800f5ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 800f5b0:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5b2:	2302      	movs	r3, #2
 800f5b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5ba:	2303      	movs	r3, #3
 800f5bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f5be:	230c      	movs	r3, #12
 800f5c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f5c2:	1d3b      	adds	r3, r7, #4
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	482d      	ldr	r0, [pc, #180]	; (800f67c <HAL_FMC_MspInit+0xfc>)
 800f5c8:	f7f3 fe18 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800f5cc:	f248 1333 	movw	r3, #33075	; 0x8133
 800f5d0:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5d2:	2302      	movs	r3, #2
 800f5d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5da:	2303      	movs	r3, #3
 800f5dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f5de:	230c      	movs	r3, #12
 800f5e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f5e2:	1d3b      	adds	r3, r7, #4
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	4826      	ldr	r0, [pc, #152]	; (800f680 <HAL_FMC_MspInit+0x100>)
 800f5e8:	f7f3 fe08 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800f5ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 800f5f0:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5f2:	2302      	movs	r3, #2
 800f5f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f5fe:	230c      	movs	r3, #12
 800f600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f602:	1d3b      	adds	r3, r7, #4
 800f604:	4619      	mov	r1, r3
 800f606:	481f      	ldr	r0, [pc, #124]	; (800f684 <HAL_FMC_MspInit+0x104>)
 800f608:	f7f3 fdf8 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800f60c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800f610:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f612:	2302      	movs	r3, #2
 800f614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f616:	2300      	movs	r3, #0
 800f618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f61a:	2303      	movs	r3, #3
 800f61c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f61e:	230c      	movs	r3, #12
 800f620:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f622:	1d3b      	adds	r3, r7, #4
 800f624:	4619      	mov	r1, r3
 800f626:	4818      	ldr	r0, [pc, #96]	; (800f688 <HAL_FMC_MspInit+0x108>)
 800f628:	f7f3 fde8 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800f62c:	2328      	movs	r3, #40	; 0x28
 800f62e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f630:	2302      	movs	r3, #2
 800f632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f634:	2300      	movs	r3, #0
 800f636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f638:	2303      	movs	r3, #3
 800f63a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f63c:	230c      	movs	r3, #12
 800f63e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f640:	1d3b      	adds	r3, r7, #4
 800f642:	4619      	mov	r1, r3
 800f644:	4811      	ldr	r0, [pc, #68]	; (800f68c <HAL_FMC_MspInit+0x10c>)
 800f646:	f7f3 fdd9 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800f64a:	2308      	movs	r3, #8
 800f64c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f64e:	2302      	movs	r3, #2
 800f650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f652:	2300      	movs	r3, #0
 800f654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f656:	2303      	movs	r3, #3
 800f658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f65a:	230c      	movs	r3, #12
 800f65c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800f65e:	1d3b      	adds	r3, r7, #4
 800f660:	4619      	mov	r1, r3
 800f662:	480b      	ldr	r0, [pc, #44]	; (800f690 <HAL_FMC_MspInit+0x110>)
 800f664:	f7f3 fdca 	bl	80031fc <HAL_GPIO_Init>
 800f668:	e000      	b.n	800f66c <HAL_FMC_MspInit+0xec>
    return;
 800f66a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	200004a0 	.word	0x200004a0
 800f678:	40023800 	.word	0x40023800
 800f67c:	40021000 	.word	0x40021000
 800f680:	40021800 	.word	0x40021800
 800f684:	40020c00 	.word	0x40020c00
 800f688:	40021400 	.word	0x40021400
 800f68c:	40021c00 	.word	0x40021c00
 800f690:	40020800 	.word	0x40020800

0800f694 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800f69c:	f7ff ff70 	bl	800f580 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800f6a0:	bf00      	nop
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b08c      	sub	sp, #48	; 0x30
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	6879      	ldr	r1, [r7, #4]
 800f6bc:	2019      	movs	r0, #25
 800f6be:	f7f2 fede 	bl	800247e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800f6c2:	2019      	movs	r0, #25
 800f6c4:	f7f2 fef7 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800f6c8:	4a1f      	ldr	r2, [pc, #124]	; (800f748 <HAL_InitTick+0xa0>)
 800f6ca:	4b1f      	ldr	r3, [pc, #124]	; (800f748 <HAL_InitTick+0xa0>)
 800f6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6ce:	f043 0301 	orr.w	r3, r3, #1
 800f6d2:	6453      	str	r3, [r2, #68]	; 0x44
 800f6d4:	4b1c      	ldr	r3, [pc, #112]	; (800f748 <HAL_InitTick+0xa0>)
 800f6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	60fb      	str	r3, [r7, #12]
 800f6de:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f6e0:	f107 0210 	add.w	r2, r7, #16
 800f6e4:	f107 0314 	add.w	r3, r7, #20
 800f6e8:	4611      	mov	r1, r2
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f6 f948 	bl	8005980 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800f6f0:	f7f6 f932 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fc:	4a13      	ldr	r2, [pc, #76]	; (800f74c <HAL_InitTick+0xa4>)
 800f6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f702:	0c9b      	lsrs	r3, r3, #18
 800f704:	3b01      	subs	r3, #1
 800f706:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800f708:	4b11      	ldr	r3, [pc, #68]	; (800f750 <HAL_InitTick+0xa8>)
 800f70a:	4a12      	ldr	r2, [pc, #72]	; (800f754 <HAL_InitTick+0xac>)
 800f70c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800f70e:	4b10      	ldr	r3, [pc, #64]	; (800f750 <HAL_InitTick+0xa8>)
 800f710:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f714:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800f716:	4a0e      	ldr	r2, [pc, #56]	; (800f750 <HAL_InitTick+0xa8>)
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800f71c:	4b0c      	ldr	r3, [pc, #48]	; (800f750 <HAL_InitTick+0xa8>)
 800f71e:	2200      	movs	r2, #0
 800f720:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f722:	4b0b      	ldr	r3, [pc, #44]	; (800f750 <HAL_InitTick+0xa8>)
 800f724:	2200      	movs	r2, #0
 800f726:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800f728:	4809      	ldr	r0, [pc, #36]	; (800f750 <HAL_InitTick+0xa8>)
 800f72a:	f7f6 fe2a 	bl	8006382 <HAL_TIM_Base_Init>
 800f72e:	4603      	mov	r3, r0
 800f730:	2b00      	cmp	r3, #0
 800f732:	d104      	bne.n	800f73e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800f734:	4806      	ldr	r0, [pc, #24]	; (800f750 <HAL_InitTick+0xa8>)
 800f736:	f7f6 fe59 	bl	80063ec <HAL_TIM_Base_Start_IT>
 800f73a:	4603      	mov	r3, r0
 800f73c:	e000      	b.n	800f740 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
}
 800f740:	4618      	mov	r0, r3
 800f742:	3730      	adds	r7, #48	; 0x30
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	40023800 	.word	0x40023800
 800f74c:	431bde83 	.word	0x431bde83
 800f750:	200015b0 	.word	0x200015b0
 800f754:	40010000 	.word	0x40010000

0800f758 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800f758:	b480      	push	{r7}
 800f75a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f75c:	bf00      	nop
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr

0800f766 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800f766:	b480      	push	{r7}
 800f768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f76a:	bf00      	nop
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr

0800f774 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800f778:	f7f2 fed4 	bl	8002524 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f77c:	bf00      	nop
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800f784:	4802      	ldr	r0, [pc, #8]	; (800f790 <DMA1_Stream1_IRQHandler+0x10>)
 800f786:	f7f3 f867 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800f78a:	bf00      	nop
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	20000c94 	.word	0x20000c94

0800f794 <DMA1_Stream4_IRQHandler>:

/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800f798:	4802      	ldr	r0, [pc, #8]	; (800f7a4 <DMA1_Stream4_IRQHandler+0x10>)
 800f79a:	f7f3 f85d 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800f79e:	bf00      	nop
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	200009c4 	.word	0x200009c4

0800f7a8 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f7ac:	4802      	ldr	r0, [pc, #8]	; (800f7b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800f7ae:	f7f6 fe38 	bl	8006422 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800f7b2:	bf00      	nop
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	200015b0 	.word	0x200015b0

0800f7bc <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800f7c0:	4802      	ldr	r0, [pc, #8]	; (800f7cc <OTG_HS_IRQHandler+0x10>)
 800f7c2:	f7f4 fc07 	bl	8003fd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800f7c6:	bf00      	nop
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	20002814 	.word	0x20002814

0800f7d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f7d4:	4a15      	ldr	r2, [pc, #84]	; (800f82c <SystemInit+0x5c>)
 800f7d6:	4b15      	ldr	r3, [pc, #84]	; (800f82c <SystemInit+0x5c>)
 800f7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f7e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f7e4:	4a12      	ldr	r2, [pc, #72]	; (800f830 <SystemInit+0x60>)
 800f7e6:	4b12      	ldr	r3, [pc, #72]	; (800f830 <SystemInit+0x60>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f043 0301 	orr.w	r3, r3, #1
 800f7ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f7f0:	4b0f      	ldr	r3, [pc, #60]	; (800f830 <SystemInit+0x60>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800f7f6:	490e      	ldr	r1, [pc, #56]	; (800f830 <SystemInit+0x60>)
 800f7f8:	4b0d      	ldr	r3, [pc, #52]	; (800f830 <SystemInit+0x60>)
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	4b0d      	ldr	r3, [pc, #52]	; (800f834 <SystemInit+0x64>)
 800f7fe:	4013      	ands	r3, r2
 800f800:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f802:	4b0b      	ldr	r3, [pc, #44]	; (800f830 <SystemInit+0x60>)
 800f804:	4a0c      	ldr	r2, [pc, #48]	; (800f838 <SystemInit+0x68>)
 800f806:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f808:	4a09      	ldr	r2, [pc, #36]	; (800f830 <SystemInit+0x60>)
 800f80a:	4b09      	ldr	r3, [pc, #36]	; (800f830 <SystemInit+0x60>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f812:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f814:	4b06      	ldr	r3, [pc, #24]	; (800f830 <SystemInit+0x60>)
 800f816:	2200      	movs	r2, #0
 800f818:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f81a:	4b04      	ldr	r3, [pc, #16]	; (800f82c <SystemInit+0x5c>)
 800f81c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f820:	609a      	str	r2, [r3, #8]
#endif
}
 800f822:	bf00      	nop
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	e000ed00 	.word	0xe000ed00
 800f830:	40023800 	.word	0x40023800
 800f834:	fef6ffff 	.word	0xfef6ffff
 800f838:	24003010 	.word	0x24003010

0800f83c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 800f840:	2201      	movs	r2, #1
 800f842:	4908      	ldr	r1, [pc, #32]	; (800f864 <MX_USB_DEVICE_Init+0x28>)
 800f844:	4808      	ldr	r0, [pc, #32]	; (800f868 <MX_USB_DEVICE_Init+0x2c>)
 800f846:	f7fc fbf6 	bl	800c036 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC);
 800f84a:	4908      	ldr	r1, [pc, #32]	; (800f86c <MX_USB_DEVICE_Init+0x30>)
 800f84c:	4806      	ldr	r0, [pc, #24]	; (800f868 <MX_USB_DEVICE_Init+0x2c>)
 800f84e:	f7fc fc1d 	bl	800c08c <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS);
 800f852:	4907      	ldr	r1, [pc, #28]	; (800f870 <MX_USB_DEVICE_Init+0x34>)
 800f854:	4804      	ldr	r0, [pc, #16]	; (800f868 <MX_USB_DEVICE_Init+0x2c>)
 800f856:	f7fc fb7f 	bl	800bf58 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 800f85a:	4803      	ldr	r0, [pc, #12]	; (800f868 <MX_USB_DEVICE_Init+0x2c>)
 800f85c:	f7fc fc30 	bl	800c0c0 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f860:	bf00      	nop
 800f862:	bd80      	pop	{r7, pc}
 800f864:	20000138 	.word	0x20000138
 800f868:	200015f0 	.word	0x200015f0
 800f86c:	20000020 	.word	0x20000020
 800f870:	20000128 	.word	0x20000128

0800f874 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800f878:	2200      	movs	r2, #0
 800f87a:	4905      	ldr	r1, [pc, #20]	; (800f890 <CDC_Init_HS+0x1c>)
 800f87c:	4805      	ldr	r0, [pc, #20]	; (800f894 <CDC_Init_HS+0x20>)
 800f87e:	f7fc fb82 	bl	800bf86 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800f882:	4905      	ldr	r1, [pc, #20]	; (800f898 <CDC_Init_HS+0x24>)
 800f884:	4803      	ldr	r0, [pc, #12]	; (800f894 <CDC_Init_HS+0x20>)
 800f886:	f7fc fb98 	bl	800bfba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f88a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	20002014 	.word	0x20002014
 800f894:	200015f0 	.word	0x200015f0
 800f898:	20001814 	.word	0x20001814

0800f89c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800f89c:	b480      	push	{r7}
 800f89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800f8a0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	6039      	str	r1, [r7, #0]
 800f8b6:	71fb      	strb	r3, [r7, #7]
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	2b23      	cmp	r3, #35	; 0x23
 800f8c0:	d84a      	bhi.n	800f958 <CDC_Control_HS+0xac>
 800f8c2:	a201      	add	r2, pc, #4	; (adr r2, 800f8c8 <CDC_Control_HS+0x1c>)
 800f8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c8:	0800f959 	.word	0x0800f959
 800f8cc:	0800f959 	.word	0x0800f959
 800f8d0:	0800f959 	.word	0x0800f959
 800f8d4:	0800f959 	.word	0x0800f959
 800f8d8:	0800f959 	.word	0x0800f959
 800f8dc:	0800f959 	.word	0x0800f959
 800f8e0:	0800f959 	.word	0x0800f959
 800f8e4:	0800f959 	.word	0x0800f959
 800f8e8:	0800f959 	.word	0x0800f959
 800f8ec:	0800f959 	.word	0x0800f959
 800f8f0:	0800f959 	.word	0x0800f959
 800f8f4:	0800f959 	.word	0x0800f959
 800f8f8:	0800f959 	.word	0x0800f959
 800f8fc:	0800f959 	.word	0x0800f959
 800f900:	0800f959 	.word	0x0800f959
 800f904:	0800f959 	.word	0x0800f959
 800f908:	0800f959 	.word	0x0800f959
 800f90c:	0800f959 	.word	0x0800f959
 800f910:	0800f959 	.word	0x0800f959
 800f914:	0800f959 	.word	0x0800f959
 800f918:	0800f959 	.word	0x0800f959
 800f91c:	0800f959 	.word	0x0800f959
 800f920:	0800f959 	.word	0x0800f959
 800f924:	0800f959 	.word	0x0800f959
 800f928:	0800f959 	.word	0x0800f959
 800f92c:	0800f959 	.word	0x0800f959
 800f930:	0800f959 	.word	0x0800f959
 800f934:	0800f959 	.word	0x0800f959
 800f938:	0800f959 	.word	0x0800f959
 800f93c:	0800f959 	.word	0x0800f959
 800f940:	0800f959 	.word	0x0800f959
 800f944:	0800f959 	.word	0x0800f959
 800f948:	0800f959 	.word	0x0800f959
 800f94c:	0800f959 	.word	0x0800f959
 800f950:	0800f959 	.word	0x0800f959
 800f954:	0800f959 	.word	0x0800f959
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f958:	bf00      	nop
  }

  return (USBD_OK);
 800f95a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	4805      	ldr	r0, [pc, #20]	; (800f98c <CDC_Receive_HS+0x24>)
 800f976:	f7fc fb20 	bl	800bfba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800f97a:	4804      	ldr	r0, [pc, #16]	; (800f98c <CDC_Receive_HS+0x24>)
 800f97c:	f7fc fb31 	bl	800bfe2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f980:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f982:	4618      	mov	r0, r3
 800f984:	3708      	adds	r7, #8
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	200015f0 	.word	0x200015f0

0800f990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b08a      	sub	sp, #40	; 0x28
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a33      	ldr	r2, [pc, #204]	; (800fa6c <HAL_PCD_MspInit+0xdc>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d160      	bne.n	800fa64 <HAL_PCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800f9a2:	f643 4323 	movw	r3, #15395	; 0x3c23
 800f9a6:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9a8:	2302      	movs	r3, #2
 800f9aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9b0:	2303      	movs	r3, #3
 800f9b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f9b4:	230a      	movs	r3, #10
 800f9b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9b8:	f107 0314 	add.w	r3, r7, #20
 800f9bc:	4619      	mov	r1, r3
 800f9be:	482c      	ldr	r0, [pc, #176]	; (800fa70 <HAL_PCD_MspInit+0xe0>)
 800f9c0:	f7f3 fc1c 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f9c4:	2310      	movs	r3, #16
 800f9c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9c8:	2302      	movs	r3, #2
 800f9ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9d0:	2303      	movs	r3, #3
 800f9d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f9d4:	230a      	movs	r3, #10
 800f9d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f9d8:	f107 0314 	add.w	r3, r7, #20
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4825      	ldr	r0, [pc, #148]	; (800fa74 <HAL_PCD_MspInit+0xe4>)
 800f9e0:	f7f3 fc0c 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800f9e4:	2305      	movs	r3, #5
 800f9e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9e8:	2302      	movs	r3, #2
 800f9ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9f0:	2303      	movs	r3, #3
 800f9f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f9f4:	230a      	movs	r3, #10
 800f9f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f9f8:	f107 0314 	add.w	r3, r7, #20
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	481e      	ldr	r0, [pc, #120]	; (800fa78 <HAL_PCD_MspInit+0xe8>)
 800fa00:	f7f3 fbfc 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800fa04:	2328      	movs	r3, #40	; 0x28
 800fa06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa08:	2302      	movs	r3, #2
 800fa0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa10:	2303      	movs	r3, #3
 800fa12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800fa14:	230a      	movs	r3, #10
 800fa16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa18:	f107 0314 	add.w	r3, r7, #20
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	4817      	ldr	r0, [pc, #92]	; (800fa7c <HAL_PCD_MspInit+0xec>)
 800fa20:	f7f3 fbec 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800fa24:	4a16      	ldr	r2, [pc, #88]	; (800fa80 <HAL_PCD_MspInit+0xf0>)
 800fa26:	4b16      	ldr	r3, [pc, #88]	; (800fa80 <HAL_PCD_MspInit+0xf0>)
 800fa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa2e:	6313      	str	r3, [r2, #48]	; 0x30
 800fa30:	4b13      	ldr	r3, [pc, #76]	; (800fa80 <HAL_PCD_MspInit+0xf0>)
 800fa32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa38:	613b      	str	r3, [r7, #16]
 800fa3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800fa3c:	4a10      	ldr	r2, [pc, #64]	; (800fa80 <HAL_PCD_MspInit+0xf0>)
 800fa3e:	4b10      	ldr	r3, [pc, #64]	; (800fa80 <HAL_PCD_MspInit+0xf0>)
 800fa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa46:	6313      	str	r3, [r2, #48]	; 0x30
 800fa48:	4b0d      	ldr	r3, [pc, #52]	; (800fa80 <HAL_PCD_MspInit+0xf0>)
 800fa4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fa50:	60fb      	str	r3, [r7, #12]
 800fa52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800fa54:	2200      	movs	r2, #0
 800fa56:	2100      	movs	r1, #0
 800fa58:	204d      	movs	r0, #77	; 0x4d
 800fa5a:	f7f2 fd10 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800fa5e:	204d      	movs	r0, #77	; 0x4d
 800fa60:	f7f2 fd29 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800fa64:	bf00      	nop
 800fa66:	3728      	adds	r7, #40	; 0x28
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	40040000 	.word	0x40040000
 800fa70:	40020400 	.word	0x40020400
 800fa74:	40021c00 	.word	0x40021c00
 800fa78:	40020800 	.word	0x40020800
 800fa7c:	40020000 	.word	0x40020000
 800fa80:	40023800 	.word	0x40023800

0800fa84 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	f7fc fb59 	bl	800c152 <USBD_LL_SetupStage>
}
 800faa0:	bf00      	nop
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	460b      	mov	r3, r1
 800fab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800faba:	78fa      	ldrb	r2, [r7, #3]
 800fabc:	6879      	ldr	r1, [r7, #4]
 800fabe:	4613      	mov	r3, r2
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	1a9b      	subs	r3, r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	440b      	add	r3, r1
 800fac8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	78fb      	ldrb	r3, [r7, #3]
 800fad0:	4619      	mov	r1, r3
 800fad2:	f7fc fb88 	bl	800c1e6 <USBD_LL_DataOutStage>
}
 800fad6:	bf00      	nop
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	460b      	mov	r3, r1
 800fae8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800faf0:	78fa      	ldrb	r2, [r7, #3]
 800faf2:	6879      	ldr	r1, [r7, #4]
 800faf4:	4613      	mov	r3, r2
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	1a9b      	subs	r3, r3, r2
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	440b      	add	r3, r1
 800fafe:	3344      	adds	r3, #68	; 0x44
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	78fb      	ldrb	r3, [r7, #3]
 800fb04:	4619      	mov	r1, r3
 800fb06:	f7fc fbc9 	bl	800c29c <USBD_LL_DataInStage>
}
 800fb0a:	bf00      	nop
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b082      	sub	sp, #8
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fc fcaf 	bl	800c484 <USBD_LL_SOF>
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b084      	sub	sp, #16
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb36:	2301      	movs	r3, #1
 800fb38:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d002      	beq.n	800fb48 <HAL_PCD_ResetCallback+0x1a>
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	d003      	beq.n	800fb4e <HAL_PCD_ResetCallback+0x20>
 800fb46:	e005      	b.n	800fb54 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb4c:	e005      	b.n	800fb5a <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	73fb      	strb	r3, [r7, #15]
    break;
 800fb52:	e002      	b.n	800fb5a <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800fb54:	2301      	movs	r3, #1
 800fb56:	73fb      	strb	r3, [r7, #15]
    break;    
 800fb58:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fb60:	7bfa      	ldrb	r2, [r7, #15]
 800fb62:	4611      	mov	r1, r2
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fc fc57 	bl	800c418 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fc fc22 	bl	800c3ba <USBD_LL_Reset>
}
 800fb76:	bf00      	nop
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
	...

0800fb80 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fc fc52 	bl	800c438 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f043 0301 	orr.w	r3, r3, #1
 800fbac:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d005      	beq.n	800fbc2 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fbb6:	4a05      	ldr	r2, [pc, #20]	; (800fbcc <HAL_PCD_SuspendCallback+0x4c>)
 800fbb8:	4b04      	ldr	r3, [pc, #16]	; (800fbcc <HAL_PCD_SuspendCallback+0x4c>)
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	f043 0306 	orr.w	r3, r3, #6
 800fbc0:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fbc2:	bf00      	nop
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	e000ed00 	.word	0xe000ed00

0800fbd0 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fc fc3f 	bl	800c462 <USBD_LL_Resume>
}
 800fbe4:	bf00      	nop
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fbfe:	78fa      	ldrb	r2, [r7, #3]
 800fc00:	4611      	mov	r1, r2
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fc fc65 	bl	800c4d2 <USBD_LL_IsoOUTIncomplete>
}
 800fc08:	bf00      	nop
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fc22:	78fa      	ldrb	r2, [r7, #3]
 800fc24:	4611      	mov	r1, r2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fc fc46 	bl	800c4b8 <USBD_LL_IsoINIncomplete>
}
 800fc2c:	bf00      	nop
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fc fc52 	bl	800c4ec <USBD_LL_DevConnected>
}
 800fc48:	bf00      	nop
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fc fc4f 	bl	800c502 <USBD_LL_DevDisconnected>
}
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d143      	bne.n	800fd04 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800fc7c:	4a24      	ldr	r2, [pc, #144]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_HS;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4a22      	ldr	r2, [pc, #136]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fc88:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800fc8c:	4b20      	ldr	r3, [pc, #128]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fc8e:	4a21      	ldr	r2, [pc, #132]	; (800fd14 <USBD_LL_Init+0xa8>)
 800fc90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800fc92:	4b1f      	ldr	r3, [pc, #124]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fc94:	2208      	movs	r2, #8
 800fc96:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800fc98:	4b1d      	ldr	r3, [pc, #116]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800fc9e:	4b1c      	ldr	r3, [pc, #112]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fca0:	2200      	movs	r2, #0
 800fca2:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800fca4:	4b1a      	ldr	r3, [pc, #104]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fca6:	2201      	movs	r2, #1
 800fca8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800fcaa:	4b19      	ldr	r3, [pc, #100]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800fcb0:	4b17      	ldr	r3, [pc, #92]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800fcb6:	4b16      	ldr	r3, [pc, #88]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800fcbc:	4b14      	ldr	r3, [pc, #80]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800fcc2:	4b13      	ldr	r3, [pc, #76]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800fcc8:	4b11      	ldr	r3, [pc, #68]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800fcce:	4810      	ldr	r0, [pc, #64]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcd0:	f7f4 f850 	bl	8003d74 <HAL_PCD_Init>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d004      	beq.n	800fce4 <USBD_LL_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 800fcda:	f240 117f 	movw	r1, #383	; 0x17f
 800fcde:	480e      	ldr	r0, [pc, #56]	; (800fd18 <USBD_LL_Init+0xac>)
 800fce0:	f7ff f976 	bl	800efd0 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800fce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fce8:	4809      	ldr	r0, [pc, #36]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcea:	f7f5 f981 	bl	8004ff0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800fcee:	2280      	movs	r2, #128	; 0x80
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	4807      	ldr	r0, [pc, #28]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fcf4:	f7f5 f931 	bl	8004f5a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800fcf8:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800fcfc:	2101      	movs	r1, #1
 800fcfe:	4804      	ldr	r0, [pc, #16]	; (800fd10 <USBD_LL_Init+0xa4>)
 800fd00:	f7f5 f92b 	bl	8004f5a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	20002814 	.word	0x20002814
 800fd14:	40040000 	.word	0x40040000
 800fd18:	080136ec 	.word	0x080136ec

0800fd1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f4 f92c 	bl	8003f90 <HAL_PCD_Start>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800fd3c:	7bbb      	ldrb	r3, [r7, #14]
 800fd3e:	2b03      	cmp	r3, #3
 800fd40:	d816      	bhi.n	800fd70 <USBD_LL_Start+0x54>
 800fd42:	a201      	add	r2, pc, #4	; (adr r2, 800fd48 <USBD_LL_Start+0x2c>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fd59 	.word	0x0800fd59
 800fd4c:	0800fd5f 	.word	0x0800fd5f
 800fd50:	0800fd65 	.word	0x0800fd65
 800fd54:	0800fd6b 	.word	0x0800fd6b
    case HAL_OK :
      usb_status = USBD_OK;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800fd5c:	e00b      	b.n	800fd76 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fd5e:	2302      	movs	r3, #2
 800fd60:	73fb      	strb	r3, [r7, #15]
    break;
 800fd62:	e008      	b.n	800fd76 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fd64:	2301      	movs	r3, #1
 800fd66:	73fb      	strb	r3, [r7, #15]
    break;
 800fd68:	e005      	b.n	800fd76 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fd6a:	2302      	movs	r3, #2
 800fd6c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd6e:	e002      	b.n	800fd76 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800fd70:	2302      	movs	r3, #2
 800fd72:	73fb      	strb	r3, [r7, #15]
    break;
 800fd74:	bf00      	nop
  }
  return usb_status;
 800fd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	4608      	mov	r0, r1
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	4603      	mov	r3, r0
 800fd90:	70fb      	strb	r3, [r7, #3]
 800fd92:	460b      	mov	r3, r1
 800fd94:	70bb      	strb	r3, [r7, #2]
 800fd96:	4613      	mov	r3, r2
 800fd98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800fda8:	78bb      	ldrb	r3, [r7, #2]
 800fdaa:	883a      	ldrh	r2, [r7, #0]
 800fdac:	78f9      	ldrb	r1, [r7, #3]
 800fdae:	f7f4 fe36 	bl	8004a1e <HAL_PCD_EP_Open>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fdb6:	7bbb      	ldrb	r3, [r7, #14]
 800fdb8:	2b03      	cmp	r3, #3
 800fdba:	d817      	bhi.n	800fdec <USBD_LL_OpenEP+0x6c>
 800fdbc:	a201      	add	r2, pc, #4	; (adr r2, 800fdc4 <USBD_LL_OpenEP+0x44>)
 800fdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc2:	bf00      	nop
 800fdc4:	0800fdd5 	.word	0x0800fdd5
 800fdc8:	0800fddb 	.word	0x0800fddb
 800fdcc:	0800fde1 	.word	0x0800fde1
 800fdd0:	0800fde7 	.word	0x0800fde7
    case HAL_OK :
      usb_status = USBD_OK;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	73fb      	strb	r3, [r7, #15]
    break;
 800fdd8:	e00b      	b.n	800fdf2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fdda:	2302      	movs	r3, #2
 800fddc:	73fb      	strb	r3, [r7, #15]
    break;
 800fdde:	e008      	b.n	800fdf2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fde0:	2301      	movs	r3, #1
 800fde2:	73fb      	strb	r3, [r7, #15]
    break;
 800fde4:	e005      	b.n	800fdf2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fde6:	2302      	movs	r3, #2
 800fde8:	73fb      	strb	r3, [r7, #15]
    break;
 800fdea:	e002      	b.n	800fdf2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800fdec:	2302      	movs	r3, #2
 800fdee:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf0:	bf00      	nop
  }
  return usb_status;
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	460b      	mov	r3, r1
 800fe06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fe16:	78fa      	ldrb	r2, [r7, #3]
 800fe18:	4611      	mov	r1, r2
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7f4 fe67 	bl	8004aee <HAL_PCD_EP_Close>
 800fe20:	4603      	mov	r3, r0
 800fe22:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800fe24:	7bbb      	ldrb	r3, [r7, #14]
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d816      	bhi.n	800fe58 <USBD_LL_CloseEP+0x5c>
 800fe2a:	a201      	add	r2, pc, #4	; (adr r2, 800fe30 <USBD_LL_CloseEP+0x34>)
 800fe2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe30:	0800fe41 	.word	0x0800fe41
 800fe34:	0800fe47 	.word	0x0800fe47
 800fe38:	0800fe4d 	.word	0x0800fe4d
 800fe3c:	0800fe53 	.word	0x0800fe53
    case HAL_OK :
      usb_status = USBD_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	73fb      	strb	r3, [r7, #15]
    break;
 800fe44:	e00b      	b.n	800fe5e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe46:	2302      	movs	r3, #2
 800fe48:	73fb      	strb	r3, [r7, #15]
    break;
 800fe4a:	e008      	b.n	800fe5e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe50:	e005      	b.n	800fe5e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe52:	2302      	movs	r3, #2
 800fe54:	73fb      	strb	r3, [r7, #15]
    break;
 800fe56:	e002      	b.n	800fe5e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fe58:	2302      	movs	r3, #2
 800fe5a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe5c:	bf00      	nop
  }
  return usb_status;  
 800fe5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	460b      	mov	r3, r1
 800fe72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fe82:	78fa      	ldrb	r2, [r7, #3]
 800fe84:	4611      	mov	r1, r2
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7f4 ff27 	bl	8004cda <HAL_PCD_EP_SetStall>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fe90:	7bbb      	ldrb	r3, [r7, #14]
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d816      	bhi.n	800fec4 <USBD_LL_StallEP+0x5c>
 800fe96:	a201      	add	r2, pc, #4	; (adr r2, 800fe9c <USBD_LL_StallEP+0x34>)
 800fe98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe9c:	0800fead 	.word	0x0800fead
 800fea0:	0800feb3 	.word	0x0800feb3
 800fea4:	0800feb9 	.word	0x0800feb9
 800fea8:	0800febf 	.word	0x0800febf
    case HAL_OK :
      usb_status = USBD_OK;
 800feac:	2300      	movs	r3, #0
 800feae:	73fb      	strb	r3, [r7, #15]
    break;
 800feb0:	e00b      	b.n	800feca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800feb2:	2302      	movs	r3, #2
 800feb4:	73fb      	strb	r3, [r7, #15]
    break;
 800feb6:	e008      	b.n	800feca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800feb8:	2301      	movs	r3, #1
 800feba:	73fb      	strb	r3, [r7, #15]
    break;
 800febc:	e005      	b.n	800feca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800febe:	2302      	movs	r3, #2
 800fec0:	73fb      	strb	r3, [r7, #15]
    break;
 800fec2:	e002      	b.n	800feca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fec4:	2302      	movs	r3, #2
 800fec6:	73fb      	strb	r3, [r7, #15]
    break;
 800fec8:	bf00      	nop
  }
  return usb_status;  
 800feca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fee0:	2300      	movs	r3, #0
 800fee2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800feee:	78fa      	ldrb	r2, [r7, #3]
 800fef0:	4611      	mov	r1, r2
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7f4 ff55 	bl	8004da2 <HAL_PCD_EP_ClrStall>
 800fef8:	4603      	mov	r3, r0
 800fefa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800fefc:	7bbb      	ldrb	r3, [r7, #14]
 800fefe:	2b03      	cmp	r3, #3
 800ff00:	d816      	bhi.n	800ff30 <USBD_LL_ClearStallEP+0x5c>
 800ff02:	a201      	add	r2, pc, #4	; (adr r2, 800ff08 <USBD_LL_ClearStallEP+0x34>)
 800ff04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff08:	0800ff19 	.word	0x0800ff19
 800ff0c:	0800ff1f 	.word	0x0800ff1f
 800ff10:	0800ff25 	.word	0x0800ff25
 800ff14:	0800ff2b 	.word	0x0800ff2b
    case HAL_OK :
      usb_status = USBD_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff1c:	e00b      	b.n	800ff36 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff1e:	2302      	movs	r3, #2
 800ff20:	73fb      	strb	r3, [r7, #15]
    break;
 800ff22:	e008      	b.n	800ff36 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff24:	2301      	movs	r3, #1
 800ff26:	73fb      	strb	r3, [r7, #15]
    break;
 800ff28:	e005      	b.n	800ff36 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff2a:	2302      	movs	r3, #2
 800ff2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff2e:	e002      	b.n	800ff36 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ff30:	2302      	movs	r3, #2
 800ff32:	73fb      	strb	r3, [r7, #15]
    break;
 800ff34:	bf00      	nop
  }
  return usb_status; 
 800ff36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b085      	sub	sp, #20
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ff52:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800ff54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	da0b      	bge.n	800ff74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800ff5c:	78fb      	ldrb	r3, [r7, #3]
 800ff5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff62:	68f9      	ldr	r1, [r7, #12]
 800ff64:	4613      	mov	r3, r2
 800ff66:	00db      	lsls	r3, r3, #3
 800ff68:	1a9b      	subs	r3, r3, r2
 800ff6a:	009b      	lsls	r3, r3, #2
 800ff6c:	440b      	add	r3, r1
 800ff6e:	333a      	adds	r3, #58	; 0x3a
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	e00b      	b.n	800ff8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800ff74:	78fb      	ldrb	r3, [r7, #3]
 800ff76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff7a:	68f9      	ldr	r1, [r7, #12]
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	00db      	lsls	r3, r3, #3
 800ff80:	1a9b      	subs	r3, r3, r2
 800ff82:	009b      	lsls	r3, r3, #2
 800ff84:	440b      	add	r3, r1
 800ff86:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800ff8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ffb2:	78fa      	ldrb	r2, [r7, #3]
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7f4 fd10 	bl	80049dc <HAL_PCD_SetAddress>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ffc0:	7bbb      	ldrb	r3, [r7, #14]
 800ffc2:	2b03      	cmp	r3, #3
 800ffc4:	d816      	bhi.n	800fff4 <USBD_LL_SetUSBAddress+0x5c>
 800ffc6:	a201      	add	r2, pc, #4	; (adr r2, 800ffcc <USBD_LL_SetUSBAddress+0x34>)
 800ffc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffcc:	0800ffdd 	.word	0x0800ffdd
 800ffd0:	0800ffe3 	.word	0x0800ffe3
 800ffd4:	0800ffe9 	.word	0x0800ffe9
 800ffd8:	0800ffef 	.word	0x0800ffef
    case HAL_OK :
      usb_status = USBD_OK;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	73fb      	strb	r3, [r7, #15]
    break;
 800ffe0:	e00b      	b.n	800fffa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ffe2:	2302      	movs	r3, #2
 800ffe4:	73fb      	strb	r3, [r7, #15]
    break;
 800ffe6:	e008      	b.n	800fffa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	73fb      	strb	r3, [r7, #15]
    break;
 800ffec:	e005      	b.n	800fffa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ffee:	2302      	movs	r3, #2
 800fff0:	73fb      	strb	r3, [r7, #15]
    break;
 800fff2:	e002      	b.n	800fffa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fff4:	2302      	movs	r3, #2
 800fff6:	73fb      	strb	r3, [r7, #15]
    break;
 800fff8:	bf00      	nop
  }
  return usb_status;  
 800fffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b086      	sub	sp, #24
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	607a      	str	r2, [r7, #4]
 801000e:	461a      	mov	r2, r3
 8010010:	460b      	mov	r3, r1
 8010012:	72fb      	strb	r3, [r7, #11]
 8010014:	4613      	mov	r3, r2
 8010016:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010026:	893b      	ldrh	r3, [r7, #8]
 8010028:	7af9      	ldrb	r1, [r7, #11]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	f7f4 fe0c 	bl	8004c48 <HAL_PCD_EP_Transmit>
 8010030:	4603      	mov	r3, r0
 8010032:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8010034:	7dbb      	ldrb	r3, [r7, #22]
 8010036:	2b03      	cmp	r3, #3
 8010038:	d816      	bhi.n	8010068 <USBD_LL_Transmit+0x64>
 801003a:	a201      	add	r2, pc, #4	; (adr r2, 8010040 <USBD_LL_Transmit+0x3c>)
 801003c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010040:	08010051 	.word	0x08010051
 8010044:	08010057 	.word	0x08010057
 8010048:	0801005d 	.word	0x0801005d
 801004c:	08010063 	.word	0x08010063
    case HAL_OK :
      usb_status = USBD_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	75fb      	strb	r3, [r7, #23]
    break;
 8010054:	e00b      	b.n	801006e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010056:	2302      	movs	r3, #2
 8010058:	75fb      	strb	r3, [r7, #23]
    break;
 801005a:	e008      	b.n	801006e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801005c:	2301      	movs	r3, #1
 801005e:	75fb      	strb	r3, [r7, #23]
    break;
 8010060:	e005      	b.n	801006e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010062:	2302      	movs	r3, #2
 8010064:	75fb      	strb	r3, [r7, #23]
    break;
 8010066:	e002      	b.n	801006e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8010068:	2302      	movs	r3, #2
 801006a:	75fb      	strb	r3, [r7, #23]
    break;
 801006c:	bf00      	nop
  }
  return usb_status;    
 801006e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010070:	4618      	mov	r0, r3
 8010072:	3718      	adds	r7, #24
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b086      	sub	sp, #24
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	607a      	str	r2, [r7, #4]
 8010082:	461a      	mov	r2, r3
 8010084:	460b      	mov	r3, r1
 8010086:	72fb      	strb	r3, [r7, #11]
 8010088:	4613      	mov	r3, r2
 801008a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801008c:	2300      	movs	r3, #0
 801008e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010090:	2300      	movs	r3, #0
 8010092:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801009a:	893b      	ldrh	r3, [r7, #8]
 801009c:	7af9      	ldrb	r1, [r7, #11]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	f7f4 fd6f 	bl	8004b82 <HAL_PCD_EP_Receive>
 80100a4:	4603      	mov	r3, r0
 80100a6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80100a8:	7dbb      	ldrb	r3, [r7, #22]
 80100aa:	2b03      	cmp	r3, #3
 80100ac:	d816      	bhi.n	80100dc <USBD_LL_PrepareReceive+0x64>
 80100ae:	a201      	add	r2, pc, #4	; (adr r2, 80100b4 <USBD_LL_PrepareReceive+0x3c>)
 80100b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b4:	080100c5 	.word	0x080100c5
 80100b8:	080100cb 	.word	0x080100cb
 80100bc:	080100d1 	.word	0x080100d1
 80100c0:	080100d7 	.word	0x080100d7
    case HAL_OK :
      usb_status = USBD_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	75fb      	strb	r3, [r7, #23]
    break;
 80100c8:	e00b      	b.n	80100e2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80100ca:	2302      	movs	r3, #2
 80100cc:	75fb      	strb	r3, [r7, #23]
    break;
 80100ce:	e008      	b.n	80100e2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80100d0:	2301      	movs	r3, #1
 80100d2:	75fb      	strb	r3, [r7, #23]
    break;
 80100d4:	e005      	b.n	80100e2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80100d6:	2302      	movs	r3, #2
 80100d8:	75fb      	strb	r3, [r7, #23]
    break;
 80100da:	e002      	b.n	80100e2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80100dc:	2302      	movs	r3, #2
 80100de:	75fb      	strb	r3, [r7, #23]
    break;
 80100e0:	bf00      	nop
  }
  return usb_status; 
 80100e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3718      	adds	r7, #24
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	460b      	mov	r3, r1
 80100f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80100fe:	78fa      	ldrb	r2, [r7, #3]
 8010100:	4611      	mov	r1, r2
 8010102:	4618      	mov	r0, r3
 8010104:	f7f4 fd87 	bl	8004c16 <HAL_PCD_EP_GetRxCount>
 8010108:	4603      	mov	r3, r0
}
 801010a:	4618      	mov	r0, r3
 801010c:	3708      	adds	r7, #8
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
	...

08010114 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010120:	78fb      	ldrb	r3, [r7, #3]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d002      	beq.n	801012c <HAL_PCDEx_LPM_Callback+0x18>
 8010126:	2b01      	cmp	r3, #1
 8010128:	d020      	beq.n	801016c <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 801012a:	e03d      	b.n	80101a8 <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6a1b      	ldr	r3, [r3, #32]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d007      	beq.n	8010144 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8010134:	f7fe f878 	bl	800e228 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010138:	4a1d      	ldr	r2, [pc, #116]	; (80101b0 <HAL_PCDEx_LPM_Callback+0x9c>)
 801013a:	4b1d      	ldr	r3, [pc, #116]	; (80101b0 <HAL_PCDEx_LPM_Callback+0x9c>)
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	f023 0306 	bic.w	r3, r3, #6
 8010142:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801014c:	461a      	mov	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f023 0301 	bic.w	r3, r3, #1
 801015c:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8010164:	4618      	mov	r0, r3
 8010166:	f7fc f97c 	bl	800c462 <USBD_LL_Resume>
    break;
 801016a:	e01d      	b.n	80101a8 <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010174:	461a      	mov	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f043 0301 	orr.w	r3, r3, #1
 8010184:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 801018c:	4618      	mov	r0, r3
 801018e:	f7fc f953 	bl	800c438 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6a1b      	ldr	r3, [r3, #32]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d005      	beq.n	80101a6 <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801019a:	4a05      	ldr	r2, [pc, #20]	; (80101b0 <HAL_PCDEx_LPM_Callback+0x9c>)
 801019c:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <HAL_PCDEx_LPM_Callback+0x9c>)
 801019e:	691b      	ldr	r3, [r3, #16]
 80101a0:	f043 0306 	orr.w	r3, r3, #6
 80101a4:	6113      	str	r3, [r2, #16]
    break;   
 80101a6:	bf00      	nop
}
 80101a8:	bf00      	nop
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	e000ed00 	.word	0xe000ed00

080101b4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	4603      	mov	r3, r0
 80101bc:	6039      	str	r1, [r7, #0]
 80101be:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_DeviceDesc);
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	2212      	movs	r2, #18
 80101c4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr
 80101d4:	20000158 	.word	0x20000158

080101d8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	4603      	mov	r3, r0
 80101e0:	6039      	str	r1, [r7, #0]
 80101e2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	2204      	movs	r2, #4
 80101e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80101ea:	4b03      	ldr	r3, [pc, #12]	; (80101f8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	20000178 	.word	0x20000178

080101fc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d105      	bne.n	801021a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801020e:	683a      	ldr	r2, [r7, #0]
 8010210:	4907      	ldr	r1, [pc, #28]	; (8010230 <USBD_HS_ProductStrDescriptor+0x34>)
 8010212:	4808      	ldr	r0, [pc, #32]	; (8010234 <USBD_HS_ProductStrDescriptor+0x38>)
 8010214:	f7fc fdab 	bl	800cd6e <USBD_GetString>
 8010218:	e004      	b.n	8010224 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801021a:	683a      	ldr	r2, [r7, #0]
 801021c:	4904      	ldr	r1, [pc, #16]	; (8010230 <USBD_HS_ProductStrDescriptor+0x34>)
 801021e:	4805      	ldr	r0, [pc, #20]	; (8010234 <USBD_HS_ProductStrDescriptor+0x38>)
 8010220:	f7fc fda5 	bl	800cd6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010224:	4b02      	ldr	r3, [pc, #8]	; (8010230 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010226:	4618      	mov	r0, r3
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20002c14 	.word	0x20002c14
 8010234:	08013700 	.word	0x08013700

08010238 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	6039      	str	r1, [r7, #0]
 8010242:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010244:	683a      	ldr	r2, [r7, #0]
 8010246:	4904      	ldr	r1, [pc, #16]	; (8010258 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010248:	4804      	ldr	r0, [pc, #16]	; (801025c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801024a:	f7fc fd90 	bl	800cd6e <USBD_GetString>
  return USBD_StrDesc;
 801024e:	4b02      	ldr	r3, [pc, #8]	; (8010258 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010250:	4618      	mov	r0, r3
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	20002c14 	.word	0x20002c14
 801025c:	08013718 	.word	0x08013718

08010260 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	4603      	mov	r3, r0
 8010268:	6039      	str	r1, [r7, #0]
 801026a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d105      	bne.n	801027e <USBD_HS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 8010272:	683a      	ldr	r2, [r7, #0]
 8010274:	4907      	ldr	r1, [pc, #28]	; (8010294 <USBD_HS_SerialStrDescriptor+0x34>)
 8010276:	4808      	ldr	r0, [pc, #32]	; (8010298 <USBD_HS_SerialStrDescriptor+0x38>)
 8010278:	f7fc fd79 	bl	800cd6e <USBD_GetString>
 801027c:	e004      	b.n	8010288 <USBD_HS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 801027e:	683a      	ldr	r2, [r7, #0]
 8010280:	4904      	ldr	r1, [pc, #16]	; (8010294 <USBD_HS_SerialStrDescriptor+0x34>)
 8010282:	4805      	ldr	r0, [pc, #20]	; (8010298 <USBD_HS_SerialStrDescriptor+0x38>)
 8010284:	f7fc fd73 	bl	800cd6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010288:	4b02      	ldr	r3, [pc, #8]	; (8010294 <USBD_HS_SerialStrDescriptor+0x34>)
}
 801028a:	4618      	mov	r0, r3
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	20002c14 	.word	0x20002c14
 8010298:	0801372c 	.word	0x0801372c

0801029c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	6039      	str	r1, [r7, #0]
 80102a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80102a8:	79fb      	ldrb	r3, [r7, #7]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d105      	bne.n	80102ba <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80102ae:	683a      	ldr	r2, [r7, #0]
 80102b0:	4907      	ldr	r1, [pc, #28]	; (80102d0 <USBD_HS_ConfigStrDescriptor+0x34>)
 80102b2:	4808      	ldr	r0, [pc, #32]	; (80102d4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80102b4:	f7fc fd5b 	bl	800cd6e <USBD_GetString>
 80102b8:	e004      	b.n	80102c4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	4904      	ldr	r1, [pc, #16]	; (80102d0 <USBD_HS_ConfigStrDescriptor+0x34>)
 80102be:	4805      	ldr	r0, [pc, #20]	; (80102d4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80102c0:	f7fc fd55 	bl	800cd6e <USBD_GetString>
  }
  return USBD_StrDesc;
 80102c4:	4b02      	ldr	r3, [pc, #8]	; (80102d0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	20002c14 	.word	0x20002c14
 80102d4:	0801373c 	.word	0x0801373c

080102d8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	4603      	mov	r3, r0
 80102e0:	6039      	str	r1, [r7, #0]
 80102e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80102e4:	79fb      	ldrb	r3, [r7, #7]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d105      	bne.n	80102f6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	4907      	ldr	r1, [pc, #28]	; (801030c <USBD_HS_InterfaceStrDescriptor+0x34>)
 80102ee:	4808      	ldr	r0, [pc, #32]	; (8010310 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80102f0:	f7fc fd3d 	bl	800cd6e <USBD_GetString>
 80102f4:	e004      	b.n	8010300 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80102f6:	683a      	ldr	r2, [r7, #0]
 80102f8:	4904      	ldr	r1, [pc, #16]	; (801030c <USBD_HS_InterfaceStrDescriptor+0x34>)
 80102fa:	4805      	ldr	r0, [pc, #20]	; (8010310 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80102fc:	f7fc fd37 	bl	800cd6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010302:	4618      	mov	r0, r3
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20002c14 	.word	0x20002c14
 8010310:	08013748 	.word	0x08013748

08010314 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	4603      	mov	r3, r0
 801031c:	6039      	str	r1, [r7, #0]
 801031e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_BOSDesc);
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	220c      	movs	r2, #12
 8010324:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8010326:	4b03      	ldr	r3, [pc, #12]	; (8010334 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8010328:	4618      	mov	r0, r3
 801032a:	370c      	adds	r7, #12
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr
 8010334:	2000016c 	.word	0x2000016c

08010338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010370 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801033c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801033e:	e003      	b.n	8010348 <LoopCopyDataInit>

08010340 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010340:	4b0c      	ldr	r3, [pc, #48]	; (8010374 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010342:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010344:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010346:	3104      	adds	r1, #4

08010348 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010348:	480b      	ldr	r0, [pc, #44]	; (8010378 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801034a:	4b0c      	ldr	r3, [pc, #48]	; (801037c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801034c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801034e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010350:	d3f6      	bcc.n	8010340 <CopyDataInit>
  ldr  r2, =_sbss
 8010352:	4a0b      	ldr	r2, [pc, #44]	; (8010380 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010354:	e002      	b.n	801035c <LoopFillZerobss>

08010356 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010356:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010358:	f842 3b04 	str.w	r3, [r2], #4

0801035c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801035c:	4b09      	ldr	r3, [pc, #36]	; (8010384 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801035e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010360:	d3f9      	bcc.n	8010356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010362:	f7ff fa35 	bl	800f7d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010366:	f000 f811 	bl	801038c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801036a:	f7fd fc11 	bl	800db90 <main>
  bx  lr    
 801036e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010370:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8010374:	08016490 	.word	0x08016490
  ldr  r0, =_sdata
 8010378:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801037c:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 8010380:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 8010384:	20002e18 	.word	0x20002e18

08010388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010388:	e7fe      	b.n	8010388 <ADC_IRQHandler>
	...

0801038c <__libc_init_array>:
 801038c:	b570      	push	{r4, r5, r6, lr}
 801038e:	4e0d      	ldr	r6, [pc, #52]	; (80103c4 <__libc_init_array+0x38>)
 8010390:	4c0d      	ldr	r4, [pc, #52]	; (80103c8 <__libc_init_array+0x3c>)
 8010392:	1ba4      	subs	r4, r4, r6
 8010394:	10a4      	asrs	r4, r4, #2
 8010396:	2500      	movs	r5, #0
 8010398:	42a5      	cmp	r5, r4
 801039a:	d109      	bne.n	80103b0 <__libc_init_array+0x24>
 801039c:	4e0b      	ldr	r6, [pc, #44]	; (80103cc <__libc_init_array+0x40>)
 801039e:	4c0c      	ldr	r4, [pc, #48]	; (80103d0 <__libc_init_array+0x44>)
 80103a0:	f002 fec2 	bl	8013128 <_init>
 80103a4:	1ba4      	subs	r4, r4, r6
 80103a6:	10a4      	asrs	r4, r4, #2
 80103a8:	2500      	movs	r5, #0
 80103aa:	42a5      	cmp	r5, r4
 80103ac:	d105      	bne.n	80103ba <__libc_init_array+0x2e>
 80103ae:	bd70      	pop	{r4, r5, r6, pc}
 80103b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103b4:	4798      	blx	r3
 80103b6:	3501      	adds	r5, #1
 80103b8:	e7ee      	b.n	8010398 <__libc_init_array+0xc>
 80103ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103be:	4798      	blx	r3
 80103c0:	3501      	adds	r5, #1
 80103c2:	e7f2      	b.n	80103aa <__libc_init_array+0x1e>
 80103c4:	08016488 	.word	0x08016488
 80103c8:	08016488 	.word	0x08016488
 80103cc:	08016488 	.word	0x08016488
 80103d0:	0801648c 	.word	0x0801648c

080103d4 <__locale_ctype_ptr_l>:
 80103d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80103d8:	4770      	bx	lr
	...

080103dc <__locale_ctype_ptr>:
 80103dc:	4b04      	ldr	r3, [pc, #16]	; (80103f0 <__locale_ctype_ptr+0x14>)
 80103de:	4a05      	ldr	r2, [pc, #20]	; (80103f4 <__locale_ctype_ptr+0x18>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	bf08      	it	eq
 80103e8:	4613      	moveq	r3, r2
 80103ea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80103ee:	4770      	bx	lr
 80103f0:	200002e8 	.word	0x200002e8
 80103f4:	2000017c 	.word	0x2000017c

080103f8 <malloc>:
 80103f8:	4b02      	ldr	r3, [pc, #8]	; (8010404 <malloc+0xc>)
 80103fa:	4601      	mov	r1, r0
 80103fc:	6818      	ldr	r0, [r3, #0]
 80103fe:	f000 b873 	b.w	80104e8 <_malloc_r>
 8010402:	bf00      	nop
 8010404:	200002e8 	.word	0x200002e8

08010408 <free>:
 8010408:	4b02      	ldr	r3, [pc, #8]	; (8010414 <free+0xc>)
 801040a:	4601      	mov	r1, r0
 801040c:	6818      	ldr	r0, [r3, #0]
 801040e:	f000 b81d 	b.w	801044c <_free_r>
 8010412:	bf00      	nop
 8010414:	200002e8 	.word	0x200002e8

08010418 <__ascii_mbtowc>:
 8010418:	b082      	sub	sp, #8
 801041a:	b901      	cbnz	r1, 801041e <__ascii_mbtowc+0x6>
 801041c:	a901      	add	r1, sp, #4
 801041e:	b142      	cbz	r2, 8010432 <__ascii_mbtowc+0x1a>
 8010420:	b14b      	cbz	r3, 8010436 <__ascii_mbtowc+0x1e>
 8010422:	7813      	ldrb	r3, [r2, #0]
 8010424:	600b      	str	r3, [r1, #0]
 8010426:	7812      	ldrb	r2, [r2, #0]
 8010428:	1c10      	adds	r0, r2, #0
 801042a:	bf18      	it	ne
 801042c:	2001      	movne	r0, #1
 801042e:	b002      	add	sp, #8
 8010430:	4770      	bx	lr
 8010432:	4610      	mov	r0, r2
 8010434:	e7fb      	b.n	801042e <__ascii_mbtowc+0x16>
 8010436:	f06f 0001 	mvn.w	r0, #1
 801043a:	e7f8      	b.n	801042e <__ascii_mbtowc+0x16>

0801043c <memset>:
 801043c:	4402      	add	r2, r0
 801043e:	4603      	mov	r3, r0
 8010440:	4293      	cmp	r3, r2
 8010442:	d100      	bne.n	8010446 <memset+0xa>
 8010444:	4770      	bx	lr
 8010446:	f803 1b01 	strb.w	r1, [r3], #1
 801044a:	e7f9      	b.n	8010440 <memset+0x4>

0801044c <_free_r>:
 801044c:	b538      	push	{r3, r4, r5, lr}
 801044e:	4605      	mov	r5, r0
 8010450:	2900      	cmp	r1, #0
 8010452:	d045      	beq.n	80104e0 <_free_r+0x94>
 8010454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010458:	1f0c      	subs	r4, r1, #4
 801045a:	2b00      	cmp	r3, #0
 801045c:	bfb8      	it	lt
 801045e:	18e4      	addlt	r4, r4, r3
 8010460:	f001 ffcd 	bl	80123fe <__malloc_lock>
 8010464:	4a1f      	ldr	r2, [pc, #124]	; (80104e4 <_free_r+0x98>)
 8010466:	6813      	ldr	r3, [r2, #0]
 8010468:	4610      	mov	r0, r2
 801046a:	b933      	cbnz	r3, 801047a <_free_r+0x2e>
 801046c:	6063      	str	r3, [r4, #4]
 801046e:	6014      	str	r4, [r2, #0]
 8010470:	4628      	mov	r0, r5
 8010472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010476:	f001 bfc3 	b.w	8012400 <__malloc_unlock>
 801047a:	42a3      	cmp	r3, r4
 801047c:	d90c      	bls.n	8010498 <_free_r+0x4c>
 801047e:	6821      	ldr	r1, [r4, #0]
 8010480:	1862      	adds	r2, r4, r1
 8010482:	4293      	cmp	r3, r2
 8010484:	bf04      	itt	eq
 8010486:	681a      	ldreq	r2, [r3, #0]
 8010488:	685b      	ldreq	r3, [r3, #4]
 801048a:	6063      	str	r3, [r4, #4]
 801048c:	bf04      	itt	eq
 801048e:	1852      	addeq	r2, r2, r1
 8010490:	6022      	streq	r2, [r4, #0]
 8010492:	6004      	str	r4, [r0, #0]
 8010494:	e7ec      	b.n	8010470 <_free_r+0x24>
 8010496:	4613      	mov	r3, r2
 8010498:	685a      	ldr	r2, [r3, #4]
 801049a:	b10a      	cbz	r2, 80104a0 <_free_r+0x54>
 801049c:	42a2      	cmp	r2, r4
 801049e:	d9fa      	bls.n	8010496 <_free_r+0x4a>
 80104a0:	6819      	ldr	r1, [r3, #0]
 80104a2:	1858      	adds	r0, r3, r1
 80104a4:	42a0      	cmp	r0, r4
 80104a6:	d10b      	bne.n	80104c0 <_free_r+0x74>
 80104a8:	6820      	ldr	r0, [r4, #0]
 80104aa:	4401      	add	r1, r0
 80104ac:	1858      	adds	r0, r3, r1
 80104ae:	4282      	cmp	r2, r0
 80104b0:	6019      	str	r1, [r3, #0]
 80104b2:	d1dd      	bne.n	8010470 <_free_r+0x24>
 80104b4:	6810      	ldr	r0, [r2, #0]
 80104b6:	6852      	ldr	r2, [r2, #4]
 80104b8:	605a      	str	r2, [r3, #4]
 80104ba:	4401      	add	r1, r0
 80104bc:	6019      	str	r1, [r3, #0]
 80104be:	e7d7      	b.n	8010470 <_free_r+0x24>
 80104c0:	d902      	bls.n	80104c8 <_free_r+0x7c>
 80104c2:	230c      	movs	r3, #12
 80104c4:	602b      	str	r3, [r5, #0]
 80104c6:	e7d3      	b.n	8010470 <_free_r+0x24>
 80104c8:	6820      	ldr	r0, [r4, #0]
 80104ca:	1821      	adds	r1, r4, r0
 80104cc:	428a      	cmp	r2, r1
 80104ce:	bf04      	itt	eq
 80104d0:	6811      	ldreq	r1, [r2, #0]
 80104d2:	6852      	ldreq	r2, [r2, #4]
 80104d4:	6062      	str	r2, [r4, #4]
 80104d6:	bf04      	itt	eq
 80104d8:	1809      	addeq	r1, r1, r0
 80104da:	6021      	streq	r1, [r4, #0]
 80104dc:	605c      	str	r4, [r3, #4]
 80104de:	e7c7      	b.n	8010470 <_free_r+0x24>
 80104e0:	bd38      	pop	{r3, r4, r5, pc}
 80104e2:	bf00      	nop
 80104e4:	200004a4 	.word	0x200004a4

080104e8 <_malloc_r>:
 80104e8:	b570      	push	{r4, r5, r6, lr}
 80104ea:	1ccd      	adds	r5, r1, #3
 80104ec:	f025 0503 	bic.w	r5, r5, #3
 80104f0:	3508      	adds	r5, #8
 80104f2:	2d0c      	cmp	r5, #12
 80104f4:	bf38      	it	cc
 80104f6:	250c      	movcc	r5, #12
 80104f8:	2d00      	cmp	r5, #0
 80104fa:	4606      	mov	r6, r0
 80104fc:	db01      	blt.n	8010502 <_malloc_r+0x1a>
 80104fe:	42a9      	cmp	r1, r5
 8010500:	d903      	bls.n	801050a <_malloc_r+0x22>
 8010502:	230c      	movs	r3, #12
 8010504:	6033      	str	r3, [r6, #0]
 8010506:	2000      	movs	r0, #0
 8010508:	bd70      	pop	{r4, r5, r6, pc}
 801050a:	f001 ff78 	bl	80123fe <__malloc_lock>
 801050e:	4a23      	ldr	r2, [pc, #140]	; (801059c <_malloc_r+0xb4>)
 8010510:	6814      	ldr	r4, [r2, #0]
 8010512:	4621      	mov	r1, r4
 8010514:	b991      	cbnz	r1, 801053c <_malloc_r+0x54>
 8010516:	4c22      	ldr	r4, [pc, #136]	; (80105a0 <_malloc_r+0xb8>)
 8010518:	6823      	ldr	r3, [r4, #0]
 801051a:	b91b      	cbnz	r3, 8010524 <_malloc_r+0x3c>
 801051c:	4630      	mov	r0, r6
 801051e:	f000 fd31 	bl	8010f84 <_sbrk_r>
 8010522:	6020      	str	r0, [r4, #0]
 8010524:	4629      	mov	r1, r5
 8010526:	4630      	mov	r0, r6
 8010528:	f000 fd2c 	bl	8010f84 <_sbrk_r>
 801052c:	1c43      	adds	r3, r0, #1
 801052e:	d126      	bne.n	801057e <_malloc_r+0x96>
 8010530:	230c      	movs	r3, #12
 8010532:	6033      	str	r3, [r6, #0]
 8010534:	4630      	mov	r0, r6
 8010536:	f001 ff63 	bl	8012400 <__malloc_unlock>
 801053a:	e7e4      	b.n	8010506 <_malloc_r+0x1e>
 801053c:	680b      	ldr	r3, [r1, #0]
 801053e:	1b5b      	subs	r3, r3, r5
 8010540:	d41a      	bmi.n	8010578 <_malloc_r+0x90>
 8010542:	2b0b      	cmp	r3, #11
 8010544:	d90f      	bls.n	8010566 <_malloc_r+0x7e>
 8010546:	600b      	str	r3, [r1, #0]
 8010548:	50cd      	str	r5, [r1, r3]
 801054a:	18cc      	adds	r4, r1, r3
 801054c:	4630      	mov	r0, r6
 801054e:	f001 ff57 	bl	8012400 <__malloc_unlock>
 8010552:	f104 000b 	add.w	r0, r4, #11
 8010556:	1d23      	adds	r3, r4, #4
 8010558:	f020 0007 	bic.w	r0, r0, #7
 801055c:	1ac3      	subs	r3, r0, r3
 801055e:	d01b      	beq.n	8010598 <_malloc_r+0xb0>
 8010560:	425a      	negs	r2, r3
 8010562:	50e2      	str	r2, [r4, r3]
 8010564:	bd70      	pop	{r4, r5, r6, pc}
 8010566:	428c      	cmp	r4, r1
 8010568:	bf0d      	iteet	eq
 801056a:	6863      	ldreq	r3, [r4, #4]
 801056c:	684b      	ldrne	r3, [r1, #4]
 801056e:	6063      	strne	r3, [r4, #4]
 8010570:	6013      	streq	r3, [r2, #0]
 8010572:	bf18      	it	ne
 8010574:	460c      	movne	r4, r1
 8010576:	e7e9      	b.n	801054c <_malloc_r+0x64>
 8010578:	460c      	mov	r4, r1
 801057a:	6849      	ldr	r1, [r1, #4]
 801057c:	e7ca      	b.n	8010514 <_malloc_r+0x2c>
 801057e:	1cc4      	adds	r4, r0, #3
 8010580:	f024 0403 	bic.w	r4, r4, #3
 8010584:	42a0      	cmp	r0, r4
 8010586:	d005      	beq.n	8010594 <_malloc_r+0xac>
 8010588:	1a21      	subs	r1, r4, r0
 801058a:	4630      	mov	r0, r6
 801058c:	f000 fcfa 	bl	8010f84 <_sbrk_r>
 8010590:	3001      	adds	r0, #1
 8010592:	d0cd      	beq.n	8010530 <_malloc_r+0x48>
 8010594:	6025      	str	r5, [r4, #0]
 8010596:	e7d9      	b.n	801054c <_malloc_r+0x64>
 8010598:	bd70      	pop	{r4, r5, r6, pc}
 801059a:	bf00      	nop
 801059c:	200004a4 	.word	0x200004a4
 80105a0:	200004a8 	.word	0x200004a8

080105a4 <__cvt>:
 80105a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105a8:	ec55 4b10 	vmov	r4, r5, d0
 80105ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105b2:	2d00      	cmp	r5, #0
 80105b4:	460e      	mov	r6, r1
 80105b6:	4691      	mov	r9, r2
 80105b8:	4619      	mov	r1, r3
 80105ba:	bfb8      	it	lt
 80105bc:	4622      	movlt	r2, r4
 80105be:	462b      	mov	r3, r5
 80105c0:	f027 0720 	bic.w	r7, r7, #32
 80105c4:	bfbb      	ittet	lt
 80105c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80105ca:	461d      	movlt	r5, r3
 80105cc:	2300      	movge	r3, #0
 80105ce:	232d      	movlt	r3, #45	; 0x2d
 80105d0:	bfb8      	it	lt
 80105d2:	4614      	movlt	r4, r2
 80105d4:	2f46      	cmp	r7, #70	; 0x46
 80105d6:	700b      	strb	r3, [r1, #0]
 80105d8:	d004      	beq.n	80105e4 <__cvt+0x40>
 80105da:	2f45      	cmp	r7, #69	; 0x45
 80105dc:	d100      	bne.n	80105e0 <__cvt+0x3c>
 80105de:	3601      	adds	r6, #1
 80105e0:	2102      	movs	r1, #2
 80105e2:	e000      	b.n	80105e6 <__cvt+0x42>
 80105e4:	2103      	movs	r1, #3
 80105e6:	ab03      	add	r3, sp, #12
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	ab02      	add	r3, sp, #8
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	4632      	mov	r2, r6
 80105f0:	4653      	mov	r3, sl
 80105f2:	ec45 4b10 	vmov	d0, r4, r5
 80105f6:	f000 ff3b 	bl	8011470 <_dtoa_r>
 80105fa:	2f47      	cmp	r7, #71	; 0x47
 80105fc:	4680      	mov	r8, r0
 80105fe:	d102      	bne.n	8010606 <__cvt+0x62>
 8010600:	f019 0f01 	tst.w	r9, #1
 8010604:	d026      	beq.n	8010654 <__cvt+0xb0>
 8010606:	2f46      	cmp	r7, #70	; 0x46
 8010608:	eb08 0906 	add.w	r9, r8, r6
 801060c:	d111      	bne.n	8010632 <__cvt+0x8e>
 801060e:	f898 3000 	ldrb.w	r3, [r8]
 8010612:	2b30      	cmp	r3, #48	; 0x30
 8010614:	d10a      	bne.n	801062c <__cvt+0x88>
 8010616:	2200      	movs	r2, #0
 8010618:	2300      	movs	r3, #0
 801061a:	4620      	mov	r0, r4
 801061c:	4629      	mov	r1, r5
 801061e:	f7f0 fa7f 	bl	8000b20 <__aeabi_dcmpeq>
 8010622:	b918      	cbnz	r0, 801062c <__cvt+0x88>
 8010624:	f1c6 0601 	rsb	r6, r6, #1
 8010628:	f8ca 6000 	str.w	r6, [sl]
 801062c:	f8da 3000 	ldr.w	r3, [sl]
 8010630:	4499      	add	r9, r3
 8010632:	2200      	movs	r2, #0
 8010634:	2300      	movs	r3, #0
 8010636:	4620      	mov	r0, r4
 8010638:	4629      	mov	r1, r5
 801063a:	f7f0 fa71 	bl	8000b20 <__aeabi_dcmpeq>
 801063e:	b938      	cbnz	r0, 8010650 <__cvt+0xac>
 8010640:	2230      	movs	r2, #48	; 0x30
 8010642:	9b03      	ldr	r3, [sp, #12]
 8010644:	4599      	cmp	r9, r3
 8010646:	d905      	bls.n	8010654 <__cvt+0xb0>
 8010648:	1c59      	adds	r1, r3, #1
 801064a:	9103      	str	r1, [sp, #12]
 801064c:	701a      	strb	r2, [r3, #0]
 801064e:	e7f8      	b.n	8010642 <__cvt+0x9e>
 8010650:	f8cd 900c 	str.w	r9, [sp, #12]
 8010654:	9b03      	ldr	r3, [sp, #12]
 8010656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010658:	eba3 0308 	sub.w	r3, r3, r8
 801065c:	4640      	mov	r0, r8
 801065e:	6013      	str	r3, [r2, #0]
 8010660:	b004      	add	sp, #16
 8010662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010666 <__exponent>:
 8010666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010668:	4603      	mov	r3, r0
 801066a:	2900      	cmp	r1, #0
 801066c:	bfb8      	it	lt
 801066e:	4249      	neglt	r1, r1
 8010670:	f803 2b02 	strb.w	r2, [r3], #2
 8010674:	bfb4      	ite	lt
 8010676:	222d      	movlt	r2, #45	; 0x2d
 8010678:	222b      	movge	r2, #43	; 0x2b
 801067a:	2909      	cmp	r1, #9
 801067c:	7042      	strb	r2, [r0, #1]
 801067e:	dd20      	ble.n	80106c2 <__exponent+0x5c>
 8010680:	f10d 0207 	add.w	r2, sp, #7
 8010684:	4617      	mov	r7, r2
 8010686:	260a      	movs	r6, #10
 8010688:	fb91 f5f6 	sdiv	r5, r1, r6
 801068c:	fb06 1115 	mls	r1, r6, r5, r1
 8010690:	3130      	adds	r1, #48	; 0x30
 8010692:	2d09      	cmp	r5, #9
 8010694:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010698:	f102 34ff 	add.w	r4, r2, #4294967295
 801069c:	4629      	mov	r1, r5
 801069e:	dc09      	bgt.n	80106b4 <__exponent+0x4e>
 80106a0:	3130      	adds	r1, #48	; 0x30
 80106a2:	3a02      	subs	r2, #2
 80106a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80106a8:	42ba      	cmp	r2, r7
 80106aa:	461c      	mov	r4, r3
 80106ac:	d304      	bcc.n	80106b8 <__exponent+0x52>
 80106ae:	1a20      	subs	r0, r4, r0
 80106b0:	b003      	add	sp, #12
 80106b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106b4:	4622      	mov	r2, r4
 80106b6:	e7e7      	b.n	8010688 <__exponent+0x22>
 80106b8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80106bc:	f803 1b01 	strb.w	r1, [r3], #1
 80106c0:	e7f2      	b.n	80106a8 <__exponent+0x42>
 80106c2:	2230      	movs	r2, #48	; 0x30
 80106c4:	461c      	mov	r4, r3
 80106c6:	4411      	add	r1, r2
 80106c8:	f804 2b02 	strb.w	r2, [r4], #2
 80106cc:	7059      	strb	r1, [r3, #1]
 80106ce:	e7ee      	b.n	80106ae <__exponent+0x48>

080106d0 <_printf_float>:
 80106d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d4:	b08d      	sub	sp, #52	; 0x34
 80106d6:	460c      	mov	r4, r1
 80106d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80106dc:	4616      	mov	r6, r2
 80106de:	461f      	mov	r7, r3
 80106e0:	4605      	mov	r5, r0
 80106e2:	f001 fe0f 	bl	8012304 <_localeconv_r>
 80106e6:	6803      	ldr	r3, [r0, #0]
 80106e8:	9304      	str	r3, [sp, #16]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7ef fd9a 	bl	8000224 <strlen>
 80106f0:	2300      	movs	r3, #0
 80106f2:	930a      	str	r3, [sp, #40]	; 0x28
 80106f4:	f8d8 3000 	ldr.w	r3, [r8]
 80106f8:	9005      	str	r0, [sp, #20]
 80106fa:	3307      	adds	r3, #7
 80106fc:	f023 0307 	bic.w	r3, r3, #7
 8010700:	f103 0208 	add.w	r2, r3, #8
 8010704:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010708:	f8d4 b000 	ldr.w	fp, [r4]
 801070c:	f8c8 2000 	str.w	r2, [r8]
 8010710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010714:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010718:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801071c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010720:	9307      	str	r3, [sp, #28]
 8010722:	f8cd 8018 	str.w	r8, [sp, #24]
 8010726:	f04f 32ff 	mov.w	r2, #4294967295
 801072a:	4ba5      	ldr	r3, [pc, #660]	; (80109c0 <_printf_float+0x2f0>)
 801072c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010730:	f7f0 fa28 	bl	8000b84 <__aeabi_dcmpun>
 8010734:	2800      	cmp	r0, #0
 8010736:	f040 81fb 	bne.w	8010b30 <_printf_float+0x460>
 801073a:	f04f 32ff 	mov.w	r2, #4294967295
 801073e:	4ba0      	ldr	r3, [pc, #640]	; (80109c0 <_printf_float+0x2f0>)
 8010740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010744:	f7f0 fa00 	bl	8000b48 <__aeabi_dcmple>
 8010748:	2800      	cmp	r0, #0
 801074a:	f040 81f1 	bne.w	8010b30 <_printf_float+0x460>
 801074e:	2200      	movs	r2, #0
 8010750:	2300      	movs	r3, #0
 8010752:	4640      	mov	r0, r8
 8010754:	4649      	mov	r1, r9
 8010756:	f7f0 f9ed 	bl	8000b34 <__aeabi_dcmplt>
 801075a:	b110      	cbz	r0, 8010762 <_printf_float+0x92>
 801075c:	232d      	movs	r3, #45	; 0x2d
 801075e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010762:	4b98      	ldr	r3, [pc, #608]	; (80109c4 <_printf_float+0x2f4>)
 8010764:	4a98      	ldr	r2, [pc, #608]	; (80109c8 <_printf_float+0x2f8>)
 8010766:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801076a:	bf8c      	ite	hi
 801076c:	4690      	movhi	r8, r2
 801076e:	4698      	movls	r8, r3
 8010770:	2303      	movs	r3, #3
 8010772:	f02b 0204 	bic.w	r2, fp, #4
 8010776:	6123      	str	r3, [r4, #16]
 8010778:	6022      	str	r2, [r4, #0]
 801077a:	f04f 0900 	mov.w	r9, #0
 801077e:	9700      	str	r7, [sp, #0]
 8010780:	4633      	mov	r3, r6
 8010782:	aa0b      	add	r2, sp, #44	; 0x2c
 8010784:	4621      	mov	r1, r4
 8010786:	4628      	mov	r0, r5
 8010788:	f000 f9e2 	bl	8010b50 <_printf_common>
 801078c:	3001      	adds	r0, #1
 801078e:	f040 8093 	bne.w	80108b8 <_printf_float+0x1e8>
 8010792:	f04f 30ff 	mov.w	r0, #4294967295
 8010796:	b00d      	add	sp, #52	; 0x34
 8010798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079c:	6861      	ldr	r1, [r4, #4]
 801079e:	1c4b      	adds	r3, r1, #1
 80107a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80107a4:	d13f      	bne.n	8010826 <_printf_float+0x156>
 80107a6:	2306      	movs	r3, #6
 80107a8:	6063      	str	r3, [r4, #4]
 80107aa:	2300      	movs	r3, #0
 80107ac:	9303      	str	r3, [sp, #12]
 80107ae:	ab0a      	add	r3, sp, #40	; 0x28
 80107b0:	9302      	str	r3, [sp, #8]
 80107b2:	ab09      	add	r3, sp, #36	; 0x24
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	ec49 8b10 	vmov	d0, r8, r9
 80107ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107be:	6022      	str	r2, [r4, #0]
 80107c0:	f8cd a004 	str.w	sl, [sp, #4]
 80107c4:	6861      	ldr	r1, [r4, #4]
 80107c6:	4628      	mov	r0, r5
 80107c8:	f7ff feec 	bl	80105a4 <__cvt>
 80107cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80107d0:	2b47      	cmp	r3, #71	; 0x47
 80107d2:	4680      	mov	r8, r0
 80107d4:	d109      	bne.n	80107ea <_printf_float+0x11a>
 80107d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d8:	1cd8      	adds	r0, r3, #3
 80107da:	db02      	blt.n	80107e2 <_printf_float+0x112>
 80107dc:	6862      	ldr	r2, [r4, #4]
 80107de:	4293      	cmp	r3, r2
 80107e0:	dd57      	ble.n	8010892 <_printf_float+0x1c2>
 80107e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80107e6:	fa5f fa8a 	uxtb.w	sl, sl
 80107ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80107ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107f0:	d834      	bhi.n	801085c <_printf_float+0x18c>
 80107f2:	3901      	subs	r1, #1
 80107f4:	4652      	mov	r2, sl
 80107f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80107fa:	9109      	str	r1, [sp, #36]	; 0x24
 80107fc:	f7ff ff33 	bl	8010666 <__exponent>
 8010800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010802:	1883      	adds	r3, r0, r2
 8010804:	2a01      	cmp	r2, #1
 8010806:	4681      	mov	r9, r0
 8010808:	6123      	str	r3, [r4, #16]
 801080a:	dc02      	bgt.n	8010812 <_printf_float+0x142>
 801080c:	6822      	ldr	r2, [r4, #0]
 801080e:	07d1      	lsls	r1, r2, #31
 8010810:	d501      	bpl.n	8010816 <_printf_float+0x146>
 8010812:	3301      	adds	r3, #1
 8010814:	6123      	str	r3, [r4, #16]
 8010816:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801081a:	2b00      	cmp	r3, #0
 801081c:	d0af      	beq.n	801077e <_printf_float+0xae>
 801081e:	232d      	movs	r3, #45	; 0x2d
 8010820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010824:	e7ab      	b.n	801077e <_printf_float+0xae>
 8010826:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801082a:	d002      	beq.n	8010832 <_printf_float+0x162>
 801082c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010830:	d1bb      	bne.n	80107aa <_printf_float+0xda>
 8010832:	b189      	cbz	r1, 8010858 <_printf_float+0x188>
 8010834:	2300      	movs	r3, #0
 8010836:	9303      	str	r3, [sp, #12]
 8010838:	ab0a      	add	r3, sp, #40	; 0x28
 801083a:	9302      	str	r3, [sp, #8]
 801083c:	ab09      	add	r3, sp, #36	; 0x24
 801083e:	9300      	str	r3, [sp, #0]
 8010840:	ec49 8b10 	vmov	d0, r8, r9
 8010844:	6022      	str	r2, [r4, #0]
 8010846:	f8cd a004 	str.w	sl, [sp, #4]
 801084a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801084e:	4628      	mov	r0, r5
 8010850:	f7ff fea8 	bl	80105a4 <__cvt>
 8010854:	4680      	mov	r8, r0
 8010856:	e7be      	b.n	80107d6 <_printf_float+0x106>
 8010858:	2301      	movs	r3, #1
 801085a:	e7a5      	b.n	80107a8 <_printf_float+0xd8>
 801085c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010860:	d119      	bne.n	8010896 <_printf_float+0x1c6>
 8010862:	2900      	cmp	r1, #0
 8010864:	6863      	ldr	r3, [r4, #4]
 8010866:	dd0c      	ble.n	8010882 <_printf_float+0x1b2>
 8010868:	6121      	str	r1, [r4, #16]
 801086a:	b913      	cbnz	r3, 8010872 <_printf_float+0x1a2>
 801086c:	6822      	ldr	r2, [r4, #0]
 801086e:	07d2      	lsls	r2, r2, #31
 8010870:	d502      	bpl.n	8010878 <_printf_float+0x1a8>
 8010872:	3301      	adds	r3, #1
 8010874:	440b      	add	r3, r1
 8010876:	6123      	str	r3, [r4, #16]
 8010878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801087a:	65a3      	str	r3, [r4, #88]	; 0x58
 801087c:	f04f 0900 	mov.w	r9, #0
 8010880:	e7c9      	b.n	8010816 <_printf_float+0x146>
 8010882:	b913      	cbnz	r3, 801088a <_printf_float+0x1ba>
 8010884:	6822      	ldr	r2, [r4, #0]
 8010886:	07d0      	lsls	r0, r2, #31
 8010888:	d501      	bpl.n	801088e <_printf_float+0x1be>
 801088a:	3302      	adds	r3, #2
 801088c:	e7f3      	b.n	8010876 <_printf_float+0x1a6>
 801088e:	2301      	movs	r3, #1
 8010890:	e7f1      	b.n	8010876 <_printf_float+0x1a6>
 8010892:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801089a:	4293      	cmp	r3, r2
 801089c:	db05      	blt.n	80108aa <_printf_float+0x1da>
 801089e:	6822      	ldr	r2, [r4, #0]
 80108a0:	6123      	str	r3, [r4, #16]
 80108a2:	07d1      	lsls	r1, r2, #31
 80108a4:	d5e8      	bpl.n	8010878 <_printf_float+0x1a8>
 80108a6:	3301      	adds	r3, #1
 80108a8:	e7e5      	b.n	8010876 <_printf_float+0x1a6>
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	bfd4      	ite	le
 80108ae:	f1c3 0302 	rsble	r3, r3, #2
 80108b2:	2301      	movgt	r3, #1
 80108b4:	4413      	add	r3, r2
 80108b6:	e7de      	b.n	8010876 <_printf_float+0x1a6>
 80108b8:	6823      	ldr	r3, [r4, #0]
 80108ba:	055a      	lsls	r2, r3, #21
 80108bc:	d407      	bmi.n	80108ce <_printf_float+0x1fe>
 80108be:	6923      	ldr	r3, [r4, #16]
 80108c0:	4642      	mov	r2, r8
 80108c2:	4631      	mov	r1, r6
 80108c4:	4628      	mov	r0, r5
 80108c6:	47b8      	blx	r7
 80108c8:	3001      	adds	r0, #1
 80108ca:	d12b      	bne.n	8010924 <_printf_float+0x254>
 80108cc:	e761      	b.n	8010792 <_printf_float+0xc2>
 80108ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80108d2:	f240 80e2 	bls.w	8010a9a <_printf_float+0x3ca>
 80108d6:	2200      	movs	r2, #0
 80108d8:	2300      	movs	r3, #0
 80108da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108de:	f7f0 f91f 	bl	8000b20 <__aeabi_dcmpeq>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d03c      	beq.n	8010960 <_printf_float+0x290>
 80108e6:	2301      	movs	r3, #1
 80108e8:	4a38      	ldr	r2, [pc, #224]	; (80109cc <_printf_float+0x2fc>)
 80108ea:	4631      	mov	r1, r6
 80108ec:	4628      	mov	r0, r5
 80108ee:	47b8      	blx	r7
 80108f0:	3001      	adds	r0, #1
 80108f2:	f43f af4e 	beq.w	8010792 <_printf_float+0xc2>
 80108f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108fa:	429a      	cmp	r2, r3
 80108fc:	db02      	blt.n	8010904 <_printf_float+0x234>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	07d8      	lsls	r0, r3, #31
 8010902:	d50f      	bpl.n	8010924 <_printf_float+0x254>
 8010904:	9b05      	ldr	r3, [sp, #20]
 8010906:	9a04      	ldr	r2, [sp, #16]
 8010908:	4631      	mov	r1, r6
 801090a:	4628      	mov	r0, r5
 801090c:	47b8      	blx	r7
 801090e:	3001      	adds	r0, #1
 8010910:	f43f af3f 	beq.w	8010792 <_printf_float+0xc2>
 8010914:	f04f 0800 	mov.w	r8, #0
 8010918:	f104 091a 	add.w	r9, r4, #26
 801091c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801091e:	3b01      	subs	r3, #1
 8010920:	4598      	cmp	r8, r3
 8010922:	db12      	blt.n	801094a <_printf_float+0x27a>
 8010924:	6823      	ldr	r3, [r4, #0]
 8010926:	079b      	lsls	r3, r3, #30
 8010928:	d509      	bpl.n	801093e <_printf_float+0x26e>
 801092a:	f04f 0800 	mov.w	r8, #0
 801092e:	f104 0919 	add.w	r9, r4, #25
 8010932:	68e3      	ldr	r3, [r4, #12]
 8010934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010936:	1a9b      	subs	r3, r3, r2
 8010938:	4598      	cmp	r8, r3
 801093a:	f2c0 80ee 	blt.w	8010b1a <_printf_float+0x44a>
 801093e:	68e0      	ldr	r0, [r4, #12]
 8010940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010942:	4298      	cmp	r0, r3
 8010944:	bfb8      	it	lt
 8010946:	4618      	movlt	r0, r3
 8010948:	e725      	b.n	8010796 <_printf_float+0xc6>
 801094a:	2301      	movs	r3, #1
 801094c:	464a      	mov	r2, r9
 801094e:	4631      	mov	r1, r6
 8010950:	4628      	mov	r0, r5
 8010952:	47b8      	blx	r7
 8010954:	3001      	adds	r0, #1
 8010956:	f43f af1c 	beq.w	8010792 <_printf_float+0xc2>
 801095a:	f108 0801 	add.w	r8, r8, #1
 801095e:	e7dd      	b.n	801091c <_printf_float+0x24c>
 8010960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010962:	2b00      	cmp	r3, #0
 8010964:	dc34      	bgt.n	80109d0 <_printf_float+0x300>
 8010966:	2301      	movs	r3, #1
 8010968:	4a18      	ldr	r2, [pc, #96]	; (80109cc <_printf_float+0x2fc>)
 801096a:	4631      	mov	r1, r6
 801096c:	4628      	mov	r0, r5
 801096e:	47b8      	blx	r7
 8010970:	3001      	adds	r0, #1
 8010972:	f43f af0e 	beq.w	8010792 <_printf_float+0xc2>
 8010976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010978:	b923      	cbnz	r3, 8010984 <_printf_float+0x2b4>
 801097a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801097c:	b913      	cbnz	r3, 8010984 <_printf_float+0x2b4>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	07d9      	lsls	r1, r3, #31
 8010982:	d5cf      	bpl.n	8010924 <_printf_float+0x254>
 8010984:	9b05      	ldr	r3, [sp, #20]
 8010986:	9a04      	ldr	r2, [sp, #16]
 8010988:	4631      	mov	r1, r6
 801098a:	4628      	mov	r0, r5
 801098c:	47b8      	blx	r7
 801098e:	3001      	adds	r0, #1
 8010990:	f43f aeff 	beq.w	8010792 <_printf_float+0xc2>
 8010994:	f04f 0900 	mov.w	r9, #0
 8010998:	f104 0a1a 	add.w	sl, r4, #26
 801099c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099e:	425b      	negs	r3, r3
 80109a0:	4599      	cmp	r9, r3
 80109a2:	db01      	blt.n	80109a8 <_printf_float+0x2d8>
 80109a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a6:	e78b      	b.n	80108c0 <_printf_float+0x1f0>
 80109a8:	2301      	movs	r3, #1
 80109aa:	4652      	mov	r2, sl
 80109ac:	4631      	mov	r1, r6
 80109ae:	4628      	mov	r0, r5
 80109b0:	47b8      	blx	r7
 80109b2:	3001      	adds	r0, #1
 80109b4:	f43f aeed 	beq.w	8010792 <_printf_float+0xc2>
 80109b8:	f109 0901 	add.w	r9, r9, #1
 80109bc:	e7ee      	b.n	801099c <_printf_float+0x2cc>
 80109be:	bf00      	nop
 80109c0:	7fefffff 	.word	0x7fefffff
 80109c4:	080161c6 	.word	0x080161c6
 80109c8:	080161ca 	.word	0x080161ca
 80109cc:	080161d6 	.word	0x080161d6
 80109d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109d4:	429a      	cmp	r2, r3
 80109d6:	bfa8      	it	ge
 80109d8:	461a      	movge	r2, r3
 80109da:	2a00      	cmp	r2, #0
 80109dc:	4691      	mov	r9, r2
 80109de:	dc38      	bgt.n	8010a52 <_printf_float+0x382>
 80109e0:	f104 031a 	add.w	r3, r4, #26
 80109e4:	f04f 0b00 	mov.w	fp, #0
 80109e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109ec:	9306      	str	r3, [sp, #24]
 80109ee:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80109f2:	ebaa 0309 	sub.w	r3, sl, r9
 80109f6:	459b      	cmp	fp, r3
 80109f8:	db33      	blt.n	8010a62 <_printf_float+0x392>
 80109fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109fe:	429a      	cmp	r2, r3
 8010a00:	db3a      	blt.n	8010a78 <_printf_float+0x3a8>
 8010a02:	6823      	ldr	r3, [r4, #0]
 8010a04:	07da      	lsls	r2, r3, #31
 8010a06:	d437      	bmi.n	8010a78 <_printf_float+0x3a8>
 8010a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a0c:	eba3 020a 	sub.w	r2, r3, sl
 8010a10:	eba3 0901 	sub.w	r9, r3, r1
 8010a14:	4591      	cmp	r9, r2
 8010a16:	bfa8      	it	ge
 8010a18:	4691      	movge	r9, r2
 8010a1a:	f1b9 0f00 	cmp.w	r9, #0
 8010a1e:	dc33      	bgt.n	8010a88 <_printf_float+0x3b8>
 8010a20:	f04f 0800 	mov.w	r8, #0
 8010a24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a28:	f104 0a1a 	add.w	sl, r4, #26
 8010a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a30:	1a9b      	subs	r3, r3, r2
 8010a32:	eba3 0309 	sub.w	r3, r3, r9
 8010a36:	4598      	cmp	r8, r3
 8010a38:	f6bf af74 	bge.w	8010924 <_printf_float+0x254>
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	4652      	mov	r2, sl
 8010a40:	4631      	mov	r1, r6
 8010a42:	4628      	mov	r0, r5
 8010a44:	47b8      	blx	r7
 8010a46:	3001      	adds	r0, #1
 8010a48:	f43f aea3 	beq.w	8010792 <_printf_float+0xc2>
 8010a4c:	f108 0801 	add.w	r8, r8, #1
 8010a50:	e7ec      	b.n	8010a2c <_printf_float+0x35c>
 8010a52:	4613      	mov	r3, r2
 8010a54:	4631      	mov	r1, r6
 8010a56:	4642      	mov	r2, r8
 8010a58:	4628      	mov	r0, r5
 8010a5a:	47b8      	blx	r7
 8010a5c:	3001      	adds	r0, #1
 8010a5e:	d1bf      	bne.n	80109e0 <_printf_float+0x310>
 8010a60:	e697      	b.n	8010792 <_printf_float+0xc2>
 8010a62:	2301      	movs	r3, #1
 8010a64:	9a06      	ldr	r2, [sp, #24]
 8010a66:	4631      	mov	r1, r6
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b8      	blx	r7
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	f43f ae90 	beq.w	8010792 <_printf_float+0xc2>
 8010a72:	f10b 0b01 	add.w	fp, fp, #1
 8010a76:	e7ba      	b.n	80109ee <_printf_float+0x31e>
 8010a78:	9b05      	ldr	r3, [sp, #20]
 8010a7a:	9a04      	ldr	r2, [sp, #16]
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	4628      	mov	r0, r5
 8010a80:	47b8      	blx	r7
 8010a82:	3001      	adds	r0, #1
 8010a84:	d1c0      	bne.n	8010a08 <_printf_float+0x338>
 8010a86:	e684      	b.n	8010792 <_printf_float+0xc2>
 8010a88:	464b      	mov	r3, r9
 8010a8a:	eb08 020a 	add.w	r2, r8, sl
 8010a8e:	4631      	mov	r1, r6
 8010a90:	4628      	mov	r0, r5
 8010a92:	47b8      	blx	r7
 8010a94:	3001      	adds	r0, #1
 8010a96:	d1c3      	bne.n	8010a20 <_printf_float+0x350>
 8010a98:	e67b      	b.n	8010792 <_printf_float+0xc2>
 8010a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a9c:	2a01      	cmp	r2, #1
 8010a9e:	dc01      	bgt.n	8010aa4 <_printf_float+0x3d4>
 8010aa0:	07db      	lsls	r3, r3, #31
 8010aa2:	d537      	bpl.n	8010b14 <_printf_float+0x444>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	4642      	mov	r2, r8
 8010aa8:	4631      	mov	r1, r6
 8010aaa:	4628      	mov	r0, r5
 8010aac:	47b8      	blx	r7
 8010aae:	3001      	adds	r0, #1
 8010ab0:	f43f ae6f 	beq.w	8010792 <_printf_float+0xc2>
 8010ab4:	9b05      	ldr	r3, [sp, #20]
 8010ab6:	9a04      	ldr	r2, [sp, #16]
 8010ab8:	4631      	mov	r1, r6
 8010aba:	4628      	mov	r0, r5
 8010abc:	47b8      	blx	r7
 8010abe:	3001      	adds	r0, #1
 8010ac0:	f43f ae67 	beq.w	8010792 <_printf_float+0xc2>
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010acc:	f7f0 f828 	bl	8000b20 <__aeabi_dcmpeq>
 8010ad0:	b158      	cbz	r0, 8010aea <_printf_float+0x41a>
 8010ad2:	f04f 0800 	mov.w	r8, #0
 8010ad6:	f104 0a1a 	add.w	sl, r4, #26
 8010ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010adc:	3b01      	subs	r3, #1
 8010ade:	4598      	cmp	r8, r3
 8010ae0:	db0d      	blt.n	8010afe <_printf_float+0x42e>
 8010ae2:	464b      	mov	r3, r9
 8010ae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010ae8:	e6eb      	b.n	80108c2 <_printf_float+0x1f2>
 8010aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aec:	f108 0201 	add.w	r2, r8, #1
 8010af0:	3b01      	subs	r3, #1
 8010af2:	4631      	mov	r1, r6
 8010af4:	4628      	mov	r0, r5
 8010af6:	47b8      	blx	r7
 8010af8:	3001      	adds	r0, #1
 8010afa:	d1f2      	bne.n	8010ae2 <_printf_float+0x412>
 8010afc:	e649      	b.n	8010792 <_printf_float+0xc2>
 8010afe:	2301      	movs	r3, #1
 8010b00:	4652      	mov	r2, sl
 8010b02:	4631      	mov	r1, r6
 8010b04:	4628      	mov	r0, r5
 8010b06:	47b8      	blx	r7
 8010b08:	3001      	adds	r0, #1
 8010b0a:	f43f ae42 	beq.w	8010792 <_printf_float+0xc2>
 8010b0e:	f108 0801 	add.w	r8, r8, #1
 8010b12:	e7e2      	b.n	8010ada <_printf_float+0x40a>
 8010b14:	2301      	movs	r3, #1
 8010b16:	4642      	mov	r2, r8
 8010b18:	e7eb      	b.n	8010af2 <_printf_float+0x422>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	464a      	mov	r2, r9
 8010b1e:	4631      	mov	r1, r6
 8010b20:	4628      	mov	r0, r5
 8010b22:	47b8      	blx	r7
 8010b24:	3001      	adds	r0, #1
 8010b26:	f43f ae34 	beq.w	8010792 <_printf_float+0xc2>
 8010b2a:	f108 0801 	add.w	r8, r8, #1
 8010b2e:	e700      	b.n	8010932 <_printf_float+0x262>
 8010b30:	4642      	mov	r2, r8
 8010b32:	464b      	mov	r3, r9
 8010b34:	4640      	mov	r0, r8
 8010b36:	4649      	mov	r1, r9
 8010b38:	f7f0 f824 	bl	8000b84 <__aeabi_dcmpun>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	f43f ae2d 	beq.w	801079c <_printf_float+0xcc>
 8010b42:	4b01      	ldr	r3, [pc, #4]	; (8010b48 <_printf_float+0x478>)
 8010b44:	4a01      	ldr	r2, [pc, #4]	; (8010b4c <_printf_float+0x47c>)
 8010b46:	e60e      	b.n	8010766 <_printf_float+0x96>
 8010b48:	080161ce 	.word	0x080161ce
 8010b4c:	080161d2 	.word	0x080161d2

08010b50 <_printf_common>:
 8010b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b54:	4691      	mov	r9, r2
 8010b56:	461f      	mov	r7, r3
 8010b58:	688a      	ldr	r2, [r1, #8]
 8010b5a:	690b      	ldr	r3, [r1, #16]
 8010b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b60:	4293      	cmp	r3, r2
 8010b62:	bfb8      	it	lt
 8010b64:	4613      	movlt	r3, r2
 8010b66:	f8c9 3000 	str.w	r3, [r9]
 8010b6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b6e:	4606      	mov	r6, r0
 8010b70:	460c      	mov	r4, r1
 8010b72:	b112      	cbz	r2, 8010b7a <_printf_common+0x2a>
 8010b74:	3301      	adds	r3, #1
 8010b76:	f8c9 3000 	str.w	r3, [r9]
 8010b7a:	6823      	ldr	r3, [r4, #0]
 8010b7c:	0699      	lsls	r1, r3, #26
 8010b7e:	bf42      	ittt	mi
 8010b80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010b84:	3302      	addmi	r3, #2
 8010b86:	f8c9 3000 	strmi.w	r3, [r9]
 8010b8a:	6825      	ldr	r5, [r4, #0]
 8010b8c:	f015 0506 	ands.w	r5, r5, #6
 8010b90:	d107      	bne.n	8010ba2 <_printf_common+0x52>
 8010b92:	f104 0a19 	add.w	sl, r4, #25
 8010b96:	68e3      	ldr	r3, [r4, #12]
 8010b98:	f8d9 2000 	ldr.w	r2, [r9]
 8010b9c:	1a9b      	subs	r3, r3, r2
 8010b9e:	429d      	cmp	r5, r3
 8010ba0:	db29      	blt.n	8010bf6 <_printf_common+0xa6>
 8010ba2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010ba6:	6822      	ldr	r2, [r4, #0]
 8010ba8:	3300      	adds	r3, #0
 8010baa:	bf18      	it	ne
 8010bac:	2301      	movne	r3, #1
 8010bae:	0692      	lsls	r2, r2, #26
 8010bb0:	d42e      	bmi.n	8010c10 <_printf_common+0xc0>
 8010bb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bb6:	4639      	mov	r1, r7
 8010bb8:	4630      	mov	r0, r6
 8010bba:	47c0      	blx	r8
 8010bbc:	3001      	adds	r0, #1
 8010bbe:	d021      	beq.n	8010c04 <_printf_common+0xb4>
 8010bc0:	6823      	ldr	r3, [r4, #0]
 8010bc2:	68e5      	ldr	r5, [r4, #12]
 8010bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8010bc8:	f003 0306 	and.w	r3, r3, #6
 8010bcc:	2b04      	cmp	r3, #4
 8010bce:	bf08      	it	eq
 8010bd0:	1aad      	subeq	r5, r5, r2
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	6922      	ldr	r2, [r4, #16]
 8010bd6:	bf0c      	ite	eq
 8010bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bdc:	2500      	movne	r5, #0
 8010bde:	4293      	cmp	r3, r2
 8010be0:	bfc4      	itt	gt
 8010be2:	1a9b      	subgt	r3, r3, r2
 8010be4:	18ed      	addgt	r5, r5, r3
 8010be6:	f04f 0900 	mov.w	r9, #0
 8010bea:	341a      	adds	r4, #26
 8010bec:	454d      	cmp	r5, r9
 8010bee:	d11b      	bne.n	8010c28 <_printf_common+0xd8>
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	4652      	mov	r2, sl
 8010bfa:	4639      	mov	r1, r7
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	47c0      	blx	r8
 8010c00:	3001      	adds	r0, #1
 8010c02:	d103      	bne.n	8010c0c <_printf_common+0xbc>
 8010c04:	f04f 30ff 	mov.w	r0, #4294967295
 8010c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c0c:	3501      	adds	r5, #1
 8010c0e:	e7c2      	b.n	8010b96 <_printf_common+0x46>
 8010c10:	18e1      	adds	r1, r4, r3
 8010c12:	1c5a      	adds	r2, r3, #1
 8010c14:	2030      	movs	r0, #48	; 0x30
 8010c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c1a:	4422      	add	r2, r4
 8010c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c24:	3302      	adds	r3, #2
 8010c26:	e7c4      	b.n	8010bb2 <_printf_common+0x62>
 8010c28:	2301      	movs	r3, #1
 8010c2a:	4622      	mov	r2, r4
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	4630      	mov	r0, r6
 8010c30:	47c0      	blx	r8
 8010c32:	3001      	adds	r0, #1
 8010c34:	d0e6      	beq.n	8010c04 <_printf_common+0xb4>
 8010c36:	f109 0901 	add.w	r9, r9, #1
 8010c3a:	e7d7      	b.n	8010bec <_printf_common+0x9c>

08010c3c <_printf_i>:
 8010c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c40:	4617      	mov	r7, r2
 8010c42:	7e0a      	ldrb	r2, [r1, #24]
 8010c44:	b085      	sub	sp, #20
 8010c46:	2a6e      	cmp	r2, #110	; 0x6e
 8010c48:	4698      	mov	r8, r3
 8010c4a:	4606      	mov	r6, r0
 8010c4c:	460c      	mov	r4, r1
 8010c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c50:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8010c54:	f000 80bc 	beq.w	8010dd0 <_printf_i+0x194>
 8010c58:	d81a      	bhi.n	8010c90 <_printf_i+0x54>
 8010c5a:	2a63      	cmp	r2, #99	; 0x63
 8010c5c:	d02e      	beq.n	8010cbc <_printf_i+0x80>
 8010c5e:	d80a      	bhi.n	8010c76 <_printf_i+0x3a>
 8010c60:	2a00      	cmp	r2, #0
 8010c62:	f000 80c8 	beq.w	8010df6 <_printf_i+0x1ba>
 8010c66:	2a58      	cmp	r2, #88	; 0x58
 8010c68:	f000 808a 	beq.w	8010d80 <_printf_i+0x144>
 8010c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8010c74:	e02a      	b.n	8010ccc <_printf_i+0x90>
 8010c76:	2a64      	cmp	r2, #100	; 0x64
 8010c78:	d001      	beq.n	8010c7e <_printf_i+0x42>
 8010c7a:	2a69      	cmp	r2, #105	; 0x69
 8010c7c:	d1f6      	bne.n	8010c6c <_printf_i+0x30>
 8010c7e:	6821      	ldr	r1, [r4, #0]
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8010c86:	d023      	beq.n	8010cd0 <_printf_i+0x94>
 8010c88:	1d11      	adds	r1, r2, #4
 8010c8a:	6019      	str	r1, [r3, #0]
 8010c8c:	6813      	ldr	r3, [r2, #0]
 8010c8e:	e027      	b.n	8010ce0 <_printf_i+0xa4>
 8010c90:	2a73      	cmp	r2, #115	; 0x73
 8010c92:	f000 80b4 	beq.w	8010dfe <_printf_i+0x1c2>
 8010c96:	d808      	bhi.n	8010caa <_printf_i+0x6e>
 8010c98:	2a6f      	cmp	r2, #111	; 0x6f
 8010c9a:	d02a      	beq.n	8010cf2 <_printf_i+0xb6>
 8010c9c:	2a70      	cmp	r2, #112	; 0x70
 8010c9e:	d1e5      	bne.n	8010c6c <_printf_i+0x30>
 8010ca0:	680a      	ldr	r2, [r1, #0]
 8010ca2:	f042 0220 	orr.w	r2, r2, #32
 8010ca6:	600a      	str	r2, [r1, #0]
 8010ca8:	e003      	b.n	8010cb2 <_printf_i+0x76>
 8010caa:	2a75      	cmp	r2, #117	; 0x75
 8010cac:	d021      	beq.n	8010cf2 <_printf_i+0xb6>
 8010cae:	2a78      	cmp	r2, #120	; 0x78
 8010cb0:	d1dc      	bne.n	8010c6c <_printf_i+0x30>
 8010cb2:	2278      	movs	r2, #120	; 0x78
 8010cb4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8010cb8:	496e      	ldr	r1, [pc, #440]	; (8010e74 <_printf_i+0x238>)
 8010cba:	e064      	b.n	8010d86 <_printf_i+0x14a>
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8010cc2:	1d11      	adds	r1, r2, #4
 8010cc4:	6019      	str	r1, [r3, #0]
 8010cc6:	6813      	ldr	r3, [r2, #0]
 8010cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ccc:	2301      	movs	r3, #1
 8010cce:	e0a3      	b.n	8010e18 <_printf_i+0x1dc>
 8010cd0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8010cd4:	f102 0104 	add.w	r1, r2, #4
 8010cd8:	6019      	str	r1, [r3, #0]
 8010cda:	d0d7      	beq.n	8010c8c <_printf_i+0x50>
 8010cdc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	da03      	bge.n	8010cec <_printf_i+0xb0>
 8010ce4:	222d      	movs	r2, #45	; 0x2d
 8010ce6:	425b      	negs	r3, r3
 8010ce8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010cec:	4962      	ldr	r1, [pc, #392]	; (8010e78 <_printf_i+0x23c>)
 8010cee:	220a      	movs	r2, #10
 8010cf0:	e017      	b.n	8010d22 <_printf_i+0xe6>
 8010cf2:	6820      	ldr	r0, [r4, #0]
 8010cf4:	6819      	ldr	r1, [r3, #0]
 8010cf6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010cfa:	d003      	beq.n	8010d04 <_printf_i+0xc8>
 8010cfc:	1d08      	adds	r0, r1, #4
 8010cfe:	6018      	str	r0, [r3, #0]
 8010d00:	680b      	ldr	r3, [r1, #0]
 8010d02:	e006      	b.n	8010d12 <_printf_i+0xd6>
 8010d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d08:	f101 0004 	add.w	r0, r1, #4
 8010d0c:	6018      	str	r0, [r3, #0]
 8010d0e:	d0f7      	beq.n	8010d00 <_printf_i+0xc4>
 8010d10:	880b      	ldrh	r3, [r1, #0]
 8010d12:	4959      	ldr	r1, [pc, #356]	; (8010e78 <_printf_i+0x23c>)
 8010d14:	2a6f      	cmp	r2, #111	; 0x6f
 8010d16:	bf14      	ite	ne
 8010d18:	220a      	movne	r2, #10
 8010d1a:	2208      	moveq	r2, #8
 8010d1c:	2000      	movs	r0, #0
 8010d1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8010d22:	6865      	ldr	r5, [r4, #4]
 8010d24:	60a5      	str	r5, [r4, #8]
 8010d26:	2d00      	cmp	r5, #0
 8010d28:	f2c0 809c 	blt.w	8010e64 <_printf_i+0x228>
 8010d2c:	6820      	ldr	r0, [r4, #0]
 8010d2e:	f020 0004 	bic.w	r0, r0, #4
 8010d32:	6020      	str	r0, [r4, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d13f      	bne.n	8010db8 <_printf_i+0x17c>
 8010d38:	2d00      	cmp	r5, #0
 8010d3a:	f040 8095 	bne.w	8010e68 <_printf_i+0x22c>
 8010d3e:	4675      	mov	r5, lr
 8010d40:	2a08      	cmp	r2, #8
 8010d42:	d10b      	bne.n	8010d5c <_printf_i+0x120>
 8010d44:	6823      	ldr	r3, [r4, #0]
 8010d46:	07da      	lsls	r2, r3, #31
 8010d48:	d508      	bpl.n	8010d5c <_printf_i+0x120>
 8010d4a:	6923      	ldr	r3, [r4, #16]
 8010d4c:	6862      	ldr	r2, [r4, #4]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	bfde      	ittt	le
 8010d52:	2330      	movle	r3, #48	; 0x30
 8010d54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010d5c:	ebae 0305 	sub.w	r3, lr, r5
 8010d60:	6123      	str	r3, [r4, #16]
 8010d62:	f8cd 8000 	str.w	r8, [sp]
 8010d66:	463b      	mov	r3, r7
 8010d68:	aa03      	add	r2, sp, #12
 8010d6a:	4621      	mov	r1, r4
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7ff feef 	bl	8010b50 <_printf_common>
 8010d72:	3001      	adds	r0, #1
 8010d74:	d155      	bne.n	8010e22 <_printf_i+0x1e6>
 8010d76:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7a:	b005      	add	sp, #20
 8010d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d80:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8010d84:	493c      	ldr	r1, [pc, #240]	; (8010e78 <_printf_i+0x23c>)
 8010d86:	6822      	ldr	r2, [r4, #0]
 8010d88:	6818      	ldr	r0, [r3, #0]
 8010d8a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010d8e:	f100 0504 	add.w	r5, r0, #4
 8010d92:	601d      	str	r5, [r3, #0]
 8010d94:	d001      	beq.n	8010d9a <_printf_i+0x15e>
 8010d96:	6803      	ldr	r3, [r0, #0]
 8010d98:	e002      	b.n	8010da0 <_printf_i+0x164>
 8010d9a:	0655      	lsls	r5, r2, #25
 8010d9c:	d5fb      	bpl.n	8010d96 <_printf_i+0x15a>
 8010d9e:	8803      	ldrh	r3, [r0, #0]
 8010da0:	07d0      	lsls	r0, r2, #31
 8010da2:	bf44      	itt	mi
 8010da4:	f042 0220 	orrmi.w	r2, r2, #32
 8010da8:	6022      	strmi	r2, [r4, #0]
 8010daa:	b91b      	cbnz	r3, 8010db4 <_printf_i+0x178>
 8010dac:	6822      	ldr	r2, [r4, #0]
 8010dae:	f022 0220 	bic.w	r2, r2, #32
 8010db2:	6022      	str	r2, [r4, #0]
 8010db4:	2210      	movs	r2, #16
 8010db6:	e7b1      	b.n	8010d1c <_printf_i+0xe0>
 8010db8:	4675      	mov	r5, lr
 8010dba:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dbe:	fb02 3310 	mls	r3, r2, r0, r3
 8010dc2:	5ccb      	ldrb	r3, [r1, r3]
 8010dc4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d1f5      	bne.n	8010dba <_printf_i+0x17e>
 8010dce:	e7b7      	b.n	8010d40 <_printf_i+0x104>
 8010dd0:	6808      	ldr	r0, [r1, #0]
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	6949      	ldr	r1, [r1, #20]
 8010dd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010dda:	d004      	beq.n	8010de6 <_printf_i+0x1aa>
 8010ddc:	1d10      	adds	r0, r2, #4
 8010dde:	6018      	str	r0, [r3, #0]
 8010de0:	6813      	ldr	r3, [r2, #0]
 8010de2:	6019      	str	r1, [r3, #0]
 8010de4:	e007      	b.n	8010df6 <_printf_i+0x1ba>
 8010de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dea:	f102 0004 	add.w	r0, r2, #4
 8010dee:	6018      	str	r0, [r3, #0]
 8010df0:	6813      	ldr	r3, [r2, #0]
 8010df2:	d0f6      	beq.n	8010de2 <_printf_i+0x1a6>
 8010df4:	8019      	strh	r1, [r3, #0]
 8010df6:	2300      	movs	r3, #0
 8010df8:	6123      	str	r3, [r4, #16]
 8010dfa:	4675      	mov	r5, lr
 8010dfc:	e7b1      	b.n	8010d62 <_printf_i+0x126>
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	1d11      	adds	r1, r2, #4
 8010e02:	6019      	str	r1, [r3, #0]
 8010e04:	6815      	ldr	r5, [r2, #0]
 8010e06:	6862      	ldr	r2, [r4, #4]
 8010e08:	2100      	movs	r1, #0
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	f7ef fa18 	bl	8000240 <memchr>
 8010e10:	b108      	cbz	r0, 8010e16 <_printf_i+0x1da>
 8010e12:	1b40      	subs	r0, r0, r5
 8010e14:	6060      	str	r0, [r4, #4]
 8010e16:	6863      	ldr	r3, [r4, #4]
 8010e18:	6123      	str	r3, [r4, #16]
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e20:	e79f      	b.n	8010d62 <_printf_i+0x126>
 8010e22:	6923      	ldr	r3, [r4, #16]
 8010e24:	462a      	mov	r2, r5
 8010e26:	4639      	mov	r1, r7
 8010e28:	4630      	mov	r0, r6
 8010e2a:	47c0      	blx	r8
 8010e2c:	3001      	adds	r0, #1
 8010e2e:	d0a2      	beq.n	8010d76 <_printf_i+0x13a>
 8010e30:	6823      	ldr	r3, [r4, #0]
 8010e32:	079b      	lsls	r3, r3, #30
 8010e34:	d507      	bpl.n	8010e46 <_printf_i+0x20a>
 8010e36:	2500      	movs	r5, #0
 8010e38:	f104 0919 	add.w	r9, r4, #25
 8010e3c:	68e3      	ldr	r3, [r4, #12]
 8010e3e:	9a03      	ldr	r2, [sp, #12]
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	429d      	cmp	r5, r3
 8010e44:	db05      	blt.n	8010e52 <_printf_i+0x216>
 8010e46:	68e0      	ldr	r0, [r4, #12]
 8010e48:	9b03      	ldr	r3, [sp, #12]
 8010e4a:	4298      	cmp	r0, r3
 8010e4c:	bfb8      	it	lt
 8010e4e:	4618      	movlt	r0, r3
 8010e50:	e793      	b.n	8010d7a <_printf_i+0x13e>
 8010e52:	2301      	movs	r3, #1
 8010e54:	464a      	mov	r2, r9
 8010e56:	4639      	mov	r1, r7
 8010e58:	4630      	mov	r0, r6
 8010e5a:	47c0      	blx	r8
 8010e5c:	3001      	adds	r0, #1
 8010e5e:	d08a      	beq.n	8010d76 <_printf_i+0x13a>
 8010e60:	3501      	adds	r5, #1
 8010e62:	e7eb      	b.n	8010e3c <_printf_i+0x200>
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d1a7      	bne.n	8010db8 <_printf_i+0x17c>
 8010e68:	780b      	ldrb	r3, [r1, #0]
 8010e6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e72:	e765      	b.n	8010d40 <_printf_i+0x104>
 8010e74:	080161e9 	.word	0x080161e9
 8010e78:	080161d8 	.word	0x080161d8

08010e7c <iprintf>:
 8010e7c:	b40f      	push	{r0, r1, r2, r3}
 8010e7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ea8 <iprintf+0x2c>)
 8010e80:	b513      	push	{r0, r1, r4, lr}
 8010e82:	681c      	ldr	r4, [r3, #0]
 8010e84:	b124      	cbz	r4, 8010e90 <iprintf+0x14>
 8010e86:	69a3      	ldr	r3, [r4, #24]
 8010e88:	b913      	cbnz	r3, 8010e90 <iprintf+0x14>
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f001 f9b0 	bl	80121f0 <__sinit>
 8010e90:	ab05      	add	r3, sp, #20
 8010e92:	9a04      	ldr	r2, [sp, #16]
 8010e94:	68a1      	ldr	r1, [r4, #8]
 8010e96:	9301      	str	r3, [sp, #4]
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f001 ff31 	bl	8012d00 <_vfiprintf_r>
 8010e9e:	b002      	add	sp, #8
 8010ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ea4:	b004      	add	sp, #16
 8010ea6:	4770      	bx	lr
 8010ea8:	200002e8 	.word	0x200002e8

08010eac <_puts_r>:
 8010eac:	b570      	push	{r4, r5, r6, lr}
 8010eae:	460e      	mov	r6, r1
 8010eb0:	4605      	mov	r5, r0
 8010eb2:	b118      	cbz	r0, 8010ebc <_puts_r+0x10>
 8010eb4:	6983      	ldr	r3, [r0, #24]
 8010eb6:	b90b      	cbnz	r3, 8010ebc <_puts_r+0x10>
 8010eb8:	f001 f99a 	bl	80121f0 <__sinit>
 8010ebc:	69ab      	ldr	r3, [r5, #24]
 8010ebe:	68ac      	ldr	r4, [r5, #8]
 8010ec0:	b913      	cbnz	r3, 8010ec8 <_puts_r+0x1c>
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f001 f994 	bl	80121f0 <__sinit>
 8010ec8:	4b23      	ldr	r3, [pc, #140]	; (8010f58 <_puts_r+0xac>)
 8010eca:	429c      	cmp	r4, r3
 8010ecc:	d117      	bne.n	8010efe <_puts_r+0x52>
 8010ece:	686c      	ldr	r4, [r5, #4]
 8010ed0:	89a3      	ldrh	r3, [r4, #12]
 8010ed2:	071b      	lsls	r3, r3, #28
 8010ed4:	d51d      	bpl.n	8010f12 <_puts_r+0x66>
 8010ed6:	6923      	ldr	r3, [r4, #16]
 8010ed8:	b1db      	cbz	r3, 8010f12 <_puts_r+0x66>
 8010eda:	3e01      	subs	r6, #1
 8010edc:	68a3      	ldr	r3, [r4, #8]
 8010ede:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	60a3      	str	r3, [r4, #8]
 8010ee6:	b9e9      	cbnz	r1, 8010f24 <_puts_r+0x78>
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	da2e      	bge.n	8010f4a <_puts_r+0x9e>
 8010eec:	4622      	mov	r2, r4
 8010eee:	210a      	movs	r1, #10
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f000 f963 	bl	80111bc <__swbuf_r>
 8010ef6:	3001      	adds	r0, #1
 8010ef8:	d011      	beq.n	8010f1e <_puts_r+0x72>
 8010efa:	200a      	movs	r0, #10
 8010efc:	bd70      	pop	{r4, r5, r6, pc}
 8010efe:	4b17      	ldr	r3, [pc, #92]	; (8010f5c <_puts_r+0xb0>)
 8010f00:	429c      	cmp	r4, r3
 8010f02:	d101      	bne.n	8010f08 <_puts_r+0x5c>
 8010f04:	68ac      	ldr	r4, [r5, #8]
 8010f06:	e7e3      	b.n	8010ed0 <_puts_r+0x24>
 8010f08:	4b15      	ldr	r3, [pc, #84]	; (8010f60 <_puts_r+0xb4>)
 8010f0a:	429c      	cmp	r4, r3
 8010f0c:	bf08      	it	eq
 8010f0e:	68ec      	ldreq	r4, [r5, #12]
 8010f10:	e7de      	b.n	8010ed0 <_puts_r+0x24>
 8010f12:	4621      	mov	r1, r4
 8010f14:	4628      	mov	r0, r5
 8010f16:	f000 f9b1 	bl	801127c <__swsetup_r>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d0dd      	beq.n	8010eda <_puts_r+0x2e>
 8010f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f22:	bd70      	pop	{r4, r5, r6, pc}
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	da04      	bge.n	8010f32 <_puts_r+0x86>
 8010f28:	69a2      	ldr	r2, [r4, #24]
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	db06      	blt.n	8010f3c <_puts_r+0x90>
 8010f2e:	290a      	cmp	r1, #10
 8010f30:	d004      	beq.n	8010f3c <_puts_r+0x90>
 8010f32:	6823      	ldr	r3, [r4, #0]
 8010f34:	1c5a      	adds	r2, r3, #1
 8010f36:	6022      	str	r2, [r4, #0]
 8010f38:	7019      	strb	r1, [r3, #0]
 8010f3a:	e7cf      	b.n	8010edc <_puts_r+0x30>
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	4628      	mov	r0, r5
 8010f40:	f000 f93c 	bl	80111bc <__swbuf_r>
 8010f44:	3001      	adds	r0, #1
 8010f46:	d1c9      	bne.n	8010edc <_puts_r+0x30>
 8010f48:	e7e9      	b.n	8010f1e <_puts_r+0x72>
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	200a      	movs	r0, #10
 8010f4e:	1c5a      	adds	r2, r3, #1
 8010f50:	6022      	str	r2, [r4, #0]
 8010f52:	7018      	strb	r0, [r3, #0]
 8010f54:	bd70      	pop	{r4, r5, r6, pc}
 8010f56:	bf00      	nop
 8010f58:	08016328 	.word	0x08016328
 8010f5c:	08016348 	.word	0x08016348
 8010f60:	08016308 	.word	0x08016308

08010f64 <puts>:
 8010f64:	4b02      	ldr	r3, [pc, #8]	; (8010f70 <puts+0xc>)
 8010f66:	4601      	mov	r1, r0
 8010f68:	6818      	ldr	r0, [r3, #0]
 8010f6a:	f7ff bf9f 	b.w	8010eac <_puts_r>
 8010f6e:	bf00      	nop
 8010f70:	200002e8 	.word	0x200002e8

08010f74 <realloc>:
 8010f74:	4b02      	ldr	r3, [pc, #8]	; (8010f80 <realloc+0xc>)
 8010f76:	460a      	mov	r2, r1
 8010f78:	4601      	mov	r1, r0
 8010f7a:	6818      	ldr	r0, [r3, #0]
 8010f7c:	f001 bd20 	b.w	80129c0 <_realloc_r>
 8010f80:	200002e8 	.word	0x200002e8

08010f84 <_sbrk_r>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	4c06      	ldr	r4, [pc, #24]	; (8010fa0 <_sbrk_r+0x1c>)
 8010f88:	2300      	movs	r3, #0
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	4608      	mov	r0, r1
 8010f8e:	6023      	str	r3, [r4, #0]
 8010f90:	f002 f8bc 	bl	801310c <_sbrk>
 8010f94:	1c43      	adds	r3, r0, #1
 8010f96:	d102      	bne.n	8010f9e <_sbrk_r+0x1a>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	b103      	cbz	r3, 8010f9e <_sbrk_r+0x1a>
 8010f9c:	602b      	str	r3, [r5, #0]
 8010f9e:	bd38      	pop	{r3, r4, r5, pc}
 8010fa0:	20002e14 	.word	0x20002e14

08010fa4 <sniprintf>:
 8010fa4:	b40c      	push	{r2, r3}
 8010fa6:	b530      	push	{r4, r5, lr}
 8010fa8:	4b17      	ldr	r3, [pc, #92]	; (8011008 <sniprintf+0x64>)
 8010faa:	1e0c      	subs	r4, r1, #0
 8010fac:	b09d      	sub	sp, #116	; 0x74
 8010fae:	681d      	ldr	r5, [r3, #0]
 8010fb0:	da08      	bge.n	8010fc4 <sniprintf+0x20>
 8010fb2:	238b      	movs	r3, #139	; 0x8b
 8010fb4:	602b      	str	r3, [r5, #0]
 8010fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8010fba:	b01d      	add	sp, #116	; 0x74
 8010fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fc0:	b002      	add	sp, #8
 8010fc2:	4770      	bx	lr
 8010fc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010fc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010fcc:	bf14      	ite	ne
 8010fce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010fd2:	4623      	moveq	r3, r4
 8010fd4:	9304      	str	r3, [sp, #16]
 8010fd6:	9307      	str	r3, [sp, #28]
 8010fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fdc:	9002      	str	r0, [sp, #8]
 8010fde:	9006      	str	r0, [sp, #24]
 8010fe0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010fe4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010fe6:	ab21      	add	r3, sp, #132	; 0x84
 8010fe8:	a902      	add	r1, sp, #8
 8010fea:	4628      	mov	r0, r5
 8010fec:	9301      	str	r3, [sp, #4]
 8010fee:	f001 fd69 	bl	8012ac4 <_svfiprintf_r>
 8010ff2:	1c43      	adds	r3, r0, #1
 8010ff4:	bfbc      	itt	lt
 8010ff6:	238b      	movlt	r3, #139	; 0x8b
 8010ff8:	602b      	strlt	r3, [r5, #0]
 8010ffa:	2c00      	cmp	r4, #0
 8010ffc:	d0dd      	beq.n	8010fba <sniprintf+0x16>
 8010ffe:	9b02      	ldr	r3, [sp, #8]
 8011000:	2200      	movs	r2, #0
 8011002:	701a      	strb	r2, [r3, #0]
 8011004:	e7d9      	b.n	8010fba <sniprintf+0x16>
 8011006:	bf00      	nop
 8011008:	200002e8 	.word	0x200002e8

0801100c <siprintf>:
 801100c:	b40e      	push	{r1, r2, r3}
 801100e:	b500      	push	{lr}
 8011010:	b09c      	sub	sp, #112	; 0x70
 8011012:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011016:	ab1d      	add	r3, sp, #116	; 0x74
 8011018:	f8ad 1014 	strh.w	r1, [sp, #20]
 801101c:	9002      	str	r0, [sp, #8]
 801101e:	9006      	str	r0, [sp, #24]
 8011020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011024:	480a      	ldr	r0, [pc, #40]	; (8011050 <siprintf+0x44>)
 8011026:	9104      	str	r1, [sp, #16]
 8011028:	9107      	str	r1, [sp, #28]
 801102a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801102e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011032:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011036:	6800      	ldr	r0, [r0, #0]
 8011038:	9301      	str	r3, [sp, #4]
 801103a:	a902      	add	r1, sp, #8
 801103c:	f001 fd42 	bl	8012ac4 <_svfiprintf_r>
 8011040:	9b02      	ldr	r3, [sp, #8]
 8011042:	2200      	movs	r2, #0
 8011044:	701a      	strb	r2, [r3, #0]
 8011046:	b01c      	add	sp, #112	; 0x70
 8011048:	f85d eb04 	ldr.w	lr, [sp], #4
 801104c:	b003      	add	sp, #12
 801104e:	4770      	bx	lr
 8011050:	200002e8 	.word	0x200002e8

08011054 <strcpy>:
 8011054:	4603      	mov	r3, r0
 8011056:	f811 2b01 	ldrb.w	r2, [r1], #1
 801105a:	f803 2b01 	strb.w	r2, [r3], #1
 801105e:	2a00      	cmp	r2, #0
 8011060:	d1f9      	bne.n	8011056 <strcpy+0x2>
 8011062:	4770      	bx	lr

08011064 <strncpy>:
 8011064:	b570      	push	{r4, r5, r6, lr}
 8011066:	4604      	mov	r4, r0
 8011068:	b902      	cbnz	r2, 801106c <strncpy+0x8>
 801106a:	bd70      	pop	{r4, r5, r6, pc}
 801106c:	4623      	mov	r3, r4
 801106e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8011072:	f803 5b01 	strb.w	r5, [r3], #1
 8011076:	1e56      	subs	r6, r2, #1
 8011078:	b91d      	cbnz	r5, 8011082 <strncpy+0x1e>
 801107a:	4414      	add	r4, r2
 801107c:	42a3      	cmp	r3, r4
 801107e:	d103      	bne.n	8011088 <strncpy+0x24>
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	461c      	mov	r4, r3
 8011084:	4632      	mov	r2, r6
 8011086:	e7ef      	b.n	8011068 <strncpy+0x4>
 8011088:	f803 5b01 	strb.w	r5, [r3], #1
 801108c:	e7f6      	b.n	801107c <strncpy+0x18>

0801108e <_strtol_l.isra.0>:
 801108e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011092:	4680      	mov	r8, r0
 8011094:	4689      	mov	r9, r1
 8011096:	4692      	mov	sl, r2
 8011098:	461f      	mov	r7, r3
 801109a:	468b      	mov	fp, r1
 801109c:	465d      	mov	r5, fp
 801109e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80110a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80110a4:	f7ff f996 	bl	80103d4 <__locale_ctype_ptr_l>
 80110a8:	4420      	add	r0, r4
 80110aa:	7846      	ldrb	r6, [r0, #1]
 80110ac:	f016 0608 	ands.w	r6, r6, #8
 80110b0:	d10b      	bne.n	80110ca <_strtol_l.isra.0+0x3c>
 80110b2:	2c2d      	cmp	r4, #45	; 0x2d
 80110b4:	d10b      	bne.n	80110ce <_strtol_l.isra.0+0x40>
 80110b6:	782c      	ldrb	r4, [r5, #0]
 80110b8:	2601      	movs	r6, #1
 80110ba:	f10b 0502 	add.w	r5, fp, #2
 80110be:	b167      	cbz	r7, 80110da <_strtol_l.isra.0+0x4c>
 80110c0:	2f10      	cmp	r7, #16
 80110c2:	d114      	bne.n	80110ee <_strtol_l.isra.0+0x60>
 80110c4:	2c30      	cmp	r4, #48	; 0x30
 80110c6:	d00a      	beq.n	80110de <_strtol_l.isra.0+0x50>
 80110c8:	e011      	b.n	80110ee <_strtol_l.isra.0+0x60>
 80110ca:	46ab      	mov	fp, r5
 80110cc:	e7e6      	b.n	801109c <_strtol_l.isra.0+0xe>
 80110ce:	2c2b      	cmp	r4, #43	; 0x2b
 80110d0:	bf04      	itt	eq
 80110d2:	782c      	ldrbeq	r4, [r5, #0]
 80110d4:	f10b 0502 	addeq.w	r5, fp, #2
 80110d8:	e7f1      	b.n	80110be <_strtol_l.isra.0+0x30>
 80110da:	2c30      	cmp	r4, #48	; 0x30
 80110dc:	d127      	bne.n	801112e <_strtol_l.isra.0+0xa0>
 80110de:	782b      	ldrb	r3, [r5, #0]
 80110e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80110e4:	2b58      	cmp	r3, #88	; 0x58
 80110e6:	d14b      	bne.n	8011180 <_strtol_l.isra.0+0xf2>
 80110e8:	786c      	ldrb	r4, [r5, #1]
 80110ea:	2710      	movs	r7, #16
 80110ec:	3502      	adds	r5, #2
 80110ee:	2e00      	cmp	r6, #0
 80110f0:	bf0c      	ite	eq
 80110f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80110f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80110fa:	2200      	movs	r2, #0
 80110fc:	fbb1 fef7 	udiv	lr, r1, r7
 8011100:	4610      	mov	r0, r2
 8011102:	fb07 1c1e 	mls	ip, r7, lr, r1
 8011106:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801110a:	2b09      	cmp	r3, #9
 801110c:	d811      	bhi.n	8011132 <_strtol_l.isra.0+0xa4>
 801110e:	461c      	mov	r4, r3
 8011110:	42a7      	cmp	r7, r4
 8011112:	dd1d      	ble.n	8011150 <_strtol_l.isra.0+0xc2>
 8011114:	1c53      	adds	r3, r2, #1
 8011116:	d007      	beq.n	8011128 <_strtol_l.isra.0+0x9a>
 8011118:	4586      	cmp	lr, r0
 801111a:	d316      	bcc.n	801114a <_strtol_l.isra.0+0xbc>
 801111c:	d101      	bne.n	8011122 <_strtol_l.isra.0+0x94>
 801111e:	45a4      	cmp	ip, r4
 8011120:	db13      	blt.n	801114a <_strtol_l.isra.0+0xbc>
 8011122:	fb00 4007 	mla	r0, r0, r7, r4
 8011126:	2201      	movs	r2, #1
 8011128:	f815 4b01 	ldrb.w	r4, [r5], #1
 801112c:	e7eb      	b.n	8011106 <_strtol_l.isra.0+0x78>
 801112e:	270a      	movs	r7, #10
 8011130:	e7dd      	b.n	80110ee <_strtol_l.isra.0+0x60>
 8011132:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011136:	2b19      	cmp	r3, #25
 8011138:	d801      	bhi.n	801113e <_strtol_l.isra.0+0xb0>
 801113a:	3c37      	subs	r4, #55	; 0x37
 801113c:	e7e8      	b.n	8011110 <_strtol_l.isra.0+0x82>
 801113e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011142:	2b19      	cmp	r3, #25
 8011144:	d804      	bhi.n	8011150 <_strtol_l.isra.0+0xc2>
 8011146:	3c57      	subs	r4, #87	; 0x57
 8011148:	e7e2      	b.n	8011110 <_strtol_l.isra.0+0x82>
 801114a:	f04f 32ff 	mov.w	r2, #4294967295
 801114e:	e7eb      	b.n	8011128 <_strtol_l.isra.0+0x9a>
 8011150:	1c53      	adds	r3, r2, #1
 8011152:	d108      	bne.n	8011166 <_strtol_l.isra.0+0xd8>
 8011154:	2322      	movs	r3, #34	; 0x22
 8011156:	f8c8 3000 	str.w	r3, [r8]
 801115a:	4608      	mov	r0, r1
 801115c:	f1ba 0f00 	cmp.w	sl, #0
 8011160:	d107      	bne.n	8011172 <_strtol_l.isra.0+0xe4>
 8011162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011166:	b106      	cbz	r6, 801116a <_strtol_l.isra.0+0xdc>
 8011168:	4240      	negs	r0, r0
 801116a:	f1ba 0f00 	cmp.w	sl, #0
 801116e:	d00c      	beq.n	801118a <_strtol_l.isra.0+0xfc>
 8011170:	b122      	cbz	r2, 801117c <_strtol_l.isra.0+0xee>
 8011172:	3d01      	subs	r5, #1
 8011174:	f8ca 5000 	str.w	r5, [sl]
 8011178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117c:	464d      	mov	r5, r9
 801117e:	e7f9      	b.n	8011174 <_strtol_l.isra.0+0xe6>
 8011180:	2430      	movs	r4, #48	; 0x30
 8011182:	2f00      	cmp	r7, #0
 8011184:	d1b3      	bne.n	80110ee <_strtol_l.isra.0+0x60>
 8011186:	2708      	movs	r7, #8
 8011188:	e7b1      	b.n	80110ee <_strtol_l.isra.0+0x60>
 801118a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08011190 <strtol>:
 8011190:	4b08      	ldr	r3, [pc, #32]	; (80111b4 <strtol+0x24>)
 8011192:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011194:	681c      	ldr	r4, [r3, #0]
 8011196:	4d08      	ldr	r5, [pc, #32]	; (80111b8 <strtol+0x28>)
 8011198:	6a23      	ldr	r3, [r4, #32]
 801119a:	2b00      	cmp	r3, #0
 801119c:	bf08      	it	eq
 801119e:	462b      	moveq	r3, r5
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	4613      	mov	r3, r2
 80111a4:	460a      	mov	r2, r1
 80111a6:	4601      	mov	r1, r0
 80111a8:	4620      	mov	r0, r4
 80111aa:	f7ff ff70 	bl	801108e <_strtol_l.isra.0>
 80111ae:	b003      	add	sp, #12
 80111b0:	bd30      	pop	{r4, r5, pc}
 80111b2:	bf00      	nop
 80111b4:	200002e8 	.word	0x200002e8
 80111b8:	2000017c 	.word	0x2000017c

080111bc <__swbuf_r>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	460e      	mov	r6, r1
 80111c0:	4614      	mov	r4, r2
 80111c2:	4605      	mov	r5, r0
 80111c4:	b118      	cbz	r0, 80111ce <__swbuf_r+0x12>
 80111c6:	6983      	ldr	r3, [r0, #24]
 80111c8:	b90b      	cbnz	r3, 80111ce <__swbuf_r+0x12>
 80111ca:	f001 f811 	bl	80121f0 <__sinit>
 80111ce:	4b21      	ldr	r3, [pc, #132]	; (8011254 <__swbuf_r+0x98>)
 80111d0:	429c      	cmp	r4, r3
 80111d2:	d12a      	bne.n	801122a <__swbuf_r+0x6e>
 80111d4:	686c      	ldr	r4, [r5, #4]
 80111d6:	69a3      	ldr	r3, [r4, #24]
 80111d8:	60a3      	str	r3, [r4, #8]
 80111da:	89a3      	ldrh	r3, [r4, #12]
 80111dc:	071a      	lsls	r2, r3, #28
 80111de:	d52e      	bpl.n	801123e <__swbuf_r+0x82>
 80111e0:	6923      	ldr	r3, [r4, #16]
 80111e2:	b363      	cbz	r3, 801123e <__swbuf_r+0x82>
 80111e4:	6923      	ldr	r3, [r4, #16]
 80111e6:	6820      	ldr	r0, [r4, #0]
 80111e8:	1ac0      	subs	r0, r0, r3
 80111ea:	6963      	ldr	r3, [r4, #20]
 80111ec:	b2f6      	uxtb	r6, r6
 80111ee:	4298      	cmp	r0, r3
 80111f0:	4637      	mov	r7, r6
 80111f2:	db04      	blt.n	80111fe <__swbuf_r+0x42>
 80111f4:	4621      	mov	r1, r4
 80111f6:	4628      	mov	r0, r5
 80111f8:	f000 ff90 	bl	801211c <_fflush_r>
 80111fc:	bb28      	cbnz	r0, 801124a <__swbuf_r+0x8e>
 80111fe:	68a3      	ldr	r3, [r4, #8]
 8011200:	3b01      	subs	r3, #1
 8011202:	60a3      	str	r3, [r4, #8]
 8011204:	6823      	ldr	r3, [r4, #0]
 8011206:	1c5a      	adds	r2, r3, #1
 8011208:	6022      	str	r2, [r4, #0]
 801120a:	701e      	strb	r6, [r3, #0]
 801120c:	6963      	ldr	r3, [r4, #20]
 801120e:	3001      	adds	r0, #1
 8011210:	4298      	cmp	r0, r3
 8011212:	d004      	beq.n	801121e <__swbuf_r+0x62>
 8011214:	89a3      	ldrh	r3, [r4, #12]
 8011216:	07db      	lsls	r3, r3, #31
 8011218:	d519      	bpl.n	801124e <__swbuf_r+0x92>
 801121a:	2e0a      	cmp	r6, #10
 801121c:	d117      	bne.n	801124e <__swbuf_r+0x92>
 801121e:	4621      	mov	r1, r4
 8011220:	4628      	mov	r0, r5
 8011222:	f000 ff7b 	bl	801211c <_fflush_r>
 8011226:	b190      	cbz	r0, 801124e <__swbuf_r+0x92>
 8011228:	e00f      	b.n	801124a <__swbuf_r+0x8e>
 801122a:	4b0b      	ldr	r3, [pc, #44]	; (8011258 <__swbuf_r+0x9c>)
 801122c:	429c      	cmp	r4, r3
 801122e:	d101      	bne.n	8011234 <__swbuf_r+0x78>
 8011230:	68ac      	ldr	r4, [r5, #8]
 8011232:	e7d0      	b.n	80111d6 <__swbuf_r+0x1a>
 8011234:	4b09      	ldr	r3, [pc, #36]	; (801125c <__swbuf_r+0xa0>)
 8011236:	429c      	cmp	r4, r3
 8011238:	bf08      	it	eq
 801123a:	68ec      	ldreq	r4, [r5, #12]
 801123c:	e7cb      	b.n	80111d6 <__swbuf_r+0x1a>
 801123e:	4621      	mov	r1, r4
 8011240:	4628      	mov	r0, r5
 8011242:	f000 f81b 	bl	801127c <__swsetup_r>
 8011246:	2800      	cmp	r0, #0
 8011248:	d0cc      	beq.n	80111e4 <__swbuf_r+0x28>
 801124a:	f04f 37ff 	mov.w	r7, #4294967295
 801124e:	4638      	mov	r0, r7
 8011250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011252:	bf00      	nop
 8011254:	08016328 	.word	0x08016328
 8011258:	08016348 	.word	0x08016348
 801125c:	08016308 	.word	0x08016308

08011260 <__ascii_wctomb>:
 8011260:	b149      	cbz	r1, 8011276 <__ascii_wctomb+0x16>
 8011262:	2aff      	cmp	r2, #255	; 0xff
 8011264:	bf85      	ittet	hi
 8011266:	238a      	movhi	r3, #138	; 0x8a
 8011268:	6003      	strhi	r3, [r0, #0]
 801126a:	700a      	strbls	r2, [r1, #0]
 801126c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011270:	bf98      	it	ls
 8011272:	2001      	movls	r0, #1
 8011274:	4770      	bx	lr
 8011276:	4608      	mov	r0, r1
 8011278:	4770      	bx	lr
	...

0801127c <__swsetup_r>:
 801127c:	4b32      	ldr	r3, [pc, #200]	; (8011348 <__swsetup_r+0xcc>)
 801127e:	b570      	push	{r4, r5, r6, lr}
 8011280:	681d      	ldr	r5, [r3, #0]
 8011282:	4606      	mov	r6, r0
 8011284:	460c      	mov	r4, r1
 8011286:	b125      	cbz	r5, 8011292 <__swsetup_r+0x16>
 8011288:	69ab      	ldr	r3, [r5, #24]
 801128a:	b913      	cbnz	r3, 8011292 <__swsetup_r+0x16>
 801128c:	4628      	mov	r0, r5
 801128e:	f000 ffaf 	bl	80121f0 <__sinit>
 8011292:	4b2e      	ldr	r3, [pc, #184]	; (801134c <__swsetup_r+0xd0>)
 8011294:	429c      	cmp	r4, r3
 8011296:	d10f      	bne.n	80112b8 <__swsetup_r+0x3c>
 8011298:	686c      	ldr	r4, [r5, #4]
 801129a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801129e:	b29a      	uxth	r2, r3
 80112a0:	0715      	lsls	r5, r2, #28
 80112a2:	d42c      	bmi.n	80112fe <__swsetup_r+0x82>
 80112a4:	06d0      	lsls	r0, r2, #27
 80112a6:	d411      	bmi.n	80112cc <__swsetup_r+0x50>
 80112a8:	2209      	movs	r2, #9
 80112aa:	6032      	str	r2, [r6, #0]
 80112ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112b0:	81a3      	strh	r3, [r4, #12]
 80112b2:	f04f 30ff 	mov.w	r0, #4294967295
 80112b6:	bd70      	pop	{r4, r5, r6, pc}
 80112b8:	4b25      	ldr	r3, [pc, #148]	; (8011350 <__swsetup_r+0xd4>)
 80112ba:	429c      	cmp	r4, r3
 80112bc:	d101      	bne.n	80112c2 <__swsetup_r+0x46>
 80112be:	68ac      	ldr	r4, [r5, #8]
 80112c0:	e7eb      	b.n	801129a <__swsetup_r+0x1e>
 80112c2:	4b24      	ldr	r3, [pc, #144]	; (8011354 <__swsetup_r+0xd8>)
 80112c4:	429c      	cmp	r4, r3
 80112c6:	bf08      	it	eq
 80112c8:	68ec      	ldreq	r4, [r5, #12]
 80112ca:	e7e6      	b.n	801129a <__swsetup_r+0x1e>
 80112cc:	0751      	lsls	r1, r2, #29
 80112ce:	d512      	bpl.n	80112f6 <__swsetup_r+0x7a>
 80112d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112d2:	b141      	cbz	r1, 80112e6 <__swsetup_r+0x6a>
 80112d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112d8:	4299      	cmp	r1, r3
 80112da:	d002      	beq.n	80112e2 <__swsetup_r+0x66>
 80112dc:	4630      	mov	r0, r6
 80112de:	f7ff f8b5 	bl	801044c <_free_r>
 80112e2:	2300      	movs	r3, #0
 80112e4:	6363      	str	r3, [r4, #52]	; 0x34
 80112e6:	89a3      	ldrh	r3, [r4, #12]
 80112e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112ec:	81a3      	strh	r3, [r4, #12]
 80112ee:	2300      	movs	r3, #0
 80112f0:	6063      	str	r3, [r4, #4]
 80112f2:	6923      	ldr	r3, [r4, #16]
 80112f4:	6023      	str	r3, [r4, #0]
 80112f6:	89a3      	ldrh	r3, [r4, #12]
 80112f8:	f043 0308 	orr.w	r3, r3, #8
 80112fc:	81a3      	strh	r3, [r4, #12]
 80112fe:	6923      	ldr	r3, [r4, #16]
 8011300:	b94b      	cbnz	r3, 8011316 <__swsetup_r+0x9a>
 8011302:	89a3      	ldrh	r3, [r4, #12]
 8011304:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801130c:	d003      	beq.n	8011316 <__swsetup_r+0x9a>
 801130e:	4621      	mov	r1, r4
 8011310:	4630      	mov	r0, r6
 8011312:	f001 f829 	bl	8012368 <__smakebuf_r>
 8011316:	89a2      	ldrh	r2, [r4, #12]
 8011318:	f012 0301 	ands.w	r3, r2, #1
 801131c:	d00c      	beq.n	8011338 <__swsetup_r+0xbc>
 801131e:	2300      	movs	r3, #0
 8011320:	60a3      	str	r3, [r4, #8]
 8011322:	6963      	ldr	r3, [r4, #20]
 8011324:	425b      	negs	r3, r3
 8011326:	61a3      	str	r3, [r4, #24]
 8011328:	6923      	ldr	r3, [r4, #16]
 801132a:	b953      	cbnz	r3, 8011342 <__swsetup_r+0xc6>
 801132c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011330:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011334:	d1ba      	bne.n	80112ac <__swsetup_r+0x30>
 8011336:	bd70      	pop	{r4, r5, r6, pc}
 8011338:	0792      	lsls	r2, r2, #30
 801133a:	bf58      	it	pl
 801133c:	6963      	ldrpl	r3, [r4, #20]
 801133e:	60a3      	str	r3, [r4, #8]
 8011340:	e7f2      	b.n	8011328 <__swsetup_r+0xac>
 8011342:	2000      	movs	r0, #0
 8011344:	e7f7      	b.n	8011336 <__swsetup_r+0xba>
 8011346:	bf00      	nop
 8011348:	200002e8 	.word	0x200002e8
 801134c:	08016328 	.word	0x08016328
 8011350:	08016348 	.word	0x08016348
 8011354:	08016308 	.word	0x08016308

08011358 <quorem>:
 8011358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135c:	6903      	ldr	r3, [r0, #16]
 801135e:	690c      	ldr	r4, [r1, #16]
 8011360:	429c      	cmp	r4, r3
 8011362:	4680      	mov	r8, r0
 8011364:	f300 8082 	bgt.w	801146c <quorem+0x114>
 8011368:	3c01      	subs	r4, #1
 801136a:	f101 0714 	add.w	r7, r1, #20
 801136e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8011372:	f100 0614 	add.w	r6, r0, #20
 8011376:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801137a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801137e:	eb06 030e 	add.w	r3, r6, lr
 8011382:	3501      	adds	r5, #1
 8011384:	eb07 090e 	add.w	r9, r7, lr
 8011388:	9301      	str	r3, [sp, #4]
 801138a:	fbb0 f5f5 	udiv	r5, r0, r5
 801138e:	b395      	cbz	r5, 80113f6 <quorem+0x9e>
 8011390:	f04f 0a00 	mov.w	sl, #0
 8011394:	4638      	mov	r0, r7
 8011396:	46b4      	mov	ip, r6
 8011398:	46d3      	mov	fp, sl
 801139a:	f850 2b04 	ldr.w	r2, [r0], #4
 801139e:	b293      	uxth	r3, r2
 80113a0:	fb05 a303 	mla	r3, r5, r3, sl
 80113a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	ebab 0303 	sub.w	r3, fp, r3
 80113ae:	0c12      	lsrs	r2, r2, #16
 80113b0:	f8bc b000 	ldrh.w	fp, [ip]
 80113b4:	fb05 a202 	mla	r2, r5, r2, sl
 80113b8:	fa13 f38b 	uxtah	r3, r3, fp
 80113bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80113c0:	fa1f fb82 	uxth.w	fp, r2
 80113c4:	f8dc 2000 	ldr.w	r2, [ip]
 80113c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80113cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80113d6:	4581      	cmp	r9, r0
 80113d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80113dc:	f84c 3b04 	str.w	r3, [ip], #4
 80113e0:	d2db      	bcs.n	801139a <quorem+0x42>
 80113e2:	f856 300e 	ldr.w	r3, [r6, lr]
 80113e6:	b933      	cbnz	r3, 80113f6 <quorem+0x9e>
 80113e8:	9b01      	ldr	r3, [sp, #4]
 80113ea:	3b04      	subs	r3, #4
 80113ec:	429e      	cmp	r6, r3
 80113ee:	461a      	mov	r2, r3
 80113f0:	d330      	bcc.n	8011454 <quorem+0xfc>
 80113f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80113f6:	4640      	mov	r0, r8
 80113f8:	f001 fa0d 	bl	8012816 <__mcmp>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	db25      	blt.n	801144c <quorem+0xf4>
 8011400:	3501      	adds	r5, #1
 8011402:	4630      	mov	r0, r6
 8011404:	f04f 0e00 	mov.w	lr, #0
 8011408:	f857 2b04 	ldr.w	r2, [r7], #4
 801140c:	f8d0 c000 	ldr.w	ip, [r0]
 8011410:	b293      	uxth	r3, r2
 8011412:	ebae 0303 	sub.w	r3, lr, r3
 8011416:	0c12      	lsrs	r2, r2, #16
 8011418:	fa13 f38c 	uxtah	r3, r3, ip
 801141c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011420:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011424:	b29b      	uxth	r3, r3
 8011426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801142a:	45b9      	cmp	r9, r7
 801142c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011430:	f840 3b04 	str.w	r3, [r0], #4
 8011434:	d2e8      	bcs.n	8011408 <quorem+0xb0>
 8011436:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801143a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801143e:	b92a      	cbnz	r2, 801144c <quorem+0xf4>
 8011440:	3b04      	subs	r3, #4
 8011442:	429e      	cmp	r6, r3
 8011444:	461a      	mov	r2, r3
 8011446:	d30b      	bcc.n	8011460 <quorem+0x108>
 8011448:	f8c8 4010 	str.w	r4, [r8, #16]
 801144c:	4628      	mov	r0, r5
 801144e:	b003      	add	sp, #12
 8011450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011454:	6812      	ldr	r2, [r2, #0]
 8011456:	3b04      	subs	r3, #4
 8011458:	2a00      	cmp	r2, #0
 801145a:	d1ca      	bne.n	80113f2 <quorem+0x9a>
 801145c:	3c01      	subs	r4, #1
 801145e:	e7c5      	b.n	80113ec <quorem+0x94>
 8011460:	6812      	ldr	r2, [r2, #0]
 8011462:	3b04      	subs	r3, #4
 8011464:	2a00      	cmp	r2, #0
 8011466:	d1ef      	bne.n	8011448 <quorem+0xf0>
 8011468:	3c01      	subs	r4, #1
 801146a:	e7ea      	b.n	8011442 <quorem+0xea>
 801146c:	2000      	movs	r0, #0
 801146e:	e7ee      	b.n	801144e <quorem+0xf6>

08011470 <_dtoa_r>:
 8011470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	ec57 6b10 	vmov	r6, r7, d0
 8011478:	b097      	sub	sp, #92	; 0x5c
 801147a:	e9cd 6700 	strd	r6, r7, [sp]
 801147e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011480:	9107      	str	r1, [sp, #28]
 8011482:	4604      	mov	r4, r0
 8011484:	920a      	str	r2, [sp, #40]	; 0x28
 8011486:	930f      	str	r3, [sp, #60]	; 0x3c
 8011488:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801148a:	b93e      	cbnz	r6, 801149c <_dtoa_r+0x2c>
 801148c:	2010      	movs	r0, #16
 801148e:	f7fe ffb3 	bl	80103f8 <malloc>
 8011492:	6260      	str	r0, [r4, #36]	; 0x24
 8011494:	6046      	str	r6, [r0, #4]
 8011496:	6086      	str	r6, [r0, #8]
 8011498:	6006      	str	r6, [r0, #0]
 801149a:	60c6      	str	r6, [r0, #12]
 801149c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801149e:	6819      	ldr	r1, [r3, #0]
 80114a0:	b151      	cbz	r1, 80114b8 <_dtoa_r+0x48>
 80114a2:	685a      	ldr	r2, [r3, #4]
 80114a4:	604a      	str	r2, [r1, #4]
 80114a6:	2301      	movs	r3, #1
 80114a8:	4093      	lsls	r3, r2
 80114aa:	608b      	str	r3, [r1, #8]
 80114ac:	4620      	mov	r0, r4
 80114ae:	f000 ffdc 	bl	801246a <_Bfree>
 80114b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114b4:	2200      	movs	r2, #0
 80114b6:	601a      	str	r2, [r3, #0]
 80114b8:	9b01      	ldr	r3, [sp, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	bfbf      	itttt	lt
 80114be:	2301      	movlt	r3, #1
 80114c0:	602b      	strlt	r3, [r5, #0]
 80114c2:	9b01      	ldrlt	r3, [sp, #4]
 80114c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80114c8:	bfb2      	itee	lt
 80114ca:	9301      	strlt	r3, [sp, #4]
 80114cc:	2300      	movge	r3, #0
 80114ce:	602b      	strge	r3, [r5, #0]
 80114d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80114d4:	4ba8      	ldr	r3, [pc, #672]	; (8011778 <_dtoa_r+0x308>)
 80114d6:	ea33 0308 	bics.w	r3, r3, r8
 80114da:	d11b      	bne.n	8011514 <_dtoa_r+0xa4>
 80114dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114de:	f242 730f 	movw	r3, #9999	; 0x270f
 80114e2:	6013      	str	r3, [r2, #0]
 80114e4:	9b00      	ldr	r3, [sp, #0]
 80114e6:	b923      	cbnz	r3, 80114f2 <_dtoa_r+0x82>
 80114e8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80114ec:	2800      	cmp	r0, #0
 80114ee:	f000 8578 	beq.w	8011fe2 <_dtoa_r+0xb72>
 80114f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114f4:	b953      	cbnz	r3, 801150c <_dtoa_r+0x9c>
 80114f6:	4ba1      	ldr	r3, [pc, #644]	; (801177c <_dtoa_r+0x30c>)
 80114f8:	e021      	b.n	801153e <_dtoa_r+0xce>
 80114fa:	4ba1      	ldr	r3, [pc, #644]	; (8011780 <_dtoa_r+0x310>)
 80114fc:	9302      	str	r3, [sp, #8]
 80114fe:	3308      	adds	r3, #8
 8011500:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011502:	6013      	str	r3, [r2, #0]
 8011504:	9802      	ldr	r0, [sp, #8]
 8011506:	b017      	add	sp, #92	; 0x5c
 8011508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801150c:	4b9b      	ldr	r3, [pc, #620]	; (801177c <_dtoa_r+0x30c>)
 801150e:	9302      	str	r3, [sp, #8]
 8011510:	3303      	adds	r3, #3
 8011512:	e7f5      	b.n	8011500 <_dtoa_r+0x90>
 8011514:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011518:	2200      	movs	r2, #0
 801151a:	2300      	movs	r3, #0
 801151c:	4630      	mov	r0, r6
 801151e:	4639      	mov	r1, r7
 8011520:	f7ef fafe 	bl	8000b20 <__aeabi_dcmpeq>
 8011524:	4681      	mov	r9, r0
 8011526:	b160      	cbz	r0, 8011542 <_dtoa_r+0xd2>
 8011528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801152a:	2301      	movs	r3, #1
 801152c:	6013      	str	r3, [r2, #0]
 801152e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 8553 	beq.w	8011fdc <_dtoa_r+0xb6c>
 8011536:	4b93      	ldr	r3, [pc, #588]	; (8011784 <_dtoa_r+0x314>)
 8011538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801153a:	6013      	str	r3, [r2, #0]
 801153c:	3b01      	subs	r3, #1
 801153e:	9302      	str	r3, [sp, #8]
 8011540:	e7e0      	b.n	8011504 <_dtoa_r+0x94>
 8011542:	aa14      	add	r2, sp, #80	; 0x50
 8011544:	a915      	add	r1, sp, #84	; 0x54
 8011546:	ec47 6b10 	vmov	d0, r6, r7
 801154a:	4620      	mov	r0, r4
 801154c:	f001 f9db 	bl	8012906 <__d2b>
 8011550:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011554:	4682      	mov	sl, r0
 8011556:	2d00      	cmp	r5, #0
 8011558:	d07e      	beq.n	8011658 <_dtoa_r+0x1e8>
 801155a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801155e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011562:	4630      	mov	r0, r6
 8011564:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011568:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801156c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8011570:	2200      	movs	r2, #0
 8011572:	4b85      	ldr	r3, [pc, #532]	; (8011788 <_dtoa_r+0x318>)
 8011574:	f7ee feb8 	bl	80002e8 <__aeabi_dsub>
 8011578:	a379      	add	r3, pc, #484	; (adr r3, 8011760 <_dtoa_r+0x2f0>)
 801157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157e:	f7ef f867 	bl	8000650 <__aeabi_dmul>
 8011582:	a379      	add	r3, pc, #484	; (adr r3, 8011768 <_dtoa_r+0x2f8>)
 8011584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011588:	f7ee feb0 	bl	80002ec <__adddf3>
 801158c:	4606      	mov	r6, r0
 801158e:	4628      	mov	r0, r5
 8011590:	460f      	mov	r7, r1
 8011592:	f7ee fff7 	bl	8000584 <__aeabi_i2d>
 8011596:	a376      	add	r3, pc, #472	; (adr r3, 8011770 <_dtoa_r+0x300>)
 8011598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159c:	f7ef f858 	bl	8000650 <__aeabi_dmul>
 80115a0:	4602      	mov	r2, r0
 80115a2:	460b      	mov	r3, r1
 80115a4:	4630      	mov	r0, r6
 80115a6:	4639      	mov	r1, r7
 80115a8:	f7ee fea0 	bl	80002ec <__adddf3>
 80115ac:	4606      	mov	r6, r0
 80115ae:	460f      	mov	r7, r1
 80115b0:	f7ef fafe 	bl	8000bb0 <__aeabi_d2iz>
 80115b4:	2200      	movs	r2, #0
 80115b6:	4683      	mov	fp, r0
 80115b8:	2300      	movs	r3, #0
 80115ba:	4630      	mov	r0, r6
 80115bc:	4639      	mov	r1, r7
 80115be:	f7ef fab9 	bl	8000b34 <__aeabi_dcmplt>
 80115c2:	b158      	cbz	r0, 80115dc <_dtoa_r+0x16c>
 80115c4:	4658      	mov	r0, fp
 80115c6:	f7ee ffdd 	bl	8000584 <__aeabi_i2d>
 80115ca:	4602      	mov	r2, r0
 80115cc:	460b      	mov	r3, r1
 80115ce:	4630      	mov	r0, r6
 80115d0:	4639      	mov	r1, r7
 80115d2:	f7ef faa5 	bl	8000b20 <__aeabi_dcmpeq>
 80115d6:	b908      	cbnz	r0, 80115dc <_dtoa_r+0x16c>
 80115d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80115dc:	f1bb 0f16 	cmp.w	fp, #22
 80115e0:	d859      	bhi.n	8011696 <_dtoa_r+0x226>
 80115e2:	496a      	ldr	r1, [pc, #424]	; (801178c <_dtoa_r+0x31c>)
 80115e4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80115e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115f0:	f7ef fabe 	bl	8000b70 <__aeabi_dcmpgt>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d050      	beq.n	801169a <_dtoa_r+0x22a>
 80115f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80115fc:	2300      	movs	r3, #0
 80115fe:	930e      	str	r3, [sp, #56]	; 0x38
 8011600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011602:	1b5d      	subs	r5, r3, r5
 8011604:	1e6b      	subs	r3, r5, #1
 8011606:	9306      	str	r3, [sp, #24]
 8011608:	bf45      	ittet	mi
 801160a:	f1c5 0301 	rsbmi	r3, r5, #1
 801160e:	9305      	strmi	r3, [sp, #20]
 8011610:	2300      	movpl	r3, #0
 8011612:	2300      	movmi	r3, #0
 8011614:	bf4c      	ite	mi
 8011616:	9306      	strmi	r3, [sp, #24]
 8011618:	9305      	strpl	r3, [sp, #20]
 801161a:	f1bb 0f00 	cmp.w	fp, #0
 801161e:	db3e      	blt.n	801169e <_dtoa_r+0x22e>
 8011620:	9b06      	ldr	r3, [sp, #24]
 8011622:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011626:	445b      	add	r3, fp
 8011628:	9306      	str	r3, [sp, #24]
 801162a:	2300      	movs	r3, #0
 801162c:	9308      	str	r3, [sp, #32]
 801162e:	9b07      	ldr	r3, [sp, #28]
 8011630:	2b09      	cmp	r3, #9
 8011632:	f200 80af 	bhi.w	8011794 <_dtoa_r+0x324>
 8011636:	2b05      	cmp	r3, #5
 8011638:	bfc4      	itt	gt
 801163a:	3b04      	subgt	r3, #4
 801163c:	9307      	strgt	r3, [sp, #28]
 801163e:	9b07      	ldr	r3, [sp, #28]
 8011640:	f1a3 0302 	sub.w	r3, r3, #2
 8011644:	bfcc      	ite	gt
 8011646:	2600      	movgt	r6, #0
 8011648:	2601      	movle	r6, #1
 801164a:	2b03      	cmp	r3, #3
 801164c:	f200 80ae 	bhi.w	80117ac <_dtoa_r+0x33c>
 8011650:	e8df f003 	tbb	[pc, r3]
 8011654:	772f8482 	.word	0x772f8482
 8011658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801165a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801165c:	441d      	add	r5, r3
 801165e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011662:	2b20      	cmp	r3, #32
 8011664:	dd11      	ble.n	801168a <_dtoa_r+0x21a>
 8011666:	9a00      	ldr	r2, [sp, #0]
 8011668:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801166c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8011670:	fa22 f000 	lsr.w	r0, r2, r0
 8011674:	fa08 f303 	lsl.w	r3, r8, r3
 8011678:	4318      	orrs	r0, r3
 801167a:	f7ee ff73 	bl	8000564 <__aeabi_ui2d>
 801167e:	2301      	movs	r3, #1
 8011680:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011684:	3d01      	subs	r5, #1
 8011686:	9312      	str	r3, [sp, #72]	; 0x48
 8011688:	e772      	b.n	8011570 <_dtoa_r+0x100>
 801168a:	f1c3 0020 	rsb	r0, r3, #32
 801168e:	9b00      	ldr	r3, [sp, #0]
 8011690:	fa03 f000 	lsl.w	r0, r3, r0
 8011694:	e7f1      	b.n	801167a <_dtoa_r+0x20a>
 8011696:	2301      	movs	r3, #1
 8011698:	e7b1      	b.n	80115fe <_dtoa_r+0x18e>
 801169a:	900e      	str	r0, [sp, #56]	; 0x38
 801169c:	e7b0      	b.n	8011600 <_dtoa_r+0x190>
 801169e:	9b05      	ldr	r3, [sp, #20]
 80116a0:	eba3 030b 	sub.w	r3, r3, fp
 80116a4:	9305      	str	r3, [sp, #20]
 80116a6:	f1cb 0300 	rsb	r3, fp, #0
 80116aa:	9308      	str	r3, [sp, #32]
 80116ac:	2300      	movs	r3, #0
 80116ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80116b0:	e7bd      	b.n	801162e <_dtoa_r+0x1be>
 80116b2:	2301      	movs	r3, #1
 80116b4:	9309      	str	r3, [sp, #36]	; 0x24
 80116b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	dd7a      	ble.n	80117b2 <_dtoa_r+0x342>
 80116bc:	9304      	str	r3, [sp, #16]
 80116be:	9303      	str	r3, [sp, #12]
 80116c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80116c2:	2200      	movs	r2, #0
 80116c4:	606a      	str	r2, [r5, #4]
 80116c6:	2104      	movs	r1, #4
 80116c8:	f101 0214 	add.w	r2, r1, #20
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d975      	bls.n	80117bc <_dtoa_r+0x34c>
 80116d0:	6869      	ldr	r1, [r5, #4]
 80116d2:	4620      	mov	r0, r4
 80116d4:	f000 fe95 	bl	8012402 <_Balloc>
 80116d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116da:	6028      	str	r0, [r5, #0]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	9302      	str	r3, [sp, #8]
 80116e0:	9b03      	ldr	r3, [sp, #12]
 80116e2:	2b0e      	cmp	r3, #14
 80116e4:	f200 80e5 	bhi.w	80118b2 <_dtoa_r+0x442>
 80116e8:	2e00      	cmp	r6, #0
 80116ea:	f000 80e2 	beq.w	80118b2 <_dtoa_r+0x442>
 80116ee:	ed9d 7b00 	vldr	d7, [sp]
 80116f2:	f1bb 0f00 	cmp.w	fp, #0
 80116f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80116fa:	dd74      	ble.n	80117e6 <_dtoa_r+0x376>
 80116fc:	4a23      	ldr	r2, [pc, #140]	; (801178c <_dtoa_r+0x31c>)
 80116fe:	f00b 030f 	and.w	r3, fp, #15
 8011702:	ea4f 162b 	mov.w	r6, fp, asr #4
 8011706:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801170a:	06f0      	lsls	r0, r6, #27
 801170c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011710:	d559      	bpl.n	80117c6 <_dtoa_r+0x356>
 8011712:	4b1f      	ldr	r3, [pc, #124]	; (8011790 <_dtoa_r+0x320>)
 8011714:	ec51 0b17 	vmov	r0, r1, d7
 8011718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801171c:	f7ef f8c2 	bl	80008a4 <__aeabi_ddiv>
 8011720:	e9cd 0100 	strd	r0, r1, [sp]
 8011724:	f006 060f 	and.w	r6, r6, #15
 8011728:	2503      	movs	r5, #3
 801172a:	4f19      	ldr	r7, [pc, #100]	; (8011790 <_dtoa_r+0x320>)
 801172c:	2e00      	cmp	r6, #0
 801172e:	d14c      	bne.n	80117ca <_dtoa_r+0x35a>
 8011730:	4642      	mov	r2, r8
 8011732:	464b      	mov	r3, r9
 8011734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011738:	f7ef f8b4 	bl	80008a4 <__aeabi_ddiv>
 801173c:	e9cd 0100 	strd	r0, r1, [sp]
 8011740:	e06a      	b.n	8011818 <_dtoa_r+0x3a8>
 8011742:	2301      	movs	r3, #1
 8011744:	9309      	str	r3, [sp, #36]	; 0x24
 8011746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011748:	445b      	add	r3, fp
 801174a:	9304      	str	r3, [sp, #16]
 801174c:	3301      	adds	r3, #1
 801174e:	2b01      	cmp	r3, #1
 8011750:	9303      	str	r3, [sp, #12]
 8011752:	bfb8      	it	lt
 8011754:	2301      	movlt	r3, #1
 8011756:	e7b3      	b.n	80116c0 <_dtoa_r+0x250>
 8011758:	2300      	movs	r3, #0
 801175a:	e7ab      	b.n	80116b4 <_dtoa_r+0x244>
 801175c:	2300      	movs	r3, #0
 801175e:	e7f1      	b.n	8011744 <_dtoa_r+0x2d4>
 8011760:	636f4361 	.word	0x636f4361
 8011764:	3fd287a7 	.word	0x3fd287a7
 8011768:	8b60c8b3 	.word	0x8b60c8b3
 801176c:	3fc68a28 	.word	0x3fc68a28
 8011770:	509f79fb 	.word	0x509f79fb
 8011774:	3fd34413 	.word	0x3fd34413
 8011778:	7ff00000 	.word	0x7ff00000
 801177c:	08016304 	.word	0x08016304
 8011780:	080162fb 	.word	0x080162fb
 8011784:	080161d7 	.word	0x080161d7
 8011788:	3ff80000 	.word	0x3ff80000
 801178c:	08016398 	.word	0x08016398
 8011790:	08016370 	.word	0x08016370
 8011794:	2601      	movs	r6, #1
 8011796:	2300      	movs	r3, #0
 8011798:	9307      	str	r3, [sp, #28]
 801179a:	9609      	str	r6, [sp, #36]	; 0x24
 801179c:	f04f 33ff 	mov.w	r3, #4294967295
 80117a0:	9304      	str	r3, [sp, #16]
 80117a2:	9303      	str	r3, [sp, #12]
 80117a4:	2200      	movs	r2, #0
 80117a6:	2312      	movs	r3, #18
 80117a8:	920a      	str	r2, [sp, #40]	; 0x28
 80117aa:	e789      	b.n	80116c0 <_dtoa_r+0x250>
 80117ac:	2301      	movs	r3, #1
 80117ae:	9309      	str	r3, [sp, #36]	; 0x24
 80117b0:	e7f4      	b.n	801179c <_dtoa_r+0x32c>
 80117b2:	2301      	movs	r3, #1
 80117b4:	9304      	str	r3, [sp, #16]
 80117b6:	9303      	str	r3, [sp, #12]
 80117b8:	461a      	mov	r2, r3
 80117ba:	e7f5      	b.n	80117a8 <_dtoa_r+0x338>
 80117bc:	686a      	ldr	r2, [r5, #4]
 80117be:	3201      	adds	r2, #1
 80117c0:	606a      	str	r2, [r5, #4]
 80117c2:	0049      	lsls	r1, r1, #1
 80117c4:	e780      	b.n	80116c8 <_dtoa_r+0x258>
 80117c6:	2502      	movs	r5, #2
 80117c8:	e7af      	b.n	801172a <_dtoa_r+0x2ba>
 80117ca:	07f1      	lsls	r1, r6, #31
 80117cc:	d508      	bpl.n	80117e0 <_dtoa_r+0x370>
 80117ce:	4640      	mov	r0, r8
 80117d0:	4649      	mov	r1, r9
 80117d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117d6:	f7ee ff3b 	bl	8000650 <__aeabi_dmul>
 80117da:	3501      	adds	r5, #1
 80117dc:	4680      	mov	r8, r0
 80117de:	4689      	mov	r9, r1
 80117e0:	1076      	asrs	r6, r6, #1
 80117e2:	3708      	adds	r7, #8
 80117e4:	e7a2      	b.n	801172c <_dtoa_r+0x2bc>
 80117e6:	f000 809d 	beq.w	8011924 <_dtoa_r+0x4b4>
 80117ea:	f1cb 0600 	rsb	r6, fp, #0
 80117ee:	4b9f      	ldr	r3, [pc, #636]	; (8011a6c <_dtoa_r+0x5fc>)
 80117f0:	4f9f      	ldr	r7, [pc, #636]	; (8011a70 <_dtoa_r+0x600>)
 80117f2:	f006 020f 	and.w	r2, r6, #15
 80117f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011802:	f7ee ff25 	bl	8000650 <__aeabi_dmul>
 8011806:	e9cd 0100 	strd	r0, r1, [sp]
 801180a:	1136      	asrs	r6, r6, #4
 801180c:	2300      	movs	r3, #0
 801180e:	2502      	movs	r5, #2
 8011810:	2e00      	cmp	r6, #0
 8011812:	d17c      	bne.n	801190e <_dtoa_r+0x49e>
 8011814:	2b00      	cmp	r3, #0
 8011816:	d191      	bne.n	801173c <_dtoa_r+0x2cc>
 8011818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801181a:	2b00      	cmp	r3, #0
 801181c:	f000 8084 	beq.w	8011928 <_dtoa_r+0x4b8>
 8011820:	e9dd 8900 	ldrd	r8, r9, [sp]
 8011824:	2200      	movs	r2, #0
 8011826:	4b93      	ldr	r3, [pc, #588]	; (8011a74 <_dtoa_r+0x604>)
 8011828:	4640      	mov	r0, r8
 801182a:	4649      	mov	r1, r9
 801182c:	f7ef f982 	bl	8000b34 <__aeabi_dcmplt>
 8011830:	2800      	cmp	r0, #0
 8011832:	d079      	beq.n	8011928 <_dtoa_r+0x4b8>
 8011834:	9b03      	ldr	r3, [sp, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d076      	beq.n	8011928 <_dtoa_r+0x4b8>
 801183a:	9b04      	ldr	r3, [sp, #16]
 801183c:	2b00      	cmp	r3, #0
 801183e:	dd34      	ble.n	80118aa <_dtoa_r+0x43a>
 8011840:	2200      	movs	r2, #0
 8011842:	4b8d      	ldr	r3, [pc, #564]	; (8011a78 <_dtoa_r+0x608>)
 8011844:	4640      	mov	r0, r8
 8011846:	4649      	mov	r1, r9
 8011848:	f7ee ff02 	bl	8000650 <__aeabi_dmul>
 801184c:	e9cd 0100 	strd	r0, r1, [sp]
 8011850:	9e04      	ldr	r6, [sp, #16]
 8011852:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011856:	3501      	adds	r5, #1
 8011858:	4628      	mov	r0, r5
 801185a:	f7ee fe93 	bl	8000584 <__aeabi_i2d>
 801185e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011862:	f7ee fef5 	bl	8000650 <__aeabi_dmul>
 8011866:	2200      	movs	r2, #0
 8011868:	4b84      	ldr	r3, [pc, #528]	; (8011a7c <_dtoa_r+0x60c>)
 801186a:	f7ee fd3f 	bl	80002ec <__adddf3>
 801186e:	4680      	mov	r8, r0
 8011870:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8011874:	2e00      	cmp	r6, #0
 8011876:	d15a      	bne.n	801192e <_dtoa_r+0x4be>
 8011878:	2200      	movs	r2, #0
 801187a:	4b81      	ldr	r3, [pc, #516]	; (8011a80 <_dtoa_r+0x610>)
 801187c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011880:	f7ee fd32 	bl	80002e8 <__aeabi_dsub>
 8011884:	4642      	mov	r2, r8
 8011886:	464b      	mov	r3, r9
 8011888:	e9cd 0100 	strd	r0, r1, [sp]
 801188c:	f7ef f970 	bl	8000b70 <__aeabi_dcmpgt>
 8011890:	2800      	cmp	r0, #0
 8011892:	f040 829b 	bne.w	8011dcc <_dtoa_r+0x95c>
 8011896:	4642      	mov	r2, r8
 8011898:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801189c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118a0:	f7ef f948 	bl	8000b34 <__aeabi_dcmplt>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	f040 828f 	bne.w	8011dc8 <_dtoa_r+0x958>
 80118aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80118ae:	e9cd 2300 	strd	r2, r3, [sp]
 80118b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f2c0 8150 	blt.w	8011b5a <_dtoa_r+0x6ea>
 80118ba:	f1bb 0f0e 	cmp.w	fp, #14
 80118be:	f300 814c 	bgt.w	8011b5a <_dtoa_r+0x6ea>
 80118c2:	4b6a      	ldr	r3, [pc, #424]	; (8011a6c <_dtoa_r+0x5fc>)
 80118c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80118c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80118cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f280 80da 	bge.w	8011a88 <_dtoa_r+0x618>
 80118d4:	9b03      	ldr	r3, [sp, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f300 80d6 	bgt.w	8011a88 <_dtoa_r+0x618>
 80118dc:	f040 8273 	bne.w	8011dc6 <_dtoa_r+0x956>
 80118e0:	2200      	movs	r2, #0
 80118e2:	4b67      	ldr	r3, [pc, #412]	; (8011a80 <_dtoa_r+0x610>)
 80118e4:	4640      	mov	r0, r8
 80118e6:	4649      	mov	r1, r9
 80118e8:	f7ee feb2 	bl	8000650 <__aeabi_dmul>
 80118ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118f0:	f7ef f934 	bl	8000b5c <__aeabi_dcmpge>
 80118f4:	9e03      	ldr	r6, [sp, #12]
 80118f6:	4637      	mov	r7, r6
 80118f8:	2800      	cmp	r0, #0
 80118fa:	f040 824a 	bne.w	8011d92 <_dtoa_r+0x922>
 80118fe:	9b02      	ldr	r3, [sp, #8]
 8011900:	9a02      	ldr	r2, [sp, #8]
 8011902:	1c5d      	adds	r5, r3, #1
 8011904:	2331      	movs	r3, #49	; 0x31
 8011906:	7013      	strb	r3, [r2, #0]
 8011908:	f10b 0b01 	add.w	fp, fp, #1
 801190c:	e245      	b.n	8011d9a <_dtoa_r+0x92a>
 801190e:	07f2      	lsls	r2, r6, #31
 8011910:	d505      	bpl.n	801191e <_dtoa_r+0x4ae>
 8011912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011916:	f7ee fe9b 	bl	8000650 <__aeabi_dmul>
 801191a:	3501      	adds	r5, #1
 801191c:	2301      	movs	r3, #1
 801191e:	1076      	asrs	r6, r6, #1
 8011920:	3708      	adds	r7, #8
 8011922:	e775      	b.n	8011810 <_dtoa_r+0x3a0>
 8011924:	2502      	movs	r5, #2
 8011926:	e777      	b.n	8011818 <_dtoa_r+0x3a8>
 8011928:	465f      	mov	r7, fp
 801192a:	9e03      	ldr	r6, [sp, #12]
 801192c:	e794      	b.n	8011858 <_dtoa_r+0x3e8>
 801192e:	9a02      	ldr	r2, [sp, #8]
 8011930:	4b4e      	ldr	r3, [pc, #312]	; (8011a6c <_dtoa_r+0x5fc>)
 8011932:	4432      	add	r2, r6
 8011934:	9213      	str	r2, [sp, #76]	; 0x4c
 8011936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011938:	1e71      	subs	r1, r6, #1
 801193a:	2a00      	cmp	r2, #0
 801193c:	d048      	beq.n	80119d0 <_dtoa_r+0x560>
 801193e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011946:	2000      	movs	r0, #0
 8011948:	494e      	ldr	r1, [pc, #312]	; (8011a84 <_dtoa_r+0x614>)
 801194a:	f7ee ffab 	bl	80008a4 <__aeabi_ddiv>
 801194e:	4642      	mov	r2, r8
 8011950:	464b      	mov	r3, r9
 8011952:	f7ee fcc9 	bl	80002e8 <__aeabi_dsub>
 8011956:	9d02      	ldr	r5, [sp, #8]
 8011958:	4680      	mov	r8, r0
 801195a:	4689      	mov	r9, r1
 801195c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011960:	f7ef f926 	bl	8000bb0 <__aeabi_d2iz>
 8011964:	4606      	mov	r6, r0
 8011966:	f7ee fe0d 	bl	8000584 <__aeabi_i2d>
 801196a:	4602      	mov	r2, r0
 801196c:	460b      	mov	r3, r1
 801196e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011972:	f7ee fcb9 	bl	80002e8 <__aeabi_dsub>
 8011976:	3630      	adds	r6, #48	; 0x30
 8011978:	f805 6b01 	strb.w	r6, [r5], #1
 801197c:	4642      	mov	r2, r8
 801197e:	464b      	mov	r3, r9
 8011980:	e9cd 0100 	strd	r0, r1, [sp]
 8011984:	f7ef f8d6 	bl	8000b34 <__aeabi_dcmplt>
 8011988:	2800      	cmp	r0, #0
 801198a:	d165      	bne.n	8011a58 <_dtoa_r+0x5e8>
 801198c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011990:	2000      	movs	r0, #0
 8011992:	4938      	ldr	r1, [pc, #224]	; (8011a74 <_dtoa_r+0x604>)
 8011994:	f7ee fca8 	bl	80002e8 <__aeabi_dsub>
 8011998:	4642      	mov	r2, r8
 801199a:	464b      	mov	r3, r9
 801199c:	f7ef f8ca 	bl	8000b34 <__aeabi_dcmplt>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	f040 80ba 	bne.w	8011b1a <_dtoa_r+0x6aa>
 80119a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119a8:	429d      	cmp	r5, r3
 80119aa:	f43f af7e 	beq.w	80118aa <_dtoa_r+0x43a>
 80119ae:	2200      	movs	r2, #0
 80119b0:	4b31      	ldr	r3, [pc, #196]	; (8011a78 <_dtoa_r+0x608>)
 80119b2:	4640      	mov	r0, r8
 80119b4:	4649      	mov	r1, r9
 80119b6:	f7ee fe4b 	bl	8000650 <__aeabi_dmul>
 80119ba:	2200      	movs	r2, #0
 80119bc:	4680      	mov	r8, r0
 80119be:	4689      	mov	r9, r1
 80119c0:	4b2d      	ldr	r3, [pc, #180]	; (8011a78 <_dtoa_r+0x608>)
 80119c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119c6:	f7ee fe43 	bl	8000650 <__aeabi_dmul>
 80119ca:	e9cd 0100 	strd	r0, r1, [sp]
 80119ce:	e7c5      	b.n	801195c <_dtoa_r+0x4ec>
 80119d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80119d4:	4642      	mov	r2, r8
 80119d6:	464b      	mov	r3, r9
 80119d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119dc:	f7ee fe38 	bl	8000650 <__aeabi_dmul>
 80119e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80119e4:	9d02      	ldr	r5, [sp, #8]
 80119e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119ea:	f7ef f8e1 	bl	8000bb0 <__aeabi_d2iz>
 80119ee:	4606      	mov	r6, r0
 80119f0:	f7ee fdc8 	bl	8000584 <__aeabi_i2d>
 80119f4:	3630      	adds	r6, #48	; 0x30
 80119f6:	4602      	mov	r2, r0
 80119f8:	460b      	mov	r3, r1
 80119fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119fe:	f7ee fc73 	bl	80002e8 <__aeabi_dsub>
 8011a02:	f805 6b01 	strb.w	r6, [r5], #1
 8011a06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a08:	42ab      	cmp	r3, r5
 8011a0a:	4680      	mov	r8, r0
 8011a0c:	4689      	mov	r9, r1
 8011a0e:	f04f 0200 	mov.w	r2, #0
 8011a12:	d125      	bne.n	8011a60 <_dtoa_r+0x5f0>
 8011a14:	4b1b      	ldr	r3, [pc, #108]	; (8011a84 <_dtoa_r+0x614>)
 8011a16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011a1a:	f7ee fc67 	bl	80002ec <__adddf3>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	460b      	mov	r3, r1
 8011a22:	4640      	mov	r0, r8
 8011a24:	4649      	mov	r1, r9
 8011a26:	f7ef f8a3 	bl	8000b70 <__aeabi_dcmpgt>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d175      	bne.n	8011b1a <_dtoa_r+0x6aa>
 8011a2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011a32:	2000      	movs	r0, #0
 8011a34:	4913      	ldr	r1, [pc, #76]	; (8011a84 <_dtoa_r+0x614>)
 8011a36:	f7ee fc57 	bl	80002e8 <__aeabi_dsub>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	4640      	mov	r0, r8
 8011a40:	4649      	mov	r1, r9
 8011a42:	f7ef f877 	bl	8000b34 <__aeabi_dcmplt>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	f43f af2f 	beq.w	80118aa <_dtoa_r+0x43a>
 8011a4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011a50:	2b30      	cmp	r3, #48	; 0x30
 8011a52:	f105 32ff 	add.w	r2, r5, #4294967295
 8011a56:	d001      	beq.n	8011a5c <_dtoa_r+0x5ec>
 8011a58:	46bb      	mov	fp, r7
 8011a5a:	e04d      	b.n	8011af8 <_dtoa_r+0x688>
 8011a5c:	4615      	mov	r5, r2
 8011a5e:	e7f5      	b.n	8011a4c <_dtoa_r+0x5dc>
 8011a60:	4b05      	ldr	r3, [pc, #20]	; (8011a78 <_dtoa_r+0x608>)
 8011a62:	f7ee fdf5 	bl	8000650 <__aeabi_dmul>
 8011a66:	e9cd 0100 	strd	r0, r1, [sp]
 8011a6a:	e7bc      	b.n	80119e6 <_dtoa_r+0x576>
 8011a6c:	08016398 	.word	0x08016398
 8011a70:	08016370 	.word	0x08016370
 8011a74:	3ff00000 	.word	0x3ff00000
 8011a78:	40240000 	.word	0x40240000
 8011a7c:	401c0000 	.word	0x401c0000
 8011a80:	40140000 	.word	0x40140000
 8011a84:	3fe00000 	.word	0x3fe00000
 8011a88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011a8c:	9d02      	ldr	r5, [sp, #8]
 8011a8e:	4642      	mov	r2, r8
 8011a90:	464b      	mov	r3, r9
 8011a92:	4630      	mov	r0, r6
 8011a94:	4639      	mov	r1, r7
 8011a96:	f7ee ff05 	bl	80008a4 <__aeabi_ddiv>
 8011a9a:	f7ef f889 	bl	8000bb0 <__aeabi_d2iz>
 8011a9e:	9000      	str	r0, [sp, #0]
 8011aa0:	f7ee fd70 	bl	8000584 <__aeabi_i2d>
 8011aa4:	4642      	mov	r2, r8
 8011aa6:	464b      	mov	r3, r9
 8011aa8:	f7ee fdd2 	bl	8000650 <__aeabi_dmul>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	4639      	mov	r1, r7
 8011ab4:	f7ee fc18 	bl	80002e8 <__aeabi_dsub>
 8011ab8:	9e00      	ldr	r6, [sp, #0]
 8011aba:	9f03      	ldr	r7, [sp, #12]
 8011abc:	3630      	adds	r6, #48	; 0x30
 8011abe:	f805 6b01 	strb.w	r6, [r5], #1
 8011ac2:	9e02      	ldr	r6, [sp, #8]
 8011ac4:	1bae      	subs	r6, r5, r6
 8011ac6:	42b7      	cmp	r7, r6
 8011ac8:	4602      	mov	r2, r0
 8011aca:	460b      	mov	r3, r1
 8011acc:	d138      	bne.n	8011b40 <_dtoa_r+0x6d0>
 8011ace:	f7ee fc0d 	bl	80002ec <__adddf3>
 8011ad2:	4606      	mov	r6, r0
 8011ad4:	460f      	mov	r7, r1
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	460b      	mov	r3, r1
 8011ada:	4640      	mov	r0, r8
 8011adc:	4649      	mov	r1, r9
 8011ade:	f7ef f829 	bl	8000b34 <__aeabi_dcmplt>
 8011ae2:	b9c8      	cbnz	r0, 8011b18 <_dtoa_r+0x6a8>
 8011ae4:	4632      	mov	r2, r6
 8011ae6:	463b      	mov	r3, r7
 8011ae8:	4640      	mov	r0, r8
 8011aea:	4649      	mov	r1, r9
 8011aec:	f7ef f818 	bl	8000b20 <__aeabi_dcmpeq>
 8011af0:	b110      	cbz	r0, 8011af8 <_dtoa_r+0x688>
 8011af2:	9b00      	ldr	r3, [sp, #0]
 8011af4:	07db      	lsls	r3, r3, #31
 8011af6:	d40f      	bmi.n	8011b18 <_dtoa_r+0x6a8>
 8011af8:	4651      	mov	r1, sl
 8011afa:	4620      	mov	r0, r4
 8011afc:	f000 fcb5 	bl	801246a <_Bfree>
 8011b00:	2300      	movs	r3, #0
 8011b02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b04:	702b      	strb	r3, [r5, #0]
 8011b06:	f10b 0301 	add.w	r3, fp, #1
 8011b0a:	6013      	str	r3, [r2, #0]
 8011b0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f43f acf8 	beq.w	8011504 <_dtoa_r+0x94>
 8011b14:	601d      	str	r5, [r3, #0]
 8011b16:	e4f5      	b.n	8011504 <_dtoa_r+0x94>
 8011b18:	465f      	mov	r7, fp
 8011b1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011b1e:	2a39      	cmp	r2, #57	; 0x39
 8011b20:	f105 33ff 	add.w	r3, r5, #4294967295
 8011b24:	d106      	bne.n	8011b34 <_dtoa_r+0x6c4>
 8011b26:	9a02      	ldr	r2, [sp, #8]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d107      	bne.n	8011b3c <_dtoa_r+0x6cc>
 8011b2c:	2330      	movs	r3, #48	; 0x30
 8011b2e:	7013      	strb	r3, [r2, #0]
 8011b30:	3701      	adds	r7, #1
 8011b32:	4613      	mov	r3, r2
 8011b34:	781a      	ldrb	r2, [r3, #0]
 8011b36:	3201      	adds	r2, #1
 8011b38:	701a      	strb	r2, [r3, #0]
 8011b3a:	e78d      	b.n	8011a58 <_dtoa_r+0x5e8>
 8011b3c:	461d      	mov	r5, r3
 8011b3e:	e7ec      	b.n	8011b1a <_dtoa_r+0x6aa>
 8011b40:	2200      	movs	r2, #0
 8011b42:	4ba4      	ldr	r3, [pc, #656]	; (8011dd4 <_dtoa_r+0x964>)
 8011b44:	f7ee fd84 	bl	8000650 <__aeabi_dmul>
 8011b48:	2200      	movs	r2, #0
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	4606      	mov	r6, r0
 8011b4e:	460f      	mov	r7, r1
 8011b50:	f7ee ffe6 	bl	8000b20 <__aeabi_dcmpeq>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d09a      	beq.n	8011a8e <_dtoa_r+0x61e>
 8011b58:	e7ce      	b.n	8011af8 <_dtoa_r+0x688>
 8011b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b5c:	2a00      	cmp	r2, #0
 8011b5e:	f000 80cd 	beq.w	8011cfc <_dtoa_r+0x88c>
 8011b62:	9a07      	ldr	r2, [sp, #28]
 8011b64:	2a01      	cmp	r2, #1
 8011b66:	f300 80af 	bgt.w	8011cc8 <_dtoa_r+0x858>
 8011b6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b6c:	2a00      	cmp	r2, #0
 8011b6e:	f000 80a7 	beq.w	8011cc0 <_dtoa_r+0x850>
 8011b72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011b76:	9e08      	ldr	r6, [sp, #32]
 8011b78:	9d05      	ldr	r5, [sp, #20]
 8011b7a:	9a05      	ldr	r2, [sp, #20]
 8011b7c:	441a      	add	r2, r3
 8011b7e:	9205      	str	r2, [sp, #20]
 8011b80:	9a06      	ldr	r2, [sp, #24]
 8011b82:	2101      	movs	r1, #1
 8011b84:	441a      	add	r2, r3
 8011b86:	4620      	mov	r0, r4
 8011b88:	9206      	str	r2, [sp, #24]
 8011b8a:	f000 fd0e 	bl	80125aa <__i2b>
 8011b8e:	4607      	mov	r7, r0
 8011b90:	2d00      	cmp	r5, #0
 8011b92:	dd0c      	ble.n	8011bae <_dtoa_r+0x73e>
 8011b94:	9b06      	ldr	r3, [sp, #24]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	dd09      	ble.n	8011bae <_dtoa_r+0x73e>
 8011b9a:	42ab      	cmp	r3, r5
 8011b9c:	9a05      	ldr	r2, [sp, #20]
 8011b9e:	bfa8      	it	ge
 8011ba0:	462b      	movge	r3, r5
 8011ba2:	1ad2      	subs	r2, r2, r3
 8011ba4:	9205      	str	r2, [sp, #20]
 8011ba6:	9a06      	ldr	r2, [sp, #24]
 8011ba8:	1aed      	subs	r5, r5, r3
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	9306      	str	r3, [sp, #24]
 8011bae:	9b08      	ldr	r3, [sp, #32]
 8011bb0:	b1f3      	cbz	r3, 8011bf0 <_dtoa_r+0x780>
 8011bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f000 80a5 	beq.w	8011d04 <_dtoa_r+0x894>
 8011bba:	2e00      	cmp	r6, #0
 8011bbc:	dd10      	ble.n	8011be0 <_dtoa_r+0x770>
 8011bbe:	4639      	mov	r1, r7
 8011bc0:	4632      	mov	r2, r6
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f000 fd88 	bl	80126d8 <__pow5mult>
 8011bc8:	4652      	mov	r2, sl
 8011bca:	4601      	mov	r1, r0
 8011bcc:	4607      	mov	r7, r0
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f000 fcf4 	bl	80125bc <__multiply>
 8011bd4:	4651      	mov	r1, sl
 8011bd6:	4680      	mov	r8, r0
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 fc46 	bl	801246a <_Bfree>
 8011bde:	46c2      	mov	sl, r8
 8011be0:	9b08      	ldr	r3, [sp, #32]
 8011be2:	1b9a      	subs	r2, r3, r6
 8011be4:	d004      	beq.n	8011bf0 <_dtoa_r+0x780>
 8011be6:	4651      	mov	r1, sl
 8011be8:	4620      	mov	r0, r4
 8011bea:	f000 fd75 	bl	80126d8 <__pow5mult>
 8011bee:	4682      	mov	sl, r0
 8011bf0:	2101      	movs	r1, #1
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f000 fcd9 	bl	80125aa <__i2b>
 8011bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	4606      	mov	r6, r0
 8011bfe:	f340 8083 	ble.w	8011d08 <_dtoa_r+0x898>
 8011c02:	461a      	mov	r2, r3
 8011c04:	4601      	mov	r1, r0
 8011c06:	4620      	mov	r0, r4
 8011c08:	f000 fd66 	bl	80126d8 <__pow5mult>
 8011c0c:	9b07      	ldr	r3, [sp, #28]
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	4606      	mov	r6, r0
 8011c12:	dd7c      	ble.n	8011d0e <_dtoa_r+0x89e>
 8011c14:	f04f 0800 	mov.w	r8, #0
 8011c18:	6933      	ldr	r3, [r6, #16]
 8011c1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011c1e:	6918      	ldr	r0, [r3, #16]
 8011c20:	f000 fc75 	bl	801250e <__hi0bits>
 8011c24:	f1c0 0020 	rsb	r0, r0, #32
 8011c28:	9b06      	ldr	r3, [sp, #24]
 8011c2a:	4418      	add	r0, r3
 8011c2c:	f010 001f 	ands.w	r0, r0, #31
 8011c30:	f000 8096 	beq.w	8011d60 <_dtoa_r+0x8f0>
 8011c34:	f1c0 0320 	rsb	r3, r0, #32
 8011c38:	2b04      	cmp	r3, #4
 8011c3a:	f340 8087 	ble.w	8011d4c <_dtoa_r+0x8dc>
 8011c3e:	9b05      	ldr	r3, [sp, #20]
 8011c40:	f1c0 001c 	rsb	r0, r0, #28
 8011c44:	4403      	add	r3, r0
 8011c46:	9305      	str	r3, [sp, #20]
 8011c48:	9b06      	ldr	r3, [sp, #24]
 8011c4a:	4405      	add	r5, r0
 8011c4c:	4403      	add	r3, r0
 8011c4e:	9306      	str	r3, [sp, #24]
 8011c50:	9b05      	ldr	r3, [sp, #20]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	dd05      	ble.n	8011c62 <_dtoa_r+0x7f2>
 8011c56:	4651      	mov	r1, sl
 8011c58:	461a      	mov	r2, r3
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f000 fd8a 	bl	8012774 <__lshift>
 8011c60:	4682      	mov	sl, r0
 8011c62:	9b06      	ldr	r3, [sp, #24]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	dd05      	ble.n	8011c74 <_dtoa_r+0x804>
 8011c68:	4631      	mov	r1, r6
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f000 fd81 	bl	8012774 <__lshift>
 8011c72:	4606      	mov	r6, r0
 8011c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d074      	beq.n	8011d64 <_dtoa_r+0x8f4>
 8011c7a:	4631      	mov	r1, r6
 8011c7c:	4650      	mov	r0, sl
 8011c7e:	f000 fdca 	bl	8012816 <__mcmp>
 8011c82:	2800      	cmp	r0, #0
 8011c84:	da6e      	bge.n	8011d64 <_dtoa_r+0x8f4>
 8011c86:	2300      	movs	r3, #0
 8011c88:	4651      	mov	r1, sl
 8011c8a:	220a      	movs	r2, #10
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	f000 fc03 	bl	8012498 <__multadd>
 8011c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c98:	4682      	mov	sl, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	f000 81a8 	beq.w	8011ff0 <_dtoa_r+0xb80>
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	4639      	mov	r1, r7
 8011ca4:	220a      	movs	r2, #10
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f000 fbf6 	bl	8012498 <__multadd>
 8011cac:	9b04      	ldr	r3, [sp, #16]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	4607      	mov	r7, r0
 8011cb2:	f300 80c8 	bgt.w	8011e46 <_dtoa_r+0x9d6>
 8011cb6:	9b07      	ldr	r3, [sp, #28]
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	f340 80c4 	ble.w	8011e46 <_dtoa_r+0x9d6>
 8011cbe:	e059      	b.n	8011d74 <_dtoa_r+0x904>
 8011cc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011cc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011cc6:	e756      	b.n	8011b76 <_dtoa_r+0x706>
 8011cc8:	9b03      	ldr	r3, [sp, #12]
 8011cca:	1e5e      	subs	r6, r3, #1
 8011ccc:	9b08      	ldr	r3, [sp, #32]
 8011cce:	42b3      	cmp	r3, r6
 8011cd0:	bfbf      	itttt	lt
 8011cd2:	9b08      	ldrlt	r3, [sp, #32]
 8011cd4:	9608      	strlt	r6, [sp, #32]
 8011cd6:	1af2      	sublt	r2, r6, r3
 8011cd8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8011cda:	bfb6      	itet	lt
 8011cdc:	189b      	addlt	r3, r3, r2
 8011cde:	1b9e      	subge	r6, r3, r6
 8011ce0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8011ce2:	9b03      	ldr	r3, [sp, #12]
 8011ce4:	bfb8      	it	lt
 8011ce6:	2600      	movlt	r6, #0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	bfb9      	ittee	lt
 8011cec:	9b05      	ldrlt	r3, [sp, #20]
 8011cee:	9a03      	ldrlt	r2, [sp, #12]
 8011cf0:	9d05      	ldrge	r5, [sp, #20]
 8011cf2:	9b03      	ldrge	r3, [sp, #12]
 8011cf4:	bfbc      	itt	lt
 8011cf6:	1a9d      	sublt	r5, r3, r2
 8011cf8:	2300      	movlt	r3, #0
 8011cfa:	e73e      	b.n	8011b7a <_dtoa_r+0x70a>
 8011cfc:	9e08      	ldr	r6, [sp, #32]
 8011cfe:	9d05      	ldr	r5, [sp, #20]
 8011d00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011d02:	e745      	b.n	8011b90 <_dtoa_r+0x720>
 8011d04:	9a08      	ldr	r2, [sp, #32]
 8011d06:	e76e      	b.n	8011be6 <_dtoa_r+0x776>
 8011d08:	9b07      	ldr	r3, [sp, #28]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	dc19      	bgt.n	8011d42 <_dtoa_r+0x8d2>
 8011d0e:	9b00      	ldr	r3, [sp, #0]
 8011d10:	b9bb      	cbnz	r3, 8011d42 <_dtoa_r+0x8d2>
 8011d12:	9b01      	ldr	r3, [sp, #4]
 8011d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d18:	b99b      	cbnz	r3, 8011d42 <_dtoa_r+0x8d2>
 8011d1a:	9b01      	ldr	r3, [sp, #4]
 8011d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d20:	0d1b      	lsrs	r3, r3, #20
 8011d22:	051b      	lsls	r3, r3, #20
 8011d24:	b183      	cbz	r3, 8011d48 <_dtoa_r+0x8d8>
 8011d26:	9b05      	ldr	r3, [sp, #20]
 8011d28:	3301      	adds	r3, #1
 8011d2a:	9305      	str	r3, [sp, #20]
 8011d2c:	9b06      	ldr	r3, [sp, #24]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	9306      	str	r3, [sp, #24]
 8011d32:	f04f 0801 	mov.w	r8, #1
 8011d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f47f af6d 	bne.w	8011c18 <_dtoa_r+0x7a8>
 8011d3e:	2001      	movs	r0, #1
 8011d40:	e772      	b.n	8011c28 <_dtoa_r+0x7b8>
 8011d42:	f04f 0800 	mov.w	r8, #0
 8011d46:	e7f6      	b.n	8011d36 <_dtoa_r+0x8c6>
 8011d48:	4698      	mov	r8, r3
 8011d4a:	e7f4      	b.n	8011d36 <_dtoa_r+0x8c6>
 8011d4c:	d080      	beq.n	8011c50 <_dtoa_r+0x7e0>
 8011d4e:	9a05      	ldr	r2, [sp, #20]
 8011d50:	331c      	adds	r3, #28
 8011d52:	441a      	add	r2, r3
 8011d54:	9205      	str	r2, [sp, #20]
 8011d56:	9a06      	ldr	r2, [sp, #24]
 8011d58:	441a      	add	r2, r3
 8011d5a:	441d      	add	r5, r3
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	e776      	b.n	8011c4e <_dtoa_r+0x7de>
 8011d60:	4603      	mov	r3, r0
 8011d62:	e7f4      	b.n	8011d4e <_dtoa_r+0x8de>
 8011d64:	9b03      	ldr	r3, [sp, #12]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	dc36      	bgt.n	8011dd8 <_dtoa_r+0x968>
 8011d6a:	9b07      	ldr	r3, [sp, #28]
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	dd33      	ble.n	8011dd8 <_dtoa_r+0x968>
 8011d70:	9b03      	ldr	r3, [sp, #12]
 8011d72:	9304      	str	r3, [sp, #16]
 8011d74:	9b04      	ldr	r3, [sp, #16]
 8011d76:	b963      	cbnz	r3, 8011d92 <_dtoa_r+0x922>
 8011d78:	4631      	mov	r1, r6
 8011d7a:	2205      	movs	r2, #5
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 fb8b 	bl	8012498 <__multadd>
 8011d82:	4601      	mov	r1, r0
 8011d84:	4606      	mov	r6, r0
 8011d86:	4650      	mov	r0, sl
 8011d88:	f000 fd45 	bl	8012816 <__mcmp>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	f73f adb6 	bgt.w	80118fe <_dtoa_r+0x48e>
 8011d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d94:	9d02      	ldr	r5, [sp, #8]
 8011d96:	ea6f 0b03 	mvn.w	fp, r3
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	9303      	str	r3, [sp, #12]
 8011d9e:	4631      	mov	r1, r6
 8011da0:	4620      	mov	r0, r4
 8011da2:	f000 fb62 	bl	801246a <_Bfree>
 8011da6:	2f00      	cmp	r7, #0
 8011da8:	f43f aea6 	beq.w	8011af8 <_dtoa_r+0x688>
 8011dac:	9b03      	ldr	r3, [sp, #12]
 8011dae:	b12b      	cbz	r3, 8011dbc <_dtoa_r+0x94c>
 8011db0:	42bb      	cmp	r3, r7
 8011db2:	d003      	beq.n	8011dbc <_dtoa_r+0x94c>
 8011db4:	4619      	mov	r1, r3
 8011db6:	4620      	mov	r0, r4
 8011db8:	f000 fb57 	bl	801246a <_Bfree>
 8011dbc:	4639      	mov	r1, r7
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	f000 fb53 	bl	801246a <_Bfree>
 8011dc4:	e698      	b.n	8011af8 <_dtoa_r+0x688>
 8011dc6:	2600      	movs	r6, #0
 8011dc8:	4637      	mov	r7, r6
 8011dca:	e7e2      	b.n	8011d92 <_dtoa_r+0x922>
 8011dcc:	46bb      	mov	fp, r7
 8011dce:	4637      	mov	r7, r6
 8011dd0:	e595      	b.n	80118fe <_dtoa_r+0x48e>
 8011dd2:	bf00      	nop
 8011dd4:	40240000 	.word	0x40240000
 8011dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dda:	bb93      	cbnz	r3, 8011e42 <_dtoa_r+0x9d2>
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	9304      	str	r3, [sp, #16]
 8011de0:	9d02      	ldr	r5, [sp, #8]
 8011de2:	4631      	mov	r1, r6
 8011de4:	4650      	mov	r0, sl
 8011de6:	f7ff fab7 	bl	8011358 <quorem>
 8011dea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011dee:	f805 9b01 	strb.w	r9, [r5], #1
 8011df2:	9b02      	ldr	r3, [sp, #8]
 8011df4:	9a04      	ldr	r2, [sp, #16]
 8011df6:	1aeb      	subs	r3, r5, r3
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	f300 80dc 	bgt.w	8011fb6 <_dtoa_r+0xb46>
 8011dfe:	9b02      	ldr	r3, [sp, #8]
 8011e00:	2a01      	cmp	r2, #1
 8011e02:	bfac      	ite	ge
 8011e04:	189b      	addge	r3, r3, r2
 8011e06:	3301      	addlt	r3, #1
 8011e08:	4698      	mov	r8, r3
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	9303      	str	r3, [sp, #12]
 8011e0e:	4651      	mov	r1, sl
 8011e10:	2201      	movs	r2, #1
 8011e12:	4620      	mov	r0, r4
 8011e14:	f000 fcae 	bl	8012774 <__lshift>
 8011e18:	4631      	mov	r1, r6
 8011e1a:	4682      	mov	sl, r0
 8011e1c:	f000 fcfb 	bl	8012816 <__mcmp>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	f300 808d 	bgt.w	8011f40 <_dtoa_r+0xad0>
 8011e26:	d103      	bne.n	8011e30 <_dtoa_r+0x9c0>
 8011e28:	f019 0f01 	tst.w	r9, #1
 8011e2c:	f040 8088 	bne.w	8011f40 <_dtoa_r+0xad0>
 8011e30:	4645      	mov	r5, r8
 8011e32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011e36:	2b30      	cmp	r3, #48	; 0x30
 8011e38:	f105 32ff 	add.w	r2, r5, #4294967295
 8011e3c:	d1af      	bne.n	8011d9e <_dtoa_r+0x92e>
 8011e3e:	4615      	mov	r5, r2
 8011e40:	e7f7      	b.n	8011e32 <_dtoa_r+0x9c2>
 8011e42:	9b03      	ldr	r3, [sp, #12]
 8011e44:	9304      	str	r3, [sp, #16]
 8011e46:	2d00      	cmp	r5, #0
 8011e48:	dd05      	ble.n	8011e56 <_dtoa_r+0x9e6>
 8011e4a:	4639      	mov	r1, r7
 8011e4c:	462a      	mov	r2, r5
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f000 fc90 	bl	8012774 <__lshift>
 8011e54:	4607      	mov	r7, r0
 8011e56:	f1b8 0f00 	cmp.w	r8, #0
 8011e5a:	d04c      	beq.n	8011ef6 <_dtoa_r+0xa86>
 8011e5c:	6879      	ldr	r1, [r7, #4]
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f000 facf 	bl	8012402 <_Balloc>
 8011e64:	693a      	ldr	r2, [r7, #16]
 8011e66:	3202      	adds	r2, #2
 8011e68:	4605      	mov	r5, r0
 8011e6a:	0092      	lsls	r2, r2, #2
 8011e6c:	f107 010c 	add.w	r1, r7, #12
 8011e70:	300c      	adds	r0, #12
 8011e72:	f000 fab9 	bl	80123e8 <memcpy>
 8011e76:	2201      	movs	r2, #1
 8011e78:	4629      	mov	r1, r5
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f000 fc7a 	bl	8012774 <__lshift>
 8011e80:	9b00      	ldr	r3, [sp, #0]
 8011e82:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011e86:	9703      	str	r7, [sp, #12]
 8011e88:	f003 0301 	and.w	r3, r3, #1
 8011e8c:	4607      	mov	r7, r0
 8011e8e:	9305      	str	r3, [sp, #20]
 8011e90:	4631      	mov	r1, r6
 8011e92:	4650      	mov	r0, sl
 8011e94:	f7ff fa60 	bl	8011358 <quorem>
 8011e98:	9903      	ldr	r1, [sp, #12]
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011ea0:	4650      	mov	r0, sl
 8011ea2:	f000 fcb8 	bl	8012816 <__mcmp>
 8011ea6:	463a      	mov	r2, r7
 8011ea8:	9000      	str	r0, [sp, #0]
 8011eaa:	4631      	mov	r1, r6
 8011eac:	4620      	mov	r0, r4
 8011eae:	f000 fccc 	bl	801284a <__mdiff>
 8011eb2:	68c3      	ldr	r3, [r0, #12]
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	bb03      	cbnz	r3, 8011efa <_dtoa_r+0xa8a>
 8011eb8:	4601      	mov	r1, r0
 8011eba:	9006      	str	r0, [sp, #24]
 8011ebc:	4650      	mov	r0, sl
 8011ebe:	f000 fcaa 	bl	8012816 <__mcmp>
 8011ec2:	9a06      	ldr	r2, [sp, #24]
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	4611      	mov	r1, r2
 8011ec8:	4620      	mov	r0, r4
 8011eca:	9306      	str	r3, [sp, #24]
 8011ecc:	f000 facd 	bl	801246a <_Bfree>
 8011ed0:	9b06      	ldr	r3, [sp, #24]
 8011ed2:	b9a3      	cbnz	r3, 8011efe <_dtoa_r+0xa8e>
 8011ed4:	9a07      	ldr	r2, [sp, #28]
 8011ed6:	b992      	cbnz	r2, 8011efe <_dtoa_r+0xa8e>
 8011ed8:	9a05      	ldr	r2, [sp, #20]
 8011eda:	b982      	cbnz	r2, 8011efe <_dtoa_r+0xa8e>
 8011edc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011ee0:	d029      	beq.n	8011f36 <_dtoa_r+0xac6>
 8011ee2:	9b00      	ldr	r3, [sp, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	dd01      	ble.n	8011eec <_dtoa_r+0xa7c>
 8011ee8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8011eec:	f108 0501 	add.w	r5, r8, #1
 8011ef0:	f888 9000 	strb.w	r9, [r8]
 8011ef4:	e753      	b.n	8011d9e <_dtoa_r+0x92e>
 8011ef6:	4638      	mov	r0, r7
 8011ef8:	e7c2      	b.n	8011e80 <_dtoa_r+0xa10>
 8011efa:	2301      	movs	r3, #1
 8011efc:	e7e3      	b.n	8011ec6 <_dtoa_r+0xa56>
 8011efe:	9a00      	ldr	r2, [sp, #0]
 8011f00:	2a00      	cmp	r2, #0
 8011f02:	db04      	blt.n	8011f0e <_dtoa_r+0xa9e>
 8011f04:	d125      	bne.n	8011f52 <_dtoa_r+0xae2>
 8011f06:	9a07      	ldr	r2, [sp, #28]
 8011f08:	bb1a      	cbnz	r2, 8011f52 <_dtoa_r+0xae2>
 8011f0a:	9a05      	ldr	r2, [sp, #20]
 8011f0c:	bb0a      	cbnz	r2, 8011f52 <_dtoa_r+0xae2>
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	ddec      	ble.n	8011eec <_dtoa_r+0xa7c>
 8011f12:	4651      	mov	r1, sl
 8011f14:	2201      	movs	r2, #1
 8011f16:	4620      	mov	r0, r4
 8011f18:	f000 fc2c 	bl	8012774 <__lshift>
 8011f1c:	4631      	mov	r1, r6
 8011f1e:	4682      	mov	sl, r0
 8011f20:	f000 fc79 	bl	8012816 <__mcmp>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	dc03      	bgt.n	8011f30 <_dtoa_r+0xac0>
 8011f28:	d1e0      	bne.n	8011eec <_dtoa_r+0xa7c>
 8011f2a:	f019 0f01 	tst.w	r9, #1
 8011f2e:	d0dd      	beq.n	8011eec <_dtoa_r+0xa7c>
 8011f30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f34:	d1d8      	bne.n	8011ee8 <_dtoa_r+0xa78>
 8011f36:	2339      	movs	r3, #57	; 0x39
 8011f38:	f888 3000 	strb.w	r3, [r8]
 8011f3c:	f108 0801 	add.w	r8, r8, #1
 8011f40:	4645      	mov	r5, r8
 8011f42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011f46:	2b39      	cmp	r3, #57	; 0x39
 8011f48:	f105 32ff 	add.w	r2, r5, #4294967295
 8011f4c:	d03b      	beq.n	8011fc6 <_dtoa_r+0xb56>
 8011f4e:	3301      	adds	r3, #1
 8011f50:	e040      	b.n	8011fd4 <_dtoa_r+0xb64>
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	f108 0501 	add.w	r5, r8, #1
 8011f58:	dd05      	ble.n	8011f66 <_dtoa_r+0xaf6>
 8011f5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f5e:	d0ea      	beq.n	8011f36 <_dtoa_r+0xac6>
 8011f60:	f109 0901 	add.w	r9, r9, #1
 8011f64:	e7c4      	b.n	8011ef0 <_dtoa_r+0xa80>
 8011f66:	9b02      	ldr	r3, [sp, #8]
 8011f68:	9a04      	ldr	r2, [sp, #16]
 8011f6a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8011f6e:	1aeb      	subs	r3, r5, r3
 8011f70:	4293      	cmp	r3, r2
 8011f72:	46a8      	mov	r8, r5
 8011f74:	f43f af4b 	beq.w	8011e0e <_dtoa_r+0x99e>
 8011f78:	4651      	mov	r1, sl
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	220a      	movs	r2, #10
 8011f7e:	4620      	mov	r0, r4
 8011f80:	f000 fa8a 	bl	8012498 <__multadd>
 8011f84:	9b03      	ldr	r3, [sp, #12]
 8011f86:	9903      	ldr	r1, [sp, #12]
 8011f88:	42bb      	cmp	r3, r7
 8011f8a:	4682      	mov	sl, r0
 8011f8c:	f04f 0300 	mov.w	r3, #0
 8011f90:	f04f 020a 	mov.w	r2, #10
 8011f94:	4620      	mov	r0, r4
 8011f96:	d104      	bne.n	8011fa2 <_dtoa_r+0xb32>
 8011f98:	f000 fa7e 	bl	8012498 <__multadd>
 8011f9c:	9003      	str	r0, [sp, #12]
 8011f9e:	4607      	mov	r7, r0
 8011fa0:	e776      	b.n	8011e90 <_dtoa_r+0xa20>
 8011fa2:	f000 fa79 	bl	8012498 <__multadd>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	9003      	str	r0, [sp, #12]
 8011faa:	220a      	movs	r2, #10
 8011fac:	4639      	mov	r1, r7
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 fa72 	bl	8012498 <__multadd>
 8011fb4:	e7f3      	b.n	8011f9e <_dtoa_r+0xb2e>
 8011fb6:	4651      	mov	r1, sl
 8011fb8:	2300      	movs	r3, #0
 8011fba:	220a      	movs	r2, #10
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f000 fa6b 	bl	8012498 <__multadd>
 8011fc2:	4682      	mov	sl, r0
 8011fc4:	e70d      	b.n	8011de2 <_dtoa_r+0x972>
 8011fc6:	9b02      	ldr	r3, [sp, #8]
 8011fc8:	4293      	cmp	r3, r2
 8011fca:	d105      	bne.n	8011fd8 <_dtoa_r+0xb68>
 8011fcc:	9a02      	ldr	r2, [sp, #8]
 8011fce:	f10b 0b01 	add.w	fp, fp, #1
 8011fd2:	2331      	movs	r3, #49	; 0x31
 8011fd4:	7013      	strb	r3, [r2, #0]
 8011fd6:	e6e2      	b.n	8011d9e <_dtoa_r+0x92e>
 8011fd8:	4615      	mov	r5, r2
 8011fda:	e7b2      	b.n	8011f42 <_dtoa_r+0xad2>
 8011fdc:	4b09      	ldr	r3, [pc, #36]	; (8012004 <_dtoa_r+0xb94>)
 8011fde:	f7ff baae 	b.w	801153e <_dtoa_r+0xce>
 8011fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f47f aa88 	bne.w	80114fa <_dtoa_r+0x8a>
 8011fea:	4b07      	ldr	r3, [pc, #28]	; (8012008 <_dtoa_r+0xb98>)
 8011fec:	f7ff baa7 	b.w	801153e <_dtoa_r+0xce>
 8011ff0:	9b04      	ldr	r3, [sp, #16]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	f73f aef4 	bgt.w	8011de0 <_dtoa_r+0x970>
 8011ff8:	9b07      	ldr	r3, [sp, #28]
 8011ffa:	2b02      	cmp	r3, #2
 8011ffc:	f77f aef0 	ble.w	8011de0 <_dtoa_r+0x970>
 8012000:	e6b8      	b.n	8011d74 <_dtoa_r+0x904>
 8012002:	bf00      	nop
 8012004:	080161d6 	.word	0x080161d6
 8012008:	080162fb 	.word	0x080162fb

0801200c <__sflush_r>:
 801200c:	898a      	ldrh	r2, [r1, #12]
 801200e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012012:	4605      	mov	r5, r0
 8012014:	0710      	lsls	r0, r2, #28
 8012016:	460c      	mov	r4, r1
 8012018:	d45a      	bmi.n	80120d0 <__sflush_r+0xc4>
 801201a:	684b      	ldr	r3, [r1, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	dc05      	bgt.n	801202c <__sflush_r+0x20>
 8012020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012022:	2b00      	cmp	r3, #0
 8012024:	dc02      	bgt.n	801202c <__sflush_r+0x20>
 8012026:	2000      	movs	r0, #0
 8012028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801202c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801202e:	2e00      	cmp	r6, #0
 8012030:	d0f9      	beq.n	8012026 <__sflush_r+0x1a>
 8012032:	2300      	movs	r3, #0
 8012034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012038:	682f      	ldr	r7, [r5, #0]
 801203a:	602b      	str	r3, [r5, #0]
 801203c:	d033      	beq.n	80120a6 <__sflush_r+0x9a>
 801203e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012040:	89a3      	ldrh	r3, [r4, #12]
 8012042:	075a      	lsls	r2, r3, #29
 8012044:	d505      	bpl.n	8012052 <__sflush_r+0x46>
 8012046:	6863      	ldr	r3, [r4, #4]
 8012048:	1ac0      	subs	r0, r0, r3
 801204a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801204c:	b10b      	cbz	r3, 8012052 <__sflush_r+0x46>
 801204e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012050:	1ac0      	subs	r0, r0, r3
 8012052:	2300      	movs	r3, #0
 8012054:	4602      	mov	r2, r0
 8012056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012058:	6a21      	ldr	r1, [r4, #32]
 801205a:	4628      	mov	r0, r5
 801205c:	47b0      	blx	r6
 801205e:	1c43      	adds	r3, r0, #1
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	d106      	bne.n	8012072 <__sflush_r+0x66>
 8012064:	6829      	ldr	r1, [r5, #0]
 8012066:	291d      	cmp	r1, #29
 8012068:	d84b      	bhi.n	8012102 <__sflush_r+0xf6>
 801206a:	4a2b      	ldr	r2, [pc, #172]	; (8012118 <__sflush_r+0x10c>)
 801206c:	40ca      	lsrs	r2, r1
 801206e:	07d6      	lsls	r6, r2, #31
 8012070:	d547      	bpl.n	8012102 <__sflush_r+0xf6>
 8012072:	2200      	movs	r2, #0
 8012074:	6062      	str	r2, [r4, #4]
 8012076:	04d9      	lsls	r1, r3, #19
 8012078:	6922      	ldr	r2, [r4, #16]
 801207a:	6022      	str	r2, [r4, #0]
 801207c:	d504      	bpl.n	8012088 <__sflush_r+0x7c>
 801207e:	1c42      	adds	r2, r0, #1
 8012080:	d101      	bne.n	8012086 <__sflush_r+0x7a>
 8012082:	682b      	ldr	r3, [r5, #0]
 8012084:	b903      	cbnz	r3, 8012088 <__sflush_r+0x7c>
 8012086:	6560      	str	r0, [r4, #84]	; 0x54
 8012088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801208a:	602f      	str	r7, [r5, #0]
 801208c:	2900      	cmp	r1, #0
 801208e:	d0ca      	beq.n	8012026 <__sflush_r+0x1a>
 8012090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012094:	4299      	cmp	r1, r3
 8012096:	d002      	beq.n	801209e <__sflush_r+0x92>
 8012098:	4628      	mov	r0, r5
 801209a:	f7fe f9d7 	bl	801044c <_free_r>
 801209e:	2000      	movs	r0, #0
 80120a0:	6360      	str	r0, [r4, #52]	; 0x34
 80120a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a6:	6a21      	ldr	r1, [r4, #32]
 80120a8:	2301      	movs	r3, #1
 80120aa:	4628      	mov	r0, r5
 80120ac:	47b0      	blx	r6
 80120ae:	1c41      	adds	r1, r0, #1
 80120b0:	d1c6      	bne.n	8012040 <__sflush_r+0x34>
 80120b2:	682b      	ldr	r3, [r5, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d0c3      	beq.n	8012040 <__sflush_r+0x34>
 80120b8:	2b1d      	cmp	r3, #29
 80120ba:	d001      	beq.n	80120c0 <__sflush_r+0xb4>
 80120bc:	2b16      	cmp	r3, #22
 80120be:	d101      	bne.n	80120c4 <__sflush_r+0xb8>
 80120c0:	602f      	str	r7, [r5, #0]
 80120c2:	e7b0      	b.n	8012026 <__sflush_r+0x1a>
 80120c4:	89a3      	ldrh	r3, [r4, #12]
 80120c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120ca:	81a3      	strh	r3, [r4, #12]
 80120cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d0:	690f      	ldr	r7, [r1, #16]
 80120d2:	2f00      	cmp	r7, #0
 80120d4:	d0a7      	beq.n	8012026 <__sflush_r+0x1a>
 80120d6:	0793      	lsls	r3, r2, #30
 80120d8:	680e      	ldr	r6, [r1, #0]
 80120da:	bf08      	it	eq
 80120dc:	694b      	ldreq	r3, [r1, #20]
 80120de:	600f      	str	r7, [r1, #0]
 80120e0:	bf18      	it	ne
 80120e2:	2300      	movne	r3, #0
 80120e4:	eba6 0807 	sub.w	r8, r6, r7
 80120e8:	608b      	str	r3, [r1, #8]
 80120ea:	f1b8 0f00 	cmp.w	r8, #0
 80120ee:	dd9a      	ble.n	8012026 <__sflush_r+0x1a>
 80120f0:	4643      	mov	r3, r8
 80120f2:	463a      	mov	r2, r7
 80120f4:	6a21      	ldr	r1, [r4, #32]
 80120f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120f8:	4628      	mov	r0, r5
 80120fa:	47b0      	blx	r6
 80120fc:	2800      	cmp	r0, #0
 80120fe:	dc07      	bgt.n	8012110 <__sflush_r+0x104>
 8012100:	89a3      	ldrh	r3, [r4, #12]
 8012102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012106:	81a3      	strh	r3, [r4, #12]
 8012108:	f04f 30ff 	mov.w	r0, #4294967295
 801210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012110:	4407      	add	r7, r0
 8012112:	eba8 0800 	sub.w	r8, r8, r0
 8012116:	e7e8      	b.n	80120ea <__sflush_r+0xde>
 8012118:	20400001 	.word	0x20400001

0801211c <_fflush_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	690b      	ldr	r3, [r1, #16]
 8012120:	4605      	mov	r5, r0
 8012122:	460c      	mov	r4, r1
 8012124:	b1db      	cbz	r3, 801215e <_fflush_r+0x42>
 8012126:	b118      	cbz	r0, 8012130 <_fflush_r+0x14>
 8012128:	6983      	ldr	r3, [r0, #24]
 801212a:	b90b      	cbnz	r3, 8012130 <_fflush_r+0x14>
 801212c:	f000 f860 	bl	80121f0 <__sinit>
 8012130:	4b0c      	ldr	r3, [pc, #48]	; (8012164 <_fflush_r+0x48>)
 8012132:	429c      	cmp	r4, r3
 8012134:	d109      	bne.n	801214a <_fflush_r+0x2e>
 8012136:	686c      	ldr	r4, [r5, #4]
 8012138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801213c:	b17b      	cbz	r3, 801215e <_fflush_r+0x42>
 801213e:	4621      	mov	r1, r4
 8012140:	4628      	mov	r0, r5
 8012142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012146:	f7ff bf61 	b.w	801200c <__sflush_r>
 801214a:	4b07      	ldr	r3, [pc, #28]	; (8012168 <_fflush_r+0x4c>)
 801214c:	429c      	cmp	r4, r3
 801214e:	d101      	bne.n	8012154 <_fflush_r+0x38>
 8012150:	68ac      	ldr	r4, [r5, #8]
 8012152:	e7f1      	b.n	8012138 <_fflush_r+0x1c>
 8012154:	4b05      	ldr	r3, [pc, #20]	; (801216c <_fflush_r+0x50>)
 8012156:	429c      	cmp	r4, r3
 8012158:	bf08      	it	eq
 801215a:	68ec      	ldreq	r4, [r5, #12]
 801215c:	e7ec      	b.n	8012138 <_fflush_r+0x1c>
 801215e:	2000      	movs	r0, #0
 8012160:	bd38      	pop	{r3, r4, r5, pc}
 8012162:	bf00      	nop
 8012164:	08016328 	.word	0x08016328
 8012168:	08016348 	.word	0x08016348
 801216c:	08016308 	.word	0x08016308

08012170 <_cleanup_r>:
 8012170:	4901      	ldr	r1, [pc, #4]	; (8012178 <_cleanup_r+0x8>)
 8012172:	f000 b8a9 	b.w	80122c8 <_fwalk_reent>
 8012176:	bf00      	nop
 8012178:	0801211d 	.word	0x0801211d

0801217c <std.isra.0>:
 801217c:	2300      	movs	r3, #0
 801217e:	b510      	push	{r4, lr}
 8012180:	4604      	mov	r4, r0
 8012182:	6003      	str	r3, [r0, #0]
 8012184:	6043      	str	r3, [r0, #4]
 8012186:	6083      	str	r3, [r0, #8]
 8012188:	8181      	strh	r1, [r0, #12]
 801218a:	6643      	str	r3, [r0, #100]	; 0x64
 801218c:	81c2      	strh	r2, [r0, #14]
 801218e:	6103      	str	r3, [r0, #16]
 8012190:	6143      	str	r3, [r0, #20]
 8012192:	6183      	str	r3, [r0, #24]
 8012194:	4619      	mov	r1, r3
 8012196:	2208      	movs	r2, #8
 8012198:	305c      	adds	r0, #92	; 0x5c
 801219a:	f7fe f94f 	bl	801043c <memset>
 801219e:	4b05      	ldr	r3, [pc, #20]	; (80121b4 <std.isra.0+0x38>)
 80121a0:	6263      	str	r3, [r4, #36]	; 0x24
 80121a2:	4b05      	ldr	r3, [pc, #20]	; (80121b8 <std.isra.0+0x3c>)
 80121a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80121a6:	4b05      	ldr	r3, [pc, #20]	; (80121bc <std.isra.0+0x40>)
 80121a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80121aa:	4b05      	ldr	r3, [pc, #20]	; (80121c0 <std.isra.0+0x44>)
 80121ac:	6224      	str	r4, [r4, #32]
 80121ae:	6323      	str	r3, [r4, #48]	; 0x30
 80121b0:	bd10      	pop	{r4, pc}
 80121b2:	bf00      	nop
 80121b4:	08012f2d 	.word	0x08012f2d
 80121b8:	08012f4f 	.word	0x08012f4f
 80121bc:	08012f87 	.word	0x08012f87
 80121c0:	08012fab 	.word	0x08012fab

080121c4 <__sfmoreglue>:
 80121c4:	b570      	push	{r4, r5, r6, lr}
 80121c6:	1e4a      	subs	r2, r1, #1
 80121c8:	2568      	movs	r5, #104	; 0x68
 80121ca:	4355      	muls	r5, r2
 80121cc:	460e      	mov	r6, r1
 80121ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80121d2:	f7fe f989 	bl	80104e8 <_malloc_r>
 80121d6:	4604      	mov	r4, r0
 80121d8:	b140      	cbz	r0, 80121ec <__sfmoreglue+0x28>
 80121da:	2100      	movs	r1, #0
 80121dc:	e880 0042 	stmia.w	r0, {r1, r6}
 80121e0:	300c      	adds	r0, #12
 80121e2:	60a0      	str	r0, [r4, #8]
 80121e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80121e8:	f7fe f928 	bl	801043c <memset>
 80121ec:	4620      	mov	r0, r4
 80121ee:	bd70      	pop	{r4, r5, r6, pc}

080121f0 <__sinit>:
 80121f0:	6983      	ldr	r3, [r0, #24]
 80121f2:	b510      	push	{r4, lr}
 80121f4:	4604      	mov	r4, r0
 80121f6:	bb33      	cbnz	r3, 8012246 <__sinit+0x56>
 80121f8:	6483      	str	r3, [r0, #72]	; 0x48
 80121fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80121fc:	6503      	str	r3, [r0, #80]	; 0x50
 80121fe:	4b12      	ldr	r3, [pc, #72]	; (8012248 <__sinit+0x58>)
 8012200:	4a12      	ldr	r2, [pc, #72]	; (801224c <__sinit+0x5c>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	6282      	str	r2, [r0, #40]	; 0x28
 8012206:	4298      	cmp	r0, r3
 8012208:	bf04      	itt	eq
 801220a:	2301      	moveq	r3, #1
 801220c:	6183      	streq	r3, [r0, #24]
 801220e:	f000 f81f 	bl	8012250 <__sfp>
 8012212:	6060      	str	r0, [r4, #4]
 8012214:	4620      	mov	r0, r4
 8012216:	f000 f81b 	bl	8012250 <__sfp>
 801221a:	60a0      	str	r0, [r4, #8]
 801221c:	4620      	mov	r0, r4
 801221e:	f000 f817 	bl	8012250 <__sfp>
 8012222:	2200      	movs	r2, #0
 8012224:	60e0      	str	r0, [r4, #12]
 8012226:	2104      	movs	r1, #4
 8012228:	6860      	ldr	r0, [r4, #4]
 801222a:	f7ff ffa7 	bl	801217c <std.isra.0>
 801222e:	2201      	movs	r2, #1
 8012230:	2109      	movs	r1, #9
 8012232:	68a0      	ldr	r0, [r4, #8]
 8012234:	f7ff ffa2 	bl	801217c <std.isra.0>
 8012238:	2202      	movs	r2, #2
 801223a:	2112      	movs	r1, #18
 801223c:	68e0      	ldr	r0, [r4, #12]
 801223e:	f7ff ff9d 	bl	801217c <std.isra.0>
 8012242:	2301      	movs	r3, #1
 8012244:	61a3      	str	r3, [r4, #24]
 8012246:	bd10      	pop	{r4, pc}
 8012248:	08016368 	.word	0x08016368
 801224c:	08012171 	.word	0x08012171

08012250 <__sfp>:
 8012250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012252:	4b1c      	ldr	r3, [pc, #112]	; (80122c4 <__sfp+0x74>)
 8012254:	681e      	ldr	r6, [r3, #0]
 8012256:	69b3      	ldr	r3, [r6, #24]
 8012258:	4607      	mov	r7, r0
 801225a:	b913      	cbnz	r3, 8012262 <__sfp+0x12>
 801225c:	4630      	mov	r0, r6
 801225e:	f7ff ffc7 	bl	80121f0 <__sinit>
 8012262:	3648      	adds	r6, #72	; 0x48
 8012264:	68b4      	ldr	r4, [r6, #8]
 8012266:	6873      	ldr	r3, [r6, #4]
 8012268:	3b01      	subs	r3, #1
 801226a:	d503      	bpl.n	8012274 <__sfp+0x24>
 801226c:	6833      	ldr	r3, [r6, #0]
 801226e:	b133      	cbz	r3, 801227e <__sfp+0x2e>
 8012270:	6836      	ldr	r6, [r6, #0]
 8012272:	e7f7      	b.n	8012264 <__sfp+0x14>
 8012274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012278:	b16d      	cbz	r5, 8012296 <__sfp+0x46>
 801227a:	3468      	adds	r4, #104	; 0x68
 801227c:	e7f4      	b.n	8012268 <__sfp+0x18>
 801227e:	2104      	movs	r1, #4
 8012280:	4638      	mov	r0, r7
 8012282:	f7ff ff9f 	bl	80121c4 <__sfmoreglue>
 8012286:	6030      	str	r0, [r6, #0]
 8012288:	2800      	cmp	r0, #0
 801228a:	d1f1      	bne.n	8012270 <__sfp+0x20>
 801228c:	230c      	movs	r3, #12
 801228e:	603b      	str	r3, [r7, #0]
 8012290:	4604      	mov	r4, r0
 8012292:	4620      	mov	r0, r4
 8012294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801229a:	81e3      	strh	r3, [r4, #14]
 801229c:	2301      	movs	r3, #1
 801229e:	81a3      	strh	r3, [r4, #12]
 80122a0:	6665      	str	r5, [r4, #100]	; 0x64
 80122a2:	6025      	str	r5, [r4, #0]
 80122a4:	60a5      	str	r5, [r4, #8]
 80122a6:	6065      	str	r5, [r4, #4]
 80122a8:	6125      	str	r5, [r4, #16]
 80122aa:	6165      	str	r5, [r4, #20]
 80122ac:	61a5      	str	r5, [r4, #24]
 80122ae:	2208      	movs	r2, #8
 80122b0:	4629      	mov	r1, r5
 80122b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80122b6:	f7fe f8c1 	bl	801043c <memset>
 80122ba:	6365      	str	r5, [r4, #52]	; 0x34
 80122bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80122be:	64a5      	str	r5, [r4, #72]	; 0x48
 80122c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80122c2:	e7e6      	b.n	8012292 <__sfp+0x42>
 80122c4:	08016368 	.word	0x08016368

080122c8 <_fwalk_reent>:
 80122c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122cc:	4680      	mov	r8, r0
 80122ce:	4689      	mov	r9, r1
 80122d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80122d4:	2600      	movs	r6, #0
 80122d6:	b914      	cbnz	r4, 80122de <_fwalk_reent+0x16>
 80122d8:	4630      	mov	r0, r6
 80122da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122de:	68a5      	ldr	r5, [r4, #8]
 80122e0:	6867      	ldr	r7, [r4, #4]
 80122e2:	3f01      	subs	r7, #1
 80122e4:	d501      	bpl.n	80122ea <_fwalk_reent+0x22>
 80122e6:	6824      	ldr	r4, [r4, #0]
 80122e8:	e7f5      	b.n	80122d6 <_fwalk_reent+0xe>
 80122ea:	89ab      	ldrh	r3, [r5, #12]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d907      	bls.n	8012300 <_fwalk_reent+0x38>
 80122f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80122f4:	3301      	adds	r3, #1
 80122f6:	d003      	beq.n	8012300 <_fwalk_reent+0x38>
 80122f8:	4629      	mov	r1, r5
 80122fa:	4640      	mov	r0, r8
 80122fc:	47c8      	blx	r9
 80122fe:	4306      	orrs	r6, r0
 8012300:	3568      	adds	r5, #104	; 0x68
 8012302:	e7ee      	b.n	80122e2 <_fwalk_reent+0x1a>

08012304 <_localeconv_r>:
 8012304:	4b04      	ldr	r3, [pc, #16]	; (8012318 <_localeconv_r+0x14>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	6a18      	ldr	r0, [r3, #32]
 801230a:	4b04      	ldr	r3, [pc, #16]	; (801231c <_localeconv_r+0x18>)
 801230c:	2800      	cmp	r0, #0
 801230e:	bf08      	it	eq
 8012310:	4618      	moveq	r0, r3
 8012312:	30f0      	adds	r0, #240	; 0xf0
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	200002e8 	.word	0x200002e8
 801231c:	2000017c 	.word	0x2000017c

08012320 <__swhatbuf_r>:
 8012320:	b570      	push	{r4, r5, r6, lr}
 8012322:	460e      	mov	r6, r1
 8012324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012328:	2900      	cmp	r1, #0
 801232a:	b090      	sub	sp, #64	; 0x40
 801232c:	4614      	mov	r4, r2
 801232e:	461d      	mov	r5, r3
 8012330:	da07      	bge.n	8012342 <__swhatbuf_r+0x22>
 8012332:	2300      	movs	r3, #0
 8012334:	602b      	str	r3, [r5, #0]
 8012336:	89b3      	ldrh	r3, [r6, #12]
 8012338:	061a      	lsls	r2, r3, #24
 801233a:	d410      	bmi.n	801235e <__swhatbuf_r+0x3e>
 801233c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012340:	e00e      	b.n	8012360 <__swhatbuf_r+0x40>
 8012342:	aa01      	add	r2, sp, #4
 8012344:	f000 fe58 	bl	8012ff8 <_fstat_r>
 8012348:	2800      	cmp	r0, #0
 801234a:	dbf2      	blt.n	8012332 <__swhatbuf_r+0x12>
 801234c:	9a02      	ldr	r2, [sp, #8]
 801234e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012352:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012356:	425a      	negs	r2, r3
 8012358:	415a      	adcs	r2, r3
 801235a:	602a      	str	r2, [r5, #0]
 801235c:	e7ee      	b.n	801233c <__swhatbuf_r+0x1c>
 801235e:	2340      	movs	r3, #64	; 0x40
 8012360:	2000      	movs	r0, #0
 8012362:	6023      	str	r3, [r4, #0]
 8012364:	b010      	add	sp, #64	; 0x40
 8012366:	bd70      	pop	{r4, r5, r6, pc}

08012368 <__smakebuf_r>:
 8012368:	898b      	ldrh	r3, [r1, #12]
 801236a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801236c:	079d      	lsls	r5, r3, #30
 801236e:	4606      	mov	r6, r0
 8012370:	460c      	mov	r4, r1
 8012372:	d507      	bpl.n	8012384 <__smakebuf_r+0x1c>
 8012374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012378:	6023      	str	r3, [r4, #0]
 801237a:	6123      	str	r3, [r4, #16]
 801237c:	2301      	movs	r3, #1
 801237e:	6163      	str	r3, [r4, #20]
 8012380:	b002      	add	sp, #8
 8012382:	bd70      	pop	{r4, r5, r6, pc}
 8012384:	ab01      	add	r3, sp, #4
 8012386:	466a      	mov	r2, sp
 8012388:	f7ff ffca 	bl	8012320 <__swhatbuf_r>
 801238c:	9900      	ldr	r1, [sp, #0]
 801238e:	4605      	mov	r5, r0
 8012390:	4630      	mov	r0, r6
 8012392:	f7fe f8a9 	bl	80104e8 <_malloc_r>
 8012396:	b948      	cbnz	r0, 80123ac <__smakebuf_r+0x44>
 8012398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801239c:	059a      	lsls	r2, r3, #22
 801239e:	d4ef      	bmi.n	8012380 <__smakebuf_r+0x18>
 80123a0:	f023 0303 	bic.w	r3, r3, #3
 80123a4:	f043 0302 	orr.w	r3, r3, #2
 80123a8:	81a3      	strh	r3, [r4, #12]
 80123aa:	e7e3      	b.n	8012374 <__smakebuf_r+0xc>
 80123ac:	4b0d      	ldr	r3, [pc, #52]	; (80123e4 <__smakebuf_r+0x7c>)
 80123ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80123b0:	89a3      	ldrh	r3, [r4, #12]
 80123b2:	6020      	str	r0, [r4, #0]
 80123b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123b8:	81a3      	strh	r3, [r4, #12]
 80123ba:	9b00      	ldr	r3, [sp, #0]
 80123bc:	6163      	str	r3, [r4, #20]
 80123be:	9b01      	ldr	r3, [sp, #4]
 80123c0:	6120      	str	r0, [r4, #16]
 80123c2:	b15b      	cbz	r3, 80123dc <__smakebuf_r+0x74>
 80123c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123c8:	4630      	mov	r0, r6
 80123ca:	f000 fe27 	bl	801301c <_isatty_r>
 80123ce:	b128      	cbz	r0, 80123dc <__smakebuf_r+0x74>
 80123d0:	89a3      	ldrh	r3, [r4, #12]
 80123d2:	f023 0303 	bic.w	r3, r3, #3
 80123d6:	f043 0301 	orr.w	r3, r3, #1
 80123da:	81a3      	strh	r3, [r4, #12]
 80123dc:	89a3      	ldrh	r3, [r4, #12]
 80123de:	431d      	orrs	r5, r3
 80123e0:	81a5      	strh	r5, [r4, #12]
 80123e2:	e7cd      	b.n	8012380 <__smakebuf_r+0x18>
 80123e4:	08012171 	.word	0x08012171

080123e8 <memcpy>:
 80123e8:	b510      	push	{r4, lr}
 80123ea:	1e43      	subs	r3, r0, #1
 80123ec:	440a      	add	r2, r1
 80123ee:	4291      	cmp	r1, r2
 80123f0:	d100      	bne.n	80123f4 <memcpy+0xc>
 80123f2:	bd10      	pop	{r4, pc}
 80123f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123fc:	e7f7      	b.n	80123ee <memcpy+0x6>

080123fe <__malloc_lock>:
 80123fe:	4770      	bx	lr

08012400 <__malloc_unlock>:
 8012400:	4770      	bx	lr

08012402 <_Balloc>:
 8012402:	b570      	push	{r4, r5, r6, lr}
 8012404:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012406:	4604      	mov	r4, r0
 8012408:	460e      	mov	r6, r1
 801240a:	b93d      	cbnz	r5, 801241c <_Balloc+0x1a>
 801240c:	2010      	movs	r0, #16
 801240e:	f7fd fff3 	bl	80103f8 <malloc>
 8012412:	6260      	str	r0, [r4, #36]	; 0x24
 8012414:	6045      	str	r5, [r0, #4]
 8012416:	6085      	str	r5, [r0, #8]
 8012418:	6005      	str	r5, [r0, #0]
 801241a:	60c5      	str	r5, [r0, #12]
 801241c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801241e:	68eb      	ldr	r3, [r5, #12]
 8012420:	b183      	cbz	r3, 8012444 <_Balloc+0x42>
 8012422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801242a:	b9b8      	cbnz	r0, 801245c <_Balloc+0x5a>
 801242c:	2101      	movs	r1, #1
 801242e:	fa01 f506 	lsl.w	r5, r1, r6
 8012432:	1d6a      	adds	r2, r5, #5
 8012434:	0092      	lsls	r2, r2, #2
 8012436:	4620      	mov	r0, r4
 8012438:	f000 fab4 	bl	80129a4 <_calloc_r>
 801243c:	b160      	cbz	r0, 8012458 <_Balloc+0x56>
 801243e:	6046      	str	r6, [r0, #4]
 8012440:	6085      	str	r5, [r0, #8]
 8012442:	e00e      	b.n	8012462 <_Balloc+0x60>
 8012444:	2221      	movs	r2, #33	; 0x21
 8012446:	2104      	movs	r1, #4
 8012448:	4620      	mov	r0, r4
 801244a:	f000 faab 	bl	80129a4 <_calloc_r>
 801244e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012450:	60e8      	str	r0, [r5, #12]
 8012452:	68db      	ldr	r3, [r3, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d1e4      	bne.n	8012422 <_Balloc+0x20>
 8012458:	2000      	movs	r0, #0
 801245a:	bd70      	pop	{r4, r5, r6, pc}
 801245c:	6802      	ldr	r2, [r0, #0]
 801245e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012462:	2300      	movs	r3, #0
 8012464:	6103      	str	r3, [r0, #16]
 8012466:	60c3      	str	r3, [r0, #12]
 8012468:	bd70      	pop	{r4, r5, r6, pc}

0801246a <_Bfree>:
 801246a:	b570      	push	{r4, r5, r6, lr}
 801246c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801246e:	4606      	mov	r6, r0
 8012470:	460d      	mov	r5, r1
 8012472:	b93c      	cbnz	r4, 8012484 <_Bfree+0x1a>
 8012474:	2010      	movs	r0, #16
 8012476:	f7fd ffbf 	bl	80103f8 <malloc>
 801247a:	6270      	str	r0, [r6, #36]	; 0x24
 801247c:	6044      	str	r4, [r0, #4]
 801247e:	6084      	str	r4, [r0, #8]
 8012480:	6004      	str	r4, [r0, #0]
 8012482:	60c4      	str	r4, [r0, #12]
 8012484:	b13d      	cbz	r5, 8012496 <_Bfree+0x2c>
 8012486:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012488:	686a      	ldr	r2, [r5, #4]
 801248a:	68db      	ldr	r3, [r3, #12]
 801248c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012490:	6029      	str	r1, [r5, #0]
 8012492:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012496:	bd70      	pop	{r4, r5, r6, pc}

08012498 <__multadd>:
 8012498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801249c:	690d      	ldr	r5, [r1, #16]
 801249e:	461f      	mov	r7, r3
 80124a0:	4606      	mov	r6, r0
 80124a2:	460c      	mov	r4, r1
 80124a4:	f101 0e14 	add.w	lr, r1, #20
 80124a8:	2300      	movs	r3, #0
 80124aa:	f8de 0000 	ldr.w	r0, [lr]
 80124ae:	b281      	uxth	r1, r0
 80124b0:	fb02 7101 	mla	r1, r2, r1, r7
 80124b4:	0c0f      	lsrs	r7, r1, #16
 80124b6:	0c00      	lsrs	r0, r0, #16
 80124b8:	fb02 7000 	mla	r0, r2, r0, r7
 80124bc:	b289      	uxth	r1, r1
 80124be:	3301      	adds	r3, #1
 80124c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80124c4:	429d      	cmp	r5, r3
 80124c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80124ca:	f84e 1b04 	str.w	r1, [lr], #4
 80124ce:	dcec      	bgt.n	80124aa <__multadd+0x12>
 80124d0:	b1d7      	cbz	r7, 8012508 <__multadd+0x70>
 80124d2:	68a3      	ldr	r3, [r4, #8]
 80124d4:	429d      	cmp	r5, r3
 80124d6:	db12      	blt.n	80124fe <__multadd+0x66>
 80124d8:	6861      	ldr	r1, [r4, #4]
 80124da:	4630      	mov	r0, r6
 80124dc:	3101      	adds	r1, #1
 80124de:	f7ff ff90 	bl	8012402 <_Balloc>
 80124e2:	6922      	ldr	r2, [r4, #16]
 80124e4:	3202      	adds	r2, #2
 80124e6:	f104 010c 	add.w	r1, r4, #12
 80124ea:	4680      	mov	r8, r0
 80124ec:	0092      	lsls	r2, r2, #2
 80124ee:	300c      	adds	r0, #12
 80124f0:	f7ff ff7a 	bl	80123e8 <memcpy>
 80124f4:	4621      	mov	r1, r4
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7ff ffb7 	bl	801246a <_Bfree>
 80124fc:	4644      	mov	r4, r8
 80124fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012502:	3501      	adds	r5, #1
 8012504:	615f      	str	r7, [r3, #20]
 8012506:	6125      	str	r5, [r4, #16]
 8012508:	4620      	mov	r0, r4
 801250a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801250e <__hi0bits>:
 801250e:	0c02      	lsrs	r2, r0, #16
 8012510:	0412      	lsls	r2, r2, #16
 8012512:	4603      	mov	r3, r0
 8012514:	b9b2      	cbnz	r2, 8012544 <__hi0bits+0x36>
 8012516:	0403      	lsls	r3, r0, #16
 8012518:	2010      	movs	r0, #16
 801251a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801251e:	bf04      	itt	eq
 8012520:	021b      	lsleq	r3, r3, #8
 8012522:	3008      	addeq	r0, #8
 8012524:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012528:	bf04      	itt	eq
 801252a:	011b      	lsleq	r3, r3, #4
 801252c:	3004      	addeq	r0, #4
 801252e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012532:	bf04      	itt	eq
 8012534:	009b      	lsleq	r3, r3, #2
 8012536:	3002      	addeq	r0, #2
 8012538:	2b00      	cmp	r3, #0
 801253a:	db06      	blt.n	801254a <__hi0bits+0x3c>
 801253c:	005b      	lsls	r3, r3, #1
 801253e:	d503      	bpl.n	8012548 <__hi0bits+0x3a>
 8012540:	3001      	adds	r0, #1
 8012542:	4770      	bx	lr
 8012544:	2000      	movs	r0, #0
 8012546:	e7e8      	b.n	801251a <__hi0bits+0xc>
 8012548:	2020      	movs	r0, #32
 801254a:	4770      	bx	lr

0801254c <__lo0bits>:
 801254c:	6803      	ldr	r3, [r0, #0]
 801254e:	f013 0207 	ands.w	r2, r3, #7
 8012552:	4601      	mov	r1, r0
 8012554:	d00b      	beq.n	801256e <__lo0bits+0x22>
 8012556:	07da      	lsls	r2, r3, #31
 8012558:	d423      	bmi.n	80125a2 <__lo0bits+0x56>
 801255a:	0798      	lsls	r0, r3, #30
 801255c:	bf49      	itett	mi
 801255e:	085b      	lsrmi	r3, r3, #1
 8012560:	089b      	lsrpl	r3, r3, #2
 8012562:	2001      	movmi	r0, #1
 8012564:	600b      	strmi	r3, [r1, #0]
 8012566:	bf5c      	itt	pl
 8012568:	600b      	strpl	r3, [r1, #0]
 801256a:	2002      	movpl	r0, #2
 801256c:	4770      	bx	lr
 801256e:	b298      	uxth	r0, r3
 8012570:	b9a8      	cbnz	r0, 801259e <__lo0bits+0x52>
 8012572:	0c1b      	lsrs	r3, r3, #16
 8012574:	2010      	movs	r0, #16
 8012576:	f013 0fff 	tst.w	r3, #255	; 0xff
 801257a:	bf04      	itt	eq
 801257c:	0a1b      	lsreq	r3, r3, #8
 801257e:	3008      	addeq	r0, #8
 8012580:	071a      	lsls	r2, r3, #28
 8012582:	bf04      	itt	eq
 8012584:	091b      	lsreq	r3, r3, #4
 8012586:	3004      	addeq	r0, #4
 8012588:	079a      	lsls	r2, r3, #30
 801258a:	bf04      	itt	eq
 801258c:	089b      	lsreq	r3, r3, #2
 801258e:	3002      	addeq	r0, #2
 8012590:	07da      	lsls	r2, r3, #31
 8012592:	d402      	bmi.n	801259a <__lo0bits+0x4e>
 8012594:	085b      	lsrs	r3, r3, #1
 8012596:	d006      	beq.n	80125a6 <__lo0bits+0x5a>
 8012598:	3001      	adds	r0, #1
 801259a:	600b      	str	r3, [r1, #0]
 801259c:	4770      	bx	lr
 801259e:	4610      	mov	r0, r2
 80125a0:	e7e9      	b.n	8012576 <__lo0bits+0x2a>
 80125a2:	2000      	movs	r0, #0
 80125a4:	4770      	bx	lr
 80125a6:	2020      	movs	r0, #32
 80125a8:	4770      	bx	lr

080125aa <__i2b>:
 80125aa:	b510      	push	{r4, lr}
 80125ac:	460c      	mov	r4, r1
 80125ae:	2101      	movs	r1, #1
 80125b0:	f7ff ff27 	bl	8012402 <_Balloc>
 80125b4:	2201      	movs	r2, #1
 80125b6:	6144      	str	r4, [r0, #20]
 80125b8:	6102      	str	r2, [r0, #16]
 80125ba:	bd10      	pop	{r4, pc}

080125bc <__multiply>:
 80125bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c0:	4614      	mov	r4, r2
 80125c2:	690a      	ldr	r2, [r1, #16]
 80125c4:	6923      	ldr	r3, [r4, #16]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	bfb8      	it	lt
 80125ca:	460b      	movlt	r3, r1
 80125cc:	4689      	mov	r9, r1
 80125ce:	bfbc      	itt	lt
 80125d0:	46a1      	movlt	r9, r4
 80125d2:	461c      	movlt	r4, r3
 80125d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80125d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80125dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80125e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80125e4:	eb07 060a 	add.w	r6, r7, sl
 80125e8:	429e      	cmp	r6, r3
 80125ea:	bfc8      	it	gt
 80125ec:	3101      	addgt	r1, #1
 80125ee:	f7ff ff08 	bl	8012402 <_Balloc>
 80125f2:	f100 0514 	add.w	r5, r0, #20
 80125f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80125fa:	462b      	mov	r3, r5
 80125fc:	2200      	movs	r2, #0
 80125fe:	4543      	cmp	r3, r8
 8012600:	d316      	bcc.n	8012630 <__multiply+0x74>
 8012602:	f104 0214 	add.w	r2, r4, #20
 8012606:	f109 0114 	add.w	r1, r9, #20
 801260a:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801260e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012612:	9301      	str	r3, [sp, #4]
 8012614:	9c01      	ldr	r4, [sp, #4]
 8012616:	4294      	cmp	r4, r2
 8012618:	4613      	mov	r3, r2
 801261a:	d80c      	bhi.n	8012636 <__multiply+0x7a>
 801261c:	2e00      	cmp	r6, #0
 801261e:	dd03      	ble.n	8012628 <__multiply+0x6c>
 8012620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012624:	2b00      	cmp	r3, #0
 8012626:	d054      	beq.n	80126d2 <__multiply+0x116>
 8012628:	6106      	str	r6, [r0, #16]
 801262a:	b003      	add	sp, #12
 801262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012630:	f843 2b04 	str.w	r2, [r3], #4
 8012634:	e7e3      	b.n	80125fe <__multiply+0x42>
 8012636:	f8b3 a000 	ldrh.w	sl, [r3]
 801263a:	3204      	adds	r2, #4
 801263c:	f1ba 0f00 	cmp.w	sl, #0
 8012640:	d020      	beq.n	8012684 <__multiply+0xc8>
 8012642:	46ae      	mov	lr, r5
 8012644:	4689      	mov	r9, r1
 8012646:	f04f 0c00 	mov.w	ip, #0
 801264a:	f859 4b04 	ldr.w	r4, [r9], #4
 801264e:	f8be b000 	ldrh.w	fp, [lr]
 8012652:	b2a3      	uxth	r3, r4
 8012654:	fb0a b303 	mla	r3, sl, r3, fp
 8012658:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801265c:	f8de 4000 	ldr.w	r4, [lr]
 8012660:	4463      	add	r3, ip
 8012662:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8012666:	fb0a c40b 	mla	r4, sl, fp, ip
 801266a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801266e:	b29b      	uxth	r3, r3
 8012670:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012674:	454f      	cmp	r7, r9
 8012676:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801267a:	f84e 3b04 	str.w	r3, [lr], #4
 801267e:	d8e4      	bhi.n	801264a <__multiply+0x8e>
 8012680:	f8ce c000 	str.w	ip, [lr]
 8012684:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8012688:	f1b9 0f00 	cmp.w	r9, #0
 801268c:	d01f      	beq.n	80126ce <__multiply+0x112>
 801268e:	682b      	ldr	r3, [r5, #0]
 8012690:	46ae      	mov	lr, r5
 8012692:	468c      	mov	ip, r1
 8012694:	f04f 0a00 	mov.w	sl, #0
 8012698:	f8bc 4000 	ldrh.w	r4, [ip]
 801269c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80126a0:	fb09 b404 	mla	r4, r9, r4, fp
 80126a4:	44a2      	add	sl, r4
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80126ac:	f84e 3b04 	str.w	r3, [lr], #4
 80126b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80126b4:	f8be 4000 	ldrh.w	r4, [lr]
 80126b8:	0c1b      	lsrs	r3, r3, #16
 80126ba:	fb09 4303 	mla	r3, r9, r3, r4
 80126be:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80126c2:	4567      	cmp	r7, ip
 80126c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80126c8:	d8e6      	bhi.n	8012698 <__multiply+0xdc>
 80126ca:	f8ce 3000 	str.w	r3, [lr]
 80126ce:	3504      	adds	r5, #4
 80126d0:	e7a0      	b.n	8012614 <__multiply+0x58>
 80126d2:	3e01      	subs	r6, #1
 80126d4:	e7a2      	b.n	801261c <__multiply+0x60>
	...

080126d8 <__pow5mult>:
 80126d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126dc:	4615      	mov	r5, r2
 80126de:	f012 0203 	ands.w	r2, r2, #3
 80126e2:	4606      	mov	r6, r0
 80126e4:	460f      	mov	r7, r1
 80126e6:	d007      	beq.n	80126f8 <__pow5mult+0x20>
 80126e8:	3a01      	subs	r2, #1
 80126ea:	4c21      	ldr	r4, [pc, #132]	; (8012770 <__pow5mult+0x98>)
 80126ec:	2300      	movs	r3, #0
 80126ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80126f2:	f7ff fed1 	bl	8012498 <__multadd>
 80126f6:	4607      	mov	r7, r0
 80126f8:	10ad      	asrs	r5, r5, #2
 80126fa:	d035      	beq.n	8012768 <__pow5mult+0x90>
 80126fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80126fe:	b93c      	cbnz	r4, 8012710 <__pow5mult+0x38>
 8012700:	2010      	movs	r0, #16
 8012702:	f7fd fe79 	bl	80103f8 <malloc>
 8012706:	6270      	str	r0, [r6, #36]	; 0x24
 8012708:	6044      	str	r4, [r0, #4]
 801270a:	6084      	str	r4, [r0, #8]
 801270c:	6004      	str	r4, [r0, #0]
 801270e:	60c4      	str	r4, [r0, #12]
 8012710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012718:	b94c      	cbnz	r4, 801272e <__pow5mult+0x56>
 801271a:	f240 2171 	movw	r1, #625	; 0x271
 801271e:	4630      	mov	r0, r6
 8012720:	f7ff ff43 	bl	80125aa <__i2b>
 8012724:	2300      	movs	r3, #0
 8012726:	f8c8 0008 	str.w	r0, [r8, #8]
 801272a:	4604      	mov	r4, r0
 801272c:	6003      	str	r3, [r0, #0]
 801272e:	f04f 0800 	mov.w	r8, #0
 8012732:	07eb      	lsls	r3, r5, #31
 8012734:	d50a      	bpl.n	801274c <__pow5mult+0x74>
 8012736:	4639      	mov	r1, r7
 8012738:	4622      	mov	r2, r4
 801273a:	4630      	mov	r0, r6
 801273c:	f7ff ff3e 	bl	80125bc <__multiply>
 8012740:	4639      	mov	r1, r7
 8012742:	4681      	mov	r9, r0
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff fe90 	bl	801246a <_Bfree>
 801274a:	464f      	mov	r7, r9
 801274c:	106d      	asrs	r5, r5, #1
 801274e:	d00b      	beq.n	8012768 <__pow5mult+0x90>
 8012750:	6820      	ldr	r0, [r4, #0]
 8012752:	b938      	cbnz	r0, 8012764 <__pow5mult+0x8c>
 8012754:	4622      	mov	r2, r4
 8012756:	4621      	mov	r1, r4
 8012758:	4630      	mov	r0, r6
 801275a:	f7ff ff2f 	bl	80125bc <__multiply>
 801275e:	6020      	str	r0, [r4, #0]
 8012760:	f8c0 8000 	str.w	r8, [r0]
 8012764:	4604      	mov	r4, r0
 8012766:	e7e4      	b.n	8012732 <__pow5mult+0x5a>
 8012768:	4638      	mov	r0, r7
 801276a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276e:	bf00      	nop
 8012770:	08016460 	.word	0x08016460

08012774 <__lshift>:
 8012774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012778:	460c      	mov	r4, r1
 801277a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801277e:	6923      	ldr	r3, [r4, #16]
 8012780:	6849      	ldr	r1, [r1, #4]
 8012782:	eb0a 0903 	add.w	r9, sl, r3
 8012786:	68a3      	ldr	r3, [r4, #8]
 8012788:	4607      	mov	r7, r0
 801278a:	4616      	mov	r6, r2
 801278c:	f109 0501 	add.w	r5, r9, #1
 8012790:	42ab      	cmp	r3, r5
 8012792:	db31      	blt.n	80127f8 <__lshift+0x84>
 8012794:	4638      	mov	r0, r7
 8012796:	f7ff fe34 	bl	8012402 <_Balloc>
 801279a:	2200      	movs	r2, #0
 801279c:	4680      	mov	r8, r0
 801279e:	f100 0314 	add.w	r3, r0, #20
 80127a2:	4611      	mov	r1, r2
 80127a4:	4552      	cmp	r2, sl
 80127a6:	db2a      	blt.n	80127fe <__lshift+0x8a>
 80127a8:	6920      	ldr	r0, [r4, #16]
 80127aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80127ae:	f104 0114 	add.w	r1, r4, #20
 80127b2:	f016 021f 	ands.w	r2, r6, #31
 80127b6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80127ba:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80127be:	d022      	beq.n	8012806 <__lshift+0x92>
 80127c0:	f1c2 0c20 	rsb	ip, r2, #32
 80127c4:	2000      	movs	r0, #0
 80127c6:	680e      	ldr	r6, [r1, #0]
 80127c8:	4096      	lsls	r6, r2
 80127ca:	4330      	orrs	r0, r6
 80127cc:	f843 0b04 	str.w	r0, [r3], #4
 80127d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80127d4:	458e      	cmp	lr, r1
 80127d6:	fa20 f00c 	lsr.w	r0, r0, ip
 80127da:	d8f4      	bhi.n	80127c6 <__lshift+0x52>
 80127dc:	6018      	str	r0, [r3, #0]
 80127de:	b108      	cbz	r0, 80127e4 <__lshift+0x70>
 80127e0:	f109 0502 	add.w	r5, r9, #2
 80127e4:	3d01      	subs	r5, #1
 80127e6:	4638      	mov	r0, r7
 80127e8:	f8c8 5010 	str.w	r5, [r8, #16]
 80127ec:	4621      	mov	r1, r4
 80127ee:	f7ff fe3c 	bl	801246a <_Bfree>
 80127f2:	4640      	mov	r0, r8
 80127f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f8:	3101      	adds	r1, #1
 80127fa:	005b      	lsls	r3, r3, #1
 80127fc:	e7c8      	b.n	8012790 <__lshift+0x1c>
 80127fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012802:	3201      	adds	r2, #1
 8012804:	e7ce      	b.n	80127a4 <__lshift+0x30>
 8012806:	3b04      	subs	r3, #4
 8012808:	f851 2b04 	ldr.w	r2, [r1], #4
 801280c:	f843 2f04 	str.w	r2, [r3, #4]!
 8012810:	458e      	cmp	lr, r1
 8012812:	d8f9      	bhi.n	8012808 <__lshift+0x94>
 8012814:	e7e6      	b.n	80127e4 <__lshift+0x70>

08012816 <__mcmp>:
 8012816:	6903      	ldr	r3, [r0, #16]
 8012818:	690a      	ldr	r2, [r1, #16]
 801281a:	1a9b      	subs	r3, r3, r2
 801281c:	b530      	push	{r4, r5, lr}
 801281e:	d10c      	bne.n	801283a <__mcmp+0x24>
 8012820:	0092      	lsls	r2, r2, #2
 8012822:	3014      	adds	r0, #20
 8012824:	3114      	adds	r1, #20
 8012826:	1884      	adds	r4, r0, r2
 8012828:	4411      	add	r1, r2
 801282a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801282e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012832:	4295      	cmp	r5, r2
 8012834:	d003      	beq.n	801283e <__mcmp+0x28>
 8012836:	d305      	bcc.n	8012844 <__mcmp+0x2e>
 8012838:	2301      	movs	r3, #1
 801283a:	4618      	mov	r0, r3
 801283c:	bd30      	pop	{r4, r5, pc}
 801283e:	42a0      	cmp	r0, r4
 8012840:	d3f3      	bcc.n	801282a <__mcmp+0x14>
 8012842:	e7fa      	b.n	801283a <__mcmp+0x24>
 8012844:	f04f 33ff 	mov.w	r3, #4294967295
 8012848:	e7f7      	b.n	801283a <__mcmp+0x24>

0801284a <__mdiff>:
 801284a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801284e:	460d      	mov	r5, r1
 8012850:	4607      	mov	r7, r0
 8012852:	4611      	mov	r1, r2
 8012854:	4628      	mov	r0, r5
 8012856:	4614      	mov	r4, r2
 8012858:	f7ff ffdd 	bl	8012816 <__mcmp>
 801285c:	1e06      	subs	r6, r0, #0
 801285e:	d108      	bne.n	8012872 <__mdiff+0x28>
 8012860:	4631      	mov	r1, r6
 8012862:	4638      	mov	r0, r7
 8012864:	f7ff fdcd 	bl	8012402 <_Balloc>
 8012868:	2301      	movs	r3, #1
 801286a:	6103      	str	r3, [r0, #16]
 801286c:	6146      	str	r6, [r0, #20]
 801286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012872:	bfa4      	itt	ge
 8012874:	4623      	movge	r3, r4
 8012876:	462c      	movge	r4, r5
 8012878:	4638      	mov	r0, r7
 801287a:	6861      	ldr	r1, [r4, #4]
 801287c:	bfa6      	itte	ge
 801287e:	461d      	movge	r5, r3
 8012880:	2600      	movge	r6, #0
 8012882:	2601      	movlt	r6, #1
 8012884:	f7ff fdbd 	bl	8012402 <_Balloc>
 8012888:	692b      	ldr	r3, [r5, #16]
 801288a:	60c6      	str	r6, [r0, #12]
 801288c:	6926      	ldr	r6, [r4, #16]
 801288e:	f105 0914 	add.w	r9, r5, #20
 8012892:	f104 0214 	add.w	r2, r4, #20
 8012896:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801289a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801289e:	f100 0514 	add.w	r5, r0, #20
 80128a2:	f04f 0c00 	mov.w	ip, #0
 80128a6:	f852 ab04 	ldr.w	sl, [r2], #4
 80128aa:	f859 4b04 	ldr.w	r4, [r9], #4
 80128ae:	fa1c f18a 	uxtah	r1, ip, sl
 80128b2:	b2a3      	uxth	r3, r4
 80128b4:	1ac9      	subs	r1, r1, r3
 80128b6:	0c23      	lsrs	r3, r4, #16
 80128b8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80128bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80128c0:	b289      	uxth	r1, r1
 80128c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80128c6:	45c8      	cmp	r8, r9
 80128c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80128cc:	4696      	mov	lr, r2
 80128ce:	f845 3b04 	str.w	r3, [r5], #4
 80128d2:	d8e8      	bhi.n	80128a6 <__mdiff+0x5c>
 80128d4:	45be      	cmp	lr, r7
 80128d6:	d305      	bcc.n	80128e4 <__mdiff+0x9a>
 80128d8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80128dc:	b18b      	cbz	r3, 8012902 <__mdiff+0xb8>
 80128de:	6106      	str	r6, [r0, #16]
 80128e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128e4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80128e8:	fa1c f381 	uxtah	r3, ip, r1
 80128ec:	141a      	asrs	r2, r3, #16
 80128ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80128fc:	f845 3b04 	str.w	r3, [r5], #4
 8012900:	e7e8      	b.n	80128d4 <__mdiff+0x8a>
 8012902:	3e01      	subs	r6, #1
 8012904:	e7e8      	b.n	80128d8 <__mdiff+0x8e>

08012906 <__d2b>:
 8012906:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801290a:	460e      	mov	r6, r1
 801290c:	2101      	movs	r1, #1
 801290e:	ec59 8b10 	vmov	r8, r9, d0
 8012912:	4615      	mov	r5, r2
 8012914:	f7ff fd75 	bl	8012402 <_Balloc>
 8012918:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801291c:	4607      	mov	r7, r0
 801291e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012922:	bb34      	cbnz	r4, 8012972 <__d2b+0x6c>
 8012924:	9301      	str	r3, [sp, #4]
 8012926:	f1b8 0f00 	cmp.w	r8, #0
 801292a:	d027      	beq.n	801297c <__d2b+0x76>
 801292c:	a802      	add	r0, sp, #8
 801292e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8012932:	f7ff fe0b 	bl	801254c <__lo0bits>
 8012936:	9900      	ldr	r1, [sp, #0]
 8012938:	b1f0      	cbz	r0, 8012978 <__d2b+0x72>
 801293a:	9a01      	ldr	r2, [sp, #4]
 801293c:	f1c0 0320 	rsb	r3, r0, #32
 8012940:	fa02 f303 	lsl.w	r3, r2, r3
 8012944:	430b      	orrs	r3, r1
 8012946:	40c2      	lsrs	r2, r0
 8012948:	617b      	str	r3, [r7, #20]
 801294a:	9201      	str	r2, [sp, #4]
 801294c:	9b01      	ldr	r3, [sp, #4]
 801294e:	61bb      	str	r3, [r7, #24]
 8012950:	2b00      	cmp	r3, #0
 8012952:	bf14      	ite	ne
 8012954:	2102      	movne	r1, #2
 8012956:	2101      	moveq	r1, #1
 8012958:	6139      	str	r1, [r7, #16]
 801295a:	b1c4      	cbz	r4, 801298e <__d2b+0x88>
 801295c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012960:	4404      	add	r4, r0
 8012962:	6034      	str	r4, [r6, #0]
 8012964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012968:	6028      	str	r0, [r5, #0]
 801296a:	4638      	mov	r0, r7
 801296c:	b003      	add	sp, #12
 801296e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012976:	e7d5      	b.n	8012924 <__d2b+0x1e>
 8012978:	6179      	str	r1, [r7, #20]
 801297a:	e7e7      	b.n	801294c <__d2b+0x46>
 801297c:	a801      	add	r0, sp, #4
 801297e:	f7ff fde5 	bl	801254c <__lo0bits>
 8012982:	9b01      	ldr	r3, [sp, #4]
 8012984:	617b      	str	r3, [r7, #20]
 8012986:	2101      	movs	r1, #1
 8012988:	6139      	str	r1, [r7, #16]
 801298a:	3020      	adds	r0, #32
 801298c:	e7e5      	b.n	801295a <__d2b+0x54>
 801298e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012992:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012996:	6030      	str	r0, [r6, #0]
 8012998:	6918      	ldr	r0, [r3, #16]
 801299a:	f7ff fdb8 	bl	801250e <__hi0bits>
 801299e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80129a2:	e7e1      	b.n	8012968 <__d2b+0x62>

080129a4 <_calloc_r>:
 80129a4:	b538      	push	{r3, r4, r5, lr}
 80129a6:	fb02 f401 	mul.w	r4, r2, r1
 80129aa:	4621      	mov	r1, r4
 80129ac:	f7fd fd9c 	bl	80104e8 <_malloc_r>
 80129b0:	4605      	mov	r5, r0
 80129b2:	b118      	cbz	r0, 80129bc <_calloc_r+0x18>
 80129b4:	4622      	mov	r2, r4
 80129b6:	2100      	movs	r1, #0
 80129b8:	f7fd fd40 	bl	801043c <memset>
 80129bc:	4628      	mov	r0, r5
 80129be:	bd38      	pop	{r3, r4, r5, pc}

080129c0 <_realloc_r>:
 80129c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c2:	4607      	mov	r7, r0
 80129c4:	4614      	mov	r4, r2
 80129c6:	460e      	mov	r6, r1
 80129c8:	b921      	cbnz	r1, 80129d4 <_realloc_r+0x14>
 80129ca:	4611      	mov	r1, r2
 80129cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80129d0:	f7fd bd8a 	b.w	80104e8 <_malloc_r>
 80129d4:	b922      	cbnz	r2, 80129e0 <_realloc_r+0x20>
 80129d6:	f7fd fd39 	bl	801044c <_free_r>
 80129da:	4625      	mov	r5, r4
 80129dc:	4628      	mov	r0, r5
 80129de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129e0:	f000 fb58 	bl	8013094 <_malloc_usable_size_r>
 80129e4:	4284      	cmp	r4, r0
 80129e6:	d90f      	bls.n	8012a08 <_realloc_r+0x48>
 80129e8:	4621      	mov	r1, r4
 80129ea:	4638      	mov	r0, r7
 80129ec:	f7fd fd7c 	bl	80104e8 <_malloc_r>
 80129f0:	4605      	mov	r5, r0
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d0f2      	beq.n	80129dc <_realloc_r+0x1c>
 80129f6:	4631      	mov	r1, r6
 80129f8:	4622      	mov	r2, r4
 80129fa:	f7ff fcf5 	bl	80123e8 <memcpy>
 80129fe:	4631      	mov	r1, r6
 8012a00:	4638      	mov	r0, r7
 8012a02:	f7fd fd23 	bl	801044c <_free_r>
 8012a06:	e7e9      	b.n	80129dc <_realloc_r+0x1c>
 8012a08:	4635      	mov	r5, r6
 8012a0a:	e7e7      	b.n	80129dc <_realloc_r+0x1c>

08012a0c <__ssputs_r>:
 8012a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a10:	688e      	ldr	r6, [r1, #8]
 8012a12:	429e      	cmp	r6, r3
 8012a14:	4682      	mov	sl, r0
 8012a16:	460c      	mov	r4, r1
 8012a18:	4691      	mov	r9, r2
 8012a1a:	4698      	mov	r8, r3
 8012a1c:	d835      	bhi.n	8012a8a <__ssputs_r+0x7e>
 8012a1e:	898a      	ldrh	r2, [r1, #12]
 8012a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a24:	d031      	beq.n	8012a8a <__ssputs_r+0x7e>
 8012a26:	6825      	ldr	r5, [r4, #0]
 8012a28:	6909      	ldr	r1, [r1, #16]
 8012a2a:	1a6f      	subs	r7, r5, r1
 8012a2c:	6965      	ldr	r5, [r4, #20]
 8012a2e:	2302      	movs	r3, #2
 8012a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a34:	fb95 f5f3 	sdiv	r5, r5, r3
 8012a38:	f108 0301 	add.w	r3, r8, #1
 8012a3c:	443b      	add	r3, r7
 8012a3e:	429d      	cmp	r5, r3
 8012a40:	bf38      	it	cc
 8012a42:	461d      	movcc	r5, r3
 8012a44:	0553      	lsls	r3, r2, #21
 8012a46:	d531      	bpl.n	8012aac <__ssputs_r+0xa0>
 8012a48:	4629      	mov	r1, r5
 8012a4a:	f7fd fd4d 	bl	80104e8 <_malloc_r>
 8012a4e:	4606      	mov	r6, r0
 8012a50:	b950      	cbnz	r0, 8012a68 <__ssputs_r+0x5c>
 8012a52:	230c      	movs	r3, #12
 8012a54:	f8ca 3000 	str.w	r3, [sl]
 8012a58:	89a3      	ldrh	r3, [r4, #12]
 8012a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a5e:	81a3      	strh	r3, [r4, #12]
 8012a60:	f04f 30ff 	mov.w	r0, #4294967295
 8012a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a68:	463a      	mov	r2, r7
 8012a6a:	6921      	ldr	r1, [r4, #16]
 8012a6c:	f7ff fcbc 	bl	80123e8 <memcpy>
 8012a70:	89a3      	ldrh	r3, [r4, #12]
 8012a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a7a:	81a3      	strh	r3, [r4, #12]
 8012a7c:	6126      	str	r6, [r4, #16]
 8012a7e:	6165      	str	r5, [r4, #20]
 8012a80:	443e      	add	r6, r7
 8012a82:	1bed      	subs	r5, r5, r7
 8012a84:	6026      	str	r6, [r4, #0]
 8012a86:	60a5      	str	r5, [r4, #8]
 8012a88:	4646      	mov	r6, r8
 8012a8a:	4546      	cmp	r6, r8
 8012a8c:	bf28      	it	cs
 8012a8e:	4646      	movcs	r6, r8
 8012a90:	4632      	mov	r2, r6
 8012a92:	4649      	mov	r1, r9
 8012a94:	6820      	ldr	r0, [r4, #0]
 8012a96:	f000 fae3 	bl	8013060 <memmove>
 8012a9a:	68a3      	ldr	r3, [r4, #8]
 8012a9c:	1b9b      	subs	r3, r3, r6
 8012a9e:	60a3      	str	r3, [r4, #8]
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	441e      	add	r6, r3
 8012aa4:	6026      	str	r6, [r4, #0]
 8012aa6:	2000      	movs	r0, #0
 8012aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aac:	462a      	mov	r2, r5
 8012aae:	f7ff ff87 	bl	80129c0 <_realloc_r>
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	d1e1      	bne.n	8012a7c <__ssputs_r+0x70>
 8012ab8:	6921      	ldr	r1, [r4, #16]
 8012aba:	4650      	mov	r0, sl
 8012abc:	f7fd fcc6 	bl	801044c <_free_r>
 8012ac0:	e7c7      	b.n	8012a52 <__ssputs_r+0x46>
	...

08012ac4 <_svfiprintf_r>:
 8012ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac8:	b09d      	sub	sp, #116	; 0x74
 8012aca:	4680      	mov	r8, r0
 8012acc:	9303      	str	r3, [sp, #12]
 8012ace:	898b      	ldrh	r3, [r1, #12]
 8012ad0:	061c      	lsls	r4, r3, #24
 8012ad2:	460d      	mov	r5, r1
 8012ad4:	4616      	mov	r6, r2
 8012ad6:	d50f      	bpl.n	8012af8 <_svfiprintf_r+0x34>
 8012ad8:	690b      	ldr	r3, [r1, #16]
 8012ada:	b96b      	cbnz	r3, 8012af8 <_svfiprintf_r+0x34>
 8012adc:	2140      	movs	r1, #64	; 0x40
 8012ade:	f7fd fd03 	bl	80104e8 <_malloc_r>
 8012ae2:	6028      	str	r0, [r5, #0]
 8012ae4:	6128      	str	r0, [r5, #16]
 8012ae6:	b928      	cbnz	r0, 8012af4 <_svfiprintf_r+0x30>
 8012ae8:	230c      	movs	r3, #12
 8012aea:	f8c8 3000 	str.w	r3, [r8]
 8012aee:	f04f 30ff 	mov.w	r0, #4294967295
 8012af2:	e0c5      	b.n	8012c80 <_svfiprintf_r+0x1bc>
 8012af4:	2340      	movs	r3, #64	; 0x40
 8012af6:	616b      	str	r3, [r5, #20]
 8012af8:	2300      	movs	r3, #0
 8012afa:	9309      	str	r3, [sp, #36]	; 0x24
 8012afc:	2320      	movs	r3, #32
 8012afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b02:	2330      	movs	r3, #48	; 0x30
 8012b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b08:	f04f 0b01 	mov.w	fp, #1
 8012b0c:	4637      	mov	r7, r6
 8012b0e:	463c      	mov	r4, r7
 8012b10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d13c      	bne.n	8012b92 <_svfiprintf_r+0xce>
 8012b18:	ebb7 0a06 	subs.w	sl, r7, r6
 8012b1c:	d00b      	beq.n	8012b36 <_svfiprintf_r+0x72>
 8012b1e:	4653      	mov	r3, sl
 8012b20:	4632      	mov	r2, r6
 8012b22:	4629      	mov	r1, r5
 8012b24:	4640      	mov	r0, r8
 8012b26:	f7ff ff71 	bl	8012a0c <__ssputs_r>
 8012b2a:	3001      	adds	r0, #1
 8012b2c:	f000 80a3 	beq.w	8012c76 <_svfiprintf_r+0x1b2>
 8012b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b32:	4453      	add	r3, sl
 8012b34:	9309      	str	r3, [sp, #36]	; 0x24
 8012b36:	783b      	ldrb	r3, [r7, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f000 809c 	beq.w	8012c76 <_svfiprintf_r+0x1b2>
 8012b3e:	2300      	movs	r3, #0
 8012b40:	f04f 32ff 	mov.w	r2, #4294967295
 8012b44:	9304      	str	r3, [sp, #16]
 8012b46:	9307      	str	r3, [sp, #28]
 8012b48:	9205      	str	r2, [sp, #20]
 8012b4a:	9306      	str	r3, [sp, #24]
 8012b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b50:	931a      	str	r3, [sp, #104]	; 0x68
 8012b52:	2205      	movs	r2, #5
 8012b54:	7821      	ldrb	r1, [r4, #0]
 8012b56:	4850      	ldr	r0, [pc, #320]	; (8012c98 <_svfiprintf_r+0x1d4>)
 8012b58:	f7ed fb72 	bl	8000240 <memchr>
 8012b5c:	1c67      	adds	r7, r4, #1
 8012b5e:	9b04      	ldr	r3, [sp, #16]
 8012b60:	b9d8      	cbnz	r0, 8012b9a <_svfiprintf_r+0xd6>
 8012b62:	06d9      	lsls	r1, r3, #27
 8012b64:	bf44      	itt	mi
 8012b66:	2220      	movmi	r2, #32
 8012b68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b6c:	071a      	lsls	r2, r3, #28
 8012b6e:	bf44      	itt	mi
 8012b70:	222b      	movmi	r2, #43	; 0x2b
 8012b72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b76:	7822      	ldrb	r2, [r4, #0]
 8012b78:	2a2a      	cmp	r2, #42	; 0x2a
 8012b7a:	d016      	beq.n	8012baa <_svfiprintf_r+0xe6>
 8012b7c:	9a07      	ldr	r2, [sp, #28]
 8012b7e:	2100      	movs	r1, #0
 8012b80:	200a      	movs	r0, #10
 8012b82:	4627      	mov	r7, r4
 8012b84:	3401      	adds	r4, #1
 8012b86:	783b      	ldrb	r3, [r7, #0]
 8012b88:	3b30      	subs	r3, #48	; 0x30
 8012b8a:	2b09      	cmp	r3, #9
 8012b8c:	d951      	bls.n	8012c32 <_svfiprintf_r+0x16e>
 8012b8e:	b1c9      	cbz	r1, 8012bc4 <_svfiprintf_r+0x100>
 8012b90:	e011      	b.n	8012bb6 <_svfiprintf_r+0xf2>
 8012b92:	2b25      	cmp	r3, #37	; 0x25
 8012b94:	d0c0      	beq.n	8012b18 <_svfiprintf_r+0x54>
 8012b96:	4627      	mov	r7, r4
 8012b98:	e7b9      	b.n	8012b0e <_svfiprintf_r+0x4a>
 8012b9a:	4a3f      	ldr	r2, [pc, #252]	; (8012c98 <_svfiprintf_r+0x1d4>)
 8012b9c:	1a80      	subs	r0, r0, r2
 8012b9e:	fa0b f000 	lsl.w	r0, fp, r0
 8012ba2:	4318      	orrs	r0, r3
 8012ba4:	9004      	str	r0, [sp, #16]
 8012ba6:	463c      	mov	r4, r7
 8012ba8:	e7d3      	b.n	8012b52 <_svfiprintf_r+0x8e>
 8012baa:	9a03      	ldr	r2, [sp, #12]
 8012bac:	1d11      	adds	r1, r2, #4
 8012bae:	6812      	ldr	r2, [r2, #0]
 8012bb0:	9103      	str	r1, [sp, #12]
 8012bb2:	2a00      	cmp	r2, #0
 8012bb4:	db01      	blt.n	8012bba <_svfiprintf_r+0xf6>
 8012bb6:	9207      	str	r2, [sp, #28]
 8012bb8:	e004      	b.n	8012bc4 <_svfiprintf_r+0x100>
 8012bba:	4252      	negs	r2, r2
 8012bbc:	f043 0302 	orr.w	r3, r3, #2
 8012bc0:	9207      	str	r2, [sp, #28]
 8012bc2:	9304      	str	r3, [sp, #16]
 8012bc4:	783b      	ldrb	r3, [r7, #0]
 8012bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8012bc8:	d10e      	bne.n	8012be8 <_svfiprintf_r+0x124>
 8012bca:	787b      	ldrb	r3, [r7, #1]
 8012bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8012bce:	f107 0101 	add.w	r1, r7, #1
 8012bd2:	d132      	bne.n	8012c3a <_svfiprintf_r+0x176>
 8012bd4:	9b03      	ldr	r3, [sp, #12]
 8012bd6:	1d1a      	adds	r2, r3, #4
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	9203      	str	r2, [sp, #12]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	bfb8      	it	lt
 8012be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012be4:	3702      	adds	r7, #2
 8012be6:	9305      	str	r3, [sp, #20]
 8012be8:	4c2c      	ldr	r4, [pc, #176]	; (8012c9c <_svfiprintf_r+0x1d8>)
 8012bea:	7839      	ldrb	r1, [r7, #0]
 8012bec:	2203      	movs	r2, #3
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f7ed fb26 	bl	8000240 <memchr>
 8012bf4:	b138      	cbz	r0, 8012c06 <_svfiprintf_r+0x142>
 8012bf6:	2340      	movs	r3, #64	; 0x40
 8012bf8:	1b00      	subs	r0, r0, r4
 8012bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8012bfe:	9b04      	ldr	r3, [sp, #16]
 8012c00:	4303      	orrs	r3, r0
 8012c02:	9304      	str	r3, [sp, #16]
 8012c04:	3701      	adds	r7, #1
 8012c06:	7839      	ldrb	r1, [r7, #0]
 8012c08:	4825      	ldr	r0, [pc, #148]	; (8012ca0 <_svfiprintf_r+0x1dc>)
 8012c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c0e:	2206      	movs	r2, #6
 8012c10:	1c7e      	adds	r6, r7, #1
 8012c12:	f7ed fb15 	bl	8000240 <memchr>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d035      	beq.n	8012c86 <_svfiprintf_r+0x1c2>
 8012c1a:	4b22      	ldr	r3, [pc, #136]	; (8012ca4 <_svfiprintf_r+0x1e0>)
 8012c1c:	b9fb      	cbnz	r3, 8012c5e <_svfiprintf_r+0x19a>
 8012c1e:	9b03      	ldr	r3, [sp, #12]
 8012c20:	3307      	adds	r3, #7
 8012c22:	f023 0307 	bic.w	r3, r3, #7
 8012c26:	3308      	adds	r3, #8
 8012c28:	9303      	str	r3, [sp, #12]
 8012c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c2c:	444b      	add	r3, r9
 8012c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c30:	e76c      	b.n	8012b0c <_svfiprintf_r+0x48>
 8012c32:	fb00 3202 	mla	r2, r0, r2, r3
 8012c36:	2101      	movs	r1, #1
 8012c38:	e7a3      	b.n	8012b82 <_svfiprintf_r+0xbe>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	9305      	str	r3, [sp, #20]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	240a      	movs	r4, #10
 8012c42:	460f      	mov	r7, r1
 8012c44:	3101      	adds	r1, #1
 8012c46:	783a      	ldrb	r2, [r7, #0]
 8012c48:	3a30      	subs	r2, #48	; 0x30
 8012c4a:	2a09      	cmp	r2, #9
 8012c4c:	d903      	bls.n	8012c56 <_svfiprintf_r+0x192>
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d0ca      	beq.n	8012be8 <_svfiprintf_r+0x124>
 8012c52:	9005      	str	r0, [sp, #20]
 8012c54:	e7c8      	b.n	8012be8 <_svfiprintf_r+0x124>
 8012c56:	fb04 2000 	mla	r0, r4, r0, r2
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	e7f1      	b.n	8012c42 <_svfiprintf_r+0x17e>
 8012c5e:	ab03      	add	r3, sp, #12
 8012c60:	9300      	str	r3, [sp, #0]
 8012c62:	462a      	mov	r2, r5
 8012c64:	4b10      	ldr	r3, [pc, #64]	; (8012ca8 <_svfiprintf_r+0x1e4>)
 8012c66:	a904      	add	r1, sp, #16
 8012c68:	4640      	mov	r0, r8
 8012c6a:	f7fd fd31 	bl	80106d0 <_printf_float>
 8012c6e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012c72:	4681      	mov	r9, r0
 8012c74:	d1d9      	bne.n	8012c2a <_svfiprintf_r+0x166>
 8012c76:	89ab      	ldrh	r3, [r5, #12]
 8012c78:	065b      	lsls	r3, r3, #25
 8012c7a:	f53f af38 	bmi.w	8012aee <_svfiprintf_r+0x2a>
 8012c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c80:	b01d      	add	sp, #116	; 0x74
 8012c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c86:	ab03      	add	r3, sp, #12
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	462a      	mov	r2, r5
 8012c8c:	4b06      	ldr	r3, [pc, #24]	; (8012ca8 <_svfiprintf_r+0x1e4>)
 8012c8e:	a904      	add	r1, sp, #16
 8012c90:	4640      	mov	r0, r8
 8012c92:	f7fd ffd3 	bl	8010c3c <_printf_i>
 8012c96:	e7ea      	b.n	8012c6e <_svfiprintf_r+0x1aa>
 8012c98:	0801646c 	.word	0x0801646c
 8012c9c:	08016472 	.word	0x08016472
 8012ca0:	08016476 	.word	0x08016476
 8012ca4:	080106d1 	.word	0x080106d1
 8012ca8:	08012a0d 	.word	0x08012a0d

08012cac <__sfputc_r>:
 8012cac:	6893      	ldr	r3, [r2, #8]
 8012cae:	3b01      	subs	r3, #1
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	b410      	push	{r4}
 8012cb4:	6093      	str	r3, [r2, #8]
 8012cb6:	da09      	bge.n	8012ccc <__sfputc_r+0x20>
 8012cb8:	6994      	ldr	r4, [r2, #24]
 8012cba:	42a3      	cmp	r3, r4
 8012cbc:	db02      	blt.n	8012cc4 <__sfputc_r+0x18>
 8012cbe:	b2cb      	uxtb	r3, r1
 8012cc0:	2b0a      	cmp	r3, #10
 8012cc2:	d103      	bne.n	8012ccc <__sfputc_r+0x20>
 8012cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cc8:	f7fe ba78 	b.w	80111bc <__swbuf_r>
 8012ccc:	6813      	ldr	r3, [r2, #0]
 8012cce:	1c58      	adds	r0, r3, #1
 8012cd0:	6010      	str	r0, [r2, #0]
 8012cd2:	7019      	strb	r1, [r3, #0]
 8012cd4:	b2c8      	uxtb	r0, r1
 8012cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <__sfputs_r>:
 8012cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cde:	4606      	mov	r6, r0
 8012ce0:	460f      	mov	r7, r1
 8012ce2:	4614      	mov	r4, r2
 8012ce4:	18d5      	adds	r5, r2, r3
 8012ce6:	42ac      	cmp	r4, r5
 8012ce8:	d101      	bne.n	8012cee <__sfputs_r+0x12>
 8012cea:	2000      	movs	r0, #0
 8012cec:	e007      	b.n	8012cfe <__sfputs_r+0x22>
 8012cee:	463a      	mov	r2, r7
 8012cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f7ff ffd9 	bl	8012cac <__sfputc_r>
 8012cfa:	1c43      	adds	r3, r0, #1
 8012cfc:	d1f3      	bne.n	8012ce6 <__sfputs_r+0xa>
 8012cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d00 <_vfiprintf_r>:
 8012d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d04:	b09d      	sub	sp, #116	; 0x74
 8012d06:	460c      	mov	r4, r1
 8012d08:	4617      	mov	r7, r2
 8012d0a:	9303      	str	r3, [sp, #12]
 8012d0c:	4606      	mov	r6, r0
 8012d0e:	b118      	cbz	r0, 8012d18 <_vfiprintf_r+0x18>
 8012d10:	6983      	ldr	r3, [r0, #24]
 8012d12:	b90b      	cbnz	r3, 8012d18 <_vfiprintf_r+0x18>
 8012d14:	f7ff fa6c 	bl	80121f0 <__sinit>
 8012d18:	4b7c      	ldr	r3, [pc, #496]	; (8012f0c <_vfiprintf_r+0x20c>)
 8012d1a:	429c      	cmp	r4, r3
 8012d1c:	d157      	bne.n	8012dce <_vfiprintf_r+0xce>
 8012d1e:	6874      	ldr	r4, [r6, #4]
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	0718      	lsls	r0, r3, #28
 8012d24:	d55d      	bpl.n	8012de2 <_vfiprintf_r+0xe2>
 8012d26:	6923      	ldr	r3, [r4, #16]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d05a      	beq.n	8012de2 <_vfiprintf_r+0xe2>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d30:	2320      	movs	r3, #32
 8012d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d36:	2330      	movs	r3, #48	; 0x30
 8012d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d3c:	f04f 0b01 	mov.w	fp, #1
 8012d40:	46b8      	mov	r8, r7
 8012d42:	4645      	mov	r5, r8
 8012d44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d155      	bne.n	8012df8 <_vfiprintf_r+0xf8>
 8012d4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8012d50:	d00b      	beq.n	8012d6a <_vfiprintf_r+0x6a>
 8012d52:	4653      	mov	r3, sl
 8012d54:	463a      	mov	r2, r7
 8012d56:	4621      	mov	r1, r4
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f7ff ffbf 	bl	8012cdc <__sfputs_r>
 8012d5e:	3001      	adds	r0, #1
 8012d60:	f000 80c4 	beq.w	8012eec <_vfiprintf_r+0x1ec>
 8012d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d66:	4453      	add	r3, sl
 8012d68:	9309      	str	r3, [sp, #36]	; 0x24
 8012d6a:	f898 3000 	ldrb.w	r3, [r8]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f000 80bc 	beq.w	8012eec <_vfiprintf_r+0x1ec>
 8012d74:	2300      	movs	r3, #0
 8012d76:	f04f 32ff 	mov.w	r2, #4294967295
 8012d7a:	9304      	str	r3, [sp, #16]
 8012d7c:	9307      	str	r3, [sp, #28]
 8012d7e:	9205      	str	r2, [sp, #20]
 8012d80:	9306      	str	r3, [sp, #24]
 8012d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d86:	931a      	str	r3, [sp, #104]	; 0x68
 8012d88:	2205      	movs	r2, #5
 8012d8a:	7829      	ldrb	r1, [r5, #0]
 8012d8c:	4860      	ldr	r0, [pc, #384]	; (8012f10 <_vfiprintf_r+0x210>)
 8012d8e:	f7ed fa57 	bl	8000240 <memchr>
 8012d92:	f105 0801 	add.w	r8, r5, #1
 8012d96:	9b04      	ldr	r3, [sp, #16]
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	d131      	bne.n	8012e00 <_vfiprintf_r+0x100>
 8012d9c:	06d9      	lsls	r1, r3, #27
 8012d9e:	bf44      	itt	mi
 8012da0:	2220      	movmi	r2, #32
 8012da2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012da6:	071a      	lsls	r2, r3, #28
 8012da8:	bf44      	itt	mi
 8012daa:	222b      	movmi	r2, #43	; 0x2b
 8012dac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012db0:	782a      	ldrb	r2, [r5, #0]
 8012db2:	2a2a      	cmp	r2, #42	; 0x2a
 8012db4:	d02c      	beq.n	8012e10 <_vfiprintf_r+0x110>
 8012db6:	9a07      	ldr	r2, [sp, #28]
 8012db8:	2100      	movs	r1, #0
 8012dba:	200a      	movs	r0, #10
 8012dbc:	46a8      	mov	r8, r5
 8012dbe:	3501      	adds	r5, #1
 8012dc0:	f898 3000 	ldrb.w	r3, [r8]
 8012dc4:	3b30      	subs	r3, #48	; 0x30
 8012dc6:	2b09      	cmp	r3, #9
 8012dc8:	d96d      	bls.n	8012ea6 <_vfiprintf_r+0x1a6>
 8012dca:	b371      	cbz	r1, 8012e2a <_vfiprintf_r+0x12a>
 8012dcc:	e026      	b.n	8012e1c <_vfiprintf_r+0x11c>
 8012dce:	4b51      	ldr	r3, [pc, #324]	; (8012f14 <_vfiprintf_r+0x214>)
 8012dd0:	429c      	cmp	r4, r3
 8012dd2:	d101      	bne.n	8012dd8 <_vfiprintf_r+0xd8>
 8012dd4:	68b4      	ldr	r4, [r6, #8]
 8012dd6:	e7a3      	b.n	8012d20 <_vfiprintf_r+0x20>
 8012dd8:	4b4f      	ldr	r3, [pc, #316]	; (8012f18 <_vfiprintf_r+0x218>)
 8012dda:	429c      	cmp	r4, r3
 8012ddc:	bf08      	it	eq
 8012dde:	68f4      	ldreq	r4, [r6, #12]
 8012de0:	e79e      	b.n	8012d20 <_vfiprintf_r+0x20>
 8012de2:	4621      	mov	r1, r4
 8012de4:	4630      	mov	r0, r6
 8012de6:	f7fe fa49 	bl	801127c <__swsetup_r>
 8012dea:	2800      	cmp	r0, #0
 8012dec:	d09e      	beq.n	8012d2c <_vfiprintf_r+0x2c>
 8012dee:	f04f 30ff 	mov.w	r0, #4294967295
 8012df2:	b01d      	add	sp, #116	; 0x74
 8012df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df8:	2b25      	cmp	r3, #37	; 0x25
 8012dfa:	d0a7      	beq.n	8012d4c <_vfiprintf_r+0x4c>
 8012dfc:	46a8      	mov	r8, r5
 8012dfe:	e7a0      	b.n	8012d42 <_vfiprintf_r+0x42>
 8012e00:	4a43      	ldr	r2, [pc, #268]	; (8012f10 <_vfiprintf_r+0x210>)
 8012e02:	1a80      	subs	r0, r0, r2
 8012e04:	fa0b f000 	lsl.w	r0, fp, r0
 8012e08:	4318      	orrs	r0, r3
 8012e0a:	9004      	str	r0, [sp, #16]
 8012e0c:	4645      	mov	r5, r8
 8012e0e:	e7bb      	b.n	8012d88 <_vfiprintf_r+0x88>
 8012e10:	9a03      	ldr	r2, [sp, #12]
 8012e12:	1d11      	adds	r1, r2, #4
 8012e14:	6812      	ldr	r2, [r2, #0]
 8012e16:	9103      	str	r1, [sp, #12]
 8012e18:	2a00      	cmp	r2, #0
 8012e1a:	db01      	blt.n	8012e20 <_vfiprintf_r+0x120>
 8012e1c:	9207      	str	r2, [sp, #28]
 8012e1e:	e004      	b.n	8012e2a <_vfiprintf_r+0x12a>
 8012e20:	4252      	negs	r2, r2
 8012e22:	f043 0302 	orr.w	r3, r3, #2
 8012e26:	9207      	str	r2, [sp, #28]
 8012e28:	9304      	str	r3, [sp, #16]
 8012e2a:	f898 3000 	ldrb.w	r3, [r8]
 8012e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8012e30:	d110      	bne.n	8012e54 <_vfiprintf_r+0x154>
 8012e32:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012e36:	2b2a      	cmp	r3, #42	; 0x2a
 8012e38:	f108 0101 	add.w	r1, r8, #1
 8012e3c:	d137      	bne.n	8012eae <_vfiprintf_r+0x1ae>
 8012e3e:	9b03      	ldr	r3, [sp, #12]
 8012e40:	1d1a      	adds	r2, r3, #4
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	9203      	str	r2, [sp, #12]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	bfb8      	it	lt
 8012e4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e4e:	f108 0802 	add.w	r8, r8, #2
 8012e52:	9305      	str	r3, [sp, #20]
 8012e54:	4d31      	ldr	r5, [pc, #196]	; (8012f1c <_vfiprintf_r+0x21c>)
 8012e56:	f898 1000 	ldrb.w	r1, [r8]
 8012e5a:	2203      	movs	r2, #3
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	f7ed f9ef 	bl	8000240 <memchr>
 8012e62:	b140      	cbz	r0, 8012e76 <_vfiprintf_r+0x176>
 8012e64:	2340      	movs	r3, #64	; 0x40
 8012e66:	1b40      	subs	r0, r0, r5
 8012e68:	fa03 f000 	lsl.w	r0, r3, r0
 8012e6c:	9b04      	ldr	r3, [sp, #16]
 8012e6e:	4303      	orrs	r3, r0
 8012e70:	9304      	str	r3, [sp, #16]
 8012e72:	f108 0801 	add.w	r8, r8, #1
 8012e76:	f898 1000 	ldrb.w	r1, [r8]
 8012e7a:	4829      	ldr	r0, [pc, #164]	; (8012f20 <_vfiprintf_r+0x220>)
 8012e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e80:	2206      	movs	r2, #6
 8012e82:	f108 0701 	add.w	r7, r8, #1
 8012e86:	f7ed f9db 	bl	8000240 <memchr>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d034      	beq.n	8012ef8 <_vfiprintf_r+0x1f8>
 8012e8e:	4b25      	ldr	r3, [pc, #148]	; (8012f24 <_vfiprintf_r+0x224>)
 8012e90:	bb03      	cbnz	r3, 8012ed4 <_vfiprintf_r+0x1d4>
 8012e92:	9b03      	ldr	r3, [sp, #12]
 8012e94:	3307      	adds	r3, #7
 8012e96:	f023 0307 	bic.w	r3, r3, #7
 8012e9a:	3308      	adds	r3, #8
 8012e9c:	9303      	str	r3, [sp, #12]
 8012e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ea0:	444b      	add	r3, r9
 8012ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8012ea4:	e74c      	b.n	8012d40 <_vfiprintf_r+0x40>
 8012ea6:	fb00 3202 	mla	r2, r0, r2, r3
 8012eaa:	2101      	movs	r1, #1
 8012eac:	e786      	b.n	8012dbc <_vfiprintf_r+0xbc>
 8012eae:	2300      	movs	r3, #0
 8012eb0:	9305      	str	r3, [sp, #20]
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	250a      	movs	r5, #10
 8012eb6:	4688      	mov	r8, r1
 8012eb8:	3101      	adds	r1, #1
 8012eba:	f898 2000 	ldrb.w	r2, [r8]
 8012ebe:	3a30      	subs	r2, #48	; 0x30
 8012ec0:	2a09      	cmp	r2, #9
 8012ec2:	d903      	bls.n	8012ecc <_vfiprintf_r+0x1cc>
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d0c5      	beq.n	8012e54 <_vfiprintf_r+0x154>
 8012ec8:	9005      	str	r0, [sp, #20]
 8012eca:	e7c3      	b.n	8012e54 <_vfiprintf_r+0x154>
 8012ecc:	fb05 2000 	mla	r0, r5, r0, r2
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	e7f0      	b.n	8012eb6 <_vfiprintf_r+0x1b6>
 8012ed4:	ab03      	add	r3, sp, #12
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	4622      	mov	r2, r4
 8012eda:	4b13      	ldr	r3, [pc, #76]	; (8012f28 <_vfiprintf_r+0x228>)
 8012edc:	a904      	add	r1, sp, #16
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f7fd fbf6 	bl	80106d0 <_printf_float>
 8012ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012ee8:	4681      	mov	r9, r0
 8012eea:	d1d8      	bne.n	8012e9e <_vfiprintf_r+0x19e>
 8012eec:	89a3      	ldrh	r3, [r4, #12]
 8012eee:	065b      	lsls	r3, r3, #25
 8012ef0:	f53f af7d 	bmi.w	8012dee <_vfiprintf_r+0xee>
 8012ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ef6:	e77c      	b.n	8012df2 <_vfiprintf_r+0xf2>
 8012ef8:	ab03      	add	r3, sp, #12
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	4622      	mov	r2, r4
 8012efe:	4b0a      	ldr	r3, [pc, #40]	; (8012f28 <_vfiprintf_r+0x228>)
 8012f00:	a904      	add	r1, sp, #16
 8012f02:	4630      	mov	r0, r6
 8012f04:	f7fd fe9a 	bl	8010c3c <_printf_i>
 8012f08:	e7ec      	b.n	8012ee4 <_vfiprintf_r+0x1e4>
 8012f0a:	bf00      	nop
 8012f0c:	08016328 	.word	0x08016328
 8012f10:	0801646c 	.word	0x0801646c
 8012f14:	08016348 	.word	0x08016348
 8012f18:	08016308 	.word	0x08016308
 8012f1c:	08016472 	.word	0x08016472
 8012f20:	08016476 	.word	0x08016476
 8012f24:	080106d1 	.word	0x080106d1
 8012f28:	08012cdd 	.word	0x08012cdd

08012f2c <__sread>:
 8012f2c:	b510      	push	{r4, lr}
 8012f2e:	460c      	mov	r4, r1
 8012f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f34:	f000 f8b8 	bl	80130a8 <_read_r>
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	bfab      	itete	ge
 8012f3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8012f40:	181b      	addge	r3, r3, r0
 8012f42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f46:	bfac      	ite	ge
 8012f48:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f4a:	81a3      	strhlt	r3, [r4, #12]
 8012f4c:	bd10      	pop	{r4, pc}

08012f4e <__swrite>:
 8012f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f52:	461f      	mov	r7, r3
 8012f54:	898b      	ldrh	r3, [r1, #12]
 8012f56:	05db      	lsls	r3, r3, #23
 8012f58:	4605      	mov	r5, r0
 8012f5a:	460c      	mov	r4, r1
 8012f5c:	4616      	mov	r6, r2
 8012f5e:	d505      	bpl.n	8012f6c <__swrite+0x1e>
 8012f60:	2302      	movs	r3, #2
 8012f62:	2200      	movs	r2, #0
 8012f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f68:	f000 f868 	bl	801303c <_lseek_r>
 8012f6c:	89a3      	ldrh	r3, [r4, #12]
 8012f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f76:	81a3      	strh	r3, [r4, #12]
 8012f78:	4632      	mov	r2, r6
 8012f7a:	463b      	mov	r3, r7
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f82:	f000 b817 	b.w	8012fb4 <_write_r>

08012f86 <__sseek>:
 8012f86:	b510      	push	{r4, lr}
 8012f88:	460c      	mov	r4, r1
 8012f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f8e:	f000 f855 	bl	801303c <_lseek_r>
 8012f92:	1c43      	adds	r3, r0, #1
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	bf15      	itete	ne
 8012f98:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fa2:	81a3      	strheq	r3, [r4, #12]
 8012fa4:	bf18      	it	ne
 8012fa6:	81a3      	strhne	r3, [r4, #12]
 8012fa8:	bd10      	pop	{r4, pc}

08012faa <__sclose>:
 8012faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fae:	f000 b813 	b.w	8012fd8 <_close_r>
	...

08012fb4 <_write_r>:
 8012fb4:	b538      	push	{r3, r4, r5, lr}
 8012fb6:	4c07      	ldr	r4, [pc, #28]	; (8012fd4 <_write_r+0x20>)
 8012fb8:	4605      	mov	r5, r0
 8012fba:	4608      	mov	r0, r1
 8012fbc:	4611      	mov	r1, r2
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	6022      	str	r2, [r4, #0]
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	f7fb ffa0 	bl	800ef08 <_write>
 8012fc8:	1c43      	adds	r3, r0, #1
 8012fca:	d102      	bne.n	8012fd2 <_write_r+0x1e>
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	b103      	cbz	r3, 8012fd2 <_write_r+0x1e>
 8012fd0:	602b      	str	r3, [r5, #0]
 8012fd2:	bd38      	pop	{r3, r4, r5, pc}
 8012fd4:	20002e14 	.word	0x20002e14

08012fd8 <_close_r>:
 8012fd8:	b538      	push	{r3, r4, r5, lr}
 8012fda:	4c06      	ldr	r4, [pc, #24]	; (8012ff4 <_close_r+0x1c>)
 8012fdc:	2300      	movs	r3, #0
 8012fde:	4605      	mov	r5, r0
 8012fe0:	4608      	mov	r0, r1
 8012fe2:	6023      	str	r3, [r4, #0]
 8012fe4:	f000 f872 	bl	80130cc <_close>
 8012fe8:	1c43      	adds	r3, r0, #1
 8012fea:	d102      	bne.n	8012ff2 <_close_r+0x1a>
 8012fec:	6823      	ldr	r3, [r4, #0]
 8012fee:	b103      	cbz	r3, 8012ff2 <_close_r+0x1a>
 8012ff0:	602b      	str	r3, [r5, #0]
 8012ff2:	bd38      	pop	{r3, r4, r5, pc}
 8012ff4:	20002e14 	.word	0x20002e14

08012ff8 <_fstat_r>:
 8012ff8:	b538      	push	{r3, r4, r5, lr}
 8012ffa:	4c07      	ldr	r4, [pc, #28]	; (8013018 <_fstat_r+0x20>)
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	4605      	mov	r5, r0
 8013000:	4608      	mov	r0, r1
 8013002:	4611      	mov	r1, r2
 8013004:	6023      	str	r3, [r4, #0]
 8013006:	f000 f869 	bl	80130dc <_fstat>
 801300a:	1c43      	adds	r3, r0, #1
 801300c:	d102      	bne.n	8013014 <_fstat_r+0x1c>
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	b103      	cbz	r3, 8013014 <_fstat_r+0x1c>
 8013012:	602b      	str	r3, [r5, #0]
 8013014:	bd38      	pop	{r3, r4, r5, pc}
 8013016:	bf00      	nop
 8013018:	20002e14 	.word	0x20002e14

0801301c <_isatty_r>:
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	4c06      	ldr	r4, [pc, #24]	; (8013038 <_isatty_r+0x1c>)
 8013020:	2300      	movs	r3, #0
 8013022:	4605      	mov	r5, r0
 8013024:	4608      	mov	r0, r1
 8013026:	6023      	str	r3, [r4, #0]
 8013028:	f000 f860 	bl	80130ec <_isatty>
 801302c:	1c43      	adds	r3, r0, #1
 801302e:	d102      	bne.n	8013036 <_isatty_r+0x1a>
 8013030:	6823      	ldr	r3, [r4, #0]
 8013032:	b103      	cbz	r3, 8013036 <_isatty_r+0x1a>
 8013034:	602b      	str	r3, [r5, #0]
 8013036:	bd38      	pop	{r3, r4, r5, pc}
 8013038:	20002e14 	.word	0x20002e14

0801303c <_lseek_r>:
 801303c:	b538      	push	{r3, r4, r5, lr}
 801303e:	4c07      	ldr	r4, [pc, #28]	; (801305c <_lseek_r+0x20>)
 8013040:	4605      	mov	r5, r0
 8013042:	4608      	mov	r0, r1
 8013044:	4611      	mov	r1, r2
 8013046:	2200      	movs	r2, #0
 8013048:	6022      	str	r2, [r4, #0]
 801304a:	461a      	mov	r2, r3
 801304c:	f000 f856 	bl	80130fc <_lseek>
 8013050:	1c43      	adds	r3, r0, #1
 8013052:	d102      	bne.n	801305a <_lseek_r+0x1e>
 8013054:	6823      	ldr	r3, [r4, #0]
 8013056:	b103      	cbz	r3, 801305a <_lseek_r+0x1e>
 8013058:	602b      	str	r3, [r5, #0]
 801305a:	bd38      	pop	{r3, r4, r5, pc}
 801305c:	20002e14 	.word	0x20002e14

08013060 <memmove>:
 8013060:	4288      	cmp	r0, r1
 8013062:	b510      	push	{r4, lr}
 8013064:	eb01 0302 	add.w	r3, r1, r2
 8013068:	d803      	bhi.n	8013072 <memmove+0x12>
 801306a:	1e42      	subs	r2, r0, #1
 801306c:	4299      	cmp	r1, r3
 801306e:	d10c      	bne.n	801308a <memmove+0x2a>
 8013070:	bd10      	pop	{r4, pc}
 8013072:	4298      	cmp	r0, r3
 8013074:	d2f9      	bcs.n	801306a <memmove+0xa>
 8013076:	1881      	adds	r1, r0, r2
 8013078:	1ad2      	subs	r2, r2, r3
 801307a:	42d3      	cmn	r3, r2
 801307c:	d100      	bne.n	8013080 <memmove+0x20>
 801307e:	bd10      	pop	{r4, pc}
 8013080:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013084:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013088:	e7f7      	b.n	801307a <memmove+0x1a>
 801308a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801308e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013092:	e7eb      	b.n	801306c <memmove+0xc>

08013094 <_malloc_usable_size_r>:
 8013094:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8013098:	2800      	cmp	r0, #0
 801309a:	f1a0 0004 	sub.w	r0, r0, #4
 801309e:	bfbc      	itt	lt
 80130a0:	580b      	ldrlt	r3, [r1, r0]
 80130a2:	18c0      	addlt	r0, r0, r3
 80130a4:	4770      	bx	lr
	...

080130a8 <_read_r>:
 80130a8:	b538      	push	{r3, r4, r5, lr}
 80130aa:	4c07      	ldr	r4, [pc, #28]	; (80130c8 <_read_r+0x20>)
 80130ac:	4605      	mov	r5, r0
 80130ae:	4608      	mov	r0, r1
 80130b0:	4611      	mov	r1, r2
 80130b2:	2200      	movs	r2, #0
 80130b4:	6022      	str	r2, [r4, #0]
 80130b6:	461a      	mov	r2, r3
 80130b8:	f7fb ff5a 	bl	800ef70 <_read>
 80130bc:	1c43      	adds	r3, r0, #1
 80130be:	d102      	bne.n	80130c6 <_read_r+0x1e>
 80130c0:	6823      	ldr	r3, [r4, #0]
 80130c2:	b103      	cbz	r3, 80130c6 <_read_r+0x1e>
 80130c4:	602b      	str	r3, [r5, #0]
 80130c6:	bd38      	pop	{r3, r4, r5, pc}
 80130c8:	20002e14 	.word	0x20002e14

080130cc <_close>:
 80130cc:	4b02      	ldr	r3, [pc, #8]	; (80130d8 <_close+0xc>)
 80130ce:	2258      	movs	r2, #88	; 0x58
 80130d0:	601a      	str	r2, [r3, #0]
 80130d2:	f04f 30ff 	mov.w	r0, #4294967295
 80130d6:	4770      	bx	lr
 80130d8:	20002e14 	.word	0x20002e14

080130dc <_fstat>:
 80130dc:	4b02      	ldr	r3, [pc, #8]	; (80130e8 <_fstat+0xc>)
 80130de:	2258      	movs	r2, #88	; 0x58
 80130e0:	601a      	str	r2, [r3, #0]
 80130e2:	f04f 30ff 	mov.w	r0, #4294967295
 80130e6:	4770      	bx	lr
 80130e8:	20002e14 	.word	0x20002e14

080130ec <_isatty>:
 80130ec:	4b02      	ldr	r3, [pc, #8]	; (80130f8 <_isatty+0xc>)
 80130ee:	2258      	movs	r2, #88	; 0x58
 80130f0:	601a      	str	r2, [r3, #0]
 80130f2:	2000      	movs	r0, #0
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop
 80130f8:	20002e14 	.word	0x20002e14

080130fc <_lseek>:
 80130fc:	4b02      	ldr	r3, [pc, #8]	; (8013108 <_lseek+0xc>)
 80130fe:	2258      	movs	r2, #88	; 0x58
 8013100:	601a      	str	r2, [r3, #0]
 8013102:	f04f 30ff 	mov.w	r0, #4294967295
 8013106:	4770      	bx	lr
 8013108:	20002e14 	.word	0x20002e14

0801310c <_sbrk>:
 801310c:	4b04      	ldr	r3, [pc, #16]	; (8013120 <_sbrk+0x14>)
 801310e:	6819      	ldr	r1, [r3, #0]
 8013110:	4602      	mov	r2, r0
 8013112:	b909      	cbnz	r1, 8013118 <_sbrk+0xc>
 8013114:	4903      	ldr	r1, [pc, #12]	; (8013124 <_sbrk+0x18>)
 8013116:	6019      	str	r1, [r3, #0]
 8013118:	6818      	ldr	r0, [r3, #0]
 801311a:	4402      	add	r2, r0
 801311c:	601a      	str	r2, [r3, #0]
 801311e:	4770      	bx	lr
 8013120:	200004ac 	.word	0x200004ac
 8013124:	20002e18 	.word	0x20002e18

08013128 <_init>:
 8013128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801312a:	bf00      	nop
 801312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801312e:	bc08      	pop	{r3}
 8013130:	469e      	mov	lr, r3
 8013132:	4770      	bx	lr

08013134 <_fini>:
 8013134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013136:	bf00      	nop
 8013138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801313a:	bc08      	pop	{r3}
 801313c:	469e      	mov	lr, r3
 801313e:	4770      	bx	lr
