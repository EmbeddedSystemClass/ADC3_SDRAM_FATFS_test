
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003228  08015d24  08015d24  00025d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018f4c  08018f4c  00028f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018f54  08018f54  00028f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018f58  08018f58  00028f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  20000000  08018f5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010940  20000210  0801916c  00030210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20010b50  0801916c  00030b50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004b72e  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000854c  00000000  00000000  0007b96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002780  00000000  00000000  00083ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002470  00000000  00000000  00086640  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a1c0  00000000  00000000  00088ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000ca18  00000000  00000000  000a2c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000af688  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000aff4  00000000  00000000  000af704  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000006c  00000000  00000000  000ba6f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000e3  00000000  00000000  000ba764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015d0c 	.word	0x08015d0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08015d0c 	.word	0x08015d0c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b97a 	b.w	8000e60 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	468c      	mov	ip, r1
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	9e08      	ldr	r6, [sp, #32]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d151      	bne.n	8000c38 <__udivmoddi4+0xb4>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4617      	mov	r7, r2
 8000b98:	d96d      	bls.n	8000c76 <__udivmoddi4+0xf2>
 8000b9a:	fab2 fe82 	clz	lr, r2
 8000b9e:	f1be 0f00 	cmp.w	lr, #0
 8000ba2:	d00b      	beq.n	8000bbc <__udivmoddi4+0x38>
 8000ba4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ba8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bb0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bb4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bb8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bbc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bc0:	0c25      	lsrs	r5, r4, #16
 8000bc2:	fbbc f8fa 	udiv	r8, ip, sl
 8000bc6:	fa1f f987 	uxth.w	r9, r7
 8000bca:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bd2:	fb08 f309 	mul.w	r3, r8, r9
 8000bd6:	42ab      	cmp	r3, r5
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x6c>
 8000bda:	19ed      	adds	r5, r5, r7
 8000bdc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000be0:	f080 8123 	bcs.w	8000e2a <__udivmoddi4+0x2a6>
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	f240 8120 	bls.w	8000e2a <__udivmoddi4+0x2a6>
 8000bea:	f1a8 0802 	sub.w	r8, r8, #2
 8000bee:	443d      	add	r5, r7
 8000bf0:	1aed      	subs	r5, r5, r3
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bf8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c00:	fb00 f909 	mul.w	r9, r0, r9
 8000c04:	45a1      	cmp	r9, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x98>
 8000c08:	19e4      	adds	r4, r4, r7
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 810a 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000c12:	45a1      	cmp	r9, r4
 8000c14:	f240 8107 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 0409 	sub.w	r4, r4, r9
 8000c20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c24:	2100      	movs	r1, #0
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d061      	beq.n	8000cee <__udivmoddi4+0x16a>
 8000c2a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c2e:	2300      	movs	r3, #0
 8000c30:	6034      	str	r4, [r6, #0]
 8000c32:	6073      	str	r3, [r6, #4]
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0xc8>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d054      	beq.n	8000cea <__udivmoddi4+0x166>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	f040 808e 	bne.w	8000d72 <__udivmoddi4+0x1ee>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xdc>
 8000c5a:	4282      	cmp	r2, r0
 8000c5c:	f200 80fa 	bhi.w	8000e54 <__udivmoddi4+0x2d0>
 8000c60:	1a84      	subs	r4, r0, r2
 8000c62:	eb65 0503 	sbc.w	r5, r5, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	46ac      	mov	ip, r5
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d03f      	beq.n	8000cee <__udivmoddi4+0x16a>
 8000c6e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b912      	cbnz	r2, 8000c7e <__udivmoddi4+0xfa>
 8000c78:	2701      	movs	r7, #1
 8000c7a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c7e:	fab7 fe87 	clz	lr, r7
 8000c82:	f1be 0f00 	cmp.w	lr, #0
 8000c86:	d134      	bne.n	8000cf2 <__udivmoddi4+0x16e>
 8000c88:	1beb      	subs	r3, r5, r7
 8000c8a:	0c3a      	lsrs	r2, r7, #16
 8000c8c:	fa1f fc87 	uxth.w	ip, r7
 8000c90:	2101      	movs	r1, #1
 8000c92:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c96:	0c25      	lsrs	r5, r4, #16
 8000c98:	fb02 3318 	mls	r3, r2, r8, r3
 8000c9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ca0:	fb0c f308 	mul.w	r3, ip, r8
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x134>
 8000ca8:	19ed      	adds	r5, r5, r7
 8000caa:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x132>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	f200 80d1 	bhi.w	8000e58 <__udivmoddi4+0x2d4>
 8000cb6:	4680      	mov	r8, r0
 8000cb8:	1aed      	subs	r5, r5, r3
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cc0:	fb02 5510 	mls	r5, r2, r0, r5
 8000cc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cc8:	fb0c fc00 	mul.w	ip, ip, r0
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x15c>
 8000cd0:	19e4      	adds	r4, r4, r7
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x15a>
 8000cd8:	45a4      	cmp	ip, r4
 8000cda:	f200 80b8 	bhi.w	8000e4e <__udivmoddi4+0x2ca>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 040c 	sub.w	r4, r4, ip
 8000ce4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce8:	e79d      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000cea:	4631      	mov	r1, r6
 8000cec:	4630      	mov	r0, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	f1ce 0420 	rsb	r4, lr, #32
 8000cf6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cfa:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cfe:	fa20 f804 	lsr.w	r8, r0, r4
 8000d02:	0c3a      	lsrs	r2, r7, #16
 8000d04:	fa25 f404 	lsr.w	r4, r5, r4
 8000d08:	ea48 0803 	orr.w	r8, r8, r3
 8000d0c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d10:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d14:	fb02 4411 	mls	r4, r2, r1, r4
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d20:	fb01 f30c 	mul.w	r3, r1, ip
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d2a:	d909      	bls.n	8000d40 <__udivmoddi4+0x1bc>
 8000d2c:	19ed      	adds	r5, r5, r7
 8000d2e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d32:	f080 808a 	bcs.w	8000e4a <__udivmoddi4+0x2c6>
 8000d36:	42ab      	cmp	r3, r5
 8000d38:	f240 8087 	bls.w	8000e4a <__udivmoddi4+0x2c6>
 8000d3c:	3902      	subs	r1, #2
 8000d3e:	443d      	add	r5, r7
 8000d40:	1aeb      	subs	r3, r5, r3
 8000d42:	fa1f f588 	uxth.w	r5, r8
 8000d46:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d4a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d52:	fb00 f30c 	mul.w	r3, r0, ip
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x1e6>
 8000d5a:	19ed      	adds	r5, r5, r7
 8000d5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d60:	d26f      	bcs.n	8000e42 <__udivmoddi4+0x2be>
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d96d      	bls.n	8000e42 <__udivmoddi4+0x2be>
 8000d66:	3802      	subs	r0, #2
 8000d68:	443d      	add	r5, r7
 8000d6a:	1aeb      	subs	r3, r5, r3
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	e78f      	b.n	8000c92 <__udivmoddi4+0x10e>
 8000d72:	f1c1 0720 	rsb	r7, r1, #32
 8000d76:	fa22 f807 	lsr.w	r8, r2, r7
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	fa05 f401 	lsl.w	r4, r5, r1
 8000d80:	ea48 0303 	orr.w	r3, r8, r3
 8000d84:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d8c:	40fd      	lsrs	r5, r7
 8000d8e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d92:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d96:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d9a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d9e:	fa1f f883 	uxth.w	r8, r3
 8000da2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da6:	fb09 f408 	mul.w	r4, r9, r8
 8000daa:	42ac      	cmp	r4, r5
 8000dac:	fa02 f201 	lsl.w	r2, r2, r1
 8000db0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x244>
 8000db6:	18ed      	adds	r5, r5, r3
 8000db8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbc:	d243      	bcs.n	8000e46 <__udivmoddi4+0x2c2>
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	d941      	bls.n	8000e46 <__udivmoddi4+0x2c2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	441d      	add	r5, r3
 8000dc8:	1b2d      	subs	r5, r5, r4
 8000dca:	fa1f fe8e 	uxth.w	lr, lr
 8000dce:	fbb5 f0fc 	udiv	r0, r5, ip
 8000dd2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000dd6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dda:	fb00 f808 	mul.w	r8, r0, r8
 8000dde:	45a0      	cmp	r8, r4
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x26e>
 8000de2:	18e4      	adds	r4, r4, r3
 8000de4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000de8:	d229      	bcs.n	8000e3e <__udivmoddi4+0x2ba>
 8000dea:	45a0      	cmp	r8, r4
 8000dec:	d927      	bls.n	8000e3e <__udivmoddi4+0x2ba>
 8000dee:	3802      	subs	r0, #2
 8000df0:	441c      	add	r4, r3
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	eba4 0408 	sub.w	r4, r4, r8
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c6      	mov	lr, r8
 8000e02:	464d      	mov	r5, r9
 8000e04:	d315      	bcc.n	8000e32 <__udivmoddi4+0x2ae>
 8000e06:	d012      	beq.n	8000e2e <__udivmoddi4+0x2aa>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x29c>
 8000e0a:	ebba 030e 	subs.w	r3, sl, lr
 8000e0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40cb      	lsrs	r3, r1
 8000e18:	431f      	orrs	r7, r3
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	6037      	str	r7, [r6, #0]
 8000e1e:	6074      	str	r4, [r6, #4]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	4618      	mov	r0, r3
 8000e28:	e6f8      	b.n	8000c1c <__udivmoddi4+0x98>
 8000e2a:	4690      	mov	r8, r2
 8000e2c:	e6e0      	b.n	8000bf0 <__udivmoddi4+0x6c>
 8000e2e:	45c2      	cmp	sl, r8
 8000e30:	d2ea      	bcs.n	8000e08 <__udivmoddi4+0x284>
 8000e32:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e36:	eb69 0503 	sbc.w	r5, r9, r3
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7e4      	b.n	8000e08 <__udivmoddi4+0x284>
 8000e3e:	4628      	mov	r0, r5
 8000e40:	e7d7      	b.n	8000df2 <__udivmoddi4+0x26e>
 8000e42:	4640      	mov	r0, r8
 8000e44:	e791      	b.n	8000d6a <__udivmoddi4+0x1e6>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e7be      	b.n	8000dc8 <__udivmoddi4+0x244>
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	e778      	b.n	8000d40 <__udivmoddi4+0x1bc>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	e745      	b.n	8000ce0 <__udivmoddi4+0x15c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xe6>
 8000e58:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5c:	443d      	add	r5, r7
 8000e5e:	e72b      	b.n	8000cb8 <__udivmoddi4+0x134>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000e68:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e6a:	2228      	movs	r2, #40	; 0x28
 8000e6c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e70:	2209      	movs	r2, #9
 8000e72:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e76:	2235      	movs	r2, #53	; 0x35
 8000e78:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e7c:	220b      	movs	r2, #11
 8000e7e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e82:	f240 121b 	movw	r2, #283	; 0x11b
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e8a:	f240 2215 	movw	r2, #533	; 0x215
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e92:	f240 121d 	movw	r2, #285	; 0x11d
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000e9a:	f240 2235 	movw	r2, #565	; 0x235
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4823      	ldr	r0, [pc, #140]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ea4:	f000 fcae 	bl	8001804 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eaa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000eae:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eb2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <BSP_LCD_Init+0xd0>)
 8000eec:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000ef0:	f004 f8dc 	bl	80050ac <HAL_LTDC_GetState>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000efa:	2100      	movs	r1, #0
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000efe:	f000 fba7 	bl	8001650 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000f04:	f003 ffb8 	bl	8004e78 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <BSP_LCD_Init+0xd4>)
 8000f10:	f002 fa4a 	bl	80033a8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2108      	movs	r1, #8
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <BSP_LCD_Init+0xd8>)
 8000f1a:	f002 fa45 	bl	80033a8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000f1e:	f010 f955 	bl	80111cc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <BSP_LCD_Init+0xdc>)
 8000f24:	f000 f8d8 	bl	80010d8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000f4e8 	.word	0x2000f4e8
 8000f34:	40016800 	.word	0x40016800
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40022800 	.word	0x40022800
 8000f40:	20000000 	.word	0x20000000

08000f44 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <BSP_LCD_GetXSize+0x20>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <BSP_LCD_GetXSize+0x24>)
 8000f4e:	2134      	movs	r1, #52	; 0x34
 8000f50:	fb01 f303 	mul.w	r3, r1, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	3360      	adds	r3, #96	; 0x60
 8000f58:	681b      	ldr	r3, [r3, #0]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	2000026c 	.word	0x2000026c
 8000f68:	2000f4e8 	.word	0x2000f4e8

08000f6c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <BSP_LCD_GetYSize+0x20>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <BSP_LCD_GetYSize+0x24>)
 8000f76:	2134      	movs	r1, #52	; 0x34
 8000f78:	fb01 f303 	mul.w	r3, r1, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3364      	adds	r3, #100	; 0x64
 8000f80:	681b      	ldr	r3, [r3, #0]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	2000026c 	.word	0x2000026c
 8000f90:	2000f4e8 	.word	0x2000f4e8

08000f94 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b090      	sub	sp, #64	; 0x40
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000fa4:	f7ff ffce 	bl	8000f44 <BSP_LCD_GetXSize>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000fb0:	f7ff ffdc 	bl	8000f6c <BSP_LCD_GetYSize>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8000fc0:	23ff      	movs	r3, #255	; 0xff
 8000fc2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000fe4:	f7ff ffae 	bl	8000f44 <BSP_LCD_GetXSize>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000fec:	f7ff ffbe 	bl	8000f6c <BSP_LCD_GetYSize>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000ffe:	f004 f817 	bl	8005030 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001002:	88fa      	ldrh	r2, [r7, #6]
 8001004:	4911      	ldr	r1, [pc, #68]	; (800104c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3304      	adds	r3, #4
 8001012:	f04f 32ff 	mov.w	r2, #4294967295
 8001016:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	490c      	ldr	r1, [pc, #48]	; (800104c <BSP_LCD_LayerDefaultInit+0xb8>)
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3308      	adds	r3, #8
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <BSP_LCD_LayerDefaultInit+0xbc>)
 800102a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	4907      	ldr	r1, [pc, #28]	; (800104c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3740      	adds	r7, #64	; 0x40
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000f4e8 	.word	0x2000f4e8
 800104c:	20000270 	.word	0x20000270
 8001050:	20000000 	.word	0x20000000

08001054 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <BSP_LCD_SelectLayer+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
} 
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000026c 	.word	0x2000026c

08001074 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <BSP_LCD_SetTextColor+0x28>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <BSP_LCD_SetTextColor+0x2c>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	2000026c 	.word	0x2000026c
 80010a0:	20000270 	.word	0x20000270

080010a4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <BSP_LCD_SetBackColor+0x2c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4908      	ldr	r1, [pc, #32]	; (80010d4 <BSP_LCD_SetBackColor+0x30>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	3304      	adds	r3, #4
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000026c 	.word	0x2000026c
 80010d4:	20000270 	.word	0x20000270

080010d8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <BSP_LCD_SetFont+0x2c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <BSP_LCD_SetFont+0x30>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3308      	adds	r3, #8
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000026c 	.word	0x2000026c
 8001108:	20000270 	.word	0x20000270

0800110c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <BSP_LCD_GetFont+0x24>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4907      	ldr	r1, [pc, #28]	; (8001134 <BSP_LCD_GetFont+0x28>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3308      	adds	r3, #8
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000026c 	.word	0x2000026c
 8001134:	20000270 	.word	0x20000270

08001138 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b085      	sub	sp, #20
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <BSP_LCD_Clear+0x48>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <BSP_LCD_Clear+0x48>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <BSP_LCD_Clear+0x4c>)
 800114a:	2134      	movs	r1, #52	; 0x34
 800114c:	fb01 f303 	mul.w	r3, r1, r3
 8001150:	4413      	add	r3, r2
 8001152:	335c      	adds	r3, #92	; 0x5c
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	461d      	mov	r5, r3
 8001158:	f7ff fef4 	bl	8000f44 <BSP_LCD_GetXSize>
 800115c:	4606      	mov	r6, r0
 800115e:	f7ff ff05 	bl	8000f6c <BSP_LCD_GetYSize>
 8001162:	4602      	mov	r2, r0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	2300      	movs	r3, #0
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	4632      	mov	r2, r6
 8001170:	4629      	mov	r1, r5
 8001172:	4620      	mov	r0, r4
 8001174:	f000 fc1a 	bl	80019ac <LL_FillBuffer>
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	2000026c 	.word	0x2000026c
 8001184:	2000f4e8 	.word	0x2000f4e8

08001188 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	492d      	ldr	r1, [pc, #180]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011aa:	6819      	ldr	r1, [r3, #0]
 80011ac:	4827      	ldr	r0, [pc, #156]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011ae:	460b      	mov	r3, r1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	440b      	add	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4403      	add	r3, r0
 80011b8:	3304      	adds	r3, #4
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4403      	add	r3, r0
 80011c8:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	491f      	ldr	r1, [pc, #124]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3308      	adds	r3, #8
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	88da      	ldrh	r2, [r3, #6]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	fb12 f303 	smulbb	r3, r2, r3
 80011e8:	b29c      	uxth	r4, r3
 80011ea:	f7ff feab 	bl	8000f44 <BSP_LCD_GetXSize>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b298      	uxth	r0, r3
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4915      	ldr	r1, [pc, #84]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3308      	adds	r3, #8
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	88db      	ldrh	r3, [r3, #6]
 8001208:	4602      	mov	r2, r0
 800120a:	4621      	mov	r1, r4
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f987 	bl	8001520 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <BSP_LCD_ClearStringLine+0xc0>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <BSP_LCD_ClearStringLine+0xc4>)
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff1b 	bl	8001074 <BSP_LCD_SetTextColor>
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	2000026c 	.word	0x2000026c
 800124c:	20000270 	.word	0x20000270

08001250 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	80bb      	strh	r3, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <BSP_LCD_DisplayChar+0x80>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	491b      	ldr	r1, [pc, #108]	; (80012d4 <BSP_LCD_DisplayChar+0x84>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3308      	adds	r3, #8
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6819      	ldr	r1, [r3, #0]
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <BSP_LCD_DisplayChar+0x80>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4c14      	ldr	r4, [pc, #80]	; (80012d4 <BSP_LCD_DisplayChar+0x84>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4423      	add	r3, r4
 800128e:	3308      	adds	r3, #8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001294:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <BSP_LCD_DisplayChar+0x80>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4c0d      	ldr	r4, [pc, #52]	; (80012d4 <BSP_LCD_DisplayChar+0x84>)
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4423      	add	r3, r4
 80012a8:	3308      	adds	r3, #8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	3307      	adds	r3, #7
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da00      	bge.n	80012b6 <BSP_LCD_DisplayChar+0x66>
 80012b4:	3307      	adds	r3, #7
 80012b6:	10db      	asrs	r3, r3, #3
 80012b8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012bc:	18ca      	adds	r2, r1, r3
 80012be:	88b9      	ldrh	r1, [r7, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 faba 	bl	800183c <DrawChar>
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	2000026c 	.word	0x2000026c
 80012d4:	20000270 	.word	0x20000270

080012d8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	81fb      	strh	r3, [r7, #14]
 80012e6:	460b      	mov	r3, r1
 80012e8:	81bb      	strh	r3, [r7, #12]
 80012ea:	4613      	mov	r3, r2
 80012ec:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80012ee:	2301      	movs	r3, #1
 80012f0:	83fb      	strh	r3, [r7, #30]
 80012f2:	2300      	movs	r3, #0
 80012f4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001302:	e002      	b.n	800130a <BSP_LCD_DisplayStringAt+0x32>
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	3301      	adds	r3, #1
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	617a      	str	r2, [r7, #20]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f6      	bne.n	8001304 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001316:	f7ff fe15 	bl	8000f44 <BSP_LCD_GetXSize>
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	494f      	ldr	r1, [pc, #316]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	3308      	adds	r3, #8
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	fbb0 f3f3 	udiv	r3, r0, r3
 8001334:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d01c      	beq.n	8001376 <BSP_LCD_DisplayStringAt+0x9e>
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <BSP_LCD_DisplayStringAt+0x98>
 8001340:	2b01      	cmp	r3, #1
 8001342:	d12e      	bne.n	80013a2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad1      	subs	r1, r2, r3
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4843      	ldr	r0, [pc, #268]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4403      	add	r3, r0
 800135a:	3308      	adds	r3, #8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	fb03 f301 	mul.w	r3, r3, r1
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	4413      	add	r3, r2
 800136c:	83fb      	strh	r3, [r7, #30]
      break;
 800136e:	e01b      	b.n	80013a8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	83fb      	strh	r3, [r7, #30]
      break;
 8001374:	e018      	b.n	80013a8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b299      	uxth	r1, r3
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4836      	ldr	r0, [pc, #216]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4403      	add	r3, r0
 800138e:	3308      	adds	r3, #8
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	fb11 f303 	smulbb	r3, r1, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	83fb      	strh	r3, [r7, #30]
      break;
 80013a0:	e002      	b.n	80013a8 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	83fb      	strh	r3, [r7, #30]
      break;
 80013a6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80013a8:	8bfb      	ldrh	r3, [r7, #30]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <BSP_LCD_DisplayStringAt+0xde>
 80013ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da1d      	bge.n	80013f2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013ba:	e01a      	b.n	80013f2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	89b9      	ldrh	r1, [r7, #12]
 80013c2:	8bfb      	ldrh	r3, [r7, #30]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff43 	bl	8001250 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4923      	ldr	r1, [pc, #140]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3308      	adds	r3, #8
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	889a      	ldrh	r2, [r3, #4]
 80013e0:	8bfb      	ldrh	r3, [r7, #30]
 80013e2:	4413      	add	r3, r2
 80013e4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
    i++;
 80013ec:	8bbb      	ldrh	r3, [r7, #28]
 80013ee:	3301      	adds	r3, #1
 80013f0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2dc      	uxtb	r4, r3
 8001400:	f7ff fda0 	bl	8000f44 <BSP_LCD_GetXSize>
 8001404:	4605      	mov	r5, r0
 8001406:	8bb9      	ldrh	r1, [r7, #28]
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4403      	add	r3, r0
 8001418:	3308      	adds	r3, #8
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	fb03 f301 	mul.w	r3, r3, r1
 8001422:	1aeb      	subs	r3, r5, r3
 8001424:	b299      	uxth	r1, r3
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <BSP_LCD_DisplayStringAt+0x180>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <BSP_LCD_DisplayStringAt+0x184>)
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4403      	add	r3, r0
 8001436:	3308      	adds	r3, #8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	4299      	cmp	r1, r3
 800143e:	bf2c      	ite	cs
 8001440:	2301      	movcs	r3, #1
 8001442:	2300      	movcc	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4023      	ands	r3, r4
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1b6      	bne.n	80013bc <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
 8001456:	bf00      	nop
 8001458:	2000026c 	.word	0x2000026c
 800145c:	20000270 	.word	0x20000270

08001460 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800146c:	f7ff fe4e 	bl	800110c <BSP_LCD_GetFont>
 8001470:	4603      	mov	r3, r0
 8001472:	88db      	ldrh	r3, [r3, #6]
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	fb12 f303 	smulbb	r3, r2, r3
 800147a:	b299      	uxth	r1, r3
 800147c:	2303      	movs	r3, #3
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff ff29 	bl	80012d8 <BSP_LCD_DisplayStringAt>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	603a      	str	r2, [r7, #0]
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	460b      	mov	r3, r1
 800149e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <BSP_LCD_DrawPixel+0x88>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <BSP_LCD_DrawPixel+0x8c>)
 80014a6:	2134      	movs	r1, #52	; 0x34
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	3348      	adds	r3, #72	; 0x48
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d116      	bne.n	80014e4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <BSP_LCD_DrawPixel+0x88>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <BSP_LCD_DrawPixel+0x8c>)
 80014bc:	2134      	movs	r1, #52	; 0x34
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	335c      	adds	r3, #92	; 0x5c
 80014c6:	681c      	ldr	r4, [r3, #0]
 80014c8:	88bd      	ldrh	r5, [r7, #4]
 80014ca:	f7ff fd3b 	bl	8000f44 <BSP_LCD_GetXSize>
 80014ce:	4603      	mov	r3, r0
 80014d0:	fb03 f205 	mul.w	r2, r3, r5
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4423      	add	r3, r4
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	b292      	uxth	r2, r2
 80014e0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80014e2:	e015      	b.n	8001510 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <BSP_LCD_DrawPixel+0x88>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <BSP_LCD_DrawPixel+0x8c>)
 80014ea:	2134      	movs	r1, #52	; 0x34
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	335c      	adds	r3, #92	; 0x5c
 80014f4:	681c      	ldr	r4, [r3, #0]
 80014f6:	88bd      	ldrh	r5, [r7, #4]
 80014f8:	f7ff fd24 	bl	8000f44 <BSP_LCD_GetXSize>
 80014fc:	4603      	mov	r3, r0
 80014fe:	fb03 f205 	mul.w	r2, r3, r5
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4423      	add	r3, r4
 800150a:	461a      	mov	r2, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bdb0      	pop	{r4, r5, r7, pc}
 8001518:	2000026c 	.word	0x2000026c
 800151c:	2000f4e8 	.word	0x2000f4e8

08001520 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af02      	add	r7, sp, #8
 8001528:	4604      	mov	r4, r0
 800152a:	4608      	mov	r0, r1
 800152c:	4611      	mov	r1, r2
 800152e:	461a      	mov	r2, r3
 8001530:	4623      	mov	r3, r4
 8001532:	80fb      	strh	r3, [r7, #6]
 8001534:	4603      	mov	r3, r0
 8001536:	80bb      	strh	r3, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4930      	ldr	r1, [pc, #192]	; (800160c <BSP_LCD_FillRect+0xec>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd8c 	bl	8001074 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800155c:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <BSP_LCD_FillRect+0xf0>)
 8001562:	2134      	movs	r1, #52	; 0x34
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	3348      	adds	r3, #72	; 0x48
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d114      	bne.n	800159c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a26      	ldr	r2, [pc, #152]	; (8001610 <BSP_LCD_FillRect+0xf0>)
 8001578:	2134      	movs	r1, #52	; 0x34
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	335c      	adds	r3, #92	; 0x5c
 8001582:	681c      	ldr	r4, [r3, #0]
 8001584:	f7ff fcde 	bl	8000f44 <BSP_LCD_GetXSize>
 8001588:	4602      	mov	r2, r0
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	fb03 f202 	mul.w	r2, r3, r2
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4413      	add	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4423      	add	r3, r4
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e013      	b.n	80015c4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <BSP_LCD_FillRect+0xf0>)
 80015a2:	2134      	movs	r1, #52	; 0x34
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	335c      	adds	r3, #92	; 0x5c
 80015ac:	681c      	ldr	r4, [r3, #0]
 80015ae:	f7ff fcc9 	bl	8000f44 <BSP_LCD_GetXSize>
 80015b2:	4602      	mov	r2, r0
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	fb03 f202 	mul.w	r2, r3, r2
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4423      	add	r3, r4
 80015c2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 80015c6:	681c      	ldr	r4, [r3, #0]
 80015c8:	68fd      	ldr	r5, [r7, #12]
 80015ca:	887e      	ldrh	r6, [r7, #2]
 80015cc:	f8b7 8000 	ldrh.w	r8, [r7]
 80015d0:	f7ff fcb8 	bl	8000f44 <BSP_LCD_GetXSize>
 80015d4:	4602      	mov	r2, r0
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	1ad1      	subs	r1, r2, r3
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <BSP_LCD_FillRect+0xe8>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <BSP_LCD_FillRect+0xec>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4403      	add	r3, r0
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	9100      	str	r1, [sp, #0]
 80015f0:	4643      	mov	r3, r8
 80015f2:	4632      	mov	r2, r6
 80015f4:	4629      	mov	r1, r5
 80015f6:	4620      	mov	r0, r4
 80015f8:	f000 f9d8 	bl	80019ac <LL_FillBuffer>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001606:	bf00      	nop
 8001608:	2000026c 	.word	0x2000026c
 800160c:	20000270 	.word	0x20000270
 8001610:	2000f4e8 	.word	0x2000f4e8

08001614 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <BSP_LCD_DisplayOn+0x30>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a09      	ldr	r2, [pc, #36]	; (8001644 <BSP_LCD_DisplayOn+0x30>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	6992      	ldr	r2, [r2, #24]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <BSP_LCD_DisplayOn+0x34>)
 8001630:	f001 feba 	bl	80033a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001634:	2201      	movs	r2, #1
 8001636:	2108      	movs	r1, #8
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <BSP_LCD_DisplayOn+0x38>)
 800163a:	f001 feb5 	bl	80033a8 <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000f4e8 	.word	0x2000f4e8
 8001648:	40022000 	.word	0x40022000
 800164c:	40022800 	.word	0x40022800

08001650 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800165a:	4a64      	ldr	r2, [pc, #400]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800165c:	4b63      	ldr	r3, [pc, #396]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b61      	ldr	r3, [pc, #388]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001670:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001672:	4a5e      	ldr	r2, [pc, #376]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4a58      	ldr	r2, [pc, #352]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800168c:	4b57      	ldr	r3, [pc, #348]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f043 0310 	orr.w	r3, r3, #16
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b55      	ldr	r3, [pc, #340]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016a2:	4a52      	ldr	r2, [pc, #328]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016ba:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016bc:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016d2:	4a46      	ldr	r2, [pc, #280]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016ea:	4a40      	ldr	r2, [pc, #256]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001702:	4a3a      	ldr	r2, [pc, #232]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <BSP_LCD_MspInit+0x19c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8001732:	2310      	movs	r3, #16
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800173e:	2302      	movs	r3, #2
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001742:	230e      	movs	r3, #14
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174a:	4619      	mov	r1, r3
 800174c:	4828      	ldr	r0, [pc, #160]	; (80017f0 <BSP_LCD_MspInit+0x1a0>)
 800174e:	f001 fc81 	bl	8003054 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800175c:	2309      	movs	r3, #9
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <BSP_LCD_MspInit+0x1a4>)
 8001768:	f001 fc74 	bl	8003054 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800176c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001776:	230e      	movs	r3, #14
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800177a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177e:	4619      	mov	r1, r3
 8001780:	481d      	ldr	r0, [pc, #116]	; (80017f8 <BSP_LCD_MspInit+0x1a8>)
 8001782:	f001 fc67 	bl	8003054 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001786:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001790:	230e      	movs	r3, #14
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001798:	4619      	mov	r1, r3
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <BSP_LCD_MspInit+0x1ac>)
 800179c:	f001 fc5a 	bl	8003054 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80017a0:	23f7      	movs	r3, #247	; 0xf7
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80017a8:	230e      	movs	r3, #14
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4813      	ldr	r0, [pc, #76]	; (8001800 <BSP_LCD_MspInit+0x1b0>)
 80017b4:	f001 fc4e 	bl	8003054 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <BSP_LCD_MspInit+0x1a8>)
 80017ca:	f001 fc43 	bl	8003054 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80017ce:	2308      	movs	r3, #8
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80017d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017da:	4619      	mov	r1, r3
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <BSP_LCD_MspInit+0x1b0>)
 80017de:	f001 fc39 	bl	8003054 <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	3740      	adds	r7, #64	; 0x40
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40022400 	.word	0x40022400
 8001800:	40022800 	.word	0x40022800

08001804 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 8001810:	2208      	movs	r2, #8
 8001812:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 8001816:	22c0      	movs	r2, #192	; 0xc0
 8001818:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 800181c:	2205      	movs	r2, #5
 800181e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 8001822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <BSP_LCD_ClockConfig+0x34>)
 800182a:	f004 fab9 	bl	8005da0 <HAL_RCCEx_PeriphCLKConfig>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000288 	.word	0x20000288

0800183c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	603a      	str	r2, [r7, #0]
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	460b      	mov	r3, r1
 800184a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <DrawChar+0x168>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4953      	ldr	r1, [pc, #332]	; (80019a8 <DrawChar+0x16c>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	3308      	adds	r3, #8
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	88db      	ldrh	r3, [r3, #6]
 800186a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <DrawChar+0x168>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <DrawChar+0x16c>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3308      	adds	r3, #8
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001884:	8a3b      	ldrh	r3, [r7, #16]
 8001886:	3307      	adds	r3, #7
 8001888:	2b00      	cmp	r3, #0
 800188a:	da00      	bge.n	800188e <DrawChar+0x52>
 800188c:	3307      	adds	r3, #7
 800188e:	10db      	asrs	r3, r3, #3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	8a3b      	ldrh	r3, [r7, #16]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e076      	b.n	8001992 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80018a4:	8a3b      	ldrh	r3, [r7, #16]
 80018a6:	3307      	adds	r3, #7
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da00      	bge.n	80018ae <DrawChar+0x72>
 80018ac:	3307      	adds	r3, #7
 80018ae:	10db      	asrs	r3, r3, #3
 80018b0:	461a      	mov	r2, r3
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fb03 f302 	mul.w	r3, r3, r2
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80018be:	8a3b      	ldrh	r3, [r7, #16]
 80018c0:	3307      	adds	r3, #7
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <DrawChar+0x8c>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d002      	beq.n	80018d4 <DrawChar+0x98>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d004      	beq.n	80018dc <DrawChar+0xa0>
 80018d2:	e00c      	b.n	80018ee <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	617b      	str	r3, [r7, #20]
      break;
 80018da:	e016      	b.n	800190a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	3201      	adds	r2, #1
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
      break;
 80018ec:	e00d      	b.n	800190a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	041a      	lsls	r2, r3, #16
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4313      	orrs	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	3202      	adds	r2, #2
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
      break;
 8001908:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	e036      	b.n	800197e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001910:	8a3a      	ldrh	r2, [r7, #16]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad2      	subs	r2, r2, r3
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	4413      	add	r3, r2
 800191a:	3b01      	subs	r3, #1
 800191c:	2201      	movs	r2, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	461a      	mov	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d012      	beq.n	8001952 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	b29a      	uxth	r2, r3
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	4413      	add	r3, r2
 8001934:	b298      	uxth	r0, r3
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <DrawChar+0x168>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <DrawChar+0x16c>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff fda0 	bl	8001490 <BSP_LCD_DrawPixel>
 8001950:	e012      	b.n	8001978 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	b29a      	uxth	r2, r3
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	4413      	add	r3, r2
 800195a:	b298      	uxth	r0, r3
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <DrawChar+0x168>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4911      	ldr	r1, [pc, #68]	; (80019a8 <DrawChar+0x16c>)
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	3304      	adds	r3, #4
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff fd8c 	bl	8001490 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	3301      	adds	r3, #1
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	8a3a      	ldrh	r2, [r7, #16]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	429a      	cmp	r2, r3
 8001984:	d8c4      	bhi.n	8001910 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	3301      	adds	r3, #1
 800198a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	3301      	adds	r3, #1
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	8a7a      	ldrh	r2, [r7, #18]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	429a      	cmp	r2, r3
 8001998:	d884      	bhi.n	80018a4 <DrawChar+0x68>
  }
}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000026c 	.word	0x2000026c
 80019a8:	20000270 	.word	0x20000270

080019ac <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <LL_FillBuffer+0x88>)
 80019bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019c0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <LL_FillBuffer+0x8c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <LL_FillBuffer+0x90>)
 80019c8:	2134      	movs	r1, #52	; 0x34
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3348      	adds	r3, #72	; 0x48
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d103      	bne.n	80019e0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <LL_FillBuffer+0x88>)
 80019da:	2202      	movs	r2, #2
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	e002      	b.n	80019e6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <LL_FillBuffer+0x88>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <LL_FillBuffer+0x88>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <LL_FillBuffer+0x88>)
 80019ee:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <LL_FillBuffer+0x94>)
 80019f0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80019f2:	4810      	ldr	r0, [pc, #64]	; (8001a34 <LL_FillBuffer+0x88>)
 80019f4:	f001 f896 	bl	8002b24 <HAL_DMA2D_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LL_FillBuffer+0x88>)
 8001a02:	f001 f9ed 	bl	8002de0 <HAL_DMA2D_ConfigLayer>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69f9      	ldr	r1, [r7, #28]
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <LL_FillBuffer+0x88>)
 8001a18:	f001 f8ce 	bl	8002bb8 <HAL_DMA2D_Start>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001a22:	210a      	movs	r1, #10
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <LL_FillBuffer+0x88>)
 8001a26:	f001 f8f2 	bl	8002c0e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000022c 	.word	0x2000022c
 8001a38:	2000026c 	.word	0x2000026c
 8001a3c:	2000f4e8 	.word	0x2000f4e8
 8001a40:	4002b000 	.word	0x4002b000

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_Init+0x34>)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x34>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_Init+0x34>)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x34>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 fc3b 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f012 fc16 	bl	8014298 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f012 f96c 	bl	8013d48 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	2000f590 	.word	0x2000f590

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000f590 	.word	0x2000f590

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_Delay+0x40>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad2      	subs	r2, r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3f7      	bcc.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000010 	.word	0x20000010

08001b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e031      	b.n	8001b7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f012 f93d 	bl	8013dac <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_ADC_Init+0x84>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fa02 	bl	8001f58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6a:	e001      	b.n	8001b70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	ffffeefd 	.word	0xffffeefd

08001b88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Start+0x1a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e085      	b.n	8001cae <HAL_ADC_Start+0x126>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d018      	beq.n	8001bea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	6892      	ldr	r2, [r2, #8]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bc8:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_ADC_Start+0x134>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a3c      	ldr	r2, [pc, #240]	; (8001cc0 <HAL_ADC_Start+0x138>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9a      	lsrs	r2, r3, #18
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d059      	beq.n	8001cac <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfc:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_ADC_Start+0x13c>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f023 0206 	bic.w	r2, r3, #6
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001c3e:	e002      	b.n	8001c46 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c56:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_ADC_Start+0x140>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10f      	bne.n	8001c84 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11c      	bne.n	8001cac <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	6892      	ldr	r2, [r2, #8]
 8001c7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	e013      	b.n	8001cac <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_ADC_Start+0x144>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10e      	bne.n	8001cac <HAL_ADC_Start+0x124>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	6892      	ldr	r2, [r2, #8]
 8001ca6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001caa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000003c 	.word	0x2000003c
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	fffff8fe 	.word	0xfffff8fe
 8001cc8:	40012300 	.word	0x40012300
 8001ccc:	40012000 	.word	0x40012000

08001cd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cec:	b490      	push	{r4, r7}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1c>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e117      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x24c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	d936      	bls.n	8001d86 <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68d9      	ldr	r1, [r3, #12]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4403      	add	r3, r0
 8001d30:	3b1e      	subs	r3, #30
 8001d32:	2007      	movs	r0, #7
 8001d34:	fa00 f303 	lsl.w	r3, r0, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a80      	ldr	r2, [pc, #512]	; (8001f44 <HAL_ADC_ConfigChannel+0x258>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d10a      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	68d1      	ldr	r1, [r2, #12]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6892      	ldr	r2, [r2, #8]
 8001d56:	0612      	lsls	r2, r2, #24
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	e037      	b.n	8001dce <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68d9      	ldr	r1, [r3, #12]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6898      	ldr	r0, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461c      	mov	r4, r3
 8001d74:	4623      	mov	r3, r4
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4423      	add	r3, r4
 8001d7a:	3b1e      	subs	r3, #30
 8001d7c:	fa00 f303 	lsl.w	r3, r0, r3
 8001d80:	430b      	orrs	r3, r1
 8001d82:	60d3      	str	r3, [r2, #12]
 8001d84:	e023      	b.n	8001dce <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6919      	ldr	r1, [r3, #16]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	4603      	mov	r3, r0
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4403      	add	r3, r0
 8001d9e:	2007      	movs	r0, #7
 8001da0:	fa00 f303 	lsl.w	r3, r0, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	400b      	ands	r3, r1
 8001da8:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6919      	ldr	r1, [r3, #16]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6898      	ldr	r0, [r3, #8]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	461c      	mov	r4, r3
 8001dc0:	4623      	mov	r3, r4
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4423      	add	r3, r4
 8001dc6:	fa00 f303 	lsl.w	r3, r0, r3
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d824      	bhi.n	8001e20 <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6819      	ldr	r1, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b05      	subs	r3, #5
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4003      	ands	r3, r0
 8001df6:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461c      	mov	r4, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b05      	subs	r3, #5
 8001e16:	fa04 f303 	lsl.w	r3, r4, r3
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	634b      	str	r3, [r1, #52]	; 0x34
 8001e1e:	e04c      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d824      	bhi.n	8001e72 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b23      	subs	r3, #35	; 0x23
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4003      	ands	r3, r0
 8001e48:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	; 0x23
 8001e68:	fa04 f303 	lsl.w	r3, r4, r3
 8001e6c:	4303      	orrs	r3, r0
 8001e6e:	630b      	str	r3, [r1, #48]	; 0x30
 8001e70:	e023      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b41      	subs	r3, #65	; 0x41
 8001e88:	221f      	movs	r2, #31
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4003      	ands	r3, r0
 8001e92:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b41      	subs	r3, #65	; 0x41
 8001eb2:	fa04 f303 	lsl.w	r3, r4, r3
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <HAL_ADC_ConfigChannel+0x25c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d109      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1ec>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_ADC_ConfigChannel+0x260>)
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_ADC_ConfigChannel+0x260>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_ADC_ConfigChannel+0x25c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d125      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x242>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <HAL_ADC_ConfigChannel+0x258>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d003      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x208>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b11      	cmp	r3, #17
 8001ef2:	d11c      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ef4:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <HAL_ADC_ConfigChannel+0x260>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_ADC_ConfigChannel+0x260>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001efe:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_ADC_ConfigChannel+0x258>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_ADC_ConfigChannel+0x264>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_ADC_ConfigChannel+0x268>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc90      	pop	{r4, r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	10000012 	.word	0x10000012
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	40012300 	.word	0x40012300
 8001f50:	2000003c 	.word	0x2000003c
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <ADC_Init+0x1e8>)
 8001f62:	4b77      	ldr	r3, [pc, #476]	; (8002140 <ADC_Init+0x1e8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f6a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f6c:	4974      	ldr	r1, [pc, #464]	; (8002140 <ADC_Init+0x1e8>)
 8001f6e:	4b74      	ldr	r3, [pc, #464]	; (8002140 <ADC_Init+0x1e8>)
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	6852      	ldr	r2, [r2, #4]
 8001f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	6851      	ldr	r1, [r2, #4]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6912      	ldr	r2, [r2, #16]
 8001f98:	0212      	lsls	r2, r2, #8
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	6852      	ldr	r2, [r2, #4]
 8001fa8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	6851      	ldr	r1, [r2, #4]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6892      	ldr	r2, [r2, #8]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	6892      	ldr	r2, [r2, #8]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	6891      	ldr	r1, [r2, #8]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68d2      	ldr	r2, [r2, #12]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	4a57      	ldr	r2, [pc, #348]	; (8002144 <ADC_Init+0x1ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d022      	beq.n	8002032 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	6892      	ldr	r2, [r2, #8]
 8001ff6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	6891      	ldr	r1, [r2, #8]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800200a:	430a      	orrs	r2, r1
 800200c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	6892      	ldr	r2, [r2, #8]
 8002018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800201c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	6891      	ldr	r1, [r2, #8]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e00f      	b.n	8002052 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6892      	ldr	r2, [r2, #8]
 800204c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002050:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	f022 0202 	bic.w	r2, r2, #2
 8002060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6891      	ldr	r1, [r2, #8]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6992      	ldr	r2, [r2, #24]
 8002070:	0052      	lsls	r2, r2, #1
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01b      	beq.n	80020b6 <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	6852      	ldr	r2, [r2, #4]
 8002088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	6852      	ldr	r2, [r2, #4]
 8002098:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800209c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	6851      	ldr	r1, [r2, #4]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ac:	3a01      	subs	r2, #1
 80020ae:	0352      	lsls	r2, r2, #13
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	e007      	b.n	80020c6 <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	6852      	ldr	r2, [r2, #4]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	69d2      	ldr	r2, [r2, #28]
 80020e4:	3a01      	subs	r2, #1
 80020e6:	0512      	lsls	r2, r2, #20
 80020e8:	430a      	orrs	r2, r1
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	6892      	ldr	r2, [r2, #8]
 80020f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6891      	ldr	r1, [r2, #8]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800210a:	0252      	lsls	r2, r2, #9
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	6892      	ldr	r2, [r2, #8]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	6891      	ldr	r1, [r2, #8]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6952      	ldr	r2, [r2, #20]
 800212e:	0292      	lsls	r2, r2, #10
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40012300 	.word	0x40012300
 8002144:	0f000001 	.word	0x0f000001

08002148 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <NVIC_SetPriorityGrouping+0x40>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <NVIC_SetPriorityGrouping+0x44>)
 8002172:	4313      	orrs	r3, r2
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <NVIC_SetPriorityGrouping+0x40>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00
 800218c:	05fa0000 	.word	0x05fa0000

08002190 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80021b6:	4909      	ldr	r1, [pc, #36]	; (80021dc <NVIC_EnableIRQ+0x30>)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da0b      	bge.n	800220c <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	490d      	ldr	r1, [pc, #52]	; (800222c <NVIC_SetPriority+0x4c>)
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	3b04      	subs	r3, #4
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220a:	e009      	b.n	8002220 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	4908      	ldr	r1, [pc, #32]	; (8002230 <NVIC_SetPriority+0x50>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00
 8002230:	e000e100 	.word	0xe000e100

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	2201      	movs	r2, #1
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	401a      	ands	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227a:	2101      	movs	r1, #1
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	1e59      	subs	r1, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff90 	bl	80021e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff2f 	bl	8002148 <NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002304:	f7ff ff44 	bl	8002190 <NVIC_GetPriorityGrouping>
 8002308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff90 	bl	8002234 <NVIC_EncodePriority>
 8002314:	4602      	mov	r2, r0
 8002316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff5f 	bl	80021e0 <NVIC_SetPriority>
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff37 	bl	80021ac <NVIC_EnableIRQ>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffa2 	bl	8002298 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d106      	bne.n	800237c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800237a:	e005      	b.n	8002388 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0304 	bic.w	r3, r3, #4
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e054      	b.n	8002454 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7f5b      	ldrb	r3, [r3, #29]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f011 fd6a 	bl	8013e94 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	791b      	ldrb	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a22      	ldr	r2, [pc, #136]	; (800245c <HAL_CRC_Init+0xc4>)
 80023d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	6892      	ldr	r2, [r2, #8]
 80023e0:	f022 0218 	bic.w	r2, r2, #24
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	e00c      	b.n	8002402 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	461a      	mov	r2, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f834 	bl	8002460 <HAL_CRCEx_Polynomial_Set>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e028      	b.n	8002454 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	795b      	ldrb	r3, [r3, #5]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f04f 32ff 	mov.w	r2, #4294967295
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	e004      	b.n	8002420 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6912      	ldr	r2, [r2, #16]
 800241e:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6952      	ldr	r2, [r2, #20]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	6892      	ldr	r2, [r2, #8]
 8002440:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6992      	ldr	r2, [r2, #24]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	04c11db7 	.word	0x04c11db7

08002460 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800246c:	231f      	movs	r3, #31
 800246e:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8002470:	bf00      	nop
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d104      	bne.n	800248c <HAL_CRCEx_Polynomial_Set+0x2c>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	617a      	str	r2, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f2      	bne.n	8002472 <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b18      	cmp	r3, #24
 8002490:	d843      	bhi.n	800251a <HAL_CRCEx_Polynomial_Set+0xba>
 8002492:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <HAL_CRCEx_Polynomial_Set+0x38>)
 8002494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002498:	0800251b 	.word	0x0800251b
 800249c:	0800251b 	.word	0x0800251b
 80024a0:	0800251b 	.word	0x0800251b
 80024a4:	0800251b 	.word	0x0800251b
 80024a8:	0800251b 	.word	0x0800251b
 80024ac:	0800251b 	.word	0x0800251b
 80024b0:	0800251b 	.word	0x0800251b
 80024b4:	0800251b 	.word	0x0800251b
 80024b8:	08002511 	.word	0x08002511
 80024bc:	0800251b 	.word	0x0800251b
 80024c0:	0800251b 	.word	0x0800251b
 80024c4:	0800251b 	.word	0x0800251b
 80024c8:	0800251b 	.word	0x0800251b
 80024cc:	0800251b 	.word	0x0800251b
 80024d0:	0800251b 	.word	0x0800251b
 80024d4:	0800251b 	.word	0x0800251b
 80024d8:	08002507 	.word	0x08002507
 80024dc:	0800251b 	.word	0x0800251b
 80024e0:	0800251b 	.word	0x0800251b
 80024e4:	0800251b 	.word	0x0800251b
 80024e8:	0800251b 	.word	0x0800251b
 80024ec:	0800251b 	.word	0x0800251b
 80024f0:	0800251b 	.word	0x0800251b
 80024f4:	0800251b 	.word	0x0800251b
 80024f8:	080024fd 	.word	0x080024fd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d90d      	bls.n	800251e <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e01f      	b.n	8002546 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b07      	cmp	r3, #7
 800250a:	d90a      	bls.n	8002522 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e01a      	b.n	8002546 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	d907      	bls.n	8002526 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e015      	b.n	8002546 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 800251a:	bf00      	nop
 800251c:	e004      	b.n	8002528 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800251e:	bf00      	nop
 8002520:	e002      	b.n	8002528 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8002526:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	6892      	ldr	r2, [r2, #8]
 800253a:	f022 0118 	bic.w	r1, r2, #24
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop

08002554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff faa0 	bl	8001aa4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e099      	b.n	80026a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002590:	e00f      	b.n	80025b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002592:	f7ff fa87 	bl	8001aa4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b05      	cmp	r3, #5
 800259e:	d908      	bls.n	80025b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2203      	movs	r2, #3
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e078      	b.n	80026a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e8      	bne.n	8002592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <HAL_DMA_Init+0x158>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2b04      	cmp	r3, #4
 800260a:	d107      	bne.n	800261c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	4313      	orrs	r3, r2
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f023 0307 	bic.w	r3, r3, #7
 8002632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2b04      	cmp	r3, #4
 8002644:	d117      	bne.n	8002676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00e      	beq.n	8002676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f9e9 	bl	8002a30 <DMA_CheckFifoParam>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002672:	2301      	movs	r3, #1
 8002674:	e016      	b.n	80026a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9a0 	bl	80029c4 <DMA_CalcBaseAndBitshift>
 8002684:	4603      	mov	r3, r0
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	223f      	movs	r2, #63	; 0x3f
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	f010803f 	.word	0xf010803f

080026b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026bc:	4b92      	ldr	r3, [pc, #584]	; (8002908 <HAL_DMA_IRQHandler+0x258>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a92      	ldr	r2, [pc, #584]	; (800290c <HAL_DMA_IRQHandler+0x25c>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0a9b      	lsrs	r3, r3, #10
 80026c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	2208      	movs	r2, #8
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01a      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	f022 0204 	bic.w	r2, r2, #4
 8002702:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	2208      	movs	r2, #8
 800270a:	409a      	lsls	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	2201      	movs	r2, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d012      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	2201      	movs	r2, #1
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2204      	movs	r2, #4
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	2204      	movs	r2, #4
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	2210      	movs	r2, #16
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d043      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d03c      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2210      	movs	r2, #16
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d024      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e01f      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
 80027f0:	e016      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	f022 0208 	bic.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	2220      	movs	r2, #32
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 808e 	beq.w	800294e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8086 	beq.w	800294e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2220      	movs	r2, #32
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b05      	cmp	r3, #5
 8002858:	d136      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	f022 0216 	bic.w	r2, r2, #22
 8002868:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	6952      	ldr	r2, [r2, #20]
 8002874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002878:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_DMA_IRQHandler+0x1da>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f022 0208 	bic.w	r2, r2, #8
 8002898:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	223f      	movs	r2, #63	; 0x3f
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d07d      	beq.n	80029ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
        }
        return;
 80028c6:	e078      	b.n	80029ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01c      	beq.n	8002910 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d108      	bne.n	80028f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d030      	beq.n	800294e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e02b      	b.n	800294e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d027      	beq.n	800294e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
 8002906:	e022      	b.n	800294e <HAL_DMA_IRQHandler+0x29e>
 8002908:	2000003c 	.word	0x2000003c
 800290c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	f022 0210 	bic.w	r2, r2, #16
 800292c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	2b00      	cmp	r3, #0
 8002954:	d032      	beq.n	80029bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d022      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2205      	movs	r2, #5
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3301      	adds	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4293      	cmp	r3, r2
 8002984:	d807      	bhi.n	8002996 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f2      	bne.n	800297a <HAL_DMA_IRQHandler+0x2ca>
 8002994:	e000      	b.n	8002998 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002996:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e000      	b.n	80029bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80029ba:	bf00      	nop
    }
  }
}
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop

080029c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3b10      	subs	r3, #16
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <DMA_CalcBaseAndBitshift+0x60>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <DMA_CalcBaseAndBitshift+0x64>)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d908      	bls.n	8002a04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	; 0x58
 8002a02:	e006      	b.n	8002a12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	aaaaaaab 	.word	0xaaaaaaab
 8002a28:	08018cd0 	.word	0x08018cd0
 8002a2c:	fffffc00 	.word	0xfffffc00

08002a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11f      	bne.n	8002a8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d855      	bhi.n	8002afc <DMA_CheckFifoParam+0xcc>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <DMA_CheckFifoParam+0x28>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a7b 	.word	0x08002a7b
 8002a60:	08002a69 	.word	0x08002a69
 8002a64:	08002afd 	.word	0x08002afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d045      	beq.n	8002b00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e042      	b.n	8002b00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a82:	d13f      	bne.n	8002b04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e03c      	b.n	8002b04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	d121      	bne.n	8002ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d836      	bhi.n	8002b08 <DMA_CheckFifoParam+0xd8>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <DMA_CheckFifoParam+0x70>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ab7 	.word	0x08002ab7
 8002aa8:	08002ab1 	.word	0x08002ab1
 8002aac:	08002ac9 	.word	0x08002ac9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e02f      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d024      	beq.n	8002b0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac6:	e021      	b.n	8002b0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad0:	d11e      	bne.n	8002b10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ad6:	e01b      	b.n	8002b10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d902      	bls.n	8002ae4 <DMA_CheckFifoParam+0xb4>
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d003      	beq.n	8002aea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae2:	e018      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e015      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      break;
 8002afa:	e00b      	b.n	8002b14 <DMA_CheckFifoParam+0xe4>
      break;
 8002afc:	bf00      	nop
 8002afe:	e00a      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002b00:	bf00      	nop
 8002b02:	e008      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002b04:	bf00      	nop
 8002b06:	e006      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e004      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;   
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002b14:	bf00      	nop
    }
  } 
  
  return status; 
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e039      	b.n	8002baa <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f011 f9c2 	bl	8013ed4 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6852      	ldr	r2, [r2, #4]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b78:	f022 0107 	bic.w	r1, r2, #7
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6892      	ldr	r2, [r2, #8]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_DMA2D_Init+0x90>)
 8002b90:	400b      	ands	r3, r1
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	68c9      	ldr	r1, [r1, #12]
 8002b96:	430b      	orrs	r3, r1
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	ffffc000 	.word	0xffffc000

08002bb8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA2D_Start+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e018      	b.n	8002c06 <HAL_DMA2D_Start+0x4e>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f98a 	bl	8002f08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d056      	beq.n	8002cdc <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002c2e:	f7fe ff39 	bl	8001aa4 <HAL_GetTick>
 8002c32:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002c34:	e04b      	b.n	8002cce <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	f043 0202 	orr.w	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0a2      	b.n	8002dd6 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d01a      	beq.n	8002cce <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_DMA2D_PollForTransfer+0xa0>
 8002c9e:	f7fe ff01 	bl	8001aa4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d90f      	bls.n	8002cce <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e083      	b.n	8002dd6 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ac      	beq.n	8002c36 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d061      	beq.n	8002dbc <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fed4 	bl	8001aa4 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002cfe:	e056      	b.n	8002dae <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02e      	beq.n	8002d70 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	f043 0202 	orr.w	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2229      	movs	r2, #41	; 0x29
 8002d5a:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e032      	b.n	8002dd6 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d01a      	beq.n	8002dae <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_DMA2D_PollForTransfer+0x180>
 8002d7e:	f7fe fe91 	bl	8001aa4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d90f      	bls.n	8002dae <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e013      	b.n	8002dd6 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0a1      	beq.n	8002d00 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2212      	movs	r2, #18
 8002dc2:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	3318      	adds	r3, #24
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_DMA2D_ConfigLayer+0x34>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e071      	b.n	8002ef8 <HAL_DMA2D_ConfigLayer+0x118>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_DMA2D_ConfigLayer+0x124>)
 8002e34:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b0a      	cmp	r3, #10
 8002e3c:	d003      	beq.n	8002e46 <HAL_DMA2D_ConfigLayer+0x66>
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b09      	cmp	r3, #9
 8002e44:	d107      	bne.n	8002e56 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e005      	b.n	8002e62 <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	061b      	lsls	r3, r3, #24
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11f      	bne.n	8002ea8 <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	43d2      	mvns	r2, r2
 8002e76:	4011      	ands	r1, r2
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b0a      	cmp	r3, #10
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA2D_ConfigLayer+0xb8>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d126      	bne.n	8002ee6 <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68d2      	ldr	r2, [r2, #12]
 8002ea0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea6:	e01e      	b.n	8002ee6 <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	69d1      	ldr	r1, [r2, #28]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	43d2      	mvns	r2, r2
 8002eb6:	4011      	ands	r1, r2
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b0a      	cmp	r3, #10
 8002ece:	d003      	beq.n	8002ed8 <HAL_DMA2D_ConfigLayer+0xf8>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d106      	bne.n	8002ee6 <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	68d2      	ldr	r2, [r2, #12]
 8002ee0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ee4:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	ff03000f 	.word	0xff03000f

08002f08 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f34:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	0410      	lsls	r0, r2, #16
 8002f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3e:	4302      	orrs	r2, r0
 8002f40:	430a      	orrs	r2, r1
 8002f42:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f54:	d174      	bne.n	8003040 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f5c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f64:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f6c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	e053      	b.n	8003036 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d106      	bne.n	8002fa4 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa2:	e048      	b.n	8003036 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d111      	bne.n	8002fd0 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	0cdb      	lsrs	r3, r3, #19
 8002fb0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	0a9b      	lsrs	r3, r3, #10
 8002fb6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	02db      	lsls	r3, r3, #11
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	e032      	b.n	8003036 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d117      	bne.n	8003008 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	0fdb      	lsrs	r3, r3, #31
 8002fdc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	0cdb      	lsrs	r3, r3, #19
 8002fe2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	0adb      	lsrs	r3, r3, #11
 8002fe8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	029b      	lsls	r3, r3, #10
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	03db      	lsls	r3, r3, #15
 8002ffe:	431a      	orrs	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	e016      	b.n	8003036 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	0f1b      	lsrs	r3, r3, #28
 800300c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	0d1b      	lsrs	r3, r3, #20
 8003012:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	0b1b      	lsrs	r3, r3, #12
 8003018:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	011a      	lsls	r2, r3, #4
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	431a      	orrs	r2, r3
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	031b      	lsls	r3, r3, #12
 800302e:	431a      	orrs	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800303e:	e003      	b.n	8003048 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	60da      	str	r2, [r3, #12]
}
 8003048:	bf00      	nop
 800304a:	372c      	adds	r7, #44	; 0x2c
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e175      	b.n	8003360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	f040 8164 	bne.w	800335a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x4e>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b12      	cmp	r3, #18
 80030a0:	d123      	bne.n	80030ea <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	69b9      	ldr	r1, [r7, #24]
 80030e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0203 	and.w	r2, r3, #3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d00b      	beq.n	800313e <HAL_GPIO_Init+0xea>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003132:	2b11      	cmp	r3, #17
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b12      	cmp	r3, #18
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80be 	beq.w	800335a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	4a65      	ldr	r2, [pc, #404]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e0:	4b64      	ldr	r3, [pc, #400]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b62      	ldr	r3, [pc, #392]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031f6:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_GPIO_Init+0x324>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_GPIO_Init+0x328>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d037      	beq.n	8003292 <HAL_GPIO_Init+0x23e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_GPIO_Init+0x32c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_GPIO_Init+0x23a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a55      	ldr	r2, [pc, #340]	; (8003384 <HAL_GPIO_Init+0x330>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02b      	beq.n	800328a <HAL_GPIO_Init+0x236>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a54      	ldr	r2, [pc, #336]	; (8003388 <HAL_GPIO_Init+0x334>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d025      	beq.n	8003286 <HAL_GPIO_Init+0x232>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <HAL_GPIO_Init+0x338>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01f      	beq.n	8003282 <HAL_GPIO_Init+0x22e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_GPIO_Init+0x33c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d019      	beq.n	800327e <HAL_GPIO_Init+0x22a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a51      	ldr	r2, [pc, #324]	; (8003394 <HAL_GPIO_Init+0x340>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_GPIO_Init+0x226>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a50      	ldr	r2, [pc, #320]	; (8003398 <HAL_GPIO_Init+0x344>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00d      	beq.n	8003276 <HAL_GPIO_Init+0x222>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	; (800339c <HAL_GPIO_Init+0x348>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_GPIO_Init+0x21e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <HAL_GPIO_Init+0x34c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_GPIO_Init+0x21a>
 800326a:	2309      	movs	r3, #9
 800326c:	e012      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800326e:	230a      	movs	r3, #10
 8003270:	e010      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003272:	2308      	movs	r3, #8
 8003274:	e00e      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003276:	2307      	movs	r3, #7
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327a:	2306      	movs	r3, #6
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032a4:	4934      	ldr	r1, [pc, #208]	; (8003378 <HAL_GPIO_Init+0x324>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b2:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d6:	4a33      	ldr	r2, [pc, #204]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332a:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <HAL_GPIO_Init+0x350>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae86 	bls.w	8003074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3724      	adds	r7, #36	; 0x24
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40023800 	.word	0x40023800
 8003378:	40013800 	.word	0x40013800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40021400 	.word	0x40021400
 8003394:	40021800 	.word	0x40021800
 8003398:	40021c00 	.word	0x40021c00
 800339c:	40022000 	.word	0x40022000
 80033a0:	40022400 	.word	0x40022400
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80033da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033dc:	b08d      	sub	sp, #52	; 0x34
 80033de:	af0a      	add	r7, sp, #40	; 0x28
 80033e0:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e03e      	b.n	800346a <HAL_HCD_Init+0x90>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  hhcd->State = HAL_HCD_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2203      	movs	r2, #3
 80033f0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f011 f845 	bl	8014484 <HAL_HCD_MspInit>

  /* Disable the Interrupts */
 __HAL_HCD_DISABLE(hhcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fcb5 	bl	8007d6e <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	687e      	ldr	r6, [r7, #4]
 800340c:	466d      	mov	r5, sp
 800340e:	f106 0410 	add.w	r4, r6, #16
 8003412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800341e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003422:	1d33      	adds	r3, r6, #4
 8003424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f004 fc3e 	bl	8007ca8 <USB_CoreInit>

 /* Force Host Mode*/
 USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fcac 	bl	8007d90 <USB_SetCurrentMode>

 /* Init Host */
 USB_HostInit(hhcd->Instance, hhcd->Init);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	687e      	ldr	r6, [r7, #4]
 8003440:	466d      	mov	r5, sp
 8003442:	f106 0410 	add.w	r4, r6, #16
 8003446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800344a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800344c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800344e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003452:	e885 0003 	stmia.w	r5, {r0, r1}
 8003456:	1d33      	adds	r3, r6, #4
 8003458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800345a:	6838      	ldr	r0, [r7, #0]
 800345c:	f004 fdc2 	bl	8007fe4 <USB_HostInit>

 hhcd->State= HAL_HCD_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

 return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003472 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003472:	b590      	push	{r4, r7, lr}
 8003474:	b089      	sub	sp, #36	; 0x24
 8003476:	af04      	add	r7, sp, #16
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	4608      	mov	r0, r1
 800347c:	4611      	mov	r1, r2
 800347e:	461a      	mov	r2, r3
 8003480:	4603      	mov	r3, r0
 8003482:	70fb      	strb	r3, [r7, #3]
 8003484:	460b      	mov	r3, r1
 8003486:	70bb      	strb	r3, [r7, #2]
 8003488:	4613      	mov	r3, r2
 800348a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_HCD_HC_Init+0x2c>
 800349a:	2302      	movs	r3, #2
 800349c:	e076      	b.n	800358c <HAL_HCD_HC_Init+0x11a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hhcd->hc[ch_num].do_ping = 0;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	333d      	adds	r3, #61	; 0x3d
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	3338      	adds	r3, #56	; 0x38
 80034ca:	787a      	ldrb	r2, [r7, #1]
 80034cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	3340      	adds	r3, #64	; 0x40
 80034de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034e0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	3339      	adds	r3, #57	; 0x39
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	333f      	adds	r3, #63	; 0x3f
 8003506:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800350a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	78bb      	ldrb	r3, [r7, #2]
 8003510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003514:	b2d8      	uxtb	r0, r3
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	333a      	adds	r3, #58	; 0x3a
 8003524:	4602      	mov	r2, r0
 8003526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	09db      	lsrs	r3, r3, #7
 8003532:	b2db      	uxtb	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	333b      	adds	r3, #59	; 0x3b
 8003544:	4602      	mov	r2, r0
 8003546:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	440b      	add	r3, r1
 8003556:	333c      	adds	r3, #60	; 0x3c
 8003558:	f897 2020 	ldrb.w	r2, [r7, #32]
 800355c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	787c      	ldrb	r4, [r7, #1]
 8003564:	78ba      	ldrb	r2, [r7, #2]
 8003566:	78f9      	ldrb	r1, [r7, #3]
 8003568:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800356a:	9302      	str	r3, [sp, #8]
 800356c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4623      	mov	r3, r4
 800357a:	f004 fe8f 	bl	800829c <USB_HC_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bd90      	pop	{r4, r7, pc}

08003594 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_HCD_HC_Halt+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e00f      	b.n	80035d2 <HAL_HCD_HC_Halt+0x3e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f005 f8c9 	bl	800875a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_HCD_HC_SubmitRequest>:
                                            uint8_t ep_type,
                                            uint8_t token,
                                            uint8_t* pbuff,
                                            uint16_t length,
                                            uint8_t do_ping)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	70fb      	strb	r3, [r7, #3]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70bb      	strb	r3, [r7, #2]
 80035f2:	4613      	mov	r3, r2
 80035f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	333b      	adds	r3, #59	; 0x3b
 8003606:	78ba      	ldrb	r2, [r7, #2]
 8003608:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	333f      	adds	r3, #63	; 0x3f
 800361a:	787a      	ldrb	r2, [r7, #1]
 800361c:	701a      	strb	r2, [r3, #0]

  if(token == 0)
 800361e:	7c3b      	ldrb	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	3342      	adds	r3, #66	; 0x42
 8003634:	2203      	movs	r2, #3
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e009      	b.n	800364e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	3342      	adds	r3, #66	; 0x42
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch(ep_type)
 800364e:	787b      	ldrb	r3, [r7, #1]
 8003650:	2b03      	cmp	r3, #3
 8003652:	f200 80d7 	bhi.w	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <HAL_HCD_HC_SubmitRequest+0x80>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	0800366d 	.word	0x0800366d
 8003660:	080037ed 	.word	0x080037ed
 8003664:	080036d9 	.word	0x080036d9
 8003668:	08003763 	.word	0x08003763
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 800366c:	7c3b      	ldrb	r3, [r7, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 80c7 	bne.w	8003802 <HAL_HCD_HC_SubmitRequest+0x226>
 8003674:	78bb      	ldrb	r3, [r7, #2]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 80c3 	bne.w	8003802 <HAL_HCD_HC_SubmitRequest+0x226>
    {
      if ( length == 0 )
 800367c:	8b3b      	ldrh	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	3351      	adds	r3, #81	; 0x51
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
      }

      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	440b      	add	r3, r1
 80036a4:	3351      	adds	r3, #81	; 0x51
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	3342      	adds	r3, #66	; 0x42
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 80036c0:	e09f      	b.n	8003802 <HAL_HCD_HC_SubmitRequest+0x226>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	3342      	adds	r3, #66	; 0x42
 80036d2:	2202      	movs	r2, #2
 80036d4:	701a      	strb	r2, [r3, #0]
    break;
 80036d6:	e094      	b.n	8003802 <HAL_HCD_HC_SubmitRequest+0x226>

  case EP_TYPE_BULK:
    if(direction == 0)
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d120      	bne.n	8003720 <HAL_HCD_HC_SubmitRequest+0x144>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	3351      	adds	r3, #81	; 0x51
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_HCD_HC_SubmitRequest+0x12e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	3342      	adds	r3, #66	; 0x42
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }

    break;
 8003708:	e07c      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	440b      	add	r3, r1
 8003718:	3342      	adds	r3, #66	; 0x42
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
    break;
 800371e:	e071      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	440b      	add	r3, r1
 800372e:	3350      	adds	r3, #80	; 0x50
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_HCD_HC_SubmitRequest+0x170>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	3342      	adds	r3, #66	; 0x42
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
    break;
 800374a:	e05b      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	440b      	add	r3, r1
 800375a:	3342      	adds	r3, #66	; 0x42
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
    break;
 8003760:	e050      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
  case EP_TYPE_INTR:
    if(direction == 0)
 8003762:	78bb      	ldrb	r3, [r7, #2]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d120      	bne.n	80037aa <HAL_HCD_HC_SubmitRequest+0x1ce>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	3351      	adds	r3, #81	; 0x51
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_HCD_HC_SubmitRequest+0x1b8>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	3342      	adds	r3, #66	; 0x42
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 8003792:	e037      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1 ;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	3342      	adds	r3, #66	; 0x42
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]
    break;
 80037a8:	e02c      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
      if( hhcd->hc[ch_num].toggle_in == 0)
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	3350      	adds	r3, #80	; 0x50
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_HCD_HC_SubmitRequest+0x1fa>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	3342      	adds	r3, #66	; 0x42
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
    break;
 80037d4:	e016      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	3342      	adds	r3, #66	; 0x42
 80037e6:	2202      	movs	r2, #2
 80037e8:	701a      	strb	r2, [r3, #0]
    break;
 80037ea:	e00b      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>

  case EP_TYPE_ISOC:
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	3342      	adds	r3, #66	; 0x42
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
    break;
 8003800:	e000      	b.n	8003804 <HAL_HCD_HC_SubmitRequest+0x228>
    break;
 8003802:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	3344      	adds	r3, #68	; 0x44
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	8b39      	ldrh	r1, [r7, #24]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4403      	add	r3, r0
 8003828:	3348      	adds	r3, #72	; 0x48
 800382a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state =   URB_IDLE;
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	440b      	add	r3, r1
 800383a:	335c      	adds	r3, #92	; 0x5c
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0 ;
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	334c      	adds	r3, #76	; 0x4c
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	3339      	adds	r3, #57	; 0x39
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	335d      	adds	r3, #93	; 0x5d
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	3338      	adds	r3, #56	; 0x38
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	18d1      	adds	r1, r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	f004 fdfc 	bl	8008494 <USB_HC_StartXfer>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop

080038a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	613b      	str	r3, [r7, #16]
  uint32_t i = 0 , interrupt = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f004 fb4b 	bl	8007f5e <USB_GetMode>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	f040 80eb 	bne.w	8003aa6 <HAL_HCD_IRQHandler+0x1fe>
  {
    /* avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 fb2d 	bl	8007f34 <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80e1 	beq.w	8003aa4 <HAL_HCD_IRQHandler+0x1fc>
    {
      return;
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fb24 	bl	8007f34 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038f6:	d104      	bne.n	8003902 <HAL_HCD_IRQHandler+0x5a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003900:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fb14 	bl	8007f34 <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003916:	d104      	bne.n	8003922 <HAL_HCD_IRQHandler+0x7a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003920:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f004 fb04 	bl	8007f34 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003932:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003936:	d104      	bne.n	8003942 <HAL_HCD_IRQHandler+0x9a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003940:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f004 faf4 	bl	8007f34 <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d103      	bne.n	800395e <HAL_HCD_IRQHandler+0xb6>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2202      	movs	r2, #2
 800395c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f004 fae6 	bl	8007f34 <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800396e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003972:	d118      	bne.n	80039a6 <HAL_HCD_IRQHandler+0xfe>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800397a:	461a      	mov	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003988:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f010 fe10 	bl	80145b0 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f004 fbc4 	bl	8008124 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fac2 	bl	8007f34 <USB_ReadInterrupts>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ba:	d102      	bne.n	80039c2 <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f001 f8a9 	bl	8004b14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 fab4 	bl	8007f34 <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d106      	bne.n	80039e4 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f010 fdce 	bl	8014578 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2208      	movs	r2, #8
 80039e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f004 faa3 	bl	8007f34 <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f8:	d136      	bne.n	8003a68 <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 fe9c 	bl	800873c <USB_HC_ReadInterrupt>
 8003a04:	60f8      	str	r0, [r7, #12]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e023      	b.n	8003a54 <HAL_HCD_IRQHandler+0x1ac>
      {
        if (interrupt & (1 << i))
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d017      	beq.n	8003a4e <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler (hhcd, i);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f8ca 	bl	8003bd4 <HCD_HC_IN_IRQHandler>
 8003a40:	e005      	b.n	8003a4e <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fc55 	bl	80042f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3301      	adds	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d8d6      	bhi.n	8003a0c <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a66:	615a      	str	r2, [r3, #20]
    }

        /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f004 fa61 	bl	8007f34 <USB_ReadInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d114      	bne.n	8003aa6 <HAL_HCD_IRQHandler+0x1fe>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	6992      	ldr	r2, [r2, #24]
 8003a86:	f022 0210 	bic.w	r2, r2, #16
 8003a8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler (hhcd);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 ff8f 	bl	80049b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	6992      	ldr	r2, [r2, #24]
 8003a9c:	f042 0210 	orr.w	r2, r2, #16
 8003aa0:	619a      	str	r2, [r3, #24]
 8003aa2:	e000      	b.n	8003aa6 <HAL_HCD_IRQHandler+0x1fe>
      return;
 8003aa4:	bf00      	nop
    }
  }
}
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_HCD_Start+0x16>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e013      	b.n	8003aea <HAL_HCD_Start+0x3e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f004 f93c 	bl	8007d4c <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 fb84 	bl	80081e8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_HCD_Stop+0x16>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e00d      	b.n	8003b24 <HAL_HCD_Stop+0x32>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f004 ff67 	bl	80089e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 fb2d 	bl	8008198 <USB_ResetPort>
 8003b3e:	4603      	mov	r3, r0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	335c      	adds	r3, #92	; 0x5c
 8003b64:	781b      	ldrb	r3, [r3, #0]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	334c      	adds	r3, #76	; 0x4c
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f004 fb67 	bl	800827c <USB_GetCurrentFrame>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 fb46 	bl	8008256 <USB_GetHostSpeed>
 8003bca:	4603      	mov	r3, r0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler   (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01a      	beq.n	8003c36 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2304      	movs	r3, #4
 8003c10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1e:	4619      	mov	r1, r3
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f043 0302 	orr.w	r3, r3, #2
 8003c32:	60cb      	str	r3, [r1, #12]
 8003c34:	e094      	b.n	8003d60 <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2320      	movs	r3, #32
 8003c5c:	6093      	str	r3, [r2, #8]
 8003c5e:	e07f      	b.n	8003d60 <HCD_HC_IN_IRQHandler+0x18c>
  }

  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d034      	beq.n	8003ce0 <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c82:	4619      	mov	r1, r3
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	335d      	adds	r3, #93	; 0x5d
 8003ca8:	2205      	movs	r2, #5
 8003caa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2310      	movs	r3, #16
 8003cbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2308      	movs	r3, #8
 8003cce:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f004 fd3e 	bl	800875a <USB_HC_Halt>
 8003cde:	e03f      	b.n	8003d60 <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d034      	beq.n	8003d60 <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	4619      	mov	r1, r3
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f043 0302 	orr.w	r3, r3, #2
 8003d16:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f004 fd1a 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	461a      	mov	r2, r3
 8003d34:	2310      	movs	r3, #16
 8003d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	335d      	adds	r3, #93	; 0x5d
 8003d48:	2208      	movs	r2, #8
 8003d4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5e:	6093      	str	r3, [r2, #8]
  }

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d022      	beq.n	8003dbc <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	4619      	mov	r1, r3
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 fcda 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db2:	461a      	mov	r2, r3
 8003db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db8:	6093      	str	r3, [r2, #8]
         USB_HC_Halt(hhcd->Instance, chnum);
       }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
  }
}
 8003dba:	e299      	b.n	80042f0 <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80c0 	beq.w	8003f54 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	78f9      	ldrb	r1, [r7, #3]
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4403      	add	r3, r0
 8003dec:	3348      	adds	r3, #72	; 0x48
 8003dee:	6819      	ldr	r1, [r3, #0]
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	0158      	lsls	r0, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4403      	add	r3, r0
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003e02:	1ac9      	subs	r1, r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4403      	add	r3, r0
 8003e10:	334c      	adds	r3, #76	; 0x4c
 8003e12:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	335d      	adds	r3, #93	; 0x5d
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	440b      	add	r3, r1
 8003e36:	3358      	adds	r3, #88	; 0x58
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	333f      	adds	r3, #63	; 0x3f
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	440b      	add	r3, r1
 8003e72:	333f      	adds	r3, #63	; 0x3f
 8003e74:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d121      	bne.n	8003ebe <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e86:	4619      	mov	r1, r3
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f004 fc58 	bl	800875a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2310      	movs	r3, #16
 8003eba:	6093      	str	r3, [r2, #8]
 8003ebc:	e033      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	333f      	adds	r3, #63	; 0x3f
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d128      	bne.n	8003f26 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ef4:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	440b      	add	r3, r1
 8003f04:	335c      	adds	r3, #92	; 0x5c
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	440b      	add	r3, r1
 8003f18:	335c      	adds	r3, #92	; 0x5c
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f010 fb53 	bl	80145cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1;
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	78f9      	ldrb	r1, [r7, #3]
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4403      	add	r3, r0
 8003f36:	3350      	adds	r3, #80	; 0x50
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	f083 0301 	eor.w	r3, r3, #1
 8003f3e:	b2d8      	uxtb	r0, r3
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3350      	adds	r3, #80	; 0x50
 8003f4e:	4602      	mov	r2, r0
 8003f50:	701a      	strb	r2, [r3, #0]
}
 8003f52:	e1cd      	b.n	80042f0 <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80e6 	beq.w	8004138 <HCD_HC_IN_IRQHandler+0x564>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	4619      	mov	r1, r3
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f023 0302 	bic.w	r3, r3, #2
 8003f8c:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	335d      	adds	r3, #93	; 0x5d
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10a      	bne.n	8003fba <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	335c      	adds	r3, #92	; 0x5c
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e0a6      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	335d      	adds	r3, #93	; 0x5d
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d10a      	bne.n	8003fe6 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	335c      	adds	r3, #92	; 0x5c
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e090      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x534>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	335d      	adds	r3, #93	; 0x5d
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b06      	cmp	r3, #6
 8003ffa:	d00a      	beq.n	8004012 <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	335d      	adds	r3, #93	; 0x5d
 800400c:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800400e:	2b08      	cmp	r3, #8
 8004010:	d14c      	bne.n	80040ac <HCD_HC_IN_IRQHandler+0x4d8>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	440b      	add	r3, r1
 8004020:	3358      	adds	r3, #88	; 0x58
 8004022:	6819      	ldr	r1, [r3, #0]
 8004024:	1c48      	adds	r0, r1, #1
 8004026:	687c      	ldr	r4, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4423      	add	r3, r4
 8004032:	3358      	adds	r3, #88	; 0x58
 8004034:	6018      	str	r0, [r3, #0]
 8004036:	2903      	cmp	r1, #3
 8004038:	d914      	bls.n	8004064 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0;
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	440b      	add	r3, r1
 8004048:	3358      	adds	r3, #88	; 0x58
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	335c      	adds	r3, #92	; 0x5c
 800405e:	2204      	movs	r2, #4
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e009      	b.n	8004078 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	440b      	add	r3, r1
 8004072:	335c      	adds	r3, #92	; 0x5c
 8004074:	2202      	movs	r2, #2
 8004076:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800408e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004096:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	461a      	mov	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e02d      	b.n	8004108 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	335d      	adds	r3, #93	; 0x5d
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d122      	bne.n	8004108 <HCD_HC_IN_IRQHandler+0x534>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	335c      	adds	r3, #92	; 0x5c
 80040d2:	2202      	movs	r2, #2
 80040d4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040ec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040f4:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	461a      	mov	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	2302      	movs	r3, #2
 8004118:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	335c      	adds	r3, #92	; 0x5c
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f010 fa4b 	bl	80145cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004136:	e0db      	b.n	80042f0 <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d03d      	beq.n	80041ca <HCD_HC_IN_IRQHandler+0x5f6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	4619      	mov	r1, r3
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	60cb      	str	r3, [r1, #12]
     hhcd->hc[chnum].ErrCnt++;
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	3358      	adds	r3, #88	; 0x58
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	1c59      	adds	r1, r3, #1
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4403      	add	r3, r0
 8004190:	3358      	adds	r3, #88	; 0x58
 8004192:	6019      	str	r1, [r3, #0]
     hhcd->hc[chnum].state = HC_XACTERR;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	335d      	adds	r3, #93	; 0x5d
 80041a4:	2206      	movs	r2, #6
 80041a6:	701a      	strb	r2, [r3, #0]
     USB_HC_Halt(hhcd->Instance, chnum);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f004 fad2 	bl	800875a <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	461a      	mov	r2, r3
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	6093      	str	r3, [r2, #8]
}
 80041c8:	e092      	b.n	80042f0 <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8087 	beq.w	80042f0 <HCD_HC_IN_IRQHandler+0x71c>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	333f      	adds	r3, #63	; 0x3f
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d12c      	bne.n	8004252 <HCD_HC_IN_IRQHandler+0x67e>
       hhcd->hc[chnum].ErrCnt = 0;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	440b      	add	r3, r1
 8004206:	3358      	adds	r3, #88	; 0x58
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
       hhcd->hc[chnum].state = HC_NAK;
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	440b      	add	r3, r1
 800421a:	335d      	adds	r3, #93	; 0x5d
 800421c:	2203      	movs	r2, #3
 800421e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	4619      	mov	r1, r3
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f043 0302 	orr.w	r3, r3, #2
 8004240:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f004 fa85 	bl	800875a <USB_HC_Halt>
 8004250:	e045      	b.n	80042de <HCD_HC_IN_IRQHandler+0x70a>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	440b      	add	r3, r1
 8004260:	333f      	adds	r3, #63	; 0x3f
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HCD_HC_IN_IRQHandler+0x6aa>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	440b      	add	r3, r1
 8004276:	333f      	adds	r3, #63	; 0x3f
 8004278:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800427a:	2b02      	cmp	r3, #2
 800427c:	d12f      	bne.n	80042de <HCD_HC_IN_IRQHandler+0x70a>
       hhcd->hc[chnum].ErrCnt = 0;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	440b      	add	r3, r1
 800428c:	3358      	adds	r3, #88	; 0x58
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
       if (!hhcd->Init.dma_enable)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d121      	bne.n	80042de <HCD_HC_IN_IRQHandler+0x70a>
         hhcd->hc[chnum].state = HC_NAK;
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	440b      	add	r3, r1
 80042a8:	335d      	adds	r3, #93	; 0x5d
 80042aa:	2203      	movs	r2, #3
 80042ac:	701a      	strb	r2, [r3, #0]
         __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	4619      	mov	r1, r3
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	60cb      	str	r3, [r1, #12]
         USB_HC_Halt(hhcd->Instance, chnum);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f004 fa3e 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	2310      	movs	r3, #16
 80042ee:	6093      	str	r3, [r2, #8]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd90      	pop	{r4, r7, pc}

080042f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01a      	beq.n	800435a <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	461a      	mov	r2, r3
 8004332:	2304      	movs	r3, #4
 8004334:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004342:	4619      	mov	r1, r3
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f043 0302 	orr.w	r3, r3, #2
 8004356:	60cb      	str	r3, [r1, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
  }
}
 8004358:	e326      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d041      	beq.n	80043f4 <HCD_HC_OUT_IRQHandler+0xfc>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437c:	461a      	mov	r2, r3
 800437e:	2320      	movs	r3, #32
 8004380:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	440b      	add	r3, r1
 8004390:	333d      	adds	r3, #61	; 0x3d
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	f040 8307 	bne.w	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[chnum].do_ping = 0;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	333d      	adds	r3, #61	; 0x3d
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	335c      	adds	r3, #92	; 0x5c
 80043be:	2202      	movs	r2, #2
 80043c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ce:	4619      	mov	r1, r3
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f004 f9b4 	bl	800875a <USB_HC_Halt>
}
 80043f2:	e2d9      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d03f      	beq.n	800448a <HCD_HC_OUT_IRQHandler+0x192>
    hhcd->hc[chnum].state = HC_NYET;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	335d      	adds	r3, #93	; 0x5d
 800441a:	2204      	movs	r2, #4
 800441c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1;
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	440b      	add	r3, r1
 800442c:	333d      	adds	r3, #61	; 0x3d
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	3358      	adds	r3, #88	; 0x58
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	4619      	mov	r1, r3
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f043 0302 	orr.w	r3, r3, #2
 8004466:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f004 f972 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	461a      	mov	r2, r3
 8004484:	2340      	movs	r3, #64	; 0x40
 8004486:	6093      	str	r3, [r2, #8]
}
 8004488:	e28e      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449c:	2b00      	cmp	r3, #0
 800449e:	d022      	beq.n	80044e6 <HCD_HC_OUT_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ac:	4619      	mov	r1, r3
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f004 f945 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	461a      	mov	r2, r3
 80044de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e2:	6093      	str	r3, [r2, #8]
}
 80044e4:	e260      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d035      	beq.n	8004568 <HCD_HC_OUT_IRQHandler+0x270>
      hhcd->hc[chnum].ErrCnt = 0;
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	440b      	add	r3, r1
 800450a:	3358      	adds	r3, #88	; 0x58
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	4619      	mov	r1, r3
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f004 f90d 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454c:	461a      	mov	r2, r3
 800454e:	2301      	movs	r3, #1
 8004550:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	440b      	add	r3, r1
 8004560:	335d      	adds	r3, #93	; 0x5d
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
}
 8004566:	e21f      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02b      	beq.n	80045d6 <HCD_HC_OUT_IRQHandler+0x2de>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458a:	461a      	mov	r2, r3
 800458c:	2308      	movs	r3, #8
 800458e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	4619      	mov	r1, r3
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 f8cd 	bl	800875a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	335d      	adds	r3, #93	; 0x5d
 80045d0:	2205      	movs	r2, #5
 80045d2:	701a      	strb	r2, [r3, #0]
}
 80045d4:	e1e8      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d055      	beq.n	8004698 <HCD_HC_OUT_IRQHandler+0x3a0>
    hhcd->hc[chnum].ErrCnt = 0;
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	3358      	adds	r3, #88	; 0x58
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	335d      	adds	r3, #93	; 0x5d
 8004610:	2203      	movs	r2, #3
 8004612:	701a      	strb	r2, [r3, #0]
    if ( hhcd->hc[chnum].do_ping == 0)
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	333d      	adds	r3, #61	; 0x3d
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d114      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x35c>
      if (hhcd->hc[chnum].speed == HCD_SPEED_HIGH)
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	440b      	add	r3, r1
 8004638:	333c      	adds	r3, #60	; 0x3c
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x35c>
        hhcd->hc[chnum].do_ping = 1;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	440b      	add	r3, r1
 800464e:	333d      	adds	r3, #61	; 0x3d
 8004650:	2201      	movs	r2, #1
 8004652:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	4619      	mov	r1, r3
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f043 0302 	orr.w	r3, r3, #2
 8004674:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f004 f86b 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	461a      	mov	r2, r3
 8004692:	2310      	movs	r3, #16
 8004694:	6093      	str	r3, [r2, #8]
}
 8004696:	e187      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02b      	beq.n	8004706 <HCD_HC_OUT_IRQHandler+0x40e>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	4619      	mov	r1, r3
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f043 0302 	orr.w	r3, r3, #2
 80046ce:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f004 f83e 	bl	800875a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	335d      	adds	r3, #93	; 0x5d
 80046ee:	2206      	movs	r2, #6
 80046f0:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fe:	461a      	mov	r2, r3
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	6093      	str	r3, [r2, #8]
}
 8004704:	e150      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d035      	beq.n	8004788 <HCD_HC_OUT_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	4619      	mov	r1, r3
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f004 f807 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	461a      	mov	r2, r3
 800475a:	2310      	movs	r3, #16
 800475c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004770:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	440b      	add	r3, r1
 8004780:	335d      	adds	r3, #93	; 0x5d
 8004782:	2208      	movs	r2, #8
 8004784:	701a      	strb	r2, [r3, #0]
}
 8004786:	e10f      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8104 	beq.w	80049a8 <HCD_HC_OUT_IRQHandler+0x6b0>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ac:	4619      	mov	r1, r3
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f023 0302 	bic.w	r3, r3, #2
 80047c0:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	440b      	add	r3, r1
 80047d0:	335d      	adds	r3, #93	; 0x5d
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d12c      	bne.n	8004832 <HCD_HC_OUT_IRQHandler+0x53a>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	440b      	add	r3, r1
 80047e6:	335c      	adds	r3, #92	; 0x5c
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	333f      	adds	r3, #63	; 0x3f
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	f040 80bb 	bne.w	800497a <HCD_HC_OUT_IRQHandler+0x682>
        hhcd->hc[chnum].toggle_out ^= 1;
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	78f9      	ldrb	r1, [r7, #3]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4403      	add	r3, r0
 8004814:	3351      	adds	r3, #81	; 0x51
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f083 0301 	eor.w	r3, r3, #1
 800481c:	b2d8      	uxtb	r0, r3
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	440b      	add	r3, r1
 800482a:	3351      	adds	r3, #81	; 0x51
 800482c:	4602      	mov	r2, r0
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e0a3      	b.n	800497a <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	440b      	add	r3, r1
 8004840:	335d      	adds	r3, #93	; 0x5d
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d10a      	bne.n	800485e <HCD_HC_OUT_IRQHandler+0x566>
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	440b      	add	r3, r1
 8004856:	335c      	adds	r3, #92	; 0x5c
 8004858:	2202      	movs	r2, #2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e08d      	b.n	800497a <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NYET)
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	440b      	add	r3, r1
 800486c:	335d      	adds	r3, #93	; 0x5d
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d10a      	bne.n	800488a <HCD_HC_OUT_IRQHandler+0x592>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	440b      	add	r3, r1
 8004882:	335c      	adds	r3, #92	; 0x5c
 8004884:	2202      	movs	r2, #2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e077      	b.n	800497a <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_STALL)
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	440b      	add	r3, r1
 8004898:	335d      	adds	r3, #93	; 0x5d
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b05      	cmp	r3, #5
 800489e:	d10a      	bne.n	80048b6 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	440b      	add	r3, r1
 80048ae:	335c      	adds	r3, #92	; 0x5c
 80048b0:	2205      	movs	r2, #5
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	e061      	b.n	800497a <HCD_HC_OUT_IRQHandler+0x682>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	440b      	add	r3, r1
 80048c4:	335d      	adds	r3, #93	; 0x5d
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d00a      	beq.n	80048e2 <HCD_HC_OUT_IRQHandler+0x5ea>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80048cc:	78fa      	ldrb	r2, [r7, #3]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	440b      	add	r3, r1
 80048da:	335d      	adds	r3, #93	; 0x5d
 80048dc:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d14b      	bne.n	800497a <HCD_HC_OUT_IRQHandler+0x682>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3358      	adds	r3, #88	; 0x58
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	1c48      	adds	r0, r1, #1
 80048f6:	687c      	ldr	r4, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4423      	add	r3, r4
 8004902:	3358      	adds	r3, #88	; 0x58
 8004904:	6018      	str	r0, [r3, #0]
 8004906:	2903      	cmp	r1, #3
 8004908:	d914      	bls.n	8004934 <HCD_HC_OUT_IRQHandler+0x63c>
        hhcd->hc[chnum].ErrCnt = 0;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	440b      	add	r3, r1
 8004918:	3358      	adds	r3, #88	; 0x58
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	440b      	add	r3, r1
 800492c:	335c      	adds	r3, #92	; 0x5c
 800492e:	2204      	movs	r2, #4
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e009      	b.n	8004948 <HCD_HC_OUT_IRQHandler+0x650>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	335c      	adds	r3, #92	; 0x5c
 8004944:	2202      	movs	r2, #2
 8004946:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800495e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004966:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	461a      	mov	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004986:	461a      	mov	r2, r3
 8004988:	2302      	movs	r3, #2
 800498a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	440b      	add	r3, r1
 800499a:	335c      	adds	r3, #92	; 0x5c
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f00f fe12 	bl	80145cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}

080049b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61fb      	str	r3, [r7, #28]
  uint8_t                       channelnum =0;
 80049be:	2300      	movs	r3, #0
 80049c0:	76fb      	strb	r3, [r7, #27]
  uint32_t                      pktsts;
  uint32_t                      pktcnt;
  uint32_t                      temp = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]

  temp = hhcd->Instance->GRXSTSP ;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	0c5b      	lsrs	r3, r3, #17
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ee:	60bb      	str	r3, [r7, #8]

  switch (pktsts)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d003      	beq.n	80049fe <HCD_RXQLVL_IRQHandler+0x4e>
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	f000 8082 	beq.w	8004b00 <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 80049fc:	e083      	b.n	8004b06 <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d07f      	beq.n	8004b04 <HCD_RXQLVL_IRQHandler+0x154>
 8004a04:	7efa      	ldrb	r2, [r7, #27]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	440b      	add	r3, r1
 8004a12:	3344      	adds	r3, #68	; 0x44
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d074      	beq.n	8004b04 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	7efa      	ldrb	r2, [r7, #27]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3344      	adds	r3, #68	; 0x44
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	b292      	uxth	r2, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	f003 fa53 	bl	8007ee0 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;
 8004a3a:	7efa      	ldrb	r2, [r7, #27]
 8004a3c:	7ef9      	ldrb	r1, [r7, #27]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4403      	add	r3, r0
 8004a4a:	3344      	adds	r3, #68	; 0x44
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4419      	add	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4403      	add	r3, r0
 8004a5e:	3344      	adds	r3, #68	; 0x44
 8004a60:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8004a62:	7efa      	ldrb	r2, [r7, #27]
 8004a64:	7ef9      	ldrb	r1, [r7, #27]
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4403      	add	r3, r0
 8004a72:	334c      	adds	r3, #76	; 0x4c
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4419      	add	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4403      	add	r3, r0
 8004a86:	334c      	adds	r3, #76	; 0x4c
 8004a88:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8004a8a:	7efb      	ldrb	r3, [r7, #27]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HCD_RXQLVL_IRQHandler+0x160>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d031      	beq.n	8004b04 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8004aa0:	7efb      	ldrb	r3, [r7, #27]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004abe:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8004ac0:	7efb      	ldrb	r3, [r7, #27]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004acc:	461a      	mov	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8004ad2:	7efa      	ldrb	r2, [r7, #27]
 8004ad4:	7ef9      	ldrb	r1, [r7, #27]
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4403      	add	r3, r0
 8004ae2:	3350      	adds	r3, #80	; 0x50
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	f083 0301 	eor.w	r3, r3, #1
 8004aea:	b2d8      	uxtb	r0, r3
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	3350      	adds	r3, #80	; 0x50
 8004afa:	4602      	mov	r2, r0
 8004afc:	701a      	strb	r2, [r3, #0]
    break;
 8004afe:	e001      	b.n	8004b04 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8004b04:	bf00      	nop
  }
}
 8004b06:	bf00      	nop
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	1ff80000 	.word	0x1ff80000

08004b14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b3c:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d113      	bne.n	8004b70 <HCD_Port_IRQHandler+0x5c>
  {
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d10a      	bne.n	8004b68 <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	6992      	ldr	r2, [r2, #24]
 8004b5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b60:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f00f fd16 	bl	8014594 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	60fb      	str	r3, [r7, #12]

  }

  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d142      	bne.n	8004c00 <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f043 0308 	orr.w	r3, r3, #8
 8004b80:	60fb      	str	r3, [r7, #12]

    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d126      	bne.n	8004bda <HCD_Port_IRQHandler+0xc6>
    {
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d113      	bne.n	8004bbc <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b9e:	d106      	bne.n	8004bae <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f003 fabc 	bl	8008124 <USB_InitFSLSPClkSel>
 8004bac:	e011      	b.n	8004bd2 <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f003 fab5 	bl	8008124 <USB_InitFSLSPClkSel>
 8004bba:	e00a      	b.n	8004bd2 <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d106      	bne.n	8004bd2 <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = (uint32_t)60000;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004bd0:	6053      	str	r3, [r2, #4]
        }
      }
      HAL_HCD_Connect_Callback(hhcd);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f00f fcde 	bl	8014594 <HAL_HCD_Connect_Callback>
 8004bd8:	e012      	b.n	8004c00 <HCD_Port_IRQHandler+0xec>

    }
    else
    {
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004be0:	461a      	mov	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bee:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	6992      	ldr	r2, [r2, #24]
 8004bfa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004bfe:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d103      	bne.n	8004c12 <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f043 0320 	orr.w	r3, r3, #32
 8004c10:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07e      	b.n	8004d38 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f00f f960 	bl	8013f14 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6852      	ldr	r2, [r2, #4]
 8004c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d107      	bne.n	8004ca2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	e006      	b.n	8004cb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004cae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d104      	bne.n	8004cc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_I2C_Init+0x118>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	68d2      	ldr	r2, [r2, #12]
 8004cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6911      	ldr	r1, [r2, #16]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6952      	ldr	r2, [r2, #20]
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6992      	ldr	r2, [r2, #24]
 8004cf4:	0212      	lsls	r2, r2, #8
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	69d1      	ldr	r1, [r2, #28]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6a12      	ldr	r2, [r2, #32]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	02008000 	.word	0x02008000

08004d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d138      	bne.n	8004dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e032      	b.n	8004dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e000      	b.n	8004dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d139      	bne.n	8004e68 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e033      	b.n	8004e6a <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2224      	movs	r2, #36	; 0x24
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	2300      	movs	r3, #0
 8004e86:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e0c7      	b.n	8005022 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f00f f864 	bl	8013f74 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	6992      	ldr	r2, [r2, #24]
 8004ebe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004ec2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	6991      	ldr	r1, [r2, #24]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6850      	ldr	r0, [r2, #4]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6892      	ldr	r2, [r2, #8]
 8004ed6:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004edc:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6912      	ldr	r2, [r2, #16]
 8004ee2:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6899      	ldr	r1, [r3, #8]
 8004ef2:	4b4e      	ldr	r3, [pc, #312]	; (800502c <HAL_LTDC_Init+0x1b4>)
 8004ef4:	400b      	ands	r3, r1
 8004ef6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	6891      	ldr	r1, [r2, #8]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6990      	ldr	r0, [r2, #24]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4302      	orrs	r2, r0
 8004f12:	430a      	orrs	r2, r1
 8004f14:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68d9      	ldr	r1, [r3, #12]
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_LTDC_Init+0x1b4>)
 8004f22:	400b      	ands	r3, r1
 8004f24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	68d1      	ldr	r1, [r2, #12]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6a10      	ldr	r0, [r2, #32]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4302      	orrs	r2, r0
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6919      	ldr	r1, [r3, #16]
 8004f4e:	4b37      	ldr	r3, [pc, #220]	; (800502c <HAL_LTDC_Init+0x1b4>)
 8004f50:	400b      	ands	r3, r1
 8004f52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	6911      	ldr	r1, [r2, #16]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4302      	orrs	r2, r0
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6959      	ldr	r1, [r3, #20]
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <HAL_LTDC_Init+0x1b4>)
 8004f7e:	400b      	ands	r3, r1
 8004f80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	6951      	ldr	r1, [r2, #20]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4302      	orrs	r2, r0
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fce:	68b8      	ldr	r0, [r7, #8]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4302      	orrs	r2, r0
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004fda:	4302      	orrs	r2, r0
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fea:	f042 0204 	orr.w	r2, r2, #4
 8004fee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ffa:	f042 0202 	orr.w	r2, r2, #2
 8004ffe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	6992      	ldr	r2, [r2, #24]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	f000f800 	.word	0xf000f800

08005030 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8005030:	b5b0      	push	{r4, r5, r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_LTDC_ConfigLayer+0x1a>
 8005046:	2302      	movs	r3, #2
 8005048:	e02c      	b.n	80050a4 <HAL_LTDC_ConfigLayer+0x74>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2134      	movs	r1, #52	; 0x34
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	4413      	add	r3, r2
 8005066:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4614      	mov	r4, r2
 800506e:	461d      	mov	r5, r3
 8005070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800507a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f81f 	bl	80050c8 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2201      	movs	r2, #1
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bdb0      	pop	{r4, r5, r7, pc}

080050ac <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80050ba:	b2db      	uxtb	r3, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b089      	sub	sp, #36	; 0x24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f0:	4413      	add	r3, r2
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	01db      	lsls	r3, r3, #7
 8005100:	4413      	add	r3, r2
 8005102:	3384      	adds	r3, #132	; 0x84
 8005104:	461a      	mov	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	440b      	add	r3, r1
 8005112:	3384      	adds	r3, #132	; 0x84
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800511a:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	01db      	lsls	r3, r3, #7
 8005126:	4413      	add	r3, r2
 8005128:	3384      	adds	r3, #132	; 0x84
 800512a:	4619      	mov	r1, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513c:	4413      	add	r3, r2
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005154:	4413      	add	r3, r2
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	01db      	lsls	r3, r3, #7
 8005164:	4413      	add	r3, r2
 8005166:	3384      	adds	r3, #132	; 0x84
 8005168:	461a      	mov	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	01db      	lsls	r3, r3, #7
 8005174:	440b      	add	r3, r1
 8005176:	3384      	adds	r3, #132	; 0x84
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800517e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	01db      	lsls	r3, r3, #7
 800518a:	4413      	add	r3, r2
 800518c:	3384      	adds	r3, #132	; 0x84
 800518e:	4619      	mov	r1, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800519e:	4413      	add	r3, r2
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	01db      	lsls	r3, r3, #7
 80051b2:	4413      	add	r3, r2
 80051b4:	3384      	adds	r3, #132	; 0x84
 80051b6:	461a      	mov	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	01db      	lsls	r3, r3, #7
 80051c2:	440b      	add	r3, r1
 80051c4:	3384      	adds	r3, #132	; 0x84
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f023 0307 	bic.w	r3, r3, #7
 80051cc:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	01db      	lsls	r3, r3, #7
 80051d8:	4413      	add	r3, r2
 80051da:	3384      	adds	r3, #132	; 0x84
 80051dc:	461a      	mov	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80051f4:	041b      	lsls	r3, r3, #16
 80051f6:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	01db      	lsls	r3, r3, #7
 800520a:	4413      	add	r3, r2
 800520c:	3384      	adds	r3, #132	; 0x84
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	01db      	lsls	r3, r3, #7
 800521a:	4413      	add	r3, r2
 800521c:	3384      	adds	r3, #132	; 0x84
 800521e:	461a      	mov	r2, r3
 8005220:	2300      	movs	r3, #0
 8005222:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	01db      	lsls	r3, r3, #7
 800522e:	4413      	add	r3, r2
 8005230:	3384      	adds	r3, #132	; 0x84
 8005232:	4619      	mov	r1, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800523a:	461a      	mov	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	431a      	orrs	r2, r3
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	431a      	orrs	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	01db      	lsls	r3, r3, #7
 8005254:	4413      	add	r3, r2
 8005256:	3384      	adds	r3, #132	; 0x84
 8005258:	461a      	mov	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4619      	mov	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	01db      	lsls	r3, r3, #7
 8005264:	440b      	add	r3, r1
 8005266:	3384      	adds	r3, #132	; 0x84
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800526e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	01db      	lsls	r3, r3, #7
 800527a:	4413      	add	r3, r2
 800527c:	3384      	adds	r3, #132	; 0x84
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	01db      	lsls	r3, r3, #7
 8005290:	4413      	add	r3, r2
 8005292:	3384      	adds	r3, #132	; 0x84
 8005294:	4619      	mov	r1, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	01db      	lsls	r3, r3, #7
 80052a0:	4413      	add	r3, r2
 80052a2:	3384      	adds	r3, #132	; 0x84
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	4b5a      	ldr	r3, [pc, #360]	; (8005410 <LTDC_SetConfig+0x348>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	01db      	lsls	r3, r3, #7
 80052b6:	4413      	add	r3, r2
 80052b8:	3384      	adds	r3, #132	; 0x84
 80052ba:	4619      	mov	r1, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	01db      	lsls	r3, r3, #7
 80052d2:	4413      	add	r3, r2
 80052d4:	3384      	adds	r3, #132	; 0x84
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	01db      	lsls	r3, r3, #7
 80052e2:	4413      	add	r3, r2
 80052e4:	3384      	adds	r3, #132	; 0x84
 80052e6:	461a      	mov	r2, r3
 80052e8:	2300      	movs	r3, #0
 80052ea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	01db      	lsls	r3, r3, #7
 80052f6:	4413      	add	r3, r2
 80052f8:	3384      	adds	r3, #132	; 0x84
 80052fa:	461a      	mov	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 800530a:	2304      	movs	r3, #4
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e01b      	b.n	8005348 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d102      	bne.n	800531e <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 8005318:	2303      	movs	r3, #3
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e014      	b.n	8005348 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d00b      	beq.n	800533e <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800532a:	2b02      	cmp	r3, #2
 800532c:	d007      	beq.n	800533e <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005332:	2b03      	cmp	r3, #3
 8005334:	d003      	beq.n	800533e <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800533a:	2b07      	cmp	r3, #7
 800533c:	d102      	bne.n	8005344 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 800533e:	2302      	movs	r3, #2
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	e001      	b.n	8005348 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 8005344:	2301      	movs	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	4413      	add	r3, r2
 8005354:	3384      	adds	r3, #132	; 0x84
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4619      	mov	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	01db      	lsls	r3, r3, #7
 8005362:	440b      	add	r3, r1
 8005364:	3384      	adds	r3, #132	; 0x84
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800536c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	01db      	lsls	r3, r3, #7
 8005378:	4413      	add	r3, r2
 800537a:	3384      	adds	r3, #132	; 0x84
 800537c:	4618      	mov	r0, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	041a      	lsls	r2, r3, #16
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6859      	ldr	r1, [r3, #4]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	1acb      	subs	r3, r1, r3
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	3303      	adds	r3, #3
 800539c:	4313      	orrs	r3, r2
 800539e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	01db      	lsls	r3, r3, #7
 80053aa:	4413      	add	r3, r2
 80053ac:	3384      	adds	r3, #132	; 0x84
 80053ae:	4619      	mov	r1, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	4413      	add	r3, r2
 80053bc:	3384      	adds	r3, #132	; 0x84
 80053be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <LTDC_SetConfig+0x34c>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	01db      	lsls	r3, r3, #7
 80053d0:	4413      	add	r3, r2
 80053d2:	3384      	adds	r3, #132	; 0x84
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	01db      	lsls	r3, r3, #7
 80053e6:	4413      	add	r3, r2
 80053e8:	3384      	adds	r3, #132	; 0x84
 80053ea:	461a      	mov	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	01db      	lsls	r3, r3, #7
 80053f6:	440b      	add	r3, r1
 80053f8:	3384      	adds	r3, #132	; 0x84
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	6013      	str	r3, [r2, #0]
}
 8005402:	bf00      	nop
 8005404:	3724      	adds	r7, #36	; 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	fffff8f8 	.word	0xfffff8f8
 8005414:	fffff800 	.word	0xfffff800

08005418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005422:	4a23      	ldr	r2, [pc, #140]	; (80054b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005424:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800543c:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005444:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005446:	f7fc fb2d 	bl	8001aa4 <HAL_GetTick>
 800544a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800544c:	e009      	b.n	8005462 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800544e:	f7fc fb29 	bl	8001aa4 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800545c:	d901      	bls.n	8005462 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e022      	b.n	80054a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005462:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d1ee      	bne.n	800544e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005470:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800547c:	f7fc fb12 	bl	8001aa4 <HAL_GetTick>
 8005480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005482:	e009      	b.n	8005498 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005484:	f7fc fb0e 	bl	8001aa4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005492:	d901      	bls.n	8005498 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e007      	b.n	80054a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a4:	d1ee      	bne.n	8005484 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40023800 	.word	0x40023800
 80054b4:	40007000 	.word	0x40007000

080054b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e25c      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8087 	beq.w	80055ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054dc:	4b96      	ldr	r3, [pc, #600]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d00c      	beq.n	8005502 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e8:	4b93      	ldr	r3, [pc, #588]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 030c 	and.w	r3, r3, #12
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d112      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
 80054f4:	4b90      	ldr	r3, [pc, #576]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005500:	d10b      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005502:	4b8d      	ldr	r3, [pc, #564]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d06c      	beq.n	80055e8 <HAL_RCC_OscConfig+0x130>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d168      	bne.n	80055e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e236      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005522:	d106      	bne.n	8005532 <HAL_RCC_OscConfig+0x7a>
 8005524:	4a84      	ldr	r2, [pc, #528]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005526:	4b84      	ldr	r3, [pc, #528]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e02e      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10c      	bne.n	8005554 <HAL_RCC_OscConfig+0x9c>
 800553a:	4a7f      	ldr	r2, [pc, #508]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800553c:	4b7e      	ldr	r3, [pc, #504]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	4a7c      	ldr	r2, [pc, #496]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005548:	4b7b      	ldr	r3, [pc, #492]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e01d      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0xc0>
 800555e:	4a76      	ldr	r2, [pc, #472]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005560:	4b75      	ldr	r3, [pc, #468]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4a73      	ldr	r2, [pc, #460]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800556c:	4b72      	ldr	r3, [pc, #456]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e00b      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005578:	4a6f      	ldr	r2, [pc, #444]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800557a:	4b6f      	ldr	r3, [pc, #444]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	4a6c      	ldr	r2, [pc, #432]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005586:	4b6c      	ldr	r3, [pc, #432]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d013      	beq.n	80055c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fc fa84 	bl	8001aa4 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a0:	f7fc fa80 	bl	8001aa4 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	; 0x64
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e1ea      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	4b61      	ldr	r3, [pc, #388]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0xe8>
 80055be:	e014      	b.n	80055ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fc fa70 	bl	8001aa4 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055c8:	f7fc fa6c 	bl	8001aa4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	; 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e1d6      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055da:	4b57      	ldr	r3, [pc, #348]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x110>
 80055e6:	e000      	b.n	80055ea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d069      	beq.n	80056ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055f6:	4b50      	ldr	r3, [pc, #320]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005602:	4b4d      	ldr	r3, [pc, #308]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b08      	cmp	r3, #8
 800560c:	d11c      	bne.n	8005648 <HAL_RCC_OscConfig+0x190>
 800560e:	4b4a      	ldr	r3, [pc, #296]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d116      	bne.n	8005648 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561a:	4b47      	ldr	r3, [pc, #284]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_RCC_OscConfig+0x17a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d001      	beq.n	8005632 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e1aa      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005632:	4941      	ldr	r1, [pc, #260]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005634:	4b40      	ldr	r3, [pc, #256]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005646:	e040      	b.n	80056ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d023      	beq.n	8005698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005650:	4a39      	ldr	r2, [pc, #228]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fc fa22 	bl	8001aa4 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005664:	f7fc fa1e 	bl	8001aa4 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e188      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	4b30      	ldr	r3, [pc, #192]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	492d      	ldr	r1, [pc, #180]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005684:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
 8005696:	e018      	b.n	80056ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005698:	4a27      	ldr	r2, [pc, #156]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fc f9fe 	bl	8001aa4 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ac:	f7fc f9fa 	bl	8001aa4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e164      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056be:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d038      	beq.n	8005748 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d019      	beq.n	8005712 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056de:	4a16      	ldr	r2, [pc, #88]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80056e0:	4b15      	ldr	r3, [pc, #84]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 80056e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fc f9db 	bl	8001aa4 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fc f9d7 	bl	8001aa4 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e141      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x23a>
 8005710:	e01a      	b.n	8005748 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005714:	4b08      	ldr	r3, [pc, #32]	; (8005738 <HAL_RCC_OscConfig+0x280>)
 8005716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fc f9c1 	bl	8001aa4 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005726:	f7fc f9bd 	bl	8001aa4 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d903      	bls.n	800573c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e127      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
 8005738:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800573c:	4b94      	ldr	r3, [pc, #592]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 800573e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ee      	bne.n	8005726 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80a4 	beq.w	800589e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005756:	4b8e      	ldr	r3, [pc, #568]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005762:	4a8b      	ldr	r2, [pc, #556]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005764:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576c:	6413      	str	r3, [r2, #64]	; 0x40
 800576e:	4b88      	ldr	r3, [pc, #544]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800577e:	4b85      	ldr	r3, [pc, #532]	; (8005994 <HAL_RCC_OscConfig+0x4dc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d118      	bne.n	80057bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800578a:	4a82      	ldr	r2, [pc, #520]	; (8005994 <HAL_RCC_OscConfig+0x4dc>)
 800578c:	4b81      	ldr	r3, [pc, #516]	; (8005994 <HAL_RCC_OscConfig+0x4dc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005796:	f7fc f985 	bl	8001aa4 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800579e:	f7fc f981 	bl	8001aa4 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b64      	cmp	r3, #100	; 0x64
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e0eb      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b0:	4b78      	ldr	r3, [pc, #480]	; (8005994 <HAL_RCC_OscConfig+0x4dc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x31a>
 80057c4:	4a72      	ldr	r2, [pc, #456]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80057c6:	4b72      	ldr	r3, [pc, #456]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
 80057d0:	e02d      	b.n	800582e <HAL_RCC_OscConfig+0x376>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x33c>
 80057da:	4a6d      	ldr	r2, [pc, #436]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80057dc:	4b6c      	ldr	r3, [pc, #432]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	6713      	str	r3, [r2, #112]	; 0x70
 80057e6:	4a6a      	ldr	r2, [pc, #424]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80057e8:	4b69      	ldr	r3, [pc, #420]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	e01c      	b.n	800582e <HAL_RCC_OscConfig+0x376>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b05      	cmp	r3, #5
 80057fa:	d10c      	bne.n	8005816 <HAL_RCC_OscConfig+0x35e>
 80057fc:	4a64      	ldr	r2, [pc, #400]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80057fe:	4b64      	ldr	r3, [pc, #400]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	f043 0304 	orr.w	r3, r3, #4
 8005806:	6713      	str	r3, [r2, #112]	; 0x70
 8005808:	4a61      	ldr	r2, [pc, #388]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 800580a:	4b61      	ldr	r3, [pc, #388]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	6713      	str	r3, [r2, #112]	; 0x70
 8005814:	e00b      	b.n	800582e <HAL_RCC_OscConfig+0x376>
 8005816:	4a5e      	ldr	r2, [pc, #376]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005818:	4b5d      	ldr	r3, [pc, #372]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
 8005822:	4a5b      	ldr	r2, [pc, #364]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005824:	4b5a      	ldr	r3, [pc, #360]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f023 0304 	bic.w	r3, r3, #4
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d015      	beq.n	8005862 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005836:	f7fc f935 	bl	8001aa4 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583c:	e00a      	b.n	8005854 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583e:	f7fc f931 	bl	8001aa4 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e099      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005854:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ee      	beq.n	800583e <HAL_RCC_OscConfig+0x386>
 8005860:	e014      	b.n	800588c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fc f91f 	bl	8001aa4 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586a:	f7fc f91b 	bl	8001aa4 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	f241 3288 	movw	r2, #5000	; 0x1388
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e083      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005880:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1ee      	bne.n	800586a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d105      	bne.n	800589e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005892:	4a3f      	ldr	r2, [pc, #252]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005894:	4b3e      	ldr	r3, [pc, #248]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800589c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d06f      	beq.n	8005986 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a6:	4b3a      	ldr	r3, [pc, #232]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d067      	beq.n	8005982 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d149      	bne.n	800594e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ba:	4a35      	ldr	r2, [pc, #212]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80058bc:	4b34      	ldr	r3, [pc, #208]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7fc f8ed 	bl	8001aa4 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ce:	f7fc f8e9 	bl	8001aa4 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e053      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e0:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ec:	4928      	ldr	r1, [pc, #160]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69da      	ldr	r2, [r3, #28]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	3b01      	subs	r3, #1
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	061b      	lsls	r3, r3, #24
 8005912:	4313      	orrs	r3, r2
 8005914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005918:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591a:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 800591c:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fc f8bd 	bl	8001aa4 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592e:	f7fc f8b9 	bl	8001aa4 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e023      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005940:	4b13      	ldr	r3, [pc, #76]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x476>
 800594c:	e01b      	b.n	8005986 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005950:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595a:	f7fc f8a3 	bl	8001aa4 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005962:	f7fc f89f 	bl	8001aa4 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e009      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_RCC_OscConfig+0x4d8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f0      	bne.n	8005962 <HAL_RCC_OscConfig+0x4aa>
 8005980:	e001      	b.n	8005986 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40023800 	.word	0x40023800
 8005994:	40007000 	.word	0x40007000

08005998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0ce      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b0:	4b69      	ldr	r3, [pc, #420]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d210      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4966      	ldr	r1, [pc, #408]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 80059c0:	4b65      	ldr	r3, [pc, #404]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f023 020f 	bic.w	r2, r3, #15
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b62      	ldr	r3, [pc, #392]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0b6      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d020      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f8:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	4b58      	ldr	r3, [pc, #352]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a10:	4a52      	ldr	r2, [pc, #328]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a12:	4b52      	ldr	r3, [pc, #328]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a1c:	494f      	ldr	r1, [pc, #316]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a1e:	4b4f      	ldr	r3, [pc, #316]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d040      	beq.n	8005abc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d107      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a42:	4b46      	ldr	r3, [pc, #280]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d115      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e07d      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d107      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5a:	4b40      	ldr	r3, [pc, #256]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e071      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6a:	4b3c      	ldr	r3, [pc, #240]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e069      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a7a:	4938      	ldr	r1, [pc, #224]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a7c:	4b37      	ldr	r3, [pc, #220]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f023 0203 	bic.w	r2, r3, #3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8c:	f7fc f80a 	bl	8001aa4 <HAL_GetTick>
 8005a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a92:	e00a      	b.n	8005aaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a94:	f7fc f806 	bl	8001aa4 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e051      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aaa:	4b2c      	ldr	r3, [pc, #176]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 020c 	and.w	r2, r3, #12
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d1eb      	bne.n	8005a94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005abc:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 020f 	and.w	r2, r3, #15
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d910      	bls.n	8005aec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4923      	ldr	r1, [pc, #140]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 8005acc:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f023 020f 	bic.w	r2, r3, #15
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <HAL_RCC_ClockConfig+0x1c0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e030      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af8:	4918      	ldr	r1, [pc, #96]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005afa:	4b18      	ldr	r3, [pc, #96]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b16:	4911      	ldr	r1, [pc, #68]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b2a:	f000 f81d 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8005b2e:	4601      	mov	r1, r0
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3c:	5cd3      	ldrb	r3, [r2, r3]
 8005b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b42:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <HAL_RCC_ClockConfig+0x1cc>)
 8005b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005b46:	2000      	movs	r0, #0
 8005b48:	f00e fba6 	bl	8014298 <HAL_InitTick>

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40023c00 	.word	0x40023c00
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	08018d90 	.word	0x08018d90
 8005b64:	2000003c 	.word	0x2000003c

08005b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005b70:	2200      	movs	r2, #0
 8005b72:	60fa      	str	r2, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	617a      	str	r2, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b80:	4a51      	ldr	r2, [pc, #324]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b82:	6892      	ldr	r2, [r2, #8]
 8005b84:	f002 020c 	and.w	r2, r2, #12
 8005b88:	2a04      	cmp	r2, #4
 8005b8a:	d007      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0x34>
 8005b8c:	2a08      	cmp	r2, #8
 8005b8e:	d008      	beq.n	8005ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	f040 8090 	bne.w	8005cb6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b96:	4b4d      	ldr	r3, [pc, #308]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x164>)
 8005b98:	613b      	str	r3, [r7, #16]
       break;
 8005b9a:	e08f      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b9c:	4b4c      	ldr	r3, [pc, #304]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b9e:	613b      	str	r3, [r7, #16]
      break;
 8005ba0:	e08c      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ba2:	4a49      	ldr	r2, [pc, #292]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ba4:	6852      	ldr	r2, [r2, #4]
 8005ba6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005baa:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005bac:	4a46      	ldr	r2, [pc, #280]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bae:	6852      	ldr	r2, [r2, #4]
 8005bb0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d023      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb8:	4b43      	ldr	r3, [pc, #268]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	099b      	lsrs	r3, r3, #6
 8005bbe:	f04f 0400 	mov.w	r4, #0
 8005bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	ea03 0301 	and.w	r3, r3, r1
 8005bce:	ea04 0402 	and.w	r4, r4, r2
 8005bd2:	4a3f      	ldr	r2, [pc, #252]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005bd4:	fb02 f104 	mul.w	r1, r2, r4
 8005bd8:	2200      	movs	r2, #0
 8005bda:	fb02 f203 	mul.w	r2, r2, r3
 8005bde:	440a      	add	r2, r1
 8005be0:	493b      	ldr	r1, [pc, #236]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005be2:	fba3 0101 	umull	r0, r1, r3, r1
 8005be6:	1853      	adds	r3, r2, r1
 8005be8:	4619      	mov	r1, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f04f 0400 	mov.w	r4, #0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	f7fa ffae 	bl	8000b54 <__aeabi_uldivmod>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e04c      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c00:	4a31      	ldr	r2, [pc, #196]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c02:	6852      	ldr	r2, [r2, #4]
 8005c04:	0992      	lsrs	r2, r2, #6
 8005c06:	4611      	mov	r1, r2
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005c10:	f04f 0600 	mov.w	r6, #0
 8005c14:	ea05 0501 	and.w	r5, r5, r1
 8005c18:	ea06 0602 	and.w	r6, r6, r2
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4632      	mov	r2, r6
 8005c20:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8005c24:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8005c28:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005c2c:	4651      	mov	r1, sl
 8005c2e:	465a      	mov	r2, fp
 8005c30:	46aa      	mov	sl, r5
 8005c32:	46b3      	mov	fp, r6
 8005c34:	4655      	mov	r5, sl
 8005c36:	465e      	mov	r6, fp
 8005c38:	1b4d      	subs	r5, r1, r5
 8005c3a:	eb62 0606 	sbc.w	r6, r2, r6
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4632      	mov	r2, r6
 8005c42:	0194      	lsls	r4, r2, #6
 8005c44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c48:	018b      	lsls	r3, r1, #6
 8005c4a:	1a5b      	subs	r3, r3, r1
 8005c4c:	eb64 0402 	sbc.w	r4, r4, r2
 8005c50:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005c54:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005c58:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	464c      	mov	r4, r9
 8005c60:	4655      	mov	r5, sl
 8005c62:	465e      	mov	r6, fp
 8005c64:	18ed      	adds	r5, r5, r3
 8005c66:	eb46 0604 	adc.w	r6, r6, r4
 8005c6a:	462b      	mov	r3, r5
 8005c6c:	4634      	mov	r4, r6
 8005c6e:	02a2      	lsls	r2, r4, #10
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	029b      	lsls	r3, r3, #10
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005c82:	4618      	mov	r0, r3
 8005c84:	4621      	mov	r1, r4
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f04f 0400 	mov.w	r4, #0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4623      	mov	r3, r4
 8005c90:	f7fa ff60 	bl	8000b54 <__aeabi_uldivmod>
 8005c94:	4603      	mov	r3, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb2:	613b      	str	r3, [r7, #16]
      break;
 8005cb4:	e002      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x164>)
 8005cb8:	613b      	str	r3, [r7, #16]
      break;
 8005cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cbc:	693b      	ldr	r3, [r7, #16]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	00f42400 	.word	0x00f42400
 8005cd0:	017d7840 	.word	0x017d7840

08005cd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	2000003c 	.word	0x2000003c

08005cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cf0:	f7ff fff0 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0a9b      	lsrs	r3, r3, #10
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4a03      	ldr	r2, [pc, #12]	; (8005d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d02:	5cd3      	ldrb	r3, [r2, r3]
 8005d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	08018da0 	.word	0x08018da0

08005d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d18:	f7ff ffdc 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	0b5b      	lsrs	r3, r3, #13
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	4a03      	ldr	r2, [pc, #12]	; (8005d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d2a:	5cd3      	ldrb	r3, [r2, r3]
 8005d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40023800 	.word	0x40023800
 8005d38:	08018da0 	.word	0x08018da0

08005d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	220f      	movs	r2, #15
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d4c:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <HAL_RCC_GetClockConfig+0x5c>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0203 	and.w	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <HAL_RCC_GetClockConfig+0x5c>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <HAL_RCC_GetClockConfig+0x5c>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005d70:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <HAL_RCC_GetClockConfig+0x5c>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	08db      	lsrs	r3, r3, #3
 8005d76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d7e:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <HAL_RCC_GetClockConfig+0x60>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 020f 	and.w	r2, r3, #15
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	601a      	str	r2, [r3, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40023c00 	.word	0x40023c00

08005da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d012      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dc8:	4a69      	ldr	r2, [pc, #420]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dca:	4b69      	ldr	r3, [pc, #420]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005dd2:	6093      	str	r3, [r2, #8]
 8005dd4:	4966      	ldr	r1, [pc, #408]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd6:	4b66      	ldr	r3, [pc, #408]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	4313      	orrs	r3, r2
 8005de0:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005dea:	2301      	movs	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d017      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dfa:	495d      	ldr	r1, [pc, #372]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfc:	4b5c      	ldr	r3, [pc, #368]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e18:	d101      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005e26:	2301      	movs	r3, #1
 8005e28:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d017      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e36:	494e      	ldr	r1, [pc, #312]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e38:	4b4d      	ldr	r3, [pc, #308]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e54:	d101      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005e56:	2301      	movs	r3, #1
 8005e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005e62:	2301      	movs	r3, #1
 8005e64:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005e72:	2301      	movs	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 808b 	beq.w	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e84:	4a3a      	ldr	r2, [pc, #232]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e86:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8005e90:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e9c:	4a35      	ldr	r2, [pc, #212]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e9e:	4b35      	ldr	r3, [pc, #212]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea8:	f7fb fdfc 	bl	8001aa4 <HAL_GetTick>
 8005eac:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb0:	f7fb fdf8 	bl	8001aa4 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b64      	cmp	r3, #100	; 0x64
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e355      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ec2:	4b2c      	ldr	r3, [pc, #176]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ece:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d035      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d02e      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eec:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ef6:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef8:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f02:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f04:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f0e:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f14:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d014      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f20:	f7fb fdc0 	bl	8001aa4 <HAL_GetTick>
 8005f24:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f26:	e00a      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f28:	f7fb fdbc 	bl	8001aa4 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e317      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0ee      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f56:	d111      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005f58:	4805      	ldr	r0, [pc, #20]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f68:	400b      	ands	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	6083      	str	r3, [r0, #8]
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005f70:	40023800 	.word	0x40023800
 8005f74:	40007000 	.word	0x40007000
 8005f78:	0ffffcff 	.word	0x0ffffcff
 8005f7c:	4ab0      	ldr	r2, [pc, #704]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f7e:	4bb0      	ldr	r3, [pc, #704]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f86:	6093      	str	r3, [r2, #8]
 8005f88:	49ad      	ldr	r1, [pc, #692]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f8a:	4bad      	ldr	r3, [pc, #692]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f96:	4313      	orrs	r3, r2
 8005f98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d010      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fa6:	4aa6      	ldr	r2, [pc, #664]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005fa8:	4ba5      	ldr	r3, [pc, #660]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fb6:	49a2      	ldr	r1, [pc, #648]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005fb8:	4ba1      	ldr	r3, [pc, #644]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005fba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fd4:	499a      	ldr	r1, [pc, #616]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005fd6:	4b9a      	ldr	r3, [pc, #616]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ff6:	4992      	ldr	r1, [pc, #584]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ff8:	4b91      	ldr	r3, [pc, #580]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006018:	4989      	ldr	r1, [pc, #548]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800601a:	4b89      	ldr	r3, [pc, #548]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800603a:	4981      	ldr	r1, [pc, #516]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800603c:	4b80      	ldr	r3, [pc, #512]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800605c:	4978      	ldr	r1, [pc, #480]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800605e:	4b78      	ldr	r3, [pc, #480]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	f023 0203 	bic.w	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800607e:	4970      	ldr	r1, [pc, #448]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006080:	4b6f      	ldr	r3, [pc, #444]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f023 020c 	bic.w	r2, r3, #12
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060a0:	4967      	ldr	r1, [pc, #412]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060a2:	4b67      	ldr	r3, [pc, #412]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060c2:	495f      	ldr	r1, [pc, #380]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060c4:	4b5e      	ldr	r3, [pc, #376]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060e4:	4956      	ldr	r1, [pc, #344]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060e6:	4b56      	ldr	r3, [pc, #344]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006106:	494e      	ldr	r1, [pc, #312]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006108:	4b4d      	ldr	r3, [pc, #308]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006128:	4945      	ldr	r1, [pc, #276]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800612a:	4b45      	ldr	r3, [pc, #276]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800614a:	493d      	ldr	r1, [pc, #244]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800614c:	4b3c      	ldr	r3, [pc, #240]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800616c:	4934      	ldr	r1, [pc, #208]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800616e:	4b34      	ldr	r3, [pc, #208]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d011      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800618e:	492c      	ldr	r1, [pc, #176]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006190:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ac:	d101      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 80061ae:	2301      	movs	r3, #1
 80061b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 80061be:	2301      	movs	r3, #1
 80061c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061ce:	491c      	ldr	r1, [pc, #112]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80061f0:	4913      	ldr	r1, [pc, #76]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061f2:	4b13      	ldr	r3, [pc, #76]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d005      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006216:	f040 80d8 	bne.w	80063ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800621a:	4a09      	ldr	r2, [pc, #36]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006224:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006226:	f7fb fc3d 	bl	8001aa4 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800622c:	e00a      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800622e:	f7fb fc39 	bl	8001aa4 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b64      	cmp	r3, #100	; 0x64
 800623a:	d903      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e196      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006240:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006244:	4b6c      	ldr	r3, [pc, #432]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ee      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d021      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11d      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006264:	4b64      	ldr	r3, [pc, #400]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006272:	4b61      	ldr	r3, [pc, #388]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006278:	0e1b      	lsrs	r3, r3, #24
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006280:	495d      	ldr	r1, [pc, #372]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	019a      	lsls	r2, r3, #6
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	061b      	lsls	r3, r3, #24
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	071b      	lsls	r3, r3, #28
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b4:	d00a      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d02e      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ca:	d129      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80062cc:	4b4a      	ldr	r3, [pc, #296]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80062ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062da:	4b47      	ldr	r3, [pc, #284]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80062dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e0:	0f1b      	lsrs	r3, r3, #28
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80062e8:	4943      	ldr	r1, [pc, #268]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	019a      	lsls	r2, r3, #6
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	061b      	lsls	r3, r3, #24
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	071b      	lsls	r3, r3, #28
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8006308:	493b      	ldr	r1, [pc, #236]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800630a:	4b3b      	ldr	r3, [pc, #236]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800630c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006310:	f023 021f 	bic.w	r2, r3, #31
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	3b01      	subs	r3, #1
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01d      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800632c:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800632e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006332:	0e1b      	lsrs	r3, r3, #24
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800633a:	4b2f      	ldr	r3, [pc, #188]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800633c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006340:	0f1b      	lsrs	r3, r3, #28
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006348:	492b      	ldr	r1, [pc, #172]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	019a      	lsls	r2, r3, #6
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	041b      	lsls	r3, r3, #16
 8006356:	431a      	orrs	r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	061b      	lsls	r3, r3, #24
 800635c:	431a      	orrs	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	071b      	lsls	r3, r3, #28
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d011      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006374:	4920      	ldr	r1, [pc, #128]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	019a      	lsls	r2, r3, #6
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	071b      	lsls	r3, r3, #28
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006398:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800639a:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063a2:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a4:	f7fb fb7e 	bl	8001aa4 <HAL_GetTick>
 80063a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063ac:	f7fb fb7a 	bl	8001aa4 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b64      	cmp	r3, #100	; 0x64
 80063b8:	d901      	bls.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e0d7      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063be:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	f040 80cd 	bne.w	800656c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063d4:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063de:	f7fb fb61 	bl	8001aa4 <HAL_GetTick>
 80063e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063e4:	e00a      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063e6:	f7fb fb5d 	bl	8001aa4 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b64      	cmp	r3, #100	; 0x64
 80063f2:	d903      	bls.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0ba      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80063f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063fc:	4b5e      	ldr	r3, [pc, #376]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006408:	d0ed      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02e      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d12a      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006432:	4b51      	ldr	r3, [pc, #324]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	0f1b      	lsrs	r3, r3, #28
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800644e:	494a      	ldr	r1, [pc, #296]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	019a      	lsls	r2, r3, #6
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	061b      	lsls	r3, r3, #24
 8006462:	431a      	orrs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	071b      	lsls	r3, r3, #28
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800646e:	4942      	ldr	r1, [pc, #264]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006470:	4b41      	ldr	r3, [pc, #260]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006476:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	3b01      	subs	r3, #1
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d022      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649c:	d11d      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800649e:	4b36      	ldr	r3, [pc, #216]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	0e1b      	lsrs	r3, r3, #24
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064ac:	4b32      	ldr	r3, [pc, #200]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	0f1b      	lsrs	r3, r3, #28
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80064ba:	492f      	ldr	r1, [pc, #188]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	019a      	lsls	r2, r3, #6
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	431a      	orrs	r2, r3
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	061b      	lsls	r3, r3, #24
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	071b      	lsls	r3, r3, #28
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d028      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	0e1b      	lsrs	r3, r3, #24
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064f4:	4b20      	ldr	r3, [pc, #128]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	0c1b      	lsrs	r3, r3, #16
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006502:	491d      	ldr	r1, [pc, #116]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	019a      	lsls	r2, r3, #6
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	431a      	orrs	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	061b      	lsls	r3, r3, #24
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	071b      	lsls	r3, r3, #28
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006522:	4915      	ldr	r1, [pc, #84]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800652a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006538:	4a0f      	ldr	r2, [pc, #60]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800653a:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006542:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006544:	f7fb faae 	bl	8001aa4 <HAL_GetTick>
 8006548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800654a:	e008      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800654c:	f7fb faaa 	bl	8001aa4 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b64      	cmp	r3, #100	; 0x64
 8006558:	d901      	bls.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e007      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656a:	d1ef      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800

0800657c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e025      	b.n	80065dc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f00d fe6d 	bl	8014284 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f001 fa5f 	bl	8007a80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	f001 fac9 	bl	8007b64 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_SDRAM_Read_32b+0x20>
 8006600:	2302      	movs	r3, #2
 8006602:	e028      	b.n	8006656 <HAL_SDRAM_Read_32b+0x72>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d101      	bne.n	800661c <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
 800661a:	e01c      	b.n	8006656 <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b05      	cmp	r3, #5
 8006626:	d10e      	bne.n	8006646 <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 8006628:	2301      	movs	r3, #1
 800662a:	e014      	b.n	8006656 <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3304      	adds	r3, #4
 800663e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3b01      	subs	r3, #1
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1ef      	bne.n	800662c <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8006662:	b480      	push	{r7}
 8006664:	b087      	sub	sp, #28
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_SDRAM_Write_32b+0x24>
 8006682:	2302      	movs	r3, #2
 8006684:	e02a      	b.n	80066dc <HAL_SDRAM_Write_32b+0x7a>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006694:	b2db      	uxtb	r3, r3
 8006696:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d101      	bne.n	80066a2 <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 800669e:	2302      	movs	r3, #2
 80066a0:	e01c      	b.n	80066dc <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	d002      	beq.n	80066ae <HAL_SDRAM_Write_32b+0x4c>
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d10e      	bne.n	80066cc <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 80066ae:	2301      	movs	r3, #1
 80066b0:	e014      	b.n	80066dc <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3304      	adds	r3, #4
 80066be:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3304      	adds	r3, #4
 80066c4:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ef      	bne.n	80066b2 <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d101      	bne.n	8006704 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
 8006702:	e018      	b.n	8006736 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f001 faa5 	bl	8007c64 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d104      	bne.n	800672c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2205      	movs	r2, #5
 8006726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800672a:	e003      	b.n	8006734 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e01d      	b.n	800678c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d106      	bne.n	800676a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f00d fc7f 	bl	8014068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3304      	adds	r3, #4
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 fa91 	bl	8006ca4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_Base_Stop>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10f      	bne.n	800680a <HAL_TIM_Base_Stop+0x40>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6a1a      	ldr	r2, [r3, #32]
 80067f0:	f240 4344 	movw	r3, #1092	; 0x444
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <HAL_TIM_Base_Stop+0x40>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	68d2      	ldr	r2, [r2, #12]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d122      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d11b      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f06f 0202 	mvn.w	r2, #2
 8006882:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f9e5 	bl	8006c68 <HAL_TIM_IC_CaptureCallback>
 800689e:	e005      	b.n	80068ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f9d7 	bl	8006c54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9e8 	bl	8006c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d122      	bne.n	8006906 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d11b      	bne.n	8006906 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f06f 0204 	mvn.w	r2, #4
 80068d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f9bb 	bl	8006c68 <HAL_TIM_IC_CaptureCallback>
 80068f2:	e005      	b.n	8006900 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f9ad 	bl	8006c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f9be 	bl	8006c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b08      	cmp	r3, #8
 8006912:	d122      	bne.n	800695a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b08      	cmp	r3, #8
 8006920:	d11b      	bne.n	800695a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f06f 0208 	mvn.w	r2, #8
 800692a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2204      	movs	r2, #4
 8006930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f991 	bl	8006c68 <HAL_TIM_IC_CaptureCallback>
 8006946:	e005      	b.n	8006954 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f983 	bl	8006c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f994 	bl	8006c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b10      	cmp	r3, #16
 8006966:	d122      	bne.n	80069ae <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b10      	cmp	r3, #16
 8006974:	d11b      	bne.n	80069ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f06f 0210 	mvn.w	r2, #16
 800697e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2208      	movs	r2, #8
 8006984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f967 	bl	8006c68 <HAL_TIM_IC_CaptureCallback>
 800699a:	e005      	b.n	80069a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f959 	bl	8006c54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f96a 	bl	8006c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d10e      	bne.n	80069da <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d107      	bne.n	80069da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f06f 0201 	mvn.w	r2, #1
 80069d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f00c fc75 	bl	80132c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d10e      	bne.n	8006a06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d107      	bne.n	8006a06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb07 	bl	8007014 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a14:	d10e      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b80      	cmp	r3, #128	; 0x80
 8006a22:	d107      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 faf0 	bl	8007014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	d10e      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	d107      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f918 	bl	8006c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d10e      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d107      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0220 	mvn.w	r2, #32
 8006a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 faba 	bl	8007000 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e0c8      	b.n	8006c42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4b60      	ldr	r3, [pc, #384]	; (8006c4c <HAL_TIM_ConfigClockSource+0x1b8>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b40      	cmp	r3, #64	; 0x40
 8006ae6:	d077      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0x144>
 8006ae8:	2b40      	cmp	r3, #64	; 0x40
 8006aea:	d80e      	bhi.n	8006b0a <HAL_TIM_ConfigClockSource+0x76>
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	f000 808a 	beq.w	8006c06 <HAL_TIM_ConfigClockSource+0x172>
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d802      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x68>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d07e      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8006afa:	e099      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	f000 8089 	beq.w	8006c14 <HAL_TIM_ConfigClockSource+0x180>
 8006b02:	2b30      	cmp	r3, #48	; 0x30
 8006b04:	f000 808d 	beq.w	8006c22 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8006b08:	e092      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006b0a:	2b70      	cmp	r3, #112	; 0x70
 8006b0c:	d016      	beq.n	8006b3c <HAL_TIM_ConfigClockSource+0xa8>
 8006b0e:	2b70      	cmp	r3, #112	; 0x70
 8006b10:	d804      	bhi.n	8006b1c <HAL_TIM_ConfigClockSource+0x88>
 8006b12:	2b50      	cmp	r3, #80	; 0x50
 8006b14:	d040      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0x104>
 8006b16:	2b60      	cmp	r3, #96	; 0x60
 8006b18:	d04e      	beq.n	8006bb8 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8006b1a:	e089      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x96>
 8006b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b26:	d024      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8006b28:	e082      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6899      	ldr	r1, [r3, #8]
 8006b34:	4b46      	ldr	r3, [pc, #280]	; (8006c50 <HAL_TIM_ConfigClockSource+0x1bc>)
 8006b36:	400b      	ands	r3, r1
 8006b38:	6093      	str	r3, [r2, #8]
    break;
 8006b3a:	e079      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6899      	ldr	r1, [r3, #8]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f000 f9e1 	bl	8006f12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4b3c      	ldr	r3, [pc, #240]	; (8006c4c <HAL_TIM_ConfigClockSource+0x1b8>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
    break;
 8006b70:	e05e      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6899      	ldr	r1, [r3, #8]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f000 f9c6 	bl	8006f12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	6892      	ldr	r2, [r2, #8]
 8006b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b94:	609a      	str	r2, [r3, #8]
    break;
 8006b96:	e04b      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6859      	ldr	r1, [r3, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f000 f92d 	bl	8006e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2150      	movs	r1, #80	; 0x50
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f98e 	bl	8006ed2 <TIM_ITRx_SetConfig>
    break;
 8006bb6:	e03b      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	6859      	ldr	r1, [r3, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f000 f950 	bl	8006e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2160      	movs	r1, #96	; 0x60
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f97e 	bl	8006ed2 <TIM_ITRx_SetConfig>
    break;
 8006bd6:	e02b      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6859      	ldr	r1, [r3, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	461a      	mov	r2, r3
 8006be6:	f000 f90d 	bl	8006e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2140      	movs	r1, #64	; 0x40
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f96e 	bl	8006ed2 <TIM_ITRx_SetConfig>
    break;
 8006bf6:	e01b      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f967 	bl	8006ed2 <TIM_ITRx_SetConfig>
    break;
 8006c04:	e014      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2110      	movs	r1, #16
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f960 	bl	8006ed2 <TIM_ITRx_SetConfig>
    break;
 8006c12:	e00d      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2120      	movs	r1, #32
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f959 	bl	8006ed2 <TIM_ITRx_SetConfig>
    break;
 8006c20:	e006      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2130      	movs	r1, #48	; 0x30
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f952 	bl	8006ed2 <TIM_ITRx_SetConfig>
    break;
 8006c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	fffeff88 	.word	0xfffeff88
 8006c50:	fffefff8 	.word	0xfffefff8

08006c54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a47      	ldr	r2, [pc, #284]	; (8006dd8 <TIM_Base_SetConfig+0x134>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <TIM_Base_SetConfig+0x44>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d00f      	beq.n	8006ce8 <TIM_Base_SetConfig+0x44>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a44      	ldr	r2, [pc, #272]	; (8006ddc <TIM_Base_SetConfig+0x138>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00b      	beq.n	8006ce8 <TIM_Base_SetConfig+0x44>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a43      	ldr	r2, [pc, #268]	; (8006de0 <TIM_Base_SetConfig+0x13c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d007      	beq.n	8006ce8 <TIM_Base_SetConfig+0x44>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a42      	ldr	r2, [pc, #264]	; (8006de4 <TIM_Base_SetConfig+0x140>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_Base_SetConfig+0x44>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a41      	ldr	r2, [pc, #260]	; (8006de8 <TIM_Base_SetConfig+0x144>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d101      	bne.n	8006cec <TIM_Base_SetConfig+0x48>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <TIM_Base_SetConfig+0x4a>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a34      	ldr	r2, [pc, #208]	; (8006dd8 <TIM_Base_SetConfig+0x134>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d02b      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d027      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <TIM_Base_SetConfig+0x138>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d023      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a30      	ldr	r2, [pc, #192]	; (8006de0 <TIM_Base_SetConfig+0x13c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d01f      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2f      	ldr	r2, [pc, #188]	; (8006de4 <TIM_Base_SetConfig+0x140>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d01b      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2e      	ldr	r2, [pc, #184]	; (8006de8 <TIM_Base_SetConfig+0x144>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d017      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a2d      	ldr	r2, [pc, #180]	; (8006dec <TIM_Base_SetConfig+0x148>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d013      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <TIM_Base_SetConfig+0x14c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00f      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <TIM_Base_SetConfig+0x150>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <TIM_Base_SetConfig+0x154>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a29      	ldr	r2, [pc, #164]	; (8006dfc <TIM_Base_SetConfig+0x158>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d003      	beq.n	8006d64 <TIM_Base_SetConfig+0xc0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <TIM_Base_SetConfig+0x15c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d101      	bne.n	8006d68 <TIM_Base_SetConfig+0xc4>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <TIM_Base_SetConfig+0xc6>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <TIM_Base_SetConfig+0x134>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0x110>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a0e      	ldr	r2, [pc, #56]	; (8006de8 <TIM_Base_SetConfig+0x144>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d101      	bne.n	8006db8 <TIM_Base_SetConfig+0x114>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <TIM_Base_SetConfig+0x116>
 8006db8:	2300      	movs	r3, #0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	615a      	str	r2, [r3, #20]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40010400 	.word	0x40010400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800
 8006df8:	40001800 	.word	0x40001800
 8006dfc:	40001c00 	.word	0x40001c00
 8006e00:	40002000 	.word	0x40002000

08006e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	f023 0201 	bic.w	r2, r3, #1
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f023 030a 	bic.w	r3, r3, #10
 8006e48:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b087      	sub	sp, #28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0210 	bic.w	r2, r3, #16
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eee:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006ef0:	887b      	ldrh	r3, [r7, #2]
 8006ef2:	f043 0307 	orr.w	r3, r3, #7
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	609a      	str	r2, [r3, #8]
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b087      	sub	sp, #28
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	021a      	lsls	r2, r3, #8
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	609a      	str	r2, [r3, #8]
} 
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
	...

08006f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e03d      	b.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1a      	ldr	r2, [pc, #104]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a19      	ldr	r2, [pc, #100]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
} 
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	40010400 	.word	0x40010400

08007000 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e043      	b.n	80070c2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f00d f84c 	bl	80140ec <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f9c3 	bl	80073f8 <UART_SetConfig>
 8007072:	4603      	mov	r3, r0
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e022      	b.n	80070c2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fc25 	bl	80078d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	6852      	ldr	r2, [r2, #4]
 8007094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007098:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6812      	ldr	r2, [r2, #0]
 80070a2:	6892      	ldr	r2, [r2, #8]
 80070a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fcac 	bl	8007a18 <UART_CheckIdleState>
 80070c0:	4603      	mov	r3, r0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b088      	sub	sp, #32
 80070ce:	af02      	add	r7, sp, #8
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d175      	bne.n	80071d6 <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <HAL_UART_Transmit+0x2c>
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e06e      	b.n	80071d8 <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_UART_Transmit+0x3e>
 8007104:	2302      	movs	r3, #2
 8007106:	e067      	b.n	80071d8 <HAL_UART_Transmit+0x10e>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2221      	movs	r2, #33	; 0x21
 800711a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800711e:	f7fa fcc1 	bl	8001aa4 <HAL_GetTick>
 8007122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8007134:	e032      	b.n	800719c <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2200      	movs	r2, #0
 8007150:	2180      	movs	r1, #128	; 0x80
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 f906 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e03a      	b.n	80071d8 <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716a:	d110      	bne.n	800718e <HAL_UART_Transmit+0xc4>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	8812      	ldrh	r2, [r2, #0]
 8007180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007184:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3302      	adds	r3, #2
 800718a:	60bb      	str	r3, [r7, #8]
 800718c:	e006      	b.n	800719c <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	1c59      	adds	r1, r3, #1
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1c6      	bne.n	8007136 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2200      	movs	r2, #0
 80071b0:	2140      	movs	r1, #64	; 0x40
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f8d6 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e00a      	b.n	80071d8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e000      	b.n	80071d8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071d6:	2302      	movs	r3, #2
  }
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	f040 80ac 	bne.w	800735a <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_UART_Receive+0x2e>
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e0a4      	b.n	800735c <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_UART_Receive+0x40>
 800721c:	2302      	movs	r3, #2
 800721e:	e09d      	b.n	800735c <HAL_UART_Receive+0x17c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2222      	movs	r2, #34	; 0x22
 8007232:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007236:	f7fa fc35 	bl	8001aa4 <HAL_GetTick>
 800723a:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007254:	d10e      	bne.n	8007274 <HAL_UART_Receive+0x94>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <HAL_UART_Receive+0x8a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007264:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007268:	e028      	b.n	80072bc <HAL_UART_Receive+0xdc>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	22ff      	movs	r2, #255	; 0xff
 800726e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007272:	e023      	b.n	80072bc <HAL_UART_Receive+0xdc>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10d      	bne.n	8007298 <HAL_UART_Receive+0xb8>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <HAL_UART_Receive+0xae>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	22ff      	movs	r2, #255	; 0xff
 8007288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800728c:	e016      	b.n	80072bc <HAL_UART_Receive+0xdc>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	227f      	movs	r2, #127	; 0x7f
 8007292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007296:	e011      	b.n	80072bc <HAL_UART_Receive+0xdc>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072a0:	d10c      	bne.n	80072bc <HAL_UART_Receive+0xdc>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d104      	bne.n	80072b4 <HAL_UART_Receive+0xd4>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	227f      	movs	r2, #127	; 0x7f
 80072ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072b2:	e003      	b.n	80072bc <HAL_UART_Receive+0xdc>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	223f      	movs	r2, #63	; 0x3f
 80072b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072c2:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80072c4:	e039      	b.n	800733a <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2200      	movs	r2, #0
 80072e0:	2120      	movs	r1, #32
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f83e 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e034      	b.n	800735c <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	d112      	bne.n	8007322 <HAL_UART_Receive+0x142>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10e      	bne.n	8007322 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	b29a      	uxth	r2, r3
 8007310:	8b7b      	ldrh	r3, [r7, #26]
 8007312:	4013      	ands	r3, r2
 8007314:	b29a      	uxth	r2, r3
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	3302      	adds	r3, #2
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	e00b      	b.n	800733a <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	60ba      	str	r2, [r7, #8]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800732e:	b2d1      	uxtb	r1, r2
 8007330:	8b7a      	ldrh	r2, [r7, #26]
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	400a      	ands	r2, r1
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1bf      	bne.n	80072c6 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	e000      	b.n	800735c <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 800735a:	2302      	movs	r3, #2
  }
}
 800735c:	4618      	mov	r0, r3
 800735e:	3720      	adds	r7, #32
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007374:	e02c      	b.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d028      	beq.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <UART_WaitOnFlagUntilTimeout+0x30>
 8007384:	f7fa fb8e 	bl	8001aa4 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	1ad2      	subs	r2, r2, r3
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	429a      	cmp	r2, r3
 8007392:	d31d      	bcc.n	80073d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	6812      	ldr	r2, [r2, #0]
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	6892      	ldr	r2, [r2, #8]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e00f      	b.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69da      	ldr	r2, [r3, #28]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	401a      	ands	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	429a      	cmp	r2, r3
 80073de:	bf0c      	ite	eq
 80073e0:	2301      	moveq	r3, #1
 80073e2:	2300      	movne	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d0c3      	beq.n	8007376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007404:	2310      	movs	r3, #16
 8007406:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8007408:	2300      	movs	r3, #0
 800740a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800740c:	2300      	movs	r3, #0
 800740e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6819      	ldr	r1, [r3, #0]
 8007436:	4baa      	ldr	r3, [pc, #680]	; (80076e0 <UART_SetConfig+0x2e8>)
 8007438:	400b      	ands	r3, r1
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	430b      	orrs	r3, r1
 800743e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	6852      	ldr	r2, [r2, #4]
 800744a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68d2      	ldr	r2, [r2, #12]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	6892      	ldr	r2, [r2, #8]
 800746c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	430a      	orrs	r2, r1
 8007474:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a9a      	ldr	r2, [pc, #616]	; (80076e4 <UART_SetConfig+0x2ec>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d11f      	bne.n	80074c0 <UART_SetConfig+0xc8>
 8007480:	4b99      	ldr	r3, [pc, #612]	; (80076e8 <UART_SetConfig+0x2f0>)
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b03      	cmp	r3, #3
 800748c:	f200 813e 	bhi.w	800770c <UART_SetConfig+0x314>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <UART_SetConfig+0xa0>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074b5 	.word	0x080074b5
 80074a0:	080074af 	.word	0x080074af
 80074a4:	080074bb 	.word	0x080074bb
 80074a8:	2301      	movs	r3, #1
 80074aa:	75fb      	strb	r3, [r7, #23]
 80074ac:	e12e      	b.n	800770c <UART_SetConfig+0x314>
 80074ae:	2302      	movs	r3, #2
 80074b0:	75fb      	strb	r3, [r7, #23]
 80074b2:	e12b      	b.n	800770c <UART_SetConfig+0x314>
 80074b4:	2304      	movs	r3, #4
 80074b6:	75fb      	strb	r3, [r7, #23]
 80074b8:	e128      	b.n	800770c <UART_SetConfig+0x314>
 80074ba:	2308      	movs	r3, #8
 80074bc:	75fb      	strb	r3, [r7, #23]
 80074be:	e125      	b.n	800770c <UART_SetConfig+0x314>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a89      	ldr	r2, [pc, #548]	; (80076ec <UART_SetConfig+0x2f4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d130      	bne.n	800752c <UART_SetConfig+0x134>
 80074ca:	4b87      	ldr	r3, [pc, #540]	; (80076e8 <UART_SetConfig+0x2f0>)
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	f200 8119 	bhi.w	800770c <UART_SetConfig+0x314>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0xe8>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007515 	.word	0x08007515
 80074e4:	0800770d 	.word	0x0800770d
 80074e8:	0800770d 	.word	0x0800770d
 80074ec:	0800770d 	.word	0x0800770d
 80074f0:	08007521 	.word	0x08007521
 80074f4:	0800770d 	.word	0x0800770d
 80074f8:	0800770d 	.word	0x0800770d
 80074fc:	0800770d 	.word	0x0800770d
 8007500:	0800751b 	.word	0x0800751b
 8007504:	0800770d 	.word	0x0800770d
 8007508:	0800770d 	.word	0x0800770d
 800750c:	0800770d 	.word	0x0800770d
 8007510:	08007527 	.word	0x08007527
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]
 8007518:	e0f8      	b.n	800770c <UART_SetConfig+0x314>
 800751a:	2302      	movs	r3, #2
 800751c:	75fb      	strb	r3, [r7, #23]
 800751e:	e0f5      	b.n	800770c <UART_SetConfig+0x314>
 8007520:	2304      	movs	r3, #4
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	e0f2      	b.n	800770c <UART_SetConfig+0x314>
 8007526:	2308      	movs	r3, #8
 8007528:	75fb      	strb	r3, [r7, #23]
 800752a:	e0ef      	b.n	800770c <UART_SetConfig+0x314>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a6f      	ldr	r2, [pc, #444]	; (80076f0 <UART_SetConfig+0x2f8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d11c      	bne.n	8007570 <UART_SetConfig+0x178>
 8007536:	4b6c      	ldr	r3, [pc, #432]	; (80076e8 <UART_SetConfig+0x2f0>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007540:	2b10      	cmp	r3, #16
 8007542:	d00f      	beq.n	8007564 <UART_SetConfig+0x16c>
 8007544:	2b10      	cmp	r3, #16
 8007546:	d802      	bhi.n	800754e <UART_SetConfig+0x156>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <UART_SetConfig+0x160>
 800754c:	e0de      	b.n	800770c <UART_SetConfig+0x314>
 800754e:	2b20      	cmp	r3, #32
 8007550:	d005      	beq.n	800755e <UART_SetConfig+0x166>
 8007552:	2b30      	cmp	r3, #48	; 0x30
 8007554:	d009      	beq.n	800756a <UART_SetConfig+0x172>
 8007556:	e0d9      	b.n	800770c <UART_SetConfig+0x314>
 8007558:	2300      	movs	r3, #0
 800755a:	75fb      	strb	r3, [r7, #23]
 800755c:	e0d6      	b.n	800770c <UART_SetConfig+0x314>
 800755e:	2302      	movs	r3, #2
 8007560:	75fb      	strb	r3, [r7, #23]
 8007562:	e0d3      	b.n	800770c <UART_SetConfig+0x314>
 8007564:	2304      	movs	r3, #4
 8007566:	75fb      	strb	r3, [r7, #23]
 8007568:	e0d0      	b.n	800770c <UART_SetConfig+0x314>
 800756a:	2308      	movs	r3, #8
 800756c:	75fb      	strb	r3, [r7, #23]
 800756e:	e0cd      	b.n	800770c <UART_SetConfig+0x314>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a5f      	ldr	r2, [pc, #380]	; (80076f4 <UART_SetConfig+0x2fc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d11c      	bne.n	80075b4 <UART_SetConfig+0x1bc>
 800757a:	4b5b      	ldr	r3, [pc, #364]	; (80076e8 <UART_SetConfig+0x2f0>)
 800757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007580:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d00f      	beq.n	80075a8 <UART_SetConfig+0x1b0>
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d802      	bhi.n	8007592 <UART_SetConfig+0x19a>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <UART_SetConfig+0x1a4>
 8007590:	e0bc      	b.n	800770c <UART_SetConfig+0x314>
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d005      	beq.n	80075a2 <UART_SetConfig+0x1aa>
 8007596:	2bc0      	cmp	r3, #192	; 0xc0
 8007598:	d009      	beq.n	80075ae <UART_SetConfig+0x1b6>
 800759a:	e0b7      	b.n	800770c <UART_SetConfig+0x314>
 800759c:	2300      	movs	r3, #0
 800759e:	75fb      	strb	r3, [r7, #23]
 80075a0:	e0b4      	b.n	800770c <UART_SetConfig+0x314>
 80075a2:	2302      	movs	r3, #2
 80075a4:	75fb      	strb	r3, [r7, #23]
 80075a6:	e0b1      	b.n	800770c <UART_SetConfig+0x314>
 80075a8:	2304      	movs	r3, #4
 80075aa:	75fb      	strb	r3, [r7, #23]
 80075ac:	e0ae      	b.n	800770c <UART_SetConfig+0x314>
 80075ae:	2308      	movs	r3, #8
 80075b0:	75fb      	strb	r3, [r7, #23]
 80075b2:	e0ab      	b.n	800770c <UART_SetConfig+0x314>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a4f      	ldr	r2, [pc, #316]	; (80076f8 <UART_SetConfig+0x300>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d120      	bne.n	8007600 <UART_SetConfig+0x208>
 80075be:	4b4a      	ldr	r3, [pc, #296]	; (80076e8 <UART_SetConfig+0x2f0>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075cc:	d012      	beq.n	80075f4 <UART_SetConfig+0x1fc>
 80075ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d2:	d802      	bhi.n	80075da <UART_SetConfig+0x1e2>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <UART_SetConfig+0x1f0>
 80075d8:	e098      	b.n	800770c <UART_SetConfig+0x314>
 80075da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075de:	d006      	beq.n	80075ee <UART_SetConfig+0x1f6>
 80075e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e4:	d009      	beq.n	80075fa <UART_SetConfig+0x202>
 80075e6:	e091      	b.n	800770c <UART_SetConfig+0x314>
 80075e8:	2300      	movs	r3, #0
 80075ea:	75fb      	strb	r3, [r7, #23]
 80075ec:	e08e      	b.n	800770c <UART_SetConfig+0x314>
 80075ee:	2302      	movs	r3, #2
 80075f0:	75fb      	strb	r3, [r7, #23]
 80075f2:	e08b      	b.n	800770c <UART_SetConfig+0x314>
 80075f4:	2304      	movs	r3, #4
 80075f6:	75fb      	strb	r3, [r7, #23]
 80075f8:	e088      	b.n	800770c <UART_SetConfig+0x314>
 80075fa:	2308      	movs	r3, #8
 80075fc:	75fb      	strb	r3, [r7, #23]
 80075fe:	e085      	b.n	800770c <UART_SetConfig+0x314>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a3d      	ldr	r2, [pc, #244]	; (80076fc <UART_SetConfig+0x304>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d120      	bne.n	800764c <UART_SetConfig+0x254>
 800760a:	4b37      	ldr	r3, [pc, #220]	; (80076e8 <UART_SetConfig+0x2f0>)
 800760c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007610:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007618:	d012      	beq.n	8007640 <UART_SetConfig+0x248>
 800761a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761e:	d802      	bhi.n	8007626 <UART_SetConfig+0x22e>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d007      	beq.n	8007634 <UART_SetConfig+0x23c>
 8007624:	e072      	b.n	800770c <UART_SetConfig+0x314>
 8007626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762a:	d006      	beq.n	800763a <UART_SetConfig+0x242>
 800762c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007630:	d009      	beq.n	8007646 <UART_SetConfig+0x24e>
 8007632:	e06b      	b.n	800770c <UART_SetConfig+0x314>
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
 8007638:	e068      	b.n	800770c <UART_SetConfig+0x314>
 800763a:	2302      	movs	r3, #2
 800763c:	75fb      	strb	r3, [r7, #23]
 800763e:	e065      	b.n	800770c <UART_SetConfig+0x314>
 8007640:	2304      	movs	r3, #4
 8007642:	75fb      	strb	r3, [r7, #23]
 8007644:	e062      	b.n	800770c <UART_SetConfig+0x314>
 8007646:	2308      	movs	r3, #8
 8007648:	75fb      	strb	r3, [r7, #23]
 800764a:	e05f      	b.n	800770c <UART_SetConfig+0x314>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2b      	ldr	r2, [pc, #172]	; (8007700 <UART_SetConfig+0x308>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d120      	bne.n	8007698 <UART_SetConfig+0x2a0>
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <UART_SetConfig+0x2f0>)
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007664:	d012      	beq.n	800768c <UART_SetConfig+0x294>
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766a:	d802      	bhi.n	8007672 <UART_SetConfig+0x27a>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <UART_SetConfig+0x288>
 8007670:	e04c      	b.n	800770c <UART_SetConfig+0x314>
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007676:	d006      	beq.n	8007686 <UART_SetConfig+0x28e>
 8007678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800767c:	d009      	beq.n	8007692 <UART_SetConfig+0x29a>
 800767e:	e045      	b.n	800770c <UART_SetConfig+0x314>
 8007680:	2300      	movs	r3, #0
 8007682:	75fb      	strb	r3, [r7, #23]
 8007684:	e042      	b.n	800770c <UART_SetConfig+0x314>
 8007686:	2302      	movs	r3, #2
 8007688:	75fb      	strb	r3, [r7, #23]
 800768a:	e03f      	b.n	800770c <UART_SetConfig+0x314>
 800768c:	2304      	movs	r3, #4
 800768e:	75fb      	strb	r3, [r7, #23]
 8007690:	e03c      	b.n	800770c <UART_SetConfig+0x314>
 8007692:	2308      	movs	r3, #8
 8007694:	75fb      	strb	r3, [r7, #23]
 8007696:	e039      	b.n	800770c <UART_SetConfig+0x314>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a19      	ldr	r2, [pc, #100]	; (8007704 <UART_SetConfig+0x30c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d135      	bne.n	800770e <UART_SetConfig+0x316>
 80076a2:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <UART_SetConfig+0x2f0>)
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b0:	d012      	beq.n	80076d8 <UART_SetConfig+0x2e0>
 80076b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b6:	d802      	bhi.n	80076be <UART_SetConfig+0x2c6>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d007      	beq.n	80076cc <UART_SetConfig+0x2d4>
 80076bc:	e026      	b.n	800770c <UART_SetConfig+0x314>
 80076be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076c2:	d006      	beq.n	80076d2 <UART_SetConfig+0x2da>
 80076c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076c8:	d01e      	beq.n	8007708 <UART_SetConfig+0x310>
 80076ca:	e01f      	b.n	800770c <UART_SetConfig+0x314>
 80076cc:	2300      	movs	r3, #0
 80076ce:	75fb      	strb	r3, [r7, #23]
 80076d0:	e01c      	b.n	800770c <UART_SetConfig+0x314>
 80076d2:	2302      	movs	r3, #2
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e019      	b.n	800770c <UART_SetConfig+0x314>
 80076d8:	2304      	movs	r3, #4
 80076da:	75fb      	strb	r3, [r7, #23]
 80076dc:	e016      	b.n	800770c <UART_SetConfig+0x314>
 80076de:	bf00      	nop
 80076e0:	efff69f3 	.word	0xefff69f3
 80076e4:	40011000 	.word	0x40011000
 80076e8:	40023800 	.word	0x40023800
 80076ec:	40004400 	.word	0x40004400
 80076f0:	40004800 	.word	0x40004800
 80076f4:	40004c00 	.word	0x40004c00
 80076f8:	40005000 	.word	0x40005000
 80076fc:	40011400 	.word	0x40011400
 8007700:	40007800 	.word	0x40007800
 8007704:	40007c00 	.word	0x40007c00
 8007708:	2308      	movs	r3, #8
 800770a:	75fb      	strb	r3, [r7, #23]
 800770c:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007716:	d16c      	bne.n	80077f2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	2b08      	cmp	r3, #8
 800771c:	d854      	bhi.n	80077c8 <UART_SetConfig+0x3d0>
 800771e:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <UART_SetConfig+0x32c>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	08007749 	.word	0x08007749
 8007728:	08007765 	.word	0x08007765
 800772c:	08007781 	.word	0x08007781
 8007730:	080077c9 	.word	0x080077c9
 8007734:	08007797 	.word	0x08007797
 8007738:	080077c9 	.word	0x080077c9
 800773c:	080077c9 	.word	0x080077c9
 8007740:	080077c9 	.word	0x080077c9
 8007744:	080077b3 	.word	0x080077b3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007748:	f7fe fad0 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 800774c:	4603      	mov	r3, r0
 800774e:	005a      	lsls	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	441a      	add	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007760:	82bb      	strh	r3, [r7, #20]
      break;
 8007762:	e034      	b.n	80077ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007764:	f7fe fad6 	bl	8005d14 <HAL_RCC_GetPCLK2Freq>
 8007768:	4603      	mov	r3, r0
 800776a:	005a      	lsls	r2, r3, #1
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	441a      	add	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	82bb      	strh	r3, [r7, #20]
      break;
 800777e:	e026      	b.n	80077ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	085a      	lsrs	r2, r3, #1
 8007786:	4b51      	ldr	r3, [pc, #324]	; (80078cc <UART_SetConfig+0x4d4>)
 8007788:	4413      	add	r3, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6852      	ldr	r2, [r2, #4]
 800778e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007792:	82bb      	strh	r3, [r7, #20]
      break;
 8007794:	e01b      	b.n	80077ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007796:	f7fe f9e7 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 800779a:	4603      	mov	r3, r0
 800779c:	005a      	lsls	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	441a      	add	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ae:	82bb      	strh	r3, [r7, #20]
      break;
 80077b0:	e00d      	b.n	80077ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	82bb      	strh	r3, [r7, #20]
      break;
 80077c6:	e002      	b.n	80077ce <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	74fb      	strb	r3, [r7, #19]
      break;
 80077cc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80077ce:	8abb      	ldrh	r3, [r7, #20]
 80077d0:	f023 030f 	bic.w	r3, r3, #15
 80077d4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077d6:	8abb      	ldrh	r3, [r7, #20]
 80077d8:	105b      	asrs	r3, r3, #1
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	897b      	ldrh	r3, [r7, #10]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	897a      	ldrh	r2, [r7, #10]
 80077ee:	60da      	str	r2, [r3, #12]
 80077f0:	e067      	b.n	80078c2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d861      	bhi.n	80078bc <UART_SetConfig+0x4c4>
 80077f8:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0x408>)
 80077fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fe:	bf00      	nop
 8007800:	08007825 	.word	0x08007825
 8007804:	08007845 	.word	0x08007845
 8007808:	08007865 	.word	0x08007865
 800780c:	080078bd 	.word	0x080078bd
 8007810:	08007881 	.word	0x08007881
 8007814:	080078bd 	.word	0x080078bd
 8007818:	080078bd 	.word	0x080078bd
 800781c:	080078bd 	.word	0x080078bd
 8007820:	080078a1 	.word	0x080078a1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681c      	ldr	r4, [r3, #0]
 8007828:	f7fe fa60 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 800782c:	4602      	mov	r2, r0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	b29b      	uxth	r3, r3
 8007840:	60e3      	str	r3, [r4, #12]
      break;
 8007842:	e03e      	b.n	80078c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681c      	ldr	r4, [r3, #0]
 8007848:	f7fe fa64 	bl	8005d14 <HAL_RCC_GetPCLK2Freq>
 800784c:	4602      	mov	r2, r0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	fbb2 f3f3 	udiv	r3, r2, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	60e3      	str	r3, [r4, #12]
      break;
 8007862:	e02e      	b.n	80078c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	0859      	lsrs	r1, r3, #1
 800786e:	4b18      	ldr	r3, [pc, #96]	; (80078d0 <UART_SetConfig+0x4d8>)
 8007870:	440b      	add	r3, r1
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	6849      	ldr	r1, [r1, #4]
 8007876:	fbb3 f3f1 	udiv	r3, r3, r1
 800787a:	b29b      	uxth	r3, r3
 800787c:	60d3      	str	r3, [r2, #12]
      break;
 800787e:	e020      	b.n	80078c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681c      	ldr	r4, [r3, #0]
 8007884:	f7fe f970 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8007888:	4602      	mov	r2, r0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	441a      	add	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	b29b      	uxth	r3, r3
 800789c:	60e3      	str	r3, [r4, #12]
      break;
 800789e:	e010      	b.n	80078c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6852      	ldr	r2, [r2, #4]
 80078a8:	0852      	lsrs	r2, r2, #1
 80078aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6852      	ldr	r2, [r2, #4]
 80078b2:	fbb1 f2f2 	udiv	r2, r1, r2
 80078b6:	b292      	uxth	r2, r2
 80078b8:	60da      	str	r2, [r3, #12]
      break;
 80078ba:	e002      	b.n	80078c2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	74fb      	strb	r3, [r7, #19]
      break;
 80078c0:	bf00      	nop
    }
  }

  return ret;
 80078c2:	7cfb      	ldrb	r3, [r7, #19]

}
 80078c4:	4618      	mov	r0, r3
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd90      	pop	{r4, r7, pc}
 80078cc:	01e84800 	.word	0x01e84800
 80078d0:	00f42400 	.word	0x00f42400

080078d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	6852      	ldr	r2, [r2, #4]
 80078f2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	6852      	ldr	r2, [r2, #4]
 8007914:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6812      	ldr	r2, [r2, #0]
 8007934:	6852      	ldr	r2, [r2, #4]
 8007936:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	6852      	ldr	r2, [r2, #4]
 8007958:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	6892      	ldr	r2, [r2, #8]
 800797a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007982:	430a      	orrs	r2, r1
 8007984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	6892      	ldr	r2, [r2, #8]
 800799c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80079a4:	430a      	orrs	r2, r1
 80079a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01a      	beq.n	80079ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	6852      	ldr	r2, [r2, #4]
 80079be:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d2:	d10a      	bne.n	80079ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	6852      	ldr	r2, [r2, #4]
 80079de:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6812      	ldr	r2, [r2, #0]
 80079fe:	6852      	ldr	r2, [r2, #4]
 8007a00:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a2a:	f7fa f83b 	bl	8001aa4 <HAL_GetTick>
 8007a2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d10e      	bne.n	8007a5c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fc89 	bl	8007364 <UART_WaitOnFlagUntilTimeout>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e00c      	b.n	8007a76 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d027      	beq.n	8007aea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4b2f      	ldr	r3, [pc, #188]	; (8007b60 <FMC_SDRAM_Init+0xe0>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ab0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007ab6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007abc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007ac2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007ac8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007ace:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007ad4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007ada:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e032      	b.n	8007b50 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007af6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007b00:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007b06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <FMC_SDRAM_Init+0xe0>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007b2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007b30:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007b36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007b3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	ffff8000 	.word	0xffff8000

08007b64 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d02e      	beq.n	8007bdc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b8a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007ba4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007bae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007bb8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007bc2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	609a      	str	r2, [r3, #8]
 8007bda:	e039      	b.n	8007c50 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4b1e      	ldr	r3, [pc, #120]	; (8007c60 <FMC_SDRAM_Timing_Init+0xfc>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c0e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007c1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007c28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007c32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	ff0f0fff 	.word	0xff0f0fff

08007c64 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c7c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007c86:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ca8:	b084      	sub	sp, #16
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	f107 0014 	add.w	r0, r7, #20
 8007cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d11e      	bne.n	8007cfe <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	4b1d      	ldr	r3, [pc, #116]	; (8007d48 <USB_CoreInit+0xa0>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8007ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d105      	bne.n	8007cf6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f940 	bl	8007f7c <USB_CoreReset>
 8007cfc:	e00c      	b.n	8007d18 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f936 	bl	8007f7c <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d10b      	bne.n	8007d36 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f043 0206 	orr.w	r2, r3, #6
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d42:	b004      	add	sp, #16
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	ffbdffbf 	.word	0xffbdffbf

08007d4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f043 0201 	orr.w	r2, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d106      	bne.n	8007dbc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60da      	str	r2, [r3, #12]
 8007dba:	e008      	b.n	8007dce <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d105      	bne.n	8007dce <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8007dce:	2032      	movs	r0, #50	; 0x32
 8007dd0:	f7f9 fe74 	bl	8001abc <HAL_Delay>

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	019b      	lsls	r3, r3, #6
 8007df2:	f043 0220 	orr.w	r2, r3, #32
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a09      	ldr	r2, [pc, #36]	; (8007e28 <USB_FlushTxFifo+0x48>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d901      	bls.n	8007e0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e006      	b.n	8007e1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d0f0      	beq.n	8007dfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	00030d40 	.word	0x00030d40

08007e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <USB_FlushRxFifo+0x40>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d901      	bls.n	8007e50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e006      	b.n	8007e5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b10      	cmp	r3, #16
 8007e5a:	d0f0      	beq.n	8007e3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	00030d40 	.word	0x00030d40

08007e70 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	460b      	mov	r3, r1
 8007e80:	71fb      	strb	r3, [r7, #7]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8007e8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d11d      	bne.n	8007ed2 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 8007e96:	88bb      	ldrh	r3, [r7, #4]
 8007e98:	3303      	adds	r3, #3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da00      	bge.n	8007ea0 <USB_WritePacket+0x30>
 8007e9e:	3303      	adds	r3, #3
 8007ea0:	109b      	asrs	r3, r3, #2
 8007ea2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	e00f      	b.n	8007eca <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	031a      	lsls	r2, r3, #12
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d3eb      	bcc.n	8007eaa <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8007ef2:	88fb      	ldrh	r3, [r7, #6]
 8007ef4:	3303      	adds	r3, #3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	da00      	bge.n	8007efc <USB_ReadPacket+0x1c>
 8007efa:	3303      	adds	r3, #3
 8007efc:	109b      	asrs	r3, r3, #2
 8007efe:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	e00b      	b.n	8007f1e <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	3301      	adds	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	60bb      	str	r3, [r7, #8]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d3ef      	bcc.n	8007f06 <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 8007f26:	68bb      	ldr	r3, [r7, #8]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	371c      	adds	r7, #28
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]
  return v;
 8007f50:	68fb      	ldr	r3, [r7, #12]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <USB_CoreReset+0x64>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d901      	bls.n	8007f9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e01b      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	daf2      	bge.n	8007f88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f043 0201 	orr.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <USB_CoreReset+0x64>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d901      	bls.n	8007fc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d0f0      	beq.n	8007fb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00030d40 	.word	0x00030d40

08007fe4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	f107 001c 	add.w	r0, r7, #28
 8007ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	2300      	movs	r3, #0
 8008000:	6013      	str	r3, [r2, #0]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	2b03      	cmp	r3, #3
 8008012:	d10f      	bne.n	8008034 <USB_HostInit+0x50>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800801a:	d00b      	beq.n	8008034 <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f043 0304 	orr.w	r3, r3, #4
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e00a      	b.n	800804a <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f023 0304 	bic.w	r3, r3, #4
 8008048:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
 800804a:	2110      	movs	r1, #16
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff fec7 	bl	8007de0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff feea 	bl	8007e2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0; i < cfg.Host_channels; i++)
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	e015      	b.n	800808a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFF;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806a:	461a      	mov	r2, r3
 800806c:	f04f 33ff 	mov.w	r3, #4294967295
 8008070:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807e:	461a      	mov	r2, r3
 8008080:	2300      	movs	r3, #0
 8008082:	60d3      	str	r3, [r2, #12]
  for (i = 0; i < cfg.Host_channels; i++)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3301      	adds	r3, #1
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	6a3a      	ldr	r2, [r7, #32]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	429a      	cmp	r2, r3
 8008090:	d8e5      	bhi.n	800805e <USB_HostInit+0x7a>
  }

  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1);
 8008092:	2101      	movs	r1, #1
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f8a7 	bl	80081e8 <USB_DriveVbus>

  HAL_Delay(200);
 800809a:	20c8      	movs	r0, #200	; 0xc8
 800809c:	f7f9 fd0e 	bl	8001abc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFF;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f04f 32ff 	mov.w	r2, #4294967295
 80080ac:	615a      	str	r2, [r3, #20]

  if(USBx == USB_OTG_FS)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b4:	d10a      	bne.n	80080cc <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2280      	movs	r2, #128	; 0x80
 80080ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60 << 16)& USB_OTG_NPTXFD) | 0x80);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a14      	ldr	r2, [pc, #80]	; (8008110 <USB_HostInit+0x12c>)
 80080c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a13      	ldr	r2, [pc, #76]	; (8008114 <USB_HostInit+0x130>)
 80080c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80080ca:	e00a      	b.n	80080e2 <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x200;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100 << 16)& USB_OTG_NPTXFD) | 0x200);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a10      	ldr	r2, [pc, #64]	; (8008118 <USB_HostInit+0x134>)
 80080d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a0f      	ldr	r2, [pc, #60]	; (800811c <USB_HostInit+0x138>)
 80080de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f043 0210 	orr.w	r2, r3, #16
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699a      	ldr	r2, [r3, #24]
 80080f8:	4b09      	ldr	r3, [pc, #36]	; (8008120 <USB_HostInit+0x13c>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800810c:	b004      	add	sp, #16
 800810e:	4770      	bx	lr
 8008110:	00600080 	.word	0x00600080
 8008114:	004000e0 	.word	0x004000e0
 8008118:	01000200 	.word	0x01000200
 800811c:	00e00300 	.word	0x00e00300
 8008120:	a3200008 	.word	0xa3200008

08008124 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f023 0303 	bic.w	r3, r3, #3
 8008144:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800814c:	4619      	mov	r1, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	4313      	orrs	r3, r2
 800815e:	600b      	str	r3, [r1, #0]

  if (freq ==  HCFG_48_MHZ)
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d107      	bne.n	8008176 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800816c:	461a      	mov	r2, r3
 800816e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008172:	6053      	str	r3, [r2, #4]
 8008174:	e009      	b.n	800818a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d106      	bne.n	800818a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008182:	461a      	mov	r2, r3
 8008184:	f241 7370 	movw	r3, #6000	; 0x1770
 8008188:	6053      	str	r3, [r2, #4]
  }
  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_ResetPort>:
  * @retval HAL status
  * @note : (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80081b0:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081b8:	461a      	mov	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c0:	6013      	str	r3, [r2, #0]
  HAL_Delay (100);                                /* See Note #1 */
 80081c2:	2064      	movs	r0, #100	; 0x64
 80081c4:	f7f9 fc7a 	bl	8001abc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d6:	6013      	str	r3, [r2, #0]
  HAL_Delay (10);
 80081d8:	200a      	movs	r0, #10
 80081da:	f7f9 fc6f 	bl	8001abc <HAL_Delay>

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008204:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <USB_DriveVbus+0x3e>
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d107      	bne.n	8008226 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800821c:	461a      	mov	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008224:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800822c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008230:	d10a      	bne.n	8008248 <USB_DriveVbus+0x60>
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d107      	bne.n	8008248 <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800823e:	461a      	mov	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008246:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	0c5b      	lsrs	r3, r3, #17
 800826c:	f003 0303 	and.w	r3, r3, #3
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	b29b      	uxth	r3, r3
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	4608      	mov	r0, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	461a      	mov	r2, r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	70fb      	strb	r3, [r7, #3]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70bb      	strb	r3, [r7, #2]
 80082b2:	4613      	mov	r3, r2
 80082b4:	707b      	strb	r3, [r7, #1]

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c2:	461a      	mov	r2, r3
 80082c4:	f04f 33ff 	mov.w	r3, #4294967295
 80082c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80082ca:	7d3b      	ldrb	r3, [r7, #20]
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	f200 8086 	bhi.w	80083de <USB_HC_Init+0x142>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <USB_HC_Init+0x3c>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	08008395 	.word	0x08008395
 80082e0:	080082e9 	.word	0x080082e9
 80082e4:	08008355 	.word	0x08008355
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f4:	461a      	mov	r2, r3
 80082f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80082fa:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;

    if (epnum & 0x80)
 80082fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008300:	2b00      	cmp	r3, #0
 8008302:	da11      	bge.n	8008328 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4413      	add	r3, r2
 800830c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008310:	4619      	mov	r1, r3
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008324:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 8008326:	e055      	b.n	80083d4 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800832e:	d051      	beq.n	80083d4 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833c:	4619      	mov	r1, r3
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4413      	add	r3, r2
 8008346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008350:	60cb      	str	r3, [r1, #12]
    break;
 8008352:	e03f      	b.n	80083d4 <USB_HC_Init+0x138>

  case EP_TYPE_INTR:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4413      	add	r3, r2
 800835c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008360:	461a      	mov	r2, r3
 8008362:	f240 639d 	movw	r3, #1693	; 0x69d
 8008366:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
 8008368:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800836c:	2b00      	cmp	r3, #0
 800836e:	da33      	bge.n	80083d8 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4413      	add	r3, r2
 8008378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837c:	4619      	mov	r1, r3
 800837e:	78fb      	ldrb	r3, [r7, #3]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4413      	add	r3, r2
 8008386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008390:	60cb      	str	r3, [r1, #12]
    }

    break;
 8008392:	e021      	b.n	80083d8 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a0:	461a      	mov	r2, r3
 80083a2:	f240 2325 	movw	r3, #549	; 0x225
 80083a6:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
 80083a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	da15      	bge.n	80083dc <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083bc:	4619      	mov	r1, r3
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80083d0:	60cb      	str	r3, [r1, #12]
    }
    break;
 80083d2:	e003      	b.n	80083dc <USB_HC_Init+0x140>
    break;
 80083d4:	bf00      	nop
 80083d6:	e002      	b.n	80083de <USB_HC_Init+0x142>
    break;
 80083d8:	bf00      	nop
 80083da:	e000      	b.n	80083de <USB_HC_Init+0x142>
    break;
 80083dc:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083e4:	4618      	mov	r0, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f202 	lsl.w	r2, r1, r2
 80083f6:	4313      	orrs	r3, r2
 80083f8:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008412:	4619      	mov	r1, r3
 8008414:	787b      	ldrb	r3, [r7, #1]
 8008416:	059b      	lsls	r3, r3, #22
 8008418:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 800841c:	78bb      	ldrb	r3, [r7, #2]
 800841e:	02db      	lsls	r3, r3, #11
 8008420:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8008424:	431a      	orrs	r2, r3
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8008426:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800842a:	2b00      	cmp	r3, #0
 800842c:	da02      	bge.n	8008434 <USB_HC_Init+0x198>
 800842e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008432:	e000      	b.n	8008436 <USB_HC_Init+0x19a>
 8008434:	2300      	movs	r3, #0
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 8008436:	431a      	orrs	r2, r3
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8008438:	7c3b      	ldrb	r3, [r7, #16]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d102      	bne.n	8008444 <USB_HC_Init+0x1a8>
 800843e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008442:	e000      	b.n	8008446 <USB_HC_Init+0x1aa>
 8008444:	2300      	movs	r3, #0
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8008446:	431a      	orrs	r2, r3
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 8008448:	7d3b      	ldrb	r3, [r7, #20]
 800844a:	049b      	lsls	r3, r3, #18
 800844c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8008450:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8008452:	8b3b      	ldrh	r3, [r7, #24]
 8008454:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 8008458:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 800845a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800845c:	7d3b      	ldrb	r3, [r7, #20]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d110      	bne.n	8008484 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846e:	4619      	mov	r1, r3
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008482:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop

08008494 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af02      	add	r7, sp, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
  static __IO uint32_t tmpreg = 0;
  uint8_t  is_oddframe = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	757b      	strb	r3, [r7, #21]
  uint16_t len_words = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	827b      	strh	r3, [r7, #18]
  uint16_t num_packets = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	82fb      	strh	r3, [r7, #22]
  uint16_t max_hc_pkt_count = 256;
 80084ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084b2:	823b      	strh	r3, [r7, #16]

  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ba:	d02b      	beq.n	8008514 <USB_HC_StartXfer+0x80>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	791b      	ldrb	r3, [r3, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d127      	bne.n	8008514 <USB_HC_StartXfer+0x80>
  {
    if((dma == 0) && (hc->do_ping == 1))
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <USB_HC_StartXfer+0x4e>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	795b      	ldrb	r3, [r3, #5]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d107      	bne.n	80084e2 <USB_HC_StartXfer+0x4e>
    {
      USB_DoPing(USBx, hc->ch_num);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	4619      	mov	r1, r3
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fa49 	bl	8008970 <USB_DoPing>
      return HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	e123      	b.n	800872a <USB_HC_StartXfer+0x296>
    }
    else if(dma == 1)
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d115      	bne.n	8008514 <USB_HC_StartXfer+0x80>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	4619      	mov	r1, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800850c:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2200      	movs	r2, #0
 8008512:	715a      	strb	r2, [r3, #5]
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d019      	beq.n	8008550 <USB_HC_StartXfer+0xbc>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1) / hc->max_packet;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	8912      	ldrh	r2, [r2, #8]
 8008524:	4413      	add	r3, r2
 8008526:	3b01      	subs	r3, #1
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	8912      	ldrh	r2, [r2, #8]
 800852c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008530:	82fb      	strh	r3, [r7, #22]

    if (num_packets > max_hc_pkt_count)
 8008532:	8afa      	ldrh	r2, [r7, #22]
 8008534:	8a3b      	ldrh	r3, [r7, #16]
 8008536:	429a      	cmp	r2, r3
 8008538:	d90c      	bls.n	8008554 <USB_HC_StartXfer+0xc0>
    {
      num_packets = max_hc_pkt_count;
 800853a:	8a3b      	ldrh	r3, [r7, #16]
 800853c:	82fb      	strh	r3, [r7, #22]
      hc->xfer_len = num_packets * hc->max_packet;
 800853e:	8afb      	ldrh	r3, [r7, #22]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	8912      	ldrh	r2, [r2, #8]
 8008544:	fb02 f303 	mul.w	r3, r2, r3
 8008548:	461a      	mov	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	611a      	str	r2, [r3, #16]
 800854e:	e001      	b.n	8008554 <USB_HC_StartXfer+0xc0>
    }
  }
  else
  {
    num_packets = 1;
 8008550:	2301      	movs	r3, #1
 8008552:	82fb      	strh	r3, [r7, #22]
  }
  if (hc->ep_is_in)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	78db      	ldrb	r3, [r3, #3]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <USB_HC_StartXfer+0xd8>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 800855c:	8afb      	ldrh	r3, [r7, #22]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	8912      	ldrh	r2, [r2, #8]
 8008562:	fb02 f303 	mul.w	r3, r2, r3
 8008566:	461a      	mov	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857a:	4619      	mov	r1, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8008584:	8afb      	ldrh	r3, [r7, #22]
 8008586:	04db      	lsls	r3, r3, #19
 8008588:	4618      	mov	r0, r3
 800858a:	4b6a      	ldr	r3, [pc, #424]	; (8008734 <USB_HC_StartXfer+0x2a0>)
 800858c:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800858e:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	7a9b      	ldrb	r3, [r3, #10]
 8008594:	075b      	lsls	r3, r3, #29
 8008596:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800859a:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800859c:	610b      	str	r3, [r1, #16]

  if (dma)
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <USB_HC_StartXfer+0x126>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b2:	461a      	mov	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bf0c      	ite	eq
 80085ca:	2301      	moveq	r3, #1
 80085cc:	2300      	movne	r3, #0
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	757b      	strb	r3, [r7, #21]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e0:	4619      	mov	r1, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80085f6:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008606:	4619      	mov	r1, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4413      	add	r3, r2
 8008612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	7d7a      	ldrb	r2, [r7, #21]
 800861a:	0752      	lsls	r2, r2, #29
 800861c:	4313      	orrs	r3, r2
 800861e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a41      	ldr	r2, [pc, #260]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 8008632:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008634:	4b40      	ldr	r3, [pc, #256]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800863c:	4a3e      	ldr	r2, [pc, #248]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 800863e:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	78db      	ldrb	r3, [r3, #3]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d006      	beq.n	8008656 <USB_HC_StartXfer+0x1c2>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008648:	4b3b      	ldr	r3, [pc, #236]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008650:	4a39      	ldr	r2, [pc, #228]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	e005      	b.n	8008662 <USB_HC_StartXfer+0x1ce>
  }
  else
  {
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008656:	4b38      	ldr	r3, [pc, #224]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800865e:	4a36      	ldr	r2, [pc, #216]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 8008660:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008662:	4b35      	ldr	r3, [pc, #212]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800866a:	4a33      	ldr	r2, [pc, #204]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 800866c:	6013      	str	r3, [r2, #0]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4413      	add	r3, r2
 8008678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867c:	461a      	mov	r2, r3
 800867e:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <USB_HC_StartXfer+0x2a4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6013      	str	r3, [r2, #0]

  if (dma == 0) /* Slave mode */
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d14e      	bne.n	8008728 <USB_HC_StartXfer+0x294>
  {
    if((hc->ep_is_in == 0) && (hc->xfer_len > 0))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	78db      	ldrb	r3, [r3, #3]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d14a      	bne.n	8008728 <USB_HC_StartXfer+0x294>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d046      	beq.n	8008728 <USB_HC_StartXfer+0x294>
    {
      switch(hc->ep_type)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	79db      	ldrb	r3, [r3, #7]
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d830      	bhi.n	8008704 <USB_HC_StartXfer+0x270>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <USB_HC_StartXfer+0x214>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086b9 	.word	0x080086b9
 80086ac:	080086dd 	.word	0x080086dd
 80086b0:	080086b9 	.word	0x080086b9
 80086b4:	080086dd 	.word	0x080086dd
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (hc->xfer_len + 3) / 4;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	3303      	adds	r3, #3
 80086be:	089b      	lsrs	r3, r3, #2
 80086c0:	827b      	strh	r3, [r7, #18]

        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80086c2:	8a7a      	ldrh	r2, [r7, #18]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d91c      	bls.n	8008708 <USB_HC_StartXfer+0x274>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f043 0220 	orr.w	r2, r3, #32
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80086da:	e015      	b.n	8008708 <USB_HC_StartXfer+0x274>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	3303      	adds	r3, #3
 80086e2:	089b      	lsrs	r3, r3, #2
 80086e4:	827b      	strh	r3, [r7, #18]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 80086e6:	8a7a      	ldrh	r2, [r7, #18]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d90a      	bls.n	800870c <USB_HC_StartXfer+0x278>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	619a      	str	r2, [r3, #24]
        }
        break;
 8008702:	e003      	b.n	800870c <USB_HC_StartXfer+0x278>

      default:
        break;
 8008704:	bf00      	nop
 8008706:	e002      	b.n	800870e <USB_HC_StartXfer+0x27a>
        break;
 8008708:	bf00      	nop
 800870a:	e000      	b.n	800870e <USB_HC_StartXfer+0x27a>
        break;
 800870c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	68d9      	ldr	r1, [r3, #12]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	785a      	ldrb	r2, [r3, #1]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	b298      	uxth	r0, r3
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4603      	mov	r3, r0
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff fba4 	bl	8007e70 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	1ff80000 	.word	0x1ff80000
 8008738:	2000030c 	.word	0x2000030c

0800873c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFF);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	b29b      	uxth	r3, r3
}
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]

  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	0c9b      	lsrs	r3, r3, #18
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00b      	beq.n	800879a <USB_HC_Halt+0x40>
     (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	0c9b      	lsrs	r3, r3, #18
 8008792:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 8008796:	2b02      	cmp	r3, #2
 8008798:	d170      	bne.n	800887c <USB_HC_Halt+0x122>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	4619      	mov	r1, r3
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087ba:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d146      	bne.n	8008854 <USB_HC_Halt+0xfa>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d2:	4619      	mov	r1, r3
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087e6:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f4:	4619      	mov	r1, r3
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008808:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008816:	4619      	mov	r1, r3
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4413      	add	r3, r2
 8008820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800882a:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008838:	d81e      	bhi.n	8008878 <USB_HC_Halt+0x11e>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4413      	add	r3, r2
 8008842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800884c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008850:	d0ec      	beq.n	800882c <USB_HC_Halt+0xd2>
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8008852:	e085      	b.n	8008960 <USB_HC_Halt+0x206>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008860:	4619      	mov	r1, r3
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4413      	add	r3, r2
 800886a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008874:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8008876:	e073      	b.n	8008960 <USB_HC_Halt+0x206>
          break;
 8008878:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800887a:	e071      	b.n	8008960 <USB_HC_Halt+0x206>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4413      	add	r3, r2
 8008884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008888:	4619      	mov	r1, r3
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800889c:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d146      	bne.n	800893a <USB_HC_Halt+0x1e0>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b8:	4619      	mov	r1, r3
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088cc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088da:	4619      	mov	r1, r3
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088ee:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fc:	4619      	mov	r1, r3
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008910:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800891e:	d81e      	bhi.n	800895e <USB_HC_Halt+0x204>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4413      	add	r3, r2
 8008928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008936:	d0ec      	beq.n	8008912 <USB_HC_Halt+0x1b8>
 8008938:	e012      	b.n	8008960 <USB_HC_Halt+0x206>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	4619      	mov	r1, r3
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4413      	add	r3, r2
 8008950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800895a:	600b      	str	r3, [r1, #0]
 800895c:	e000      	b.n	8008960 <USB_HC_Halt+0x206>
          break;
 800895e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
	...

08008970 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1;
 800897c:	2301      	movs	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4413      	add	r3, r2
 800898c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008990:	461a      	mov	r2, r3
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	04db      	lsls	r3, r3, #19
 8008996:	4619      	mov	r1, r3
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <USB_DoPing+0x74>)
 800899a:	400b      	ands	r3, r1
 800899c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ce:	461a      	mov	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	1ff80000 	.word	0x1ff80000

080089e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
  uint32_t value;

  USB_DisableGlobalInt(USBx);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff f9ba 	bl	8007d6e <USB_DisableGlobalInt>

    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 80089fa:	2110      	movs	r1, #16
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff f9ef 	bl	8007de0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff fa12 	bl	8007e2c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75fb      	strb	r3, [r7, #23]
 8008a0c:	e01f      	b.n	8008a4e <USB_StopHost+0x66>
  {

    value = USBx_HC(i)->HCCHAR ;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a24:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a2c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a34:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a42:	461a      	mov	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8008a48:	7dfb      	ldrb	r3, [r7, #23]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	75fb      	strb	r3, [r7, #23]
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	2b0f      	cmp	r3, #15
 8008a52:	d9dc      	bls.n	8008a0e <USB_StopHost+0x26>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0; i <= 15; i++)
 8008a54:	2300      	movs	r3, #0
 8008a56:	75fb      	strb	r3, [r7, #23]
 8008a58:	e034      	b.n	8008ac4 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60fb      	str	r3, [r7, #12]

    value |= USB_OTG_HCCHAR_CHDIS;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a70:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a78:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a80:	60fb      	str	r3, [r7, #12]

    USBx_HC(i)->HCCHAR = value;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8e:	461a      	mov	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6013      	str	r3, [r2, #0]
    do
    {
      if (++count > 1000)
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	3301      	adds	r3, #1
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aa0:	d80c      	bhi.n	8008abc <USB_StopHost+0xd4>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ab8:	d0ec      	beq.n	8008a94 <USB_StopHost+0xac>
 8008aba:	e000      	b.n	8008abe <USB_StopHost+0xd6>
        break;
 8008abc:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	75fb      	strb	r3, [r7, #23]
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	2b0f      	cmp	r3, #15
 8008ac8:	d9c7      	bls.n	8008a5a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFF;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295
 8008ade:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff f933 	bl	8007d4c <USB_EnableGlobalInt>
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008afa:	79fb      	ldrb	r3, [r7, #7]
 8008afc:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <disk_status+0x30>)
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	79fa      	ldrb	r2, [r7, #7]
 8008b08:	4905      	ldr	r1, [pc, #20]	; (8008b20 <disk_status+0x30>)
 8008b0a:	440a      	add	r2, r1
 8008b0c:	7a12      	ldrb	r2, [r2, #8]
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4798      	blx	r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000338 	.word	0x20000338

08008b24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	4a0d      	ldr	r2, [pc, #52]	; (8008b6c <disk_initialize+0x48>)
 8008b36:	5cd3      	ldrb	r3, [r2, r3]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d111      	bne.n	8008b60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	4a0b      	ldr	r2, [pc, #44]	; (8008b6c <disk_initialize+0x48>)
 8008b40:	2101      	movs	r1, #1
 8008b42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <disk_initialize+0x48>)
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	79fa      	ldrb	r2, [r7, #7]
 8008b52:	4906      	ldr	r1, [pc, #24]	; (8008b6c <disk_initialize+0x48>)
 8008b54:	440a      	add	r2, r1
 8008b56:	7a12      	ldrb	r2, [r2, #8]
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000338 	.word	0x20000338

08008b70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <disk_read+0x3c>)
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	689c      	ldr	r4, [r3, #8]
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	4a07      	ldr	r2, [pc, #28]	; (8008bac <disk_read+0x3c>)
 8008b90:	4413      	add	r3, r2
 8008b92:	7a18      	ldrb	r0, [r3, #8]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	47a0      	blx	r4
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd90      	pop	{r4, r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000338 	.word	0x20000338

08008bb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008bb0:	b590      	push	{r4, r7, lr}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <disk_write+0x3c>)
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	68dc      	ldr	r4, [r3, #12]
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	4a07      	ldr	r2, [pc, #28]	; (8008bec <disk_write+0x3c>)
 8008bd0:	4413      	add	r3, r2
 8008bd2:	7a18      	ldrb	r0, [r3, #8]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	68b9      	ldr	r1, [r7, #8]
 8008bda:	47a0      	blx	r4
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]
  return res;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd90      	pop	{r4, r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20000338 	.word	0x20000338

08008bf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	603a      	str	r2, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	4a09      	ldr	r2, [pc, #36]	; (8008c28 <disk_ioctl+0x38>)
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	79fa      	ldrb	r2, [r7, #7]
 8008c0e:	4906      	ldr	r1, [pc, #24]	; (8008c28 <disk_ioctl+0x38>)
 8008c10:	440a      	add	r2, r1
 8008c12:	7a10      	ldrb	r0, [r2, #8]
 8008c14:	79b9      	ldrb	r1, [r7, #6]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4798      	blx	r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20000338 	.word	0x20000338

08008c2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3301      	adds	r3, #1
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	021b      	lsls	r3, r3, #8
 8008c40:	b21a      	sxth	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b21b      	sxth	r3, r3
 8008c4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c4e:	89fb      	ldrh	r3, [r7, #14]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3303      	adds	r3, #3
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	3202      	adds	r2, #2
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	3201      	adds	r2, #1
 8008c82:	7812      	ldrb	r2, [r2, #0]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	021b      	lsls	r3, r3, #8
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7812      	ldrb	r2, [r2, #0]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
	return rv;
 8008c94:	68fb      	ldr	r3, [r7, #12]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	887a      	ldrh	r2, [r7, #2]
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	887b      	ldrh	r3, [r7, #2]
 8008cbc:	0a1b      	lsrs	r3, r3, #8
 8008cbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	607a      	str	r2, [r7, #4]
 8008cc6:	887a      	ldrh	r2, [r7, #2]
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	701a      	strb	r2, [r3, #0]
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	607a      	str	r2, [r7, #4]
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	701a      	strb	r2, [r3, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	0a1b      	lsrs	r3, r3, #8
 8008d16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	701a      	strb	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00d      	beq.n	8008d66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	617a      	str	r2, [r7, #20]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	1c51      	adds	r1, r2, #1
 8008d54:	6139      	str	r1, [r7, #16]
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	607b      	str	r3, [r7, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f1      	bne.n	8008d4a <mem_cpy+0x1a>
	}
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d72:	b480      	push	{r7}
 8008d74:	b087      	sub	sp, #28
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	617a      	str	r2, [r7, #20]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f3      	bne.n	8008d82 <mem_set+0x10>
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008da6:	b480      	push	{r7}
 8008da8:	b089      	sub	sp, #36	; 0x24
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	61fa      	str	r2, [r7, #28]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	61ba      	str	r2, [r7, #24]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	1acb      	subs	r3, r1, r3
 8008dd2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <mem_cmp+0x40>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0eb      	beq.n	8008dbe <mem_cmp+0x18>

	return r;
 8008de6:	697b      	ldr	r3, [r7, #20]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3724      	adds	r7, #36	; 0x24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008dfe:	e002      	b.n	8008e06 <chk_chr+0x12>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3301      	adds	r3, #1
 8008e04:	607b      	str	r3, [r7, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <chk_chr+0x26>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d1f2      	bne.n	8008e00 <chk_chr+0xc>
	return *str;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d009      	beq.n	8008e4c <lock_fs+0x22>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f003 f916 	bl	800c06e <ff_req_grant>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <lock_fs+0x22>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <lock_fs+0x24>
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00d      	beq.n	8008e84 <unlock_fs+0x2e>
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	2b0c      	cmp	r3, #12
 8008e6c:	d00a      	beq.n	8008e84 <unlock_fs+0x2e>
 8008e6e:	78fb      	ldrb	r3, [r7, #3]
 8008e70:	2b0b      	cmp	r3, #11
 8008e72:	d007      	beq.n	8008e84 <unlock_fs+0x2e>
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	2b0f      	cmp	r3, #15
 8008e78:	d004      	beq.n	8008e84 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f003 f90a 	bl	800c098 <ff_rel_grant>
	}
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e96:	2300      	movs	r3, #0
 8008e98:	60bb      	str	r3, [r7, #8]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	e029      	b.n	8008ef4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008ea0:	4a27      	ldr	r2, [pc, #156]	; (8008f40 <chk_lock+0xb4>)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	4413      	add	r3, r2
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01d      	beq.n	8008eea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008eae:	4a24      	ldr	r2, [pc, #144]	; (8008f40 <chk_lock+0xb4>)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	4413      	add	r3, r2
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d116      	bne.n	8008eee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008ec0:	4a1f      	ldr	r2, [pc, #124]	; (8008f40 <chk_lock+0xb4>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3304      	adds	r3, #4
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d10c      	bne.n	8008eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ed4:	4a1a      	ldr	r2, [pc, #104]	; (8008f40 <chk_lock+0xb4>)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	4413      	add	r3, r2
 8008edc:	3308      	adds	r3, #8
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d102      	bne.n	8008eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ee8:	e007      	b.n	8008efa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008eea:	2301      	movs	r3, #1
 8008eec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d9d2      	bls.n	8008ea0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d109      	bne.n	8008f14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <chk_lock+0x80>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d101      	bne.n	8008f10 <chk_lock+0x84>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e010      	b.n	8008f32 <chk_lock+0xa6>
 8008f10:	2312      	movs	r3, #18
 8008f12:	e00e      	b.n	8008f32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d108      	bne.n	8008f2c <chk_lock+0xa0>
 8008f1a:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <chk_lock+0xb4>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	4413      	add	r3, r2
 8008f22:	330c      	adds	r3, #12
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2a:	d101      	bne.n	8008f30 <chk_lock+0xa4>
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	e000      	b.n	8008f32 <chk_lock+0xa6>
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000318 	.word	0x20000318

08008f44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	607b      	str	r3, [r7, #4]
 8008f4e:	e002      	b.n	8008f56 <enq_lock+0x12>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3301      	adds	r3, #1
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d806      	bhi.n	8008f6a <enq_lock+0x26>
 8008f5c:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <enq_lock+0x40>)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	4413      	add	r3, r2
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f2      	bne.n	8008f50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	bf14      	ite	ne
 8008f70:	2301      	movne	r3, #1
 8008f72:	2300      	moveq	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	20000318 	.word	0x20000318

08008f88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	e01f      	b.n	8008fd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f98:	4a41      	ldr	r2, [pc, #260]	; (80090a0 <inc_lock+0x118>)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	4413      	add	r3, r2
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d113      	bne.n	8008fd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008faa:	4a3d      	ldr	r2, [pc, #244]	; (80090a0 <inc_lock+0x118>)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d109      	bne.n	8008fd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008fbe:	4a38      	ldr	r2, [pc, #224]	; (80090a0 <inc_lock+0x118>)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	4413      	add	r3, r2
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d006      	beq.n	8008fe0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d9dc      	bls.n	8008f98 <inc_lock+0x10>
 8008fde:	e000      	b.n	8008fe2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008fe0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d132      	bne.n	800904e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	e002      	b.n	8008ff4 <inc_lock+0x6c>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d806      	bhi.n	8009008 <inc_lock+0x80>
 8008ffa:	4a29      	ldr	r2, [pc, #164]	; (80090a0 <inc_lock+0x118>)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	011b      	lsls	r3, r3, #4
 8009000:	4413      	add	r3, r2
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f2      	bne.n	8008fee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d101      	bne.n	8009012 <inc_lock+0x8a>
 800900e:	2300      	movs	r3, #0
 8009010:	e040      	b.n	8009094 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4922      	ldr	r1, [pc, #136]	; (80090a0 <inc_lock+0x118>)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	440b      	add	r3, r1
 800901e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	491e      	ldr	r1, [pc, #120]	; (80090a0 <inc_lock+0x118>)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	440b      	add	r3, r1
 800902c:	3304      	adds	r3, #4
 800902e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	491a      	ldr	r1, [pc, #104]	; (80090a0 <inc_lock+0x118>)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	440b      	add	r3, r1
 800903c:	3308      	adds	r3, #8
 800903e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009040:	4a17      	ldr	r2, [pc, #92]	; (80090a0 <inc_lock+0x118>)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	4413      	add	r3, r2
 8009048:	330c      	adds	r3, #12
 800904a:	2200      	movs	r2, #0
 800904c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d009      	beq.n	8009068 <inc_lock+0xe0>
 8009054:	4a12      	ldr	r2, [pc, #72]	; (80090a0 <inc_lock+0x118>)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	4413      	add	r3, r2
 800905c:	330c      	adds	r3, #12
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <inc_lock+0xe0>
 8009064:	2300      	movs	r3, #0
 8009066:	e015      	b.n	8009094 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d108      	bne.n	8009080 <inc_lock+0xf8>
 800906e:	4a0c      	ldr	r2, [pc, #48]	; (80090a0 <inc_lock+0x118>)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	011b      	lsls	r3, r3, #4
 8009074:	4413      	add	r3, r2
 8009076:	330c      	adds	r3, #12
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	3301      	adds	r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	e001      	b.n	8009084 <inc_lock+0xfc>
 8009080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009084:	4906      	ldr	r1, [pc, #24]	; (80090a0 <inc_lock+0x118>)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	440b      	add	r3, r1
 800908c:	330c      	adds	r3, #12
 800908e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3301      	adds	r3, #1
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000318 	.word	0x20000318

080090a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	607b      	str	r3, [r7, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d825      	bhi.n	8009104 <dec_lock+0x60>
		n = Files[i].ctr;
 80090b8:	4a17      	ldr	r2, [pc, #92]	; (8009118 <dec_lock+0x74>)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	4413      	add	r3, r2
 80090c0:	330c      	adds	r3, #12
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80090c6:	89fb      	ldrh	r3, [r7, #14]
 80090c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090cc:	d101      	bne.n	80090d2 <dec_lock+0x2e>
 80090ce:	2300      	movs	r3, #0
 80090d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80090d2:	89fb      	ldrh	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <dec_lock+0x3a>
 80090d8:	89fb      	ldrh	r3, [r7, #14]
 80090da:	3b01      	subs	r3, #1
 80090dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80090de:	4a0e      	ldr	r2, [pc, #56]	; (8009118 <dec_lock+0x74>)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	4413      	add	r3, r2
 80090e6:	330c      	adds	r3, #12
 80090e8:	89fa      	ldrh	r2, [r7, #14]
 80090ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80090ec:	89fb      	ldrh	r3, [r7, #14]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d105      	bne.n	80090fe <dec_lock+0x5a>
 80090f2:	4a09      	ldr	r2, [pc, #36]	; (8009118 <dec_lock+0x74>)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	4413      	add	r3, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	737b      	strb	r3, [r7, #13]
 8009102:	e001      	b.n	8009108 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009104:	2302      	movs	r3, #2
 8009106:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009108:	7b7b      	ldrb	r3, [r7, #13]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	20000318 	.word	0x20000318

0800911c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009124:	2300      	movs	r3, #0
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	e010      	b.n	800914c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800912a:	4a0d      	ldr	r2, [pc, #52]	; (8009160 <clear_lock+0x44>)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	011b      	lsls	r3, r3, #4
 8009130:	4413      	add	r3, r2
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	429a      	cmp	r2, r3
 8009138:	d105      	bne.n	8009146 <clear_lock+0x2a>
 800913a:	4a09      	ldr	r2, [pc, #36]	; (8009160 <clear_lock+0x44>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	4413      	add	r3, r2
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d9eb      	bls.n	800912a <clear_lock+0xe>
	}
}
 8009152:	bf00      	nop
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	20000318 	.word	0x20000318

08009164 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	78db      	ldrb	r3, [r3, #3]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d034      	beq.n	80091e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	7858      	ldrb	r0, [r3, #1]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009188:	2301      	movs	r3, #1
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	f7ff fd10 	bl	8008bb0 <disk_write>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009196:	2301      	movs	r3, #1
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	e022      	b.n	80091e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	1ad2      	subs	r2, r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d217      	bcs.n	80091e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	789b      	ldrb	r3, [r3, #2]
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	e010      	b.n	80091dc <sync_window+0x78>
					wsect += fs->fsize;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4413      	add	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7858      	ldrb	r0, [r3, #1]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091ce:	2301      	movs	r3, #1
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	f7ff fced 	bl	8008bb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	3b01      	subs	r3, #1
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d8eb      	bhi.n	80091ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d01b      	beq.n	800923c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff ffad 	bl	8009164 <sync_window>
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d113      	bne.n	800923c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7858      	ldrb	r0, [r3, #1]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800921e:	2301      	movs	r3, #1
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	f7ff fca5 	bl	8008b70 <disk_read>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800922c:	f04f 33ff 	mov.w	r3, #4294967295
 8009230:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009232:	2301      	movs	r3, #1
 8009234:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800923c:	7bfb      	ldrb	r3, [r7, #15]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ff87 	bl	8009164 <sync_window>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d158      	bne.n	8009312 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b03      	cmp	r3, #3
 8009266:	d148      	bne.n	80092fa <sync_fs+0xb2>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	791b      	ldrb	r3, [r3, #4]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d144      	bne.n	80092fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3334      	adds	r3, #52	; 0x34
 8009274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009278:	2100      	movs	r1, #0
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff fd79 	bl	8008d72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3334      	adds	r3, #52	; 0x34
 8009284:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009288:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff fd08 	bl	8008ca2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3334      	adds	r3, #52	; 0x34
 8009296:	4921      	ldr	r1, [pc, #132]	; (800931c <sync_fs+0xd4>)
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fd1d 	bl	8008cd8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3334      	adds	r3, #52	; 0x34
 80092a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80092a6:	491e      	ldr	r1, [pc, #120]	; (8009320 <sync_fs+0xd8>)
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff fd15 	bl	8008cd8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3334      	adds	r3, #52	; 0x34
 80092b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f7ff fd0b 	bl	8008cd8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3334      	adds	r3, #52	; 0x34
 80092c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	4619      	mov	r1, r3
 80092d0:	4610      	mov	r0, r2
 80092d2:	f7ff fd01 	bl	8008cd8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	7858      	ldrb	r0, [r3, #1]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ee:	2301      	movs	r3, #1
 80092f0:	f7ff fc5e 	bl	8008bb0 <disk_write>
			fs->fsi_flag = 0;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	785b      	ldrb	r3, [r3, #1]
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fc74 	bl	8008bf0 <disk_ioctl>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <sync_fs+0xca>
 800930e:	2301      	movs	r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	41615252 	.word	0x41615252
 8009320:	61417272 	.word	0x61417272

08009324 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	3b02      	subs	r3, #2
 8009332:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	1e9a      	subs	r2, r3, #2
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	d801      	bhi.n	8009344 <clust2sect+0x20>
 8009340:	2300      	movs	r3, #0
 8009342:	e008      	b.n	8009356 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	895b      	ldrh	r3, [r3, #10]
 8009348:	461a      	mov	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	fb03 f202 	mul.w	r2, r3, r2
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4413      	add	r3, r2
}
 8009356:	4618      	mov	r0, r3
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d904      	bls.n	8009382 <get_fat+0x20>
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	699a      	ldr	r2, [r3, #24]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d802      	bhi.n	8009388 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009382:	2301      	movs	r3, #1
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	e08c      	b.n	80094a2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009388:	f04f 33ff 	mov.w	r3, #4294967295
 800938c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d045      	beq.n	8009422 <get_fat+0xc0>
 8009396:	2b03      	cmp	r3, #3
 8009398:	d05d      	beq.n	8009456 <get_fat+0xf4>
 800939a:	2b01      	cmp	r3, #1
 800939c:	d177      	bne.n	800948e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4413      	add	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	0a5b      	lsrs	r3, r3, #9
 80093b4:	4413      	add	r3, r2
 80093b6:	4619      	mov	r1, r3
 80093b8:	6938      	ldr	r0, [r7, #16]
 80093ba:	f7ff ff17 	bl	80091ec <move_window>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d167      	bne.n	8009494 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	60fa      	str	r2, [r7, #12]
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	4413      	add	r3, r2
 80093d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	0a5b      	lsrs	r3, r3, #9
 80093e0:	4413      	add	r3, r2
 80093e2:	4619      	mov	r1, r3
 80093e4:	6938      	ldr	r0, [r7, #16]
 80093e6:	f7ff ff01 	bl	80091ec <move_window>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d153      	bne.n	8009498 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	4413      	add	r3, r2
 80093fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	461a      	mov	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4313      	orrs	r3, r2
 8009406:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <get_fat+0xb6>
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	091b      	lsrs	r3, r3, #4
 8009416:	e002      	b.n	800941e <get_fat+0xbc>
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800941e:	617b      	str	r3, [r7, #20]
			break;
 8009420:	e03f      	b.n	80094a2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	4413      	add	r3, r2
 800942c:	4619      	mov	r1, r3
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f7ff fedc 	bl	80091ec <move_window>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d130      	bne.n	800949c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009448:	4413      	add	r3, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff fbee 	bl	8008c2c <ld_word>
 8009450:	4603      	mov	r3, r0
 8009452:	617b      	str	r3, [r7, #20]
			break;
 8009454:	e025      	b.n	80094a2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	09db      	lsrs	r3, r3, #7
 800945e:	4413      	add	r3, r2
 8009460:	4619      	mov	r1, r3
 8009462:	6938      	ldr	r0, [r7, #16]
 8009464:	f7ff fec2 	bl	80091ec <move_window>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d118      	bne.n	80094a0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800947c:	4413      	add	r3, r2
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff fbec 	bl	8008c5c <ld_dword>
 8009484:	4603      	mov	r3, r0
 8009486:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800948a:	617b      	str	r3, [r7, #20]
			break;
 800948c:	e009      	b.n	80094a2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800948e:	2301      	movs	r3, #1
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	e006      	b.n	80094a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009494:	bf00      	nop
 8009496:	e004      	b.n	80094a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009498:	bf00      	nop
 800949a:	e002      	b.n	80094a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80094a0:	bf00      	nop
		}
	}

	return val;
 80094a2:	697b      	ldr	r3, [r7, #20]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b089      	sub	sp, #36	; 0x24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80094b8:	2302      	movs	r3, #2
 80094ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	f240 80d6 	bls.w	8009670 <put_fat+0x1c4>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	f240 80d0 	bls.w	8009670 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d073      	beq.n	80095c0 <put_fat+0x114>
 80094d8:	2b03      	cmp	r3, #3
 80094da:	f000 8091 	beq.w	8009600 <put_fat+0x154>
 80094de:	2b01      	cmp	r3, #1
 80094e0:	f040 80c6 	bne.w	8009670 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	61bb      	str	r3, [r7, #24]
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	085b      	lsrs	r3, r3, #1
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	4413      	add	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	0a5b      	lsrs	r3, r3, #9
 80094fa:	4413      	add	r3, r2
 80094fc:	4619      	mov	r1, r3
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff fe74 	bl	80091ec <move_window>
 8009504:	4603      	mov	r3, r0
 8009506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009508:	7ffb      	ldrb	r3, [r7, #31]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f040 80a9 	bne.w	8009662 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	1c59      	adds	r1, r3, #1
 800951a:	61b9      	str	r1, [r7, #24]
 800951c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009520:	4413      	add	r3, r2
 8009522:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00d      	beq.n	800954a <put_fat+0x9e>
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	b25b      	sxtb	r3, r3
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	b25a      	sxtb	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	b25b      	sxtb	r3, r3
 8009542:	4313      	orrs	r3, r2
 8009544:	b25b      	sxtb	r3, r3
 8009546:	b2db      	uxtb	r3, r3
 8009548:	e001      	b.n	800954e <put_fat+0xa2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	0a5b      	lsrs	r3, r3, #9
 8009560:	4413      	add	r3, r2
 8009562:	4619      	mov	r1, r3
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fe41 	bl	80091ec <move_window>
 800956a:	4603      	mov	r3, r0
 800956c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800956e:	7ffb      	ldrb	r3, [r7, #31]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d178      	bne.n	8009666 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	4413      	add	r3, r2
 8009582:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <put_fat+0xea>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	091b      	lsrs	r3, r3, #4
 8009592:	b2db      	uxtb	r3, r3
 8009594:	e00e      	b.n	80095b4 <put_fat+0x108>
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	b25b      	sxtb	r3, r3
 800959c:	f023 030f 	bic.w	r3, r3, #15
 80095a0:	b25a      	sxtb	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0a1b      	lsrs	r3, r3, #8
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	f003 030f 	and.w	r3, r3, #15
 80095ac:	b25b      	sxtb	r3, r3
 80095ae:	4313      	orrs	r3, r2
 80095b0:	b25b      	sxtb	r3, r3
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	70da      	strb	r2, [r3, #3]
			break;
 80095be:	e057      	b.n	8009670 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	4413      	add	r3, r2
 80095ca:	4619      	mov	r1, r3
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff fe0d 	bl	80091ec <move_window>
 80095d2:	4603      	mov	r3, r0
 80095d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095d6:	7ffb      	ldrb	r3, [r7, #31]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d146      	bne.n	800966a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80095ea:	4413      	add	r3, r2
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	b292      	uxth	r2, r2
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fb55 	bl	8008ca2 <st_word>
			fs->wflag = 1;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	70da      	strb	r2, [r3, #3]
			break;
 80095fe:	e037      	b.n	8009670 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	09db      	lsrs	r3, r3, #7
 8009608:	4413      	add	r3, r2
 800960a:	4619      	mov	r1, r3
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff fded 	bl	80091ec <move_window>
 8009612:	4603      	mov	r3, r0
 8009614:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009616:	7ffb      	ldrb	r3, [r7, #31]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d128      	bne.n	800966e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009630:	4413      	add	r3, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff fb12 	bl	8008c5c <ld_dword>
 8009638:	4603      	mov	r3, r0
 800963a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800963e:	4323      	orrs	r3, r4
 8009640:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009650:	4413      	add	r3, r2
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff fb3f 	bl	8008cd8 <st_dword>
			fs->wflag = 1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2201      	movs	r2, #1
 800965e:	70da      	strb	r2, [r3, #3]
			break;
 8009660:	e006      	b.n	8009670 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009662:	bf00      	nop
 8009664:	e004      	b.n	8009670 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009666:	bf00      	nop
 8009668:	e002      	b.n	8009670 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800966e:	bf00      	nop
		}
	}
	return res;
 8009670:	7ffb      	ldrb	r3, [r7, #31]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3724      	adds	r7, #36	; 0x24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd90      	pop	{r4, r7, pc}

0800967a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b088      	sub	sp, #32
 800967e:	af00      	add	r7, sp, #0
 8009680:	60f8      	str	r0, [r7, #12]
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d904      	bls.n	80096a0 <remove_chain+0x26>
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	d801      	bhi.n	80096a4 <remove_chain+0x2a>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e04b      	b.n	800973c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00c      	beq.n	80096c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80096aa:	f04f 32ff 	mov.w	r2, #4294967295
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	69b8      	ldr	r0, [r7, #24]
 80096b2:	f7ff fefb 	bl	80094ac <put_fat>
 80096b6:	4603      	mov	r3, r0
 80096b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80096ba:	7ffb      	ldrb	r3, [r7, #31]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <remove_chain+0x4a>
 80096c0:	7ffb      	ldrb	r3, [r7, #31]
 80096c2:	e03b      	b.n	800973c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7ff fe4b 	bl	8009362 <get_fat>
 80096cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d031      	beq.n	8009738 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <remove_chain+0x64>
 80096da:	2302      	movs	r3, #2
 80096dc:	e02e      	b.n	800973c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e4:	d101      	bne.n	80096ea <remove_chain+0x70>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e028      	b.n	800973c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80096ea:	2200      	movs	r2, #0
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	69b8      	ldr	r0, [r7, #24]
 80096f0:	f7ff fedc 	bl	80094ac <put_fat>
 80096f4:	4603      	mov	r3, r0
 80096f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80096f8:	7ffb      	ldrb	r3, [r7, #31]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <remove_chain+0x88>
 80096fe:	7ffb      	ldrb	r3, [r7, #31]
 8009700:	e01c      	b.n	800973c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	695a      	ldr	r2, [r3, #20]
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	3b02      	subs	r3, #2
 800970c:	429a      	cmp	r2, r3
 800970e:	d20b      	bcs.n	8009728 <remove_chain+0xae>
			fs->free_clst++;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	791b      	ldrb	r3, [r3, #4]
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	b2da      	uxtb	r2, r3
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	699a      	ldr	r2, [r3, #24]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	d8c6      	bhi.n	80096c4 <remove_chain+0x4a>
 8009736:	e000      	b.n	800973a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009738:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10d      	bne.n	8009776 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <create_chain+0x2c>
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	699a      	ldr	r2, [r3, #24]
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	429a      	cmp	r2, r3
 800976e:	d81b      	bhi.n	80097a8 <create_chain+0x64>
 8009770:	2301      	movs	r3, #1
 8009772:	61bb      	str	r3, [r7, #24]
 8009774:	e018      	b.n	80097a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fdf2 	bl	8009362 <get_fat>
 800977e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d801      	bhi.n	800978a <create_chain+0x46>
 8009786:	2301      	movs	r3, #1
 8009788:	e070      	b.n	800986c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d101      	bne.n	8009796 <create_chain+0x52>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	e06a      	b.n	800986c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	429a      	cmp	r2, r3
 800979e:	d901      	bls.n	80097a4 <create_chain+0x60>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	e063      	b.n	800986c <create_chain+0x128>
		scl = clst;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	3301      	adds	r3, #1
 80097b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d807      	bhi.n	80097cc <create_chain+0x88>
				ncl = 2;
 80097bc:	2302      	movs	r3, #2
 80097be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80097c0:	69fa      	ldr	r2, [r7, #28]
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d901      	bls.n	80097cc <create_chain+0x88>
 80097c8:	2300      	movs	r3, #0
 80097ca:	e04f      	b.n	800986c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80097cc:	69f9      	ldr	r1, [r7, #28]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff fdc7 	bl	8009362 <get_fat>
 80097d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00e      	beq.n	80097fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d003      	beq.n	80097ea <create_chain+0xa6>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e8:	d101      	bne.n	80097ee <create_chain+0xaa>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	e03e      	b.n	800986c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d1da      	bne.n	80097ac <create_chain+0x68>
 80097f6:	2300      	movs	r3, #0
 80097f8:	e038      	b.n	800986c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80097fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009800:	69f9      	ldr	r1, [r7, #28]
 8009802:	6938      	ldr	r0, [r7, #16]
 8009804:	f7ff fe52 	bl	80094ac <put_fat>
 8009808:	4603      	mov	r3, r0
 800980a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800980c:	7dfb      	ldrb	r3, [r7, #23]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <create_chain+0xe2>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d006      	beq.n	8009826 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6938      	ldr	r0, [r7, #16]
 800981e:	f7ff fe45 	bl	80094ac <put_fat>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d116      	bne.n	800985a <create_chain+0x116>
		fs->last_clst = ncl;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	695a      	ldr	r2, [r3, #20]
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	3b02      	subs	r3, #2
 800983c:	429a      	cmp	r2, r3
 800983e:	d804      	bhi.n	800984a <create_chain+0x106>
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	1e5a      	subs	r2, r3, #1
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	791b      	ldrb	r3, [r3, #4]
 800984e:	f043 0301 	orr.w	r3, r3, #1
 8009852:	b2da      	uxtb	r2, r3
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	711a      	strb	r2, [r3, #4]
 8009858:	e007      	b.n	800986a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d102      	bne.n	8009866 <create_chain+0x122>
 8009860:	f04f 33ff 	mov.w	r3, #4294967295
 8009864:	e000      	b.n	8009868 <create_chain+0x124>
 8009866:	2301      	movs	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800986a:	69fb      	ldr	r3, [r7, #28]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3720      	adds	r7, #32
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	3304      	adds	r3, #4
 800988a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	0a5b      	lsrs	r3, r3, #9
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	8952      	ldrh	r2, [r2, #10]
 8009894:	fbb3 f3f2 	udiv	r3, r3, r2
 8009898:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	1d1a      	adds	r2, r3, #4
 800989e:	613a      	str	r2, [r7, #16]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <clmt_clust+0x3a>
 80098aa:	2300      	movs	r3, #0
 80098ac:	e010      	b.n	80098d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d307      	bcc.n	80098c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	617b      	str	r3, [r7, #20]
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	3304      	adds	r3, #4
 80098c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80098c4:	e7e9      	b.n	800989a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80098c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	4413      	add	r3, r2
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	371c      	adds	r7, #28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098f2:	d204      	bcs.n	80098fe <dir_sdi+0x22>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	f003 031f 	and.w	r3, r3, #31
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <dir_sdi+0x26>
		return FR_INT_ERR;
 80098fe:	2302      	movs	r3, #2
 8009900:	e063      	b.n	80099ca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <dir_sdi+0x46>
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d902      	bls.n	8009922 <dir_sdi+0x46>
		clst = fs->dirbase;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009920:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10c      	bne.n	8009942 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	095b      	lsrs	r3, r3, #5
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	8912      	ldrh	r2, [r2, #8]
 8009930:	4293      	cmp	r3, r2
 8009932:	d301      	bcc.n	8009938 <dir_sdi+0x5c>
 8009934:	2302      	movs	r3, #2
 8009936:	e048      	b.n	80099ca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	61da      	str	r2, [r3, #28]
 8009940:	e029      	b.n	8009996 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	895b      	ldrh	r3, [r3, #10]
 8009946:	025b      	lsls	r3, r3, #9
 8009948:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800994a:	e019      	b.n	8009980 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6979      	ldr	r1, [r7, #20]
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff fd06 	bl	8009362 <get_fat>
 8009956:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d101      	bne.n	8009964 <dir_sdi+0x88>
 8009960:	2301      	movs	r3, #1
 8009962:	e032      	b.n	80099ca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d904      	bls.n	8009974 <dir_sdi+0x98>
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	699a      	ldr	r2, [r3, #24]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	429a      	cmp	r2, r3
 8009972:	d801      	bhi.n	8009978 <dir_sdi+0x9c>
 8009974:	2302      	movs	r3, #2
 8009976:	e028      	b.n	80099ca <dir_sdi+0xee>
			ofs -= csz;
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	429a      	cmp	r2, r3
 8009986:	d2e1      	bcs.n	800994c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009988:	6979      	ldr	r1, [r7, #20]
 800998a:	6938      	ldr	r0, [r7, #16]
 800998c:	f7ff fcca 	bl	8009324 <clust2sect>
 8009990:	4602      	mov	r2, r0
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <dir_sdi+0xcc>
 80099a4:	2302      	movs	r3, #2
 80099a6:	e010      	b.n	80099ca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	69da      	ldr	r2, [r3, #28]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	0a5b      	lsrs	r3, r3, #9
 80099b0:	441a      	add	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c2:	441a      	add	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b086      	sub	sp, #24
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	3320      	adds	r3, #32
 80099e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <dir_next+0x28>
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099f8:	d301      	bcc.n	80099fe <dir_next+0x2c>
 80099fa:	2304      	movs	r3, #4
 80099fc:	e0aa      	b.n	8009b54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f040 8098 	bne.w	8009b3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10b      	bne.n	8009a34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	095b      	lsrs	r3, r3, #5
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	8912      	ldrh	r2, [r2, #8]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	f0c0 8088 	bcc.w	8009b3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	61da      	str	r2, [r3, #28]
 8009a30:	2304      	movs	r3, #4
 8009a32:	e08f      	b.n	8009b54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	0a5b      	lsrs	r3, r3, #9
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	8952      	ldrh	r2, [r2, #10]
 8009a3c:	3a01      	subs	r2, #1
 8009a3e:	4013      	ands	r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d17a      	bne.n	8009b3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	f7ff fc88 	bl	8009362 <get_fat>
 8009a52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d801      	bhi.n	8009a5e <dir_next+0x8c>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e07a      	b.n	8009b54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d101      	bne.n	8009a6a <dir_next+0x98>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e074      	b.n	8009b54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	699a      	ldr	r2, [r3, #24]
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d858      	bhi.n	8009b26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d104      	bne.n	8009a84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	61da      	str	r2, [r3, #28]
 8009a80:	2304      	movs	r3, #4
 8009a82:	e067      	b.n	8009b54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7ff fe59 	bl	8009744 <create_chain>
 8009a92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <dir_next+0xcc>
 8009a9a:	2307      	movs	r3, #7
 8009a9c:	e05a      	b.n	8009b54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <dir_next+0xd6>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e055      	b.n	8009b54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aae:	d101      	bne.n	8009ab4 <dir_next+0xe2>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e04f      	b.n	8009b54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f7ff fb55 	bl	8009164 <sync_window>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <dir_next+0xf2>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e047      	b.n	8009b54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	3334      	adds	r3, #52	; 0x34
 8009ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009acc:	2100      	movs	r1, #0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff f94f 	bl	8008d72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	6979      	ldr	r1, [r7, #20]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff fc22 	bl	8009324 <clust2sect>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8009ae6:	e012      	b.n	8009b0e <dir_next+0x13c>
						fs->wflag = 1;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff fb38 	bl	8009164 <sync_window>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <dir_next+0x12c>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e02a      	b.n	8009b54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	3301      	adds	r3, #1
 8009b02:	613b      	str	r3, [r7, #16]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	895b      	ldrh	r3, [r3, #10]
 8009b12:	461a      	mov	r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d8e6      	bhi.n	8009ae8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	1ad2      	subs	r2, r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009b2c:	6979      	ldr	r1, [r7, #20]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff fbf8 	bl	8009324 <clust2sect>
 8009b34:	4602      	mov	r2, r0
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4c:	441a      	add	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff feb4 	bl	80098dc <dir_sdi>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d12b      	bne.n	8009bd6 <dir_alloc+0x7a>
		n = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	4619      	mov	r1, r3
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff fb2f 	bl	80091ec <move_window>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d11d      	bne.n	8009bd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2be5      	cmp	r3, #229	; 0xe5
 8009ba0:	d004      	beq.n	8009bac <dir_alloc+0x50>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d107      	bne.n	8009bbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d102      	bne.n	8009bc0 <dir_alloc+0x64>
 8009bba:	e00c      	b.n	8009bd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff ff05 	bl	80099d2 <dir_next>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0d7      	beq.n	8009b82 <dir_alloc+0x26>
 8009bd2:	e000      	b.n	8009bd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009bd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d101      	bne.n	8009be0 <dir_alloc+0x84>
 8009bdc:	2307      	movs	r3, #7
 8009bde:	75fb      	strb	r3, [r7, #23]
	return res;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	331a      	adds	r3, #26
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff f817 	bl	8008c2c <ld_word>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d109      	bne.n	8009c1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	3314      	adds	r3, #20
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff f80c 	bl	8008c2c <ld_word>
 8009c14:	4603      	mov	r3, r0
 8009c16:	041b      	lsls	r3, r3, #16
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	331a      	adds	r3, #26
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	b292      	uxth	r2, r2
 8009c3c:	4611      	mov	r1, r2
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff f82f 	bl	8008ca2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d109      	bne.n	8009c60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f103 0214 	add.w	r2, r3, #20
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	0c1b      	lsrs	r3, r3, #16
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	f7ff f821 	bl	8008ca2 <st_word>
	}
}
 8009c60:	bf00      	nop
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009c72:	2304      	movs	r3, #4
 8009c74:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009c7c:	e03c      	b.n	8009cf8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6938      	ldr	r0, [r7, #16]
 8009c86:	f7ff fab1 	bl	80091ec <move_window>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d136      	bne.n	8009d02 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d102      	bne.n	8009ca8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009ca2:	2304      	movs	r3, #4
 8009ca4:	75fb      	strb	r3, [r7, #23]
 8009ca6:	e031      	b.n	8009d0c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	330b      	adds	r3, #11
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cb4:	73bb      	strb	r3, [r7, #14]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	7bba      	ldrb	r2, [r7, #14]
 8009cba:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2be5      	cmp	r3, #229	; 0xe5
 8009cc0:	d011      	beq.n	8009ce6 <dir_read+0x7e>
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009cc6:	d00e      	beq.n	8009ce6 <dir_read+0x7e>
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	2b0f      	cmp	r3, #15
 8009ccc:	d00b      	beq.n	8009ce6 <dir_read+0x7e>
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	f023 0320 	bic.w	r3, r3, #32
 8009cd4:	2b08      	cmp	r3, #8
 8009cd6:	bf0c      	ite	eq
 8009cd8:	2301      	moveq	r3, #1
 8009cda:	2300      	movne	r3, #0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	461a      	mov	r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d00f      	beq.n	8009d06 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fe72 	bl	80099d2 <dir_next>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <dir_read+0xa2>
	while (dp->sect) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1be      	bne.n	8009c7e <dir_read+0x16>
 8009d00:	e004      	b.n	8009d0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <dir_read+0xa4>
				break;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009d0a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <dir_read+0xb0>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	61da      	str	r2, [r3, #28]
	return res;
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009d30:	2100      	movs	r1, #0
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff fdd2 	bl	80098dc <dir_sdi>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <dir_find+0x24>
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	e03e      	b.n	8009dc4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6938      	ldr	r0, [r7, #16]
 8009d4e:	f7ff fa4d 	bl	80091ec <move_window>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d12f      	bne.n	8009dbc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d102      	bne.n	8009d70 <dir_find+0x4e>
 8009d6a:	2304      	movs	r3, #4
 8009d6c:	75fb      	strb	r3, [r7, #23]
 8009d6e:	e028      	b.n	8009dc2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	330b      	adds	r3, #11
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	330b      	adds	r3, #11
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10a      	bne.n	8009da8 <dir_find+0x86>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a18      	ldr	r0, [r3, #32]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3324      	adds	r3, #36	; 0x24
 8009d9a:	220b      	movs	r2, #11
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f7ff f802 	bl	8008da6 <mem_cmp>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009da8:	2100      	movs	r1, #0
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fe11 	bl	80099d2 <dir_next>
 8009db0:	4603      	mov	r3, r0
 8009db2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0c5      	beq.n	8009d46 <dir_find+0x24>
 8009dba:	e002      	b.n	8009dc2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009dbc:	bf00      	nop
 8009dbe:	e000      	b.n	8009dc2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009dc0:	bf00      	nop

	return res;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3718      	adds	r7, #24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009dda:	2101      	movs	r1, #1
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff febd 	bl	8009b5c <dir_alloc>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d11c      	bne.n	8009e26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	4619      	mov	r1, r3
 8009df2:	68b8      	ldr	r0, [r7, #8]
 8009df4:	f7ff f9fa 	bl	80091ec <move_window>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d111      	bne.n	8009e26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	2220      	movs	r2, #32
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe ffb1 	bl	8008d72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a18      	ldr	r0, [r3, #32]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3324      	adds	r3, #36	; 0x24
 8009e18:	220b      	movs	r2, #11
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	f7fe ff88 	bl	8008d30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2201      	movs	r2, #1
 8009e24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d04e      	beq.n	8009ee6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	613b      	str	r3, [r7, #16]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009e50:	e021      	b.n	8009e96 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1a      	ldr	r2, [r3, #32]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	1c59      	adds	r1, r3, #1
 8009e5a:	6179      	str	r1, [r7, #20]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	2b20      	cmp	r3, #32
 8009e66:	d100      	bne.n	8009e6a <get_fileinfo+0x3a>
 8009e68:	e015      	b.n	8009e96 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2b05      	cmp	r3, #5
 8009e6e:	d101      	bne.n	8009e74 <get_fileinfo+0x44>
 8009e70:	23e5      	movs	r3, #229	; 0xe5
 8009e72:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d106      	bne.n	8009e88 <get_fileinfo+0x58>
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	613a      	str	r2, [r7, #16]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	4413      	add	r3, r2
 8009e84:	222e      	movs	r2, #46	; 0x2e
 8009e86:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	613a      	str	r2, [r7, #16]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	4413      	add	r3, r2
 8009e92:	7bfa      	ldrb	r2, [r7, #15]
 8009e94:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b0a      	cmp	r3, #10
 8009e9a:	d9da      	bls.n	8009e52 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3309      	adds	r3, #9
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	7ada      	ldrb	r2, [r3, #11]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	331c      	adds	r3, #28
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe fecf 	bl	8008c5c <ld_dword>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	3316      	adds	r3, #22
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fec6 	bl	8008c5c <ld_dword>
 8009ed0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	80da      	strh	r2, [r3, #6]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	0c1b      	lsrs	r3, r3, #16
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	809a      	strh	r2, [r3, #4]
 8009ee4:	e000      	b.n	8009ee8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009ee6:	bf00      	nop
}
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b088      	sub	sp, #32
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3324      	adds	r3, #36	; 0x24
 8009f04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009f06:	220b      	movs	r2, #11
 8009f08:	2120      	movs	r1, #32
 8009f0a:	68b8      	ldr	r0, [r7, #8]
 8009f0c:	f7fe ff31 	bl	8008d72 <mem_set>
	si = i = 0; ni = 8;
 8009f10:	2300      	movs	r3, #0
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	2308      	movs	r3, #8
 8009f1a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	617a      	str	r2, [r7, #20]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4413      	add	r3, r2
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f2a:	7ffb      	ldrb	r3, [r7, #31]
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d94e      	bls.n	8009fce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009f30:	7ffb      	ldrb	r3, [r7, #31]
 8009f32:	2b2f      	cmp	r3, #47	; 0x2f
 8009f34:	d006      	beq.n	8009f44 <create_name+0x54>
 8009f36:	7ffb      	ldrb	r3, [r7, #31]
 8009f38:	2b5c      	cmp	r3, #92	; 0x5c
 8009f3a:	d110      	bne.n	8009f5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f3c:	e002      	b.n	8009f44 <create_name+0x54>
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	3301      	adds	r3, #1
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	4413      	add	r3, r2
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b2f      	cmp	r3, #47	; 0x2f
 8009f4e:	d0f6      	beq.n	8009f3e <create_name+0x4e>
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	4413      	add	r3, r2
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b5c      	cmp	r3, #92	; 0x5c
 8009f5a:	d0f0      	beq.n	8009f3e <create_name+0x4e>
			break;
 8009f5c:	e038      	b.n	8009fd0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009f5e:	7ffb      	ldrb	r3, [r7, #31]
 8009f60:	2b2e      	cmp	r3, #46	; 0x2e
 8009f62:	d003      	beq.n	8009f6c <create_name+0x7c>
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d30c      	bcc.n	8009f86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	2b0b      	cmp	r3, #11
 8009f70:	d002      	beq.n	8009f78 <create_name+0x88>
 8009f72:	7ffb      	ldrb	r3, [r7, #31]
 8009f74:	2b2e      	cmp	r3, #46	; 0x2e
 8009f76:	d001      	beq.n	8009f7c <create_name+0x8c>
 8009f78:	2306      	movs	r3, #6
 8009f7a:	e044      	b.n	800a006 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	613b      	str	r3, [r7, #16]
 8009f80:	230b      	movs	r3, #11
 8009f82:	61bb      	str	r3, [r7, #24]
			continue;
 8009f84:	e022      	b.n	8009fcc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009f86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	da04      	bge.n	8009f98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009f8e:	7ffb      	ldrb	r3, [r7, #31]
 8009f90:	3b80      	subs	r3, #128	; 0x80
 8009f92:	4a1f      	ldr	r2, [pc, #124]	; (800a010 <create_name+0x120>)
 8009f94:	5cd3      	ldrb	r3, [r2, r3]
 8009f96:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009f98:	7ffb      	ldrb	r3, [r7, #31]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	481d      	ldr	r0, [pc, #116]	; (800a014 <create_name+0x124>)
 8009f9e:	f7fe ff29 	bl	8008df4 <chk_chr>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <create_name+0xbc>
 8009fa8:	2306      	movs	r3, #6
 8009faa:	e02c      	b.n	800a006 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009fac:	7ffb      	ldrb	r3, [r7, #31]
 8009fae:	2b60      	cmp	r3, #96	; 0x60
 8009fb0:	d905      	bls.n	8009fbe <create_name+0xce>
 8009fb2:	7ffb      	ldrb	r3, [r7, #31]
 8009fb4:	2b7a      	cmp	r3, #122	; 0x7a
 8009fb6:	d802      	bhi.n	8009fbe <create_name+0xce>
 8009fb8:	7ffb      	ldrb	r3, [r7, #31]
 8009fba:	3b20      	subs	r3, #32
 8009fbc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	613a      	str	r2, [r7, #16]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	7ffa      	ldrb	r2, [r7, #31]
 8009fca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009fcc:	e7a6      	b.n	8009f1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009fce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <create_name+0xf4>
 8009fe0:	2306      	movs	r3, #6
 8009fe2:	e010      	b.n	800a006 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2be5      	cmp	r3, #229	; 0xe5
 8009fea:	d102      	bne.n	8009ff2 <create_name+0x102>
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2205      	movs	r2, #5
 8009ff0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	330b      	adds	r3, #11
 8009ff6:	7ffa      	ldrb	r2, [r7, #31]
 8009ff8:	2a20      	cmp	r2, #32
 8009ffa:	d801      	bhi.n	800a000 <create_name+0x110>
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	e000      	b.n	800a002 <create_name+0x112>
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a004:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a006:	4618      	mov	r0, r3
 800a008:	3720      	adds	r7, #32
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	08018cd8 	.word	0x08018cd8
 800a014:	08015d24 	.word	0x08015d24

0800a018 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a02c:	e002      	b.n	800a034 <follow_path+0x1c>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	3301      	adds	r3, #1
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b2f      	cmp	r3, #47	; 0x2f
 800a03a:	d0f8      	beq.n	800a02e <follow_path+0x16>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b5c      	cmp	r3, #92	; 0x5c
 800a042:	d0f4      	beq.n	800a02e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2200      	movs	r2, #0
 800a048:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b1f      	cmp	r3, #31
 800a050:	d80a      	bhi.n	800a068 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2280      	movs	r2, #128	; 0x80
 800a056:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a05a:	2100      	movs	r1, #0
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff fc3d 	bl	80098dc <dir_sdi>
 800a062:	4603      	mov	r3, r0
 800a064:	75fb      	strb	r3, [r7, #23]
 800a066:	e043      	b.n	800a0f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a068:	463b      	mov	r3, r7
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ff3f 	bl	8009ef0 <create_name>
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d134      	bne.n	800a0e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff fe50 	bl	8009d22 <dir_find>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a08c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b04      	cmp	r3, #4
 800a098:	d127      	bne.n	800a0ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a09a:	7afb      	ldrb	r3, [r7, #11]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d122      	bne.n	800a0ea <follow_path+0xd2>
 800a0a4:	2305      	movs	r3, #5
 800a0a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0a8:	e01f      	b.n	800a0ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d11c      	bne.n	800a0ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	799b      	ldrb	r3, [r3, #6]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0c0:	2305      	movs	r3, #5
 800a0c2:	75fb      	strb	r3, [r7, #23]
 800a0c4:	e014      	b.n	800a0f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d4:	4413      	add	r3, r2
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff fd86 	bl	8009bea <ld_clust>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0e4:	e7c0      	b.n	800a068 <follow_path+0x50>
			if (res != FR_OK) break;
 800a0e6:	bf00      	nop
 800a0e8:	e002      	b.n	800a0f0 <follow_path+0xd8>
				break;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0ee:	bf00      	nop
			}
		}
	}

	return res;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b087      	sub	sp, #28
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a102:	f04f 33ff 	mov.w	r3, #4294967295
 800a106:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d031      	beq.n	800a174 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	617b      	str	r3, [r7, #20]
 800a116:	e002      	b.n	800a11e <get_ldnumber+0x24>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	3301      	adds	r3, #1
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b20      	cmp	r3, #32
 800a124:	d903      	bls.n	800a12e <get_ldnumber+0x34>
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b3a      	cmp	r3, #58	; 0x3a
 800a12c:	d1f4      	bne.n	800a118 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	2b3a      	cmp	r3, #58	; 0x3a
 800a134:	d11c      	bne.n	800a170 <get_ldnumber+0x76>
			tp = *path;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	1c5a      	adds	r2, r3, #1
 800a140:	60fa      	str	r2, [r7, #12]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	3b30      	subs	r3, #48	; 0x30
 800a146:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b09      	cmp	r3, #9
 800a14c:	d80e      	bhi.n	800a16c <get_ldnumber+0x72>
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	429a      	cmp	r2, r3
 800a154:	d10a      	bne.n	800a16c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d107      	bne.n	800a16c <get_ldnumber+0x72>
					vol = (int)i;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	3301      	adds	r3, #1
 800a164:	617b      	str	r3, [r7, #20]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	e002      	b.n	800a176 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a174:	693b      	ldr	r3, [r7, #16]
}
 800a176:	4618      	mov	r0, r3
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
	...

0800a184 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	70da      	strb	r2, [r3, #3]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f04f 32ff 	mov.w	r2, #4294967295
 800a19a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff f824 	bl	80091ec <move_window>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <check_fs+0x2a>
 800a1aa:	2304      	movs	r3, #4
 800a1ac:	e038      	b.n	800a220 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3334      	adds	r3, #52	; 0x34
 800a1b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe fd38 	bl	8008c2c <ld_word>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d001      	beq.n	800a1cc <check_fs+0x48>
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e029      	b.n	800a220 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1d2:	2be9      	cmp	r3, #233	; 0xe9
 800a1d4:	d009      	beq.n	800a1ea <check_fs+0x66>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1dc:	2beb      	cmp	r3, #235	; 0xeb
 800a1de:	d11e      	bne.n	800a21e <check_fs+0x9a>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a1e6:	2b90      	cmp	r3, #144	; 0x90
 800a1e8:	d119      	bne.n	800a21e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3334      	adds	r3, #52	; 0x34
 800a1ee:	3336      	adds	r3, #54	; 0x36
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fd33 	bl	8008c5c <ld_dword>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a1fc:	4a0a      	ldr	r2, [pc, #40]	; (800a228 <check_fs+0xa4>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d101      	bne.n	800a206 <check_fs+0x82>
 800a202:	2300      	movs	r3, #0
 800a204:	e00c      	b.n	800a220 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3334      	adds	r3, #52	; 0x34
 800a20a:	3352      	adds	r3, #82	; 0x52
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe fd25 	bl	8008c5c <ld_dword>
 800a212:	4602      	mov	r2, r0
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <check_fs+0xa8>)
 800a216:	429a      	cmp	r2, r3
 800a218:	d101      	bne.n	800a21e <check_fs+0x9a>
 800a21a:	2300      	movs	r3, #0
 800a21c:	e000      	b.n	800a220 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a21e:	2302      	movs	r3, #2
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	00544146 	.word	0x00544146
 800a22c:	33544146 	.word	0x33544146

0800a230 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b096      	sub	sp, #88	; 0x58
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff ff58 	bl	800a0fa <get_ldnumber>
 800a24a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	da01      	bge.n	800a256 <find_volume+0x26>
 800a252:	230b      	movs	r3, #11
 800a254:	e236      	b.n	800a6c4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a256:	4aac      	ldr	r2, [pc, #688]	; (800a508 <find_volume+0x2d8>)
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <find_volume+0x3a>
 800a266:	230c      	movs	r3, #12
 800a268:	e22c      	b.n	800a6c4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800a26a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a26c:	f7fe fddd 	bl	8008e2a <lock_fs>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <find_volume+0x4a>
 800a276:	230f      	movs	r3, #15
 800a278:	e224      	b.n	800a6c4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a27e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	f023 0301 	bic.w	r3, r3, #1
 800a286:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d01a      	beq.n	800a2c6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fc2b 	bl	8008af0 <disk_status>
 800a29a:	4603      	mov	r3, r0
 800a29c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a2a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2a4:	f003 0301 	and.w	r3, r3, #1
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10c      	bne.n	800a2c6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d007      	beq.n	800a2c2 <find_volume+0x92>
 800a2b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2b6:	f003 0304 	and.w	r3, r3, #4
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a2be:	230a      	movs	r3, #10
 800a2c0:	e200      	b.n	800a6c4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	e1fe      	b.n	800a6c4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	785b      	ldrb	r3, [r3, #1]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe fc23 	bl	8008b24 <disk_initialize>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a2e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e1e7      	b.n	800a6c4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <find_volume+0xda>
 800a2fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2fe:	f003 0304 	and.w	r3, r3, #4
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a306:	230a      	movs	r3, #10
 800a308:	e1dc      	b.n	800a6c4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a30e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a312:	f7ff ff37 	bl	800a184 <check_fs>
 800a316:	4603      	mov	r3, r0
 800a318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a31c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a320:	2b02      	cmp	r3, #2
 800a322:	d14b      	bne.n	800a3bc <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a324:	2300      	movs	r3, #0
 800a326:	643b      	str	r3, [r7, #64]	; 0x40
 800a328:	e01f      	b.n	800a36a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a338:	4413      	add	r3, r2
 800a33a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	3304      	adds	r3, #4
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d006      	beq.n	800a354 <find_volume+0x124>
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	3308      	adds	r3, #8
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe fc86 	bl	8008c5c <ld_dword>
 800a350:	4602      	mov	r2, r0
 800a352:	e000      	b.n	800a356 <find_volume+0x126>
 800a354:	2200      	movs	r2, #0
 800a356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a35e:	440b      	add	r3, r1
 800a360:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a366:	3301      	adds	r3, #1
 800a368:	643b      	str	r3, [r7, #64]	; 0x40
 800a36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d9dc      	bls.n	800a32a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a370:	2300      	movs	r3, #0
 800a372:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <find_volume+0x150>
 800a37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a37c:	3b01      	subs	r3, #1
 800a37e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a388:	4413      	add	r3, r2
 800a38a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a38e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <find_volume+0x172>
 800a396:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a39a:	f7ff fef3 	bl	800a184 <check_fs>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	e000      	b.n	800a3a4 <find_volume+0x174>
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a3a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d905      	bls.n	800a3bc <find_volume+0x18c>
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d9e1      	bls.n	800a380 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3c0:	2b04      	cmp	r3, #4
 800a3c2:	d101      	bne.n	800a3c8 <find_volume+0x198>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e17d      	b.n	800a6c4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d901      	bls.n	800a3d4 <find_volume+0x1a4>
 800a3d0:	230d      	movs	r3, #13
 800a3d2:	e177      	b.n	800a6c4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d6:	3334      	adds	r3, #52	; 0x34
 800a3d8:	330b      	adds	r3, #11
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fc26 	bl	8008c2c <ld_word>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3e6:	d001      	beq.n	800a3ec <find_volume+0x1bc>
 800a3e8:	230d      	movs	r3, #13
 800a3ea:	e16b      	b.n	800a6c4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	3334      	adds	r3, #52	; 0x34
 800a3f0:	3316      	adds	r3, #22
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fc1a 	bl	8008c2c <ld_word>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <find_volume+0x1e0>
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	3334      	adds	r3, #52	; 0x34
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe fc27 	bl	8008c5c <ld_dword>
 800a40e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a414:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	789b      	ldrb	r3, [r3, #2]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d005      	beq.n	800a434 <find_volume+0x204>
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	789b      	ldrb	r3, [r3, #2]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d001      	beq.n	800a434 <find_volume+0x204>
 800a430:	230d      	movs	r3, #13
 800a432:	e147      	b.n	800a6c4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	789b      	ldrb	r3, [r3, #2]
 800a438:	461a      	mov	r2, r3
 800a43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a43c:	fb02 f303 	mul.w	r3, r2, r3
 800a440:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a448:	b29a      	uxth	r2, r3
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	895b      	ldrh	r3, [r3, #10]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d008      	beq.n	800a468 <find_volume+0x238>
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	895b      	ldrh	r3, [r3, #10]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	895b      	ldrh	r3, [r3, #10]
 800a460:	3b01      	subs	r3, #1
 800a462:	4013      	ands	r3, r2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <find_volume+0x23c>
 800a468:	230d      	movs	r3, #13
 800a46a:	e12b      	b.n	800a6c4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	3334      	adds	r3, #52	; 0x34
 800a470:	3311      	adds	r3, #17
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fbda 	bl	8008c2c <ld_word>
 800a478:	4603      	mov	r3, r0
 800a47a:	461a      	mov	r2, r3
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	891b      	ldrh	r3, [r3, #8]
 800a484:	f003 030f 	and.w	r3, r3, #15
 800a488:	b29b      	uxth	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <find_volume+0x262>
 800a48e:	230d      	movs	r3, #13
 800a490:	e118      	b.n	800a6c4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	3334      	adds	r3, #52	; 0x34
 800a496:	3313      	adds	r3, #19
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fbc7 	bl	8008c2c <ld_word>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <find_volume+0x286>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	3334      	adds	r3, #52	; 0x34
 800a4ac:	3320      	adds	r3, #32
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe fbd4 	bl	8008c5c <ld_dword>
 800a4b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	3334      	adds	r3, #52	; 0x34
 800a4ba:	330e      	adds	r3, #14
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fbb5 	bl	8008c2c <ld_word>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a4c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <find_volume+0x2a0>
 800a4cc:	230d      	movs	r3, #13
 800a4ce:	e0f9      	b.n	800a6c4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a4d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d4:	4413      	add	r3, r2
 800a4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4d8:	8912      	ldrh	r2, [r2, #8]
 800a4da:	0912      	lsrs	r2, r2, #4
 800a4dc:	b292      	uxth	r2, r2
 800a4de:	4413      	add	r3, r2
 800a4e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a4e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d201      	bcs.n	800a4ee <find_volume+0x2be>
 800a4ea:	230d      	movs	r3, #13
 800a4ec:	e0ea      	b.n	800a6c4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a4ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4f6:	8952      	ldrh	r2, [r2, #10]
 800a4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	2b00      	cmp	r3, #0
 800a502:	d103      	bne.n	800a50c <find_volume+0x2dc>
 800a504:	230d      	movs	r3, #13
 800a506:	e0dd      	b.n	800a6c4 <find_volume+0x494>
 800a508:	20000310 	.word	0x20000310
		fmt = FS_FAT32;
 800a50c:	2303      	movs	r3, #3
 800a50e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a518:	4293      	cmp	r3, r2
 800a51a:	d802      	bhi.n	800a522 <find_volume+0x2f2>
 800a51c:	2302      	movs	r3, #2
 800a51e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a528:	4293      	cmp	r3, r2
 800a52a:	d802      	bhi.n	800a532 <find_volume+0x302>
 800a52c:	2301      	movs	r3, #1
 800a52e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	1c9a      	adds	r2, r3, #2
 800a536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a538:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a53e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a540:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a544:	441a      	add	r2, r3
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a54a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	441a      	add	r2, r3
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d11e      	bne.n	800a59a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	3334      	adds	r3, #52	; 0x34
 800a560:	332a      	adds	r3, #42	; 0x2a
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe fb62 	bl	8008c2c <ld_word>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <find_volume+0x342>
 800a56e:	230d      	movs	r3, #13
 800a570:	e0a8      	b.n	800a6c4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a574:	891b      	ldrh	r3, [r3, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <find_volume+0x34e>
 800a57a:	230d      	movs	r3, #13
 800a57c:	e0a2      	b.n	800a6c4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	3334      	adds	r3, #52	; 0x34
 800a582:	332c      	adds	r3, #44	; 0x2c
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe fb69 	bl	8008c5c <ld_dword>
 800a58a:	4602      	mov	r2, r0
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	647b      	str	r3, [r7, #68]	; 0x44
 800a598:	e01f      	b.n	800a5da <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	891b      	ldrh	r3, [r3, #8]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <find_volume+0x376>
 800a5a2:	230d      	movs	r3, #13
 800a5a4:	e08e      	b.n	800a6c4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ac:	441a      	add	r2, r3
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a5b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d103      	bne.n	800a5c2 <find_volume+0x392>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	e00a      	b.n	800a5d8 <find_volume+0x3a8>
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	699a      	ldr	r2, [r3, #24]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	4413      	add	r3, r2
 800a5cc:	085a      	lsrs	r2, r3, #1
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a5d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	69da      	ldr	r2, [r3, #28]
 800a5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a5e4:	0a5b      	lsrs	r3, r3, #9
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d201      	bcs.n	800a5ee <find_volume+0x3be>
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	e06a      	b.n	800a6c4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f4:	615a      	str	r2, [r3, #20]
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	695a      	ldr	r2, [r3, #20]
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	2280      	movs	r2, #128	; 0x80
 800a602:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d149      	bne.n	800a6a0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	3334      	adds	r3, #52	; 0x34
 800a610:	3330      	adds	r3, #48	; 0x30
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe fb0a 	bl	8008c2c <ld_word>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d140      	bne.n	800a6a0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a620:	3301      	adds	r3, #1
 800a622:	4619      	mov	r1, r3
 800a624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a626:	f7fe fde1 	bl	80091ec <move_window>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d137      	bne.n	800a6a0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	2200      	movs	r2, #0
 800a634:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	3334      	adds	r3, #52	; 0x34
 800a63a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe faf4 	bl	8008c2c <ld_word>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d127      	bne.n	800a6a0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	3334      	adds	r3, #52	; 0x34
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fb01 	bl	8008c5c <ld_dword>
 800a65a:	4602      	mov	r2, r0
 800a65c:	4b1b      	ldr	r3, [pc, #108]	; (800a6cc <find_volume+0x49c>)
 800a65e:	429a      	cmp	r2, r3
 800a660:	d11e      	bne.n	800a6a0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	3334      	adds	r3, #52	; 0x34
 800a666:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe faf6 	bl	8008c5c <ld_dword>
 800a670:	4602      	mov	r2, r0
 800a672:	4b17      	ldr	r3, [pc, #92]	; (800a6d0 <find_volume+0x4a0>)
 800a674:	429a      	cmp	r2, r3
 800a676:	d113      	bne.n	800a6a0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	3334      	adds	r3, #52	; 0x34
 800a67c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe faeb 	bl	8008c5c <ld_dword>
 800a686:	4602      	mov	r2, r0
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	3334      	adds	r3, #52	; 0x34
 800a690:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe fae1 	bl	8008c5c <ld_dword>
 800a69a:	4602      	mov	r2, r0
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a6a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <find_volume+0x4a4>)
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <find_volume+0x4a4>)
 800a6b2:	801a      	strh	r2, [r3, #0]
 800a6b4:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <find_volume+0x4a4>)
 800a6b6:	881a      	ldrh	r2, [r3, #0]
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a6bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6be:	f7fe fd2d 	bl	800911c <clear_lock>
#endif
	return FR_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3758      	adds	r7, #88	; 0x58
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	41615252 	.word	0x41615252
 800a6d0:	61417272 	.word	0x61417272
 800a6d4:	20000314 	.word	0x20000314

0800a6d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d01a      	beq.n	800a71e <validate+0x46>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d016      	beq.n	800a71e <validate+0x46>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d011      	beq.n	800a71e <validate+0x46>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	88da      	ldrh	r2, [r3, #6]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	889b      	ldrh	r3, [r3, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d10a      	bne.n	800a71e <validate+0x46>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe f9ee 	bl	8008af0 <disk_status>
 800a714:	4603      	mov	r3, r0
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d005      	beq.n	800a72a <validate+0x52>
		*fs = 0;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2200      	movs	r2, #0
 800a722:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800a724:	2309      	movs	r3, #9
 800a726:	73fb      	strb	r3, [r7, #15]
 800a728:	e00f      	b.n	800a74a <validate+0x72>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fb77 	bl	8008e2a <lock_fs>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <validate+0x6e>
 800a742:	230f      	movs	r3, #15
 800a744:	e002      	b.n	800a74c <validate+0x74>
		res = FR_OK;			/* Valid object */
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	4613      	mov	r3, r2
 800a760:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a766:	f107 0310 	add.w	r3, r7, #16
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff fcc5 	bl	800a0fa <get_ldnumber>
 800a770:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	2b00      	cmp	r3, #0
 800a776:	da01      	bge.n	800a77c <f_mount+0x28>
 800a778:	230b      	movs	r3, #11
 800a77a:	e048      	b.n	800a80e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a77c:	4a26      	ldr	r2, [pc, #152]	; (800a818 <f_mount+0xc4>)
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a784:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00f      	beq.n	800a7ac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a78c:	69b8      	ldr	r0, [r7, #24]
 800a78e:	f7fe fcc5 	bl	800911c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	4618      	mov	r0, r3
 800a798:	f001 fc5d 	bl	800c056 <ff_del_syncobj>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <f_mount+0x52>
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	e033      	b.n	800a80e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00f      	beq.n	800a7d2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	330c      	adds	r3, #12
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	f001 fc29 	bl	800c01a <ff_cre_syncobj>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <f_mount+0x7e>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	e01d      	b.n	800a80e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	4910      	ldr	r1, [pc, #64]	; (800a818 <f_mount+0xc4>)
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <f_mount+0x94>
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d001      	beq.n	800a7ec <f_mount+0x98>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	e010      	b.n	800a80e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a7ec:	f107 010c 	add.w	r1, r7, #12
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff fd1a 	bl	800a230 <find_volume>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	7dfa      	ldrb	r2, [r7, #23]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fb25 	bl	8008e56 <unlock_fs>
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20000310 	.word	0x20000310

0800a81c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b098      	sub	sp, #96	; 0x60
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	4613      	mov	r3, r2
 800a828:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <f_open+0x18>
 800a830:	2309      	movs	r3, #9
 800a832:	e1b4      	b.n	800ab9e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a834:	79fb      	ldrb	r3, [r7, #7]
 800a836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a83a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a83c:	79fa      	ldrb	r2, [r7, #7]
 800a83e:	f107 0110 	add.w	r1, r7, #16
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fcf2 	bl	800a230 <find_volume>
 800a84c:	4603      	mov	r3, r0
 800a84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a856:	2b00      	cmp	r3, #0
 800a858:	f040 8191 	bne.w	800ab7e <f_open+0x362>
		dj.obj.fs = fs;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	f107 0314 	add.w	r3, r7, #20
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fbd5 	bl	800a018 <follow_path>
 800a86e:	4603      	mov	r3, r0
 800a870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d11a      	bne.n	800a8b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a87c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a880:	b25b      	sxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	da03      	bge.n	800a88e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a886:	2306      	movs	r3, #6
 800a888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a88c:	e011      	b.n	800a8b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	f023 0301 	bic.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	bf14      	ite	ne
 800a898:	2301      	movne	r3, #1
 800a89a:	2300      	moveq	r3, #0
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f107 0314 	add.w	r3, r7, #20
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fe faf0 	bl	8008e8c <chk_lock>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	f003 031c 	and.w	r3, r3, #28
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d07f      	beq.n	800a9bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a8bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d017      	beq.n	800a8f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a8c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d10e      	bne.n	800a8ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a8cc:	f7fe fb3a 	bl	8008f44 <enq_lock>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d006      	beq.n	800a8e4 <f_open+0xc8>
 800a8d6:	f107 0314 	add.w	r3, r7, #20
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7ff fa76 	bl	8009dcc <dir_register>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	e000      	b.n	800a8e6 <f_open+0xca>
 800a8e4:	2312      	movs	r3, #18
 800a8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	f043 0308 	orr.w	r3, r3, #8
 800a8f0:	71fb      	strb	r3, [r7, #7]
 800a8f2:	e010      	b.n	800a916 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a8f4:	7ebb      	ldrb	r3, [r7, #26]
 800a8f6:	f003 0311 	and.w	r3, r3, #17
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <f_open+0xea>
					res = FR_DENIED;
 800a8fe:	2307      	movs	r3, #7
 800a900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a904:	e007      	b.n	800a916 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <f_open+0xfa>
 800a910:	2308      	movs	r3, #8
 800a912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a916:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d168      	bne.n	800a9f0 <f_open+0x1d4>
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	f003 0308 	and.w	r3, r3, #8
 800a924:	2b00      	cmp	r3, #0
 800a926:	d063      	beq.n	800a9f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a928:	f006 fd00 	bl	801132c <get_fattime>
 800a92c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a930:	330e      	adds	r3, #14
 800a932:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe f9cf 	bl	8008cd8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93c:	3316      	adds	r3, #22
 800a93e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a940:	4618      	mov	r0, r3
 800a942:	f7fe f9c9 	bl	8008cd8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	330b      	adds	r3, #11
 800a94a:	2220      	movs	r2, #32
 800a94c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a952:	4611      	mov	r1, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f7ff f948 	bl	8009bea <ld_clust>
 800a95a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a960:	2200      	movs	r2, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff f960 	bl	8009c28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96a:	331c      	adds	r3, #28
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe f9b2 	bl	8008cd8 <st_dword>
					fs->wflag = 1;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2201      	movs	r2, #1
 800a978:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d037      	beq.n	800a9f0 <f_open+0x1d4>
						dw = fs->winsect;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a984:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a986:	f107 0314 	add.w	r3, r7, #20
 800a98a:	2200      	movs	r2, #0
 800a98c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fe73 	bl	800967a <remove_chain>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a99a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d126      	bne.n	800a9f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fc20 	bl	80091ec <move_window>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9b6:	3a01      	subs	r2, #1
 800a9b8:	611a      	str	r2, [r3, #16]
 800a9ba:	e019      	b.n	800a9f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d115      	bne.n	800a9f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a9c4:	7ebb      	ldrb	r3, [r7, #26]
 800a9c6:	f003 0310 	and.w	r3, r3, #16
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a9ce:	2304      	movs	r3, #4
 800a9d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9d4:	e00c      	b.n	800a9f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	f003 0302 	and.w	r3, r3, #2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d007      	beq.n	800a9f0 <f_open+0x1d4>
 800a9e0:	7ebb      	ldrb	r3, [r7, #26]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <f_open+0x1d4>
						res = FR_DENIED;
 800a9ea:	2307      	movs	r3, #7
 800a9ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a9f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d128      	bne.n	800aa4a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a9f8:	79fb      	ldrb	r3, [r7, #7]
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aa12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	f023 0301 	bic.w	r3, r3, #1
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bf14      	ite	ne
 800aa22:	2301      	movne	r3, #1
 800aa24:	2300      	moveq	r3, #0
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	461a      	mov	r2, r3
 800aa2a:	f107 0314 	add.w	r3, r7, #20
 800aa2e:	4611      	mov	r1, r2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe faa9 	bl	8008f88 <inc_lock>
 800aa36:	4602      	mov	r2, r0
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d102      	bne.n	800aa4a <f_open+0x22e>
 800aa44:	2302      	movs	r3, #2
 800aa46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f040 8095 	bne.w	800ab7e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff f8c5 	bl	8009bea <ld_clust>
 800aa60:	4602      	mov	r2, r0
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa68:	331c      	adds	r3, #28
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe f8f6 	bl	8008c5c <ld_dword>
 800aa70:	4602      	mov	r2, r0
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	88da      	ldrh	r2, [r3, #6]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	79fa      	ldrb	r2, [r7, #7]
 800aa8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3330      	adds	r3, #48	; 0x30
 800aaa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaaa:	2100      	movs	r1, #0
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fe f960 	bl	8008d72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	f003 0320 	and.w	r3, r3, #32
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d060      	beq.n	800ab7e <f_open+0x362>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d05c      	beq.n	800ab7e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	895b      	ldrh	r3, [r3, #10]
 800aad0:	025b      	lsls	r3, r3, #9
 800aad2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	657b      	str	r3, [r7, #84]	; 0x54
 800aae0:	e016      	b.n	800ab10 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fc3b 	bl	8009362 <get_fat>
 800aaec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aaee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d802      	bhi.n	800aafa <f_open+0x2de>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab00:	d102      	bne.n	800ab08 <f_open+0x2ec>
 800ab02:	2301      	movs	r3, #1
 800ab04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d103      	bne.n	800ab20 <f_open+0x304>
 800ab18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d8e0      	bhi.n	800aae2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d127      	bne.n	800ab7e <f_open+0x362>
 800ab2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d022      	beq.n	800ab7e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fbf1 	bl	8009324 <clust2sect>
 800ab42:	6478      	str	r0, [r7, #68]	; 0x44
 800ab44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d103      	bne.n	800ab52 <f_open+0x336>
						res = FR_INT_ERR;
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab50:	e015      	b.n	800ab7e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab54:	0a5a      	lsrs	r2, r3, #9
 800ab56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab58:	441a      	add	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	7858      	ldrb	r0, [r3, #1]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a1a      	ldr	r2, [r3, #32]
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f7fd ffff 	bl	8008b70 <disk_read>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <f_open+0x362>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <f_open+0x370>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fe f95e 	bl	8008e56 <unlock_fs>
 800ab9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3760      	adds	r7, #96	; 0x60
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b08e      	sub	sp, #56	; 0x38
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2200      	movs	r2, #0
 800abbc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f107 0214 	add.w	r2, r7, #20
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff fd86 	bl	800a6d8 <validate>
 800abcc:	4603      	mov	r3, r0
 800abce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800abd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d107      	bne.n	800abea <f_read+0x44>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	7d5b      	ldrb	r3, [r3, #21]
 800abde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800abe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d009      	beq.n	800abfe <f_read+0x58>
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe f92f 	bl	8008e56 <unlock_fs>
 800abf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abfc:	e13d      	b.n	800ae7a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	7d1b      	ldrb	r3, [r3, #20]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d106      	bne.n	800ac18 <f_read+0x72>
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2107      	movs	r1, #7
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe f921 	bl	8008e56 <unlock_fs>
 800ac14:	2307      	movs	r3, #7
 800ac16:	e130      	b.n	800ae7a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	68da      	ldr	r2, [r3, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	f240 811c 	bls.w	800ae66 <f_read+0x2c0>
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ac32:	e118      	b.n	800ae66 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 80e4 	bne.w	800ae0a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	0a5b      	lsrs	r3, r3, #9
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	8952      	ldrh	r2, [r2, #10]
 800ac4c:	3a01      	subs	r2, #1
 800ac4e:	4013      	ands	r3, r2
 800ac50:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d139      	bne.n	800accc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d103      	bne.n	800ac68 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	633b      	str	r3, [r7, #48]	; 0x30
 800ac66:	e013      	b.n	800ac90 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d007      	beq.n	800ac80 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	4619      	mov	r1, r3
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7fe fdfc 	bl	8009874 <clmt_clust>
 800ac7c:	6338      	str	r0, [r7, #48]	; 0x30
 800ac7e:	e007      	b.n	800ac90 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	4619      	mov	r1, r3
 800ac88:	4610      	mov	r0, r2
 800ac8a:	f7fe fb6a 	bl	8009362 <get_fat>
 800ac8e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d809      	bhi.n	800acaa <f_read+0x104>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2202      	movs	r2, #2
 800ac9a:	755a      	strb	r2, [r3, #21]
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2102      	movs	r1, #2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fe f8d8 	bl	8008e56 <unlock_fs>
 800aca6:	2302      	movs	r3, #2
 800aca8:	e0e7      	b.n	800ae7a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb0:	d109      	bne.n	800acc6 <f_read+0x120>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2201      	movs	r2, #1
 800acb6:	755a      	strb	r2, [r3, #21]
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2101      	movs	r1, #1
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe f8ca 	bl	8008e56 <unlock_fs>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e0d9      	b.n	800ae7a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acca:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	4619      	mov	r1, r3
 800acd4:	4610      	mov	r0, r2
 800acd6:	f7fe fb25 	bl	8009324 <clust2sect>
 800acda:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <f_read+0x150>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2202      	movs	r2, #2
 800ace6:	755a      	strb	r2, [r3, #21]
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2102      	movs	r1, #2
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe f8b2 	bl	8008e56 <unlock_fs>
 800acf2:	2302      	movs	r3, #2
 800acf4:	e0c1      	b.n	800ae7a <f_read+0x2d4>
			sect += csect;
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	4413      	add	r3, r2
 800acfc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	0a5b      	lsrs	r3, r3, #9
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d03e      	beq.n	800ad88 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad0a:	69fa      	ldr	r2, [r7, #28]
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	4413      	add	r3, r2
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	8952      	ldrh	r2, [r2, #10]
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d905      	bls.n	800ad24 <f_read+0x17e>
					cc = fs->csize - csect;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	895b      	ldrh	r3, [r3, #10]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	7858      	ldrb	r0, [r3, #1]
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad2e:	f7fd ff1f 	bl	8008b70 <disk_read>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d009      	beq.n	800ad4c <f_read+0x1a6>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	755a      	strb	r2, [r3, #21]
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2101      	movs	r1, #1
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe f887 	bl	8008e56 <unlock_fs>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e096      	b.n	800ae7a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	7d1b      	ldrb	r3, [r3, #20]
 800ad50:	b25b      	sxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	da14      	bge.n	800ad80 <f_read+0x1da>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6a1a      	ldr	r2, [r3, #32]
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	1ad2      	subs	r2, r2, r3
 800ad5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d20d      	bcs.n	800ad80 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a1a      	ldr	r2, [r3, #32]
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	025b      	lsls	r3, r3, #9
 800ad6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad70:	18d0      	adds	r0, r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3330      	adds	r3, #48	; 0x30
 800ad76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	f7fd ffd8 	bl	8008d30 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	025b      	lsls	r3, r3, #9
 800ad84:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ad86:	e05a      	b.n	800ae3e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6a1a      	ldr	r2, [r3, #32]
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d038      	beq.n	800ae04 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	7d1b      	ldrb	r3, [r3, #20]
 800ad96:	b25b      	sxtb	r3, r3
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	da1d      	bge.n	800add8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	7858      	ldrb	r0, [r3, #1]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6a1a      	ldr	r2, [r3, #32]
 800adaa:	2301      	movs	r3, #1
 800adac:	f7fd ff00 	bl	8008bb0 <disk_write>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d009      	beq.n	800adca <f_read+0x224>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2201      	movs	r2, #1
 800adba:	755a      	strb	r2, [r3, #21]
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2101      	movs	r1, #1
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe f848 	bl	8008e56 <unlock_fs>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e057      	b.n	800ae7a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	7d1b      	ldrb	r3, [r3, #20]
 800adce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add2:	b2da      	uxtb	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	7858      	ldrb	r0, [r3, #1]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ade2:	2301      	movs	r3, #1
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	f7fd fec3 	bl	8008b70 <disk_read>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d009      	beq.n	800ae04 <f_read+0x25e>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2201      	movs	r2, #1
 800adf4:	755a      	strb	r2, [r3, #21]
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2101      	movs	r1, #1
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe f82b 	bl	8008e56 <unlock_fs>
 800ae00:	2301      	movs	r3, #1
 800ae02:	e03a      	b.n	800ae7a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ae16:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d901      	bls.n	800ae24 <f_read+0x27e>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae32:	4413      	add	r3, r2
 800ae34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae36:	4619      	mov	r1, r3
 800ae38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae3a:	f7fd ff79 	bl	8008d30 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ae3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	4413      	add	r3, r2
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	699a      	ldr	r2, [r3, #24]
 800ae4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4c:	441a      	add	r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	619a      	str	r2, [r3, #24]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	441a      	add	r2, r3
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f47f aee3 	bne.w	800ac34 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd ffef 	bl	8008e56 <unlock_fs>
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3738      	adds	r7, #56	; 0x38
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b08c      	sub	sp, #48	; 0x30
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2200      	movs	r2, #0
 800ae98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f107 0210 	add.w	r2, r7, #16
 800aea0:	4611      	mov	r1, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff fc18 	bl	800a6d8 <validate>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aeae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d107      	bne.n	800aec6 <f_write+0x44>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	7d5b      	ldrb	r3, [r3, #21]
 800aeba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d009      	beq.n	800aeda <f_write+0x58>
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fd ffc1 	bl	8008e56 <unlock_fs>
 800aed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aed8:	e173      	b.n	800b1c2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	7d1b      	ldrb	r3, [r3, #20]
 800aede:	f003 0302 	and.w	r3, r3, #2
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d106      	bne.n	800aef4 <f_write+0x72>
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2107      	movs	r1, #7
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fd ffb3 	bl	8008e56 <unlock_fs>
 800aef0:	2307      	movs	r3, #7
 800aef2:	e166      	b.n	800b1c2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	699a      	ldr	r2, [r3, #24]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	441a      	add	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	429a      	cmp	r2, r3
 800af02:	f080 814b 	bcs.w	800b19c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	43db      	mvns	r3, r3
 800af0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af0e:	e145      	b.n	800b19c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f040 8101 	bne.w	800b120 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	0a5b      	lsrs	r3, r3, #9
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	8952      	ldrh	r2, [r2, #10]
 800af28:	3a01      	subs	r2, #1
 800af2a:	4013      	ands	r3, r2
 800af2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d14d      	bne.n	800afd0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10c      	bne.n	800af56 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	2b00      	cmp	r3, #0
 800af46:	d11a      	bne.n	800af7e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2100      	movs	r1, #0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe fbf9 	bl	8009744 <create_chain>
 800af52:	62b8      	str	r0, [r7, #40]	; 0x28
 800af54:	e013      	b.n	800af7e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	4619      	mov	r1, r3
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f7fe fc85 	bl	8009874 <clmt_clust>
 800af6a:	62b8      	str	r0, [r7, #40]	; 0x28
 800af6c:	e007      	b.n	800af7e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	69db      	ldr	r3, [r3, #28]
 800af74:	4619      	mov	r1, r3
 800af76:	4610      	mov	r0, r2
 800af78:	f7fe fbe4 	bl	8009744 <create_chain>
 800af7c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 8110 	beq.w	800b1a6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800af86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d109      	bne.n	800afa0 <f_write+0x11e>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2202      	movs	r2, #2
 800af90:	755a      	strb	r2, [r3, #21]
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	2102      	movs	r1, #2
 800af96:	4618      	mov	r0, r3
 800af98:	f7fd ff5d 	bl	8008e56 <unlock_fs>
 800af9c:	2302      	movs	r3, #2
 800af9e:	e110      	b.n	800b1c2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa6:	d109      	bne.n	800afbc <f_write+0x13a>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2201      	movs	r2, #1
 800afac:	755a      	strb	r2, [r3, #21]
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2101      	movs	r1, #1
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fd ff4f 	bl	8008e56 <unlock_fs>
 800afb8:	2301      	movs	r3, #1
 800afba:	e102      	b.n	800b1c2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <f_write+0x14e>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	7d1b      	ldrb	r3, [r3, #20]
 800afd4:	b25b      	sxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	da1d      	bge.n	800b016 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	7858      	ldrb	r0, [r3, #1]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6a1a      	ldr	r2, [r3, #32]
 800afe8:	2301      	movs	r3, #1
 800afea:	f7fd fde1 	bl	8008bb0 <disk_write>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d009      	beq.n	800b008 <f_write+0x186>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2201      	movs	r2, #1
 800aff8:	755a      	strb	r2, [r3, #21]
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2101      	movs	r1, #1
 800affe:	4618      	mov	r0, r3
 800b000:	f7fd ff29 	bl	8008e56 <unlock_fs>
 800b004:	2301      	movs	r3, #1
 800b006:	e0dc      	b.n	800b1c2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	7d1b      	ldrb	r3, [r3, #20]
 800b00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b010:	b2da      	uxtb	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	4619      	mov	r1, r3
 800b01e:	4610      	mov	r0, r2
 800b020:	f7fe f980 	bl	8009324 <clust2sect>
 800b024:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d109      	bne.n	800b040 <f_write+0x1be>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2202      	movs	r2, #2
 800b030:	755a      	strb	r2, [r3, #21]
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2102      	movs	r1, #2
 800b036:	4618      	mov	r0, r3
 800b038:	f7fd ff0d 	bl	8008e56 <unlock_fs>
 800b03c:	2302      	movs	r3, #2
 800b03e:	e0c0      	b.n	800b1c2 <f_write+0x340>
			sect += csect;
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	4413      	add	r3, r2
 800b046:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	0a5b      	lsrs	r3, r3, #9
 800b04c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b04e:	6a3b      	ldr	r3, [r7, #32]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d041      	beq.n	800b0d8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	4413      	add	r3, r2
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	8952      	ldrh	r2, [r2, #10]
 800b05e:	4293      	cmp	r3, r2
 800b060:	d905      	bls.n	800b06e <f_write+0x1ec>
					cc = fs->csize - csect;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	895b      	ldrh	r3, [r3, #10]
 800b066:	461a      	mov	r2, r3
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	7858      	ldrb	r0, [r3, #1]
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	69f9      	ldr	r1, [r7, #28]
 800b078:	f7fd fd9a 	bl	8008bb0 <disk_write>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d009      	beq.n	800b096 <f_write+0x214>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2201      	movs	r2, #1
 800b086:	755a      	strb	r2, [r3, #21]
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2101      	movs	r1, #1
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fd fee2 	bl	8008e56 <unlock_fs>
 800b092:	2301      	movs	r3, #1
 800b094:	e095      	b.n	800b1c2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6a1a      	ldr	r2, [r3, #32]
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	1ad2      	subs	r2, r2, r3
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d215      	bcs.n	800b0d0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a1a      	ldr	r2, [r3, #32]
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	025b      	lsls	r3, r3, #9
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0bc:	4619      	mov	r1, r3
 800b0be:	f7fd fe37 	bl	8008d30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	7d1b      	ldrb	r3, [r3, #20]
 800b0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ca:	b2da      	uxtb	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	025b      	lsls	r3, r3, #9
 800b0d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b0d6:	e044      	b.n	800b162 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6a1a      	ldr	r2, [r3, #32]
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d01b      	beq.n	800b11a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	699a      	ldr	r2, [r3, #24]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d215      	bcs.n	800b11a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	7858      	ldrb	r0, [r3, #1]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	f7fd fd38 	bl	8008b70 <disk_read>
 800b100:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2201      	movs	r2, #1
 800b10a:	755a      	strb	r2, [r3, #21]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2101      	movs	r1, #1
 800b110:	4618      	mov	r0, r3
 800b112:	f7fd fea0 	bl	8008e56 <unlock_fs>
 800b116:	2301      	movs	r3, #1
 800b118:	e053      	b.n	800b1c2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b128:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	429a      	cmp	r2, r3
 800b134:	d901      	bls.n	800b13a <f_write+0x2b8>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b148:	4413      	add	r3, r2
 800b14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14c:	69f9      	ldr	r1, [r7, #28]
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fd fdee 	bl	8008d30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	7d1b      	ldrb	r3, [r3, #20]
 800b158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b162:	69fa      	ldr	r2, [r7, #28]
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	4413      	add	r3, r2
 800b168:	61fb      	str	r3, [r7, #28]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	699a      	ldr	r2, [r3, #24]
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	441a      	add	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	619a      	str	r2, [r3, #24]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	68da      	ldr	r2, [r3, #12]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	429a      	cmp	r2, r3
 800b180:	bf38      	it	cc
 800b182:	461a      	movcc	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	60da      	str	r2, [r3, #12]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	441a      	add	r2, r3
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f47f aeb6 	bne.w	800af10 <f_write+0x8e>
 800b1a4:	e000      	b.n	800b1a8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	7d1b      	ldrb	r3, [r3, #20]
 800b1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fd fe4b 	bl	8008e56 <unlock_fs>
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3730      	adds	r7, #48	; 0x30
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b086      	sub	sp, #24
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f107 0208 	add.w	r2, r7, #8
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fa7c 	bl	800a6d8 <validate>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1e4:	7dfb      	ldrb	r3, [r7, #23]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d16d      	bne.n	800b2c6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7d1b      	ldrb	r3, [r3, #20]
 800b1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d067      	beq.n	800b2c6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	7d1b      	ldrb	r3, [r3, #20]
 800b1fa:	b25b      	sxtb	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	da1a      	bge.n	800b236 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	7858      	ldrb	r0, [r3, #1]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1a      	ldr	r2, [r3, #32]
 800b20e:	2301      	movs	r3, #1
 800b210:	f7fd fcce 	bl	8008bb0 <disk_write>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d006      	beq.n	800b228 <f_sync+0x5e>
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	2101      	movs	r1, #1
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fd fe19 	bl	8008e56 <unlock_fs>
 800b224:	2301      	movs	r3, #1
 800b226:	e055      	b.n	800b2d4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7d1b      	ldrb	r3, [r3, #20]
 800b22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b230:	b2da      	uxtb	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b236:	f006 f879 	bl	801132c <get_fattime>
 800b23a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	4619      	mov	r1, r3
 800b244:	4610      	mov	r0, r2
 800b246:	f7fd ffd1 	bl	80091ec <move_window>
 800b24a:	4603      	mov	r3, r0
 800b24c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d138      	bne.n	800b2c6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b258:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	330b      	adds	r3, #11
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	320b      	adds	r2, #11
 800b262:	7812      	ldrb	r2, [r2, #0]
 800b264:	f042 0220 	orr.w	r2, r2, #32
 800b268:	b2d2      	uxtb	r2, r2
 800b26a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6818      	ldr	r0, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	461a      	mov	r2, r3
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	f7fe fcd6 	bl	8009c28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f103 021c 	add.w	r2, r3, #28
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	4619      	mov	r1, r3
 800b288:	4610      	mov	r0, r2
 800b28a:	f7fd fd25 	bl	8008cd8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3316      	adds	r3, #22
 800b292:	6939      	ldr	r1, [r7, #16]
 800b294:	4618      	mov	r0, r3
 800b296:	f7fd fd1f 	bl	8008cd8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	3312      	adds	r3, #18
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fd fcfe 	bl	8008ca2 <st_word>
					fs->wflag = 1;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fd ffca 	bl	8009248 <sync_fs>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	7d1b      	ldrb	r3, [r3, #20]
 800b2bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	7dfa      	ldrb	r2, [r7, #23]
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fd fdc2 	bl	8008e56 <unlock_fs>
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff ff70 	bl	800b1ca <f_sync>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d11d      	bne.n	800b330 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f107 0208 	add.w	r2, r7, #8
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff f9eb 	bl	800a6d8 <validate>
 800b302:	4603      	mov	r3, r0
 800b304:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d111      	bne.n	800b330 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	4618      	mov	r0, r3
 800b312:	f7fd fec7 	bl	80090a4 <dec_lock>
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d102      	bne.n	800b326 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fd fd93 	bl	8008e56 <unlock_fs>
#endif
		}
	}
	return res;
 800b330:	7bfb      	ldrb	r3, [r7, #15]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b086      	sub	sp, #24
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <f_opendir+0x14>
 800b34a:	2309      	movs	r3, #9
 800b34c:	e06a      	b.n	800b424 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b352:	f107 010c 	add.w	r1, r7, #12
 800b356:	463b      	mov	r3, r7
 800b358:	2200      	movs	r2, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe ff68 	bl	800a230 <find_volume>
 800b360:	4603      	mov	r3, r0
 800b362:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d14f      	bne.n	800b40a <f_opendir+0xd0>
		obj->fs = fs;
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7fe fe4f 	bl	800a018 <follow_path>
 800b37a:	4603      	mov	r3, r0
 800b37c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d13d      	bne.n	800b400 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b38a:	b25b      	sxtb	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	db12      	blt.n	800b3b6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	799b      	ldrb	r3, [r3, #6]
 800b394:	f003 0310 	and.w	r3, r3, #16
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00a      	beq.n	800b3b2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	f7fe fc20 	bl	8009bea <ld_clust>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	609a      	str	r2, [r3, #8]
 800b3b0:	e001      	b.n	800b3b6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b3b2:	2305      	movs	r3, #5
 800b3b4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d121      	bne.n	800b400 <f_opendir+0xc6>
				obj->id = fs->id;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	88da      	ldrh	r2, [r3, #6]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7fe fa88 	bl	80098dc <dir_sdi>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d114      	bne.n	800b400 <f_opendir+0xc6>
					if (obj->sclust) {
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00d      	beq.n	800b3fa <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b3de:	2100      	movs	r1, #0
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7fd fdd1 	bl	8008f88 <inc_lock>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d105      	bne.n	800b400 <f_opendir+0xc6>
 800b3f4:	2312      	movs	r3, #18
 800b3f6:	75fb      	strb	r3, [r7, #23]
 800b3f8:	e002      	b.n	800b400 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	2b04      	cmp	r3, #4
 800b404:	d101      	bne.n	800b40a <f_opendir+0xd0>
 800b406:	2305      	movs	r3, #5
 800b408:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <f_opendir+0xdc>
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	7dfa      	ldrb	r2, [r7, #23]
 800b41a:	4611      	mov	r1, r2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fd fd1a 	bl	8008e56 <unlock_fs>
 800b422:	7dfb      	ldrb	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f107 0208 	add.w	r2, r7, #8
 800b43a:	4611      	mov	r1, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff f94b 	bl	800a6d8 <validate>
 800b442:	4603      	mov	r3, r0
 800b444:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d115      	bne.n	800b478 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d006      	beq.n	800b462 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fd fe23 	bl	80090a4 <dec_lock>
 800b45e:	4603      	mov	r3, r0
 800b460:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d102      	bne.n	800b46e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f7fd fcef 	bl	8008e56 <unlock_fs>
#endif
	}
	return res;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b084      	sub	sp, #16
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f107 0208 	add.w	r2, r7, #8
 800b492:	4611      	mov	r1, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff f91f 	bl	800a6d8 <validate>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d126      	bne.n	800b4f2 <f_readdir+0x70>
		if (!fno) {
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7fe fa15 	bl	80098dc <dir_sdi>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73fb      	strb	r3, [r7, #15]
 800b4b6:	e01c      	b.n	800b4f2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7fe fbd4 	bl	8009c68 <dir_read>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	2b04      	cmp	r3, #4
 800b4c8:	d101      	bne.n	800b4ce <f_readdir+0x4c>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10e      	bne.n	800b4f2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7fe fcaa 	bl	8009e30 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b4dc:	2100      	movs	r1, #0
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7fe fa77 	bl	80099d2 <dir_next>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d101      	bne.n	800b4f2 <f_readdir+0x70>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	7bfa      	ldrb	r2, [r7, #15]
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fd fcac 	bl	8008e56 <unlock_fs>
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b092      	sub	sp, #72	; 0x48
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b514:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b518:	f107 030c 	add.w	r3, r7, #12
 800b51c:	2200      	movs	r2, #0
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fe fe86 	bl	800a230 <find_volume>
 800b524:	4603      	mov	r3, r0
 800b526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b52a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f040 8099 	bne.w	800b666 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53c:	695a      	ldr	r2, [r3, #20]
 800b53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	3b02      	subs	r3, #2
 800b544:	429a      	cmp	r2, r3
 800b546:	d804      	bhi.n	800b552 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54a:	695a      	ldr	r2, [r3, #20]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	601a      	str	r2, [r3, #0]
 800b550:	e089      	b.n	800b666 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d128      	bne.n	800b5b0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b55e:	2302      	movs	r3, #2
 800b560:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b566:	f107 0314 	add.w	r3, r7, #20
 800b56a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fd fef8 	bl	8009362 <get_fat>
 800b572:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57a:	d103      	bne.n	800b584 <f_getfree+0x7c>
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b582:	e063      	b.n	800b64c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b586:	2b01      	cmp	r3, #1
 800b588:	d103      	bne.n	800b592 <f_getfree+0x8a>
 800b58a:	2302      	movs	r3, #2
 800b58c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b590:	e05c      	b.n	800b64c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	2b00      	cmp	r3, #0
 800b596:	d102      	bne.n	800b59e <f_getfree+0x96>
 800b598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b59a:	3301      	adds	r3, #1
 800b59c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d3db      	bcc.n	800b566 <f_getfree+0x5e>
 800b5ae:	e04d      	b.n	800b64c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d113      	bne.n	800b5f2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	63ba      	str	r2, [r7, #56]	; 0x38
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	f7fd fe0a 	bl	80091ec <move_window>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b5de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d131      	bne.n	800b64a <f_getfree+0x142>
							p = fs->win;
 800b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e8:	3334      	adds	r3, #52	; 0x34
 800b5ea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d10f      	bne.n	800b61a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b5fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5fc:	f7fd fb16 	bl	8008c2c <ld_word>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d102      	bne.n	800b60c <f_getfree+0x104>
 800b606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b608:	3301      	adds	r3, #1
 800b60a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60e:	3302      	adds	r3, #2
 800b610:	633b      	str	r3, [r7, #48]	; 0x30
 800b612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b614:	3b02      	subs	r3, #2
 800b616:	637b      	str	r3, [r7, #52]	; 0x34
 800b618:	e010      	b.n	800b63c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b61a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b61c:	f7fd fb1e 	bl	8008c5c <ld_dword>
 800b620:	4603      	mov	r3, r0
 800b622:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <f_getfree+0x128>
 800b62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62c:	3301      	adds	r3, #1
 800b62e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	3304      	adds	r3, #4
 800b634:	633b      	str	r3, [r7, #48]	; 0x30
 800b636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b638:	3b04      	subs	r3, #4
 800b63a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63e:	3b01      	subs	r3, #1
 800b640:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1bd      	bne.n	800b5c4 <f_getfree+0xbc>
 800b648:	e000      	b.n	800b64c <f_getfree+0x144>
							if (res != FR_OK) break;
 800b64a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b650:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b656:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b65c:	7912      	ldrb	r2, [r2, #4]
 800b65e:	f042 0201 	orr.w	r2, r2, #1
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b66c:	4611      	mov	r1, r2
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fd fbf1 	bl	8008e56 <unlock_fs>
 800b674:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3748      	adds	r7, #72	; 0x48
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b680:	b590      	push	{r4, r7, lr}
 800b682:	b09d      	sub	sp, #116	; 0x74
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	607a      	str	r2, [r7, #4]
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	460b      	mov	r3, r1
 800b68e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b690:	2301      	movs	r3, #1
 800b692:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b698:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b69a:	f107 030c 	add.w	r3, r7, #12
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fd2b 	bl	800a0fa <get_ldnumber>
 800b6a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	da02      	bge.n	800b6b2 <f_mkfs+0x32>
 800b6ac:	230b      	movs	r3, #11
 800b6ae:	f000 bc0d 	b.w	800becc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b6b2:	4a94      	ldr	r2, [pc, #592]	; (800b904 <f_mkfs+0x284>)
 800b6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d005      	beq.n	800b6ca <f_mkfs+0x4a>
 800b6be:	4a91      	ldr	r2, [pc, #580]	; (800b904 <f_mkfs+0x284>)
 800b6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b6d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fd fa22 	bl	8008b24 <disk_initialize>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b6e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <f_mkfs+0x76>
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e3ea      	b.n	800becc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b6f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b6fa:	f003 0304 	and.w	r3, r3, #4
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <f_mkfs+0x86>
 800b702:	230a      	movs	r3, #10
 800b704:	e3e2      	b.n	800becc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b706:	f107 0214 	add.w	r2, r7, #20
 800b70a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b70e:	2103      	movs	r1, #3
 800b710:	4618      	mov	r0, r3
 800b712:	f7fd fa6d 	bl	8008bf0 <disk_ioctl>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10c      	bne.n	800b736 <f_mkfs+0xb6>
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d009      	beq.n	800b736 <f_mkfs+0xb6>
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b728:	d805      	bhi.n	800b736 <f_mkfs+0xb6>
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	1e5a      	subs	r2, r3, #1
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	4013      	ands	r3, r2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <f_mkfs+0xba>
 800b736:	2301      	movs	r3, #1
 800b738:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b73a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b73e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <f_mkfs+0xce>
 800b746:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d809      	bhi.n	800b762 <f_mkfs+0xe2>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b754:	d805      	bhi.n	800b762 <f_mkfs+0xe2>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	1e5a      	subs	r2, r3, #1
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4013      	ands	r3, r2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <f_mkfs+0xe6>
 800b762:	2313      	movs	r3, #19
 800b764:	e3b2      	b.n	800becc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b766:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b76e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b774:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b780:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b784:	fb02 f303 	mul.w	r3, r2, r3
 800b788:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <f_mkfs+0x114>
 800b790:	230e      	movs	r3, #14
 800b792:	e39b      	b.n	800becc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b794:	f107 0210 	add.w	r2, r7, #16
 800b798:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b79c:	2101      	movs	r1, #1
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fd fa26 	bl	8008bf0 <disk_ioctl>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <f_mkfs+0x12e>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e38e      	b.n	800becc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b7ae:	7afb      	ldrb	r3, [r7, #11]
 800b7b0:	f003 0308 	and.w	r3, r3, #8
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <f_mkfs+0x13c>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e000      	b.n	800b7be <f_mkfs+0x13e>
 800b7bc:	233f      	movs	r3, #63	; 0x3f
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d201      	bcs.n	800b7cc <f_mkfs+0x14c>
 800b7c8:	230e      	movs	r3, #14
 800b7ca:	e37f      	b.n	800becc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	2b7f      	cmp	r3, #127	; 0x7f
 800b7d8:	d801      	bhi.n	800b7de <f_mkfs+0x15e>
 800b7da:	230e      	movs	r3, #14
 800b7dc:	e376      	b.n	800becc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b80      	cmp	r3, #128	; 0x80
 800b7e2:	d901      	bls.n	800b7e8 <f_mkfs+0x168>
 800b7e4:	2313      	movs	r3, #19
 800b7e6:	e371      	b.n	800becc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00d      	beq.n	800b80e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b7f2:	7afb      	ldrb	r3, [r7, #11]
 800b7f4:	f003 0307 	and.w	r3, r3, #7
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d004      	beq.n	800b806 <f_mkfs+0x186>
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	d103      	bne.n	800b80e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b806:	2303      	movs	r3, #3
 800b808:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b80c:	e009      	b.n	800b822 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b80e:	7afb      	ldrb	r3, [r7, #11]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <f_mkfs+0x19c>
 800b818:	2313      	movs	r3, #19
 800b81a:	e357      	b.n	800becc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b81c:	2302      	movs	r3, #2
 800b81e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b826:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d13c      	bne.n	800b8a8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b82e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b830:	2b00      	cmp	r3, #0
 800b832:	d11b      	bne.n	800b86c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	0c5b      	lsrs	r3, r3, #17
 800b838:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b83a:	2300      	movs	r3, #0
 800b83c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b83e:	2301      	movs	r3, #1
 800b840:	66bb      	str	r3, [r7, #104]	; 0x68
 800b842:	e005      	b.n	800b850 <f_mkfs+0x1d0>
 800b844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b846:	3301      	adds	r3, #1
 800b848:	64bb      	str	r3, [r7, #72]	; 0x48
 800b84a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b850:	4a2d      	ldr	r2, [pc, #180]	; (800b908 <f_mkfs+0x288>)
 800b852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d007      	beq.n	800b86c <f_mkfs+0x1ec>
 800b85c:	4a2a      	ldr	r2, [pc, #168]	; (800b908 <f_mkfs+0x288>)
 800b85e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b864:	461a      	mov	r2, r3
 800b866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b868:	429a      	cmp	r2, r3
 800b86a:	d9eb      	bls.n	800b844 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b870:	fbb2 f3f3 	udiv	r3, r2, r3
 800b874:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	3302      	adds	r3, #2
 800b87a:	009a      	lsls	r2, r3, #2
 800b87c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b87e:	4413      	add	r3, r2
 800b880:	1e5a      	subs	r2, r3, #1
 800b882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b884:	fbb2 f3f3 	udiv	r3, r2, r3
 800b888:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 32;	/* Number of reserved sectors */
 800b88a:	2320      	movs	r3, #32
 800b88c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b88e:	2300      	movs	r3, #0
 800b890:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b898:	4293      	cmp	r3, r2
 800b89a:	d903      	bls.n	800b8a4 <f_mkfs+0x224>
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	4a1b      	ldr	r2, [pc, #108]	; (800b90c <f_mkfs+0x28c>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d952      	bls.n	800b94a <f_mkfs+0x2ca>
 800b8a4:	230e      	movs	r3, #14
 800b8a6:	e311      	b.n	800becc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b8a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d11b      	bne.n	800b8e6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	0b1b      	lsrs	r3, r3, #12
 800b8b2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8bc:	e005      	b.n	800b8ca <f_mkfs+0x24a>
 800b8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8ca:	4a11      	ldr	r2, [pc, #68]	; (800b910 <f_mkfs+0x290>)
 800b8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d007      	beq.n	800b8e6 <f_mkfs+0x266>
 800b8d6:	4a0e      	ldr	r2, [pc, #56]	; (800b910 <f_mkfs+0x290>)
 800b8d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d9eb      	bls.n	800b8be <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ee:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d90c      	bls.n	800b914 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	005b      	lsls	r3, r3, #1
 800b900:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b902:	e012      	b.n	800b92a <f_mkfs+0x2aa>
 800b904:	20000310 	.word	0x20000310
 800b908:	08018d58 	.word	0x08018d58
 800b90c:	0ffffff5 	.word	0x0ffffff5
 800b910:	08018d68 	.word	0x08018d68
				} else {
					fmt = FS_FAT12;
 800b914:	2301      	movs	r3, #1
 800b916:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b91a:	6a3a      	ldr	r2, [r7, #32]
 800b91c:	4613      	mov	r3, r2
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	4413      	add	r3, r2
 800b922:	3301      	adds	r3, #1
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	3303      	adds	r3, #3
 800b928:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b92a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b92c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b92e:	4413      	add	r3, r2
 800b930:	1e5a      	subs	r2, r3, #1
 800b932:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b934:	fbb2 f3f3 	udiv	r3, r2, r3
 800b938:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 1;						/* Number of reserved sectors */
 800b93a:	2301      	movs	r3, #1
 800b93c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b93e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b940:	015a      	lsls	r2, r3, #5
 800b942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b944:	fbb2 f3f3 	udiv	r3, r2, r3
 800b948:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b94c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b94e:	4413      	add	r3, r2
 800b950:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b956:	fb02 f203 	mul.w	r2, r2, r3
 800b95a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b95c:	441a      	add	r2, r3
 800b95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b960:	4413      	add	r3, r2
 800b962:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b964:	697a      	ldr	r2, [r7, #20]
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	4413      	add	r3, r2
 800b96a:	1e5a      	subs	r2, r3, #1
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	425b      	negs	r3, r3
 800b970:	401a      	ands	r2, r3
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b978:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d108      	bne.n	800b992 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800b980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b984:	4413      	add	r3, r2
 800b986:	657b      	str	r3, [r7, #84]	; 0x54
 800b988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b98c:	4413      	add	r3, r2
 800b98e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b990:	e006      	b.n	800b9a0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800b992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b996:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b99c:	4413      	add	r3, r2
 800b99e:	653b      	str	r3, [r7, #80]	; 0x50
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800b9a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9a2:	011a      	lsls	r2, r3, #4
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	441a      	add	r2, r3
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d901      	bls.n	800b9b6 <f_mkfs+0x336>
 800b9b2:	230e      	movs	r3, #14
 800b9b4:	e28a      	b.n	800becc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ba:	1ad2      	subs	r2, r2, r3
 800b9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9c0:	fb01 f303 	mul.w	r3, r1, r3
 800b9c4:	1ad2      	subs	r2, r2, r3
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c8:	1ad2      	subs	r2, r2, r3
 800b9ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800b9d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d10f      	bne.n	800b9fa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d80a      	bhi.n	800b9fa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d105      	bne.n	800b9f6 <f_mkfs+0x376>
 800b9ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9ec:	085b      	lsrs	r3, r3, #1
 800b9ee:	607b      	str	r3, [r7, #4]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d144      	bne.n	800ba80 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800b9f6:	230e      	movs	r3, #14
 800b9f8:	e268      	b.n	800becc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800b9fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d133      	bne.n	800ba6a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d91e      	bls.n	800ba4a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d107      	bne.n	800ba22 <f_mkfs+0x3a2>
 800ba12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	2b40      	cmp	r3, #64	; 0x40
 800ba18:	d803      	bhi.n	800ba22 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800ba1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	607b      	str	r3, [r7, #4]
 800ba20:	e033      	b.n	800ba8a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800ba22:	7afb      	ldrb	r3, [r7, #11]
 800ba24:	f003 0302 	and.w	r3, r3, #2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ba32:	e02a      	b.n	800ba8a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d105      	bne.n	800ba46 <f_mkfs+0x3c6>
 800ba3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	607b      	str	r3, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b80      	cmp	r3, #128	; 0x80
 800ba44:	d91e      	bls.n	800ba84 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800ba46:	230e      	movs	r3, #14
 800ba48:	e240      	b.n	800becc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d80a      	bhi.n	800ba6a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d105      	bne.n	800ba66 <f_mkfs+0x3e6>
 800ba5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba5c:	005b      	lsls	r3, r3, #1
 800ba5e:	607b      	str	r3, [r7, #4]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b80      	cmp	r3, #128	; 0x80
 800ba64:	d910      	bls.n	800ba88 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800ba66:	230e      	movs	r3, #14
 800ba68:	e230      	b.n	800becc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800ba6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d10c      	bne.n	800ba8c <f_mkfs+0x40c>
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d907      	bls.n	800ba8c <f_mkfs+0x40c>
 800ba7c:	230e      	movs	r3, #14
 800ba7e:	e225      	b.n	800becc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ba80:	bf00      	nop
 800ba82:	e6ce      	b.n	800b822 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ba84:	bf00      	nop
 800ba86:	e6cc      	b.n	800b822 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ba88:	bf00      	nop
			pau = au;
 800ba8a:	e6ca      	b.n	800b822 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800ba8c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800ba8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba90:	461a      	mov	r2, r3
 800ba92:	2100      	movs	r1, #0
 800ba94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba96:	f7fd f96c 	bl	8008d72 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ba9a:	220b      	movs	r2, #11
 800ba9c:	49bc      	ldr	r1, [pc, #752]	; (800bd90 <f_mkfs+0x710>)
 800ba9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baa0:	f7fd f946 	bl	8008d30 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	330b      	adds	r3, #11
 800baa8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800baaa:	4611      	mov	r1, r2
 800baac:	4618      	mov	r0, r3
 800baae:	f7fd f8f8 	bl	8008ca2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	330d      	adds	r3, #13
 800bab6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bab8:	b2d2      	uxtb	r2, r2
 800baba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	330e      	adds	r3, #14
 800bac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bac2:	b292      	uxth	r2, r2
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fd f8eb 	bl	8008ca2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	3310      	adds	r3, #16
 800bad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bad2:	b2d2      	uxtb	r2, r2
 800bad4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	f103 0211 	add.w	r2, r3, #17
 800badc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d002      	beq.n	800baea <f_mkfs+0x46a>
 800bae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	e000      	b.n	800baec <f_mkfs+0x46c>
 800baea:	2300      	movs	r3, #0
 800baec:	4619      	mov	r1, r3
 800baee:	4610      	mov	r0, r2
 800baf0:	f7fd f8d7 	bl	8008ca2 <st_word>
		if (sz_vol < 0x10000) {
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bafa:	d208      	bcs.n	800bb0e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	3313      	adds	r3, #19
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	b292      	uxth	r2, r2
 800bb04:	4611      	mov	r1, r2
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fd f8cb 	bl	8008ca2 <st_word>
 800bb0c:	e006      	b.n	800bb1c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	3320      	adds	r3, #32
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	4611      	mov	r1, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fd f8de 	bl	8008cd8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	3315      	adds	r3, #21
 800bb20:	22f8      	movs	r2, #248	; 0xf8
 800bb22:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	3318      	adds	r3, #24
 800bb28:	213f      	movs	r1, #63	; 0x3f
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fd f8b9 	bl	8008ca2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	331a      	adds	r3, #26
 800bb34:	21ff      	movs	r1, #255	; 0xff
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fd f8b3 	bl	8008ca2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	331c      	adds	r3, #28
 800bb40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fd f8c8 	bl	8008cd8 <st_dword>
		if (fmt == FS_FAT32) {
 800bb48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d131      	bne.n	800bbb4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800bb56:	f005 fbe9 	bl	801132c <get_fattime>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7fd f8ba 	bl	8008cd8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	3324      	adds	r3, #36	; 0x24
 800bb68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fd f8b4 	bl	8008cd8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800bb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb72:	332c      	adds	r3, #44	; 0x2c
 800bb74:	2102      	movs	r1, #2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd f8ae 	bl	8008cd8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	3330      	adds	r3, #48	; 0x30
 800bb80:	2101      	movs	r1, #1
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fd f88d 	bl	8008ca2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8a:	3332      	adds	r3, #50	; 0x32
 800bb8c:	2106      	movs	r1, #6
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fd f887 	bl	8008ca2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	3340      	adds	r3, #64	; 0x40
 800bb98:	2280      	movs	r2, #128	; 0x80
 800bb9a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	3342      	adds	r3, #66	; 0x42
 800bba0:	2229      	movs	r2, #41	; 0x29
 800bba2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	3347      	adds	r3, #71	; 0x47
 800bba8:	2213      	movs	r2, #19
 800bbaa:	497a      	ldr	r1, [pc, #488]	; (800bd94 <f_mkfs+0x714>)
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd f8bf 	bl	8008d30 <mem_cpy>
 800bbb2:	e020      	b.n	800bbf6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800bbba:	f005 fbb7 	bl	801132c <get_fattime>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f7fd f888 	bl	8008cd8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbca:	3316      	adds	r3, #22
 800bbcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbce:	b292      	uxth	r2, r2
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fd f865 	bl	8008ca2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	3324      	adds	r3, #36	; 0x24
 800bbdc:	2280      	movs	r2, #128	; 0x80
 800bbde:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	3326      	adds	r3, #38	; 0x26
 800bbe4:	2229      	movs	r2, #41	; 0x29
 800bbe6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbea:	332b      	adds	r3, #43	; 0x2b
 800bbec:	2213      	movs	r2, #19
 800bbee:	496a      	ldr	r1, [pc, #424]	; (800bd98 <f_mkfs+0x718>)
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7fd f89d 	bl	8008d30 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbfc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fd f84e 	bl	8008ca2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800bc06:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc10:	f7fc ffce 	bl	8008bb0 <disk_write>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <f_mkfs+0x59e>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e156      	b.n	800becc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800bc1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d140      	bne.n	800bca8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	1d9a      	adds	r2, r3, #6
 800bc2a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bc2e:	2301      	movs	r3, #1
 800bc30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc32:	f7fc ffbd 	bl	8008bb0 <disk_write>
			mem_set(buf, 0, ss);
 800bc36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc38:	461a      	mov	r2, r3
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc3e:	f7fd f898 	bl	8008d72 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800bc42:	4956      	ldr	r1, [pc, #344]	; (800bd9c <f_mkfs+0x71c>)
 800bc44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc46:	f7fd f847 	bl	8008cd8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bc50:	4953      	ldr	r1, [pc, #332]	; (800bda0 <f_mkfs+0x720>)
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fd f840 	bl	8008cd8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bc5e:	6a3b      	ldr	r3, [r7, #32]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4619      	mov	r1, r3
 800bc64:	4610      	mov	r0, r2
 800bc66:	f7fd f837 	bl	8008cd8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bc70:	2102      	movs	r1, #2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fd f830 	bl	8008cd8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd f80d 	bl	8008ca2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	1dda      	adds	r2, r3, #7
 800bc8c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bc90:	2301      	movs	r3, #1
 800bc92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc94:	f7fc ff8c 	bl	8008bb0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	1c5a      	adds	r2, r3, #1
 800bc9c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bca0:	2301      	movs	r3, #1
 800bca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bca4:	f7fc ff84 	bl	8008bb0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800bca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcaa:	2100      	movs	r1, #0
 800bcac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcae:	f7fd f860 	bl	8008d72 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800bcb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcb4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcba:	e04b      	b.n	800bd54 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800bcbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d113      	bne.n	800bcec <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800bcc4:	f06f 0107 	mvn.w	r1, #7
 800bcc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcca:	f7fd f805 	bl	8008cd8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	f04f 31ff 	mov.w	r1, #4294967295
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fc fffe 	bl	8008cd8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	3308      	adds	r3, #8
 800bce0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fc fff7 	bl	8008cd8 <st_dword>
 800bcea:	e00b      	b.n	800bd04 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800bcec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d101      	bne.n	800bcf8 <f_mkfs+0x678>
 800bcf4:	4b2b      	ldr	r3, [pc, #172]	; (800bda4 <f_mkfs+0x724>)
 800bcf6:	e001      	b.n	800bcfc <f_mkfs+0x67c>
 800bcf8:	f06f 0307 	mvn.w	r3, #7
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd00:	f7fc ffea 	bl	8008cd8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800bd04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd06:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800bd08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	bf28      	it	cs
 800bd10:	4613      	movcs	r3, r2
 800bd12:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800bd14:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd1e:	f7fc ff47 	bl	8008bb0 <disk_write>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <f_mkfs+0x6ac>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e0cf      	b.n	800becc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800bd2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd2e:	461a      	mov	r2, r3
 800bd30:	2100      	movs	r1, #0
 800bd32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd34:	f7fd f81d 	bl	8008d72 <mem_set>
				sect += n; nsect -= n;
 800bd38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd3c:	4413      	add	r3, r2
 800bd3e:	667b      	str	r3, [r7, #100]	; 0x64
 800bd40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800bd48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1dc      	bne.n	800bd08 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd50:	3301      	adds	r3, #1
 800bd52:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d3af      	bcc.n	800bcbc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800bd5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d101      	bne.n	800bd68 <f_mkfs+0x6e8>
 800bd64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd66:	e000      	b.n	800bd6a <f_mkfs+0x6ea>
 800bd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800bd6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	4293      	cmp	r3, r2
 800bd72:	bf28      	it	cs
 800bd74:	4613      	movcs	r3, r2
 800bd76:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800bd78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd82:	f7fc ff15 	bl	8008bb0 <disk_write>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00d      	beq.n	800bda8 <f_mkfs+0x728>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e09d      	b.n	800becc <f_mkfs+0x84c>
 800bd90:	08015d34 	.word	0x08015d34
 800bd94:	08015d40 	.word	0x08015d40
 800bd98:	08015d54 	.word	0x08015d54
 800bd9c:	41615252 	.word	0x41615252
 800bda0:	61417272 	.word	0x61417272
 800bda4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800bda8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdac:	4413      	add	r3, r2
 800bdae:	667b      	str	r3, [r7, #100]	; 0x64
 800bdb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800bdb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1d6      	bne.n	800bd6c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800bdbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d103      	bne.n	800bdce <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800bdcc:	e010      	b.n	800bdf0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd4:	d303      	bcc.n	800bdde <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800bdd6:	2306      	movs	r3, #6
 800bdd8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800bddc:	e008      	b.n	800bdf0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800bdde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d101      	bne.n	800bdea <f_mkfs+0x76a>
 800bde6:	2304      	movs	r3, #4
 800bde8:	e000      	b.n	800bdec <f_mkfs+0x76c>
 800bdea:	2301      	movs	r3, #1
 800bdec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	f003 0308 	and.w	r3, r3, #8
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d15b      	bne.n	800beb2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800bdfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	2100      	movs	r1, #0
 800be00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be02:	f7fc ffb6 	bl	8008d72 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800be10:	4618      	mov	r0, r3
 800be12:	f7fc ff46 	bl	8008ca2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be1c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	2200      	movs	r2, #0
 800be22:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	3301      	adds	r3, #1
 800be28:	2201      	movs	r2, #1
 800be2a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	3302      	adds	r3, #2
 800be30:	2201      	movs	r2, #1
 800be32:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	3303      	adds	r3, #3
 800be38:	2200      	movs	r2, #0
 800be3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	3304      	adds	r3, #4
 800be40:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800be44:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	441a      	add	r2, r3
 800be4c:	4b21      	ldr	r3, [pc, #132]	; (800bed4 <f_mkfs+0x854>)
 800be4e:	fba3 1302 	umull	r1, r3, r3, r2
 800be52:	1ad2      	subs	r2, r2, r3
 800be54:	0852      	lsrs	r2, r2, #1
 800be56:	4413      	add	r3, r2
 800be58:	0b5b      	lsrs	r3, r3, #13
 800be5a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	3305      	adds	r3, #5
 800be60:	22fe      	movs	r2, #254	; 0xfe
 800be62:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	3306      	adds	r3, #6
 800be68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be6a:	0892      	lsrs	r2, r2, #2
 800be6c:	b2d2      	uxtb	r2, r2
 800be6e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800be72:	b2d2      	uxtb	r2, r2
 800be74:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	3307      	adds	r3, #7
 800be7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	3308      	adds	r3, #8
 800be84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be86:	4618      	mov	r0, r3
 800be88:	f7fc ff26 	bl	8008cd8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	330c      	adds	r3, #12
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f7fc ff1f 	bl	8008cd8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800be9a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800be9e:	2301      	movs	r3, #1
 800bea0:	2200      	movs	r2, #0
 800bea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bea4:	f7fc fe84 	bl	8008bb0 <disk_write>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <f_mkfs+0x832>
 800beae:	2301      	movs	r3, #1
 800beb0:	e00c      	b.n	800becc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800beb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800beb6:	2200      	movs	r2, #0
 800beb8:	2100      	movs	r1, #0
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fc fe98 	bl	8008bf0 <disk_ioctl>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <f_mkfs+0x84a>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e000      	b.n	800becc <f_mkfs+0x84c>

	return FR_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3774      	adds	r7, #116	; 0x74
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd90      	pop	{r4, r7, pc}
 800bed4:	0515565b 	.word	0x0515565b

0800bed8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bed8:	b480      	push	{r7}
 800beda:	b087      	sub	sp, #28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	4613      	mov	r3, r2
 800bee4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bee6:	2301      	movs	r3, #1
 800bee8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800beee:	4b1f      	ldr	r3, [pc, #124]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bef0:	7a5b      	ldrb	r3, [r3, #9]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d131      	bne.n	800bf5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bef8:	4b1c      	ldr	r3, [pc, #112]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800befa:	7a5b      	ldrb	r3, [r3, #9]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	461a      	mov	r2, r3
 800bf00:	4b1a      	ldr	r3, [pc, #104]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bf02:	2100      	movs	r1, #0
 800bf04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf06:	4b19      	ldr	r3, [pc, #100]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bf08:	7a5b      	ldrb	r3, [r3, #9]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	4a17      	ldr	r2, [pc, #92]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf16:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bf18:	7a5b      	ldrb	r3, [r3, #9]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4b13      	ldr	r3, [pc, #76]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bf20:	4413      	add	r3, r2
 800bf22:	79fa      	ldrb	r2, [r7, #7]
 800bf24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf26:	4b11      	ldr	r3, [pc, #68]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bf28:	7a5b      	ldrb	r3, [r3, #9]
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	1c5a      	adds	r2, r3, #1
 800bf2e:	b2d1      	uxtb	r1, r2
 800bf30:	4a0e      	ldr	r2, [pc, #56]	; (800bf6c <FATFS_LinkDriverEx+0x94>)
 800bf32:	7251      	strb	r1, [r2, #9]
 800bf34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf36:	7dbb      	ldrb	r3, [r7, #22]
 800bf38:	3330      	adds	r3, #48	; 0x30
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	3301      	adds	r3, #1
 800bf44:	223a      	movs	r2, #58	; 0x3a
 800bf46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	3302      	adds	r3, #2
 800bf4c:	222f      	movs	r2, #47	; 0x2f
 800bf4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	3303      	adds	r3, #3
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	371c      	adds	r7, #28
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	20000338 	.word	0x20000338

0800bf70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff ffaa 	bl	800bed8 <FATFS_LinkDriverEx>
 800bf84:	4603      	mov	r3, r0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
	...

0800bf90 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800bfa4:	4b15      	ldr	r3, [pc, #84]	; (800bffc <FATFS_UnLinkDriverEx+0x6c>)
 800bfa6:	7a5b      	ldrb	r3, [r3, #9]
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d01e      	beq.n	800bfec <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	3b30      	subs	r3, #48	; 0x30
 800bfb4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	4a10      	ldr	r2, [pc, #64]	; (800bffc <FATFS_UnLinkDriverEx+0x6c>)
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d013      	beq.n	800bfec <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	4a0d      	ldr	r2, [pc, #52]	; (800bffc <FATFS_UnLinkDriverEx+0x6c>)
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	2200      	movs	r2, #0
 800bfce:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
 800bfd2:	4a0a      	ldr	r2, [pc, #40]	; (800bffc <FATFS_UnLinkDriverEx+0x6c>)
 800bfd4:	4413      	add	r3, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800bfda:	4b08      	ldr	r3, [pc, #32]	; (800bffc <FATFS_UnLinkDriverEx+0x6c>)
 800bfdc:	7a5b      	ldrb	r3, [r3, #9]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <FATFS_UnLinkDriverEx+0x6c>)
 800bfe6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	20000338 	.word	0x20000338

0800c000 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800c008:	2100      	movs	r1, #0
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff ffc0 	bl	800bf90 <FATFS_UnLinkDriverEx>
 800c010:	4603      	mov	r3, r0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	4603      	mov	r3, r0
 800c022:	6039      	str	r1, [r7, #0]
 800c024:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 800c026:	2300      	movs	r3, #0
 800c028:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c02a:	f107 0308 	add.w	r3, r7, #8
 800c02e:	2101      	movs	r1, #1
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f8a8 	bl	800c186 <osSemaphoreCreate>
 800c036:	4602      	mov	r2, r0
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	bf14      	ite	ne
 800c044:	2301      	movne	r3, #1
 800c046:	2300      	moveq	r3, #0
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	60fb      	str	r3, [r7, #12]

    return ret;
 800c04c:	68fb      	ldr	r3, [r7, #12]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f936 	bl	800c2d0 <osSemaphoreDelete>
    return 1;
 800c064:	2301      	movs	r3, #1
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c07a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f8a0 	bl	800c1c4 <osSemaphoreWait>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <ff_req_grant+0x20>
  {
    ret = 1;
 800c08a:	2301      	movs	r3, #1
 800c08c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c08e:	68fb      	ldr	r3, [r7, #12]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f8df 	bl	800c264 <osSemaphoreRelease>
}
 800c0a6:	bf00      	nop
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c0bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0c0:	2b84      	cmp	r3, #132	; 0x84
 800c0c2:	d005      	beq.n	800c0d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c0c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3303      	adds	r3, #3
 800c0ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b083      	sub	sp, #12
 800c0e2:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e4:	f3ef 8305 	mrs	r3, IPSR
 800c0e8:	607b      	str	r3, [r7, #4]
  return(result);
 800c0ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	bf14      	ite	ne
 800c0f0:	2301      	movne	r3, #1
 800c0f2:	2300      	moveq	r3, #0
 800c0f4:	b2db      	uxtb	r3, r3
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c106:	f001 fdbb 	bl	800dc80 <vTaskStartScheduler>
  
  return osOK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c112:	b087      	sub	sp, #28
 800c114:	af02      	add	r7, sp, #8
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685c      	ldr	r4, [r3, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c126:	b29e      	uxth	r6, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff ffbd 	bl	800c0ae <makeFreeRtosPriority>
 800c134:	4602      	mov	r2, r0
 800c136:	f107 030c 	add.w	r3, r7, #12
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	9200      	str	r2, [sp, #0]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	4632      	mov	r2, r6
 800c142:	4629      	mov	r1, r5
 800c144:	4620      	mov	r0, r4
 800c146:	f001 fc21 	bl	800d98c <xTaskCreate>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d001      	beq.n	800c154 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800c150:	2300      	movs	r3, #0
 800c152:	e000      	b.n	800c156 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800c154:	68fb      	ldr	r3, [r7, #12]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c15e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <osDelay+0x16>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	e000      	b.n	800c176 <osDelay+0x18>
 800c174:	2301      	movs	r3, #1
 800c176:	4618      	mov	r0, r3
 800c178:	f001 fd4c 	bl	800dc14 <vTaskDelay>
  
  return osOK;
 800c17c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c186:	b580      	push	{r7, lr}
 800c188:	b084      	sub	sp, #16
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d110      	bne.n	800c1b8 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800c196:	2203      	movs	r2, #3
 800c198:	2100      	movs	r1, #0
 800c19a:	2001      	movs	r0, #1
 800c19c:	f000 fe78 	bl	800ce90 <xQueueGenericCreate>
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d005      	beq.n	800c1b4 <osSemaphoreCreate+0x2e>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f000 fec8 	bl	800cf44 <xQueueGenericSend>
    return sema;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	e000      	b.n	800c1ba <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800c1b8:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c1d8:	2380      	movs	r3, #128	; 0x80
 800c1da:	e03c      	b.n	800c256 <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d103      	bne.n	800c1f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	e009      	b.n	800c204 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d006      	beq.n	800c204 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d101      	bne.n	800c204 <osSemaphoreWait+0x40>
      ticks = 1;
 800c200:	2301      	movs	r3, #1
 800c202:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c204:	f7ff ff6b 	bl	800c0de <inHandlerMode>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d017      	beq.n	800c23e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c20e:	f107 0308 	add.w	r3, r7, #8
 800c212:	461a      	mov	r2, r3
 800c214:	2100      	movs	r1, #0
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 f9dc 	bl	800d5d4 <xQueueReceiveFromISR>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d001      	beq.n	800c226 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c222:	23ff      	movs	r3, #255	; 0xff
 800c224:	e017      	b.n	800c256 <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d013      	beq.n	800c254 <osSemaphoreWait+0x90>
 800c22c:	4b0c      	ldr	r3, [pc, #48]	; (800c260 <osSemaphoreWait+0x9c>)
 800c22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	e00a      	b.n	800c254 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c23e:	2300      	movs	r3, #0
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	2100      	movs	r1, #0
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 f8ad 	bl	800d3a4 <xQueueGenericReceive>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d001      	beq.n	800c254 <osSemaphoreWait+0x90>
    return osErrorOS;
 800c250:	23ff      	movs	r3, #255	; 0xff
 800c252:	e000      	b.n	800c256 <osSemaphoreWait+0x92>
  }
  
  return osOK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	e000ed04 	.word	0xe000ed04

0800c264 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c270:	2300      	movs	r3, #0
 800c272:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c274:	f7ff ff33 	bl	800c0de <inHandlerMode>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d016      	beq.n	800c2ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c27e:	f107 0308 	add.w	r3, r7, #8
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fffb 	bl	800d280 <xQueueGiveFromISR>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d001      	beq.n	800c294 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c290:	23ff      	movs	r3, #255	; 0xff
 800c292:	e017      	b.n	800c2c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d013      	beq.n	800c2c2 <osSemaphoreRelease+0x5e>
 800c29a:	4b0c      	ldr	r3, [pc, #48]	; (800c2cc <osSemaphoreRelease+0x68>)
 800c29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	e00a      	b.n	800c2c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fe46 	bl	800cf44 <xQueueGenericSend>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d001      	beq.n	800c2c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c2be:	23ff      	movs	r3, #255	; 0xff
 800c2c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	e000ed04 	.word	0xe000ed04

0800c2d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c2d8:	f7ff ff01 	bl	800c0de <inHandlerMode>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c2e2:	2382      	movs	r3, #130	; 0x82
 800c2e4:	e003      	b.n	800c2ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f001 f9f7 	bl	800d6da <vQueueDelete>

  return osOK; 
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b082      	sub	sp, #8
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6818      	ldr	r0, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	4619      	mov	r1, r3
 800c30c:	f000 fdc0 	bl	800ce90 <xQueueGenericCreate>
 800c310:	4603      	mov	r3, r0
#endif
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <osMessagePut+0x1e>
    ticks = 1;
 800c336:	2301      	movs	r3, #1
 800c338:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c33a:	f7ff fed0 	bl	800c0de <inHandlerMode>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d018      	beq.n	800c376 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c344:	f107 0210 	add.w	r2, r7, #16
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	2300      	movs	r3, #0
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 fefa 	bl	800d148 <xQueueGenericSendFromISR>
 800c354:	4603      	mov	r3, r0
 800c356:	2b01      	cmp	r3, #1
 800c358:	d001      	beq.n	800c35e <osMessagePut+0x42>
      return osErrorOS;
 800c35a:	23ff      	movs	r3, #255	; 0xff
 800c35c:	e018      	b.n	800c390 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d014      	beq.n	800c38e <osMessagePut+0x72>
 800c364:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <osMessagePut+0x7c>)
 800c366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	e00b      	b.n	800c38e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c376:	f107 0108 	add.w	r1, r7, #8
 800c37a:	2300      	movs	r3, #0
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 fde0 	bl	800cf44 <xQueueGenericSend>
 800c384:	4603      	mov	r3, r0
 800c386:	2b01      	cmp	r3, #1
 800c388:	d001      	beq.n	800c38e <osMessagePut+0x72>
      return osErrorOS;
 800c38a:	23ff      	movs	r3, #255	; 0xff
 800c38c:	e000      	b.n	800c390 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3718      	adds	r7, #24
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b08b      	sub	sp, #44	; 0x2c
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10a      	bne.n	800c3cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c3b6:	2380      	movs	r3, #128	; 0x80
 800c3b8:	617b      	str	r3, [r7, #20]
    return event;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	461c      	mov	r4, r3
 800c3be:	f107 0314 	add.w	r3, r7, #20
 800c3c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c3ca:	e054      	b.n	800c476 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d103      	bne.n	800c3e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3e2:	e009      	b.n	800c3f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d006      	beq.n	800c3f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <osMessageGet+0x5c>
      ticks = 1;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c3f8:	f7ff fe71 	bl	800c0de <inHandlerMode>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01c      	beq.n	800c43c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c402:	f107 0220 	add.w	r2, r7, #32
 800c406:	f107 0314 	add.w	r3, r7, #20
 800c40a:	3304      	adds	r3, #4
 800c40c:	4619      	mov	r1, r3
 800c40e:	68b8      	ldr	r0, [r7, #8]
 800c410:	f001 f8e0 	bl	800d5d4 <xQueueReceiveFromISR>
 800c414:	4603      	mov	r3, r0
 800c416:	2b01      	cmp	r3, #1
 800c418:	d102      	bne.n	800c420 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c41a:	2310      	movs	r3, #16
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	e001      	b.n	800c424 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01d      	beq.n	800c466 <osMessageGet+0xca>
 800c42a:	4b15      	ldr	r3, [pc, #84]	; (800c480 <osMessageGet+0xe4>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	e014      	b.n	800c466 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c43c:	f107 0314 	add.w	r3, r7, #20
 800c440:	1d19      	adds	r1, r3, #4
 800c442:	2300      	movs	r3, #0
 800c444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c446:	68b8      	ldr	r0, [r7, #8]
 800c448:	f000 ffac 	bl	800d3a4 <xQueueGenericReceive>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d102      	bne.n	800c458 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c452:	2310      	movs	r3, #16
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	e006      	b.n	800c466 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <osMessageGet+0xc6>
 800c45e:	2300      	movs	r3, #0
 800c460:	e000      	b.n	800c464 <osMessageGet+0xc8>
 800c462:	2340      	movs	r3, #64	; 0x40
 800c464:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	461c      	mov	r4, r3
 800c46a:	f107 0314 	add.w	r3, r7, #20
 800c46e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	372c      	adds	r7, #44	; 0x2c
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd90      	pop	{r4, r7, pc}
 800c47e:	bf00      	nop
 800c480:	e000ed04 	.word	0xe000ed04

0800c484 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c488:	f002 f80a 	bl	800e4a0 <xTaskGetSchedulerState>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d001      	beq.n	800c496 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800c492:	f000 fc09 	bl	800cca8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c496:	bf00      	nop
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4a8:	f001 fc3e 	bl	800dd28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4ac:	4b5a      	ldr	r3, [pc, #360]	; (800c618 <pvPortMalloc+0x17c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4b4:	f000 f916 	bl	800c6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4b8:	4b58      	ldr	r3, [pc, #352]	; (800c61c <pvPortMalloc+0x180>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 8090 	bne.w	800c5e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01e      	beq.n	800c50a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c4cc:	2208      	movs	r2, #8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d015      	beq.n	800c50a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f023 0307 	bic.w	r3, r3, #7
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f003 0307 	and.w	r3, r3, #7
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	b672      	cpsid	i
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	b662      	cpsie	i
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	e7fe      	b.n	800c508 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d06a      	beq.n	800c5e6 <pvPortMalloc+0x14a>
 800c510:	4b43      	ldr	r3, [pc, #268]	; (800c620 <pvPortMalloc+0x184>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	429a      	cmp	r2, r3
 800c518:	d865      	bhi.n	800c5e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c51a:	4b42      	ldr	r3, [pc, #264]	; (800c624 <pvPortMalloc+0x188>)
 800c51c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c51e:	4b41      	ldr	r3, [pc, #260]	; (800c624 <pvPortMalloc+0x188>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c524:	e004      	b.n	800c530 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	429a      	cmp	r2, r3
 800c538:	d203      	bcs.n	800c542 <pvPortMalloc+0xa6>
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1f1      	bne.n	800c526 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c542:	4b35      	ldr	r3, [pc, #212]	; (800c618 <pvPortMalloc+0x17c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c548:	429a      	cmp	r2, r3
 800c54a:	d04c      	beq.n	800c5e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2208      	movs	r2, #8
 800c552:	4413      	add	r3, r2
 800c554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	1ad2      	subs	r2, r2, r3
 800c566:	2308      	movs	r3, #8
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d920      	bls.n	800c5b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4413      	add	r3, r2
 800c574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	f003 0307 	and.w	r3, r3, #7
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00b      	beq.n	800c598 <pvPortMalloc+0xfc>
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	b672      	cpsid	i
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	b662      	cpsie	i
 800c594:	613b      	str	r3, [r7, #16]
 800c596:	e7fe      	b.n	800c596 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	1ad2      	subs	r2, r2, r3
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5aa:	69b8      	ldr	r0, [r7, #24]
 800c5ac:	f000 f8fc 	bl	800c7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5b0:	4b1b      	ldr	r3, [pc, #108]	; (800c620 <pvPortMalloc+0x184>)
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	1ad3      	subs	r3, r2, r3
 800c5ba:	4a19      	ldr	r2, [pc, #100]	; (800c620 <pvPortMalloc+0x184>)
 800c5bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5be:	4b18      	ldr	r3, [pc, #96]	; (800c620 <pvPortMalloc+0x184>)
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	4b19      	ldr	r3, [pc, #100]	; (800c628 <pvPortMalloc+0x18c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d203      	bcs.n	800c5d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5ca:	4b15      	ldr	r3, [pc, #84]	; (800c620 <pvPortMalloc+0x184>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a16      	ldr	r2, [pc, #88]	; (800c628 <pvPortMalloc+0x18c>)
 800c5d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	4b11      	ldr	r3, [pc, #68]	; (800c61c <pvPortMalloc+0x180>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5e6:	f001 fbad 	bl	800dd44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	f003 0307 	and.w	r3, r3, #7
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00b      	beq.n	800c60c <pvPortMalloc+0x170>
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	b672      	cpsid	i
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	b662      	cpsie	i
 800c608:	60fb      	str	r3, [r7, #12]
 800c60a:	e7fe      	b.n	800c60a <pvPortMalloc+0x16e>
	return pvReturn;
 800c60c:	69fb      	ldr	r3, [r7, #28]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3728      	adds	r7, #40	; 0x28
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	2000f34c 	.word	0x2000f34c
 800c61c:	2000f358 	.word	0x2000f358
 800c620:	2000f350 	.word	0x2000f350
 800c624:	2000f344 	.word	0x2000f344
 800c628:	2000f354 	.word	0x2000f354

0800c62c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d04a      	beq.n	800c6d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c63e:	2308      	movs	r3, #8
 800c640:	425b      	negs	r3, r3
 800c642:	697a      	ldr	r2, [r7, #20]
 800c644:	4413      	add	r3, r2
 800c646:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	4b22      	ldr	r3, [pc, #136]	; (800c6dc <vPortFree+0xb0>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4013      	ands	r3, r2
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10b      	bne.n	800c672 <vPortFree+0x46>
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	b672      	cpsid	i
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	b662      	cpsie	i
 800c66e:	60fb      	str	r3, [r7, #12]
 800c670:	e7fe      	b.n	800c670 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00b      	beq.n	800c692 <vPortFree+0x66>
 800c67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67e:	b672      	cpsid	i
 800c680:	f383 8811 	msr	BASEPRI, r3
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	b662      	cpsie	i
 800c68e:	60bb      	str	r3, [r7, #8]
 800c690:	e7fe      	b.n	800c690 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	4b11      	ldr	r3, [pc, #68]	; (800c6dc <vPortFree+0xb0>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4013      	ands	r3, r2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d019      	beq.n	800c6d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d115      	bne.n	800c6d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	4b0b      	ldr	r3, [pc, #44]	; (800c6dc <vPortFree+0xb0>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	43db      	mvns	r3, r3
 800c6b2:	401a      	ands	r2, r3
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6b8:	f001 fb36 	bl	800dd28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	4b07      	ldr	r3, [pc, #28]	; (800c6e0 <vPortFree+0xb4>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	4a06      	ldr	r2, [pc, #24]	; (800c6e0 <vPortFree+0xb4>)
 800c6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6ca:	6938      	ldr	r0, [r7, #16]
 800c6cc:	f000 f86c 	bl	800c7a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c6d0:	f001 fb38 	bl	800dd44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6d4:	bf00      	nop
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	2000f358 	.word	0x2000f358
 800c6e0:	2000f350 	.word	0x2000f350

0800c6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6f0:	4b27      	ldr	r3, [pc, #156]	; (800c790 <prvHeapInit+0xac>)
 800c6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f003 0307 	and.w	r3, r3, #7
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00c      	beq.n	800c718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3307      	adds	r3, #7
 800c702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f023 0307 	bic.w	r3, r3, #7
 800c70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	4a1f      	ldr	r2, [pc, #124]	; (800c790 <prvHeapInit+0xac>)
 800c714:	4413      	add	r3, r2
 800c716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c71c:	4a1d      	ldr	r2, [pc, #116]	; (800c794 <prvHeapInit+0xb0>)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c722:	4b1c      	ldr	r3, [pc, #112]	; (800c794 <prvHeapInit+0xb0>)
 800c724:	2200      	movs	r2, #0
 800c726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4413      	add	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c730:	2208      	movs	r2, #8
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	1a9b      	subs	r3, r3, r2
 800c736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f023 0307 	bic.w	r3, r3, #7
 800c73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4a15      	ldr	r2, [pc, #84]	; (800c798 <prvHeapInit+0xb4>)
 800c744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c746:	4b14      	ldr	r3, [pc, #80]	; (800c798 <prvHeapInit+0xb4>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2200      	movs	r2, #0
 800c74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c74e:	4b12      	ldr	r3, [pc, #72]	; (800c798 <prvHeapInit+0xb4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <prvHeapInit+0xb4>)
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	4a0a      	ldr	r2, [pc, #40]	; (800c79c <prvHeapInit+0xb8>)
 800c772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	4a09      	ldr	r2, [pc, #36]	; (800c7a0 <prvHeapInit+0xbc>)
 800c77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c77c:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <prvHeapInit+0xc0>)
 800c77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	bf00      	nop
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	20000344 	.word	0x20000344
 800c794:	2000f344 	.word	0x2000f344
 800c798:	2000f34c 	.word	0x2000f34c
 800c79c:	2000f354 	.word	0x2000f354
 800c7a0:	2000f350 	.word	0x2000f350
 800c7a4:	2000f358 	.word	0x2000f358

0800c7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7b0:	4b28      	ldr	r3, [pc, #160]	; (800c854 <prvInsertBlockIntoFreeList+0xac>)
 800c7b2:	60fb      	str	r3, [r7, #12]
 800c7b4:	e002      	b.n	800c7bc <prvInsertBlockIntoFreeList+0x14>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d3f7      	bcc.n	800c7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	441a      	add	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d108      	bne.n	800c7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	441a      	add	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	441a      	add	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d118      	bne.n	800c830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	4b15      	ldr	r3, [pc, #84]	; (800c858 <prvInsertBlockIntoFreeList+0xb0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	429a      	cmp	r2, r3
 800c808:	d00d      	beq.n	800c826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	441a      	add	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	e008      	b.n	800c838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c826:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <prvInsertBlockIntoFreeList+0xb0>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	e003      	b.n	800c838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d002      	beq.n	800c846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c846:	bf00      	nop
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	2000f344 	.word	0x2000f344
 800c858:	2000f34c 	.word	0x2000f34c

0800c85c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f103 0208 	add.w	r2, r3, #8
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f04f 32ff 	mov.w	r2, #4294967295
 800c874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f103 0208 	add.w	r2, r3, #8
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f103 0208 	add.w	r2, r3, #8
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8aa:	bf00      	nop
 800c8ac:	370c      	adds	r7, #12
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b085      	sub	sp, #20
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	689a      	ldr	r2, [r3, #8]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	683a      	ldr	r2, [r7, #0]
 800c8da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	1c5a      	adds	r2, r3, #1
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	601a      	str	r2, [r3, #0]
}
 800c8f2:	bf00      	nop
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8fe:	b480      	push	{r7}
 800c900:	b085      	sub	sp, #20
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c914:	d103      	bne.n	800c91e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	e00c      	b.n	800c938 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3308      	adds	r3, #8
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	e002      	b.n	800c92c <vListInsert+0x2e>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	429a      	cmp	r2, r3
 800c936:	d9f6      	bls.n	800c926 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	601a      	str	r2, [r3, #0]
}
 800c964:	bf00      	nop
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	6892      	ldr	r2, [r2, #8]
 800c986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6852      	ldr	r2, [r2, #4]
 800c990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	685a      	ldr	r2, [r3, #4]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d103      	bne.n	800c9a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	689a      	ldr	r2, [r3, #8]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	1e5a      	subs	r2, r3, #1
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3b04      	subs	r3, #4
 800c9d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3b04      	subs	r3, #4
 800c9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	f023 0201 	bic.w	r2, r3, #1
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3b04      	subs	r3, #4
 800c9f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9f4:	4a0c      	ldr	r2, [pc, #48]	; (800ca28 <pxPortInitialiseStack+0x64>)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3b14      	subs	r3, #20
 800c9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3b04      	subs	r3, #4
 800ca0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f06f 0202 	mvn.w	r2, #2
 800ca12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3b20      	subs	r3, #32
 800ca18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	0800ca2d 	.word	0x0800ca2d

0800ca2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca32:	4b0e      	ldr	r3, [pc, #56]	; (800ca6c <prvTaskExitError+0x40>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3a:	d00b      	beq.n	800ca54 <prvTaskExitError+0x28>
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	b672      	cpsid	i
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	b662      	cpsie	i
 800ca50:	607b      	str	r3, [r7, #4]
 800ca52:	e7fe      	b.n	800ca52 <prvTaskExitError+0x26>
 800ca54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca58:	b672      	cpsid	i
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	b662      	cpsie	i
 800ca68:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800ca6a:	e7fe      	b.n	800ca6a <prvTaskExitError+0x3e>
 800ca6c:	20000014 	.word	0x20000014

0800ca70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <pxCurrentTCBConst2>)
 800ca72:	6819      	ldr	r1, [r3, #0]
 800ca74:	6808      	ldr	r0, [r1, #0]
 800ca76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	f380 8809 	msr	PSP, r0
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f04f 0000 	mov.w	r0, #0
 800ca86:	f380 8811 	msr	BASEPRI, r0
 800ca8a:	4770      	bx	lr
 800ca8c:	f3af 8000 	nop.w

0800ca90 <pxCurrentTCBConst2>:
 800ca90:	2000f364 	.word	0x2000f364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca94:	bf00      	nop
 800ca96:	bf00      	nop

0800ca98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ca98:	4806      	ldr	r0, [pc, #24]	; (800cab4 <prvPortStartFirstTask+0x1c>)
 800ca9a:	6800      	ldr	r0, [r0, #0]
 800ca9c:	6800      	ldr	r0, [r0, #0]
 800ca9e:	f380 8808 	msr	MSP, r0
 800caa2:	b662      	cpsie	i
 800caa4:	b661      	cpsie	f
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	df00      	svc	0
 800cab0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cab2:	bf00      	nop
 800cab4:	e000ed08 	.word	0xe000ed08

0800cab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cabe:	4b2c      	ldr	r3, [pc, #176]	; (800cb70 <xPortStartScheduler+0xb8>)
 800cac0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	22ff      	movs	r2, #255	; 0xff
 800cace:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	4b24      	ldr	r3, [pc, #144]	; (800cb74 <xPortStartScheduler+0xbc>)
 800cae4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cae6:	4b24      	ldr	r3, [pc, #144]	; (800cb78 <xPortStartScheduler+0xc0>)
 800cae8:	2207      	movs	r2, #7
 800caea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caec:	e009      	b.n	800cb02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800caee:	4b22      	ldr	r3, [pc, #136]	; (800cb78 <xPortStartScheduler+0xc0>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	4a20      	ldr	r2, [pc, #128]	; (800cb78 <xPortStartScheduler+0xc0>)
 800caf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800caf8:	79fb      	ldrb	r3, [r7, #7]
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb02:	79fb      	ldrb	r3, [r7, #7]
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb0a:	2b80      	cmp	r3, #128	; 0x80
 800cb0c:	d0ef      	beq.n	800caee <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb0e:	4b1a      	ldr	r3, [pc, #104]	; (800cb78 <xPortStartScheduler+0xc0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	021b      	lsls	r3, r3, #8
 800cb14:	4a18      	ldr	r2, [pc, #96]	; (800cb78 <xPortStartScheduler+0xc0>)
 800cb16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb18:	4b17      	ldr	r3, [pc, #92]	; (800cb78 <xPortStartScheduler+0xc0>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb20:	4a15      	ldr	r2, [pc, #84]	; (800cb78 <xPortStartScheduler+0xc0>)
 800cb22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	b2da      	uxtb	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb2c:	4a13      	ldr	r2, [pc, #76]	; (800cb7c <xPortStartScheduler+0xc4>)
 800cb2e:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <xPortStartScheduler+0xc4>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb38:	4a10      	ldr	r2, [pc, #64]	; (800cb7c <xPortStartScheduler+0xc4>)
 800cb3a:	4b10      	ldr	r3, [pc, #64]	; (800cb7c <xPortStartScheduler+0xc4>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb44:	f000 f8d2 	bl	800ccec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb48:	4b0d      	ldr	r3, [pc, #52]	; (800cb80 <xPortStartScheduler+0xc8>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb4e:	f000 f8e9 	bl	800cd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb52:	4a0c      	ldr	r2, [pc, #48]	; (800cb84 <xPortStartScheduler+0xcc>)
 800cb54:	4b0b      	ldr	r3, [pc, #44]	; (800cb84 <xPortStartScheduler+0xcc>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb5e:	f7ff ff9b 	bl	800ca98 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800cb62:	f7ff ff63 	bl	800ca2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	e000e400 	.word	0xe000e400
 800cb74:	2000f35c 	.word	0x2000f35c
 800cb78:	2000f360 	.word	0x2000f360
 800cb7c:	e000ed20 	.word	0xe000ed20
 800cb80:	20000014 	.word	0x20000014
 800cb84:	e000ef34 	.word	0xe000ef34

0800cb88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	b672      	cpsid	i
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	b662      	cpsie	i
 800cba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cba4:	4b0f      	ldr	r3, [pc, #60]	; (800cbe4 <vPortEnterCritical+0x5c>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	4a0e      	ldr	r2, [pc, #56]	; (800cbe4 <vPortEnterCritical+0x5c>)
 800cbac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cbae:	4b0d      	ldr	r3, [pc, #52]	; (800cbe4 <vPortEnterCritical+0x5c>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d110      	bne.n	800cbd8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cbb6:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <vPortEnterCritical+0x60>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00b      	beq.n	800cbd8 <vPortEnterCritical+0x50>
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	b672      	cpsid	i
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	b662      	cpsie	i
 800cbd4:	603b      	str	r3, [r7, #0]
 800cbd6:	e7fe      	b.n	800cbd6 <vPortEnterCritical+0x4e>
	}
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	20000014 	.word	0x20000014
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbf2:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <vPortExitCritical+0x50>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10b      	bne.n	800cc12 <vPortExitCritical+0x26>
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	b672      	cpsid	i
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	b662      	cpsie	i
 800cc0e:	607b      	str	r3, [r7, #4]
 800cc10:	e7fe      	b.n	800cc10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800cc12:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <vPortExitCritical+0x50>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3b01      	subs	r3, #1
 800cc18:	4a08      	ldr	r2, [pc, #32]	; (800cc3c <vPortExitCritical+0x50>)
 800cc1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc1c:	4b07      	ldr	r3, [pc, #28]	; (800cc3c <vPortExitCritical+0x50>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d104      	bne.n	800cc2e <vPortExitCritical+0x42>
 800cc24:	2300      	movs	r3, #0
 800cc26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc2e:	bf00      	nop
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	20000014 	.word	0x20000014

0800cc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc40:	f3ef 8009 	mrs	r0, PSP
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	4b15      	ldr	r3, [pc, #84]	; (800cca0 <pxCurrentTCBConst>)
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	f01e 0f10 	tst.w	lr, #16
 800cc50:	bf08      	it	eq
 800cc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5a:	6010      	str	r0, [r2, #0]
 800cc5c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800cc60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc64:	b672      	cpsid	i
 800cc66:	f380 8811 	msr	BASEPRI, r0
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	b662      	cpsie	i
 800cc74:	f001 f9c2 	bl	800dffc <vTaskSwitchContext>
 800cc78:	f04f 0000 	mov.w	r0, #0
 800cc7c:	f380 8811 	msr	BASEPRI, r0
 800cc80:	bc08      	pop	{r3}
 800cc82:	6819      	ldr	r1, [r3, #0]
 800cc84:	6808      	ldr	r0, [r1, #0]
 800cc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8a:	f01e 0f10 	tst.w	lr, #16
 800cc8e:	bf08      	it	eq
 800cc90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc94:	f380 8809 	msr	PSP, r0
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop

0800cca0 <pxCurrentTCBConst>:
 800cca0:	2000f364 	.word	0x2000f364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop

0800cca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	b672      	cpsid	i
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	b662      	cpsie	i
 800ccc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccc4:	f001 f8dc 	bl	800de80 <xTaskIncrementTick>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccce:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <xPortSysTickHandler+0x40>)
 800ccd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	e000ed04 	.word	0xe000ed04

0800ccec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccf0:	4a08      	ldr	r2, [pc, #32]	; (800cd14 <vPortSetupTimerInterrupt+0x28>)
 800ccf2:	4b09      	ldr	r3, [pc, #36]	; (800cd18 <vPortSetupTimerInterrupt+0x2c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4909      	ldr	r1, [pc, #36]	; (800cd1c <vPortSetupTimerInterrupt+0x30>)
 800ccf8:	fba1 1303 	umull	r1, r3, r1, r3
 800ccfc:	099b      	lsrs	r3, r3, #6
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd02:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <vPortSetupTimerInterrupt+0x34>)
 800cd04:	2207      	movs	r2, #7
 800cd06:	601a      	str	r2, [r3, #0]
}
 800cd08:	bf00      	nop
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	e000e014 	.word	0xe000e014
 800cd18:	2000003c 	.word	0x2000003c
 800cd1c:	10624dd3 	.word	0x10624dd3
 800cd20:	e000e010 	.word	0xe000e010

0800cd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd34 <vPortEnableVFP+0x10>
 800cd28:	6801      	ldr	r1, [r0, #0]
 800cd2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd2e:	6001      	str	r1, [r0, #0]
 800cd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd32:	bf00      	nop
 800cd34:	e000ed88 	.word	0xe000ed88

0800cd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800cd3e:	f3ef 8305 	mrs	r3, IPSR
 800cd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b0f      	cmp	r3, #15
 800cd48:	d915      	bls.n	800cd76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd4a:	4a18      	ldr	r2, [pc, #96]	; (800cdac <vPortValidateInterruptPriority+0x74>)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	4413      	add	r3, r2
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd54:	4b16      	ldr	r3, [pc, #88]	; (800cdb0 <vPortValidateInterruptPriority+0x78>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	7afa      	ldrb	r2, [r7, #11]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d20b      	bcs.n	800cd76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	b672      	cpsid	i
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	b662      	cpsie	i
 800cd72:	607b      	str	r3, [r7, #4]
 800cd74:	e7fe      	b.n	800cd74 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd76:	4b0f      	ldr	r3, [pc, #60]	; (800cdb4 <vPortValidateInterruptPriority+0x7c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd7e:	4b0e      	ldr	r3, [pc, #56]	; (800cdb8 <vPortValidateInterruptPriority+0x80>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d90b      	bls.n	800cd9e <vPortValidateInterruptPriority+0x66>
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	b672      	cpsid	i
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	b662      	cpsie	i
 800cd9a:	603b      	str	r3, [r7, #0]
 800cd9c:	e7fe      	b.n	800cd9c <vPortValidateInterruptPriority+0x64>
	}
 800cd9e:	bf00      	nop
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	e000e3f0 	.word	0xe000e3f0
 800cdb0:	2000f35c 	.word	0x2000f35c
 800cdb4:	e000ed0c 	.word	0xe000ed0c
 800cdb8:	2000f360 	.word	0x2000f360

0800cdbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10b      	bne.n	800cde8 <xQueueGenericReset+0x2c>
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	b672      	cpsid	i
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	b662      	cpsie	i
 800cde4:	60bb      	str	r3, [r7, #8]
 800cde6:	e7fe      	b.n	800cde6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800cde8:	f7ff fece 	bl	800cb88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf4:	68f9      	ldr	r1, [r7, #12]
 800cdf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cdf8:	fb01 f303 	mul.w	r3, r1, r3
 800cdfc:	441a      	add	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	68f9      	ldr	r1, [r7, #12]
 800ce1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce1e:	fb01 f303 	mul.w	r3, r1, r3
 800ce22:	441a      	add	r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	22ff      	movs	r2, #255	; 0xff
 800ce2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	22ff      	movs	r2, #255	; 0xff
 800ce34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d114      	bne.n	800ce68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d01a      	beq.n	800ce7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3310      	adds	r3, #16
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f001 f960 	bl	800e110 <xTaskRemoveFromEventList>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d012      	beq.n	800ce7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce56:	4b0d      	ldr	r3, [pc, #52]	; (800ce8c <xQueueGenericReset+0xd0>)
 800ce58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	e009      	b.n	800ce7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	3310      	adds	r3, #16
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff fcf5 	bl	800c85c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3324      	adds	r3, #36	; 0x24
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7ff fcf0 	bl	800c85c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce7c:	f7ff feb6 	bl	800cbec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce80:	2301      	movs	r3, #1
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	e000ed04 	.word	0xe000ed04

0800ce90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08a      	sub	sp, #40	; 0x28
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10b      	bne.n	800cebc <xQueueGenericCreate+0x2c>
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	b672      	cpsid	i
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	b662      	cpsie	i
 800ceb8:	613b      	str	r3, [r7, #16]
 800ceba:	e7fe      	b.n	800ceba <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d102      	bne.n	800cec8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	61fb      	str	r3, [r7, #28]
 800cec6:	e004      	b.n	800ced2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	fb02 f303 	mul.w	r3, r2, r3
 800ced0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	3348      	adds	r3, #72	; 0x48
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff fae0 	bl	800c49c <pvPortMalloc>
 800cedc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	3348      	adds	r3, #72	; 0x48
 800cee8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ceea:	79fa      	ldrb	r2, [r7, #7]
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4613      	mov	r3, r2
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	68b9      	ldr	r1, [r7, #8]
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f000 f805 	bl	800cf06 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800cefc:	69bb      	ldr	r3, [r7, #24]
	}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3720      	adds	r7, #32
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b084      	sub	sp, #16
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	60f8      	str	r0, [r7, #12]
 800cf0e:	60b9      	str	r1, [r7, #8]
 800cf10:	607a      	str	r2, [r7, #4]
 800cf12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d103      	bne.n	800cf22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	e002      	b.n	800cf28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf34:	2101      	movs	r1, #1
 800cf36:	69b8      	ldr	r0, [r7, #24]
 800cf38:	f7ff ff40 	bl	800cdbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b08e      	sub	sp, #56	; 0x38
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf52:	2300      	movs	r3, #0
 800cf54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10b      	bne.n	800cf78 <xQueueGenericSend+0x34>
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	b672      	cpsid	i
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	b662      	cpsie	i
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf76:	e7fe      	b.n	800cf76 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d103      	bne.n	800cf86 <xQueueGenericSend+0x42>
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <xQueueGenericSend+0x46>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e000      	b.n	800cf8c <xQueueGenericSend+0x48>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10b      	bne.n	800cfa8 <xQueueGenericSend+0x64>
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	b672      	cpsid	i
 800cf96:	f383 8811 	msr	BASEPRI, r3
 800cf9a:	f3bf 8f6f 	isb	sy
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	b662      	cpsie	i
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
 800cfa6:	e7fe      	b.n	800cfa6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d103      	bne.n	800cfb6 <xQueueGenericSend+0x72>
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d101      	bne.n	800cfba <xQueueGenericSend+0x76>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e000      	b.n	800cfbc <xQueueGenericSend+0x78>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10b      	bne.n	800cfd8 <xQueueGenericSend+0x94>
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	b672      	cpsid	i
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	b662      	cpsie	i
 800cfd4:	623b      	str	r3, [r7, #32]
 800cfd6:	e7fe      	b.n	800cfd6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfd8:	f001 fa62 	bl	800e4a0 <xTaskGetSchedulerState>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d102      	bne.n	800cfe8 <xQueueGenericSend+0xa4>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d101      	bne.n	800cfec <xQueueGenericSend+0xa8>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e000      	b.n	800cfee <xQueueGenericSend+0xaa>
 800cfec:	2300      	movs	r3, #0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10b      	bne.n	800d00a <xQueueGenericSend+0xc6>
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	b672      	cpsid	i
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	b662      	cpsie	i
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	e7fe      	b.n	800d008 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d00a:	f7ff fdbd 	bl	800cb88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d016:	429a      	cmp	r2, r3
 800d018:	d302      	bcc.n	800d020 <xQueueGenericSend+0xdc>
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d129      	bne.n	800d074 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	68b9      	ldr	r1, [r7, #8]
 800d024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d026:	f000 fb77 	bl	800d718 <prvCopyDataToQueue>
 800d02a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d030:	2b00      	cmp	r3, #0
 800d032:	d010      	beq.n	800d056 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d036:	3324      	adds	r3, #36	; 0x24
 800d038:	4618      	mov	r0, r3
 800d03a:	f001 f869 	bl	800e110 <xTaskRemoveFromEventList>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d013      	beq.n	800d06c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d044:	4b3f      	ldr	r3, [pc, #252]	; (800d144 <xQueueGenericSend+0x200>)
 800d046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	e00a      	b.n	800d06c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d007      	beq.n	800d06c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d05c:	4b39      	ldr	r3, [pc, #228]	; (800d144 <xQueueGenericSend+0x200>)
 800d05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d06c:	f7ff fdbe 	bl	800cbec <vPortExitCritical>
				return pdPASS;
 800d070:	2301      	movs	r3, #1
 800d072:	e063      	b.n	800d13c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d103      	bne.n	800d082 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d07a:	f7ff fdb7 	bl	800cbec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d07e:	2300      	movs	r3, #0
 800d080:	e05c      	b.n	800d13c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d084:	2b00      	cmp	r3, #0
 800d086:	d106      	bne.n	800d096 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800d088:	f107 0314 	add.w	r3, r7, #20
 800d08c:	4618      	mov	r0, r3
 800d08e:	f001 f8a3 	bl	800e1d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d092:	2301      	movs	r3, #1
 800d094:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d096:	f7ff fda9 	bl	800cbec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d09a:	f000 fe45 	bl	800dd28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d09e:	f7ff fd73 	bl	800cb88 <vPortEnterCritical>
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0a8:	b25b      	sxtb	r3, r3
 800d0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ae:	d103      	bne.n	800d0b8 <xQueueGenericSend+0x174>
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0be:	b25b      	sxtb	r3, r3
 800d0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c4:	d103      	bne.n	800d0ce <xQueueGenericSend+0x18a>
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0ce:	f7ff fd8d 	bl	800cbec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0d2:	1d3a      	adds	r2, r7, #4
 800d0d4:	f107 0314 	add.w	r3, r7, #20
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f001 f8a2 	bl	800e224 <xTaskCheckForTimeOut>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d124      	bne.n	800d130 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e8:	f000 fc0e 	bl	800d908 <prvIsQueueFull>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d018      	beq.n	800d124 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	3310      	adds	r3, #16
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 ffe2 	bl	800e0c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d102:	f000 fb99 	bl	800d838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d106:	f000 fe1d 	bl	800dd44 <xTaskResumeAll>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f47f af7c 	bne.w	800d00a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d112:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <xQueueGenericSend+0x200>)
 800d114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	e772      	b.n	800d00a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d126:	f000 fb87 	bl	800d838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d12a:	f000 fe0b 	bl	800dd44 <xTaskResumeAll>
 800d12e:	e76c      	b.n	800d00a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d132:	f000 fb81 	bl	800d838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d136:	f000 fe05 	bl	800dd44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d13a:	2300      	movs	r3, #0
		}
	}
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3738      	adds	r7, #56	; 0x38
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08e      	sub	sp, #56	; 0x38
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
 800d154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10b      	bne.n	800d178 <xQueueGenericSendFromISR+0x30>
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	b672      	cpsid	i
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	b662      	cpsie	i
 800d174:	627b      	str	r3, [r7, #36]	; 0x24
 800d176:	e7fe      	b.n	800d176 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d103      	bne.n	800d186 <xQueueGenericSendFromISR+0x3e>
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <xQueueGenericSendFromISR+0x42>
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <xQueueGenericSendFromISR+0x44>
 800d18a:	2300      	movs	r3, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10b      	bne.n	800d1a8 <xQueueGenericSendFromISR+0x60>
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	b672      	cpsid	i
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	b662      	cpsie	i
 800d1a4:	623b      	str	r3, [r7, #32]
 800d1a6:	e7fe      	b.n	800d1a6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d103      	bne.n	800d1b6 <xQueueGenericSendFromISR+0x6e>
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d101      	bne.n	800d1ba <xQueueGenericSendFromISR+0x72>
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e000      	b.n	800d1bc <xQueueGenericSendFromISR+0x74>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10b      	bne.n	800d1d8 <xQueueGenericSendFromISR+0x90>
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	b672      	cpsid	i
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	b662      	cpsie	i
 800d1d4:	61fb      	str	r3, [r7, #28]
 800d1d6:	e7fe      	b.n	800d1d6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1d8:	f7ff fdae 	bl	800cd38 <vPortValidateInterruptPriority>
	__asm volatile
 800d1dc:	f3ef 8211 	mrs	r2, BASEPRI
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	b672      	cpsid	i
 800d1e6:	f383 8811 	msr	BASEPRI, r3
 800d1ea:	f3bf 8f6f 	isb	sy
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	b662      	cpsie	i
 800d1f4:	61ba      	str	r2, [r7, #24]
 800d1f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d204:	429a      	cmp	r2, r3
 800d206:	d302      	bcc.n	800d20e <xQueueGenericSendFromISR+0xc6>
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d12c      	bne.n	800d268 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	68b9      	ldr	r1, [r7, #8]
 800d21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d21e:	f000 fa7b 	bl	800d718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d222:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d22a:	d112      	bne.n	800d252 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d230:	2b00      	cmp	r3, #0
 800d232:	d016      	beq.n	800d262 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	3324      	adds	r3, #36	; 0x24
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 ff69 	bl	800e110 <xTaskRemoveFromEventList>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00e      	beq.n	800d262 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00b      	beq.n	800d262 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	e007      	b.n	800d262 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d252:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d256:	3301      	adds	r3, #1
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	b25a      	sxtb	r2, r3
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d262:	2301      	movs	r3, #1
 800d264:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d266:	e001      	b.n	800d26c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d268:	2300      	movs	r3, #0
 800d26a:	637b      	str	r3, [r7, #52]	; 0x34
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3738      	adds	r7, #56	; 0x38
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08e      	sub	sp, #56	; 0x38
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10b      	bne.n	800d2ac <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d298:	b672      	cpsid	i
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	b662      	cpsie	i
 800d2a8:	623b      	str	r3, [r7, #32]
 800d2aa:	e7fe      	b.n	800d2aa <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00b      	beq.n	800d2cc <xQueueGiveFromISR+0x4c>
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	b672      	cpsid	i
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	b662      	cpsie	i
 800d2c8:	61fb      	str	r3, [r7, #28]
 800d2ca:	e7fe      	b.n	800d2ca <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d103      	bne.n	800d2dc <xQueueGiveFromISR+0x5c>
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <xQueueGiveFromISR+0x60>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <xQueueGiveFromISR+0x62>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10b      	bne.n	800d2fe <xQueueGiveFromISR+0x7e>
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	b672      	cpsid	i
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	b662      	cpsie	i
 800d2fa:	61bb      	str	r3, [r7, #24]
 800d2fc:	e7fe      	b.n	800d2fc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2fe:	f7ff fd1b 	bl	800cd38 <vPortValidateInterruptPriority>
	__asm volatile
 800d302:	f3ef 8211 	mrs	r2, BASEPRI
 800d306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30a:	b672      	cpsid	i
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	b662      	cpsie	i
 800d31a:	617a      	str	r2, [r7, #20]
 800d31c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d31e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d320:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d326:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	429a      	cmp	r2, r3
 800d330:	d92b      	bls.n	800d38a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	1c5a      	adds	r2, r3, #1
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34c:	d112      	bne.n	800d374 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d352:	2b00      	cmp	r3, #0
 800d354:	d016      	beq.n	800d384 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	3324      	adds	r3, #36	; 0x24
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 fed8 	bl	800e110 <xTaskRemoveFromEventList>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00e      	beq.n	800d384 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00b      	beq.n	800d384 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	2201      	movs	r2, #1
 800d370:	601a      	str	r2, [r3, #0]
 800d372:	e007      	b.n	800d384 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d378:	3301      	adds	r3, #1
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	b25a      	sxtb	r2, r3
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d384:	2301      	movs	r3, #1
 800d386:	637b      	str	r3, [r7, #52]	; 0x34
 800d388:	e001      	b.n	800d38e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	637b      	str	r3, [r7, #52]	; 0x34
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3738      	adds	r7, #56	; 0x38
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
	...

0800d3a4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08e      	sub	sp, #56	; 0x38
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10b      	bne.n	800d3d8 <xQueueGenericReceive+0x34>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	b672      	cpsid	i
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	b662      	cpsie	i
 800d3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d6:	e7fe      	b.n	800d3d6 <xQueueGenericReceive+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d103      	bne.n	800d3e6 <xQueueGenericReceive+0x42>
 800d3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d101      	bne.n	800d3ea <xQueueGenericReceive+0x46>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e000      	b.n	800d3ec <xQueueGenericReceive+0x48>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10b      	bne.n	800d408 <xQueueGenericReceive+0x64>
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	b672      	cpsid	i
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	b662      	cpsie	i
 800d404:	623b      	str	r3, [r7, #32]
 800d406:	e7fe      	b.n	800d406 <xQueueGenericReceive+0x62>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d408:	f001 f84a 	bl	800e4a0 <xTaskGetSchedulerState>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d102      	bne.n	800d418 <xQueueGenericReceive+0x74>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <xQueueGenericReceive+0x78>
 800d418:	2301      	movs	r3, #1
 800d41a:	e000      	b.n	800d41e <xQueueGenericReceive+0x7a>
 800d41c:	2300      	movs	r3, #0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10b      	bne.n	800d43a <xQueueGenericReceive+0x96>
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	b672      	cpsid	i
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	b662      	cpsie	i
 800d436:	61fb      	str	r3, [r7, #28]
 800d438:	e7fe      	b.n	800d438 <xQueueGenericReceive+0x94>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d43a:	f7ff fba5 	bl	800cb88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d046      	beq.n	800d4d8 <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d450:	68b9      	ldr	r1, [r7, #8]
 800d452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d454:	f000 f9ca 	bl	800d7ec <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d121      	bne.n	800d4a2 <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	1e5a      	subs	r2, r3, #1
 800d462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d464:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d104      	bne.n	800d478 <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d46e:	f001 f933 	bl	800e6d8 <pvTaskIncrementMutexHeldCount>
 800d472:	4602      	mov	r2, r0
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d027      	beq.n	800d4d0 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	3310      	adds	r3, #16
 800d484:	4618      	mov	r0, r3
 800d486:	f000 fe43 	bl	800e110 <xTaskRemoveFromEventList>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01f      	beq.n	800d4d0 <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800d490:	4b4f      	ldr	r3, [pc, #316]	; (800d5d0 <xQueueGenericReceive+0x22c>)
 800d492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	e016      	b.n	800d4d0 <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00f      	beq.n	800d4d0 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	3324      	adds	r3, #36	; 0x24
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 fe2b 	bl	800e110 <xTaskRemoveFromEventList>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d007      	beq.n	800d4d0 <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800d4c0:	4b43      	ldr	r3, [pc, #268]	; (800d5d0 <xQueueGenericReceive+0x22c>)
 800d4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c6:	601a      	str	r2, [r3, #0]
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800d4d0:	f7ff fb8c 	bl	800cbec <vPortExitCritical>
				return pdPASS;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e077      	b.n	800d5c8 <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d103      	bne.n	800d4e6 <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4de:	f7ff fb85 	bl	800cbec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e070      	b.n	800d5c8 <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d106      	bne.n	800d4fa <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800d4ec:	f107 0314 	add.w	r3, r7, #20
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f000 fe71 	bl	800e1d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4fa:	f7ff fb77 	bl	800cbec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4fe:	f000 fc13 	bl	800dd28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d502:	f7ff fb41 	bl	800cb88 <vPortEnterCritical>
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d50c:	b25b      	sxtb	r3, r3
 800d50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d512:	d103      	bne.n	800d51c <xQueueGenericReceive+0x178>
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	2200      	movs	r2, #0
 800d518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d522:	b25b      	sxtb	r3, r3
 800d524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d528:	d103      	bne.n	800d532 <xQueueGenericReceive+0x18e>
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d532:	f7ff fb5b 	bl	800cbec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d536:	1d3a      	adds	r2, r7, #4
 800d538:	f107 0314 	add.w	r3, r7, #20
 800d53c:	4611      	mov	r1, r2
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 fe70 	bl	800e224 <xTaskCheckForTimeOut>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d131      	bne.n	800d5ae <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d54a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d54c:	f000 f9c6 	bl	800d8dc <prvIsQueueEmpty>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d025      	beq.n	800d5a2 <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d108      	bne.n	800d570 <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 800d55e:	f7ff fb13 	bl	800cb88 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 ffb8 	bl	800e4dc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800d56c:	f7ff fb3e 	bl	800cbec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d572:	3324      	adds	r3, #36	; 0x24
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	4611      	mov	r1, r2
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 fda3 	bl	800e0c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d57e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d580:	f000 f95a 	bl	800d838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d584:	f000 fbde 	bl	800dd44 <xTaskResumeAll>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f47f af55 	bne.w	800d43a <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 800d590:	4b0f      	ldr	r3, [pc, #60]	; (800d5d0 <xQueueGenericReceive+0x22c>)
 800d592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	e74b      	b.n	800d43a <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d5a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5a4:	f000 f948 	bl	800d838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5a8:	f000 fbcc 	bl	800dd44 <xTaskResumeAll>
 800d5ac:	e745      	b.n	800d43a <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800d5ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5b0:	f000 f942 	bl	800d838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5b4:	f000 fbc6 	bl	800dd44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ba:	f000 f98f 	bl	800d8dc <prvIsQueueEmpty>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f43f af3a 	beq.w	800d43a <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3738      	adds	r7, #56	; 0x38
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	e000ed04 	.word	0xe000ed04

0800d5d4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b08e      	sub	sp, #56	; 0x38
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10b      	bne.n	800d602 <xQueueReceiveFromISR+0x2e>
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	b672      	cpsid	i
 800d5f0:	f383 8811 	msr	BASEPRI, r3
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	b662      	cpsie	i
 800d5fe:	623b      	str	r3, [r7, #32]
 800d600:	e7fe      	b.n	800d600 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d103      	bne.n	800d610 <xQueueReceiveFromISR+0x3c>
 800d608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <xQueueReceiveFromISR+0x40>
 800d610:	2301      	movs	r3, #1
 800d612:	e000      	b.n	800d616 <xQueueReceiveFromISR+0x42>
 800d614:	2300      	movs	r3, #0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10b      	bne.n	800d632 <xQueueReceiveFromISR+0x5e>
 800d61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61e:	b672      	cpsid	i
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	b662      	cpsie	i
 800d62e:	61fb      	str	r3, [r7, #28]
 800d630:	e7fe      	b.n	800d630 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d632:	f7ff fb81 	bl	800cd38 <vPortValidateInterruptPriority>
	__asm volatile
 800d636:	f3ef 8211 	mrs	r2, BASEPRI
 800d63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63e:	b672      	cpsid	i
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	b662      	cpsie	i
 800d64e:	61ba      	str	r2, [r7, #24]
 800d650:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d652:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d654:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d02f      	beq.n	800d6c2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d66c:	68b9      	ldr	r1, [r7, #8]
 800d66e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d670:	f000 f8bc 	bl	800d7ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	1e5a      	subs	r2, r3, #1
 800d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d67c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d684:	d112      	bne.n	800d6ac <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d016      	beq.n	800d6bc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d690:	3310      	adds	r3, #16
 800d692:	4618      	mov	r0, r3
 800d694:	f000 fd3c 	bl	800e110 <xTaskRemoveFromEventList>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00e      	beq.n	800d6bc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	e007      	b.n	800d6bc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	b25a      	sxtb	r2, r3
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	637b      	str	r3, [r7, #52]	; 0x34
 800d6c0:	e001      	b.n	800d6c6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3738      	adds	r7, #56	; 0x38
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b084      	sub	sp, #16
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10b      	bne.n	800d704 <vQueueDelete+0x2a>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	b672      	cpsid	i
 800d6f2:	f383 8811 	msr	BASEPRI, r3
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	b662      	cpsie	i
 800d700:	60bb      	str	r3, [r7, #8]
 800d702:	e7fe      	b.n	800d702 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 f917 	bl	800d938 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f7fe ff8e 	bl	800c62c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d710:	bf00      	nop
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d724:	2300      	movs	r3, #0
 800d726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10d      	bne.n	800d752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d14d      	bne.n	800d7da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	4618      	mov	r0, r3
 800d744:	f000 ff40 	bl	800e5c8 <xTaskPriorityDisinherit>
 800d748:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	605a      	str	r2, [r3, #4]
 800d750:	e043      	b.n	800d7da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d119      	bne.n	800d78c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6898      	ldr	r0, [r3, #8]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d760:	461a      	mov	r2, r3
 800d762:	68b9      	ldr	r1, [r7, #8]
 800d764:	f007 faf0 	bl	8014d48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	689a      	ldr	r2, [r3, #8]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d770:	441a      	add	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	689a      	ldr	r2, [r3, #8]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d32b      	bcc.n	800d7da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	609a      	str	r2, [r3, #8]
 800d78a:	e026      	b.n	800d7da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	68d8      	ldr	r0, [r3, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d794:	461a      	mov	r2, r3
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	f007 fad6 	bl	8014d48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	68da      	ldr	r2, [r3, #12]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a4:	425b      	negs	r3, r3
 800d7a6:	441a      	add	r2, r3
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	68da      	ldr	r2, [r3, #12]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d207      	bcs.n	800d7c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	685a      	ldr	r2, [r3, #4]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c0:	425b      	negs	r3, r3
 800d7c2:	441a      	add	r2, r3
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d105      	bne.n	800d7da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d002      	beq.n	800d7da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d7e2:	697b      	ldr	r3, [r7, #20]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d018      	beq.n	800d830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68da      	ldr	r2, [r3, #12]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d806:	441a      	add	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	68da      	ldr	r2, [r3, #12]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	429a      	cmp	r2, r3
 800d816:	d303      	bcc.n	800d820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68d9      	ldr	r1, [r3, #12]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d828:	461a      	mov	r2, r3
 800d82a:	6838      	ldr	r0, [r7, #0]
 800d82c:	f007 fa8c 	bl	8014d48 <memcpy>
	}
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d840:	f7ff f9a2 	bl	800cb88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d84a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d84c:	e011      	b.n	800d872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d852:	2b00      	cmp	r3, #0
 800d854:	d012      	beq.n	800d87c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	3324      	adds	r3, #36	; 0x24
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 fc58 	bl	800e110 <xTaskRemoveFromEventList>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d866:	f000 fd3f 	bl	800e2e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d876:	2b00      	cmp	r3, #0
 800d878:	dce9      	bgt.n	800d84e <prvUnlockQueue+0x16>
 800d87a:	e000      	b.n	800d87e <prvUnlockQueue+0x46>
					break;
 800d87c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	22ff      	movs	r2, #255	; 0xff
 800d882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d886:	f7ff f9b1 	bl	800cbec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d88a:	f7ff f97d 	bl	800cb88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d896:	e011      	b.n	800d8bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d012      	beq.n	800d8c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3310      	adds	r3, #16
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 fc33 	bl	800e110 <xTaskRemoveFromEventList>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d8b0:	f000 fd1a 	bl	800e2e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8b4:	7bbb      	ldrb	r3, [r7, #14]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	dce9      	bgt.n	800d898 <prvUnlockQueue+0x60>
 800d8c4:	e000      	b.n	800d8c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	22ff      	movs	r2, #255	; 0xff
 800d8cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d8d0:	f7ff f98c 	bl	800cbec <vPortExitCritical>
}
 800d8d4:	bf00      	nop
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8e4:	f7ff f950 	bl	800cb88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d102      	bne.n	800d8f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	60fb      	str	r3, [r7, #12]
 800d8f4:	e001      	b.n	800d8fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8fa:	f7ff f977 	bl	800cbec <vPortExitCritical>

	return xReturn;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d910:	f7ff f93a 	bl	800cb88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d102      	bne.n	800d926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d920:	2301      	movs	r3, #1
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	e001      	b.n	800d92a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d926:	2300      	movs	r3, #0
 800d928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d92a:	f7ff f95f 	bl	800cbec <vPortExitCritical>

	return xReturn;
 800d92e:	68fb      	ldr	r3, [r7, #12]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	e016      	b.n	800d974 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d946:	4a10      	ldr	r2, [pc, #64]	; (800d988 <vQueueUnregisterQueue+0x50>)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	4413      	add	r3, r2
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	429a      	cmp	r2, r3
 800d954:	d10b      	bne.n	800d96e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d956:	4a0c      	ldr	r2, [pc, #48]	; (800d988 <vQueueUnregisterQueue+0x50>)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2100      	movs	r1, #0
 800d95c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d960:	4a09      	ldr	r2, [pc, #36]	; (800d988 <vQueueUnregisterQueue+0x50>)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	00db      	lsls	r3, r3, #3
 800d966:	4413      	add	r3, r2
 800d968:	2200      	movs	r2, #0
 800d96a:	605a      	str	r2, [r3, #4]
				break;
 800d96c:	e005      	b.n	800d97a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3301      	adds	r3, #1
 800d972:	60fb      	str	r3, [r7, #12]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b07      	cmp	r3, #7
 800d978:	d9e5      	bls.n	800d946 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d97a:	bf00      	nop
 800d97c:	3714      	adds	r7, #20
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	2000f594 	.word	0x2000f594

0800d98c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08c      	sub	sp, #48	; 0x30
 800d990:	af04      	add	r7, sp, #16
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	603b      	str	r3, [r7, #0]
 800d998:	4613      	mov	r3, r2
 800d99a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d99c:	88fb      	ldrh	r3, [r7, #6]
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe fd7b 	bl	800c49c <pvPortMalloc>
 800d9a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00e      	beq.n	800d9cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d9ae:	20b4      	movs	r0, #180	; 0xb4
 800d9b0:	f7fe fd74 	bl	800c49c <pvPortMalloc>
 800d9b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d003      	beq.n	800d9c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	631a      	str	r2, [r3, #48]	; 0x30
 800d9c2:	e005      	b.n	800d9d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9c4:	6978      	ldr	r0, [r7, #20]
 800d9c6:	f7fe fe31 	bl	800c62c <vPortFree>
 800d9ca:	e001      	b.n	800d9d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d013      	beq.n	800d9fe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d9d6:	88fa      	ldrh	r2, [r7, #6]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	9303      	str	r3, [sp, #12]
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	9302      	str	r3, [sp, #8]
 800d9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e2:	9301      	str	r3, [sp, #4]
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	68b9      	ldr	r1, [r7, #8]
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f000 f80f 	bl	800da10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9f2:	69f8      	ldr	r0, [r7, #28]
 800d9f4:	f000 f8a4 	bl	800db40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	61bb      	str	r3, [r7, #24]
 800d9fc:	e002      	b.n	800da04 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800da02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da04:	69bb      	ldr	r3, [r7, #24]
	}
 800da06:	4618      	mov	r0, r3
 800da08:	3720      	adds	r7, #32
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
	...

0800da10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b088      	sub	sp, #32
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
 800da1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800da1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da22:	6879      	ldr	r1, [r7, #4]
 800da24:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800da28:	440b      	add	r3, r1
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4413      	add	r3, r2
 800da2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	f023 0307 	bic.w	r3, r3, #7
 800da36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	f003 0307 	and.w	r3, r3, #7
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00b      	beq.n	800da5a <prvInitialiseNewTask+0x4a>
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	b672      	cpsid	i
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	b662      	cpsie	i
 800da56:	617b      	str	r3, [r7, #20]
 800da58:	e7fe      	b.n	800da58 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da5a:	2300      	movs	r3, #0
 800da5c:	61fb      	str	r3, [r7, #28]
 800da5e:	e012      	b.n	800da86 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	4413      	add	r3, r2
 800da66:	7819      	ldrb	r1, [r3, #0]
 800da68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	4413      	add	r3, r2
 800da6e:	3334      	adds	r3, #52	; 0x34
 800da70:	460a      	mov	r2, r1
 800da72:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	4413      	add	r3, r2
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d006      	beq.n	800da8e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	3301      	adds	r3, #1
 800da84:	61fb      	str	r3, [r7, #28]
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	2b0f      	cmp	r3, #15
 800da8a:	d9e9      	bls.n	800da60 <prvInitialiseNewTask+0x50>
 800da8c:	e000      	b.n	800da90 <prvInitialiseNewTask+0x80>
		{
			break;
 800da8e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da92:	2200      	movs	r2, #0
 800da94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	2b06      	cmp	r3, #6
 800da9c:	d901      	bls.n	800daa2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da9e:	2306      	movs	r3, #6
 800daa0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daa6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	2200      	movs	r2, #0
 800dab2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab6:	3304      	adds	r3, #4
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fe feef 	bl	800c89c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	3318      	adds	r3, #24
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe feea 	bl	800c89c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dacc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad0:	f1c3 0207 	rsb	r2, r3, #7
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dadc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	2200      	movs	r2, #0
 800dae2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf0:	334c      	adds	r3, #76	; 0x4c
 800daf2:	2260      	movs	r2, #96	; 0x60
 800daf4:	2100      	movs	r1, #0
 800daf6:	4618      	mov	r0, r3
 800daf8:	f007 f931 	bl	8014d5e <memset>
 800dafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafe:	4a0d      	ldr	r2, [pc, #52]	; (800db34 <prvInitialiseNewTask+0x124>)
 800db00:	651a      	str	r2, [r3, #80]	; 0x50
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	4a0c      	ldr	r2, [pc, #48]	; (800db38 <prvInitialiseNewTask+0x128>)
 800db06:	655a      	str	r2, [r3, #84]	; 0x54
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	4a0c      	ldr	r2, [pc, #48]	; (800db3c <prvInitialiseNewTask+0x12c>)
 800db0c:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	68f9      	ldr	r1, [r7, #12]
 800db12:	69b8      	ldr	r0, [r7, #24]
 800db14:	f7fe ff56 	bl	800c9c4 <pxPortInitialiseStack>
 800db18:	4602      	mov	r2, r0
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800db1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db2a:	bf00      	nop
 800db2c:	3720      	adds	r7, #32
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	08018dc8 	.word	0x08018dc8
 800db38:	08018de8 	.word	0x08018de8
 800db3c:	08018da8 	.word	0x08018da8

0800db40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db48:	f7ff f81e 	bl	800cb88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db4c:	4b2a      	ldr	r3, [pc, #168]	; (800dbf8 <prvAddNewTaskToReadyList+0xb8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3301      	adds	r3, #1
 800db52:	4a29      	ldr	r2, [pc, #164]	; (800dbf8 <prvAddNewTaskToReadyList+0xb8>)
 800db54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db56:	4b29      	ldr	r3, [pc, #164]	; (800dbfc <prvAddNewTaskToReadyList+0xbc>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d109      	bne.n	800db72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db5e:	4a27      	ldr	r2, [pc, #156]	; (800dbfc <prvAddNewTaskToReadyList+0xbc>)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db64:	4b24      	ldr	r3, [pc, #144]	; (800dbf8 <prvAddNewTaskToReadyList+0xb8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d110      	bne.n	800db8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db6c:	f000 fbe0 	bl	800e330 <prvInitialiseTaskLists>
 800db70:	e00d      	b.n	800db8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db72:	4b23      	ldr	r3, [pc, #140]	; (800dc00 <prvAddNewTaskToReadyList+0xc0>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d109      	bne.n	800db8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db7a:	4b20      	ldr	r3, [pc, #128]	; (800dbfc <prvAddNewTaskToReadyList+0xbc>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db84:	429a      	cmp	r2, r3
 800db86:	d802      	bhi.n	800db8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db88:	4a1c      	ldr	r2, [pc, #112]	; (800dbfc <prvAddNewTaskToReadyList+0xbc>)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db8e:	4b1d      	ldr	r3, [pc, #116]	; (800dc04 <prvAddNewTaskToReadyList+0xc4>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3301      	adds	r3, #1
 800db94:	4a1b      	ldr	r2, [pc, #108]	; (800dc04 <prvAddNewTaskToReadyList+0xc4>)
 800db96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9c:	2201      	movs	r2, #1
 800db9e:	409a      	lsls	r2, r3
 800dba0:	4b19      	ldr	r3, [pc, #100]	; (800dc08 <prvAddNewTaskToReadyList+0xc8>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4313      	orrs	r3, r2
 800dba6:	4a18      	ldr	r2, [pc, #96]	; (800dc08 <prvAddNewTaskToReadyList+0xc8>)
 800dba8:	6013      	str	r3, [r2, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbae:	4613      	mov	r3, r2
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	4413      	add	r3, r2
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	4a15      	ldr	r2, [pc, #84]	; (800dc0c <prvAddNewTaskToReadyList+0xcc>)
 800dbb8:	441a      	add	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	f7fe fe78 	bl	800c8b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dbc6:	f7ff f811 	bl	800cbec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dbca:	4b0d      	ldr	r3, [pc, #52]	; (800dc00 <prvAddNewTaskToReadyList+0xc0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00e      	beq.n	800dbf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dbd2:	4b0a      	ldr	r3, [pc, #40]	; (800dbfc <prvAddNewTaskToReadyList+0xbc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d207      	bcs.n	800dbf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dbe0:	4b0b      	ldr	r3, [pc, #44]	; (800dc10 <prvAddNewTaskToReadyList+0xd0>)
 800dbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	2000f464 	.word	0x2000f464
 800dbfc:	2000f364 	.word	0x2000f364
 800dc00:	2000f470 	.word	0x2000f470
 800dc04:	2000f480 	.word	0x2000f480
 800dc08:	2000f46c 	.word	0x2000f46c
 800dc0c:	2000f368 	.word	0x2000f368
 800dc10:	e000ed04 	.word	0xe000ed04

0800dc14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d018      	beq.n	800dc58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <vTaskDelay+0x64>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00b      	beq.n	800dc46 <vTaskDelay+0x32>
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	b672      	cpsid	i
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	b662      	cpsie	i
 800dc42:	60bb      	str	r3, [r7, #8]
 800dc44:	e7fe      	b.n	800dc44 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800dc46:	f000 f86f 	bl	800dd28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fd57 	bl	800e700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc52:	f000 f877 	bl	800dd44 <xTaskResumeAll>
 800dc56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d107      	bne.n	800dc6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dc5e:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <vTaskDelay+0x68>)
 800dc60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc6e:	bf00      	nop
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	2000f48c 	.word	0x2000f48c
 800dc7c:	e000ed04 	.word	0xe000ed04

0800dc80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800dc86:	4b20      	ldr	r3, [pc, #128]	; (800dd08 <vTaskStartScheduler+0x88>)
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dc94:	491d      	ldr	r1, [pc, #116]	; (800dd0c <vTaskStartScheduler+0x8c>)
 800dc96:	481e      	ldr	r0, [pc, #120]	; (800dd10 <vTaskStartScheduler+0x90>)
 800dc98:	f7ff fe78 	bl	800d98c <xTaskCreate>
 800dc9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d11c      	bne.n	800dcde <vTaskStartScheduler+0x5e>
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	b672      	cpsid	i
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	b662      	cpsie	i
 800dcb8:	60bb      	str	r3, [r7, #8]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dcba:	4b16      	ldr	r3, [pc, #88]	; (800dd14 <vTaskStartScheduler+0x94>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	334c      	adds	r3, #76	; 0x4c
 800dcc0:	4a15      	ldr	r2, [pc, #84]	; (800dd18 <vTaskStartScheduler+0x98>)
 800dcc2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dcc4:	4b15      	ldr	r3, [pc, #84]	; (800dd1c <vTaskStartScheduler+0x9c>)
 800dcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dccc:	4b14      	ldr	r3, [pc, #80]	; (800dd20 <vTaskStartScheduler+0xa0>)
 800dcce:	2201      	movs	r2, #1
 800dcd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800dcd2:	4b14      	ldr	r3, [pc, #80]	; (800dd24 <vTaskStartScheduler+0xa4>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dcd8:	f7fe feee 	bl	800cab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dcdc:	e00f      	b.n	800dcfe <vTaskStartScheduler+0x7e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce4:	d10b      	bne.n	800dcfe <vTaskStartScheduler+0x7e>
 800dce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcea:	b672      	cpsid	i
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	b662      	cpsie	i
 800dcfa:	607b      	str	r3, [r7, #4]
 800dcfc:	e7fe      	b.n	800dcfc <vTaskStartScheduler+0x7c>
}
 800dcfe:	bf00      	nop
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	2000f488 	.word	0x2000f488
 800dd0c:	08015d68 	.word	0x08015d68
 800dd10:	0800e301 	.word	0x0800e301
 800dd14:	2000f364 	.word	0x2000f364
 800dd18:	20000040 	.word	0x20000040
 800dd1c:	2000f484 	.word	0x2000f484
 800dd20:	2000f470 	.word	0x2000f470
 800dd24:	2000f468 	.word	0x2000f468

0800dd28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd28:	b480      	push	{r7}
 800dd2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dd2c:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <vTaskSuspendAll+0x18>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3301      	adds	r3, #1
 800dd32:	4a03      	ldr	r2, [pc, #12]	; (800dd40 <vTaskSuspendAll+0x18>)
 800dd34:	6013      	str	r3, [r2, #0]
}
 800dd36:	bf00      	nop
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	2000f48c 	.word	0x2000f48c

0800dd44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd52:	4b42      	ldr	r3, [pc, #264]	; (800de5c <xTaskResumeAll+0x118>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10b      	bne.n	800dd72 <xTaskResumeAll+0x2e>
 800dd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5e:	b672      	cpsid	i
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	b662      	cpsie	i
 800dd6e:	603b      	str	r3, [r7, #0]
 800dd70:	e7fe      	b.n	800dd70 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd72:	f7fe ff09 	bl	800cb88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd76:	4b39      	ldr	r3, [pc, #228]	; (800de5c <xTaskResumeAll+0x118>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	4a37      	ldr	r2, [pc, #220]	; (800de5c <xTaskResumeAll+0x118>)
 800dd7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd80:	4b36      	ldr	r3, [pc, #216]	; (800de5c <xTaskResumeAll+0x118>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d161      	bne.n	800de4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd88:	4b35      	ldr	r3, [pc, #212]	; (800de60 <xTaskResumeAll+0x11c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d05d      	beq.n	800de4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd90:	e02e      	b.n	800ddf0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dd92:	4b34      	ldr	r3, [pc, #208]	; (800de64 <xTaskResumeAll+0x120>)
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3318      	adds	r3, #24
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fe fde6 	bl	800c970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3304      	adds	r3, #4
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fe fde1 	bl	800c970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	409a      	lsls	r2, r3
 800ddb6:	4b2c      	ldr	r3, [pc, #176]	; (800de68 <xTaskResumeAll+0x124>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	4a2a      	ldr	r2, [pc, #168]	; (800de68 <xTaskResumeAll+0x124>)
 800ddbe:	6013      	str	r3, [r2, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4413      	add	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4a27      	ldr	r2, [pc, #156]	; (800de6c <xTaskResumeAll+0x128>)
 800ddce:	441a      	add	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	f7fe fd6d 	bl	800c8b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde0:	4b23      	ldr	r3, [pc, #140]	; (800de70 <xTaskResumeAll+0x12c>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d302      	bcc.n	800ddf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ddea:	4b22      	ldr	r3, [pc, #136]	; (800de74 <xTaskResumeAll+0x130>)
 800ddec:	2201      	movs	r2, #1
 800ddee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddf0:	4b1c      	ldr	r3, [pc, #112]	; (800de64 <xTaskResumeAll+0x120>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d1cc      	bne.n	800dd92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddfe:	f000 fb29 	bl	800e454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800de02:	4b1d      	ldr	r3, [pc, #116]	; (800de78 <xTaskResumeAll+0x134>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d010      	beq.n	800de30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de0e:	f000 f837 	bl	800de80 <xTaskIncrementTick>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de18:	4b16      	ldr	r3, [pc, #88]	; (800de74 <xTaskResumeAll+0x130>)
 800de1a:	2201      	movs	r2, #1
 800de1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3b01      	subs	r3, #1
 800de22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1f1      	bne.n	800de0e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800de2a:	4b13      	ldr	r3, [pc, #76]	; (800de78 <xTaskResumeAll+0x134>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de30:	4b10      	ldr	r3, [pc, #64]	; (800de74 <xTaskResumeAll+0x130>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d009      	beq.n	800de4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de38:	2301      	movs	r3, #1
 800de3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de3c:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <xTaskResumeAll+0x138>)
 800de3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de4c:	f7fe fece 	bl	800cbec <vPortExitCritical>

	return xAlreadyYielded;
 800de50:	68bb      	ldr	r3, [r7, #8]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	2000f48c 	.word	0x2000f48c
 800de60:	2000f464 	.word	0x2000f464
 800de64:	2000f424 	.word	0x2000f424
 800de68:	2000f46c 	.word	0x2000f46c
 800de6c:	2000f368 	.word	0x2000f368
 800de70:	2000f364 	.word	0x2000f364
 800de74:	2000f478 	.word	0x2000f478
 800de78:	2000f474 	.word	0x2000f474
 800de7c:	e000ed04 	.word	0xe000ed04

0800de80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de86:	2300      	movs	r3, #0
 800de88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de8a:	4b51      	ldr	r3, [pc, #324]	; (800dfd0 <xTaskIncrementTick+0x150>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f040 808e 	bne.w	800dfb0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800de94:	4b4f      	ldr	r3, [pc, #316]	; (800dfd4 <xTaskIncrementTick+0x154>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	3301      	adds	r3, #1
 800de9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de9c:	4a4d      	ldr	r2, [pc, #308]	; (800dfd4 <xTaskIncrementTick+0x154>)
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d121      	bne.n	800deec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dea8:	4b4b      	ldr	r3, [pc, #300]	; (800dfd8 <xTaskIncrementTick+0x158>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00b      	beq.n	800deca <xTaskIncrementTick+0x4a>
 800deb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb6:	b672      	cpsid	i
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	b662      	cpsie	i
 800dec6:	603b      	str	r3, [r7, #0]
 800dec8:	e7fe      	b.n	800dec8 <xTaskIncrementTick+0x48>
 800deca:	4b43      	ldr	r3, [pc, #268]	; (800dfd8 <xTaskIncrementTick+0x158>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	4b42      	ldr	r3, [pc, #264]	; (800dfdc <xTaskIncrementTick+0x15c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a40      	ldr	r2, [pc, #256]	; (800dfd8 <xTaskIncrementTick+0x158>)
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	4a40      	ldr	r2, [pc, #256]	; (800dfdc <xTaskIncrementTick+0x15c>)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6013      	str	r3, [r2, #0]
 800dede:	4b40      	ldr	r3, [pc, #256]	; (800dfe0 <xTaskIncrementTick+0x160>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3301      	adds	r3, #1
 800dee4:	4a3e      	ldr	r2, [pc, #248]	; (800dfe0 <xTaskIncrementTick+0x160>)
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	f000 fab4 	bl	800e454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800deec:	4b3d      	ldr	r3, [pc, #244]	; (800dfe4 <xTaskIncrementTick+0x164>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	429a      	cmp	r2, r3
 800def4:	d34d      	bcc.n	800df92 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800def6:	4b38      	ldr	r3, [pc, #224]	; (800dfd8 <xTaskIncrementTick+0x158>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d101      	bne.n	800df04 <xTaskIncrementTick+0x84>
 800df00:	2301      	movs	r3, #1
 800df02:	e000      	b.n	800df06 <xTaskIncrementTick+0x86>
 800df04:	2300      	movs	r3, #0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d004      	beq.n	800df14 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df0a:	4b36      	ldr	r3, [pc, #216]	; (800dfe4 <xTaskIncrementTick+0x164>)
 800df0c:	f04f 32ff 	mov.w	r2, #4294967295
 800df10:	601a      	str	r2, [r3, #0]
					break;
 800df12:	e03e      	b.n	800df92 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800df14:	4b30      	ldr	r3, [pc, #192]	; (800dfd8 <xTaskIncrementTick+0x158>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df24:	693a      	ldr	r2, [r7, #16]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d203      	bcs.n	800df34 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df2c:	4a2d      	ldr	r2, [pc, #180]	; (800dfe4 <xTaskIncrementTick+0x164>)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6013      	str	r3, [r2, #0]
						break;
 800df32:	e02e      	b.n	800df92 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	3304      	adds	r3, #4
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fe fd19 	bl	800c970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df42:	2b00      	cmp	r3, #0
 800df44:	d004      	beq.n	800df50 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	3318      	adds	r3, #24
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fe fd10 	bl	800c970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df54:	2201      	movs	r2, #1
 800df56:	409a      	lsls	r2, r3
 800df58:	4b23      	ldr	r3, [pc, #140]	; (800dfe8 <xTaskIncrementTick+0x168>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	4a22      	ldr	r2, [pc, #136]	; (800dfe8 <xTaskIncrementTick+0x168>)
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df66:	4613      	mov	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	4a1f      	ldr	r2, [pc, #124]	; (800dfec <xTaskIncrementTick+0x16c>)
 800df70:	441a      	add	r2, r3
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	3304      	adds	r3, #4
 800df76:	4619      	mov	r1, r3
 800df78:	4610      	mov	r0, r2
 800df7a:	f7fe fc9c 	bl	800c8b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df82:	4b1b      	ldr	r3, [pc, #108]	; (800dff0 <xTaskIncrementTick+0x170>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df88:	429a      	cmp	r2, r3
 800df8a:	d3b4      	bcc.n	800def6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800df8c:	2301      	movs	r3, #1
 800df8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df90:	e7b1      	b.n	800def6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df92:	4b17      	ldr	r3, [pc, #92]	; (800dff0 <xTaskIncrementTick+0x170>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df98:	4914      	ldr	r1, [pc, #80]	; (800dfec <xTaskIncrementTick+0x16c>)
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	440b      	add	r3, r1
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d907      	bls.n	800dfba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	617b      	str	r3, [r7, #20]
 800dfae:	e004      	b.n	800dfba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dfb0:	4b10      	ldr	r3, [pc, #64]	; (800dff4 <xTaskIncrementTick+0x174>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	4a0f      	ldr	r2, [pc, #60]	; (800dff4 <xTaskIncrementTick+0x174>)
 800dfb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dfba:	4b0f      	ldr	r3, [pc, #60]	; (800dff8 <xTaskIncrementTick+0x178>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dfc6:	697b      	ldr	r3, [r7, #20]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	2000f48c 	.word	0x2000f48c
 800dfd4:	2000f468 	.word	0x2000f468
 800dfd8:	2000f41c 	.word	0x2000f41c
 800dfdc:	2000f420 	.word	0x2000f420
 800dfe0:	2000f47c 	.word	0x2000f47c
 800dfe4:	2000f484 	.word	0x2000f484
 800dfe8:	2000f46c 	.word	0x2000f46c
 800dfec:	2000f368 	.word	0x2000f368
 800dff0:	2000f364 	.word	0x2000f364
 800dff4:	2000f474 	.word	0x2000f474
 800dff8:	2000f478 	.word	0x2000f478

0800dffc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dffc:	b480      	push	{r7}
 800dffe:	b087      	sub	sp, #28
 800e000:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e002:	4b2a      	ldr	r3, [pc, #168]	; (800e0ac <vTaskSwitchContext+0xb0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d003      	beq.n	800e012 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e00a:	4b29      	ldr	r3, [pc, #164]	; (800e0b0 <vTaskSwitchContext+0xb4>)
 800e00c:	2201      	movs	r2, #1
 800e00e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e010:	e045      	b.n	800e09e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800e012:	4b27      	ldr	r3, [pc, #156]	; (800e0b0 <vTaskSwitchContext+0xb4>)
 800e014:	2200      	movs	r2, #0
 800e016:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e018:	4b26      	ldr	r3, [pc, #152]	; (800e0b4 <vTaskSwitchContext+0xb8>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	fab3 f383 	clz	r3, r3
 800e024:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e026:	7afb      	ldrb	r3, [r7, #11]
 800e028:	f1c3 031f 	rsb	r3, r3, #31
 800e02c:	617b      	str	r3, [r7, #20]
 800e02e:	4922      	ldr	r1, [pc, #136]	; (800e0b8 <vTaskSwitchContext+0xbc>)
 800e030:	697a      	ldr	r2, [r7, #20]
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	440b      	add	r3, r1
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10b      	bne.n	800e05a <vTaskSwitchContext+0x5e>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	b672      	cpsid	i
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	b662      	cpsie	i
 800e056:	607b      	str	r3, [r7, #4]
 800e058:	e7fe      	b.n	800e058 <vTaskSwitchContext+0x5c>
 800e05a:	697a      	ldr	r2, [r7, #20]
 800e05c:	4613      	mov	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4a14      	ldr	r2, [pc, #80]	; (800e0b8 <vTaskSwitchContext+0xbc>)
 800e066:	4413      	add	r3, r2
 800e068:	613b      	str	r3, [r7, #16]
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	685a      	ldr	r2, [r3, #4]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	605a      	str	r2, [r3, #4]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	685a      	ldr	r2, [r3, #4]
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	3308      	adds	r3, #8
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d104      	bne.n	800e08a <vTaskSwitchContext+0x8e>
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	605a      	str	r2, [r3, #4]
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	4a0a      	ldr	r2, [pc, #40]	; (800e0bc <vTaskSwitchContext+0xc0>)
 800e092:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e094:	4b09      	ldr	r3, [pc, #36]	; (800e0bc <vTaskSwitchContext+0xc0>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	334c      	adds	r3, #76	; 0x4c
 800e09a:	4a09      	ldr	r2, [pc, #36]	; (800e0c0 <vTaskSwitchContext+0xc4>)
 800e09c:	6013      	str	r3, [r2, #0]
}
 800e09e:	bf00      	nop
 800e0a0:	371c      	adds	r7, #28
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	2000f48c 	.word	0x2000f48c
 800e0b0:	2000f478 	.word	0x2000f478
 800e0b4:	2000f46c 	.word	0x2000f46c
 800e0b8:	2000f368 	.word	0x2000f368
 800e0bc:	2000f364 	.word	0x2000f364
 800e0c0:	20000040 	.word	0x20000040

0800e0c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10b      	bne.n	800e0ec <vTaskPlaceOnEventList+0x28>
 800e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d8:	b672      	cpsid	i
 800e0da:	f383 8811 	msr	BASEPRI, r3
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	f3bf 8f4f 	dsb	sy
 800e0e6:	b662      	cpsie	i
 800e0e8:	60fb      	str	r3, [r7, #12]
 800e0ea:	e7fe      	b.n	800e0ea <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0ec:	4b07      	ldr	r3, [pc, #28]	; (800e10c <vTaskPlaceOnEventList+0x48>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	3318      	adds	r3, #24
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7fe fc02 	bl	800c8fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	6838      	ldr	r0, [r7, #0]
 800e0fe:	f000 faff 	bl	800e700 <prvAddCurrentTaskToDelayedList>
}
 800e102:	bf00      	nop
 800e104:	3710      	adds	r7, #16
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}
 800e10a:	bf00      	nop
 800e10c:	2000f364 	.word	0x2000f364

0800e110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10b      	bne.n	800e13e <xTaskRemoveFromEventList+0x2e>
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	b672      	cpsid	i
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	b662      	cpsie	i
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	e7fe      	b.n	800e13c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	3318      	adds	r3, #24
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fc14 	bl	800c970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e148:	4b1d      	ldr	r3, [pc, #116]	; (800e1c0 <xTaskRemoveFromEventList+0xb0>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d11c      	bne.n	800e18a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	3304      	adds	r3, #4
 800e154:	4618      	mov	r0, r3
 800e156:	f7fe fc0b 	bl	800c970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15e:	2201      	movs	r2, #1
 800e160:	409a      	lsls	r2, r3
 800e162:	4b18      	ldr	r3, [pc, #96]	; (800e1c4 <xTaskRemoveFromEventList+0xb4>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4313      	orrs	r3, r2
 800e168:	4a16      	ldr	r2, [pc, #88]	; (800e1c4 <xTaskRemoveFromEventList+0xb4>)
 800e16a:	6013      	str	r3, [r2, #0]
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e170:	4613      	mov	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4a13      	ldr	r2, [pc, #76]	; (800e1c8 <xTaskRemoveFromEventList+0xb8>)
 800e17a:	441a      	add	r2, r3
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	3304      	adds	r3, #4
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f7fe fb97 	bl	800c8b6 <vListInsertEnd>
 800e188:	e005      	b.n	800e196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	3318      	adds	r3, #24
 800e18e:	4619      	mov	r1, r3
 800e190:	480e      	ldr	r0, [pc, #56]	; (800e1cc <xTaskRemoveFromEventList+0xbc>)
 800e192:	f7fe fb90 	bl	800c8b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19a:	4b0d      	ldr	r3, [pc, #52]	; (800e1d0 <xTaskRemoveFromEventList+0xc0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d905      	bls.n	800e1b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1a8:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <xTaskRemoveFromEventList+0xc4>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	e001      	b.n	800e1b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800e1b4:	697b      	ldr	r3, [r7, #20]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3718      	adds	r7, #24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	2000f48c 	.word	0x2000f48c
 800e1c4:	2000f46c 	.word	0x2000f46c
 800e1c8:	2000f368 	.word	0x2000f368
 800e1cc:	2000f424 	.word	0x2000f424
 800e1d0:	2000f364 	.word	0x2000f364
 800e1d4:	2000f478 	.word	0x2000f478

0800e1d8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10b      	bne.n	800e1fe <vTaskSetTimeOutState+0x26>
 800e1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ea:	b672      	cpsid	i
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	b662      	cpsie	i
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	e7fe      	b.n	800e1fc <vTaskSetTimeOutState+0x24>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1fe:	4b07      	ldr	r3, [pc, #28]	; (800e21c <vTaskSetTimeOutState+0x44>)
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e206:	4b06      	ldr	r3, [pc, #24]	; (800e220 <vTaskSetTimeOutState+0x48>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	605a      	str	r2, [r3, #4]
}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	2000f47c 	.word	0x2000f47c
 800e220:	2000f468 	.word	0x2000f468

0800e224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10b      	bne.n	800e24c <xTaskCheckForTimeOut+0x28>
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	b672      	cpsid	i
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	b662      	cpsie	i
 800e248:	60fb      	str	r3, [r7, #12]
 800e24a:	e7fe      	b.n	800e24a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10b      	bne.n	800e26a <xTaskCheckForTimeOut+0x46>
 800e252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e256:	b672      	cpsid	i
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	b662      	cpsie	i
 800e266:	60bb      	str	r3, [r7, #8]
 800e268:	e7fe      	b.n	800e268 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e26a:	f7fe fc8d 	bl	800cb88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e26e:	4b1c      	ldr	r3, [pc, #112]	; (800e2e0 <xTaskCheckForTimeOut+0xbc>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27c:	d102      	bne.n	800e284 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e27e:	2300      	movs	r3, #0
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	e026      	b.n	800e2d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	4b16      	ldr	r3, [pc, #88]	; (800e2e4 <xTaskCheckForTimeOut+0xc0>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d007      	beq.n	800e2a0 <xTaskCheckForTimeOut+0x7c>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	685a      	ldr	r2, [r3, #4]
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	429a      	cmp	r2, r3
 800e298:	d802      	bhi.n	800e2a0 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e29a:	2301      	movs	r3, #1
 800e29c:	617b      	str	r3, [r7, #20]
 800e29e:	e018      	b.n	800e2d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	1ad2      	subs	r2, r2, r3
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d20e      	bcs.n	800e2ce <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6859      	ldr	r1, [r3, #4]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	1acb      	subs	r3, r1, r3
 800e2bc:	441a      	add	r2, r3
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7ff ff88 	bl	800e1d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	617b      	str	r3, [r7, #20]
 800e2cc:	e001      	b.n	800e2d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800e2d2:	f7fe fc8b 	bl	800cbec <vPortExitCritical>

	return xReturn;
 800e2d6:	697b      	ldr	r3, [r7, #20]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3718      	adds	r7, #24
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	2000f468 	.word	0x2000f468
 800e2e4:	2000f47c 	.word	0x2000f47c

0800e2e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2ec:	4b03      	ldr	r3, [pc, #12]	; (800e2fc <vTaskMissedYield+0x14>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]
}
 800e2f2:	bf00      	nop
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	2000f478 	.word	0x2000f478

0800e300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e308:	f000 f852 	bl	800e3b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e30c:	4b06      	ldr	r3, [pc, #24]	; (800e328 <prvIdleTask+0x28>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d9f9      	bls.n	800e308 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e314:	4b05      	ldr	r3, [pc, #20]	; (800e32c <prvIdleTask+0x2c>)
 800e316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e31a:	601a      	str	r2, [r3, #0]
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e324:	e7f0      	b.n	800e308 <prvIdleTask+0x8>
 800e326:	bf00      	nop
 800e328:	2000f368 	.word	0x2000f368
 800e32c:	e000ed04 	.word	0xe000ed04

0800e330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e336:	2300      	movs	r3, #0
 800e338:	607b      	str	r3, [r7, #4]
 800e33a:	e00c      	b.n	800e356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	4613      	mov	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4a12      	ldr	r2, [pc, #72]	; (800e390 <prvInitialiseTaskLists+0x60>)
 800e348:	4413      	add	r3, r2
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fa86 	bl	800c85c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3301      	adds	r3, #1
 800e354:	607b      	str	r3, [r7, #4]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b06      	cmp	r3, #6
 800e35a:	d9ef      	bls.n	800e33c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e35c:	480d      	ldr	r0, [pc, #52]	; (800e394 <prvInitialiseTaskLists+0x64>)
 800e35e:	f7fe fa7d 	bl	800c85c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e362:	480d      	ldr	r0, [pc, #52]	; (800e398 <prvInitialiseTaskLists+0x68>)
 800e364:	f7fe fa7a 	bl	800c85c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e368:	480c      	ldr	r0, [pc, #48]	; (800e39c <prvInitialiseTaskLists+0x6c>)
 800e36a:	f7fe fa77 	bl	800c85c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e36e:	480c      	ldr	r0, [pc, #48]	; (800e3a0 <prvInitialiseTaskLists+0x70>)
 800e370:	f7fe fa74 	bl	800c85c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e374:	480b      	ldr	r0, [pc, #44]	; (800e3a4 <prvInitialiseTaskLists+0x74>)
 800e376:	f7fe fa71 	bl	800c85c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e37a:	4b0b      	ldr	r3, [pc, #44]	; (800e3a8 <prvInitialiseTaskLists+0x78>)
 800e37c:	4a05      	ldr	r2, [pc, #20]	; (800e394 <prvInitialiseTaskLists+0x64>)
 800e37e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e380:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <prvInitialiseTaskLists+0x7c>)
 800e382:	4a05      	ldr	r2, [pc, #20]	; (800e398 <prvInitialiseTaskLists+0x68>)
 800e384:	601a      	str	r2, [r3, #0]
}
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	2000f368 	.word	0x2000f368
 800e394:	2000f3f4 	.word	0x2000f3f4
 800e398:	2000f408 	.word	0x2000f408
 800e39c:	2000f424 	.word	0x2000f424
 800e3a0:	2000f438 	.word	0x2000f438
 800e3a4:	2000f450 	.word	0x2000f450
 800e3a8:	2000f41c 	.word	0x2000f41c
 800e3ac:	2000f420 	.word	0x2000f420

0800e3b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3b6:	e028      	b.n	800e40a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800e3b8:	f7ff fcb6 	bl	800dd28 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e3bc:	4b17      	ldr	r3, [pc, #92]	; (800e41c <prvCheckTasksWaitingTermination+0x6c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	bf0c      	ite	eq
 800e3c4:	2301      	moveq	r3, #1
 800e3c6:	2300      	movne	r3, #0
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800e3cc:	f7ff fcba 	bl	800dd44 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d119      	bne.n	800e40a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800e3d6:	f7fe fbd7 	bl	800cb88 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e3da:	4b10      	ldr	r3, [pc, #64]	; (800e41c <prvCheckTasksWaitingTermination+0x6c>)
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fe fac2 	bl	800c970 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e3ec:	4b0c      	ldr	r3, [pc, #48]	; (800e420 <prvCheckTasksWaitingTermination+0x70>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	4a0b      	ldr	r2, [pc, #44]	; (800e420 <prvCheckTasksWaitingTermination+0x70>)
 800e3f4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800e3f6:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <prvCheckTasksWaitingTermination+0x74>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	4a09      	ldr	r2, [pc, #36]	; (800e424 <prvCheckTasksWaitingTermination+0x74>)
 800e3fe:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800e400:	f7fe fbf4 	bl	800cbec <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800e404:	6838      	ldr	r0, [r7, #0]
 800e406:	f000 f80f 	bl	800e428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e40a:	4b06      	ldr	r3, [pc, #24]	; (800e424 <prvCheckTasksWaitingTermination+0x74>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1d2      	bne.n	800e3b8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e412:	bf00      	nop
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	2000f438 	.word	0x2000f438
 800e420:	2000f464 	.word	0x2000f464
 800e424:	2000f44c 	.word	0x2000f44c

0800e428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	334c      	adds	r3, #76	; 0x4c
 800e434:	4618      	mov	r0, r3
 800e436:	f006 fdd1 	bl	8014fdc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe f8f4 	bl	800c62c <vPortFree>
			vPortFree( pxTCB );
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7fe f8f1 	bl	800c62c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e44a:	bf00      	nop
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e45a:	4b0f      	ldr	r3, [pc, #60]	; (800e498 <prvResetNextTaskUnblockTime+0x44>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d101      	bne.n	800e468 <prvResetNextTaskUnblockTime+0x14>
 800e464:	2301      	movs	r3, #1
 800e466:	e000      	b.n	800e46a <prvResetNextTaskUnblockTime+0x16>
 800e468:	2300      	movs	r3, #0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d004      	beq.n	800e478 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e46e:	4b0b      	ldr	r3, [pc, #44]	; (800e49c <prvResetNextTaskUnblockTime+0x48>)
 800e470:	f04f 32ff 	mov.w	r2, #4294967295
 800e474:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e476:	e008      	b.n	800e48a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e478:	4b07      	ldr	r3, [pc, #28]	; (800e498 <prvResetNextTaskUnblockTime+0x44>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	4a05      	ldr	r2, [pc, #20]	; (800e49c <prvResetNextTaskUnblockTime+0x48>)
 800e488:	6013      	str	r3, [r2, #0]
}
 800e48a:	bf00      	nop
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	2000f41c 	.word	0x2000f41c
 800e49c:	2000f484 	.word	0x2000f484

0800e4a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e4a6:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <xTaskGetSchedulerState+0x34>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d102      	bne.n	800e4b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	607b      	str	r3, [r7, #4]
 800e4b2:	e008      	b.n	800e4c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4b4:	4b08      	ldr	r3, [pc, #32]	; (800e4d8 <xTaskGetSchedulerState+0x38>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d102      	bne.n	800e4c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e4bc:	2302      	movs	r3, #2
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	e001      	b.n	800e4c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e4c6:	687b      	ldr	r3, [r7, #4]
	}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	2000f470 	.word	0x2000f470
 800e4d8:	2000f48c 	.word	0x2000f48c

0800e4dc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d062      	beq.n	800e5b4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f2:	4b32      	ldr	r3, [pc, #200]	; (800e5bc <vTaskPriorityInherit+0xe0>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d25b      	bcs.n	800e5b4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	699b      	ldr	r3, [r3, #24]
 800e500:	2b00      	cmp	r3, #0
 800e502:	db06      	blt.n	800e512 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e504:	4b2d      	ldr	r3, [pc, #180]	; (800e5bc <vTaskPriorityInherit+0xe0>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50a:	f1c3 0207 	rsb	r2, r3, #7
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6959      	ldr	r1, [r3, #20]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51a:	4613      	mov	r3, r2
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	4413      	add	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4a27      	ldr	r2, [pc, #156]	; (800e5c0 <vTaskPriorityInherit+0xe4>)
 800e524:	4413      	add	r3, r2
 800e526:	4299      	cmp	r1, r3
 800e528:	d101      	bne.n	800e52e <vTaskPriorityInherit+0x52>
 800e52a:	2301      	movs	r3, #1
 800e52c:	e000      	b.n	800e530 <vTaskPriorityInherit+0x54>
 800e52e:	2300      	movs	r3, #0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d03a      	beq.n	800e5aa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3304      	adds	r3, #4
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fe fa19 	bl	800c970 <uxListRemove>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d115      	bne.n	800e570 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e548:	491d      	ldr	r1, [pc, #116]	; (800e5c0 <vTaskPriorityInherit+0xe4>)
 800e54a:	4613      	mov	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	440b      	add	r3, r1
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10a      	bne.n	800e570 <vTaskPriorityInherit+0x94>
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e55e:	2201      	movs	r2, #1
 800e560:	fa02 f303 	lsl.w	r3, r2, r3
 800e564:	43da      	mvns	r2, r3
 800e566:	4b17      	ldr	r3, [pc, #92]	; (800e5c4 <vTaskPriorityInherit+0xe8>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4013      	ands	r3, r2
 800e56c:	4a15      	ldr	r2, [pc, #84]	; (800e5c4 <vTaskPriorityInherit+0xe8>)
 800e56e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e570:	4b12      	ldr	r3, [pc, #72]	; (800e5bc <vTaskPriorityInherit+0xe0>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57e:	2201      	movs	r2, #1
 800e580:	409a      	lsls	r2, r3
 800e582:	4b10      	ldr	r3, [pc, #64]	; (800e5c4 <vTaskPriorityInherit+0xe8>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4313      	orrs	r3, r2
 800e588:	4a0e      	ldr	r2, [pc, #56]	; (800e5c4 <vTaskPriorityInherit+0xe8>)
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e590:	4613      	mov	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4a09      	ldr	r2, [pc, #36]	; (800e5c0 <vTaskPriorityInherit+0xe4>)
 800e59a:	441a      	add	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3304      	adds	r3, #4
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f7fe f987 	bl	800c8b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e5a8:	e004      	b.n	800e5b4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5aa:	4b04      	ldr	r3, [pc, #16]	; (800e5bc <vTaskPriorityInherit+0xe0>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800e5b4:	bf00      	nop
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	2000f364 	.word	0x2000f364
 800e5c0:	2000f368 	.word	0x2000f368
 800e5c4:	2000f46c 	.word	0x2000f46c

0800e5c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d070      	beq.n	800e6c0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5de:	4b3b      	ldr	r3, [pc, #236]	; (800e6cc <xTaskPriorityDisinherit+0x104>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d00b      	beq.n	800e600 <xTaskPriorityDisinherit+0x38>
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	b672      	cpsid	i
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	b662      	cpsie	i
 800e5fc:	60fb      	str	r3, [r7, #12]
 800e5fe:	e7fe      	b.n	800e5fe <xTaskPriorityDisinherit+0x36>

			configASSERT( pxTCB->uxMutexesHeld );
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10b      	bne.n	800e620 <xTaskPriorityDisinherit+0x58>
 800e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60c:	b672      	cpsid	i
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	b662      	cpsie	i
 800e61c:	60bb      	str	r3, [r7, #8]
 800e61e:	e7fe      	b.n	800e61e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e624:	1e5a      	subs	r2, r3, #1
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e632:	429a      	cmp	r2, r3
 800e634:	d044      	beq.n	800e6c0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d140      	bne.n	800e6c0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	3304      	adds	r3, #4
 800e642:	4618      	mov	r0, r3
 800e644:	f7fe f994 	bl	800c970 <uxListRemove>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d115      	bne.n	800e67a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	491f      	ldr	r1, [pc, #124]	; (800e6d0 <xTaskPriorityDisinherit+0x108>)
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	440b      	add	r3, r1
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10a      	bne.n	800e67a <xTaskPriorityDisinherit+0xb2>
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	2201      	movs	r2, #1
 800e66a:	fa02 f303 	lsl.w	r3, r2, r3
 800e66e:	43da      	mvns	r2, r3
 800e670:	4b18      	ldr	r3, [pc, #96]	; (800e6d4 <xTaskPriorityDisinherit+0x10c>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4013      	ands	r3, r2
 800e676:	4a17      	ldr	r2, [pc, #92]	; (800e6d4 <xTaskPriorityDisinherit+0x10c>)
 800e678:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e686:	f1c3 0207 	rsb	r2, r3, #7
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e692:	2201      	movs	r2, #1
 800e694:	409a      	lsls	r2, r3
 800e696:	4b0f      	ldr	r3, [pc, #60]	; (800e6d4 <xTaskPriorityDisinherit+0x10c>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	4a0d      	ldr	r2, [pc, #52]	; (800e6d4 <xTaskPriorityDisinherit+0x10c>)
 800e69e:	6013      	str	r3, [r2, #0]
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4413      	add	r3, r2
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	4a08      	ldr	r2, [pc, #32]	; (800e6d0 <xTaskPriorityDisinherit+0x108>)
 800e6ae:	441a      	add	r2, r3
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	f7fe f8fd 	bl	800c8b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6c0:	697b      	ldr	r3, [r7, #20]
	}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3718      	adds	r7, #24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	2000f364 	.word	0x2000f364
 800e6d0:	2000f368 	.word	0x2000f368
 800e6d4:	2000f46c 	.word	0x2000f46c

0800e6d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e6d8:	b480      	push	{r7}
 800e6da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6dc:	4b07      	ldr	r3, [pc, #28]	; (800e6fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d004      	beq.n	800e6ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6e4:	4b05      	ldr	r3, [pc, #20]	; (800e6fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6ea:	3201      	adds	r2, #1
 800e6ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e6ee:	4b03      	ldr	r3, [pc, #12]	; (800e6fc <pvTaskIncrementMutexHeldCount+0x24>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
	}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	2000f364 	.word	0x2000f364

0800e700 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e70a:	4b29      	ldr	r3, [pc, #164]	; (800e7b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e710:	4b28      	ldr	r3, [pc, #160]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	3304      	adds	r3, #4
 800e716:	4618      	mov	r0, r3
 800e718:	f7fe f92a 	bl	800c970 <uxListRemove>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10b      	bne.n	800e73a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e722:	4b24      	ldr	r3, [pc, #144]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e728:	2201      	movs	r2, #1
 800e72a:	fa02 f303 	lsl.w	r3, r2, r3
 800e72e:	43da      	mvns	r2, r3
 800e730:	4b21      	ldr	r3, [pc, #132]	; (800e7b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4013      	ands	r3, r2
 800e736:	4a20      	ldr	r2, [pc, #128]	; (800e7b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e738:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e740:	d10a      	bne.n	800e758 <prvAddCurrentTaskToDelayedList+0x58>
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d007      	beq.n	800e758 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e748:	4b1a      	ldr	r3, [pc, #104]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3304      	adds	r3, #4
 800e74e:	4619      	mov	r1, r3
 800e750:	481a      	ldr	r0, [pc, #104]	; (800e7bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800e752:	f7fe f8b0 	bl	800c8b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e756:	e026      	b.n	800e7a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4413      	add	r3, r2
 800e75e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e760:	4b14      	ldr	r3, [pc, #80]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	68ba      	ldr	r2, [r7, #8]
 800e766:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d209      	bcs.n	800e784 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e770:	4b13      	ldr	r3, [pc, #76]	; (800e7c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	4b0f      	ldr	r3, [pc, #60]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	3304      	adds	r3, #4
 800e77a:	4619      	mov	r1, r3
 800e77c:	4610      	mov	r0, r2
 800e77e:	f7fe f8be 	bl	800c8fe <vListInsert>
}
 800e782:	e010      	b.n	800e7a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e784:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	4b0a      	ldr	r3, [pc, #40]	; (800e7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3304      	adds	r3, #4
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f7fe f8b4 	bl	800c8fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e796:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d202      	bcs.n	800e7a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e7a0:	4a09      	ldr	r2, [pc, #36]	; (800e7c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	6013      	str	r3, [r2, #0]
}
 800e7a6:	bf00      	nop
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	2000f468 	.word	0x2000f468
 800e7b4:	2000f364 	.word	0x2000f364
 800e7b8:	2000f46c 	.word	0x2000f46c
 800e7bc:	2000f450 	.word	0x2000f450
 800e7c0:	2000f420 	.word	0x2000f420
 800e7c4:	2000f41c 	.word	0x2000f41c
 800e7c8:	2000f484 	.word	0x2000f484

0800e7cc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 800e7cc:	b5b0      	push	{r4, r5, r7, lr}
 800e7ce:	b08c      	sub	sp, #48	; 0x30
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d101      	bne.n	800e7e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	e03c      	b.n	800e85e <USBH_Init+0x92>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	79fa      	ldrb	r2, [r7, #7]
 800e7e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
  phost->ClassNumber = 0;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f000 f837 	bl	800e870 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  }
  
#if (USBH_USE_OS == 1) 
  
  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, 10, uint16_t);
 800e810:	4a15      	ldr	r2, [pc, #84]	; (800e868 <USBH_Init+0x9c>)
 800e812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e81a:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
 800e81e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e822:	2100      	movs	r1, #0
 800e824:	4618      	mov	r0, r3
 800e826:	f7fd fd66 	bl	800c2f6 <osMessageCreate>
 800e82a:	4602      	mov	r2, r0
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  
  /*Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 800e832:	4b0e      	ldr	r3, [pc, #56]	; (800e86c <USBH_Init+0xa0>)
 800e834:	f107 0414 	add.w	r4, r7, #20
 800e838:	461d      	mov	r5, r3
 800e83a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e83c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e83e:	682b      	ldr	r3, [r5, #0]
 800e840:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, 8 * configMINIMAL_STACK_SIZE);
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800e842:	f107 0314 	add.w	r3, r7, #20
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fd fc61 	bl	800c110 <osThreadCreate>
 800e84e:	4602      	mov	r2, r0
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f005 feca 	bl	80145f0 <USBH_LL_Init>
  return USBH_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3730      	adds	r7, #48	; 0x30
 800e862:	46bd      	mov	sp, r7
 800e864:	bdb0      	pop	{r4, r5, r7, pc}
 800e866:	bf00      	nop
 800e868:	08015d70 	.word	0x08015d70
 800e86c:	08015d84 	.word	0x08015d84

0800e870 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e870:	b480      	push	{r7}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 800e878:	2300      	movs	r3, #0
 800e87a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800e87c:	e009      	b.n	800e892 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0;
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	33de      	adds	r3, #222	; 0xde
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	2200      	movs	r2, #0
 800e88a:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	3301      	adds	r3, #1
 800e890:	60fb      	str	r3, [r7, #12]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2b0e      	cmp	r3, #14
 800e896:	d9f2      	bls.n	800e87e <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	e009      	b.n	800e8b2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0;
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	60fb      	str	r3, [r7, #12]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8b8:	d3f1      	bcc.n	800e89e <DeInitStateMachine+0x2e>
  }
  
  phost->gState = HOST_IDLE;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  
  phost->Control.state = CTRL_SETUP;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2240      	movs	r2, #64	; 0x40
 800e8de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3714      	adds	r7, #20
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d016      	beq.n	800e946 <USBH_RegisterClass+0x42>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10e      	bne.n	800e940 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e928:	1c59      	adds	r1, r3, #1
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	f8c2 1378 	str.w	r1, [r2, #888]	; 0x378
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	33dc      	adds	r3, #220	; 0xdc
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	73fb      	strb	r3, [r7, #15]
 800e93e:	e004      	b.n	800e94a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 800e940:	2302      	movs	r3, #2
 800e942:	73fb      	strb	r3, [r7, #15]
 800e944:	e001      	b.n	800e94a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 800e946:	2302      	movs	r3, #2
 800e948:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800e94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	460b      	mov	r3, r1
 800e962:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e96e:	78fa      	ldrb	r2, [r7, #3]
 800e970:	429a      	cmp	r2, r3
 800e972:	d204      	bcs.n	800e97e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800e97c:	e001      	b.n	800e982 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 800e97e:	2302      	movs	r3, #2
 800e980:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 800e982:	7bfb      	ldrb	r3, [r7, #15]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e990:	b480      	push	{r7}
 800e992:	b087      	sub	sp, #28
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	4608      	mov	r0, r1
 800e99a:	4611      	mov	r1, r2
 800e99c:	461a      	mov	r2, r3
 800e99e:	4603      	mov	r3, r0
 800e9a0:	70fb      	strb	r3, [r7, #3]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	70bb      	strb	r3, [r7, #2]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f203 3332 	addw	r3, r3, #818	; 0x332
 800e9b8:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e9ba:	e029      	b.n	800ea10 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e9bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9c0:	221a      	movs	r2, #26
 800e9c2:	fb02 f303 	mul.w	r3, r2, r3
 800e9c6:	3308      	adds	r3, #8
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	3302      	adds	r3, #2
 800e9ce:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	795b      	ldrb	r3, [r3, #5]
 800e9d4:	78fa      	ldrb	r2, [r7, #3]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d002      	beq.n	800e9e0 <USBH_FindInterface+0x50>
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	2bff      	cmp	r3, #255	; 0xff
 800e9de:	d111      	bne.n	800ea04 <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800e9e4:	78ba      	ldrb	r2, [r7, #2]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d002      	beq.n	800e9f0 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800e9ea:	78bb      	ldrb	r3, [r7, #2]
 800e9ec:	2bff      	cmp	r3, #255	; 0xff
 800e9ee:	d109      	bne.n	800ea04 <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800e9f4:	787a      	ldrb	r2, [r7, #1]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d002      	beq.n	800ea00 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800e9fa:	787b      	ldrb	r3, [r7, #1]
 800e9fc:	2bff      	cmp	r3, #255	; 0xff
 800e9fe:	d101      	bne.n	800ea04 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800ea00:	7dfb      	ldrb	r3, [r7, #23]
 800ea02:	e00a      	b.n	800ea1a <USBH_FindInterface+0x8a>
    }
    if_ix++;
 800ea04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ea10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	ddd1      	ble.n	800e9bc <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 800ea18:	23ff      	movs	r3, #255	; 0xff
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	371c      	adds	r7, #28
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b082      	sub	sp, #8
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f005 fe26 	bl	8014680 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 800ea34:	2101      	movs	r1, #1
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f005 ffc9 	bl	80149ce <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
	...

0800ea48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af04      	add	r7, sp, #16
 800ea4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ea50:	2302      	movs	r3, #2
 800ea52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b0a      	cmp	r3, #10
 800ea60:	f200 814f 	bhi.w	800ed02 <USBH_Process+0x2ba>
 800ea64:	a201      	add	r2, pc, #4	; (adr r2, 800ea6c <USBH_Process+0x24>)
 800ea66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6a:	bf00      	nop
 800ea6c:	0800ea99 	.word	0x0800ea99
 800ea70:	0800ed03 	.word	0x0800ed03
 800ea74:	0800eacb 	.word	0x0800eacb
 800ea78:	0800ecdd 	.word	0x0800ecdd
 800ea7c:	0800ed03 	.word	0x0800ed03
 800ea80:	0800eb69 	.word	0x0800eb69
 800ea84:	0800ec83 	.word	0x0800ec83
 800ea88:	0800eb99 	.word	0x0800eb99
 800ea8c:	0800ebc9 	.word	0x0800ebc9
 800ea90:	0800ebe9 	.word	0x0800ebe9
 800ea94:	0800ecc5 	.word	0x0800ecc5
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f000 8130 	beq.w	800ed06 <USBH_Process+0x2be>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 800eaac:	20c8      	movs	r0, #200	; 0xc8
 800eaae:	f006 f802 	bl	8014ab6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f005 fe6e 	bl	8014794 <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eabe:	2200      	movs	r2, #0
 800eac0:	2101      	movs	r1, #1
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fd fc2a 	bl	800c31c <osMessagePut>
#endif
    }
    break;
 800eac8:	e11d      	b.n	800ed06 <USBH_Process+0x2be>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 800eaca:	2064      	movs	r0, #100	; 0x64
 800eacc:	f005 fff3 	bl	8014ab6 <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f005 fe39 	bl	8014748 <USBH_LL_GetSpeed>
 800ead6:	4603      	mov	r3, r0
 800ead8:	461a      	mov	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2205      	movs	r2, #5
 800eae4:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 800eae6:	2100      	movs	r1, #0
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f001 f8e8 	bl	800fcbe <USBH_AllocPipe>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 800eaf6:	2180      	movs	r1, #128	; 0x80
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f001 f8e0 	bl	800fcbe <USBH_AllocPipe>
 800eafe:	4603      	mov	r3, r0
 800eb00:	461a      	mov	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	7919      	ldrb	r1, [r3, #4]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800eb1a:	b292      	uxth	r2, r2
 800eb1c:	9202      	str	r2, [sp, #8]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	9201      	str	r2, [sp, #4]
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	4603      	mov	r3, r0
 800eb26:	2280      	movs	r2, #128	; 0x80
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f001 f899 	bl	800fc60 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	7959      	ldrb	r1, [r3, #5]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800eb42:	b292      	uxth	r2, r2
 800eb44:	9202      	str	r2, [sp, #8]
 800eb46:	2200      	movs	r2, #0
 800eb48:	9201      	str	r2, [sp, #4]
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2200      	movs	r2, #0
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f001 f885 	bl	800fc60 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	2101      	movs	r1, #1
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fd fbdb 	bl	800c31c <osMessagePut>
#endif    
    
    break;
 800eb66:	e0db      	b.n	800ed20 <USBH_Process+0x2d8>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 f8df 	bl	800ed2c <USBH_HandleEnum>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f040 80ca 	bne.w	800ed0a <USBH_Process+0x2c2>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d103      	bne.n	800eb90 <USBH_Process+0x148>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2208      	movs	r2, #8
 800eb8c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 800eb8e:	e0bc      	b.n	800ed0a <USBH_Process+0x2c2>
        phost->gState  = HOST_INPUT; 
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2207      	movs	r2, #7
 800eb94:	701a      	strb	r2, [r3, #0]
    break;
 800eb96:	e0b8      	b.n	800ed0a <USBH_Process+0x2c2>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f000 80b5 	beq.w	800ed0e <USBH_Process+0x2c6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ebaa:	2101      	movs	r1, #1
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2208      	movs	r2, #8
 800ebb4:	701a      	strb	r2, [r3, #0]
        
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2105      	movs	r1, #5
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fd fbab 	bl	800c31c <osMessagePut>
#endif         
      }
    }
    break;
 800ebc6:	e0a2      	b.n	800ed0e <USBH_Process+0x2c6>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 fb76 	bl	800f2c4 <USBH_SetCfg>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f040 8099 	bne.w	800ed12 <USBH_Process+0x2ca>
    {
      phost->gState  = HOST_CHECK_CLASS;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2209      	movs	r2, #9
 800ebe4:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 800ebe6:	e094      	b.n	800ed12 <USBH_Process+0x2ca>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d03e      	beq.n	800ec70 <USBH_Process+0x228>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	73fb      	strb	r3, [r7, #15]
 800ebfe:	e015      	b.n	800ec2c <USBH_Process+0x1e4>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ec00:	7bfa      	ldrb	r2, [r7, #15]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	32dc      	adds	r2, #220	; 0xdc
 800ec06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec0a:	791a      	ldrb	r2, [r3, #4]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d107      	bne.n	800ec26 <USBH_Process+0x1de>
        {
          phost->pActiveClass = phost->pClass[idx];
 800ec16:	7bfa      	ldrb	r2, [r7, #15]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	32dc      	adds	r2, #220	; 0xdc
 800ec1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 800ec26:	7bfb      	ldrb	r3, [r7, #15]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	73fb      	strb	r3, [r7, #15]
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d0e6      	beq.n	800ec00 <USBH_Process+0x1b8>
        }
      }
      
      if(phost->pActiveClass != NULL)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d016      	beq.n	800ec6a <USBH_Process+0x222>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	4798      	blx	r3
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d109      	bne.n	800ec62 <USBH_Process+0x21a>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2206      	movs	r2, #6
 800ec52:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ec5a:	2103      	movs	r1, #3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	4798      	blx	r3
 800ec60:	e006      	b.n	800ec70 <USBH_Process+0x228>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	220c      	movs	r2, #12
 800ec66:	701a      	strb	r2, [r3, #0]
 800ec68:	e002      	b.n	800ec70 <USBH_Process+0x228>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	220c      	movs	r2, #12
 800ec6e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec76:	2200      	movs	r2, #0
 800ec78:	2105      	movs	r1, #5
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fd fb4e 	bl	800c31c <osMessagePut>
#endif 
    break;    
 800ec80:	e04e      	b.n	800ed20 <USBH_Process+0x2d8>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00f      	beq.n	800ecac <USBH_Process+0x264>
    {
      status = phost->pActiveClass->Requests(phost);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ec92:	691b      	ldr	r3, [r3, #16]
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	4798      	blx	r3
 800ec98:	4603      	mov	r3, r0
 800ec9a:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 800ec9c:	7bbb      	ldrb	r3, [r7, #14]
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d138      	bne.n	800ed16 <USBH_Process+0x2ce>
      {
        phost->gState  = HOST_CLASS;        
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	220a      	movs	r2, #10
 800eca8:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 800ecaa:	e034      	b.n	800ed16 <USBH_Process+0x2ce>
      phost->gState  = HOST_ABORT_STATE;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	220c      	movs	r2, #12
 800ecb0:	701a      	strb	r2, [r3, #0]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ecb8:	2200      	movs	r2, #0
 800ecba:	2105      	movs	r1, #5
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fd fb2d 	bl	800c31c <osMessagePut>
    break;    
 800ecc2:	e028      	b.n	800ed16 <USBH_Process+0x2ce>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d025      	beq.n	800ed1a <USBH_Process+0x2d2>
    { 
      phost->pActiveClass->BgndProcess(phost);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	4798      	blx	r3
    }
    break;       
 800ecda:	e01e      	b.n	800ed1a <USBH_Process+0x2d2>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff fdc7 	bl	800e870 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d018      	beq.n	800ed1e <USBH_Process+0x2d6>
    {
      phost->pActiveClass->DeInit(phost); 
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
    }     
    break;
 800ed00:	e00d      	b.n	800ed1e <USBH_Process+0x2d6>
    
  case HOST_ABORT_STATE:
  default :
    break;
 800ed02:	bf00      	nop
 800ed04:	e00c      	b.n	800ed20 <USBH_Process+0x2d8>
    break;
 800ed06:	bf00      	nop
 800ed08:	e00a      	b.n	800ed20 <USBH_Process+0x2d8>
    break;
 800ed0a:	bf00      	nop
 800ed0c:	e008      	b.n	800ed20 <USBH_Process+0x2d8>
    break;
 800ed0e:	bf00      	nop
 800ed10:	e006      	b.n	800ed20 <USBH_Process+0x2d8>
    break;
 800ed12:	bf00      	nop
 800ed14:	e004      	b.n	800ed20 <USBH_Process+0x2d8>
    break;    
 800ed16:	bf00      	nop
 800ed18:	e002      	b.n	800ed20 <USBH_Process+0x2d8>
    break;       
 800ed1a:	bf00      	nop
 800ed1c:	e000      	b.n	800ed20 <USBH_Process+0x2d8>
    break;
 800ed1e:	bf00      	nop
  }
 return USBH_OK;  
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop

0800ed2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b088      	sub	sp, #32
 800ed30:	af04      	add	r7, sp, #16
 800ed32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 800ed34:	2301      	movs	r3, #1
 800ed36:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	785b      	ldrb	r3, [r3, #1]
 800ed3c:	2b07      	cmp	r3, #7
 800ed3e:	f200 8119 	bhi.w	800ef74 <USBH_HandleEnum+0x248>
 800ed42:	a201      	add	r2, pc, #4	; (adr r2, 800ed48 <USBH_HandleEnum+0x1c>)
 800ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed48:	0800ed69 	.word	0x0800ed69
 800ed4c:	0800eddb 	.word	0x0800eddb
 800ed50:	0800edf3 	.word	0x0800edf3
 800ed54:	0800ee69 	.word	0x0800ee69
 800ed58:	0800ee81 	.word	0x0800ee81
 800ed5c:	0800ee9d 	.word	0x0800ee9d
 800ed60:	0800eef1 	.word	0x0800eef1
 800ed64:	0800ef35 	.word	0x0800ef35
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 800ed68:	2108      	movs	r1, #8
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 f9da 	bl	800f124 <USBH_Get_DevDesc>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f040 8100 	bne.w	800ef78 <USBH_HandleEnum+0x24c>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2201      	movs	r2, #1
 800ed86:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	7919      	ldrb	r1, [r3, #4]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ed9c:	b292      	uxth	r2, r2
 800ed9e:	9202      	str	r2, [sp, #8]
 800eda0:	2200      	movs	r2, #0
 800eda2:	9201      	str	r2, [sp, #4]
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	4603      	mov	r3, r0
 800eda8:	2280      	movs	r2, #128	; 0x80
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 ff58 	bl	800fc60 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	7959      	ldrb	r1, [r3, #5]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800edc4:	b292      	uxth	r2, r2
 800edc6:	9202      	str	r2, [sp, #8]
 800edc8:	2200      	movs	r2, #0
 800edca:	9201      	str	r2, [sp, #4]
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	4603      	mov	r3, r0
 800edd0:	2200      	movs	r2, #0
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f000 ff44 	bl	800fc60 <USBH_OpenPipe>
      
    }
    break;
 800edd8:	e0ce      	b.n	800ef78 <USBH_HandleEnum+0x24c>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800edda:	2112      	movs	r1, #18
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f9a1 	bl	800f124 <USBH_Get_DevDesc>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f040 80c9 	bne.w	800ef7c <USBH_HandleEnum+0x250>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2202      	movs	r2, #2
 800edee:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 800edf0:	e0c4      	b.n	800ef7c <USBH_HandleEnum+0x250>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800edf2:	2101      	movs	r1, #1
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 fa41 	bl	800f27c <USBH_SetAddress>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f040 80bf 	bne.w	800ef80 <USBH_HandleEnum+0x254>
    {
      USBH_Delay(2);
 800ee02:	2002      	movs	r0, #2
 800ee04:	f005 fe57 	bl	8014ab6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2203      	movs	r2, #3
 800ee14:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	7919      	ldrb	r1, [r3, #4]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ee2a:	b292      	uxth	r2, r2
 800ee2c:	9202      	str	r2, [sp, #8]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	9201      	str	r2, [sp, #4]
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	4603      	mov	r3, r0
 800ee36:	2280      	movs	r2, #128	; 0x80
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 ff11 	bl	800fc60 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	7959      	ldrb	r1, [r3, #5]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ee52:	b292      	uxth	r2, r2
 800ee54:	9202      	str	r2, [sp, #8]
 800ee56:	2200      	movs	r2, #0
 800ee58:	9201      	str	r2, [sp, #4]
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2200      	movs	r2, #0
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 fefd 	bl	800fc60 <USBH_OpenPipe>
    }
    break;
 800ee66:	e08b      	b.n	800ef80 <USBH_HandleEnum+0x254>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 800ee68:	2109      	movs	r1, #9
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f982 	bl	800f174 <USBH_Get_CfgDesc>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f040 8086 	bne.w	800ef84 <USBH_HandleEnum+0x258>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2204      	movs	r2, #4
 800ee7c:	705a      	strb	r2, [r3, #1]
    }
    break;
 800ee7e:	e081      	b.n	800ef84 <USBH_HandleEnum+0x258>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f973 	bl	800f174 <USBH_Get_CfgDesc>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d179      	bne.n	800ef88 <USBH_HandleEnum+0x25c>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2205      	movs	r2, #5
 800ee98:	705a      	strb	r2, [r3, #1]
    }
    break;
 800ee9a:	e075      	b.n	800ef88 <USBH_HandleEnum+0x25c>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d018      	beq.n	800eed8 <USBH_HandleEnum+0x1ac>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800eeb2:	23ff      	movs	r3, #255	; 0xff
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f981 	bl	800f1bc <USBH_Get_StringDesc>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d165      	bne.n	800ef8c <USBH_HandleEnum+0x260>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2206      	movs	r2, #6
 800eec4:	705a      	strb	r2, [r3, #1]
        
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eecc:	2200      	movs	r2, #0
 800eece:	2105      	movs	r1, #5
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fd fa23 	bl	800c31c <osMessagePut>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 800eed6:	e059      	b.n	800ef8c <USBH_HandleEnum+0x260>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2206      	movs	r2, #6
 800eedc:	705a      	strb	r2, [r3, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eee4:	2200      	movs	r2, #0
 800eee6:	2105      	movs	r1, #5
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fd fa17 	bl	800c31c <osMessagePut>
    break;
 800eeee:	e04d      	b.n	800ef8c <USBH_HandleEnum+0x260>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d010      	beq.n	800ef1c <USBH_HandleEnum+0x1f0>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ef06:	23ff      	movs	r3, #255	; 0xff
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 f957 	bl	800f1bc <USBH_Get_StringDesc>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d13d      	bne.n	800ef90 <USBH_HandleEnum+0x264>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2207      	movs	r2, #7
 800ef18:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 800ef1a:	e039      	b.n	800ef90 <USBH_HandleEnum+0x264>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2207      	movs	r2, #7
 800ef20:	705a      	strb	r2, [r3, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef28:	2200      	movs	r2, #0
 800ef2a:	2105      	movs	r1, #5
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fd f9f5 	bl	800c31c <osMessagePut>
    break;
 800ef32:	e02d      	b.n	800ef90 <USBH_HandleEnum+0x264>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00f      	beq.n	800ef5e <USBH_HandleEnum+0x232>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ef4a:	23ff      	movs	r3, #255	; 0xff
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 f935 	bl	800f1bc <USBH_Get_StringDesc>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d11d      	bne.n	800ef94 <USBH_HandleEnum+0x268>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 800ef5c:	e01a      	b.n	800ef94 <USBH_HandleEnum+0x268>
      Status = USBH_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef68:	2200      	movs	r2, #0
 800ef6a:	2105      	movs	r1, #5
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fd f9d5 	bl	800c31c <osMessagePut>
    break;
 800ef72:	e00f      	b.n	800ef94 <USBH_HandleEnum+0x268>
    
  default:
    break;
 800ef74:	bf00      	nop
 800ef76:	e00e      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef78:	bf00      	nop
 800ef7a:	e00c      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef7c:	bf00      	nop
 800ef7e:	e00a      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef80:	bf00      	nop
 800ef82:	e008      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef84:	bf00      	nop
 800ef86:	e006      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef88:	bf00      	nop
 800ef8a:	e004      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef8c:	bf00      	nop
 800ef8e:	e002      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef90:	bf00      	nop
 800ef92:	e000      	b.n	800ef96 <USBH_HandleEnum+0x26a>
    break;
 800ef94:	bf00      	nop
  }  
  return Status;
 800ef96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
}
 800efb2:	bf00      	nop
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b082      	sub	sp, #8
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800efcc:	1c5a      	adds	r2, r3, #1
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  USBH_HandleSof(phost);
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 f804 	bl	800efe2 <USBH_HandleSof>
}
 800efda:	bf00      	nop
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b082      	sub	sp, #8
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	2b0a      	cmp	r3, #10
 800eff2:	d10a      	bne.n	800f00a <USBH_HandleSof+0x28>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800effa:	2b00      	cmp	r3, #0
 800effc:	d005      	beq.n	800f00a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	4798      	blx	r3
  }
}
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b082      	sub	sp, #8
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10f      	bne.n	800f044 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00e      	beq.n	800f054 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f03c:	2104      	movs	r1, #4
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	4798      	blx	r3
 800f042:	e007      	b.n	800f054 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d102      	bne.n	800f054 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2202      	movs	r2, #2
 800f052:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f05a:	2200      	movs	r2, #0
 800f05c:	2101      	movs	r1, #1
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fd f95c 	bl	800c31c <osMessagePut>
#endif 
  
  return USBH_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b082      	sub	sp, #8
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f005 fb34 	bl	80146e4 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	791b      	ldrb	r3, [r3, #4]
 800f080:	4619      	mov	r1, r3
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fe3b 	bl	800fcfe <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	795b      	ldrb	r3, [r3, #5]
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 fe35 	bl	800fcfe <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d005      	beq.n	800f0b2 <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f0ac:	2105      	movs	r1, #5
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f005 fae4 	bl	8014680 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2203      	movs	r2, #3
 800f0bc:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fd f927 	bl	800c31c <osMessagePut>
#endif 
  
  return USBH_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  osEvent event;
  
  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8d3 13c8 	ldr.w	r1, [r3, #968]	; 0x3c8
 800f0e6:	f107 030c 	add.w	r3, r7, #12
 800f0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd f954 	bl	800c39c <osMessageGet>
    
    if( event.status == osEventMessage )
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2b10      	cmp	r3, #16
 800f0f8:	d1f2      	bne.n	800f0e0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7ff fca4 	bl	800ea48 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 800f100:	e7ee      	b.n	800f0e0 <USBH_Process_OS+0x8>

0800f102 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b082      	sub	sp, #8
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f110:	2200      	movs	r2, #0
 800f112:	2102      	movs	r1, #2
 800f114:	4618      	mov	r0, r3
 800f116:	f7fd f901 	bl	800c31c <osMessagePut>
  return USBH_OK;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b086      	sub	sp, #24
 800f128:	af02      	add	r7, sp, #8
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f136:	78fb      	ldrb	r3, [r7, #3]
 800f138:	b29b      	uxth	r3, r3
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	4613      	mov	r3, r2
 800f13e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f142:	2100      	movs	r1, #0
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 f864 	bl	800f212 <USBH_GetDescriptor>
 800f14a:	4603      	mov	r3, r0
 800f14c:	73fb      	strb	r3, [r7, #15]
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10a      	bne.n	800f16a <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f503 7048 	add.w	r0, r3, #800	; 0x320
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f160:	78fa      	ldrb	r2, [r7, #3]
 800f162:	b292      	uxth	r2, r2
 800f164:	4619      	mov	r1, r3
 800f166:	f000 f8f4 	bl	800f352 <USBH_ParseDevDesc>
  }
  return status;      
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af02      	add	r7, sp, #8
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	460b      	mov	r3, r1
 800f17e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	331c      	adds	r3, #28
 800f184:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 800f186:	887b      	ldrh	r3, [r7, #2]
 800f188:	9300      	str	r3, [sp, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f190:	2100      	movs	r1, #0
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 f83d 	bl	800f212 <USBH_GetDescriptor>
 800f198:	4603      	mov	r3, r0
 800f19a:	72fb      	strb	r3, [r7, #11]
 800f19c:	7afb      	ldrb	r3, [r7, #11]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d107      	bne.n	800f1b2 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f203 3332 	addw	r3, r3, #818	; 0x332
 800f1a8:	887a      	ldrh	r2, [r7, #2]
 800f1aa:	68f9      	ldr	r1, [r7, #12]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f000 f940 	bl	800f432 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 800f1b2:	7afb      	ldrb	r3, [r7, #11]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b088      	sub	sp, #32
 800f1c0:	af02      	add	r7, sp, #8
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	607a      	str	r2, [r7, #4]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	72fb      	strb	r3, [r7, #11]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800f1d0:	7afb      	ldrb	r3, [r7, #11]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f1d8:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f1e0:	893b      	ldrh	r3, [r7, #8]
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f000 f812 	bl	800f212 <USBH_GetDescriptor>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75fb      	strb	r3, [r7, #23]
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d107      	bne.n	800f208 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f1fe:	893a      	ldrh	r2, [r7, #8]
 800f200:	6879      	ldr	r1, [r7, #4]
 800f202:	4618      	mov	r0, r3
 800f204:	f000 fa17 	bl	800f636 <USBH_ParseStringDesc>
  }
  return status;
 800f208:	7dfb      	ldrb	r3, [r7, #23]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3718      	adds	r7, #24
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	607b      	str	r3, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	72fb      	strb	r3, [r7, #11]
 800f220:	4613      	mov	r3, r2
 800f222:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	789b      	ldrb	r3, [r3, #2]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d11c      	bne.n	800f266 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f22c:	7afb      	ldrb	r3, [r7, #11]
 800f22e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f232:	b2da      	uxtb	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2206      	movs	r2, #6
 800f23c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	893a      	ldrh	r2, [r7, #8]
 800f242:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 800f244:	893b      	ldrh	r3, [r7, #8]
 800f246:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f24e:	d104      	bne.n	800f25a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f240 4209 	movw	r2, #1033	; 0x409
 800f256:	829a      	strh	r2, [r3, #20]
 800f258:	e002      	b.n	800f260 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2200      	movs	r2, #0
 800f25e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	8b3a      	ldrh	r2, [r7, #24]
 800f264:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 800f266:	8b3b      	ldrh	r3, [r7, #24]
 800f268:	461a      	mov	r2, r3
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f000 fa30 	bl	800f6d2 <USBH_CtlReq>
 800f272:	4603      	mov	r3, r0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3710      	adds	r7, #16
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	789b      	ldrb	r3, [r3, #2]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d10f      	bne.n	800f2b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2205      	movs	r2, #5
 800f29a:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f29c:	78fb      	ldrb	r3, [r7, #3]
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fa0c 	bl	800f6d2 <USBH_CtlReq>
 800f2ba:	4603      	mov	r3, r0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	789b      	ldrb	r3, [r3, #2]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d10e      	bne.n	800f2f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2209      	movs	r2, #9
 800f2e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	887a      	ldrh	r2, [r7, #2]
 800f2e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 f9e9 	bl	800f6d2 <USBH_CtlReq>
 800f300:	4603      	mov	r3, r0
}
 800f302:	4618      	mov	r0, r3
 800f304:	3708      	adds	r7, #8
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}

0800f30a <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b082      	sub	sp, #8
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
 800f312:	460b      	mov	r3, r1
 800f314:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	789b      	ldrb	r3, [r3, #2]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d10f      	bne.n	800f33e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2202      	movs	r2, #2
 800f322:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2200      	movs	r2, #0
 800f32e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f330:	78fb      	ldrb	r3, [r7, #3]
 800f332:	b29a      	uxth	r2, r3
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 800f33e:	2200      	movs	r2, #0
 800f340:	2100      	movs	r1, #0
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f9c5 	bl	800f6d2 <USBH_CtlReq>
 800f348:	4603      	mov	r3, r0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3708      	adds	r7, #8
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 800f352:	b480      	push	{r7}
 800f354:	b085      	sub	sp, #20
 800f356:	af00      	add	r7, sp, #0
 800f358:	60f8      	str	r0, [r7, #12]
 800f35a:	60b9      	str	r1, [r7, #8]
 800f35c:	4613      	mov	r3, r2
 800f35e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	781a      	ldrb	r2, [r3, #0]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	785a      	ldrb	r2, [r3, #1]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	3302      	adds	r3, #2
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	b29a      	uxth	r2, r3
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	3303      	adds	r3, #3
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	021b      	lsls	r3, r3, #8
 800f382:	b29b      	uxth	r3, r3
 800f384:	4413      	add	r3, r2
 800f386:	b29a      	uxth	r2, r3
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	791a      	ldrb	r2, [r3, #4]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	795a      	ldrb	r2, [r3, #5]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	799a      	ldrb	r2, [r3, #6]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	79da      	ldrb	r2, [r3, #7]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800f3ac:	88fb      	ldrh	r3, [r7, #6]
 800f3ae:	2b08      	cmp	r3, #8
 800f3b0:	d939      	bls.n	800f426 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	3308      	adds	r3, #8
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	3309      	adds	r3, #9
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	021b      	lsls	r3, r3, #8
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	4413      	add	r3, r2
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	330a      	adds	r3, #10
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	330b      	adds	r3, #11
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	021b      	lsls	r3, r3, #8
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	4413      	add	r3, r2
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	330c      	adds	r3, #12
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	b29a      	uxth	r2, r3
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	330d      	adds	r3, #13
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	021b      	lsls	r3, r3, #8
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	4413      	add	r3, r2
 800f400:	b29a      	uxth	r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	7b9a      	ldrb	r2, [r3, #14]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	7bda      	ldrb	r2, [r3, #15]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	7c1a      	ldrb	r2, [r3, #16]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	7c5a      	ldrb	r2, [r3, #17]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	745a      	strb	r2, [r3, #17]
  }
}
 800f426:	bf00      	nop
 800f428:	3714      	adds	r7, #20
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr

0800f432 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 800f432:	b580      	push	{r7, lr}
 800f434:	b08a      	sub	sp, #40	; 0x28
 800f436:	af00      	add	r7, sp, #0
 800f438:	60f8      	str	r0, [r7, #12]
 800f43a:	60b9      	str	r1, [r7, #8]
 800f43c:	4613      	mov	r3, r2
 800f43e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 800f444:	2300      	movs	r3, #0
 800f446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800f44a:	2300      	movs	r3, #0
 800f44c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	781a      	ldrb	r2, [r3, #0]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	785a      	ldrb	r2, [r3, #1]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	3302      	adds	r3, #2
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	3303      	adds	r3, #3
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	b29b      	uxth	r3, r3
 800f474:	021b      	lsls	r3, r3, #8
 800f476:	b29b      	uxth	r3, r3
 800f478:	4413      	add	r3, r2
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	791a      	ldrb	r2, [r3, #4]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	795a      	ldrb	r2, [r3, #5]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	799a      	ldrb	r2, [r3, #6]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	79da      	ldrb	r2, [r3, #7]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	7a1a      	ldrb	r2, [r3, #8]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f4a8:	88fb      	ldrh	r3, [r7, #6]
 800f4aa:	2b09      	cmp	r3, #9
 800f4ac:	d963      	bls.n	800f576 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 800f4ae:	2309      	movs	r3, #9
 800f4b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800f4b6:	e055      	b.n	800f564 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f4b8:	f107 0316 	add.w	r3, r7, #22
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4c0:	f000 f8ec 	bl	800f69c <USBH_GetNextDesc>
 800f4c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	785b      	ldrb	r3, [r3, #1]
 800f4ca:	2b04      	cmp	r3, #4
 800f4cc:	d14a      	bne.n	800f564 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f4ce:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f4d2:	221a      	movs	r2, #26
 800f4d4:	fb02 f303 	mul.w	r3, r2, r3
 800f4d8:	3308      	adds	r3, #8
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	4413      	add	r3, r2
 800f4de:	3302      	adds	r3, #2
 800f4e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 800f4e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4e4:	69f8      	ldr	r0, [r7, #28]
 800f4e6:	f000 f84a 	bl	800f57e <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f4f4:	e024      	b.n	800f540 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 800f4f6:	f107 0316 	add.w	r3, r7, #22
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4fe:	f000 f8cd 	bl	800f69c <USBH_GetNextDesc>
 800f502:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800f504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f506:	785b      	ldrb	r3, [r3, #1]
 800f508:	2b05      	cmp	r3, #5
 800f50a:	d119      	bne.n	800f540 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f50c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f510:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 800f514:	3201      	adds	r2, #1
 800f516:	00d2      	lsls	r2, r2, #3
 800f518:	211a      	movs	r1, #26
 800f51a:	fb01 f303 	mul.w	r3, r1, r3
 800f51e:	4413      	add	r3, r2
 800f520:	3308      	adds	r3, #8
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	4413      	add	r3, r2
 800f526:	3304      	adds	r3, #4
 800f528:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 800f52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f52c:	69b8      	ldr	r0, [r7, #24]
 800f52e:	f000 f855 	bl	800f5dc <USBH_ParseEPDesc>
            ep_ix++;
 800f532:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800f536:	b2db      	uxtb	r3, r3
 800f538:	3301      	adds	r3, #1
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f540:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800f544:	69fa      	ldr	r2, [r7, #28]
 800f546:	7912      	ldrb	r2, [r2, #4]
 800f548:	4293      	cmp	r3, r2
 800f54a:	da04      	bge.n	800f556 <USBH_ParseCfgDesc+0x124>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	885a      	ldrh	r2, [r3, #2]
 800f550:	8afb      	ldrh	r3, [r7, #22]
 800f552:	429a      	cmp	r2, r3
 800f554:	d8cf      	bhi.n	800f4f6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f556:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	3301      	adds	r3, #1
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800f564:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f568:	2b01      	cmp	r3, #1
 800f56a:	dc04      	bgt.n	800f576 <USBH_ParseCfgDesc+0x144>
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	885a      	ldrh	r2, [r3, #2]
 800f570:	8afb      	ldrh	r3, [r7, #22]
 800f572:	429a      	cmp	r2, r3
 800f574:	d8a0      	bhi.n	800f4b8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 800f576:	bf00      	nop
 800f578:	3728      	adds	r7, #40	; 0x28
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	781a      	ldrb	r2, [r3, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	785a      	ldrb	r2, [r3, #1]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	789a      	ldrb	r2, [r3, #2]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	78da      	ldrb	r2, [r3, #3]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	791a      	ldrb	r2, [r3, #4]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	795a      	ldrb	r2, [r3, #5]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	799a      	ldrb	r2, [r3, #6]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	79da      	ldrb	r2, [r3, #7]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	7a1a      	ldrb	r2, [r3, #8]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	721a      	strb	r2, [r3, #8]
}
 800f5d0:	bf00      	nop
 800f5d2:	370c      	adds	r7, #12
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	781a      	ldrb	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	785a      	ldrb	r2, [r3, #1]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	789a      	ldrb	r2, [r3, #2]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	78da      	ldrb	r2, [r3, #3]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	3304      	adds	r3, #4
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	3305      	adds	r3, #5
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	b29b      	uxth	r3, r3
 800f616:	021b      	lsls	r3, r3, #8
 800f618:	b29b      	uxth	r3, r3
 800f61a:	4413      	add	r3, r2
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	799a      	ldrb	r2, [r3, #6]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	719a      	strb	r2, [r3, #6]
}
 800f62a:	bf00      	nop
 800f62c:	370c      	adds	r7, #12
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr

0800f636 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 800f636:	b480      	push	{r7}
 800f638:	b087      	sub	sp, #28
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	60f8      	str	r0, [r7, #12]
 800f63e:	60b9      	str	r1, [r7, #8]
 800f640:	4613      	mov	r3, r2
 800f642:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	3301      	adds	r3, #1
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	2b03      	cmp	r3, #3
 800f64c:	d120      	bne.n	800f690 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	1e9a      	subs	r2, r3, #2
 800f654:	88fb      	ldrh	r3, [r7, #6]
 800f656:	4293      	cmp	r3, r2
 800f658:	bfa8      	it	ge
 800f65a:	4613      	movge	r3, r2
 800f65c:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3302      	adds	r3, #2
 800f662:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 800f664:	2300      	movs	r3, #0
 800f666:	82fb      	strh	r3, [r7, #22]
 800f668:	e00b      	b.n	800f682 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f66a:	8afb      	ldrh	r3, [r7, #22]
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	4413      	add	r3, r2
 800f670:	781a      	ldrb	r2, [r3, #0]
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	3301      	adds	r3, #1
 800f67a:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 800f67c:	8afb      	ldrh	r3, [r7, #22]
 800f67e:	3302      	adds	r3, #2
 800f680:	82fb      	strh	r3, [r7, #22]
 800f682:	8afa      	ldrh	r2, [r7, #22]
 800f684:	8abb      	ldrh	r3, [r7, #20]
 800f686:	429a      	cmp	r2, r3
 800f688:	d3ef      	bcc.n	800f66a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2200      	movs	r2, #0
 800f68e:	701a      	strb	r2, [r3, #0]
  }
}
 800f690:	bf00      	nop
 800f692:	371c      	adds	r7, #28
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b085      	sub	sp, #20
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	881a      	ldrh	r2, [r3, #0]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	4413      	add	r3, r2
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b086      	sub	sp, #24
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	789b      	ldrb	r3, [r3, #2]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d002      	beq.n	800f6f2 <USBH_CtlReq+0x20>
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d017      	beq.n	800f720 <USBH_CtlReq+0x4e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 800f6f0:	e030      	b.n	800f754 <USBH_CtlReq+0x82>
    phost->Control.buff = buff; 
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	88fa      	ldrh	r2, [r7, #6]
 800f6fc:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2201      	movs	r2, #1
 800f702:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2202      	movs	r2, #2
 800f708:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800f70a:	2301      	movs	r3, #1
 800f70c:	75fb      	strb	r3, [r7, #23]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f714:	2200      	movs	r2, #0
 800f716:	2103      	movs	r1, #3
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fc fdff 	bl	800c31c <osMessagePut>
    break;
 800f71e:	e019      	b.n	800f754 <USBH_CtlReq+0x82>
    status = USBH_HandleControl(phost);
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f000 f81d 	bl	800f760 <USBH_HandleControl>
 800f726:	4603      	mov	r3, r0
 800f728:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 800f72a:	7dfb      	ldrb	r3, [r7, #23]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d108      	bne.n	800f742 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2201      	movs	r2, #1
 800f734:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 800f73c:	2300      	movs	r3, #0
 800f73e:	75fb      	strb	r3, [r7, #23]
    break;
 800f740:	e007      	b.n	800f752 <USBH_CtlReq+0x80>
    else if  (status == USBH_FAIL)
 800f742:	7dfb      	ldrb	r3, [r7, #23]
 800f744:	2b02      	cmp	r3, #2
 800f746:	d104      	bne.n	800f752 <USBH_CtlReq+0x80>
      phost->RequestState = CMD_SEND;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2201      	movs	r2, #1
 800f74c:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 800f74e:	2302      	movs	r3, #2
 800f750:	75fb      	strb	r3, [r7, #23]
    break;
 800f752:	bf00      	nop
  }
  return status;
 800f754:	7dfb      	ldrb	r3, [r7, #23]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
	...

0800f760 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af02      	add	r7, sp, #8
 800f766:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 800f768:	2301      	movs	r3, #1
 800f76a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f76c:	2300      	movs	r3, #0
 800f76e:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	7e1b      	ldrb	r3, [r3, #24]
 800f774:	3b01      	subs	r3, #1
 800f776:	2b0a      	cmp	r3, #10
 800f778:	f200 81c1 	bhi.w	800fafe <USBH_HandleControl+0x39e>
 800f77c:	a201      	add	r2, pc, #4	; (adr r2, 800f784 <USBH_HandleControl+0x24>)
 800f77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f782:	bf00      	nop
 800f784:	0800f7b1 	.word	0x0800f7b1
 800f788:	0800f7cb 	.word	0x0800f7cb
 800f78c:	0800f84f 	.word	0x0800f84f
 800f790:	0800f875 	.word	0x0800f875
 800f794:	0800f8dd 	.word	0x0800f8dd
 800f798:	0800f909 	.word	0x0800f909
 800f79c:	0800f99b 	.word	0x0800f99b
 800f7a0:	0800f9bd 	.word	0x0800f9bd
 800f7a4:	0800fa29 	.word	0x0800fa29
 800f7a8:	0800fa51 	.word	0x0800fa51
 800f7ac:	0800fabf 	.word	0x0800fabf
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	795b      	ldrb	r3, [r3, #5]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 f9af 	bl	800fb20 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2202      	movs	r2, #2
 800f7c6:	761a      	strb	r2, [r3, #24]
    break; 
 800f7c8:	e1a4      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	795b      	ldrb	r3, [r3, #5]
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f005 f8e9 	bl	80149a8 <USBH_LL_GetURBState>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800f7da:	7bbb      	ldrb	r3, [r7, #14]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d126      	bne.n	800f82e <USBH_HandleControl+0xce>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	7c1b      	ldrb	r3, [r3, #16]
 800f7e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f7e8:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	8adb      	ldrh	r3, [r3, #22]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00a      	beq.n	800f808 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 800f7f2:	7b7b      	ldrb	r3, [r7, #13]
 800f7f4:	2b80      	cmp	r3, #128	; 0x80
 800f7f6:	d103      	bne.n	800f800 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2203      	movs	r2, #3
 800f7fc:	761a      	strb	r2, [r3, #24]
 800f7fe:	e00d      	b.n	800f81c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2205      	movs	r2, #5
 800f804:	761a      	strb	r2, [r3, #24]
 800f806:	e009      	b.n	800f81c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800f808:	7b7b      	ldrb	r3, [r7, #13]
 800f80a:	2b80      	cmp	r3, #128	; 0x80
 800f80c:	d103      	bne.n	800f816 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2209      	movs	r2, #9
 800f812:	761a      	strb	r2, [r3, #24]
 800f814:	e002      	b.n	800f81c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2207      	movs	r2, #7
 800f81a:	761a      	strb	r2, [r3, #24]
        } 
      }          
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f822:	2200      	movs	r2, #0
 800f824:	2103      	movs	r1, #3
 800f826:	4618      	mov	r0, r3
 800f828:	f7fc fd78 	bl	800c31c <osMessagePut>
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 800f82c:	e169      	b.n	800fb02 <USBH_HandleControl+0x3a2>
    else if(URB_Status == USBH_URB_ERROR)
 800f82e:	7bbb      	ldrb	r3, [r7, #14]
 800f830:	2b04      	cmp	r3, #4
 800f832:	f040 8166 	bne.w	800fb02 <USBH_HandleControl+0x3a2>
      phost->Control.state = CTRL_ERROR;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	220b      	movs	r2, #11
 800f83a:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f842:	2200      	movs	r2, #0
 800f844:	2103      	movs	r1, #3
 800f846:	4618      	mov	r0, r3
 800f848:	f7fc fd68 	bl	800c31c <osMessagePut>
    break;
 800f84c:	e159      	b.n	800fb02 <USBH_HandleControl+0x3a2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f854:	b29a      	uxth	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6899      	ldr	r1, [r3, #8]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	899a      	ldrh	r2, [r3, #12]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	791b      	ldrb	r3, [r3, #4]
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 f999 	bl	800fb9e <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2204      	movs	r2, #4
 800f870:	761a      	strb	r2, [r3, #24]
    break;    
 800f872:	e14f      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	791b      	ldrb	r3, [r3, #4]
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f005 f894 	bl	80149a8 <USBH_LL_GetURBState>
 800f880:	4603      	mov	r3, r0
 800f882:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800f884:	7bbb      	ldrb	r3, [r7, #14]
 800f886:	2b01      	cmp	r3, #1
 800f888:	d10a      	bne.n	800f8a0 <USBH_HandleControl+0x140>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2209      	movs	r2, #9
 800f88e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f896:	2200      	movs	r2, #0
 800f898:	2103      	movs	r1, #3
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fc fd3e 	bl	800c31c <osMessagePut>
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
 800f8a2:	2b05      	cmp	r3, #5
 800f8a4:	d10a      	bne.n	800f8bc <USBH_HandleControl+0x15c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800f8a6:	2303      	movs	r3, #3
 800f8a8:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	2103      	movs	r1, #3
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fc fd31 	bl	800c31c <osMessagePut>
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800f8ba:	e124      	b.n	800fb06 <USBH_HandleControl+0x3a6>
    else if (URB_Status == USBH_URB_ERROR)
 800f8bc:	7bbb      	ldrb	r3, [r7, #14]
 800f8be:	2b04      	cmp	r3, #4
 800f8c0:	f040 8121 	bne.w	800fb06 <USBH_HandleControl+0x3a6>
      phost->Control.state = CTRL_ERROR;  
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	220b      	movs	r2, #11
 800f8c8:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2103      	movs	r1, #3
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fc fd21 	bl	800c31c <osMessagePut>
    break;
 800f8da:	e114      	b.n	800fb06 <USBH_HandleControl+0x3a6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6899      	ldr	r1, [r3, #8]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	899a      	ldrh	r2, [r3, #12]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	7958      	ldrb	r0, [r3, #5]
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 f930 	bl	800fb54 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2206      	movs	r2, #6
 800f904:	761a      	strb	r2, [r3, #24]
    break;
 800f906:	e105      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	795b      	ldrb	r3, [r3, #5]
 800f90c:	4619      	mov	r1, r3
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f005 f84a 	bl	80149a8 <USBH_LL_GetURBState>
 800f914:	4603      	mov	r3, r0
 800f916:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 800f918:	7bbb      	ldrb	r3, [r7, #14]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d10b      	bne.n	800f936 <USBH_HandleControl+0x1d6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2207      	movs	r2, #7
 800f922:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f92a:	2200      	movs	r2, #0
 800f92c:	2103      	movs	r1, #3
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fc fcf4 	bl	800c31c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 800f934:	e0e9      	b.n	800fb0a <USBH_HandleControl+0x3aa>
    else if  (URB_Status == USBH_URB_STALL) 
 800f936:	7bbb      	ldrb	r3, [r7, #14]
 800f938:	2b05      	cmp	r3, #5
 800f93a:	d10d      	bne.n	800f958 <USBH_HandleControl+0x1f8>
      phost->Control.state = CTRL_STALLED; 
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	220c      	movs	r2, #12
 800f940:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800f942:	2303      	movs	r3, #3
 800f944:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f94c:	2200      	movs	r2, #0
 800f94e:	2103      	movs	r1, #3
 800f950:	4618      	mov	r0, r3
 800f952:	f7fc fce3 	bl	800c31c <osMessagePut>
    break;
 800f956:	e0d8      	b.n	800fb0a <USBH_HandleControl+0x3aa>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800f958:	7bbb      	ldrb	r3, [r7, #14]
 800f95a:	2b02      	cmp	r3, #2
 800f95c:	d10b      	bne.n	800f976 <USBH_HandleControl+0x216>
      phost->Control.state = CTRL_DATA_OUT;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2205      	movs	r2, #5
 800f962:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f96a:	2200      	movs	r2, #0
 800f96c:	2103      	movs	r1, #3
 800f96e:	4618      	mov	r0, r3
 800f970:	f7fc fcd4 	bl	800c31c <osMessagePut>
    break;
 800f974:	e0c9      	b.n	800fb0a <USBH_HandleControl+0x3aa>
    else if (URB_Status == USBH_URB_ERROR)
 800f976:	7bbb      	ldrb	r3, [r7, #14]
 800f978:	2b04      	cmp	r3, #4
 800f97a:	f040 80c6 	bne.w	800fb0a <USBH_HandleControl+0x3aa>
      phost->Control.state = CTRL_ERROR;  
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	220b      	movs	r2, #11
 800f982:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 800f984:	2302      	movs	r3, #2
 800f986:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f98e:	2200      	movs	r2, #0
 800f990:	2103      	movs	r1, #3
 800f992:	4618      	mov	r0, r3
 800f994:	f7fc fcc2 	bl	800c31c <osMessagePut>
    break;
 800f998:	e0b7      	b.n	800fb0a <USBH_HandleControl+0x3aa>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	791b      	ldrb	r3, [r3, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 f8fb 	bl	800fb9e <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2208      	movs	r2, #8
 800f9b8:	761a      	strb	r2, [r3, #24]
    
    break;
 800f9ba:	e0ab      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	791b      	ldrb	r3, [r3, #4]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f004 fff0 	bl	80149a8 <USBH_LL_GetURBState>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 800f9cc:	7bbb      	ldrb	r3, [r7, #14]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d10d      	bne.n	800f9ee <USBH_HandleControl+0x28e>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	220d      	movs	r2, #13
 800f9d6:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	2103      	movs	r1, #3
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fc fc98 	bl	800c31c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800f9ec:	e08f      	b.n	800fb0e <USBH_HandleControl+0x3ae>
    else if (URB_Status == USBH_URB_ERROR)
 800f9ee:	7bbb      	ldrb	r3, [r7, #14]
 800f9f0:	2b04      	cmp	r3, #4
 800f9f2:	d10b      	bne.n	800fa0c <USBH_HandleControl+0x2ac>
      phost->Control.state = CTRL_ERROR;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	220b      	movs	r2, #11
 800f9f8:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fa00:	2200      	movs	r2, #0
 800fa02:	2103      	movs	r1, #3
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fc fc89 	bl	800c31c <osMessagePut>
    break;
 800fa0a:	e080      	b.n	800fb0e <USBH_HandleControl+0x3ae>
     else if(URB_Status == USBH_URB_STALL)
 800fa0c:	7bbb      	ldrb	r3, [r7, #14]
 800fa0e:	2b05      	cmp	r3, #5
 800fa10:	d17d      	bne.n	800fb0e <USBH_HandleControl+0x3ae>
      status = USBH_NOT_SUPPORTED;
 800fa12:	2303      	movs	r3, #3
 800fa14:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	2103      	movs	r1, #3
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fc fc7b 	bl	800c31c <osMessagePut>
    break;
 800fa26:	e072      	b.n	800fb0e <USBH_HandleControl+0x3ae>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	795a      	ldrb	r2, [r3, #5]
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	4613      	mov	r3, r2
 800fa32:	2200      	movs	r2, #0
 800fa34:	2100      	movs	r1, #0
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f88c 	bl	800fb54 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	220a      	movs	r2, #10
 800fa4c:	761a      	strb	r2, [r3, #24]
    break;
 800fa4e:	e061      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	795b      	ldrb	r3, [r3, #5]
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f004 ffa6 	bl	80149a8 <USBH_LL_GetURBState>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d10d      	bne.n	800fa82 <USBH_HandleControl+0x322>
    { 
      status = USBH_OK;      
 800fa66:	2300      	movs	r3, #0
 800fa68:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	220d      	movs	r2, #13
 800fa6e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fa76:	2200      	movs	r2, #0
 800fa78:	2103      	movs	r1, #3
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fc fc4e 	bl	800c31c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800fa80:	e047      	b.n	800fb12 <USBH_HandleControl+0x3b2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800fa82:	7bbb      	ldrb	r3, [r7, #14]
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	d10b      	bne.n	800faa0 <USBH_HandleControl+0x340>
      phost->Control.state = CTRL_STATUS_OUT;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2209      	movs	r2, #9
 800fa8c:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fa94:	2200      	movs	r2, #0
 800fa96:	2103      	movs	r1, #3
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fc fc3f 	bl	800c31c <osMessagePut>
    break;
 800fa9e:	e038      	b.n	800fb12 <USBH_HandleControl+0x3b2>
    else if (URB_Status == USBH_URB_ERROR)
 800faa0:	7bbb      	ldrb	r3, [r7, #14]
 800faa2:	2b04      	cmp	r3, #4
 800faa4:	d135      	bne.n	800fb12 <USBH_HandleControl+0x3b2>
      phost->Control.state = CTRL_ERROR; 
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	220b      	movs	r2, #11
 800faaa:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fab2:	2200      	movs	r2, #0
 800fab4:	2103      	movs	r1, #3
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fc fc30 	bl	800c31c <osMessagePut>
    break;
 800fabc:	e029      	b.n	800fb12 <USBH_HandleControl+0x3b2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	7e5b      	ldrb	r3, [r3, #25]
 800fac2:	3301      	adds	r3, #1
 800fac4:	b2da      	uxtb	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	765a      	strb	r2, [r3, #25]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	7e5b      	ldrb	r3, [r3, #25]
 800face:	2b02      	cmp	r3, #2
 800fad0:	d809      	bhi.n	800fae6 <USBH_HandleControl+0x386>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f004 fe06 	bl	80146e4 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2201      	movs	r2, #1
 800fadc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2201      	movs	r2, #1
 800fae2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800fae4:	e016      	b.n	800fb14 <USBH_HandleControl+0x3b4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800faec:	2106      	movs	r1, #6
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	4798      	blx	r3
      phost->Control.errorcount = 0;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800faf8:	2302      	movs	r3, #2
 800fafa:	73fb      	strb	r3, [r7, #15]
    break;
 800fafc:	e00a      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    
  default:
    break;
 800fafe:	bf00      	nop
 800fb00:	e008      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    break;
 800fb02:	bf00      	nop
 800fb04:	e006      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    break;
 800fb06:	bf00      	nop
 800fb08:	e004      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    break;
 800fb0a:	bf00      	nop
 800fb0c:	e002      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    break;
 800fb0e:	bf00      	nop
 800fb10:	e000      	b.n	800fb14 <USBH_HandleControl+0x3b4>
    break;
 800fb12:	bf00      	nop
  }
  return status;
 800fb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop

0800fb20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af04      	add	r7, sp, #16
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fb2e:	79f9      	ldrb	r1, [r7, #7]
 800fb30:	2300      	movs	r3, #0
 800fb32:	9303      	str	r3, [sp, #12]
 800fb34:	2308      	movs	r3, #8
 800fb36:	9302      	str	r3, [sp, #8]
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	9301      	str	r3, [sp, #4]
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	2300      	movs	r3, #0
 800fb42:	2200      	movs	r2, #0
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f004 fee7 	bl	8014918 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b088      	sub	sp, #32
 800fb58:	af04      	add	r7, sp, #16
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	4611      	mov	r1, r2
 800fb60:	461a      	mov	r2, r3
 800fb62:	460b      	mov	r3, r1
 800fb64:	80fb      	strh	r3, [r7, #6]
 800fb66:	4613      	mov	r3, r2
 800fb68:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d001      	beq.n	800fb78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 800fb74:	2300      	movs	r3, #0
 800fb76:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fb78:	7979      	ldrb	r1, [r7, #5]
 800fb7a:	7e3b      	ldrb	r3, [r7, #24]
 800fb7c:	9303      	str	r3, [sp, #12]
 800fb7e:	88fb      	ldrh	r3, [r7, #6]
 800fb80:	9302      	str	r3, [sp, #8]
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	9301      	str	r3, [sp, #4]
 800fb86:	2301      	movs	r3, #1
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f004 fec2 	bl	8014918 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}

0800fb9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b088      	sub	sp, #32
 800fba2:	af04      	add	r7, sp, #16
 800fba4:	60f8      	str	r0, [r7, #12]
 800fba6:	60b9      	str	r1, [r7, #8]
 800fba8:	4611      	mov	r1, r2
 800fbaa:	461a      	mov	r2, r3
 800fbac:	460b      	mov	r3, r1
 800fbae:	80fb      	strh	r3, [r7, #6]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fbb4:	7979      	ldrb	r1, [r7, #5]
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	9303      	str	r3, [sp, #12]
 800fbba:	88fb      	ldrh	r3, [r7, #6]
 800fbbc:	9302      	str	r3, [sp, #8]
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	9301      	str	r3, [sp, #4]
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	2201      	movs	r2, #1
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f004 fea4 	bl	8014918 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 800fbd0:	2300      	movs	r3, #0
  
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b088      	sub	sp, #32
 800fbde:	af04      	add	r7, sp, #16
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	60b9      	str	r1, [r7, #8]
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	460b      	mov	r3, r1
 800fbea:	80fb      	strh	r3, [r7, #6]
 800fbec:	4613      	mov	r3, r2
 800fbee:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <USBH_BulkSendData+0x24>
  {
    do_ping = 0;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fbfe:	7979      	ldrb	r1, [r7, #5]
 800fc00:	7e3b      	ldrb	r3, [r7, #24]
 800fc02:	9303      	str	r3, [sp, #12]
 800fc04:	88fb      	ldrh	r3, [r7, #6]
 800fc06:	9302      	str	r3, [sp, #8]
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	9301      	str	r3, [sp, #4]
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	2302      	movs	r3, #2
 800fc12:	2200      	movs	r2, #0
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f004 fe7f 	bl	8014918 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fc1a:	2300      	movs	r3, #0
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3710      	adds	r7, #16
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b088      	sub	sp, #32
 800fc28:	af04      	add	r7, sp, #16
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	4611      	mov	r1, r2
 800fc30:	461a      	mov	r2, r3
 800fc32:	460b      	mov	r3, r1
 800fc34:	80fb      	strh	r3, [r7, #6]
 800fc36:	4613      	mov	r3, r2
 800fc38:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fc3a:	7979      	ldrb	r1, [r7, #5]
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	9303      	str	r3, [sp, #12]
 800fc40:	88fb      	ldrh	r3, [r7, #6]
 800fc42:	9302      	str	r3, [sp, #8]
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	9301      	str	r3, [sp, #4]
 800fc48:	2301      	movs	r3, #1
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	2302      	movs	r3, #2
 800fc4e:	2201      	movs	r2, #1
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f004 fe61 	bl	8014918 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
 800fc56:	2300      	movs	r3, #0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af04      	add	r7, sp, #16
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	4608      	mov	r0, r1
 800fc6a:	4611      	mov	r1, r2
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	4603      	mov	r3, r0
 800fc70:	70fb      	strb	r3, [r7, #3]
 800fc72:	460b      	mov	r3, r1
 800fc74:	70bb      	strb	r3, [r7, #2]
 800fc76:	4613      	mov	r3, r2
 800fc78:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800fc7a:	7878      	ldrb	r0, [r7, #1]
 800fc7c:	78ba      	ldrb	r2, [r7, #2]
 800fc7e:	78f9      	ldrb	r1, [r7, #3]
 800fc80:	8b3b      	ldrh	r3, [r7, #24]
 800fc82:	9302      	str	r3, [sp, #8]
 800fc84:	7d3b      	ldrb	r3, [r7, #20]
 800fc86:	9301      	str	r3, [sp, #4]
 800fc88:	7c3b      	ldrb	r3, [r7, #16]
 800fc8a:	9300      	str	r3, [sp, #0]
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f004 fdc6 	bl	8014820 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 800fc94:	2300      	movs	r3, #0

}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b082      	sub	sp, #8
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	460b      	mov	r3, r1
 800fca8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800fcaa:	78fb      	ldrb	r3, [r7, #3]
 800fcac:	4619      	mov	r1, r3
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f004 fdfc 	bl	80148ac <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 800fcb4:	2300      	movs	r3, #0

}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b084      	sub	sp, #16
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f836 	bl	800fd3c <USBH_GetFreePipe>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 800fcd4:	89fb      	ldrh	r3, [r7, #14]
 800fcd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d009      	beq.n	800fcf2 <USBH_AllocPipe+0x34>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800fcde:	89fb      	ldrh	r3, [r7, #14]
 800fce0:	78fa      	ldrb	r2, [r7, #3]
 800fce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fce6:	4611      	mov	r1, r2
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	33de      	adds	r3, #222	; 0xde
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	4413      	add	r3, r2
 800fcf0:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 800fcf2:	89fb      	ldrh	r3, [r7, #14]
 800fcf4:	b2db      	uxtb	r3, r3
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fcfe:	b480      	push	{r7}
 800fd00:	b083      	sub	sp, #12
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
 800fd06:	460b      	mov	r3, r1
 800fd08:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 800fd0a:	78fb      	ldrb	r3, [r7, #3]
 800fd0c:	2b0a      	cmp	r3, #10
 800fd0e:	d80e      	bhi.n	800fd2e <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 800fd10:	78f8      	ldrb	r0, [r7, #3]
 800fd12:	78fb      	ldrb	r3, [r7, #3]
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	33de      	adds	r3, #222	; 0xde
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	4413      	add	r3, r2
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800fd22:	6879      	ldr	r1, [r7, #4]
 800fd24:	f100 03de 	add.w	r3, r0, #222	; 0xde
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	440b      	add	r3, r1
 800fd2c:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 800fd44:	2300      	movs	r3, #0
 800fd46:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 800fd48:	2300      	movs	r3, #0
 800fd4a:	73fb      	strb	r3, [r7, #15]
 800fd4c:	e00f      	b.n	800fd6e <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	33de      	adds	r3, #222	; 0xde
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4413      	add	r3, r2
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d102      	bne.n	800fd68 <USBH_GetFreePipe+0x2c>
	{
	   return idx;
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	e007      	b.n	800fd78 <USBH_GetFreePipe+0x3c>
  for (idx = 0 ; idx < 11 ; idx++)
 800fd68:	7bfb      	ldrb	r3, [r7, #15]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	73fb      	strb	r3, [r7, #15]
 800fd6e:	7bfb      	ldrb	r3, [r7, #15]
 800fd70:	2b0a      	cmp	r3, #10
 800fd72:	d9ec      	bls.n	800fd4e <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800fd74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3714      	adds	r7, #20
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{	 
 800fd84:	b590      	push	{r4, r7, lr}
 800fd86:	b089      	sub	sp, #36	; 0x24
 800fd88:	af04      	add	r7, sp, #16
 800fd8a:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0; 
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800fd90:	2302      	movs	r3, #2
 800fd92:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fd9a:	7919      	ldrb	r1, [r3, #4]
 800fd9c:	2350      	movs	r3, #80	; 0x50
 800fd9e:	2206      	movs	r2, #6
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7fe fdf5 	bl	800e990 <USBH_FindInterface>
 800fda6:	4603      	mov	r3, r0
 800fda8:	73bb      	strb	r3, [r7, #14]
  
  if(interface == 0xFF) /* Not Valid Interface */
 800fdaa:	7bbb      	ldrb	r3, [r7, #14]
 800fdac:	2bff      	cmp	r3, #255	; 0xff
 800fdae:	d102      	bne.n	800fdb6 <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;      
 800fdb0:	2302      	movs	r3, #2
 800fdb2:	73fb      	strb	r3, [r7, #15]
 800fdb4:	e10b      	b.n	800ffce <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800fdb6:	7bbb      	ldrb	r3, [r7, #14]
 800fdb8:	4619      	mov	r1, r3
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7fe fdcc 	bl	800e958 <USBH_SelectInterface>
    
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 4374 	ldr.w	r4, [r3, #884]	; 0x374
 800fdc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fdca:	f004 ff9b 	bl	8014d04 <malloc>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fdd8:	69db      	ldr	r3, [r3, #28]
 800fdda:	60bb      	str	r3, [r7, #8]
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fde2:	4619      	mov	r1, r3
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	231a      	movs	r3, #26
 800fde8:	fb03 f301 	mul.w	r3, r3, r1
 800fdec:	4413      	add	r3, r2
 800fdee:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	b25b      	sxtb	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	da1c      	bge.n	800fe34 <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fe00:	4619      	mov	r1, r3
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	231a      	movs	r3, #26
 800fe06:	fb03 f301 	mul.w	r3, r3, r1
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fe10:	781a      	ldrb	r2, [r3, #0]
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	231a      	movs	r3, #26
 800fe22:	fb03 f301 	mul.w	r3, r3, r1
 800fe26:	4413      	add	r3, r2
 800fe28:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fe2c:	881a      	ldrh	r2, [r3, #0]
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	815a      	strh	r2, [r3, #10]
 800fe32:	e01b      	b.n	800fe6c <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	231a      	movs	r3, #26
 800fe40:	fb03 f301 	mul.w	r3, r3, r1
 800fe44:	4413      	add	r3, r2
 800fe46:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fe4a:	781a      	ldrb	r2, [r3, #0]
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fe56:	4619      	mov	r1, r3
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	231a      	movs	r3, #26
 800fe5c:	fb03 f301 	mul.w	r3, r3, r1
 800fe60:	4413      	add	r3, r2
 800fe62:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fe66:	881a      	ldrh	r2, [r3, #0]
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	811a      	strh	r2, [r3, #8]
    }
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fe72:	4619      	mov	r1, r3
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	231a      	movs	r3, #26
 800fe78:	fb03 f301 	mul.w	r3, r3, r1
 800fe7c:	4413      	add	r3, r2
 800fe7e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	b25b      	sxtb	r3, r3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	da1c      	bge.n	800fec4 <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fe90:	4619      	mov	r1, r3
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	231a      	movs	r3, #26
 800fe96:	fb03 f301 	mul.w	r3, r3, r1
 800fe9a:	4413      	add	r3, r2
 800fe9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fea0:	781a      	ldrb	r2, [r3, #0]
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800feac:	4619      	mov	r1, r3
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	231a      	movs	r3, #26
 800feb2:	fb03 f301 	mul.w	r3, r3, r1
 800feb6:	4413      	add	r3, r2
 800feb8:	f203 3352 	addw	r3, r3, #850	; 0x352
 800febc:	881a      	ldrh	r2, [r3, #0]
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	815a      	strh	r2, [r3, #10]
 800fec2:	e01b      	b.n	800fefc <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800feca:	4619      	mov	r1, r3
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	231a      	movs	r3, #26
 800fed0:	fb03 f301 	mul.w	r3, r3, r1
 800fed4:	4413      	add	r3, r2
 800fed6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800feda:	781a      	ldrb	r2, [r3, #0]
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fee6:	4619      	mov	r1, r3
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	231a      	movs	r3, #26
 800feec:	fb03 f301 	mul.w	r3, r3, r1
 800fef0:	4413      	add	r3, r2
 800fef2:	f203 3352 	addw	r3, r3, #850	; 0x352
 800fef6:	881a      	ldrh	r2, [r3, #0]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	811a      	strh	r2, [r3, #8]
    }
    
    MSC_Handle->current_lun = 0;
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	2200      	movs	r2, #0
 800ff16:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	799b      	ldrb	r3, [r3, #6]
 800ff22:	4619      	mov	r1, r3
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7ff feca 	bl	800fcbe <USBH_AllocPipe>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	79db      	ldrb	r3, [r3, #7]
 800ff36:	4619      	mov	r1, r3
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7ff fec0 	bl	800fcbe <USBH_AllocPipe>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	461a      	mov	r2, r3
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 fbd0 	bl	80106ec <USBH_MSC_BOT_Init>
    
    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	3390      	adds	r3, #144	; 0x90
 800ff50:	2268      	movs	r2, #104	; 0x68
 800ff52:	2100      	movs	r1, #0
 800ff54:	4618      	mov	r0, r3
 800ff56:	f004 ff02 	bl	8014d5e <memset>
    
    /* Open the new channels */
    USBH_OpenPipe  (phost,
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	7959      	ldrb	r1, [r3, #5]
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	7998      	ldrb	r0, [r3, #6]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ff6e:	68ba      	ldr	r2, [r7, #8]
 800ff70:	8912      	ldrh	r2, [r2, #8]
 800ff72:	9202      	str	r2, [sp, #8]
 800ff74:	2202      	movs	r2, #2
 800ff76:	9201      	str	r2, [sp, #4]
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	4623      	mov	r3, r4
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f7ff fe6e 	bl	800fc60 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);  
    
    USBH_OpenPipe  (phost,
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	7919      	ldrb	r1, [r3, #4]
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	79d8      	ldrb	r0, [r3, #7]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ff98:	68ba      	ldr	r2, [r7, #8]
 800ff9a:	8952      	ldrh	r2, [r2, #10]
 800ff9c:	9202      	str	r2, [sp, #8]
 800ff9e:	2202      	movs	r2, #2
 800ffa0:	9201      	str	r2, [sp, #4]
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f7ff fe59 	bl	800fc60 <USBH_OpenPipe>
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);     
    
    
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	791b      	ldrb	r3, [r3, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f004 fd17 	bl	80149ea <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	795b      	ldrb	r3, [r3, #5]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f004 fd10 	bl	80149ea <USBH_LL_SetToggle>
    status = USBH_OK; 
 800ffca:	2300      	movs	r3, #0
 800ffcc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800ffce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3714      	adds	r7, #20
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd90      	pop	{r4, r7, pc}

0800ffd8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ffe6:	69db      	ldr	r3, [r3, #28]
 800ffe8:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	795b      	ldrb	r3, [r3, #5]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d00e      	beq.n	8010010 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	795b      	ldrb	r3, [r3, #5]
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7ff fe50 	bl	800fc9e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	795b      	ldrb	r3, [r3, #5]
 8010002:	4619      	mov	r1, r3
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7ff fe7a 	bl	800fcfe <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2200      	movs	r2, #0
 801000e:	715a      	strb	r2, [r3, #5]
  }
  
  if ( MSC_Handle->InPipe)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	791b      	ldrb	r3, [r3, #4]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d00e      	beq.n	8010036 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	791b      	ldrb	r3, [r3, #4]
 801001c:	4619      	mov	r1, r3
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff fe3d 	bl	800fc9e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	791b      	ldrb	r3, [r3, #4]
 8010028:	4619      	mov	r1, r3
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f7ff fe67 	bl	800fcfe <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	711a      	strb	r2, [r3, #4]
  } 

  if(phost->pActiveClass->pData)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 801003c:	69db      	ldr	r3, [r3, #28]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00b      	beq.n	801005a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010048:	69db      	ldr	r3, [r3, #28]
 801004a:	4618      	mov	r0, r3
 801004c:	f004 fe62 	bl	8014d14 <free>
    phost->pActiveClass->pData = 0;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010056:	2200      	movs	r2, #0
 8010058:	61da      	str	r2, [r3, #28]
  }
  
  return USBH_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{   
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010072:	69db      	ldr	r3, [r3, #28]
 8010074:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010076:	2301      	movs	r3, #1
 8010078:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	7b9b      	ldrb	r3, [r3, #14]
 801007e:	2b02      	cmp	r3, #2
 8010080:	d004      	beq.n	801008c <USBH_MSC_ClassRequest+0x28>
 8010082:	2b03      	cmp	r3, #3
 8010084:	d039      	beq.n	80100fa <USBH_MSC_ClassRequest+0x96>
 8010086:	2b00      	cmp	r3, #0
 8010088:	d000      	beq.n	801008c <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
    }    
    break;
    
  default:
    break;
 801008a:	e045      	b.n	8010118 <USBH_MSC_ClassRequest+0xb4>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	4619      	mov	r1, r3
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 fb0d 	bl	80106b0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8010096:	4603      	mov	r3, r0
 8010098:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 801009a:	7bfb      	ldrb	r3, [r7, #15]
 801009c:	2b03      	cmp	r3, #3
 801009e:	d104      	bne.n	80100aa <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0;
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	2200      	movs	r2, #0
 80100a4:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 80100aa:	7bfb      	ldrb	r3, [r7, #15]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d130      	bne.n	8010112 <USBH_MSC_ClassRequest+0xae>
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	3301      	adds	r3, #1
 80100b8:	461a      	mov	r2, r3
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	601a      	str	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 80100be:	2300      	movs	r3, #0
 80100c0:	73bb      	strb	r3, [r7, #14]
 80100c2:	e014      	b.n	80100ee <USBH_MSC_ClassRequest+0x8a>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80100c4:	7bbb      	ldrb	r3, [r7, #14]
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	2134      	movs	r1, #52	; 0x34
 80100ca:	fb01 f303 	mul.w	r3, r1, r3
 80100ce:	4413      	add	r3, r2
 80100d0:	3392      	adds	r3, #146	; 0x92
 80100d2:	2202      	movs	r2, #2
 80100d4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0;
 80100d6:	7bbb      	ldrb	r3, [r7, #14]
 80100d8:	68ba      	ldr	r2, [r7, #8]
 80100da:	2134      	movs	r1, #52	; 0x34
 80100dc:	fb01 f303 	mul.w	r3, r1, r3
 80100e0:	4413      	add	r3, r2
 80100e2:	33c1      	adds	r3, #193	; 0xc1
 80100e4:	2200      	movs	r2, #0
 80100e6:	701a      	strb	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
 80100ea:	3301      	adds	r3, #1
 80100ec:	73bb      	strb	r3, [r7, #14]
 80100ee:	7bba      	ldrb	r2, [r7, #14]
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d3e5      	bcc.n	80100c4 <USBH_MSC_ClassRequest+0x60>
    break;
 80100f8:	e00b      	b.n	8010112 <USBH_MSC_ClassRequest+0xae>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 80100fa:	2100      	movs	r1, #0
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff f904 	bl	800f30a <USBH_ClrFeature>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d106      	bne.n	8010116 <USBH_MSC_ClassRequest+0xb2>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	7bda      	ldrb	r2, [r3, #15]
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	739a      	strb	r2, [r3, #14]
    break;
 8010110:	e001      	b.n	8010116 <USBH_MSC_ClassRequest+0xb2>
    break;
 8010112:	bf00      	nop
 8010114:	e000      	b.n	8010118 <USBH_MSC_ClassRequest+0xb4>
    break;
 8010116:	bf00      	nop
  }
  
  return status; 
 8010118:	7bfb      	ldrb	r3, [r7, #15]
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
	...

08010124 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010132:	69db      	ldr	r3, [r3, #28]
 8010134:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8010136:	2301      	movs	r3, #1
 8010138:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
 801013a:	2301      	movs	r3, #1
 801013c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 801013e:	2301      	movs	r3, #1
 8010140:	73bb      	strb	r3, [r7, #14]
  
  switch (MSC_Handle->state)
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	7b1b      	ldrb	r3, [r3, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d003      	beq.n	8010152 <USBH_MSC_Process+0x2e>
 801014a:	2b01      	cmp	r3, #1
 801014c:	f000 8280 	beq.w	8010650 <USBH_MSC_Process+0x52c>
  case MSC_IDLE:
    error = USBH_OK;  
    break;
    
  default:
    break; 
 8010150:	e281      	b.n	8010656 <USBH_MSC_Process+0x532>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010158:	461a      	mov	r2, r3
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	429a      	cmp	r2, r3
 8010160:	f080 8260 	bcs.w	8010624 <USBH_MSC_Process+0x500>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801016a:	4619      	mov	r1, r3
 801016c:	693a      	ldr	r2, [r7, #16]
 801016e:	2334      	movs	r3, #52	; 0x34
 8010170:	fb03 f301 	mul.w	r3, r3, r1
 8010174:	4413      	add	r3, r2
 8010176:	3391      	adds	r3, #145	; 0x91
 8010178:	2201      	movs	r2, #1
 801017a:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010182:	4619      	mov	r1, r3
 8010184:	693a      	ldr	r2, [r7, #16]
 8010186:	2334      	movs	r3, #52	; 0x34
 8010188:	fb03 f301 	mul.w	r3, r3, r1
 801018c:	4413      	add	r3, r2
 801018e:	3390      	adds	r3, #144	; 0x90
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2b08      	cmp	r3, #8
 8010194:	f200 8234 	bhi.w	8010600 <USBH_MSC_Process+0x4dc>
 8010198:	a201      	add	r2, pc, #4	; (adr r2, 80101a0 <USBH_MSC_Process+0x7c>)
 801019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019e:	bf00      	nop
 80101a0:	080101c5 	.word	0x080101c5
 80101a4:	08010601 	.word	0x08010601
 80101a8:	0801028b 	.word	0x0801028b
 80101ac:	0801040f 	.word	0x0801040f
 80101b0:	080101e9 	.word	0x080101e9
 80101b4:	080104db 	.word	0x080104db
 80101b8:	08010601 	.word	0x08010601
 80101bc:	08010601 	.word	0x08010601
 80101c0:	080105ef 	.word	0x080105ef
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101ca:	4619      	mov	r1, r3
 80101cc:	693a      	ldr	r2, [r7, #16]
 80101ce:	2334      	movs	r3, #52	; 0x34
 80101d0:	fb03 f301 	mul.w	r3, r3, r1
 80101d4:	4413      	add	r3, r2
 80101d6:	3390      	adds	r3, #144	; 0x90
 80101d8:	2204      	movs	r2, #4
 80101da:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101ee:	b2d9      	uxtb	r1, r3
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101f6:	461a      	mov	r2, r3
 80101f8:	2334      	movs	r3, #52	; 0x34
 80101fa:	fb03 f302 	mul.w	r3, r3, r2
 80101fe:	3398      	adds	r3, #152	; 0x98
 8010200:	693a      	ldr	r2, [r7, #16]
 8010202:	4413      	add	r3, r2
 8010204:	3307      	adds	r3, #7
 8010206:	461a      	mov	r2, r3
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 fde2 	bl	8010dd2 <USBH_MSC_SCSI_Inquiry>
 801020e:	4603      	mov	r3, r0
 8010210:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8010212:	7bfb      	ldrb	r3, [r7, #15]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10b      	bne.n	8010230 <USBH_MSC_Process+0x10c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801021e:	4619      	mov	r1, r3
 8010220:	693a      	ldr	r2, [r7, #16]
 8010222:	2334      	movs	r3, #52	; 0x34
 8010224:	fb03 f301 	mul.w	r3, r3, r1
 8010228:	4413      	add	r3, r2
 801022a:	3390      	adds	r3, #144	; 0x90
 801022c:	2202      	movs	r2, #2
 801022e:	701a      	strb	r2, [r3, #0]
        if( scsi_status == USBH_FAIL)
 8010230:	7bfb      	ldrb	r3, [r7, #15]
 8010232:	2b02      	cmp	r3, #2
 8010234:	d10c      	bne.n	8010250 <USBH_MSC_Process+0x12c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801023c:	4619      	mov	r1, r3
 801023e:	693a      	ldr	r2, [r7, #16]
 8010240:	2334      	movs	r3, #52	; 0x34
 8010242:	fb03 f301 	mul.w	r3, r3, r1
 8010246:	4413      	add	r3, r2
 8010248:	3390      	adds	r3, #144	; 0x90
 801024a:	2205      	movs	r2, #5
 801024c:	701a      	strb	r2, [r3, #0]
        break;    
 801024e:	e1d9      	b.n	8010604 <USBH_MSC_Process+0x4e0>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8010250:	7bfb      	ldrb	r3, [r7, #15]
 8010252:	2b04      	cmp	r3, #4
 8010254:	f040 81d6 	bne.w	8010604 <USBH_MSC_Process+0x4e0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801025e:	4619      	mov	r1, r3
 8010260:	693a      	ldr	r2, [r7, #16]
 8010262:	2334      	movs	r3, #52	; 0x34
 8010264:	fb03 f301 	mul.w	r3, r3, r1
 8010268:	4413      	add	r3, r2
 801026a:	3390      	adds	r3, #144	; 0x90
 801026c:	2201      	movs	r2, #1
 801026e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010276:	4619      	mov	r1, r3
 8010278:	693a      	ldr	r2, [r7, #16]
 801027a:	2334      	movs	r3, #52	; 0x34
 801027c:	fb03 f301 	mul.w	r3, r3, r1
 8010280:	4413      	add	r3, r2
 8010282:	3391      	adds	r3, #145	; 0x91
 8010284:	2202      	movs	r2, #2
 8010286:	701a      	strb	r2, [r3, #0]
        break;    
 8010288:	e1bc      	b.n	8010604 <USBH_MSC_Process+0x4e0>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010290:	b2db      	uxtb	r3, r3
 8010292:	4619      	mov	r1, r3
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 fcdd 	bl	8010c54 <USBH_MSC_SCSI_TestUnitReady>
 801029a:	4603      	mov	r3, r0
 801029c:	73bb      	strb	r3, [r7, #14]
        if( ready_status == USBH_OK)
 801029e:	7bbb      	ldrb	r3, [r7, #14]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d149      	bne.n	8010338 <USBH_MSC_Process+0x214>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102aa:	4619      	mov	r1, r3
 80102ac:	693a      	ldr	r2, [r7, #16]
 80102ae:	2334      	movs	r3, #52	; 0x34
 80102b0:	fb03 f301 	mul.w	r3, r3, r1
 80102b4:	4413      	add	r3, r2
 80102b6:	3392      	adds	r3, #146	; 0x92
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00c      	beq.n	80102d8 <USBH_MSC_Process+0x1b4>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102c4:	4619      	mov	r1, r3
 80102c6:	693a      	ldr	r2, [r7, #16]
 80102c8:	2334      	movs	r3, #52	; 0x34
 80102ca:	fb03 f301 	mul.w	r3, r3, r1
 80102ce:	4413      	add	r3, r2
 80102d0:	33c1      	adds	r3, #193	; 0xc1
 80102d2:	2201      	movs	r2, #1
 80102d4:	701a      	strb	r2, [r3, #0]
 80102d6:	e00b      	b.n	80102f0 <USBH_MSC_Process+0x1cc>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102de:	4619      	mov	r1, r3
 80102e0:	693a      	ldr	r2, [r7, #16]
 80102e2:	2334      	movs	r3, #52	; 0x34
 80102e4:	fb03 f301 	mul.w	r3, r3, r1
 80102e8:	4413      	add	r3, r2
 80102ea:	33c1      	adds	r3, #193	; 0xc1
 80102ec:	2200      	movs	r2, #0
 80102ee:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102f6:	4619      	mov	r1, r3
 80102f8:	693a      	ldr	r2, [r7, #16]
 80102fa:	2334      	movs	r3, #52	; 0x34
 80102fc:	fb03 f301 	mul.w	r3, r3, r1
 8010300:	4413      	add	r3, r2
 8010302:	3390      	adds	r3, #144	; 0x90
 8010304:	2203      	movs	r2, #3
 8010306:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801030e:	4619      	mov	r1, r3
 8010310:	693a      	ldr	r2, [r7, #16]
 8010312:	2334      	movs	r3, #52	; 0x34
 8010314:	fb03 f301 	mul.w	r3, r3, r1
 8010318:	4413      	add	r3, r2
 801031a:	3391      	adds	r3, #145	; 0x91
 801031c:	2200      	movs	r2, #0
 801031e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010326:	4619      	mov	r1, r3
 8010328:	693a      	ldr	r2, [r7, #16]
 801032a:	2334      	movs	r3, #52	; 0x34
 801032c:	fb03 f301 	mul.w	r3, r3, r1
 8010330:	4413      	add	r3, r2
 8010332:	3392      	adds	r3, #146	; 0x92
 8010334:	2200      	movs	r2, #0
 8010336:	701a      	strb	r2, [r3, #0]
        if( ready_status == USBH_FAIL)
 8010338:	7bbb      	ldrb	r3, [r7, #14]
 801033a:	2b02      	cmp	r3, #2
 801033c:	d14a      	bne.n	80103d4 <USBH_MSC_Process+0x2b0>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010344:	4619      	mov	r1, r3
 8010346:	693a      	ldr	r2, [r7, #16]
 8010348:	2334      	movs	r3, #52	; 0x34
 801034a:	fb03 f301 	mul.w	r3, r3, r1
 801034e:	4413      	add	r3, r2
 8010350:	3392      	adds	r3, #146	; 0x92
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	2b02      	cmp	r3, #2
 8010356:	d00c      	beq.n	8010372 <USBH_MSC_Process+0x24e>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801035e:	4619      	mov	r1, r3
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	2334      	movs	r3, #52	; 0x34
 8010364:	fb03 f301 	mul.w	r3, r3, r1
 8010368:	4413      	add	r3, r2
 801036a:	33c1      	adds	r3, #193	; 0xc1
 801036c:	2201      	movs	r2, #1
 801036e:	701a      	strb	r2, [r3, #0]
 8010370:	e00b      	b.n	801038a <USBH_MSC_Process+0x266>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010378:	4619      	mov	r1, r3
 801037a:	693a      	ldr	r2, [r7, #16]
 801037c:	2334      	movs	r3, #52	; 0x34
 801037e:	fb03 f301 	mul.w	r3, r3, r1
 8010382:	4413      	add	r3, r2
 8010384:	33c1      	adds	r3, #193	; 0xc1
 8010386:	2200      	movs	r2, #0
 8010388:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010390:	4619      	mov	r1, r3
 8010392:	693a      	ldr	r2, [r7, #16]
 8010394:	2334      	movs	r3, #52	; 0x34
 8010396:	fb03 f301 	mul.w	r3, r3, r1
 801039a:	4413      	add	r3, r2
 801039c:	3390      	adds	r3, #144	; 0x90
 801039e:	2205      	movs	r2, #5
 80103a0:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103a8:	4619      	mov	r1, r3
 80103aa:	693a      	ldr	r2, [r7, #16]
 80103ac:	2334      	movs	r3, #52	; 0x34
 80103ae:	fb03 f301 	mul.w	r3, r3, r1
 80103b2:	4413      	add	r3, r2
 80103b4:	3391      	adds	r3, #145	; 0x91
 80103b6:	2201      	movs	r2, #1
 80103b8:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103c0:	4619      	mov	r1, r3
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	2334      	movs	r3, #52	; 0x34
 80103c6:	fb03 f301 	mul.w	r3, r3, r1
 80103ca:	4413      	add	r3, r2
 80103cc:	3392      	adds	r3, #146	; 0x92
 80103ce:	2202      	movs	r2, #2
 80103d0:	701a      	strb	r2, [r3, #0]
        break;
 80103d2:	e119      	b.n	8010608 <USBH_MSC_Process+0x4e4>
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 80103d4:	7bbb      	ldrb	r3, [r7, #14]
 80103d6:	2b04      	cmp	r3, #4
 80103d8:	f040 8116 	bne.w	8010608 <USBH_MSC_Process+0x4e4>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103e2:	4619      	mov	r1, r3
 80103e4:	693a      	ldr	r2, [r7, #16]
 80103e6:	2334      	movs	r3, #52	; 0x34
 80103e8:	fb03 f301 	mul.w	r3, r3, r1
 80103ec:	4413      	add	r3, r2
 80103ee:	3390      	adds	r3, #144	; 0x90
 80103f0:	2201      	movs	r2, #1
 80103f2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103fa:	4619      	mov	r1, r3
 80103fc:	693a      	ldr	r2, [r7, #16]
 80103fe:	2334      	movs	r3, #52	; 0x34
 8010400:	fb03 f301 	mul.w	r3, r3, r1
 8010404:	4413      	add	r3, r2
 8010406:	3391      	adds	r3, #145	; 0x91
 8010408:	2202      	movs	r2, #2
 801040a:	701a      	strb	r2, [r3, #0]
        break;
 801040c:	e0fc      	b.n	8010608 <USBH_MSC_Process+0x4e4>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010414:	b2d9      	uxtb	r1, r3
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801041c:	461a      	mov	r2, r3
 801041e:	2334      	movs	r3, #52	; 0x34
 8010420:	fb03 f302 	mul.w	r3, r3, r2
 8010424:	3390      	adds	r3, #144	; 0x90
 8010426:	693a      	ldr	r2, [r7, #16]
 8010428:	4413      	add	r3, r2
 801042a:	3304      	adds	r3, #4
 801042c:	461a      	mov	r2, r3
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 fc53 	bl	8010cda <USBH_MSC_SCSI_ReadCapacity>
 8010434:	4603      	mov	r3, r0
 8010436:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d120      	bne.n	8010480 <USBH_MSC_Process+0x35c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010444:	4619      	mov	r1, r3
 8010446:	693a      	ldr	r2, [r7, #16]
 8010448:	2334      	movs	r3, #52	; 0x34
 801044a:	fb03 f301 	mul.w	r3, r3, r1
 801044e:	4413      	add	r3, r2
 8010450:	3390      	adds	r3, #144	; 0x90
 8010452:	2201      	movs	r2, #1
 8010454:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801045c:	4619      	mov	r1, r3
 801045e:	693a      	ldr	r2, [r7, #16]
 8010460:	2334      	movs	r3, #52	; 0x34
 8010462:	fb03 f301 	mul.w	r3, r3, r1
 8010466:	4413      	add	r3, r2
 8010468:	3391      	adds	r3, #145	; 0x91
 801046a:	2200      	movs	r2, #0
 801046c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010474:	3301      	adds	r3, #1
 8010476:	b29a      	uxth	r2, r3
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 801047e:	e0c5      	b.n	801060c <USBH_MSC_Process+0x4e8>
        else if( scsi_status == USBH_FAIL)
 8010480:	7bfb      	ldrb	r3, [r7, #15]
 8010482:	2b02      	cmp	r3, #2
 8010484:	d10c      	bne.n	80104a0 <USBH_MSC_Process+0x37c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801048c:	4619      	mov	r1, r3
 801048e:	693a      	ldr	r2, [r7, #16]
 8010490:	2334      	movs	r3, #52	; 0x34
 8010492:	fb03 f301 	mul.w	r3, r3, r1
 8010496:	4413      	add	r3, r2
 8010498:	3390      	adds	r3, #144	; 0x90
 801049a:	2205      	movs	r2, #5
 801049c:	701a      	strb	r2, [r3, #0]
        break;
 801049e:	e0b5      	b.n	801060c <USBH_MSC_Process+0x4e8>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80104a0:	7bfb      	ldrb	r3, [r7, #15]
 80104a2:	2b04      	cmp	r3, #4
 80104a4:	f040 80b2 	bne.w	801060c <USBH_MSC_Process+0x4e8>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104ae:	4619      	mov	r1, r3
 80104b0:	693a      	ldr	r2, [r7, #16]
 80104b2:	2334      	movs	r3, #52	; 0x34
 80104b4:	fb03 f301 	mul.w	r3, r3, r1
 80104b8:	4413      	add	r3, r2
 80104ba:	3390      	adds	r3, #144	; 0x90
 80104bc:	2201      	movs	r2, #1
 80104be:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104c6:	4619      	mov	r1, r3
 80104c8:	693a      	ldr	r2, [r7, #16]
 80104ca:	2334      	movs	r3, #52	; 0x34
 80104cc:	fb03 f301 	mul.w	r3, r3, r1
 80104d0:	4413      	add	r3, r2
 80104d2:	3391      	adds	r3, #145	; 0x91
 80104d4:	2202      	movs	r2, #2
 80104d6:	701a      	strb	r2, [r3, #0]
        break;
 80104d8:	e098      	b.n	801060c <USBH_MSC_Process+0x4e8>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104e0:	b2d9      	uxtb	r1, r3
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104e8:	461a      	mov	r2, r3
 80104ea:	2334      	movs	r3, #52	; 0x34
 80104ec:	fb03 f302 	mul.w	r3, r3, r2
 80104f0:	3398      	adds	r3, #152	; 0x98
 80104f2:	693a      	ldr	r2, [r7, #16]
 80104f4:	4413      	add	r3, r2
 80104f6:	3304      	adds	r3, #4
 80104f8:	461a      	mov	r2, r3
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 fd0b 	bl	8010f16 <USBH_MSC_SCSI_RequestSense>
 8010500:	4603      	mov	r3, r0
 8010502:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 8010504:	7bfb      	ldrb	r3, [r7, #15]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d145      	bne.n	8010596 <USBH_MSC_Process+0x472>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010510:	4619      	mov	r1, r3
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	2334      	movs	r3, #52	; 0x34
 8010516:	fb03 f301 	mul.w	r3, r3, r1
 801051a:	4413      	add	r3, r2
 801051c:	339c      	adds	r3, #156	; 0x9c
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	2b06      	cmp	r3, #6
 8010522:	d00c      	beq.n	801053e <USBH_MSC_Process+0x41a>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801052a:	4619      	mov	r1, r3
 801052c:	693a      	ldr	r2, [r7, #16]
 801052e:	2334      	movs	r3, #52	; 0x34
 8010530:	fb03 f301 	mul.w	r3, r3, r1
 8010534:	4413      	add	r3, r2
 8010536:	339c      	adds	r3, #156	; 0x9c
 8010538:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801053a:	2b02      	cmp	r3, #2
 801053c:	d117      	bne.n	801056e <USBH_MSC_Process+0x44a>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801054a:	1ad3      	subs	r3, r2, r3
 801054c:	f242 720f 	movw	r2, #9999	; 0x270f
 8010550:	4293      	cmp	r3, r2
 8010552:	d80c      	bhi.n	801056e <USBH_MSC_Process+0x44a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801055a:	4619      	mov	r1, r3
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	2334      	movs	r3, #52	; 0x34
 8010560:	fb03 f301 	mul.w	r3, r3, r1
 8010564:	4413      	add	r3, r2
 8010566:	3390      	adds	r3, #144	; 0x90
 8010568:	2202      	movs	r2, #2
 801056a:	701a      	strb	r2, [r3, #0]
              break;
 801056c:	e051      	b.n	8010612 <USBH_MSC_Process+0x4ee>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010574:	4619      	mov	r1, r3
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	2334      	movs	r3, #52	; 0x34
 801057a:	fb03 f301 	mul.w	r3, r3, r1
 801057e:	4413      	add	r3, r2
 8010580:	3390      	adds	r3, #144	; 0x90
 8010582:	2201      	movs	r2, #1
 8010584:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801058c:	3301      	adds	r3, #1
 801058e:	b29a      	uxth	r2, r3
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if( scsi_status == USBH_FAIL)
 8010596:	7bfb      	ldrb	r3, [r7, #15]
 8010598:	2b02      	cmp	r3, #2
 801059a:	d10c      	bne.n	80105b6 <USBH_MSC_Process+0x492>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105a2:	4619      	mov	r1, r3
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	2334      	movs	r3, #52	; 0x34
 80105a8:	fb03 f301 	mul.w	r3, r3, r1
 80105ac:	4413      	add	r3, r2
 80105ae:	3390      	adds	r3, #144	; 0x90
 80105b0:	2208      	movs	r2, #8
 80105b2:	701a      	strb	r2, [r3, #0]
        break;  
 80105b4:	e02c      	b.n	8010610 <USBH_MSC_Process+0x4ec>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80105b6:	7bfb      	ldrb	r3, [r7, #15]
 80105b8:	2b04      	cmp	r3, #4
 80105ba:	d129      	bne.n	8010610 <USBH_MSC_Process+0x4ec>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105c2:	4619      	mov	r1, r3
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	2334      	movs	r3, #52	; 0x34
 80105c8:	fb03 f301 	mul.w	r3, r3, r1
 80105cc:	4413      	add	r3, r2
 80105ce:	3390      	adds	r3, #144	; 0x90
 80105d0:	2201      	movs	r2, #1
 80105d2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105da:	4619      	mov	r1, r3
 80105dc:	693a      	ldr	r2, [r7, #16]
 80105de:	2334      	movs	r3, #52	; 0x34
 80105e0:	fb03 f301 	mul.w	r3, r3, r1
 80105e4:	4413      	add	r3, r2
 80105e6:	3391      	adds	r3, #145	; 0x91
 80105e8:	2202      	movs	r2, #2
 80105ea:	701a      	strb	r2, [r3, #0]
        break;  
 80105ec:	e010      	b.n	8010610 <USBH_MSC_Process+0x4ec>
        MSC_Handle->current_lun++;
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105f4:	3301      	adds	r3, #1
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;  
 80105fe:	e008      	b.n	8010612 <USBH_MSC_Process+0x4ee>
        break;
 8010600:	bf00      	nop
 8010602:	e006      	b.n	8010612 <USBH_MSC_Process+0x4ee>
        break;    
 8010604:	bf00      	nop
 8010606:	e004      	b.n	8010612 <USBH_MSC_Process+0x4ee>
        break;
 8010608:	bf00      	nop
 801060a:	e002      	b.n	8010612 <USBH_MSC_Process+0x4ee>
        break;
 801060c:	bf00      	nop
 801060e:	e000      	b.n	8010612 <USBH_MSC_Process+0x4ee>
        break;  
 8010610:	bf00      	nop
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010618:	2200      	movs	r2, #0
 801061a:	2104      	movs	r1, #4
 801061c:	4618      	mov	r0, r3
 801061e:	f7fb fe7d 	bl	800c31c <osMessagePut>
    break;
 8010622:	e018      	b.n	8010656 <USBH_MSC_Process+0x532>
      MSC_Handle->current_lun = 0;
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	2200      	movs	r2, #0
 8010628:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	2201      	movs	r2, #1
 8010630:	731a      	strb	r2, [r3, #12]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010638:	2200      	movs	r2, #0
 801063a:	2104      	movs	r1, #4
 801063c:	4618      	mov	r0, r3
 801063e:	f7fb fe6d 	bl	800c31c <osMessagePut>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010648:	2102      	movs	r1, #2
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	4798      	blx	r3
    break;
 801064e:	e002      	b.n	8010656 <USBH_MSC_Process+0x532>
    error = USBH_OK;  
 8010650:	2300      	movs	r3, #0
 8010652:	75fb      	strb	r3, [r7, #23]
    break;
 8010654:	bf00      	nop
  }
  return error;
 8010656:	7dfb      	ldrb	r3, [r7, #23]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3718      	adds	r7, #24
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr

08010676 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b082      	sub	sp, #8
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2221      	movs	r2, #33	; 0x21
 8010682:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	22ff      	movs	r2, #255	; 0xff
 8010688:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2200      	movs	r2, #0
 801068e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;           
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 801069c:	2200      	movs	r2, #0
 801069e:	2100      	movs	r1, #0
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7ff f816 	bl	800f6d2 <USBH_CtlReq>
 80106a6:	4603      	mov	r3, r0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	22a1      	movs	r2, #161	; 0xa1
 80106be:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	22fe      	movs	r2, #254	; 0xfe
 80106c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2200      	movs	r2, #0
 80106ca:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1;           
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2201      	movs	r2, #1
 80106d6:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 80106d8:	2201      	movs	r2, #1
 80106da:	6839      	ldr	r1, [r7, #0]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f7fe fff8 	bl	800f6d2 <USBH_CtlReq>
 80106e2:	4603      	mov	r3, r0
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b085      	sub	sp, #20
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80106fa:	69db      	ldr	r3, [r3, #28]
 80106fc:	60fb      	str	r3, [r7, #12]
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	4a09      	ldr	r2, [pc, #36]	; (8010728 <USBH_MSC_BOT_Init+0x3c>)
 8010702:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	4a09      	ldr	r2, [pc, #36]	; (801072c <USBH_MSC_BOT_Init+0x40>)
 8010708:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2201      	movs	r2, #1
 801070e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2201      	movs	r2, #1
 8010716:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3714      	adds	r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr
 8010728:	43425355 	.word	0x43425355
 801072c:	20304050 	.word	0x20304050

08010730 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b088      	sub	sp, #32
 8010734:	af02      	add	r7, sp, #8
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	460b      	mov	r3, r1
 801073a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 801073c:	2301      	movs	r3, #1
 801073e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;  
 8010740:	2301      	movs	r3, #1
 8010742:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8010744:	2301      	movs	r3, #1
 8010746:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010748:	2300      	movs	r3, #0
 801074a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010752:	69db      	ldr	r3, [r3, #28]
 8010754:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0;
 8010756:	2300      	movs	r3, #0
 8010758:	73fb      	strb	r3, [r7, #15]
  
  switch (MSC_Handle->hbot.state)
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010760:	3b01      	subs	r3, #1
 8010762:	2b0a      	cmp	r3, #10
 8010764:	f200 81f1 	bhi.w	8010b4a <USBH_MSC_BOT_Process+0x41a>
 8010768:	a201      	add	r2, pc, #4	; (adr r2, 8010770 <USBH_MSC_BOT_Process+0x40>)
 801076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076e:	bf00      	nop
 8010770:	0801079d 	.word	0x0801079d
 8010774:	080107c7 	.word	0x080107c7
 8010778:	08010861 	.word	0x08010861
 801077c:	0801087f 	.word	0x0801087f
 8010780:	08010923 	.word	0x08010923
 8010784:	08010947 	.word	0x08010947
 8010788:	08010a11 	.word	0x08010a11
 801078c:	08010a2d 	.word	0x08010a2d
 8010790:	08010a9f 	.word	0x08010a9f
 8010794:	08010acf 	.word	0x08010acf
 8010798:	08010b31 	.word	0x08010b31
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	78fa      	ldrb	r2, [r7, #3]
 80107a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	2202      	movs	r2, #2
 80107a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost,
                       MSC_Handle->hbot.cbw.data, 
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	f103 0154 	add.w	r1, r3, #84	; 0x54
    USBH_BulkSendData (phost,
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	795a      	ldrb	r2, [r3, #5]
 80107b6:	2301      	movs	r3, #1
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	4613      	mov	r3, r2
 80107bc:	221f      	movs	r2, #31
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff fa0b 	bl	800fbda <USBH_BulkSendData>
                       BOT_CBW_LENGTH, 
                       MSC_Handle->OutPipe,
                       1);
    
    break;
 80107c4:	e1d0      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_SEND_CBW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	795b      	ldrb	r3, [r3, #5]
 80107ca:	4619      	mov	r1, r3
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f004 f8eb 	bl	80149a8 <USBH_LL_GetURBState>
 80107d2:	4603      	mov	r3, r0
 80107d4:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 80107d6:	7d3b      	ldrb	r3, [r7, #20]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d120      	bne.n	801081e <USBH_MSC_BOT_Process+0xee>
    { 
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00f      	beq.n	8010804 <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80107ea:	b25b      	sxtb	r3, r3
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	da04      	bge.n	80107fa <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	2203      	movs	r2, #3
 80107f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80107f8:	e008      	b.n	801080c <USBH_MSC_BOT_Process+0xdc>
        }
        else
        {
          /* Data Direction is OUT */
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	2205      	movs	r2, #5
 80107fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010802:	e003      	b.n	801080c <USBH_MSC_BOT_Process+0xdc>
        } 
      }
      
      else
      {/* If there is NO Data Transfer Stage */
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	2207      	movs	r2, #7
 8010808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010812:	2200      	movs	r2, #0
 8010814:	2102      	movs	r1, #2
 8010816:	4618      	mov	r0, r3
 8010818:	f7fb fd80 	bl	800c31c <osMessagePut>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 801081c:	e197      	b.n	8010b4e <USBH_MSC_BOT_Process+0x41e>
    else if(URB_Status == USBH_URB_NOTREADY)
 801081e:	7d3b      	ldrb	r3, [r7, #20]
 8010820:	2b02      	cmp	r3, #2
 8010822:	d10c      	bne.n	801083e <USBH_MSC_BOT_Process+0x10e>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	2201      	movs	r2, #1
 8010828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010832:	2200      	movs	r2, #0
 8010834:	2102      	movs	r1, #2
 8010836:	4618      	mov	r0, r3
 8010838:	f7fb fd70 	bl	800c31c <osMessagePut>
    break;
 801083c:	e187      	b.n	8010b4e <USBH_MSC_BOT_Process+0x41e>
    else if(URB_Status == USBH_URB_STALL)
 801083e:	7d3b      	ldrb	r3, [r7, #20]
 8010840:	2b05      	cmp	r3, #5
 8010842:	f040 8184 	bne.w	8010b4e <USBH_MSC_BOT_Process+0x41e>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	220a      	movs	r2, #10
 801084a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010854:	2200      	movs	r2, #0
 8010856:	2102      	movs	r1, #2
 8010858:	4618      	mov	r0, r3
 801085a:	f7fb fd5f 	bl	800c31c <osMessagePut>
    break;
 801085e:	e176      	b.n	8010b4e <USBH_MSC_BOT_Process+0x41e>
    
  case BOT_DATA_IN:   
    /* Send first packet */        
    USBH_BulkReceiveData (phost,
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	895a      	ldrh	r2, [r3, #10]
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	791b      	ldrb	r3, [r3, #4]
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7ff f9d8 	bl	800fc24 <USBH_BulkReceiveData>
                          MSC_Handle->hbot.pbuf, 
                          MSC_Handle->InEpSize , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	2204      	movs	r2, #4
 8010878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    break;   
 801087c:	e174      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_DATA_IN_WAIT:  
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	791b      	ldrb	r3, [r3, #4]
 8010882:	4619      	mov	r1, r3
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f004 f88f 	bl	80149a8 <USBH_LL_GetURBState>
 801088a:	4603      	mov	r3, r0
 801088c:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE) 
 801088e:	7d3b      	ldrb	r3, [r7, #20]
 8010890:	2b01      	cmp	r3, #1
 8010892:	d135      	bne.n	8010900 <USBH_MSC_BOT_Process+0x1d0>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010898:	693a      	ldr	r2, [r7, #16]
 801089a:	8952      	ldrh	r2, [r2, #10]
 801089c:	4293      	cmp	r3, r2
 801089e:	d910      	bls.n	80108c2 <USBH_MSC_BOT_Process+0x192>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108a6:	693a      	ldr	r2, [r7, #16]
 80108a8:	8952      	ldrh	r2, [r2, #10]
 80108aa:	441a      	add	r2, r3
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108b6:	693a      	ldr	r2, [r7, #16]
 80108b8:	8952      	ldrh	r2, [r2, #10]
 80108ba:	1a9a      	subs	r2, r3, r2
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	65da      	str	r2, [r3, #92]	; 0x5c
 80108c0:	e002      	b.n	80108c8 <USBH_MSC_BOT_Process+0x198>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	2200      	movs	r2, #0
 80108c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
        
      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00a      	beq.n	80108e6 <USBH_MSC_BOT_Process+0x1b6>
      {
        /* Send next packet */        
        USBH_BulkReceiveData (phost,
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	895a      	ldrh	r2, [r3, #10]
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	791b      	ldrb	r3, [r3, #4]
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f7ff f9a0 	bl	800fc24 <USBH_BulkReceiveData>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }     
    break;  
 80108e4:	e135      	b.n	8010b52 <USBH_MSC_BOT_Process+0x422>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	2207      	movs	r2, #7
 80108ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80108f4:	2200      	movs	r2, #0
 80108f6:	2102      	movs	r1, #2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fb fd0f 	bl	800c31c <osMessagePut>
    break;  
 80108fe:	e128      	b.n	8010b52 <USBH_MSC_BOT_Process+0x422>
    else if(URB_Status == USBH_URB_STALL)
 8010900:	7d3b      	ldrb	r3, [r7, #20]
 8010902:	2b05      	cmp	r3, #5
 8010904:	f040 8125 	bne.w	8010b52 <USBH_MSC_BOT_Process+0x422>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	2209      	movs	r2, #9
 801090c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010916:	2200      	movs	r2, #0
 8010918:	2102      	movs	r1, #2
 801091a:	4618      	mov	r0, r3
 801091c:	f7fb fcfe 	bl	800c31c <osMessagePut>
    break;  
 8010920:	e117      	b.n	8010b52 <USBH_MSC_BOT_Process+0x422>
    
  case BOT_DATA_OUT:
    
    USBH_BulkSendData (phost,
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	891a      	ldrh	r2, [r3, #8]
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	7958      	ldrb	r0, [r3, #5]
 8010930:	2301      	movs	r3, #1
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	4603      	mov	r3, r0
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f7ff f94f 	bl	800fbda <USBH_BulkSendData>
                       MSC_Handle->OutEpSize , 
                       MSC_Handle->OutPipe,
                       1);
    
    
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	2206      	movs	r2, #6
 8010940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010944:	e110      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	795b      	ldrb	r3, [r3, #5]
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f004 f82b 	bl	80149a8 <USBH_LL_GetURBState>
 8010952:	4603      	mov	r3, r0
 8010954:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 8010956:	7d3b      	ldrb	r3, [r7, #20]
 8010958:	2b01      	cmp	r3, #1
 801095a:	d138      	bne.n	80109ce <USBH_MSC_BOT_Process+0x29e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010960:	693a      	ldr	r2, [r7, #16]
 8010962:	8912      	ldrh	r2, [r2, #8]
 8010964:	4293      	cmp	r3, r2
 8010966:	d910      	bls.n	801098a <USBH_MSC_BOT_Process+0x25a>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801096e:	693a      	ldr	r2, [r7, #16]
 8010970:	8912      	ldrh	r2, [r2, #8]
 8010972:	441a      	add	r2, r3
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801097e:	693a      	ldr	r2, [r7, #16]
 8010980:	8912      	ldrh	r2, [r2, #8]
 8010982:	1a9a      	subs	r2, r3, r2
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	65da      	str	r2, [r3, #92]	; 0x5c
 8010988:	e002      	b.n	8010990 <USBH_MSC_BOT_Process+0x260>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	2200      	movs	r2, #0
 801098e:	65da      	str	r2, [r3, #92]	; 0x5c
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010994:	2b00      	cmp	r3, #0
 8010996:	d00d      	beq.n	80109b4 <USBH_MSC_BOT_Process+0x284>
      {
        USBH_BulkSendData (phost,
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	891a      	ldrh	r2, [r3, #8]
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	7958      	ldrb	r0, [r3, #5]
 80109a6:	2301      	movs	r3, #1
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	4603      	mov	r3, r0
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7ff f914 	bl	800fbda <USBH_BulkSendData>
 80109b2:	e003      	b.n	80109bc <USBH_MSC_BOT_Process+0x28c>
                           1);
      }
      else
      {
        /* If value was 0, and successful transfer, then change the state */
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	2207      	movs	r2, #7
 80109b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80109c2:	2200      	movs	r2, #0
 80109c4:	2102      	movs	r1, #2
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7fb fca8 	bl	800c31c <osMessagePut>
      */      
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 80109cc:	e0c3      	b.n	8010b56 <USBH_MSC_BOT_Process+0x426>
    else if(URB_Status == USBH_URB_NOTREADY)
 80109ce:	7d3b      	ldrb	r3, [r7, #20]
 80109d0:	2b02      	cmp	r3, #2
 80109d2:	d10c      	bne.n	80109ee <USBH_MSC_BOT_Process+0x2be>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	2205      	movs	r2, #5
 80109d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80109e2:	2200      	movs	r2, #0
 80109e4:	2102      	movs	r1, #2
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fb fc98 	bl	800c31c <osMessagePut>
    break;
 80109ec:	e0b3      	b.n	8010b56 <USBH_MSC_BOT_Process+0x426>
    else if(URB_Status == USBH_URB_STALL)
 80109ee:	7d3b      	ldrb	r3, [r7, #20]
 80109f0:	2b05      	cmp	r3, #5
 80109f2:	f040 80b0 	bne.w	8010b56 <USBH_MSC_BOT_Process+0x426>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	220a      	movs	r2, #10
 80109fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010a04:	2200      	movs	r2, #0
 8010a06:	2102      	movs	r1, #2
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fb fc87 	bl	800c31c <osMessagePut>
    break;
 8010a0e:	e0a2      	b.n	8010b56 <USBH_MSC_BOT_Process+0x426>
    
  case BOT_RECEIVE_CSW:
    
    USBH_BulkReceiveData (phost,
                          MSC_Handle->hbot.csw.data, 
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	f103 0178 	add.w	r1, r3, #120	; 0x78
    USBH_BulkReceiveData (phost,
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	791b      	ldrb	r3, [r3, #4]
 8010a1a:	220d      	movs	r2, #13
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff f901 	bl	800fc24 <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	2208      	movs	r2, #8
 8010a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010a2a:	e09d      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_RECEIVE_CSW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	791b      	ldrb	r3, [r3, #4]
 8010a30:	4619      	mov	r1, r3
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f003 ffb8 	bl	80149a8 <USBH_LL_GetURBState>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	753b      	strb	r3, [r7, #20]
    
    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 8010a3c:	7d3b      	ldrb	r3, [r7, #20]
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d11d      	bne.n	8010a7e <USBH_MSC_BOT_Process+0x34e>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	2201      	movs	r2, #1
 8010a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 f8ba 	bl	8010bcc <USBH_MSC_DecodeCSW>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	757b      	strb	r3, [r7, #21]
      
      if(CSW_Status == BOT_CSW_CMD_PASSED)
 8010a5c:	7d7b      	ldrb	r3, [r7, #21]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d102      	bne.n	8010a68 <USBH_MSC_BOT_Process+0x338>
      {
        status = USBH_OK;
 8010a62:	2300      	movs	r3, #0
 8010a64:	75fb      	strb	r3, [r7, #23]
 8010a66:	e001      	b.n	8010a6c <USBH_MSC_BOT_Process+0x33c>
      }
      else
      {
        status = USBH_FAIL;
 8010a68:	2302      	movs	r3, #2
 8010a6a:	75fb      	strb	r3, [r7, #23]
      }
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010a72:	2200      	movs	r2, #0
 8010a74:	2102      	movs	r1, #2
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fb fc50 	bl	800c31c <osMessagePut>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 8010a7c:	e06d      	b.n	8010b5a <USBH_MSC_BOT_Process+0x42a>
    else if(URB_Status == USBH_URB_STALL)     
 8010a7e:	7d3b      	ldrb	r3, [r7, #20]
 8010a80:	2b05      	cmp	r3, #5
 8010a82:	d16a      	bne.n	8010b5a <USBH_MSC_BOT_Process+0x42a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	2209      	movs	r2, #9
 8010a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010a92:	2200      	movs	r2, #0
 8010a94:	2102      	movs	r1, #2
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fb fc40 	bl	800c31c <osMessagePut>
    break;
 8010a9c:	e05d      	b.n	8010b5a <USBH_MSC_BOT_Process+0x42a>
    
  case BOT_ERROR_IN: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8010a9e:	78fb      	ldrb	r3, [r7, #3]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 f865 	bl	8010b74 <USBH_MSC_BOT_Abort>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	75bb      	strb	r3, [r7, #22]
    
    if (error == USBH_OK)
 8010aae:	7dbb      	ldrb	r3, [r7, #22]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d104      	bne.n	8010abe <USBH_MSC_BOT_Process+0x38e>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	2207      	movs	r2, #7
 8010ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      /* This means that there is a STALL Error limit, Do Reset Recovery */
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8010abc:	e04f      	b.n	8010b5e <USBH_MSC_BOT_Process+0x42e>
    else if (error == USBH_UNRECOVERED_ERROR)
 8010abe:	7dbb      	ldrb	r3, [r7, #22]
 8010ac0:	2b04      	cmp	r3, #4
 8010ac2:	d14c      	bne.n	8010b5e <USBH_MSC_BOT_Process+0x42e>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	220b      	movs	r2, #11
 8010ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010acc:	e047      	b.n	8010b5e <USBH_MSC_BOT_Process+0x42e>
    
  case BOT_ERROR_OUT: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8010ace:	78fb      	ldrb	r3, [r7, #3]
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 f84d 	bl	8010b74 <USBH_MSC_BOT_Abort>
 8010ada:	4603      	mov	r3, r0
 8010adc:	75bb      	strb	r3, [r7, #22]
    
    if ( error == USBH_OK)
 8010ade:	7dbb      	ldrb	r3, [r7, #22]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d11d      	bne.n	8010b20 <USBH_MSC_BOT_Process+0x3f0>
    { 
      
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	795b      	ldrb	r3, [r3, #5]
 8010ae8:	4619      	mov	r1, r3
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f003 ffb0 	bl	8014a50 <USBH_LL_GetToggle>
 8010af0:	4603      	mov	r3, r0
 8010af2:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	7959      	ldrb	r1, [r3, #5]
 8010af8:	7bfb      	ldrb	r3, [r7, #15]
 8010afa:	f1c3 0301 	rsb	r3, r3, #1
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	461a      	mov	r2, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f003 ff71 	bl	80149ea <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	791b      	ldrb	r3, [r3, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	4619      	mov	r1, r3
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f003 ff6a 	bl	80149ea <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;        
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	2209      	movs	r2, #9
 8010b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8010b1e:	e020      	b.n	8010b62 <USBH_MSC_BOT_Process+0x432>
    else if (error == USBH_UNRECOVERED_ERROR)
 8010b20:	7dbb      	ldrb	r3, [r7, #22]
 8010b22:	2b04      	cmp	r3, #4
 8010b24:	d11d      	bne.n	8010b62 <USBH_MSC_BOT_Process+0x432>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	220b      	movs	r2, #11
 8010b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010b2e:	e018      	b.n	8010b62 <USBH_MSC_BOT_Process+0x432>
    
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f7ff fda0 	bl	8010676 <USBH_MSC_BOT_REQ_Reset>
 8010b36:	4603      	mov	r3, r0
 8010b38:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 8010b3a:	7dfb      	ldrb	r3, [r7, #23]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d112      	bne.n	8010b66 <USBH_MSC_BOT_Process+0x436>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	2201      	movs	r2, #1
 8010b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 8010b48:	e00d      	b.n	8010b66 <USBH_MSC_BOT_Process+0x436>
    
  default:      
    break;
 8010b4a:	bf00      	nop
 8010b4c:	e00c      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    break;
 8010b4e:	bf00      	nop
 8010b50:	e00a      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    break;  
 8010b52:	bf00      	nop
 8010b54:	e008      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    break;
 8010b56:	bf00      	nop
 8010b58:	e006      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    break;
 8010b5a:	bf00      	nop
 8010b5c:	e004      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    break;
 8010b5e:	bf00      	nop
 8010b60:	e002      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    break;
 8010b62:	bf00      	nop
 8010b64:	e000      	b.n	8010b68 <USBH_MSC_BOT_Process+0x438>
    break;
 8010b66:	bf00      	nop
  }
  return status;
 8010b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3718      	adds	r7, #24
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop

08010b74 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	70fb      	strb	r3, [r7, #3]
 8010b80:	4613      	mov	r3, r2
 8010b82:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 8010b84:	2302      	movs	r3, #2
 8010b86:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010b8e:	69db      	ldr	r3, [r3, #28]
 8010b90:	60bb      	str	r3, [r7, #8]
  
  switch (dir)
 8010b92:	78bb      	ldrb	r3, [r7, #2]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d002      	beq.n	8010b9e <USBH_MSC_BOT_Abort+0x2a>
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d009      	beq.n	8010bb0 <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;
    
  default:
    break;
 8010b9c:	e011      	b.n	8010bc2 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	79db      	ldrb	r3, [r3, #7]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7fe fbb0 	bl	800f30a <USBH_ClrFeature>
 8010baa:	4603      	mov	r3, r0
 8010bac:	73fb      	strb	r3, [r7, #15]
    break;
 8010bae:	e008      	b.n	8010bc2 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	799b      	ldrb	r3, [r3, #6]
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f7fe fba7 	bl	800f30a <USBH_ClrFeature>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8010bc0:	bf00      	nop
  }
  return status;
 8010bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010bda:	69db      	ldr	r3, [r3, #28]
 8010bdc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8010bde:	2301      	movs	r3, #1
 8010be0:	73fb      	strb	r3, [r7, #15]
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	791b      	ldrb	r3, [r3, #4]
 8010be6:	4619      	mov	r1, r3
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f003 fe05 	bl	80147f8 <USBH_LL_GetLastXferSize>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b0d      	cmp	r3, #13
 8010bf2:	d002      	beq.n	8010bfa <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/
      
      
      status = BOT_CSW_PHASE_ERROR;
 8010bf4:	2302      	movs	r3, #2
 8010bf6:	73fb      	strb	r3, [r7, #15]
 8010bf8:	e024      	b.n	8010c44 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bfe:	4a14      	ldr	r2, [pc, #80]	; (8010c50 <USBH_MSC_DecodeCSW+0x84>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d11d      	bne.n	8010c40 <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d119      	bne.n	8010c44 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d102      	bne.n	8010c20 <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            
            */
            
            status = BOT_CSW_CMD_PASSED;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	73fb      	strb	r3, [r7, #15]
 8010c1e:	e011      	b.n	8010c44 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1)
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d102      	bne.n	8010c30 <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	73fb      	strb	r3, [r7, #15]
 8010c2e:	e009      	b.n	8010c44 <USBH_MSC_DecodeCSW+0x78>
          }
          
          else if(MSC_Handle->hbot.csw.field.Status == 2)
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010c36:	2b02      	cmp	r3, #2
 8010c38:	d104      	bne.n	8010c44 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            */
            
            status = BOT_CSW_PHASE_ERROR;
 8010c3a:	2302      	movs	r3, #2
 8010c3c:	73fb      	strb	r3, [r7, #15]
 8010c3e:	e001      	b.n	8010c44 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */
        
        status = BOT_CSW_PHASE_ERROR;
 8010c40:	2302      	movs	r3, #2
 8010c42:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/
    
  return status;
 8010c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	53425355 	.word	0x53425355

08010c54 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010c60:	2302      	movs	r3, #2
 8010c62:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010c6a:	69db      	ldr	r3, [r3, #28]
 8010c6c:	60bb      	str	r3, [r7, #8]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d002      	beq.n	8010c7e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8010c78:	2b02      	cmp	r3, #2
 8010c7a:	d021      	beq.n	8010cc0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 8010c7c:	e028      	b.n	8010cd0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2200      	movs	r2, #0
 8010c82:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	220a      	movs	r2, #10
 8010c90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	3363      	adds	r3, #99	; 0x63
 8010c98:	2210      	movs	r2, #16
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f004 f85e 	bl	8014d5e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2201      	movs	r2, #1
 8010cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY; 
 8010cba:	2301      	movs	r3, #1
 8010cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8010cbe:	e007      	b.n	8010cd0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010cc0:	78fb      	ldrb	r3, [r7, #3]
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7ff fd33 	bl	8010730 <USBH_MSC_BOT_Process>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8010cce:	bf00      	nop
  }
  
  return error;
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3710      	adds	r7, #16
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}

08010cda <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8010cda:	b580      	push	{r7, lr}
 8010cdc:	b086      	sub	sp, #24
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	60f8      	str	r0, [r7, #12]
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	607a      	str	r2, [r7, #4]
 8010ce6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010cf2:	69db      	ldr	r3, [r3, #28]
 8010cf4:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d002      	beq.n	8010d06 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8010d00:	2b02      	cmp	r3, #2
 8010d02:	d027      	beq.n	8010d54 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
    }
    break;
    
  default:
    break;
 8010d04:	e060      	b.n	8010dc8 <USBH_MSC_SCSI_ReadCapacity+0xee>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	2208      	movs	r2, #8
 8010d0a:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	2280      	movs	r2, #128	; 0x80
 8010d10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	220a      	movs	r2, #10
 8010d18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	3363      	adds	r3, #99	; 0x63
 8010d20:	2210      	movs	r2, #16
 8010d22:	2100      	movs	r1, #0
 8010d24:	4618      	mov	r0, r3
 8010d26:	f004 f81a 	bl	8014d5e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	2225      	movs	r2, #37	; 0x25
 8010d2e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	2201      	movs	r2, #1
 8010d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	2202      	movs	r2, #2
 8010d3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	f103 0210 	add.w	r2, r3, #16
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010d4e:	2301      	movs	r3, #1
 8010d50:	75fb      	strb	r3, [r7, #23]
    break;
 8010d52:	e039      	b.n	8010dc8 <USBH_MSC_SCSI_ReadCapacity+0xee>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010d54:	7afb      	ldrb	r3, [r7, #11]
 8010d56:	4619      	mov	r1, r3
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f7ff fce9 	bl	8010730 <USBH_MSC_BOT_Process>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010d62:	7dfb      	ldrb	r3, [r7, #23]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d12e      	bne.n	8010dc6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d6e:	3303      	adds	r3, #3
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	461a      	mov	r2, r3
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d7a:	3302      	adds	r3, #2
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	021b      	lsls	r3, r3, #8
 8010d80:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d88:	3301      	adds	r3, #1
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010d8e:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	061b      	lsls	r3, r3, #24
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	461a      	mov	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	601a      	str	r2, [r3, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010da8:	3307      	adds	r3, #7
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	b21a      	sxth	r2, r3
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010db4:	3306      	adds	r3, #6
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	021b      	lsls	r3, r3, #8
 8010dba:	b21b      	sxth	r3, r3
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	b21b      	sxth	r3, r3
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	809a      	strh	r2, [r3, #4]
    break;
 8010dc6:	bf00      	nop
  }
  
  return error;
 8010dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b086      	sub	sp, #24
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	60f8      	str	r0, [r7, #12]
 8010dda:	460b      	mov	r3, r1
 8010ddc:	607a      	str	r2, [r7, #4]
 8010dde:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010de0:	2302      	movs	r3, #2
 8010de2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010dea:	69db      	ldr	r3, [r3, #28]
 8010dec:	613b      	str	r3, [r7, #16]
  switch(MSC_Handle->hbot.cmd_state)
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d002      	beq.n	8010dfe <USBH_MSC_SCSI_Inquiry+0x2c>
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d03d      	beq.n	8010e78 <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
    }
    break;
    
  default:
    break;
 8010dfc:	e086      	b.n	8010f0c <USBH_MSC_SCSI_Inquiry+0x13a>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	2224      	movs	r2, #36	; 0x24
 8010e02:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	2280      	movs	r2, #128	; 0x80
 8010e08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	220a      	movs	r2, #10
 8010e10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	3363      	adds	r3, #99	; 0x63
 8010e18:	220a      	movs	r2, #10
 8010e1a:	2100      	movs	r1, #0
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f003 ff9e 	bl	8014d5e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	2212      	movs	r2, #18
 8010e26:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8010e2a:	7afb      	ldrb	r3, [r7, #11]
 8010e2c:	015b      	lsls	r3, r3, #5
 8010e2e:	b2da      	uxtb	r2, r3
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	2224      	movs	r2, #36	; 0x24
 8010e4a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	2200      	movs	r2, #0
 8010e52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	2201      	movs	r2, #1
 8010e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	2202      	movs	r2, #2
 8010e62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	f103 0210 	add.w	r2, r3, #16
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010e72:	2301      	movs	r3, #1
 8010e74:	75fb      	strb	r3, [r7, #23]
    break;
 8010e76:	e049      	b.n	8010f0c <USBH_MSC_SCSI_Inquiry+0x13a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010e78:	7afb      	ldrb	r3, [r7, #11]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f7ff fc57 	bl	8010730 <USBH_MSC_BOT_Process>
 8010e82:	4603      	mov	r3, r0
 8010e84:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d13e      	bne.n	8010f0a <USBH_MSC_SCSI_Inquiry+0x138>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8010e8c:	2222      	movs	r2, #34	; 0x22
 8010e8e:	2100      	movs	r1, #0
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f003 ff64 	bl	8014d5e <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	f003 031f 	and.w	r3, r3, #31
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8010ea8:	693b      	ldr	r3, [r7, #16]
 8010eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	095b      	lsrs	r3, r3, #5
 8010eb2:	b2da      	uxtb	r2, r3
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	701a      	strb	r2, [r3, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	b25b      	sxtb	r3, r3
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	09db      	lsrs	r3, r3, #7
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	461a      	mov	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	1cd8      	adds	r0, r3, #3
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010eda:	3308      	adds	r3, #8
 8010edc:	2208      	movs	r2, #8
 8010ede:	4619      	mov	r1, r3
 8010ee0:	f003 ff32 	bl	8014d48 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f103 000c 	add.w	r0, r3, #12
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ef0:	3310      	adds	r3, #16
 8010ef2:	2210      	movs	r2, #16
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	f003 ff27 	bl	8014d48 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	331d      	adds	r3, #29
 8010efe:	693a      	ldr	r2, [r7, #16]
 8010f00:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8010f04:	3220      	adds	r2, #32
 8010f06:	6812      	ldr	r2, [r2, #0]
 8010f08:	601a      	str	r2, [r3, #0]
    break;
 8010f0a:	bf00      	nop
  }
  
  return error;
 8010f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3718      	adds	r7, #24
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}

08010f16 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 8010f16:	b580      	push	{r7, lr}
 8010f18:	b086      	sub	sp, #24
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	60f8      	str	r0, [r7, #12]
 8010f1e:	460b      	mov	r3, r1
 8010f20:	607a      	str	r2, [r7, #4]
 8010f22:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010f24:	2302      	movs	r3, #2
 8010f26:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010f2e:	69db      	ldr	r3, [r3, #28]
 8010f30:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d002      	beq.n	8010f42 <USBH_MSC_SCSI_RequestSense+0x2c>
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d03d      	beq.n	8010fbc <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;
    
  default:
    break;
 8010f40:	e05d      	b.n	8010ffe <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	220e      	movs	r2, #14
 8010f46:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	2280      	movs	r2, #128	; 0x80
 8010f4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	220a      	movs	r2, #10
 8010f54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	3363      	adds	r3, #99	; 0x63
 8010f5c:	2210      	movs	r2, #16
 8010f5e:	2100      	movs	r1, #0
 8010f60:	4618      	mov	r0, r3
 8010f62:	f003 fefc 	bl	8014d5e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	2203      	movs	r2, #3
 8010f6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8010f6e:	7afb      	ldrb	r3, [r7, #11]
 8010f70:	015b      	lsls	r3, r3, #5
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	220e      	movs	r2, #14
 8010f8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	2202      	movs	r2, #2
 8010fa6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	f103 0210 	add.w	r2, r3, #16
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	75fb      	strb	r3, [r7, #23]
    break;
 8010fba:	e020      	b.n	8010ffe <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010fbc:	7afb      	ldrb	r3, [r7, #11]
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f7ff fbb5 	bl	8010730 <USBH_MSC_BOT_Process>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010fca:	7dfb      	ldrb	r3, [r7, #23]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d115      	bne.n	8010ffc <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010fd6:	3302      	adds	r3, #2
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	f003 030f 	and.w	r3, r3, #15
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010fea:	7b1a      	ldrb	r2, [r3, #12]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ff6:	7b5a      	ldrb	r2, [r3, #13]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	709a      	strb	r2, [r3, #2]
    break;
 8010ffc:	bf00      	nop
  }
  
  return error;
 8010ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3718      	adds	r7, #24
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <String_GetString>:
//
//         Any character typed other than those above will be masked with 0x7F and stored in the buffer
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_GetString( uint8_t *Buffer )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
    uint16_t Length = 0;
 8011010:	2300      	movs	r3, #0
 8011012:	82fb      	strh	r3, [r7, #22]
    uint16_t Byte = 1;
 8011014:	2301      	movs	r3, #1
 8011016:	82bb      	strh	r3, [r7, #20]
    uint8_t  *Ptr;
    //
    //  Looop until exited
    //
    Ptr = Buffer;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	613b      	str	r3, [r7, #16]
    while ( Byte != 0 )
 801101c:	e086      	b.n	801112c <String_GetString+0x124>
    {
        //
        //  Get the byte
        //
        Byte = String_GetByte() & ASCII_MASK;
 801101e:	f000 f8c3 	bl	80111a8 <String_GetByte>
 8011022:	4603      	mov	r3, r0
 8011024:	b29b      	uxth	r3, r3
 8011026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801102a:	82bb      	strh	r3, [r7, #20]
        //
        //  Handle special characters
        //
        switch ( Byte )
 801102c:	8abb      	ldrh	r3, [r7, #20]
 801102e:	3b03      	subs	r3, #3
 8011030:	2b18      	cmp	r3, #24
 8011032:	d86c      	bhi.n	801110e <String_GetString+0x106>
 8011034:	a201      	add	r2, pc, #4	; (adr r2, 801103c <String_GetString+0x34>)
 8011036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801103a:	bf00      	nop
 801103c:	080110cb 	.word	0x080110cb
 8011040:	0801110f 	.word	0x0801110f
 8011044:	0801110f 	.word	0x0801110f
 8011048:	0801110f 	.word	0x0801110f
 801104c:	0801110f 	.word	0x0801110f
 8011050:	080110ad 	.word	0x080110ad
 8011054:	0801110f 	.word	0x0801110f
 8011058:	080110a1 	.word	0x080110a1
 801105c:	0801110f 	.word	0x0801110f
 8011060:	0801110f 	.word	0x0801110f
 8011064:	080110a1 	.word	0x080110a1
 8011068:	0801110f 	.word	0x0801110f
 801106c:	0801110f 	.word	0x0801110f
 8011070:	0801110f 	.word	0x0801110f
 8011074:	0801110f 	.word	0x0801110f
 8011078:	080110d5 	.word	0x080110d5
 801107c:	0801110f 	.word	0x0801110f
 8011080:	0801110f 	.word	0x0801110f
 8011084:	080110e9 	.word	0x080110e9
 8011088:	0801110f 	.word	0x0801110f
 801108c:	080110e9 	.word	0x080110e9
 8011090:	0801110f 	.word	0x0801110f
 8011094:	0801110f 	.word	0x0801110f
 8011098:	0801110f 	.word	0x0801110f
 801109c:	080110e9 	.word	0x080110e9
            case '\n':
            case '\r':
                //
                //  Add a null to the end of the buffer
                //
                *Ptr = '\0';
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	2200      	movs	r2, #0
 80110a4:	701a      	strb	r2, [r3, #0]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	82bb      	strh	r3, [r7, #20]
                break;
 80110aa:	e03f      	b.n	801112c <String_GetString+0x124>
            case '\b':
                //
                //  If we have characters to delete
                //  then delete the last one and decrement the length
                //
                if (Ptr > Buffer )
 80110ac:	693a      	ldr	r2, [r7, #16]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d93b      	bls.n	801112c <String_GetString+0x124>
                {
                    Ptr--;
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	3b01      	subs	r3, #1
 80110b8:	613b      	str	r3, [r7, #16]
                    Length--;
 80110ba:	8afb      	ldrh	r3, [r7, #22]
 80110bc:	3b01      	subs	r3, #1
 80110be:	82fb      	strh	r3, [r7, #22]
                    //
                    //  Erase the character
                    //
                    String_PutStringN("\b \b", 3);
 80110c0:	2103      	movs	r1, #3
 80110c2:	481f      	ldr	r0, [pc, #124]	; (8011140 <String_GetString+0x138>)
 80110c4:	f000 f840 	bl	8011148 <String_PutStringN>
                }
                break;
 80110c8:	e030      	b.n	801112c <String_GetString+0x124>
            //
            case 'c' & CONTROL_MASK:
                //
                //  Set the length to zero
                //
                Length = 0;
 80110ca:	2300      	movs	r3, #0
 80110cc:	82fb      	strh	r3, [r7, #22]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 80110ce:	2300      	movs	r3, #0
 80110d0:	82bb      	strh	r3, [r7, #20]
                break;
 80110d2:	e02b      	b.n	801112c <String_GetString+0x124>
            //
            case 'r' & CONTROL_MASK:
                //
                //  new line
                //
                String_PutStringN( "\n\r", 2);
 80110d4:	2102      	movs	r1, #2
 80110d6:	481b      	ldr	r0, [pc, #108]	; (8011144 <String_GetString+0x13c>)
 80110d8:	f000 f836 	bl	8011148 <String_PutStringN>
                //
                //  output buffer
                //
                String_PutStringN( (char *)Buffer, Length );
 80110dc:	8afb      	ldrh	r3, [r7, #22]
 80110de:	4619      	mov	r1, r3
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f831 	bl	8011148 <String_PutStringN>
                break;
 80110e6:	e021      	b.n	801112c <String_GetString+0x124>
            {
                uint16_t Counter;
                //
                //  Point to the beginning of the buffer
                //
                Ptr = Buffer;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	613b      	str	r3, [r7, #16]
                //
                //  Erase the line visually
                //
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 80110ec:	2300      	movs	r3, #0
 80110ee:	81fb      	strh	r3, [r7, #14]
 80110f0:	e006      	b.n	8011100 <String_GetString+0xf8>
                {
                    String_PutStringN("\b \b", 3);
 80110f2:	2103      	movs	r1, #3
 80110f4:	4812      	ldr	r0, [pc, #72]	; (8011140 <String_GetString+0x138>)
 80110f6:	f000 f827 	bl	8011148 <String_PutStringN>
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 80110fa:	89fb      	ldrh	r3, [r7, #14]
 80110fc:	3301      	adds	r3, #1
 80110fe:	81fb      	strh	r3, [r7, #14]
 8011100:	89fa      	ldrh	r2, [r7, #14]
 8011102:	8afb      	ldrh	r3, [r7, #22]
 8011104:	429a      	cmp	r2, r3
 8011106:	d3f4      	bcc.n	80110f2 <String_GetString+0xea>
                }
                //
                //  Zero out the length of the string
                //
                Length = 0;
 8011108:	2300      	movs	r3, #0
 801110a:	82fb      	strh	r3, [r7, #22]
                break;
 801110c:	e00e      	b.n	801112c <String_GetString+0x124>
            //
            default:
                //
                //  Store the byte
                //
                *(Ptr++) = Byte;
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	1c5a      	adds	r2, r3, #1
 8011112:	613a      	str	r2, [r7, #16]
 8011114:	8aba      	ldrh	r2, [r7, #20]
 8011116:	b2d2      	uxtb	r2, r2
 8011118:	701a      	strb	r2, [r3, #0]
                //
                //  Increment the length
                //
                Length++;
 801111a:	8afb      	ldrh	r3, [r7, #22]
 801111c:	3301      	adds	r3, #1
 801111e:	82fb      	strh	r3, [r7, #22]
                //
                // Echo it back to the user
                //
                String_PutByte( Byte );
 8011120:	8abb      	ldrh	r3, [r7, #20]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	4618      	mov	r0, r3
 8011126:	f000 f82b 	bl	8011180 <String_PutByte>
                break;
 801112a:	bf00      	nop
    while ( Byte != 0 )
 801112c:	8abb      	ldrh	r3, [r7, #20]
 801112e:	2b00      	cmp	r3, #0
 8011130:	f47f af75 	bne.w	801101e <String_GetString+0x16>
        }
    }
    return Length;
 8011134:	8afb      	ldrh	r3, [r7, #22]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3718      	adds	r7, #24
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	08015d9c 	.word	0x08015d9c
 8011144:	08015da0 	.word	0x08015da0

08011148 <String_PutStringN>:
//
//  Note:   This routine interfaces directly with the STM32CubeMX Hal
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_PutStringN( char *Buffer, uint16_t Length )
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	460b      	mov	r3, r1
 8011152:	807b      	strh	r3, [r7, #2]
    //
    //  Don't do anything if length is zero
    //
    if ( Length > 0 )
 8011154:	887b      	ldrh	r3, [r7, #2]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00d      	beq.n	8011176 <String_PutStringN+0x2e>
        //
#else
            //
            //  Loop through the buffer
            //
            for ( ; Length > 0 ; Length-- )
 801115a:	e009      	b.n	8011170 <String_PutStringN+0x28>
            {
                //
                //  output a character
                //
                String_PutByte( (uint8_t)*(Buffer++) );
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	1c5a      	adds	r2, r3, #1
 8011160:	607a      	str	r2, [r7, #4]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	4618      	mov	r0, r3
 8011166:	f000 f80b 	bl	8011180 <String_PutByte>
            for ( ; Length > 0 ; Length-- )
 801116a:	887b      	ldrh	r3, [r7, #2]
 801116c:	3b01      	subs	r3, #1
 801116e:	807b      	strh	r3, [r7, #2]
 8011170:	887b      	ldrh	r3, [r7, #2]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1f2      	bne.n	801115c <String_PutStringN+0x14>
            }
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    }
    return Length;
 8011176:	887b      	ldrh	r3, [r7, #2]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <String_PutByte>:
//  Note:   This function interfaces directly with the STM32CubeMX Hal
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_PutByte( uint8_t Byte )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	4603      	mov	r3, r0
 8011188:	71fb      	strb	r3, [r7, #7]
//
#else
    //
    //  output the byte normally
    //
    HAL_UART_Transmit(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 801118a:	1df9      	adds	r1, r7, #7
 801118c:	f04f 33ff 	mov.w	r3, #4294967295
 8011190:	2201      	movs	r2, #1
 8011192:	4804      	ldr	r0, [pc, #16]	; (80111a4 <String_PutByte+0x24>)
 8011194:	f7f5 ff99 	bl	80070ca <HAL_UART_Transmit>
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    return Byte;
 8011198:	79fb      	ldrb	r3, [r7, #7]
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	2000fc60 	.word	0x2000fc60

080111a8 <String_GetByte>:
//          String_GetRxStatus.
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_GetByte( void )
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
    uint8_t Byte;
    //
    //  read the byte normally
    //
    HAL_UART_Receive(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 80111ae:	1df9      	adds	r1, r7, #7
 80111b0:	f04f 33ff 	mov.w	r3, #4294967295
 80111b4:	2201      	movs	r2, #1
 80111b6:	4804      	ldr	r0, [pc, #16]	; (80111c8 <String_GetByte+0x20>)
 80111b8:	f7f6 f812 	bl	80071e0 <HAL_UART_Receive>
    return Byte;
 80111bc:	79fb      	ldrb	r3, [r7, #7]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	2000fc60 	.word	0x2000fc60

080111cc <BSP_SDRAM_Init>:
/**
 * @brief  Initializes the SDRAM device for SDRAM disk area
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
	uint8_t sdramstatus = SDRAM_OK;
 80111d2:	2300      	movs	r3, #0
 80111d4:	71fb      	strb	r3, [r7, #7]

  return sdramstatus;
 80111d6:	79fb      	ldrb	r3, [r7, #7]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr

080111e4 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b086      	sub	sp, #24
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	60f8      	str	r0, [r7, #12]
 80111ec:	60b9      	str	r1, [r7, #8]
 80111ee:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 80111f0:	2300      	movs	r3, #0
 80111f2:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 80111f4:	68f9      	ldr	r1, [r7, #12]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	68ba      	ldr	r2, [r7, #8]
 80111fa:	4806      	ldr	r0, [pc, #24]	; (8011214 <BSP_SDRAM_ReadData+0x30>)
 80111fc:	f7f5 f9f2 	bl	80065e4 <HAL_SDRAM_Read_32b>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	d001      	beq.n	801120a <BSP_SDRAM_ReadData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 8011206:	2301      	movs	r3, #1
 8011208:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 801120a:	7dfb      	ldrb	r3, [r7, #23]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3718      	adds	r7, #24
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	2000fd70 	.word	0x2000fd70

08011218 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 8011224:	2300      	movs	r3, #0
 8011226:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8011228:	68f9      	ldr	r1, [r7, #12]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	68ba      	ldr	r2, [r7, #8]
 801122e:	4806      	ldr	r0, [pc, #24]	; (8011248 <BSP_SDRAM_WriteData+0x30>)
 8011230:	f7f5 fa17 	bl	8006662 <HAL_SDRAM_Write_32b>
 8011234:	4603      	mov	r3, r0
 8011236:	2b00      	cmp	r3, #0
 8011238:	d001      	beq.n	801123e <BSP_SDRAM_WriteData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 801123a:	2301      	movs	r3, #1
 801123c:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 801123e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3718      	adds	r7, #24
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	2000fd70 	.word	0x2000fd70

0801124c <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8011256:	2300      	movs	r3, #0
 8011258:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	2201      	movs	r2, #1
 801125e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	2210      	movs	r2, #16
 8011264:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	2201      	movs	r2, #1
 801126a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	2200      	movs	r2, #0
 8011270:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8011272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011276:	6839      	ldr	r1, [r7, #0]
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f7f5 fa35 	bl	80066e8 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801127e:	2001      	movs	r0, #1
 8011280:	f7f0 fc1c 	bl	8001abc <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2202      	movs	r2, #2
 8011288:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	2210      	movs	r2, #16
 801128e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	2201      	movs	r2, #1
 8011294:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	2200      	movs	r2, #0
 801129a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 801129c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112a0:	6839      	ldr	r1, [r7, #0]
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7f5 fa20 	bl	80066e8 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2203      	movs	r2, #3
 80112ac:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	2210      	movs	r2, #16
 80112b2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	2208      	movs	r2, #8
 80112b8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	2200      	movs	r2, #0
 80112be:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80112c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112c4:	6839      	ldr	r1, [r7, #0]
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7f5 fa0e 	bl	80066e8 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80112cc:	f44f 7308 	mov.w	r3, #544	; 0x220
 80112d0:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	2204      	movs	r2, #4
 80112d6:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	2210      	movs	r2, #16
 80112dc:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	2201      	movs	r2, #1
 80112e2:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80112ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7f5 f9f9 	bl	80066e8 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f240 6203 	movw	r2, #1539	; 0x603
 80112fe:	615a      	str	r2, [r3, #20]

}
 8011300:	bf00      	nop
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8011308:	b580      	push	{r7, lr}
 801130a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 801130c:	4904      	ldr	r1, [pc, #16]	; (8011320 <MX_FATFS_Init+0x18>)
 801130e:	4805      	ldr	r0, [pc, #20]	; (8011324 <MX_FATFS_Init+0x1c>)
 8011310:	f7fa fe2e 	bl	800bf70 <FATFS_LinkDriver>
 8011314:	4603      	mov	r3, r0
 8011316:	461a      	mov	r2, r3
 8011318:	4b03      	ldr	r3, [pc, #12]	; (8011328 <MX_FATFS_Init+0x20>)
 801131a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */
  /* USER CODE END Init */
}
 801131c:	bf00      	nop
 801131e:	bd80      	pop	{r7, pc}
 8011320:	2000f5d4 	.word	0x2000f5d4
 8011324:	08018d7c 	.word	0x08018d7c
 8011328:	2000fa3c 	.word	0x2000fa3c

0801132c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801132c:	b480      	push	{r7}
 801132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 8011330:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8011332:	4618      	mov	r0, r3
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr
 801133c:	0000      	movs	r0, r0
	...

08011340 <myPrintf>:
// creates the string backwards, before printing it character-by-character from
// the end to the start
//
// Usage: myPrintf(270.458)
//  Output: 270.45
char * myPrintf(float fVal) {
 8011340:	b590      	push	{r4, r7, lr}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	ed87 0a01 	vstr	s0, [r7, #4]
	static char result[10];
	uint8_t dVal, dec, i;

	fVal += 0.005;   // added after a comment from Matt McNabb, see below.
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7ef f92c 	bl	80005a8 <__aeabi_f2d>
 8011350:	a33b      	add	r3, pc, #236	; (adr r3, 8011440 <myPrintf+0x100>)
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ee ffc9 	bl	80002ec <__adddf3>
 801135a:	4603      	mov	r3, r0
 801135c:	460c      	mov	r4, r1
 801135e:	4618      	mov	r0, r3
 8011360:	4621      	mov	r1, r4
 8011362:	f7ef fba7 	bl	8000ab4 <__aeabi_d2f>
 8011366:	4603      	mov	r3, r0
 8011368:	607b      	str	r3, [r7, #4]

	dVal = fVal;
 801136a:	edd7 7a01 	vldr	s15, [r7, #4]
 801136e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011372:	edc7 7a00 	vstr	s15, [r7]
 8011376:	783b      	ldrb	r3, [r7, #0]
 8011378:	73fb      	strb	r3, [r7, #15]
	dec = (uint8_t) (fVal * 100) % 100;
 801137a:	edd7 7a01 	vldr	s15, [r7, #4]
 801137e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8011430 <myPrintf+0xf0>
 8011382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801138a:	edc7 7a00 	vstr	s15, [r7]
 801138e:	783b      	ldrb	r3, [r7, #0]
 8011390:	b2db      	uxtb	r3, r3
 8011392:	4a28      	ldr	r2, [pc, #160]	; (8011434 <myPrintf+0xf4>)
 8011394:	fba2 1203 	umull	r1, r2, r2, r3
 8011398:	0952      	lsrs	r2, r2, #5
 801139a:	2164      	movs	r1, #100	; 0x64
 801139c:	fb01 f202 	mul.w	r2, r1, r2
 80113a0:	1a9b      	subs	r3, r3, r2
 80113a2:	737b      	strb	r3, [r7, #13]

	memset(result, 0, 10);
 80113a4:	220a      	movs	r2, #10
 80113a6:	2100      	movs	r1, #0
 80113a8:	4823      	ldr	r0, [pc, #140]	; (8011438 <myPrintf+0xf8>)
 80113aa:	f003 fcd8 	bl	8014d5e <memset>
	result[0] = (dec % 10) + '0';
 80113ae:	7b7a      	ldrb	r2, [r7, #13]
 80113b0:	4b22      	ldr	r3, [pc, #136]	; (801143c <myPrintf+0xfc>)
 80113b2:	fba3 1302 	umull	r1, r3, r3, r2
 80113b6:	08d9      	lsrs	r1, r3, #3
 80113b8:	460b      	mov	r3, r1
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	440b      	add	r3, r1
 80113be:	005b      	lsls	r3, r3, #1
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	3330      	adds	r3, #48	; 0x30
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	4b1b      	ldr	r3, [pc, #108]	; (8011438 <myPrintf+0xf8>)
 80113ca:	701a      	strb	r2, [r3, #0]
	result[1] = (dec / 10) + '0';
 80113cc:	7b7b      	ldrb	r3, [r7, #13]
 80113ce:	4a1b      	ldr	r2, [pc, #108]	; (801143c <myPrintf+0xfc>)
 80113d0:	fba2 2303 	umull	r2, r3, r2, r3
 80113d4:	08db      	lsrs	r3, r3, #3
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	3330      	adds	r3, #48	; 0x30
 80113da:	b2da      	uxtb	r2, r3
 80113dc:	4b16      	ldr	r3, [pc, #88]	; (8011438 <myPrintf+0xf8>)
 80113de:	705a      	strb	r2, [r3, #1]
	result[2] = '.';
 80113e0:	4b15      	ldr	r3, [pc, #84]	; (8011438 <myPrintf+0xf8>)
 80113e2:	222e      	movs	r2, #46	; 0x2e
 80113e4:	709a      	strb	r2, [r3, #2]

	i = 3;
 80113e6:	2303      	movs	r3, #3
 80113e8:	73bb      	strb	r3, [r7, #14]
	while (dVal > 0) {
 80113ea:	e018      	b.n	801141e <myPrintf+0xde>
		result[i] = (char) (dVal % 10) + '0';
 80113ec:	7bb8      	ldrb	r0, [r7, #14]
 80113ee:	7bfa      	ldrb	r2, [r7, #15]
 80113f0:	4b12      	ldr	r3, [pc, #72]	; (801143c <myPrintf+0xfc>)
 80113f2:	fba3 1302 	umull	r1, r3, r3, r2
 80113f6:	08d9      	lsrs	r1, r3, #3
 80113f8:	460b      	mov	r3, r1
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	440b      	add	r3, r1
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	1ad3      	subs	r3, r2, r3
 8011402:	b2db      	uxtb	r3, r3
 8011404:	3330      	adds	r3, #48	; 0x30
 8011406:	b2da      	uxtb	r2, r3
 8011408:	4b0b      	ldr	r3, [pc, #44]	; (8011438 <myPrintf+0xf8>)
 801140a:	541a      	strb	r2, [r3, r0]
		dVal /= 10;
 801140c:	7bfb      	ldrb	r3, [r7, #15]
 801140e:	4a0b      	ldr	r2, [pc, #44]	; (801143c <myPrintf+0xfc>)
 8011410:	fba2 2303 	umull	r2, r3, r2, r3
 8011414:	08db      	lsrs	r3, r3, #3
 8011416:	73fb      	strb	r3, [r7, #15]
		i++;
 8011418:	7bbb      	ldrb	r3, [r7, #14]
 801141a:	3301      	adds	r3, #1
 801141c:	73bb      	strb	r3, [r7, #14]
	while (dVal > 0) {
 801141e:	7bfb      	ldrb	r3, [r7, #15]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1e3      	bne.n	80113ec <myPrintf+0xac>
	}

	return result;
 8011424:	4b04      	ldr	r3, [pc, #16]	; (8011438 <myPrintf+0xf8>)
}
 8011426:	4618      	mov	r0, r3
 8011428:	3714      	adds	r7, #20
 801142a:	46bd      	mov	sp, r7
 801142c:	bd90      	pop	{r4, r7, pc}
 801142e:	bf00      	nop
 8011430:	42c80000 	.word	0x42c80000
 8011434:	51eb851f 	.word	0x51eb851f
 8011438:	2000f490 	.word	0x2000f490
 801143c:	cccccccd 	.word	0xcccccccd
 8011440:	47ae147b 	.word	0x47ae147b
 8011444:	3f747ae1 	.word	0x3f747ae1

08011448 <initArray>:


void initArray(Array *a, size_t initialSize) {
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
	a->array = (uint16_t *) pvPortMalloc(initialSize * sizeof(uint16_t));
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4618      	mov	r0, r3
 8011458:	f7fb f820 	bl	800c49c <pvPortMalloc>
 801145c:	4602      	mov	r2, r0
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	601a      	str	r2, [r3, #0]
	a->used = 0;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2200      	movs	r2, #0
 8011466:	605a      	str	r2, [r3, #4]
	a->size = initialSize;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	683a      	ldr	r2, [r7, #0]
 801146c:	609a      	str	r2, [r3, #8]
}
 801146e:	bf00      	nop
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 8011476:	b580      	push	{r7, lr}
 8011478:	b082      	sub	sp, #8
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
 801147e:	6039      	str	r1, [r7, #0]
	a->size = newsize;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	683a      	ldr	r2, [r7, #0]
 8011484:	609a      	str	r2, [r3, #8]
	vPortFree(a->array);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	4618      	mov	r0, r3
 801148c:	f7fb f8ce 	bl	800c62c <vPortFree>
	a->array = (uint16_t *) pvPortMalloc(a->size * sizeof(uint16_t));
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	689b      	ldr	r3, [r3, #8]
 8011494:	005b      	lsls	r3, r3, #1
 8011496:	4618      	mov	r0, r3
 8011498:	f7fb f800 	bl	800c49c <pvPortMalloc>
 801149c:	4602      	mov	r2, r0
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	601a      	str	r2, [r3, #0]
	a->used = 0;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2200      	movs	r2, #0
 80114a6:	605a      	str	r2, [r3, #4]
}
 80114a8:	bf00      	nop
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <freeArray>:

void freeArray(Array *a) {
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
	vPortFree(a->array);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fb f8b5 	bl	800c62c <vPortFree>
	a->array = NULL;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	601a      	str	r2, [r3, #0]
	a->used = a->size = 0;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	609a      	str	r2, [r3, #8]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	689a      	ldr	r2, [r3, #8]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	605a      	str	r2, [r3, #4]
}
 80114d6:	bf00      	nop
 80114d8:	3708      	adds	r7, #8
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
	...

080114e0 <string_parse>:

// mod from
// https://stackoverflow.com/questions/13230253/how-do-i-parse-a-string-in-c
char * string_parse(char * parse_string, uint8_t idx) {
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b08c      	sub	sp, #48	; 0x30
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	460b      	mov	r3, r1
 80114ea:	70fb      	strb	r3, [r7, #3]

	char *work_string;
	uint8_t stringArray[30];
	static uint8_t wordArray[30];
	uint8_t i = 0;
 80114ec:	2300      	movs	r3, #0
 80114ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t counter = 0;
 80114f2:	2300      	movs	r3, #0
 80114f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t argCounter = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t wordCounter = 0;
 80114fe:	2300      	movs	r3, #0
 8011500:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	// Let's make a copy for work
	work_string = parse_string;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	62fb      	str	r3, [r7, #44]	; 0x2c

	// And move it to array
	while (*work_string != '\0') {
 8011508:	e010      	b.n	801152c <string_parse+0x4c>
		stringArray[i] = (int) *work_string;
 801150a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801150e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011510:	7812      	ldrb	r2, [r2, #0]
 8011512:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011516:	440b      	add	r3, r1
 8011518:	f803 2c28 	strb.w	r2, [r3, #-40]
		i++;
 801151c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011520:	3301      	adds	r3, #1
 8011522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		work_string++;
 8011526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011528:	3301      	adds	r3, #1
 801152a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (*work_string != '\0') {
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1ea      	bne.n	801150a <string_parse+0x2a>
	}

	// Terminate
	stringArray[i] = '\0';
 8011534:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011538:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801153c:	4413      	add	r3, r2
 801153e:	2200      	movs	r2, #0
 8011540:	f803 2c28 	strb.w	r2, [r3, #-40]

	// Main function.
	counter = 0;
 8011544:	2300      	movs	r3, #0
 8011546:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	while (stringArray[wordCounter] != '\0') {
 801154a:	e060      	b.n	801160e <string_parse+0x12e>
		// Puts first word into temporary wordArray.
		while ((stringArray[wordCounter] != ' ')
				&& (stringArray[wordCounter] != '\0')) {
			wordArray[counter++] = stringArray[wordCounter++];
 801154c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8011550:	1c5a      	adds	r2, r3, #1
 8011552:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
 8011556:	461a      	mov	r2, r3
 8011558:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801155c:	1c59      	adds	r1, r3, #1
 801155e:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
 8011562:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011566:	440b      	add	r3, r1
 8011568:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 801156c:	4b2f      	ldr	r3, [pc, #188]	; (801162c <string_parse+0x14c>)
 801156e:	5499      	strb	r1, [r3, r2]
		while ((stringArray[wordCounter] != ' ')
 8011570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011574:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011578:	4413      	add	r3, r2
 801157a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801157e:	2b20      	cmp	r3, #32
 8011580:	d008      	beq.n	8011594 <string_parse+0xb4>
				&& (stringArray[wordCounter] != '\0')) {
 8011582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011586:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801158a:	4413      	add	r3, r2
 801158c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1db      	bne.n	801154c <string_parse+0x6c>
		}
		wordArray[counter] = '\0';
 8011594:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8011598:	4a24      	ldr	r2, [pc, #144]	; (801162c <string_parse+0x14c>)
 801159a:	2100      	movs	r1, #0
 801159c:	54d1      	strb	r1, [r2, r3]

		// Return the content of wordArray at requested index.
		if (argCounter == idx) {
 801159e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80115a2:	78fb      	ldrb	r3, [r7, #3]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d101      	bne.n	80115ac <string_parse+0xcc>
			return wordArray;
 80115a8:	4b20      	ldr	r3, [pc, #128]	; (801162c <string_parse+0x14c>)
 80115aa:	e03a      	b.n	8011622 <string_parse+0x142>
		} else if (argCounter > idx) {
 80115ac:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80115b0:	78fb      	ldrb	r3, [r7, #3]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d903      	bls.n	80115be <string_parse+0xde>
			// Too many arguments
			_Error_Handler(__FILE__, __LINE__);
 80115b6:	2183      	movs	r1, #131	; 0x83
 80115b8:	481d      	ldr	r0, [pc, #116]	; (8011630 <string_parse+0x150>)
 80115ba:	f000 ff65 	bl	8012488 <_Error_Handler>
		}

		//Clears temporary wordArray for new use.
		for (counter = 0; counter < 30; counter++) {
 80115be:	2300      	movs	r3, #0
 80115c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80115c4:	e009      	b.n	80115da <string_parse+0xfa>
			wordArray[counter] = '\0';
 80115c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80115ca:	4a18      	ldr	r2, [pc, #96]	; (801162c <string_parse+0x14c>)
 80115cc:	2100      	movs	r1, #0
 80115ce:	54d1      	strb	r1, [r2, r3]
		for (counter = 0; counter < 30; counter++) {
 80115d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80115d4:	3301      	adds	r3, #1
 80115d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80115da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80115de:	2b1d      	cmp	r3, #29
 80115e0:	d9f1      	bls.n	80115c6 <string_parse+0xe6>
		}

		if (stringArray[wordCounter] != '\n') {
 80115e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80115e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80115ea:	4413      	add	r3, r2
 80115ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80115f0:	2b0a      	cmp	r3, #10
 80115f2:	d004      	beq.n	80115fe <string_parse+0x11e>
			wordCounter++;
 80115f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80115f8:	3301      	adds	r3, #1
 80115fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		}

		counter = 0;
 80115fe:	2300      	movs	r3, #0
 8011600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		argCounter++;
 8011604:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011608:	3301      	adds	r3, #1
 801160a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	while (stringArray[wordCounter] != '\0') {
 801160e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011612:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011616:	4413      	add	r3, r2
 8011618:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d1a7      	bne.n	8011570 <string_parse+0x90>
	}

	// If we return here. the parse_string had less arguments as requested
	// In that case, return empty string
	return '\0';
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3730      	adds	r7, #48	; 0x30
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	2000f49c 	.word	0x2000f49c
 8011630:	08015da4 	.word	0x08015da4

08011634 <PlotData>:
	}

	return n;
}

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	b29b      	uxth	r3, r3
 8011642:	683a      	ldr	r2, [r7, #0]
 8011644:	b291      	uxth	r1, r2
 8011646:	2201      	movs	r2, #1
 8011648:	4618      	mov	r0, r3
 801164a:	f7ef ff21 	bl	8001490 <BSP_LCD_DrawPixel>
}
 801164e:	bf00      	nop
 8011650:	3708      	adds	r7, #8
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
	...

08011658 <InitScreen>:

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]

	BSP_LCD_Clear(BackGroundColor);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7ef fd68 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f7ef fd1b 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 801166e:	6838      	ldr	r0, [r7, #0]
 8011670:	f7ef fd00 	bl	8001074 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 8011674:	4803      	ldr	r0, [pc, #12]	; (8011684 <InitScreen+0x2c>)
 8011676:	f7ef fd2f 	bl	80010d8 <BSP_LCD_SetFont>
}
 801167a:	bf00      	nop
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	20000008 	.word	0x20000008

08011688 <LCDWrite>:

void LCDWrite(uint32_t Line, char Str[]) {
 8011688:	b580      	push	{r7, lr}
 801168a:	b090      	sub	sp, #64	; 0x40
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
	char IntStr[50];

	BSP_LCD_ClearStringLine(Line);
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7ef fd78 	bl	8001188 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 8011698:	f107 030c 	add.w	r3, r7, #12
 801169c:	683a      	ldr	r2, [r7, #0]
 801169e:	2132      	movs	r1, #50	; 0x32
 80116a0:	4618      	mov	r0, r3
 80116a2:	f002 fa53 	bl	8013b4c <snprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	f107 020c 	add.w	r2, r7, #12
 80116ae:	4611      	mov	r1, r2
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ef fed5 	bl	8001460 <BSP_LCD_DisplayStringAtLine>
}
 80116b6:	bf00      	nop
 80116b8:	3740      	adds	r7, #64	; 0x40
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
	...

080116c0 <CountDown>:

void CountDown(uint32_t millisecs) {
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 80116c8:	f04f 31ff 	mov.w	r1, #4294967295
 80116cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80116d0:	f7ff ffc2 	bl	8011658 <InitScreen>

	LCDWrite(5, " ");
 80116d4:	4914      	ldr	r1, [pc, #80]	; (8011728 <CountDown+0x68>)
 80116d6:	2005      	movs	r0, #5
 80116d8:	f7ff ffd6 	bl	8011688 <LCDWrite>
	HAL_Delay(1);
 80116dc:	2001      	movs	r0, #1
 80116de:	f7f0 f9ed 	bl	8001abc <HAL_Delay>

	LCDWrite(5, "Starting in 3... ");
 80116e2:	4912      	ldr	r1, [pc, #72]	; (801172c <CountDown+0x6c>)
 80116e4:	2005      	movs	r0, #5
 80116e6:	f7ff ffcf 	bl	8011688 <LCDWrite>
	HAL_Delay(millisecs);
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7f0 f9e6 	bl	8001abc <HAL_Delay>

	LCDWrite(5, "Starting in 2... ");
 80116f0:	490f      	ldr	r1, [pc, #60]	; (8011730 <CountDown+0x70>)
 80116f2:	2005      	movs	r0, #5
 80116f4:	f7ff ffc8 	bl	8011688 <LCDWrite>
	HAL_Delay(millisecs);
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7f0 f9df 	bl	8001abc <HAL_Delay>

	LCDWrite(5, "Starting in 1... ");
 80116fe:	490d      	ldr	r1, [pc, #52]	; (8011734 <CountDown+0x74>)
 8011700:	2005      	movs	r0, #5
 8011702:	f7ff ffc1 	bl	8011688 <LCDWrite>
	HAL_Delay(millisecs);
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f7f0 f9d8 	bl	8001abc <HAL_Delay>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 801170c:	490a      	ldr	r1, [pc, #40]	; (8011738 <CountDown+0x78>)
 801170e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011712:	f7ff ffa1 	bl	8011658 <InitScreen>
	LCDWrite(5, "GO!");
 8011716:	4909      	ldr	r1, [pc, #36]	; (801173c <CountDown+0x7c>)
 8011718:	2005      	movs	r0, #5
 801171a:	f7ff ffb5 	bl	8011688 <LCDWrite>
}
 801171e:	bf00      	nop
 8011720:	3708      	adds	r7, #8
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	08015db8 	.word	0x08015db8
 801172c:	08015dbc 	.word	0x08015dbc
 8011730:	08015dd0 	.word	0x08015dd0
 8011734:	08015de4 	.word	0x08015de4
 8011738:	ffff0000 	.word	0xffff0000
 801173c:	08015df8 	.word	0x08015df8

08011740 <scan_files>:

FRESULT scan_files(char* path
// Start node to be scanned, also used as work area
		) {
 8011740:	b580      	push	{r7, lr}
 8011742:	b090      	sub	sp, #64	; 0x40
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 8011748:	f107 0308 	add.w	r3, r7, #8
 801174c:	6879      	ldr	r1, [r7, #4]
 801174e:	4618      	mov	r0, r3
 8011750:	f7f9 fdf3 	bl	800b33a <f_opendir>
 8011754:	4603      	mov	r3, r0
 8011756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801175a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801175e:	2b00      	cmp	r3, #0
 8011760:	d140      	bne.n	80117e4 <scan_files+0xa4>
		for (;;) {
			res = f_readdir(&dir, &fno); /* Read a directory item */
 8011762:	f107 0308 	add.w	r3, r7, #8
 8011766:	4922      	ldr	r1, [pc, #136]	; (80117f0 <scan_files+0xb0>)
 8011768:	4618      	mov	r0, r3
 801176a:	f7f9 fe8a 	bl	800b482 <f_readdir>
 801176e:	4603      	mov	r3, r0
 8011770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (res != FR_OK || fno.fname[0] == 0)
 8011774:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011778:	2b00      	cmp	r3, #0
 801177a:	d12e      	bne.n	80117da <scan_files+0x9a>
 801177c:	4b1c      	ldr	r3, [pc, #112]	; (80117f0 <scan_files+0xb0>)
 801177e:	7a5b      	ldrb	r3, [r3, #9]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d02a      	beq.n	80117da <scan_files+0x9a>
				break; /* Break on error or end of dir */
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 8011784:	4b1a      	ldr	r3, [pc, #104]	; (80117f0 <scan_files+0xb0>)
 8011786:	7a1b      	ldrb	r3, [r3, #8]
 8011788:	f003 0310 	and.w	r3, r3, #16
 801178c:	2b00      	cmp	r3, #0
 801178e:	d01b      	beq.n	80117c8 <scan_files+0x88>
				i = strlen(path);
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f7ee fd47 	bl	8000224 <strlen>
 8011796:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(&path[i], "/%s", fno.fname);
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179c:	4413      	add	r3, r2
 801179e:	4a15      	ldr	r2, [pc, #84]	; (80117f4 <scan_files+0xb4>)
 80117a0:	4915      	ldr	r1, [pc, #84]	; (80117f8 <scan_files+0xb8>)
 80117a2:	4618      	mov	r0, r3
 80117a4:	f002 f9f3 	bl	8013b8e <sprintf>
				res = scan_files(path); /* Enter the directory */
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7ff ffc9 	bl	8011740 <scan_files>
 80117ae:	4603      	mov	r3, r0
 80117b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if (res != FR_OK)
 80117b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d10d      	bne.n	80117d8 <scan_files+0x98>
					break;
				path[i] = 0;
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c0:	4413      	add	r3, r2
 80117c2:	2200      	movs	r2, #0
 80117c4:	701a      	strb	r2, [r3, #0]
 80117c6:	e7cc      	b.n	8011762 <scan_files+0x22>
			} else { /* It is a file. */
				printf("%s/%s 		%lu \r\n", path, fno.fname, fno.fsize);
 80117c8:	4b09      	ldr	r3, [pc, #36]	; (80117f0 <scan_files+0xb0>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4a09      	ldr	r2, [pc, #36]	; (80117f4 <scan_files+0xb4>)
 80117ce:	6879      	ldr	r1, [r7, #4]
 80117d0:	480a      	ldr	r0, [pc, #40]	; (80117fc <scan_files+0xbc>)
 80117d2:	f003 fb79 	bl	8014ec8 <iprintf>
			res = f_readdir(&dir, &fno); /* Read a directory item */
 80117d6:	e7c4      	b.n	8011762 <scan_files+0x22>
					break;
 80117d8:	bf00      	nop
			}
		}
		f_closedir(&dir);
 80117da:	f107 0308 	add.w	r3, r7, #8
 80117de:	4618      	mov	r0, r3
 80117e0:	f7f9 fe24 	bl	800b42c <f_closedir>
	}

	return res;
 80117e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3740      	adds	r7, #64	; 0x40
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	2000f4bc 	.word	0x2000f4bc
 80117f4:	2000f4c5 	.word	0x2000f4c5
 80117f8:	08015dfc 	.word	0x08015dfc
 80117fc:	08015e00 	.word	0x08015e00

08011800 <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 8011800:	b590      	push	{r4, r7, lr}
 8011802:	b097      	sub	sp, #92	; 0x5c
 8011804:	af00      	add	r7, sp, #0
 8011806:	60f8      	str	r0, [r7, #12]
 8011808:	60b9      	str	r1, [r7, #8]
 801180a:	607a      	str	r2, [r7, #4]

	TIM_HandleTypeDef htim2;
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 801180c:	4827      	ldr	r0, [pc, #156]	; (80118ac <SamplePoints+0xac>)
 801180e:	f7f0 f9bb 	bl	8001b88 <HAL_ADC_Start>
	htim2.Instance = TIM2;
 8011812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011816:	617b      	str	r3, [r7, #20]

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 8011818:	2300      	movs	r3, #0
 801181a:	657b      	str	r3, [r7, #84]	; 0x54
 801181c:	e031      	b.n	8011882 <SamplePoints+0x82>

		// Set the TIM2 to zero
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2200      	movs	r2, #0
 8011822:	625a      	str	r2, [r3, #36]	; 0x24

		// Sample ADC3[0] and store to array[i]
		// Takes apprx 15 ADCClk cycles for 12 bits = 15 * (1/25 MHz) = 0.6 us
		// Lets substract 1 us from Period_us to compensate for loop + conversion
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801182a:	005b      	lsls	r3, r3, #1
 801182c:	18d4      	adds	r4, r2, r3
 801182e:	481f      	ldr	r0, [pc, #124]	; (80118ac <SamplePoints+0xac>)
 8011830:	f7f0 fa4e 	bl	8001cd0 <HAL_ADC_GetValue>
 8011834:	4603      	mov	r3, r0
 8011836:	b29b      	uxth	r3, r3
 8011838:	8023      	strh	r3, [r4, #0]

		// Start TIM2
		if ((HAL_TIM_Base_Start(&htim2)) != HAL_OK) {
 801183a:	f107 0314 	add.w	r3, r7, #20
 801183e:	4618      	mov	r0, r3
 8011840:	f7f4 ffa8 	bl	8006794 <HAL_TIM_Base_Start>
 8011844:	4603      	mov	r3, r0
 8011846:	2b00      	cmp	r3, #0
 8011848:	d004      	beq.n	8011854 <SamplePoints+0x54>
			_Error_Handler(__FILE__, __LINE__);
 801184a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 801184e:	4818      	ldr	r0, [pc, #96]	; (80118b0 <SamplePoints+0xb0>)
 8011850:	f000 fe1a 	bl	8012488 <_Error_Handler>
		}

		// Wait for Period_us-1 us
		while ((__HAL_TIM_GET_COUNTER(&htim2)) < (Period_us - 1)) {
 8011854:	bf00      	nop
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	3b01      	subs	r3, #1
 801185e:	429a      	cmp	r2, r3
 8011860:	d3f9      	bcc.n	8011856 <SamplePoints+0x56>
			;;
		}

		// Stop TIM2
		if ((HAL_TIM_Base_Stop(&htim2)) != HAL_OK) {
 8011862:	f107 0314 	add.w	r3, r7, #20
 8011866:	4618      	mov	r0, r3
 8011868:	f7f4 ffaf 	bl	80067ca <HAL_TIM_Base_Stop>
 801186c:	4603      	mov	r3, r0
 801186e:	2b00      	cmp	r3, #0
 8011870:	d004      	beq.n	801187c <SamplePoints+0x7c>
			_Error_Handler(__FILE__, __LINE__);
 8011872:	f44f 7194 	mov.w	r1, #296	; 0x128
 8011876:	480e      	ldr	r0, [pc, #56]	; (80118b0 <SamplePoints+0xb0>)
 8011878:	f000 fe06 	bl	8012488 <_Error_Handler>
	for (i = 0; i < NoOfPoints; i++) {
 801187c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801187e:	3301      	adds	r3, #1
 8011880:	657b      	str	r3, [r7, #84]	; 0x54
 8011882:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	429a      	cmp	r2, r3
 8011888:	d3c9      	bcc.n	801181e <SamplePoints+0x1e>

		}
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 801188a:	f04f 31ff 	mov.w	r1, #4294967295
 801188e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011892:	f7ff fee1 	bl	8011658 <InitScreen>
	LCDWrite(5, "DONE!");
 8011896:	4907      	ldr	r1, [pc, #28]	; (80118b4 <SamplePoints+0xb4>)
 8011898:	2005      	movs	r0, #5
 801189a:	f7ff fef5 	bl	8011688 <LCDWrite>

	printf("Sampling done.\r\n");
 801189e:	4806      	ldr	r0, [pc, #24]	; (80118b8 <SamplePoints+0xb8>)
 80118a0:	f003 fb86 	bl	8014fb0 <puts>
}
 80118a4:	bf00      	nop
 80118a6:	375c      	adds	r7, #92	; 0x5c
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd90      	pop	{r4, r7, pc}
 80118ac:	2000fbb8 	.word	0x2000fbb8
 80118b0:	08015da4 	.word	0x08015da4
 80118b4:	08015e10 	.word	0x08015e10
 80118b8:	08015e18 	.word	0x08015e18

080118bc <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 80118bc:	b5b0      	push	{r4, r5, r7, lr}
 80118be:	b09a      	sub	sp, #104	; 0x68
 80118c0:	af02      	add	r7, sp, #8
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start averaging... \r\n");
 80118c8:	4842      	ldr	r0, [pc, #264]	; (80119d4 <AvgAndPlotPoints+0x118>)
 80118ca:	f003 fb71 	bl	8014fb0 <puts>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 80118ce:	4942      	ldr	r1, [pc, #264]	; (80119d8 <AvgAndPlotPoints+0x11c>)
 80118d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80118d4:	f7ff fec0 	bl	8011658 <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 80118d8:	2300      	movs	r3, #0
 80118da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118dc:	e059      	b.n	8011992 <AvgAndPlotPoints+0xd6>
		BufferSum = 0;
 80118de:	2300      	movs	r3, #0
 80118e0:	657b      	str	r3, [r7, #84]	; 0x54

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 80118e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80118e6:	e00c      	b.n	8011902 <AvgAndPlotPoints+0x46>
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118ee:	005b      	lsls	r3, r3, #1
 80118f0:	4413      	add	r3, r2
 80118f2:	881b      	ldrh	r3, [r3, #0]
 80118f4:	461a      	mov	r2, r3
 80118f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118f8:	4413      	add	r3, r2
 80118fa:	657b      	str	r3, [r7, #84]	; 0x54
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 80118fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118fe:	3301      	adds	r3, #1
 8011900:	65bb      	str	r3, [r7, #88]	; 0x58
 8011902:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	441a      	add	r2, r3
 8011908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801190a:	429a      	cmp	r2, r3
 801190c:	d8ec      	bhi.n	80118e8 <AvgAndPlotPoints+0x2c>
		}

		BufferAvg = BufferSum / AvgSize;
 801190e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	fbb2 f3f3 	udiv	r3, r2, r3
 8011916:	653b      	str	r3, [r7, #80]	; 0x50

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 8011918:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801191a:	f7ee fe23 	bl	8000564 <__aeabi_ui2d>
 801191e:	f04f 0200 	mov.w	r2, #0
 8011922:	4b2e      	ldr	r3, [pc, #184]	; (80119dc <AvgAndPlotPoints+0x120>)
 8011924:	f7ee fe94 	bl	8000650 <__aeabi_dmul>
 8011928:	4603      	mov	r3, r0
 801192a:	460c      	mov	r4, r1
 801192c:	4625      	mov	r5, r4
 801192e:	461c      	mov	r4, r3
 8011930:	68b8      	ldr	r0, [r7, #8]
 8011932:	f7ee fe17 	bl	8000564 <__aeabi_ui2d>
 8011936:	4602      	mov	r2, r0
 8011938:	460b      	mov	r3, r1
 801193a:	4620      	mov	r0, r4
 801193c:	4629      	mov	r1, r5
 801193e:	f7ee ffb1 	bl	80008a4 <__aeabi_ddiv>
 8011942:	4603      	mov	r3, r0
 8011944:	460c      	mov	r4, r1
 8011946:	4618      	mov	r0, r3
 8011948:	4621      	mov	r1, r4
 801194a:	f7ef f893 	bl	8000a74 <__aeabi_d2uiz>
 801194e:	4603      	mov	r3, r0
 8011950:	64fb      	str	r3, [r7, #76]	; 0x4c
		YCoord = (272.0 * (BufferAvg / 65536.0));
 8011952:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011954:	f7ee fe06 	bl	8000564 <__aeabi_ui2d>
 8011958:	f04f 0200 	mov.w	r2, #0
 801195c:	4b20      	ldr	r3, [pc, #128]	; (80119e0 <AvgAndPlotPoints+0x124>)
 801195e:	f7ee ffa1 	bl	80008a4 <__aeabi_ddiv>
 8011962:	4603      	mov	r3, r0
 8011964:	460c      	mov	r4, r1
 8011966:	4618      	mov	r0, r3
 8011968:	4621      	mov	r1, r4
 801196a:	f04f 0200 	mov.w	r2, #0
 801196e:	4b1d      	ldr	r3, [pc, #116]	; (80119e4 <AvgAndPlotPoints+0x128>)
 8011970:	f7ee fe6e 	bl	8000650 <__aeabi_dmul>
 8011974:	4603      	mov	r3, r0
 8011976:	460c      	mov	r4, r1
 8011978:	4618      	mov	r0, r3
 801197a:	4621      	mov	r1, r4
 801197c:	f7ef f87a 	bl	8000a74 <__aeabi_d2uiz>
 8011980:	4603      	mov	r3, r0
 8011982:	64bb      	str	r3, [r7, #72]	; 0x48

		PlotData(XCoord, YCoord);
 8011984:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011986:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011988:	f7ff fe54 	bl	8011634 <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 801198c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801198e:	3301      	adds	r3, #1
 8011990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	429a      	cmp	r2, r3
 8011998:	d3a1      	bcc.n	80118de <AvgAndPlotPoints+0x22>
	}

	printf("Averaging done, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801199e:	4812      	ldr	r0, [pc, #72]	; (80119e8 <AvgAndPlotPoints+0x12c>)
 80119a0:	f003 fa92 	bl	8014ec8 <iprintf>

	LCDWrite(0, "");
 80119a4:	4911      	ldr	r1, [pc, #68]	; (80119ec <AvgAndPlotPoints+0x130>)
 80119a6:	2000      	movs	r0, #0
 80119a8:	f7ff fe6e 	bl	8011688 <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 80119ac:	f107 0014 	add.w	r0, r7, #20
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	9300      	str	r3, [sp, #0]
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	4a0e      	ldr	r2, [pc, #56]	; (80119f0 <AvgAndPlotPoints+0x134>)
 80119b8:	2132      	movs	r1, #50	; 0x32
 80119ba:	f002 f8c7 	bl	8013b4c <snprintf>
	LCDWrite(0, MyStr);
 80119be:	f107 0314 	add.w	r3, r7, #20
 80119c2:	4619      	mov	r1, r3
 80119c4:	2000      	movs	r0, #0
 80119c6:	f7ff fe5f 	bl	8011688 <LCDWrite>
}
 80119ca:	bf00      	nop
 80119cc:	3760      	adds	r7, #96	; 0x60
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bdb0      	pop	{r4, r5, r7, pc}
 80119d2:	bf00      	nop
 80119d4:	08015e28 	.word	0x08015e28
 80119d8:	ffff0000 	.word	0xffff0000
 80119dc:	407e0000 	.word	0x407e0000
 80119e0:	40f00000 	.word	0x40f00000
 80119e4:	40710000 	.word	0x40710000
 80119e8:	08015e40 	.word	0x08015e40
 80119ec:	08015e6c 	.word	0x08015e6c
 80119f0:	08015e70 	.word	0x08015e70

080119f4 <WriteData2FS>:

void WriteData2FS(Array *Data, uint32_t NoOfPoints, uint32_t MeasNo) {
 80119f4:	b580      	push	{r7, lr}
 80119f6:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	f107 030c 	add.w	r3, r7, #12
 8011a00:	6018      	str	r0, [r3, #0]
 8011a02:	f107 0308 	add.w	r3, r7, #8
 8011a06:	6019      	str	r1, [r3, #0]
 8011a08:	1d3b      	adds	r3, r7, #4
 8011a0a:	601a      	str	r2, [r3, #0]

	// Create file for data, as meas#.txt

	FRESULT res; // FatFs function common result code
	char buffer[1000] = " ";
 8011a0c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8011a10:	2220      	movs	r2, #32
 8011a12:	601a      	str	r2, [r3, #0]
 8011a14:	3304      	adds	r3, #4
 8011a16:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011a1a:	2100      	movs	r1, #0
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f003 f99e 	bl	8014d5e <memset>
	uint32_t byteswritten, totalbytes; //File write counts

	char* fname = (char *) (sprintf("meas_%lu.txt", (char *) MeasNo));
 8011a22:	1d3b      	adds	r3, r7, #4
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	4619      	mov	r1, r3
 8011a28:	483d      	ldr	r0, [pc, #244]	; (8011b20 <WriteData2FS+0x12c>)
 8011a2a:	f002 f8b0 	bl	8013b8e <sprintf>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
	FIL MyFile;
	uint32_t idx;

	totalbytes = 0;
 8011a34:	2300      	movs	r3, #0
 8011a36:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c

	if (f_open(&MyFile, fname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8011a3a:	f107 0314 	add.w	r3, r7, #20
 8011a3e:	220a      	movs	r2, #10
 8011a40:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7f8 fee9 	bl	800a81c <f_open>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d005      	beq.n	8011a5c <WriteData2FS+0x68>

		// File Open for write Error
		_Error_Handler(__FILE__, __LINE__);
 8011a50:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8011a54:	4833      	ldr	r0, [pc, #204]	; (8011b24 <WriteData2FS+0x130>)
 8011a56:	f000 fd17 	bl	8012488 <_Error_Handler>
		/*##-6- Close the open text file #################################*/
		f_close(&MyFile);

		printf("Closed file %s OK \r\n", fname);
	}
}
 8011a5a:	e05c      	b.n	8011b16 <WriteData2FS+0x122>
		printf("Opened file %s OK \r\n", fname);
 8011a5c:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011a60:	4831      	ldr	r0, [pc, #196]	; (8011b28 <WriteData2FS+0x134>)
 8011a62:	f003 fa31 	bl	8014ec8 <iprintf>
		for (idx = 0; idx < NoOfPoints; idx++) {
 8011a66:	2300      	movs	r3, #0
 8011a68:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 8011a6c:	e03b      	b.n	8011ae6 <WriteData2FS+0xf2>
			sprintf(buffer, "%lu \r\n", ((uint32_t) Data->array[idx]));
 8011a6e:	f107 030c 	add.w	r3, r7, #12
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 8011a7a:	005b      	lsls	r3, r3, #1
 8011a7c:	4413      	add	r3, r2
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	461a      	mov	r2, r3
 8011a82:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8011a86:	4929      	ldr	r1, [pc, #164]	; (8011b2c <WriteData2FS+0x138>)
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f002 f880 	bl	8013b8e <sprintf>
			res = f_write(&MyFile, buffer, strlen(buffer),
 8011a8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7ee fbc6 	bl	8000224 <strlen>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8011a9e:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8011aa2:	f107 0014 	add.w	r0, r7, #20
 8011aa6:	f7f9 f9ec 	bl	800ae82 <f_write>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	f887 3633 	strb.w	r3, [r7, #1587]	; 0x633
			totalbytes += byteswritten;
 8011ab0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 8011aba:	4413      	add	r3, r2
 8011abc:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
			if ((byteswritten == 0) || (res != FR_OK)) {
 8011ac0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d003      	beq.n	8011ad2 <WriteData2FS+0xde>
 8011aca:	f897 3633 	ldrb.w	r3, [r7, #1587]	; 0x633
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d004      	beq.n	8011adc <WriteData2FS+0xe8>
				_Error_Handler(__FILE__, __LINE__);
 8011ad2:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8011ad6:	4813      	ldr	r0, [pc, #76]	; (8011b24 <WriteData2FS+0x130>)
 8011ad8:	f000 fcd6 	bl	8012488 <_Error_Handler>
		for (idx = 0; idx < NoOfPoints; idx++) {
 8011adc:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 8011ae6:	f107 0308 	add.w	r3, r7, #8
 8011aea:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d3bc      	bcc.n	8011a6e <WriteData2FS+0x7a>
		printf("File %s, %lu bytes written \r\n", fname, totalbytes);
 8011af4:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 8011af8:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011afc:	480c      	ldr	r0, [pc, #48]	; (8011b30 <WriteData2FS+0x13c>)
 8011afe:	f003 f9e3 	bl	8014ec8 <iprintf>
		f_close(&MyFile);
 8011b02:	f107 0314 	add.w	r3, r7, #20
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7f9 fbe8 	bl	800b2dc <f_close>
		printf("Closed file %s OK \r\n", fname);
 8011b0c:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011b10:	4808      	ldr	r0, [pc, #32]	; (8011b34 <WriteData2FS+0x140>)
 8011b12:	f003 f9d9 	bl	8014ec8 <iprintf>
}
 8011b16:	bf00      	nop
 8011b18:	f507 67c8 	add.w	r7, r7, #1600	; 0x640
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	08015e88 	.word	0x08015e88
 8011b24:	08015da4 	.word	0x08015da4
 8011b28:	08015e98 	.word	0x08015e98
 8011b2c:	08015eb0 	.word	0x08015eb0
 8011b30:	08015eb8 	.word	0x08015eb8
 8011b34:	08015ed8 	.word	0x08015ed8

08011b38 <DirList>:

void DirList(void) {
 8011b38:	b5b0      	push	{r4, r5, r7, lr}
 8011b3a:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
 8011b3e:	af00      	add	r7, sp, #0
	FATFS fs;
	FRESULT res;
	char buff[256];

	// Should be mounted already
	res = f_mount(&fs, "", 1);
 8011b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b44:	2201      	movs	r2, #1
 8011b46:	4939      	ldr	r1, [pc, #228]	; (8011c2c <DirList+0xf4>)
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f8 fe03 	bl	800a754 <f_mount>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	if (res == FR_OK) {
 8011b54:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d15a      	bne.n	8011c12 <DirList+0xda>
		strcpy(buff, "");
 8011b5c:	4b33      	ldr	r3, [pc, #204]	; (8011c2c <DirList+0xf4>)
 8011b5e:	781a      	ldrb	r2, [r3, #0]
 8011b60:	f107 0308 	add.w	r3, r7, #8
 8011b64:	701a      	strb	r2, [r3, #0]

		// File list
		res = scan_files(buff);
 8011b66:	f107 0308 	add.w	r3, r7, #8
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7ff fde8 	bl	8011740 <scan_files>
 8011b70:	4603      	mov	r3, r0
 8011b72:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		// Disk free space
		DWORD fre_clust, fre_sect, tot_sect;
		FATFS *fsp;

		// Get volume information and free clusters of drive 1
		res = f_getfree(buff, &fre_clust, &fsp);
 8011b76:	463a      	mov	r2, r7
 8011b78:	1d39      	adds	r1, r7, #4
 8011b7a:	f107 0308 	add.w	r3, r7, #8
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f9 fcc2 	bl	800b508 <f_getfree>
 8011b84:	4603      	mov	r3, r0
 8011b86:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		if (res) {
 8011b8a:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d007      	beq.n	8011ba2 <DirList+0x6a>
			printf("Error: Filesystem free space check failed \r\n");
 8011b92:	4827      	ldr	r0, [pc, #156]	; (8011c30 <DirList+0xf8>)
 8011b94:	f003 fa0c 	bl	8014fb0 <puts>
			_Error_Handler(__FILE__, __LINE__);
 8011b98:	f240 1197 	movw	r1, #407	; 0x197
 8011b9c:	4825      	ldr	r0, [pc, #148]	; (8011c34 <DirList+0xfc>)
 8011b9e:	f000 fc73 	bl	8012488 <_Error_Handler>
		}

		// Get total sectors and free sectors
		tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 8011ba2:	463b      	mov	r3, r7
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	699b      	ldr	r3, [r3, #24]
 8011ba8:	3b02      	subs	r3, #2
 8011baa:	463a      	mov	r2, r7
 8011bac:	6812      	ldr	r2, [r2, #0]
 8011bae:	8952      	ldrh	r2, [r2, #10]
 8011bb0:	fb02 f303 	mul.w	r3, r2, r3
 8011bb4:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
		fre_sect = fre_clust * fsp->csize;
 8011bb8:	463b      	mov	r3, r7
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	895b      	ldrh	r3, [r3, #10]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	1d3b      	adds	r3, r7, #4
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	fb03 f302 	mul.w	r3, r3, r2
 8011bc8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c

		// Print the free space (assuming 512 bytes/sector)
		printf(
 8011bcc:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8011bd0:	085c      	lsrs	r4, r3, #1
 8011bd2:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011bd6:	085d      	lsrs	r5, r3, #1
				"%10lu KiB total drive space.\n%10lu KiB available (%s\%%). \n",
				tot_sect / 2, fre_sect / 2,
				myPrintf(((float) (fre_sect)) / ((float) (tot_sect)) * 100.0));
 8011bd8:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011bdc:	ee07 3a90 	vmov	s15, r3
 8011be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011be4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8011be8:	ee07 3a90 	vmov	s15, r3
 8011bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		printf(
 8011bf4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8011c38 <DirList+0x100>
 8011bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8011c00:	f7ff fb9e 	bl	8011340 <myPrintf>
 8011c04:	4603      	mov	r3, r0
 8011c06:	462a      	mov	r2, r5
 8011c08:	4621      	mov	r1, r4
 8011c0a:	480c      	ldr	r0, [pc, #48]	; (8011c3c <DirList+0x104>)
 8011c0c:	f003 f95c 	bl	8014ec8 <iprintf>

	} else {
		printf("Error: Filesystem mount failed \r\n");
		_Error_Handler(__FILE__, __LINE__);
	}
}
 8011c10:	e007      	b.n	8011c22 <DirList+0xea>
		printf("Error: Filesystem mount failed \r\n");
 8011c12:	480b      	ldr	r0, [pc, #44]	; (8011c40 <DirList+0x108>)
 8011c14:	f003 f9cc 	bl	8014fb0 <puts>
		_Error_Handler(__FILE__, __LINE__);
 8011c18:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8011c1c:	4805      	ldr	r0, [pc, #20]	; (8011c34 <DirList+0xfc>)
 8011c1e:	f000 fc33 	bl	8012488 <_Error_Handler>
}
 8011c22:	bf00      	nop
 8011c24:	f507 7752 	add.w	r7, r7, #840	; 0x348
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8011c2c:	08015e6c 	.word	0x08015e6c
 8011c30:	08015ef0 	.word	0x08015ef0
 8011c34:	08015da4 	.word	0x08015da4
 8011c38:	42c80000 	.word	0x42c80000
 8011c3c:	08015f1c 	.word	0x08015f1c
 8011c40:	08015f58 	.word	0x08015f58

08011c44 <SCB_EnableICache>:
{
 8011c44:	b480      	push	{r7}
 8011c46:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011c48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011c4c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011c50:	4b09      	ldr	r3, [pc, #36]	; (8011c78 <SCB_EnableICache+0x34>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011c58:	4a07      	ldr	r2, [pc, #28]	; (8011c78 <SCB_EnableICache+0x34>)
 8011c5a:	4b07      	ldr	r3, [pc, #28]	; (8011c78 <SCB_EnableICache+0x34>)
 8011c5c:	695b      	ldr	r3, [r3, #20]
 8011c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011c64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011c68:	f3bf 8f6f 	isb	sy
}
 8011c6c:	bf00      	nop
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c74:	4770      	bx	lr
 8011c76:	bf00      	nop
 8011c78:	e000ed00 	.word	0xe000ed00

08011c7c <SCB_EnableDCache>:
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b085      	sub	sp, #20
 8011c80:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8011c82:	4b1d      	ldr	r3, [pc, #116]	; (8011cf8 <SCB_EnableDCache+0x7c>)
 8011c84:	2200      	movs	r2, #0
 8011c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011c8a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8011c8e:	4b1a      	ldr	r3, [pc, #104]	; (8011cf8 <SCB_EnableDCache+0x7c>)
 8011c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011c94:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	0b5b      	lsrs	r3, r3, #13
 8011c9a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011c9e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	08db      	lsrs	r3, r3, #3
 8011ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011ca8:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011caa:	4913      	ldr	r1, [pc, #76]	; (8011cf8 <SCB_EnableDCache+0x7c>)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	015a      	lsls	r2, r3, #5
 8011cb0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011cb4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011cb6:	68ba      	ldr	r2, [r7, #8]
 8011cb8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011cba:	4313      	orrs	r3, r2
 8011cbc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	1e5a      	subs	r2, r3, #1
 8011cc4:	60ba      	str	r2, [r7, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d1ef      	bne.n	8011caa <SCB_EnableDCache+0x2e>
    } while(sets--);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	1e5a      	subs	r2, r3, #1
 8011cce:	60fa      	str	r2, [r7, #12]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1e5      	bne.n	8011ca0 <SCB_EnableDCache+0x24>
 8011cd4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8011cd8:	4a07      	ldr	r2, [pc, #28]	; (8011cf8 <SCB_EnableDCache+0x7c>)
 8011cda:	4b07      	ldr	r3, [pc, #28]	; (8011cf8 <SCB_EnableDCache+0x7c>)
 8011cdc:	695b      	ldr	r3, [r3, #20]
 8011cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ce2:	6153      	str	r3, [r2, #20]
 8011ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011ce8:	f3bf 8f6f 	isb	sy
}
 8011cec:	bf00      	nop
 8011cee:	3714      	adds	r7, #20
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr
 8011cf8:	e000ed00 	.word	0xe000ed00

08011cfc <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8011cfc:	b5b0      	push	{r4, r5, r7, lr}
 8011cfe:	b0d4      	sub	sp, #336	; 0x150
 8011d00:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 8011d02:	4bc6      	ldr	r3, [pc, #792]	; (801201c <main+0x320>)
 8011d04:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8011d08:	461d      	mov	r5, r3
 8011d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100]; /* File read buffer */

	/* USER CODE END 1 */

	/* Enable I-Cache-------------------------------------------------------------*/
	SCB_EnableICache();
 8011d16:	f7ff ff95 	bl	8011c44 <SCB_EnableICache>

	/* Enable D-Cache-------------------------------------------------------------*/
	SCB_EnableDCache();
 8011d1a:	f7ff ffaf 	bl	8011c7c <SCB_EnableDCache>

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8011d1e:	f7ef fe91 	bl	8001a44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8011d22:	f000 fbc1 	bl	80124a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8011d26:	f000 ffb1 	bl	8012c8c <MX_GPIO_Init>
	MX_DMA_Init();
 8011d2a:	f000 fed3 	bl	8012ad4 <MX_DMA_Init>
	MX_FMC_Init();
 8011d2e:	f000 ff61 	bl	8012bf4 <MX_FMC_Init>
	MX_ADC3_Init();
 8011d32:	f000 fc67 	bl	8012604 <MX_ADC3_Init>
	MX_USART1_UART_Init();
 8011d36:	f000 fe7d 	bl	8012a34 <MX_USART1_UART_Init>
	MX_LTDC_Init();
 8011d3a:	f000 fd61 	bl	8012800 <MX_LTDC_Init>
	MX_I2C3_Init();
 8011d3e:	f000 fd15 	bl	801276c <MX_I2C3_Init>
	MX_DMA2D_Init();
 8011d42:	f000 fcd9 	bl	80126f8 <MX_DMA2D_Init>
	MX_CRC_Init();
 8011d46:	f000 fcaf 	bl	80126a8 <MX_CRC_Init>
	MX_WWDG_Init();
 8011d4a:	f000 fea7 	bl	8012a9c <MX_WWDG_Init>
	MX_TIM2_Init();
 8011d4e:	f000 fdd9 	bl	8012904 <MX_TIM2_Init>
	MX_TIM3_Init();
 8011d52:	f000 fe23 	bl	801299c <MX_TIM3_Init>

	/* USER CODE BEGIN 2 */

	// Start SDRAM
	FMC_SDRAM_CommandTypeDef hsdram1Command;
	BSP_SDRAM_Initialization_Sequence(&hsdram1, &hsdram1Command);
 8011d56:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	48b0      	ldr	r0, [pc, #704]	; (8012020 <main+0x324>)
 8011d5e:	f7ff fa75 	bl	801124c <BSP_SDRAM_Initialization_Sequence>

	// Start LCD
	BSP_LCD_Init();
 8011d62:	f7ef f87f 	bl	8000e64 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8011d66:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8011d6a:	2000      	movs	r0, #0
 8011d6c:	f7ef f912 	bl	8000f94 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8011d70:	2000      	movs	r0, #0
 8011d72:	f7ef f96f 	bl	8001054 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8011d76:	f7ef fc4d 	bl	8001614 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8011d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d7e:	f7ef f9db 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8011d82:	f04f 30ff 	mov.w	r0, #4294967295
 8011d86:	f7ef f98d 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8011d8a:	48a6      	ldr	r0, [pc, #664]	; (8012024 <main+0x328>)
 8011d8c:	f7ef f972 	bl	8001074 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 1!");
 8011d90:	49a5      	ldr	r1, [pc, #660]	; (8012028 <main+0x32c>)
 8011d92:	2005      	movs	r0, #5
 8011d94:	f7ef fb64 	bl	8001460 <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 8011d98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011d9c:	f7ef fe8e 	bl	8001abc <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8011da0:	48a0      	ldr	r0, [pc, #640]	; (8012024 <main+0x328>)
 8011da2:	f7ef f9c9 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8011da6:	489f      	ldr	r0, [pc, #636]	; (8012024 <main+0x328>)
 8011da8:	f7ef f97c 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8011dac:	f04f 30ff 	mov.w	r0, #4294967295
 8011db0:	f7ef f960 	bl	8001074 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 2!");
 8011db4:	499d      	ldr	r1, [pc, #628]	; (801202c <main+0x330>)
 8011db6:	2005      	movs	r0, #5
 8011db8:	f7ef fb52 	bl	8001460 <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 8011dbc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011dc0:	f7ef fe7c 	bl	8001abc <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8011dc4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011dc8:	f7ef f9b6 	bl	8001138 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8011dcc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011dd0:	f7ef f968 	bl	80010a4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8011dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd8:	f7ef f94c 	bl	8001074 <BSP_LCD_SetTextColor>

	/*##-1- Link the SDRAM disk I/O driver ##################################*/
	if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
 8011ddc:	4994      	ldr	r1, [pc, #592]	; (8012030 <main+0x334>)
 8011dde:	4895      	ldr	r0, [pc, #596]	; (8012034 <main+0x338>)
 8011de0:	f7fa f8c6 	bl	800bf70 <FATFS_LinkDriver>
 8011de4:	4603      	mov	r3, r0
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	f040 809c 	bne.w	8011f24 <main+0x228>
		printf("SDRAM FATFS link Success 1. \r\n");
 8011dec:	4892      	ldr	r0, [pc, #584]	; (8012038 <main+0x33c>)
 8011dee:	f003 f8df 	bl	8014fb0 <puts>
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 8011df2:	2200      	movs	r2, #0
 8011df4:	498e      	ldr	r1, [pc, #568]	; (8012030 <main+0x334>)
 8011df6:	4891      	ldr	r0, [pc, #580]	; (801203c <main+0x340>)
 8011df8:	f7f8 fcac 	bl	800a754 <f_mount>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d004      	beq.n	8011e0c <main+0x110>
			/* FatFs Initialization Error */
			_Error_Handler(__FILE__, __LINE__);
 8011e02:	21f3      	movs	r1, #243	; 0xf3
 8011e04:	488e      	ldr	r0, [pc, #568]	; (8012040 <main+0x344>)
 8011e06:	f000 fb3f 	bl	8012488 <_Error_Handler>
 8011e0a:	e08b      	b.n	8011f24 <main+0x228>
		} else {
			printf("SDRAM FATFS mount Success 2. \r\n");
 8011e0c:	488d      	ldr	r0, [pc, #564]	; (8012044 <main+0x348>)
 8011e0e:	f003 f8cf 	bl	8014fb0 <puts>
			/*##-3- Create a FAT file system (format) on the logical drive #########*/
			if (f_mkfs((TCHAR const*) SDRAMPath, FM_FAT32, 0, workBuffer,
 8011e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	4b8b      	ldr	r3, [pc, #556]	; (8012048 <main+0x34c>)
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	2102      	movs	r1, #2
 8011e1e:	4884      	ldr	r0, [pc, #528]	; (8012030 <main+0x334>)
 8011e20:	f7f9 fc2e 	bl	800b680 <f_mkfs>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d004      	beq.n	8011e34 <main+0x138>
					sizeof(workBuffer)) != FR_OK) {
				/* FatFs Format Error */
				_Error_Handler(__FILE__, __LINE__);
 8011e2a:	21fa      	movs	r1, #250	; 0xfa
 8011e2c:	4884      	ldr	r0, [pc, #528]	; (8012040 <main+0x344>)
 8011e2e:	f000 fb2b 	bl	8012488 <_Error_Handler>
 8011e32:	e077      	b.n	8011f24 <main+0x228>
			} else {
				printf("SDRAM FATFS format Success 3. \r\n");
 8011e34:	4885      	ldr	r0, [pc, #532]	; (801204c <main+0x350>)
 8011e36:	f003 f8bb 	bl	8014fb0 <puts>
				/*##-4- Create and Open a new text file object with write access #####*/
				if (f_open(&MyFile, "STM32.TXT",
 8011e3a:	220a      	movs	r2, #10
 8011e3c:	4984      	ldr	r1, [pc, #528]	; (8012050 <main+0x354>)
 8011e3e:	4885      	ldr	r0, [pc, #532]	; (8012054 <main+0x358>)
 8011e40:	f7f8 fcec 	bl	800a81c <f_open>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d005      	beq.n	8011e56 <main+0x15a>
						FA_CREATE_ALWAYS | FA_WRITE)
						!= FR_OK) {
					/* 'STM32.TXT' file Open for write Error */
					_Error_Handler(__FILE__, __LINE__);
 8011e4a:	f44f 7181 	mov.w	r1, #258	; 0x102
 8011e4e:	487c      	ldr	r0, [pc, #496]	; (8012040 <main+0x344>)
 8011e50:	f000 fb1a 	bl	8012488 <_Error_Handler>
 8011e54:	e066      	b.n	8011f24 <main+0x228>
				} else {
					printf("SDRAM FATFS fopen Success 4. \r\n");
 8011e56:	4880      	ldr	r0, [pc, #512]	; (8012058 <main+0x35c>)
 8011e58:	f003 f8aa 	bl	8014fb0 <puts>
					/*##-5- Write data to the text file ################################*/
					res = f_write(&MyFile, wtext, sizeof(wtext),
 8011e5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8011e60:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8011e64:	2221      	movs	r2, #33	; 0x21
 8011e66:	487b      	ldr	r0, [pc, #492]	; (8012054 <main+0x358>)
 8011e68:	f7f9 f80b 	bl	800ae82 <f_write>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
							(void *) &byteswritten);

					if ((byteswritten == 0) || (res != FR_OK)) {
 8011e72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d003      	beq.n	8011e82 <main+0x186>
 8011e7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d005      	beq.n	8011e8e <main+0x192>
						/* 'STM32.TXT' file Write or EOF Error */
						_Error_Handler(__FILE__, __LINE__);
 8011e82:	f240 110b 	movw	r1, #267	; 0x10b
 8011e86:	486e      	ldr	r0, [pc, #440]	; (8012040 <main+0x344>)
 8011e88:	f000 fafe 	bl	8012488 <_Error_Handler>
 8011e8c:	e04a      	b.n	8011f24 <main+0x228>
					} else {
						printf("SDRAM FATFS write Success 5. \r\n");
 8011e8e:	4873      	ldr	r0, [pc, #460]	; (801205c <main+0x360>)
 8011e90:	f003 f88e 	bl	8014fb0 <puts>
						/*##-6- Close the open text file #################################*/
						f_close(&MyFile);
 8011e94:	486f      	ldr	r0, [pc, #444]	; (8012054 <main+0x358>)
 8011e96:	f7f9 fa21 	bl	800b2dc <f_close>
						printf("SDRAM FATFS fclose Success 6. \r\n");
 8011e9a:	4871      	ldr	r0, [pc, #452]	; (8012060 <main+0x364>)
 8011e9c:	f003 f888 	bl	8014fb0 <puts>

						/*##-7- Open the text file object with read access ###############*/
						if (f_open(&MyFile, "STM32.TXT", FA_READ)
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	496b      	ldr	r1, [pc, #428]	; (8012050 <main+0x354>)
 8011ea4:	486b      	ldr	r0, [pc, #428]	; (8012054 <main+0x358>)
 8011ea6:	f7f8 fcb9 	bl	800a81c <f_open>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d005      	beq.n	8011ebc <main+0x1c0>
								!= FR_OK) {
							/* 'STM32.TXT' file Open for read Error */
							_Error_Handler(__FILE__, __LINE__);
 8011eb0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8011eb4:	4862      	ldr	r0, [pc, #392]	; (8012040 <main+0x344>)
 8011eb6:	f000 fae7 	bl	8012488 <_Error_Handler>
 8011eba:	e033      	b.n	8011f24 <main+0x228>
						} else {
							printf("SDRAM FATFS fopen(read) Success 7. \r\n");
 8011ebc:	4869      	ldr	r0, [pc, #420]	; (8012064 <main+0x368>)
 8011ebe:	f003 f877 	bl	8014fb0 <puts>
							/*##-8- Read data from the text file ###########################*/
							res = f_read(&MyFile, rtext, sizeof(rtext),
 8011ec2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8011ec6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8011eca:	2264      	movs	r2, #100	; 0x64
 8011ecc:	4861      	ldr	r0, [pc, #388]	; (8012054 <main+0x358>)
 8011ece:	f7f8 fe6a 	bl	800aba6 <f_read>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
									(UINT*) &bytesread);

							if ((bytesread == 0) || (res != FR_OK)) {
 8011ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d003      	beq.n	8011ee8 <main+0x1ec>
 8011ee0:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d005      	beq.n	8011ef4 <main+0x1f8>
								/* 'STM32.TXT' file Read or EOF Error */
								_Error_Handler(__FILE__, __LINE__);
 8011ee8:	f240 111f 	movw	r1, #287	; 0x11f
 8011eec:	4854      	ldr	r0, [pc, #336]	; (8012040 <main+0x344>)
 8011eee:	f000 facb 	bl	8012488 <_Error_Handler>
 8011ef2:	e017      	b.n	8011f24 <main+0x228>
							} else {
								printf("SDRAM FATFS read Success 8. \r\n");
 8011ef4:	485c      	ldr	r0, [pc, #368]	; (8012068 <main+0x36c>)
 8011ef6:	f003 f85b 	bl	8014fb0 <puts>
								/*##-9- Close the open text file #############################*/
								f_close(&MyFile);
 8011efa:	4856      	ldr	r0, [pc, #344]	; (8012054 <main+0x358>)
 8011efc:	f7f9 f9ee 	bl	800b2dc <f_close>
								printf("SDRAM FATFS fclose Success 9. \r\n");
 8011f00:	485a      	ldr	r0, [pc, #360]	; (801206c <main+0x370>)
 8011f02:	f003 f855 	bl	8014fb0 <puts>
								/*##-10- Compare read data with the expected data ############*/
								if ((bytesread != byteswritten)) {
 8011f06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8011f0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d005      	beq.n	8011f1e <main+0x222>
									/* Read data is different from the expected data */
									_Error_Handler(__FILE__, __LINE__);
 8011f12:	f44f 7194 	mov.w	r1, #296	; 0x128
 8011f16:	484a      	ldr	r0, [pc, #296]	; (8012040 <main+0x344>)
 8011f18:	f000 fab6 	bl	8012488 <_Error_Handler>
 8011f1c:	e002      	b.n	8011f24 <main+0x228>
								} else {
									/* Success of the demo: no error occurrence */
									printf("SDRAM FATFS Success 10. \r\n");
 8011f1e:	4854      	ldr	r0, [pc, #336]	; (8012070 <main+0x374>)
 8011f20:	f003 f846 	bl	8014fb0 <puts>
				}
			}
		}
	}

	DirList();
 8011f24:	f7ff fe08 	bl	8011b38 <DirList>

	char Arg[30];
	char Cmd[30];
	char CmdBuffer[30];

	uint8_t n = 0;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	uint32_t MeasNo = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

	uint32_t NoOfPoints = 19200;
 8011f34:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8011f38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	uint32_t AvgSize = 10;
 8011f3c:	230a      	movs	r3, #10
 8011f3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint32_t Period_us = 100;
 8011f42:	2364      	movs	r3, #100	; 0x64
 8011f44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint32_t Count_ms = 1000;
 8011f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011f4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	// Clear screen, set it up
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8011f50:	f04f 31ff 	mov.w	r1, #4294967295
 8011f54:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011f58:	f7ff fb7e 	bl	8011658 <InitScreen>

	// Initialize data storage
	// https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
	Array Data;
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 8011f5c:	f107 0318 	add.w	r3, r7, #24
 8011f60:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff fa6f 	bl	8011448 <initArray>

	// LCDWrite(5, "Ready.");

	Cmd[0] = '\0';
 8011f6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f6e:	2200      	movs	r2, #0
 8011f70:	701a      	strb	r2, [r3, #0]
	Arg[0] = '\0';
 8011f72:	2300      	movs	r3, #0
 8011f74:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 8011f78:	e1a0      	b.n	80122bc <main+0x5c0>

		printf(
				"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
						"Sampling will take apprx %s secs \r\n", NoOfPoints,
				AvgSize, Period_us, Count_ms,
				myPrintf(NoOfPoints * Period_us / 1000000));
 8011f7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f7e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8011f82:	fb02 f303 	mul.w	r3, r2, r3
 8011f86:	4a3b      	ldr	r2, [pc, #236]	; (8012074 <main+0x378>)
 8011f88:	fba2 2303 	umull	r2, r3, r2, r3
 8011f8c:	0c9b      	lsrs	r3, r3, #18
		printf(
 8011f8e:	ee07 3a90 	vmov	s15, r3
 8011f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f96:	eeb0 0a67 	vmov.f32	s0, s15
 8011f9a:	f7ff f9d1 	bl	8011340 <myPrintf>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	9301      	str	r3, [sp, #4]
 8011fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011fa6:	9300      	str	r3, [sp, #0]
 8011fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011fac:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011fb0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8011fb4:	4830      	ldr	r0, [pc, #192]	; (8012078 <main+0x37c>)
 8011fb6:	f002 ff87 	bl	8014ec8 <iprintf>

		Cmd[0] = '\0';
 8011fba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	701a      	strb	r2, [r3, #0]
		Arg[0] = '\0';
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

		strcpy(CmdBuffer, " ");
 8011fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fcc:	2220      	movs	r2, #32
 8011fce:	801a      	strh	r2, [r3, #0]
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8011fd0:	e004      	b.n	8011fdc <main+0x2e0>
			String_GetString((uint8_t *) CmdBuffer);
 8011fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7ff f816 	bl	8011008 <String_GetString>
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8011fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fe0:	4926      	ldr	r1, [pc, #152]	; (801207c <main+0x380>)
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7ee f914 	bl	8000210 <strcmp>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d0f1      	beq.n	8011fd2 <main+0x2d6>
 8011fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d0ec      	beq.n	8011fd2 <main+0x2d6>
		}

		printf("\r\n I got %s \r\n", CmdBuffer);
 8011ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	4820      	ldr	r0, [pc, #128]	; (8012080 <main+0x384>)
 8012000:	f002 ff62 	bl	8014ec8 <iprintf>

		// Parse and copy arg 0
		cmdPtr = string_parse((char *) CmdBuffer, 0);
 8012004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012008:	2100      	movs	r1, #0
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fa68 	bl	80114e0 <string_parse>
 8012010:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144

		uint8_t i = 0;
 8012014:	2300      	movs	r3, #0
 8012016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		while (*cmdPtr != '\0') {
 801201a:	e045      	b.n	80120a8 <main+0x3ac>
 801201c:	08016250 	.word	0x08016250
 8012020:	2000fd70 	.word	0x2000fd70
 8012024:	ff0000ff 	.word	0xff0000ff
 8012028:	08015f7c 	.word	0x08015f7c
 801202c:	08015f94 	.word	0x08015f94
 8012030:	2000ffe8 	.word	0x2000ffe8
 8012034:	08018d7c 	.word	0x08018d7c
 8012038:	08015fac 	.word	0x08015fac
 801203c:	20010270 	.word	0x20010270
 8012040:	08015fcc 	.word	0x08015fcc
 8012044:	08015fdc 	.word	0x08015fdc
 8012048:	2000fde8 	.word	0x2000fde8
 801204c:	08015ffc 	.word	0x08015ffc
 8012050:	0801601c 	.word	0x0801601c
 8012054:	20010000 	.word	0x20010000
 8012058:	08016028 	.word	0x08016028
 801205c:	08016048 	.word	0x08016048
 8012060:	08016068 	.word	0x08016068
 8012064:	08016088 	.word	0x08016088
 8012068:	080160b0 	.word	0x080160b0
 801206c:	080160d0 	.word	0x080160d0
 8012070:	080160f0 	.word	0x080160f0
 8012074:	431bde83 	.word	0x431bde83
 8012078:	0801610c 	.word	0x0801610c
 801207c:	08016178 	.word	0x08016178
 8012080:	0801617c 	.word	0x0801617c
			Cmd[i] = (char) *cmdPtr;
 8012084:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8012088:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801208c:	7811      	ldrb	r1, [r2, #0]
 801208e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012092:	54d1      	strb	r1, [r2, r3]
			i++;
 8012094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8012098:	3301      	adds	r3, #1
 801209a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			cmdPtr++;
 801209e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80120a2:	3301      	adds	r3, #1
 80120a4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		while (*cmdPtr != '\0') {
 80120a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d1e8      	bne.n	8012084 <main+0x388>
		}
		Cmd[i] = '\0';
 80120b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80120b6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80120ba:	2100      	movs	r1, #0
 80120bc:	54d1      	strb	r1, [r2, r3]

		argPtr = string_parse((char *) CmdBuffer, 1);
 80120be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120c2:	2101      	movs	r1, #1
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7ff fa0b 	bl	80114e0 <string_parse>
 80120ca:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140

		i = 0;
 80120ce:	2300      	movs	r3, #0
 80120d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		while (*argPtr != '\0') {
 80120d4:	e013      	b.n	80120fe <main+0x402>
			Arg[i] = (char) *argPtr;
 80120d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80120da:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80120de:	7812      	ldrb	r2, [r2, #0]
 80120e0:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80120e4:	440b      	add	r3, r1
 80120e6:	f803 2ce4 	strb.w	r2, [r3, #-228]
			i++;
 80120ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80120ee:	3301      	adds	r3, #1
 80120f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			argPtr++;
 80120f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80120f8:	3301      	adds	r3, #1
 80120fa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		while (*argPtr != '\0') {
 80120fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1e6      	bne.n	80120d6 <main+0x3da>
		}
		Arg[i] = '\0';
 8012108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801210c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8012110:	4413      	add	r3, r2
 8012112:	2200      	movs	r2, #0
 8012114:	f803 2ce4 	strb.w	r2, [r3, #-228]
//		free(word_array);

		// Branch based on command

		// Length of the second argument
		n = strlen(Arg);
 8012118:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801211c:	4618      	mov	r0, r3
 801211e:	f7ee f881 	bl	8000224 <strlen>
 8012122:	4603      	mov	r3, r0
 8012124:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

		// meas: Sample and plot a data set
		if ((strcmp(Cmd, "meas") == 0) && (n == 0)) {
 8012128:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801212c:	497f      	ldr	r1, [pc, #508]	; (801232c <main+0x630>)
 801212e:	4618      	mov	r0, r3
 8012130:	f7ee f86e 	bl	8000210 <strcmp>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d128      	bne.n	801218c <main+0x490>
 801213a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 801213e:	2b00      	cmp	r3, #0
 8012140:	d124      	bne.n	801218c <main+0x490>

			// Countdown
			CountDown(Count_ms);
 8012142:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8012146:	f7ff fabb 	bl	80116c0 <CountDown>

			MeasNo++;
 801214a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801214e:	3301      	adds	r3, #1
 8012150:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

			// Sample & plot data one time
			SamplePoints(&Data, NoOfPoints, Period_us);
 8012154:	f107 0318 	add.w	r3, r7, #24
 8012158:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801215c:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012160:	4618      	mov	r0, r3
 8012162:	f7ff fb4d 	bl	8011800 <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 8012166:	f107 0318 	add.w	r3, r7, #24
 801216a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801216e:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012172:	4618      	mov	r0, r3
 8012174:	f7ff fba2 	bl	80118bc <AvgAndPlotPoints>

			// Write the unaveraged (full) data to file meas#.txt
			WriteData2FS(&Data, NoOfPoints, MeasNo);
 8012178:	f107 0318 	add.w	r3, r7, #24
 801217c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8012180:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012184:	4618      	mov	r0, r3
 8012186:	f7ff fc35 	bl	80119f4 <WriteData2FS>
 801218a:	e097      	b.n	80122bc <main+0x5c0>
		}

		// setpoints: Adjust sampled points
		else if ((strcmp(Cmd, "setpoints") == 0) && (n > 0)) {
 801218c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012190:	4967      	ldr	r1, [pc, #412]	; (8012330 <main+0x634>)
 8012192:	4618      	mov	r0, r3
 8012194:	f7ee f83c 	bl	8000210 <strcmp>
 8012198:	4603      	mov	r3, r0
 801219a:	2b00      	cmp	r3, #0
 801219c:	d125      	bne.n	80121ea <main+0x4ee>
 801219e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d021      	beq.n	80121ea <main+0x4ee>
			// Allocate more or less data space
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 80121a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80121aa:	220a      	movs	r2, #10
 80121ac:	2100      	movs	r1, #0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f003 f844 	bl	801523c <strtol>
 80121b4:	4603      	mov	r3, r0
 80121b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			printf("Old Data size is %u New NoOfPOints = %lu \r\n",
 80121ba:	f107 0318 	add.w	r3, r7, #24
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80121c4:	4619      	mov	r1, r3
 80121c6:	485b      	ldr	r0, [pc, #364]	; (8012334 <main+0x638>)
 80121c8:	f002 fe7e 	bl	8014ec8 <iprintf>
					Data.size, NoOfPoints);

			insertArray(&Data, NoOfPoints);
 80121cc:	f107 0318 	add.w	r3, r7, #24
 80121d0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7ff f94e 	bl	8011476 <insertArray>
			printf("New Array size is %u \r\n", Data.size);
 80121da:	f107 0318 	add.w	r3, r7, #24
 80121de:	689b      	ldr	r3, [r3, #8]
 80121e0:	4619      	mov	r1, r3
 80121e2:	4855      	ldr	r0, [pc, #340]	; (8012338 <main+0x63c>)
 80121e4:	f002 fe70 	bl	8014ec8 <iprintf>
 80121e8:	e068      	b.n	80122bc <main+0x5c0>
		}

		// setavg: Adjust average amount in samples
		else if ((strcmp(Cmd, "setavg") == 0) && (n > 0)) {
 80121ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80121ee:	4953      	ldr	r1, [pc, #332]	; (801233c <main+0x640>)
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7ee f80d 	bl	8000210 <strcmp>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d10e      	bne.n	801221a <main+0x51e>
 80121fc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00a      	beq.n	801221a <main+0x51e>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 8012204:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012208:	220a      	movs	r2, #10
 801220a:	2100      	movs	r1, #0
 801220c:	4618      	mov	r0, r3
 801220e:	f003 f815 	bl	801523c <strtol>
 8012212:	4603      	mov	r3, r0
 8012214:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8012218:	e050      	b.n	80122bc <main+0x5c0>
		}

		// setperiod: Adjust sample period in us
		else if ((strcmp(Cmd, "setperiod") == 0) && (n > 0)) {
 801221a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801221e:	4948      	ldr	r1, [pc, #288]	; (8012340 <main+0x644>)
 8012220:	4618      	mov	r0, r3
 8012222:	f7ed fff5 	bl	8000210 <strcmp>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d10e      	bne.n	801224a <main+0x54e>
 801222c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00a      	beq.n	801224a <main+0x54e>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 8012234:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012238:	220a      	movs	r2, #10
 801223a:	2100      	movs	r1, #0
 801223c:	4618      	mov	r0, r3
 801223e:	f002 fffd 	bl	801523c <strtol>
 8012242:	4603      	mov	r3, r0
 8012244:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012248:	e038      	b.n	80122bc <main+0x5c0>
		}

		// setcount: Adjust countdown period in ms
		else if ((strcmp(Cmd, "setcount") == 0) && (n > 0)) {
 801224a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801224e:	493d      	ldr	r1, [pc, #244]	; (8012344 <main+0x648>)
 8012250:	4618      	mov	r0, r3
 8012252:	f7ed ffdd 	bl	8000210 <strcmp>
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d10e      	bne.n	801227a <main+0x57e>
 801225c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8012260:	2b00      	cmp	r3, #0
 8012262:	d00a      	beq.n	801227a <main+0x57e>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 8012264:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012268:	220a      	movs	r2, #10
 801226a:	2100      	movs	r1, #0
 801226c:	4618      	mov	r0, r3
 801226e:	f002 ffe5 	bl	801523c <strtol>
 8012272:	4603      	mov	r3, r0
 8012274:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012278:	e020      	b.n	80122bc <main+0x5c0>
		}

		// dir: Print file listing
		else if ((strcmp(Cmd, "dir") == 0) && (n == 0)) {
 801227a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801227e:	4932      	ldr	r1, [pc, #200]	; (8012348 <main+0x64c>)
 8012280:	4618      	mov	r0, r3
 8012282:	f7ed ffc5 	bl	8000210 <strcmp>
 8012286:	4603      	mov	r3, r0
 8012288:	2b00      	cmp	r3, #0
 801228a:	d106      	bne.n	801229a <main+0x59e>
 801228c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8012290:	2b00      	cmp	r3, #0
 8012292:	d102      	bne.n	801229a <main+0x59e>
			DirList();
 8012294:	f7ff fc50 	bl	8011b38 <DirList>
 8012298:	e010      	b.n	80122bc <main+0x5c0>
		}

		// quit: Exit on next while
		else if ((strcmp(Cmd, "quit") == 0) && (n == 0)) {
 801229a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801229e:	492b      	ldr	r1, [pc, #172]	; (801234c <main+0x650>)
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7ed ffb5 	bl	8000210 <strcmp>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d104      	bne.n	80122b6 <main+0x5ba>
 80122ac:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d100      	bne.n	80122b6 <main+0x5ba>
 80122b4:	e002      	b.n	80122bc <main+0x5c0>
			// Do nothing yet
		} else {
			printf("Wrong command or argument \r\n");
 80122b6:	4826      	ldr	r0, [pc, #152]	; (8012350 <main+0x654>)
 80122b8:	f002 fe7a 	bl	8014fb0 <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 80122bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80122c0:	4922      	ldr	r1, [pc, #136]	; (801234c <main+0x650>)
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7ed ffa4 	bl	8000210 <strcmp>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f47f ae55 	bne.w	8011f7a <main+0x27e>
 80122d0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80122d4:	2b01      	cmp	r3, #1
 80122d6:	f47f ae50 	bne.w	8011f7a <main+0x27e>
		}
	}

	// Free memory after quit
	freeArray(&Data);
 80122da:	f107 0318 	add.w	r3, r7, #24
 80122de:	4618      	mov	r0, r3
 80122e0:	f7ff f8e6 	bl	80114b0 <freeArray>

	// Unlink the SDRAM disk I/O driver
	FATFS_UnLinkDriver(SDRAMPath);
 80122e4:	481b      	ldr	r0, [pc, #108]	; (8012354 <main+0x658>)
 80122e6:	f7f9 fe8b 	bl	800c000 <FATFS_UnLinkDriver>

	// Print informative messages
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 80122ea:	f04f 31ff 	mov.w	r1, #4294967295
 80122ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80122f2:	f7ff f9b1 	bl	8011658 <InitScreen>
	LCDWrite(5, "Stop.");
 80122f6:	4918      	ldr	r1, [pc, #96]	; (8012358 <main+0x65c>)
 80122f8:	2005      	movs	r0, #5
 80122fa:	f7ff f9c5 	bl	8011688 <LCDWrite>

	printf("Exit. Data freed. Stop. \r\n");
 80122fe:	4817      	ldr	r0, [pc, #92]	; (801235c <main+0x660>)
 8012300:	f002 fe56 	bl	8014fb0 <puts>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8012304:	1d3b      	adds	r3, r7, #4
 8012306:	4a16      	ldr	r2, [pc, #88]	; (8012360 <main+0x664>)
 8012308:	461c      	mov	r4, r3
 801230a:	4615      	mov	r5, r2
 801230c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801230e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012310:	682b      	ldr	r3, [r5, #0]
 8012312:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8012314:	1d3b      	adds	r3, r7, #4
 8012316:	2100      	movs	r1, #0
 8012318:	4618      	mov	r0, r3
 801231a:	f7f9 fef9 	bl	800c110 <osThreadCreate>
 801231e:	4602      	mov	r2, r0
 8012320:	4b10      	ldr	r3, [pc, #64]	; (8012364 <main+0x668>)
 8012322:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */


	/* Start scheduler */
	osKernelStart();
 8012324:	f7f9 feed 	bl	800c102 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8012328:	e7fe      	b.n	8012328 <main+0x62c>
 801232a:	bf00      	nop
 801232c:	0801618c 	.word	0x0801618c
 8012330:	08016194 	.word	0x08016194
 8012334:	080161a0 	.word	0x080161a0
 8012338:	080161cc 	.word	0x080161cc
 801233c:	080161e4 	.word	0x080161e4
 8012340:	080161ec 	.word	0x080161ec
 8012344:	080161f8 	.word	0x080161f8
 8012348:	08016204 	.word	0x08016204
 801234c:	08016208 	.word	0x08016208
 8012350:	08016210 	.word	0x08016210
 8012354:	2000ffe8 	.word	0x2000ffe8
 8012358:	0801622c 	.word	0x0801622c
 801235c:	08016234 	.word	0x08016234
 8012360:	08016280 	.word	0x08016280
 8012364:	2000fda4 	.word	0x2000fda4

08012368 <StartDefaultTask>:
	}

}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument) {
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
	/* init code for FATFS */
	MX_FATFS_Init();
 8012370:	f7fe ffca 	bl	8011308 <MX_FATFS_Init>

	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8012374:	f002 f842 	bl	80143fc <MX_USB_HOST_Init>

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8012378:	2001      	movs	r0, #1
 801237a:	f7f9 fef0 	bl	800c15e <osDelay>
		printf("Looping OS \r\n");
 801237e:	4802      	ldr	r0, [pc, #8]	; (8012388 <StartDefaultTask+0x20>)
 8012380:	f002 fe16 	bl	8014fb0 <puts>
		osDelay(1);
 8012384:	e7f8      	b.n	8012378 <StartDefaultTask+0x10>
 8012386:	bf00      	nop
 8012388:	08016294 	.word	0x08016294

0801238c <__io_putchar>:

/* USER CODE END 2 */

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	b2db      	uxtb	r3, r3
 8012398:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 801239a:	f107 010c 	add.w	r1, r7, #12
 801239e:	230a      	movs	r3, #10
 80123a0:	2201      	movs	r2, #1
 80123a2:	4804      	ldr	r0, [pc, #16]	; (80123b4 <__io_putchar+0x28>)
 80123a4:	f7f4 fe91 	bl	80070ca <HAL_UART_Transmit>
	return ch;
 80123a8:	687b      	ldr	r3, [r7, #4]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	2000fc60 	.word	0x2000fc60

080123b8 <_write>:

int _write(int file, char *ptr, int len) {
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80123c4:	2300      	movs	r3, #0
 80123c6:	617b      	str	r3, [r7, #20]
 80123c8:	e009      	b.n	80123de <_write+0x26>
		__io_putchar(*ptr++);
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	1c5a      	adds	r2, r3, #1
 80123ce:	60ba      	str	r2, [r7, #8]
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7ff ffda 	bl	801238c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	3301      	adds	r3, #1
 80123dc:	617b      	str	r3, [r7, #20]
 80123de:	697a      	ldr	r2, [r7, #20]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	dbf1      	blt.n	80123ca <_write+0x12>
	}
	return len;
 80123e6:	687b      	ldr	r3, [r7, #4]
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3718      	adds	r7, #24
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <__io_getchar>:

int __io_getchar(void) {
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef Status = HAL_BUSY;
 80123f6:	2302      	movs	r3, #2
 80123f8:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	while (Status != HAL_OK)
 80123fa:	e007      	b.n	801240c <__io_getchar+0x1c>
		Status = HAL_UART_Receive(&huart1, &Data, 1, 10);
 80123fc:	1db9      	adds	r1, r7, #6
 80123fe:	230a      	movs	r3, #10
 8012400:	2201      	movs	r2, #1
 8012402:	4806      	ldr	r0, [pc, #24]	; (801241c <__io_getchar+0x2c>)
 8012404:	f7f4 feec 	bl	80071e0 <HAL_UART_Receive>
 8012408:	4603      	mov	r3, r0
 801240a:	71fb      	strb	r3, [r7, #7]
	while (Status != HAL_OK)
 801240c:	79fb      	ldrb	r3, [r7, #7]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d1f4      	bne.n	80123fc <__io_getchar+0xc>

	return (Data);
 8012412:	79bb      	ldrb	r3, [r7, #6]
}
 8012414:	4618      	mov	r0, r3
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	2000fc60 	.word	0x2000fc60

08012420 <_read>:

int _read(int file, char *ptr, int len) {
 8012420:	b590      	push	{r4, r7, lr}
 8012422:	b087      	sub	sp, #28
 8012424:	af00      	add	r7, sp, #0
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801242c:	2300      	movs	r3, #0
 801242e:	617b      	str	r3, [r7, #20]
 8012430:	e00a      	b.n	8012448 <_read+0x28>
		*ptr++ = __io_getchar();
 8012432:	68bc      	ldr	r4, [r7, #8]
 8012434:	1c63      	adds	r3, r4, #1
 8012436:	60bb      	str	r3, [r7, #8]
 8012438:	f7ff ffda 	bl	80123f0 <__io_getchar>
 801243c:	4603      	mov	r3, r0
 801243e:	b2db      	uxtb	r3, r3
 8012440:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	3301      	adds	r3, #1
 8012446:	617b      	str	r3, [r7, #20]
 8012448:	697a      	ldr	r2, [r7, #20]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	429a      	cmp	r2, r3
 801244e:	dbf0      	blt.n	8012432 <_read+0x12>
	}
	return len;
 8012450:	687b      	ldr	r3, [r7, #4]
}
 8012452:	4618      	mov	r0, r3
 8012454:	371c      	adds	r7, #28
 8012456:	46bd      	mov	sp, r7
 8012458:	bd90      	pop	{r4, r7, pc}

0801245a <vOutputChar>:

// FreeRTOS printf functions need this
void vOutputChar(const char cChar, const TickType_t xTicksToWait) {
 801245a:	b480      	push	{r7}
 801245c:	b083      	sub	sp, #12
 801245e:	af00      	add	r7, sp, #0
 8012460:	4603      	mov	r3, r0
 8012462:	6039      	str	r1, [r7, #0]
 8012464:	71fb      	strb	r3, [r7, #7]
	/* Eg. send a byte to the UART. */
}
 8012466:	bf00      	nop
 8012468:	370c      	adds	r7, #12
 801246a:	46bd      	mov	sp, r7
 801246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012470:	4770      	bx	lr

08012472 <xApplicationMemoryPermissions>:

BaseType_t xApplicationMemoryPermissions(uint32_t aAddress) {
 8012472:	b480      	push	{r7}
 8012474:	b083      	sub	sp, #12
 8012476:	af00      	add	r7, sp, #0
 8012478:	6078      	str	r0, [r7, #4]
	return 3;
 801247a:	2303      	movs	r3, #3
}
 801247c:	4618      	mov	r0, r3
 801247e:	370c      	adds	r7, #12
 8012480:	46bd      	mov	sp, r7
 8012482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012486:	4770      	bx	lr

08012488 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	printf("\r\nError file = %s Line = %d \r\n", file, line);
 8012492:	683a      	ldr	r2, [r7, #0]
 8012494:	6879      	ldr	r1, [r7, #4]
 8012496:	4803      	ldr	r0, [pc, #12]	; (80124a4 <_Error_Handler+0x1c>)
 8012498:	f002 fd16 	bl	8014ec8 <iprintf>

	/* USER CODE END Error_Handler_Debug */
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	080162a4 	.word	0x080162a4

080124a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b0b4      	sub	sp, #208	; 0xd0
 80124ac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80124ae:	4a50      	ldr	r2, [pc, #320]	; (80125f0 <SystemClock_Config+0x148>)
 80124b0:	4b4f      	ldr	r3, [pc, #316]	; (80125f0 <SystemClock_Config+0x148>)
 80124b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124b8:	6413      	str	r3, [r2, #64]	; 0x40
 80124ba:	4b4d      	ldr	r3, [pc, #308]	; (80125f0 <SystemClock_Config+0x148>)
 80124bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80124c2:	607b      	str	r3, [r7, #4]
 80124c4:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80124c6:	4a4b      	ldr	r2, [pc, #300]	; (80125f4 <SystemClock_Config+0x14c>)
 80124c8:	4b4a      	ldr	r3, [pc, #296]	; (80125f4 <SystemClock_Config+0x14c>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80124d0:	6013      	str	r3, [r2, #0]
 80124d2:	4b48      	ldr	r3, [pc, #288]	; (80125f4 <SystemClock_Config+0x14c>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80124da:	603b      	str	r3, [r7, #0]
 80124dc:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80124de:	2301      	movs	r3, #1
 80124e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80124e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80124e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80124ec:	2302      	movs	r3, #2
 80124ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80124f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80124f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80124fa:	2319      	movs	r3, #25
 80124fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8012500:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012508:	2302      	movs	r3, #2
 801250a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 801250e:	2309      	movs	r3, #9
 8012510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012514:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012518:	4618      	mov	r0, r3
 801251a:	f7f2 ffcd 	bl	80054b8 <HAL_RCC_OscConfig>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d004      	beq.n	801252e <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012524:	f240 2187 	movw	r1, #647	; 0x287
 8012528:	4833      	ldr	r0, [pc, #204]	; (80125f8 <SystemClock_Config+0x150>)
 801252a:	f7ff ffad 	bl	8012488 <_Error_Handler>
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801252e:	f7f2 ff73 	bl	8005418 <HAL_PWREx_EnableOverDrive>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d004      	beq.n	8012542 <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012538:	f240 218e 	movw	r1, #654	; 0x28e
 801253c:	482e      	ldr	r0, [pc, #184]	; (80125f8 <SystemClock_Config+0x150>)
 801253e:	f7ff ffa3 	bl	8012488 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012542:	230f      	movs	r3, #15
 8012544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012548:	2302      	movs	r3, #2
 801254a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801254e:	2300      	movs	r3, #0
 8012550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012554:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8012564:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012568:	2106      	movs	r1, #6
 801256a:	4618      	mov	r0, r3
 801256c:	f7f3 fa14 	bl	8005998 <HAL_RCC_ClockConfig>
 8012570:	4603      	mov	r3, r0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d004      	beq.n	8012580 <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012576:	f44f 7127 	mov.w	r1, #668	; 0x29c
 801257a:	481f      	ldr	r0, [pc, #124]	; (80125f8 <SystemClock_Config+0x150>)
 801257c:	f7ff ff84 	bl	8012488 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8012580:	4b1e      	ldr	r3, [pc, #120]	; (80125fc <SystemClock_Config+0x154>)
 8012582:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 190;
 8012584:	23be      	movs	r3, #190	; 0xbe
 8012586:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8012588:	2305      	movs	r3, #5
 801258a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 801258c:	2302      	movs	r3, #2
 801258e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8012590:	2300      	movs	r3, #0
 8012592:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8012594:	2301      	movs	r3, #1
 8012596:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8012598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801259c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801259e:	2300      	movs	r3, #0
 80125a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80125a2:	2300      	movs	r3, #0
 80125a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80125a6:	f107 0308 	add.w	r3, r7, #8
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7f3 fbf8 	bl	8005da0 <HAL_RCCEx_PeriphCLKConfig>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d004      	beq.n	80125c0 <SystemClock_Config+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
 80125b6:	f240 21ab 	movw	r1, #683	; 0x2ab
 80125ba:	480f      	ldr	r0, [pc, #60]	; (80125f8 <SystemClock_Config+0x150>)
 80125bc:	f7ff ff64 	bl	8012488 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80125c0:	f7f3 fb88 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 80125c4:	4602      	mov	r2, r0
 80125c6:	4b0e      	ldr	r3, [pc, #56]	; (8012600 <SystemClock_Config+0x158>)
 80125c8:	fba3 2302 	umull	r2, r3, r3, r2
 80125cc:	099b      	lsrs	r3, r3, #6
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ef feb9 	bl	8002346 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80125d4:	2004      	movs	r0, #4
 80125d6:	f7ef fec3 	bl	8002360 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80125da:	2200      	movs	r2, #0
 80125dc:	210f      	movs	r1, #15
 80125de:	f04f 30ff 	mov.w	r0, #4294967295
 80125e2:	f7ef fe86 	bl	80022f2 <HAL_NVIC_SetPriority>
}
 80125e6:	bf00      	nop
 80125e8:	37d0      	adds	r7, #208	; 0xd0
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	40023800 	.word	0x40023800
 80125f4:	40007000 	.word	0x40007000
 80125f8:	08015fcc 	.word	0x08015fcc
 80125fc:	00010048 	.word	0x00010048
 8012600:	10624dd3 	.word	0x10624dd3

08012604 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc3.Instance = ADC3;
 801260a:	4b24      	ldr	r3, [pc, #144]	; (801269c <MX_ADC3_Init+0x98>)
 801260c:	4a24      	ldr	r2, [pc, #144]	; (80126a0 <MX_ADC3_Init+0x9c>)
 801260e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012610:	4b22      	ldr	r3, [pc, #136]	; (801269c <MX_ADC3_Init+0x98>)
 8012612:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012616:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8012618:	4b20      	ldr	r3, [pc, #128]	; (801269c <MX_ADC3_Init+0x98>)
 801261a:	2200      	movs	r2, #0
 801261c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 801261e:	4b1f      	ldr	r3, [pc, #124]	; (801269c <MX_ADC3_Init+0x98>)
 8012620:	2200      	movs	r2, #0
 8012622:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8012624:	4b1d      	ldr	r3, [pc, #116]	; (801269c <MX_ADC3_Init+0x98>)
 8012626:	2200      	movs	r2, #0
 8012628:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 801262a:	4b1c      	ldr	r3, [pc, #112]	; (801269c <MX_ADC3_Init+0x98>)
 801262c:	2200      	movs	r2, #0
 801262e:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8012630:	4b1a      	ldr	r3, [pc, #104]	; (801269c <MX_ADC3_Init+0x98>)
 8012632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8012638:	4b18      	ldr	r3, [pc, #96]	; (801269c <MX_ADC3_Init+0x98>)
 801263a:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 801263e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012640:	4b16      	ldr	r3, [pc, #88]	; (801269c <MX_ADC3_Init+0x98>)
 8012642:	2200      	movs	r2, #0
 8012644:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8012646:	4b15      	ldr	r3, [pc, #84]	; (801269c <MX_ADC3_Init+0x98>)
 8012648:	2201      	movs	r2, #1
 801264a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 801264c:	4b13      	ldr	r3, [pc, #76]	; (801269c <MX_ADC3_Init+0x98>)
 801264e:	2200      	movs	r2, #0
 8012650:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012652:	4b12      	ldr	r3, [pc, #72]	; (801269c <MX_ADC3_Init+0x98>)
 8012654:	2201      	movs	r2, #1
 8012656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8012658:	4810      	ldr	r0, [pc, #64]	; (801269c <MX_ADC3_Init+0x98>)
 801265a:	f7ef fa51 	bl	8001b00 <HAL_ADC_Init>
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	d004      	beq.n	801266e <MX_ADC3_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012664:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8012668:	480e      	ldr	r0, [pc, #56]	; (80126a4 <MX_ADC3_Init+0xa0>)
 801266a:	f7ff ff0d 	bl	8012488 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
  sConfig.Channel = ADC_CHANNEL_0;
 801266e:	2300      	movs	r3, #0
 8012670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012672:	2301      	movs	r3, #1
 8012674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8012676:	2300      	movs	r3, #0
 8012678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 801267a:	463b      	mov	r3, r7
 801267c:	4619      	mov	r1, r3
 801267e:	4807      	ldr	r0, [pc, #28]	; (801269c <MX_ADC3_Init+0x98>)
 8012680:	f7ef fb34 	bl	8001cec <HAL_ADC_ConfigChannel>
 8012684:	4603      	mov	r3, r0
 8012686:	2b00      	cmp	r3, #0
 8012688:	d004      	beq.n	8012694 <MX_ADC3_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 801268a:	f240 21da 	movw	r1, #730	; 0x2da
 801268e:	4805      	ldr	r0, [pc, #20]	; (80126a4 <MX_ADC3_Init+0xa0>)
 8012690:	f7ff fefa 	bl	8012488 <_Error_Handler>
  }

}
 8012694:	bf00      	nop
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	2000fbb8 	.word	0x2000fbb8
 80126a0:	40012200 	.word	0x40012200
 80126a4:	08015fcc 	.word	0x08015fcc

080126a8 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80126ac:	4b0f      	ldr	r3, [pc, #60]	; (80126ec <MX_CRC_Init+0x44>)
 80126ae:	4a10      	ldr	r2, [pc, #64]	; (80126f0 <MX_CRC_Init+0x48>)
 80126b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80126b2:	4b0e      	ldr	r3, [pc, #56]	; (80126ec <MX_CRC_Init+0x44>)
 80126b4:	2200      	movs	r2, #0
 80126b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80126b8:	4b0c      	ldr	r3, [pc, #48]	; (80126ec <MX_CRC_Init+0x44>)
 80126ba:	2200      	movs	r2, #0
 80126bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80126be:	4b0b      	ldr	r3, [pc, #44]	; (80126ec <MX_CRC_Init+0x44>)
 80126c0:	2200      	movs	r2, #0
 80126c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80126c4:	4b09      	ldr	r3, [pc, #36]	; (80126ec <MX_CRC_Init+0x44>)
 80126c6:	2200      	movs	r2, #0
 80126c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80126ca:	4b08      	ldr	r3, [pc, #32]	; (80126ec <MX_CRC_Init+0x44>)
 80126cc:	2201      	movs	r2, #1
 80126ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80126d0:	4806      	ldr	r0, [pc, #24]	; (80126ec <MX_CRC_Init+0x44>)
 80126d2:	f7ef fe61 	bl	8002398 <HAL_CRC_Init>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d004      	beq.n	80126e6 <MX_CRC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80126dc:	f240 21eb 	movw	r1, #747	; 0x2eb
 80126e0:	4804      	ldr	r0, [pc, #16]	; (80126f4 <MX_CRC_Init+0x4c>)
 80126e2:	f7ff fed1 	bl	8012488 <_Error_Handler>
  }

}
 80126e6:	bf00      	nop
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	2000fa8c 	.word	0x2000fa8c
 80126f0:	40023000 	.word	0x40023000
 80126f4:	08015fcc 	.word	0x08015fcc

080126f8 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80126fc:	4b18      	ldr	r3, [pc, #96]	; (8012760 <MX_DMA2D_Init+0x68>)
 80126fe:	4a19      	ldr	r2, [pc, #100]	; (8012764 <MX_DMA2D_Init+0x6c>)
 8012700:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8012702:	4b17      	ldr	r3, [pc, #92]	; (8012760 <MX_DMA2D_Init+0x68>)
 8012704:	2200      	movs	r2, #0
 8012706:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8012708:	4b15      	ldr	r3, [pc, #84]	; (8012760 <MX_DMA2D_Init+0x68>)
 801270a:	2200      	movs	r2, #0
 801270c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 801270e:	4b14      	ldr	r3, [pc, #80]	; (8012760 <MX_DMA2D_Init+0x68>)
 8012710:	2200      	movs	r2, #0
 8012712:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8012714:	4b12      	ldr	r3, [pc, #72]	; (8012760 <MX_DMA2D_Init+0x68>)
 8012716:	2200      	movs	r2, #0
 8012718:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 801271a:	4b11      	ldr	r3, [pc, #68]	; (8012760 <MX_DMA2D_Init+0x68>)
 801271c:	2200      	movs	r2, #0
 801271e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012720:	4b0f      	ldr	r3, [pc, #60]	; (8012760 <MX_DMA2D_Init+0x68>)
 8012722:	2200      	movs	r2, #0
 8012724:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8012726:	4b0e      	ldr	r3, [pc, #56]	; (8012760 <MX_DMA2D_Init+0x68>)
 8012728:	2200      	movs	r2, #0
 801272a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801272c:	480c      	ldr	r0, [pc, #48]	; (8012760 <MX_DMA2D_Init+0x68>)
 801272e:	f7f0 f9f9 	bl	8002b24 <HAL_DMA2D_Init>
 8012732:	4603      	mov	r3, r0
 8012734:	2b00      	cmp	r3, #0
 8012736:	d004      	beq.n	8012742 <MX_DMA2D_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012738:	f240 21fe 	movw	r1, #766	; 0x2fe
 801273c:	480a      	ldr	r0, [pc, #40]	; (8012768 <MX_DMA2D_Init+0x70>)
 801273e:	f7ff fea3 	bl	8012488 <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8012742:	2101      	movs	r1, #1
 8012744:	4806      	ldr	r0, [pc, #24]	; (8012760 <MX_DMA2D_Init+0x68>)
 8012746:	f7f0 fb4b 	bl	8002de0 <HAL_DMA2D_ConfigLayer>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d004      	beq.n	801275a <MX_DMA2D_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012750:	f240 3103 	movw	r1, #771	; 0x303
 8012754:	4804      	ldr	r0, [pc, #16]	; (8012768 <MX_DMA2D_Init+0x70>)
 8012756:	f7ff fe97 	bl	8012488 <_Error_Handler>
  }

}
 801275a:	bf00      	nop
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	2000fcd0 	.word	0x2000fcd0
 8012764:	4002b000 	.word	0x4002b000
 8012768:	08015fcc 	.word	0x08015fcc

0801276c <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8012770:	4b1f      	ldr	r3, [pc, #124]	; (80127f0 <MX_I2C3_Init+0x84>)
 8012772:	4a20      	ldr	r2, [pc, #128]	; (80127f4 <MX_I2C3_Init+0x88>)
 8012774:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8012776:	4b1e      	ldr	r3, [pc, #120]	; (80127f0 <MX_I2C3_Init+0x84>)
 8012778:	4a1f      	ldr	r2, [pc, #124]	; (80127f8 <MX_I2C3_Init+0x8c>)
 801277a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 801277c:	4b1c      	ldr	r3, [pc, #112]	; (80127f0 <MX_I2C3_Init+0x84>)
 801277e:	22e0      	movs	r2, #224	; 0xe0
 8012780:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012782:	4b1b      	ldr	r3, [pc, #108]	; (80127f0 <MX_I2C3_Init+0x84>)
 8012784:	2201      	movs	r2, #1
 8012786:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012788:	4b19      	ldr	r3, [pc, #100]	; (80127f0 <MX_I2C3_Init+0x84>)
 801278a:	2200      	movs	r2, #0
 801278c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 801278e:	4b18      	ldr	r3, [pc, #96]	; (80127f0 <MX_I2C3_Init+0x84>)
 8012790:	2200      	movs	r2, #0
 8012792:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012794:	4b16      	ldr	r3, [pc, #88]	; (80127f0 <MX_I2C3_Init+0x84>)
 8012796:	2200      	movs	r2, #0
 8012798:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801279a:	4b15      	ldr	r3, [pc, #84]	; (80127f0 <MX_I2C3_Init+0x84>)
 801279c:	2200      	movs	r2, #0
 801279e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80127a0:	4b13      	ldr	r3, [pc, #76]	; (80127f0 <MX_I2C3_Init+0x84>)
 80127a2:	2200      	movs	r2, #0
 80127a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80127a6:	4812      	ldr	r0, [pc, #72]	; (80127f0 <MX_I2C3_Init+0x84>)
 80127a8:	f7f2 fa3e 	bl	8004c28 <HAL_I2C_Init>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d004      	beq.n	80127bc <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 80127b2:	f240 3117 	movw	r1, #791	; 0x317
 80127b6:	4811      	ldr	r0, [pc, #68]	; (80127fc <MX_I2C3_Init+0x90>)
 80127b8:	f7ff fe66 	bl	8012488 <_Error_Handler>
  }

    /**Configure Analogue filter
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80127bc:	2100      	movs	r1, #0
 80127be:	480c      	ldr	r0, [pc, #48]	; (80127f0 <MX_I2C3_Init+0x84>)
 80127c0:	f7f2 fac0 	bl	8004d44 <HAL_I2CEx_ConfigAnalogFilter>
 80127c4:	4603      	mov	r3, r0
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d004      	beq.n	80127d4 <MX_I2C3_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80127ca:	f240 311e 	movw	r1, #798	; 0x31e
 80127ce:	480b      	ldr	r0, [pc, #44]	; (80127fc <MX_I2C3_Init+0x90>)
 80127d0:	f7ff fe5a 	bl	8012488 <_Error_Handler>
  }

    /**Configure Digital filter
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80127d4:	2100      	movs	r1, #0
 80127d6:	4806      	ldr	r0, [pc, #24]	; (80127f0 <MX_I2C3_Init+0x84>)
 80127d8:	f7f2 faff 	bl	8004dda <HAL_I2CEx_ConfigDigitalFilter>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d004      	beq.n	80127ec <MX_I2C3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 80127e2:	f240 3125 	movw	r1, #805	; 0x325
 80127e6:	4805      	ldr	r0, [pc, #20]	; (80127fc <MX_I2C3_Init+0x90>)
 80127e8:	f7ff fe4e 	bl	8012488 <_Error_Handler>
  }

}
 80127ec:	bf00      	nop
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	2000fa40 	.word	0x2000fa40
 80127f4:	40005c00 	.word	0x40005c00
 80127f8:	00c0eaff 	.word	0x00c0eaff
 80127fc:	08015fcc 	.word	0x08015fcc

08012800 <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b08e      	sub	sp, #56	; 0x38
 8012804:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg;

  hltdc.Instance = LTDC;
 8012806:	4b3c      	ldr	r3, [pc, #240]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012808:	4a3c      	ldr	r2, [pc, #240]	; (80128fc <MX_LTDC_Init+0xfc>)
 801280a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801280c:	4b3a      	ldr	r3, [pc, #232]	; (80128f8 <MX_LTDC_Init+0xf8>)
 801280e:	2200      	movs	r2, #0
 8012810:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8012812:	4b39      	ldr	r3, [pc, #228]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012814:	2200      	movs	r2, #0
 8012816:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8012818:	4b37      	ldr	r3, [pc, #220]	; (80128f8 <MX_LTDC_Init+0xf8>)
 801281a:	2200      	movs	r2, #0
 801281c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801281e:	4b36      	ldr	r3, [pc, #216]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012820:	2200      	movs	r2, #0
 8012822:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8012824:	4b34      	ldr	r3, [pc, #208]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012826:	2228      	movs	r2, #40	; 0x28
 8012828:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 801282a:	4b33      	ldr	r3, [pc, #204]	; (80128f8 <MX_LTDC_Init+0xf8>)
 801282c:	2209      	movs	r2, #9
 801282e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8012830:	4b31      	ldr	r3, [pc, #196]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012832:	2235      	movs	r2, #53	; 0x35
 8012834:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8012836:	4b30      	ldr	r3, [pc, #192]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012838:	220b      	movs	r2, #11
 801283a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 801283c:	4b2e      	ldr	r3, [pc, #184]	; (80128f8 <MX_LTDC_Init+0xf8>)
 801283e:	f240 2215 	movw	r2, #533	; 0x215
 8012842:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8012844:	4b2c      	ldr	r3, [pc, #176]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012846:	f240 121b 	movw	r2, #283	; 0x11b
 801284a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 801284c:	4b2a      	ldr	r3, [pc, #168]	; (80128f8 <MX_LTDC_Init+0xf8>)
 801284e:	f240 2235 	movw	r2, #565	; 0x235
 8012852:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8012854:	4b28      	ldr	r3, [pc, #160]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012856:	f240 121d 	movw	r2, #285	; 0x11d
 801285a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801285c:	4b26      	ldr	r3, [pc, #152]	; (80128f8 <MX_LTDC_Init+0xf8>)
 801285e:	2200      	movs	r2, #0
 8012860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8012864:	4b24      	ldr	r3, [pc, #144]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012866:	2200      	movs	r2, #0
 8012868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801286c:	4b22      	ldr	r3, [pc, #136]	; (80128f8 <MX_LTDC_Init+0xf8>)
 801286e:	2200      	movs	r2, #0
 8012870:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8012874:	4820      	ldr	r0, [pc, #128]	; (80128f8 <MX_LTDC_Init+0xf8>)
 8012876:	f7f2 faff 	bl	8004e78 <HAL_LTDC_Init>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d004      	beq.n	801288a <MX_LTDC_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012880:	f240 3142 	movw	r1, #834	; 0x342
 8012884:	481e      	ldr	r0, [pc, #120]	; (8012900 <MX_LTDC_Init+0x100>)
 8012886:	f7ff fdff 	bl	8012488 <_Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 801288e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012892:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8012894:	2300      	movs	r3, #0
 8012896:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8012898:	f44f 7388 	mov.w	r3, #272	; 0x110
 801289c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 801289e:	2300      	movs	r3, #0
 80128a0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80128a2:	23ff      	movs	r3, #255	; 0xff
 80128a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80128aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128ae:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80128b0:	2305      	movs	r3, #5
 80128b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80128b4:	2300      	movs	r3, #0
 80128b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80128b8:	2300      	movs	r3, #0
 80128ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 80128bc:	2300      	movs	r3, #0
 80128be:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80128c0:	2300      	movs	r3, #0
 80128c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80128c6:	2300      	movs	r3, #0
 80128c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80128cc:	2300      	movs	r3, #0
 80128ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80128d2:	1d3b      	adds	r3, r7, #4
 80128d4:	2200      	movs	r2, #0
 80128d6:	4619      	mov	r1, r3
 80128d8:	4807      	ldr	r0, [pc, #28]	; (80128f8 <MX_LTDC_Init+0xf8>)
 80128da:	f7f2 fba9 	bl	8005030 <HAL_LTDC_ConfigLayer>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d004      	beq.n	80128ee <MX_LTDC_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 80128e4:	f240 3156 	movw	r1, #854	; 0x356
 80128e8:	4805      	ldr	r0, [pc, #20]	; (8012900 <MX_LTDC_Init+0x100>)
 80128ea:	f7ff fdcd 	bl	8012488 <_Error_Handler>
  }

}
 80128ee:	bf00      	nop
 80128f0:	3738      	adds	r7, #56	; 0x38
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	2000fb10 	.word	0x2000fb10
 80128fc:	40016800 	.word	0x40016800
 8012900:	08015fcc 	.word	0x08015fcc

08012904 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b088      	sub	sp, #32
 8012908:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 801290a:	4b22      	ldr	r3, [pc, #136]	; (8012994 <MX_TIM2_Init+0x90>)
 801290c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8012912:	4b20      	ldr	r3, [pc, #128]	; (8012994 <MX_TIM2_Init+0x90>)
 8012914:	2200      	movs	r2, #0
 8012916:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012918:	4b1e      	ldr	r3, [pc, #120]	; (8012994 <MX_TIM2_Init+0x90>)
 801291a:	2200      	movs	r2, #0
 801291c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 801291e:	4b1d      	ldr	r3, [pc, #116]	; (8012994 <MX_TIM2_Init+0x90>)
 8012920:	f04f 32ff 	mov.w	r2, #4294967295
 8012924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012926:	4b1b      	ldr	r3, [pc, #108]	; (8012994 <MX_TIM2_Init+0x90>)
 8012928:	2200      	movs	r2, #0
 801292a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801292c:	4b19      	ldr	r3, [pc, #100]	; (8012994 <MX_TIM2_Init+0x90>)
 801292e:	2200      	movs	r2, #0
 8012930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8012932:	4818      	ldr	r0, [pc, #96]	; (8012994 <MX_TIM2_Init+0x90>)
 8012934:	f7f3 ff03 	bl	800673e <HAL_TIM_Base_Init>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	d004      	beq.n	8012948 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 801293e:	f240 316a 	movw	r1, #874	; 0x36a
 8012942:	4815      	ldr	r0, [pc, #84]	; (8012998 <MX_TIM2_Init+0x94>)
 8012944:	f7ff fda0 	bl	8012488 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801294c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801294e:	f107 0310 	add.w	r3, r7, #16
 8012952:	4619      	mov	r1, r3
 8012954:	480f      	ldr	r0, [pc, #60]	; (8012994 <MX_TIM2_Init+0x90>)
 8012956:	f7f4 f89d 	bl	8006a94 <HAL_TIM_ConfigClockSource>
 801295a:	4603      	mov	r3, r0
 801295c:	2b00      	cmp	r3, #0
 801295e:	d004      	beq.n	801296a <MX_TIM2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012960:	f44f 715c 	mov.w	r1, #880	; 0x370
 8012964:	480c      	ldr	r0, [pc, #48]	; (8012998 <MX_TIM2_Init+0x94>)
 8012966:	f7ff fd8f 	bl	8012488 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801296a:	2320      	movs	r3, #32
 801296c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801296e:	2300      	movs	r3, #0
 8012970:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012972:	1d3b      	adds	r3, r7, #4
 8012974:	4619      	mov	r1, r3
 8012976:	4807      	ldr	r0, [pc, #28]	; (8012994 <MX_TIM2_Init+0x90>)
 8012978:	f7f4 faee 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 801297c:	4603      	mov	r3, r0
 801297e:	2b00      	cmp	r3, #0
 8012980:	d004      	beq.n	801298c <MX_TIM2_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012982:	f240 3177 	movw	r1, #887	; 0x377
 8012986:	4804      	ldr	r0, [pc, #16]	; (8012998 <MX_TIM2_Init+0x94>)
 8012988:	f7ff fd7e 	bl	8012488 <_Error_Handler>
  }

}
 801298c:	bf00      	nop
 801298e:	3720      	adds	r7, #32
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	20010230 	.word	0x20010230
 8012998:	08015fcc 	.word	0x08015fcc

0801299c <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b088      	sub	sp, #32
 80129a0:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80129a2:	4b21      	ldr	r3, [pc, #132]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129a4:	4a21      	ldr	r2, [pc, #132]	; (8012a2c <MX_TIM3_Init+0x90>)
 80129a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80129a8:	4b1f      	ldr	r3, [pc, #124]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80129ae:	4b1e      	ldr	r3, [pc, #120]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129b0:	2200      	movs	r2, #0
 80129b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80129b4:	4b1c      	ldr	r3, [pc, #112]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129b6:	2264      	movs	r2, #100	; 0x64
 80129b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80129ba:	4b1b      	ldr	r3, [pc, #108]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129bc:	2200      	movs	r2, #0
 80129be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80129c0:	4b19      	ldr	r3, [pc, #100]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129c2:	2200      	movs	r2, #0
 80129c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80129c6:	4818      	ldr	r0, [pc, #96]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129c8:	f7f3 feb9 	bl	800673e <HAL_TIM_Base_Init>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d004      	beq.n	80129dc <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80129d2:	f240 318b 	movw	r1, #907	; 0x38b
 80129d6:	4816      	ldr	r0, [pc, #88]	; (8012a30 <MX_TIM3_Init+0x94>)
 80129d8:	f7ff fd56 	bl	8012488 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80129dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80129e2:	f107 0310 	add.w	r3, r7, #16
 80129e6:	4619      	mov	r1, r3
 80129e8:	480f      	ldr	r0, [pc, #60]	; (8012a28 <MX_TIM3_Init+0x8c>)
 80129ea:	f7f4 f853 	bl	8006a94 <HAL_TIM_ConfigClockSource>
 80129ee:	4603      	mov	r3, r0
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d004      	beq.n	80129fe <MX_TIM3_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80129f4:	f240 3191 	movw	r1, #913	; 0x391
 80129f8:	480d      	ldr	r0, [pc, #52]	; (8012a30 <MX_TIM3_Init+0x94>)
 80129fa:	f7ff fd45 	bl	8012488 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80129fe:	2320      	movs	r3, #32
 8012a00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012a02:	2300      	movs	r3, #0
 8012a04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012a06:	1d3b      	adds	r3, r7, #4
 8012a08:	4619      	mov	r1, r3
 8012a0a:	4807      	ldr	r0, [pc, #28]	; (8012a28 <MX_TIM3_Init+0x8c>)
 8012a0c:	f7f4 faa4 	bl	8006f58 <HAL_TIMEx_MasterConfigSynchronization>
 8012a10:	4603      	mov	r3, r0
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d004      	beq.n	8012a20 <MX_TIM3_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012a16:	f44f 7166 	mov.w	r1, #920	; 0x398
 8012a1a:	4805      	ldr	r0, [pc, #20]	; (8012a30 <MX_TIM3_Init+0x94>)
 8012a1c:	f7ff fd34 	bl	8012488 <_Error_Handler>
  }

}
 8012a20:	bf00      	nop
 8012a22:	3720      	adds	r7, #32
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	2000fda8 	.word	0x2000fda8
 8012a2c:	40000400 	.word	0x40000400
 8012a30:	08015fcc 	.word	0x08015fcc

08012a34 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8012a38:	4b15      	ldr	r3, [pc, #84]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a3a:	4a16      	ldr	r2, [pc, #88]	; (8012a94 <MX_USART1_UART_Init+0x60>)
 8012a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012a3e:	4b14      	ldr	r3, [pc, #80]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012a46:	4b12      	ldr	r3, [pc, #72]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a48:	2200      	movs	r2, #0
 8012a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012a4c:	4b10      	ldr	r3, [pc, #64]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a4e:	2200      	movs	r2, #0
 8012a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012a52:	4b0f      	ldr	r3, [pc, #60]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a54:	2200      	movs	r2, #0
 8012a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012a58:	4b0d      	ldr	r3, [pc, #52]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a5a:	220c      	movs	r2, #12
 8012a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012a5e:	4b0c      	ldr	r3, [pc, #48]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a60:	2200      	movs	r2, #0
 8012a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012a64:	4b0a      	ldr	r3, [pc, #40]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a66:	2200      	movs	r2, #0
 8012a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012a6a:	4b09      	ldr	r3, [pc, #36]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012a70:	4b07      	ldr	r3, [pc, #28]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a72:	2200      	movs	r2, #0
 8012a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012a76:	4806      	ldr	r0, [pc, #24]	; (8012a90 <MX_USART1_UART_Init+0x5c>)
 8012a78:	f7f4 fad6 	bl	8007028 <HAL_UART_Init>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d004      	beq.n	8012a8c <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012a82:	f240 31ad 	movw	r1, #941	; 0x3ad
 8012a86:	4804      	ldr	r0, [pc, #16]	; (8012a98 <MX_USART1_UART_Init+0x64>)
 8012a88:	f7ff fcfe 	bl	8012488 <_Error_Handler>
  }

}
 8012a8c:	bf00      	nop
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	2000fc60 	.word	0x2000fc60
 8012a94:	40011000 	.word	0x40011000
 8012a98:	08015fcc 	.word	0x08015fcc

08012a9c <MX_WWDG_Init>:

/* WWDG init function */
static void MX_WWDG_Init(void)
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8012aa0:	4b0a      	ldr	r3, [pc, #40]	; (8012acc <MX_WWDG_Init+0x30>)
 8012aa2:	4a0b      	ldr	r2, [pc, #44]	; (8012ad0 <MX_WWDG_Init+0x34>)
 8012aa4:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8012aa6:	4b09      	ldr	r3, [pc, #36]	; (8012acc <MX_WWDG_Init+0x30>)
 8012aa8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8012aac:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8012aae:	4b07      	ldr	r3, [pc, #28]	; (8012acc <MX_WWDG_Init+0x30>)
 8012ab0:	2240      	movs	r2, #64	; 0x40
 8012ab2:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8012ab4:	4b05      	ldr	r3, [pc, #20]	; (8012acc <MX_WWDG_Init+0x30>)
 8012ab6:	2240      	movs	r2, #64	; 0x40
 8012ab8:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8012aba:	4b04      	ldr	r3, [pc, #16]	; (8012acc <MX_WWDG_Init+0x30>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	611a      	str	r2, [r3, #16]
//  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
//  {
//    _Error_Handler(__FILE__, __LINE__);
//  }

}
 8012ac0:	bf00      	nop
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	2000ffec 	.word	0x2000ffec
 8012ad0:	40002c00 	.word	0x40002c00

08012ad4 <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream2
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8012ada:	4a40      	ldr	r2, [pc, #256]	; (8012bdc <MX_DMA_Init+0x108>)
 8012adc:	4b3f      	ldr	r3, [pc, #252]	; (8012bdc <MX_DMA_Init+0x108>)
 8012ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ae6:	4b3d      	ldr	r3, [pc, #244]	; (8012bdc <MX_DMA_Init+0x108>)
 8012ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012aee:	607b      	str	r3, [r7, #4]
 8012af0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8012af2:	4b3b      	ldr	r3, [pc, #236]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012af4:	4a3b      	ldr	r2, [pc, #236]	; (8012be4 <MX_DMA_Init+0x110>)
 8012af6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Channel = DMA_CHANNEL_0;
 8012af8:	4b39      	ldr	r3, [pc, #228]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012afa:	2200      	movs	r2, #0
 8012afc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8012afe:	4b38      	ldr	r3, [pc, #224]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b00:	2280      	movs	r2, #128	; 0x80
 8012b02:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 8012b04:	4b36      	ldr	r3, [pc, #216]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b0a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 8012b0c:	4b34      	ldr	r3, [pc, #208]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012b12:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012b14:	4b32      	ldr	r3, [pc, #200]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b16:	2200      	movs	r2, #0
 8012b18:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012b1a:	4b31      	ldr	r3, [pc, #196]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8012b20:	4b2f      	ldr	r3, [pc, #188]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b22:	2200      	movs	r2, #0
 8012b24:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 8012b26:	4b2e      	ldr	r3, [pc, #184]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b28:	2200      	movs	r2, #0
 8012b2a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8012b2c:	4b2c      	ldr	r3, [pc, #176]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b2e:	2204      	movs	r2, #4
 8012b30:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8012b32:	4b2b      	ldr	r3, [pc, #172]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b34:	2203      	movs	r2, #3
 8012b36:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8012b38:	4b29      	ldr	r3, [pc, #164]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8012b3e:	4b28      	ldr	r3, [pc, #160]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8012b44:	4826      	ldr	r0, [pc, #152]	; (8012be0 <MX_DMA_Init+0x10c>)
 8012b46:	f7ef fd05 	bl	8002554 <HAL_DMA_Init>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d004      	beq.n	8012b5a <MX_DMA_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012b50:	f240 31dd 	movw	r1, #989	; 0x3dd
 8012b54:	4824      	ldr	r0, [pc, #144]	; (8012be8 <MX_DMA_Init+0x114>)
 8012b56:	f7ff fc97 	bl	8012488 <_Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8012b5a:	4b24      	ldr	r3, [pc, #144]	; (8012bec <MX_DMA_Init+0x118>)
 8012b5c:	4a24      	ldr	r2, [pc, #144]	; (8012bf0 <MX_DMA_Init+0x11c>)
 8012b5e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8012b60:	4b22      	ldr	r3, [pc, #136]	; (8012bec <MX_DMA_Init+0x118>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8012b66:	4b21      	ldr	r3, [pc, #132]	; (8012bec <MX_DMA_Init+0x118>)
 8012b68:	2280      	movs	r2, #128	; 0x80
 8012b6a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8012b6c:	4b1f      	ldr	r3, [pc, #124]	; (8012bec <MX_DMA_Init+0x118>)
 8012b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b72:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8012b74:	4b1d      	ldr	r3, [pc, #116]	; (8012bec <MX_DMA_Init+0x118>)
 8012b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012b7a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012b7c:	4b1b      	ldr	r3, [pc, #108]	; (8012bec <MX_DMA_Init+0x118>)
 8012b7e:	2200      	movs	r2, #0
 8012b80:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012b82:	4b1a      	ldr	r3, [pc, #104]	; (8012bec <MX_DMA_Init+0x118>)
 8012b84:	2200      	movs	r2, #0
 8012b86:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8012b88:	4b18      	ldr	r3, [pc, #96]	; (8012bec <MX_DMA_Init+0x118>)
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8012b8e:	4b17      	ldr	r3, [pc, #92]	; (8012bec <MX_DMA_Init+0x118>)
 8012b90:	2200      	movs	r2, #0
 8012b92:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8012b94:	4b15      	ldr	r3, [pc, #84]	; (8012bec <MX_DMA_Init+0x118>)
 8012b96:	2204      	movs	r2, #4
 8012b98:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8012b9a:	4b14      	ldr	r3, [pc, #80]	; (8012bec <MX_DMA_Init+0x118>)
 8012b9c:	2203      	movs	r2, #3
 8012b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8012ba0:	4b12      	ldr	r3, [pc, #72]	; (8012bec <MX_DMA_Init+0x118>)
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8012ba6:	4b11      	ldr	r3, [pc, #68]	; (8012bec <MX_DMA_Init+0x118>)
 8012ba8:	2200      	movs	r2, #0
 8012baa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8012bac:	480f      	ldr	r0, [pc, #60]	; (8012bec <MX_DMA_Init+0x118>)
 8012bae:	f7ef fcd1 	bl	8002554 <HAL_DMA_Init>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d004      	beq.n	8012bc2 <MX_DMA_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012bb8:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8012bbc:	480a      	ldr	r0, [pc, #40]	; (8012be8 <MX_DMA_Init+0x114>)
 8012bbe:	f7ff fc63 	bl	8012488 <_Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	2105      	movs	r1, #5
 8012bc6:	2038      	movs	r0, #56	; 0x38
 8012bc8:	f7ef fb93 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8012bcc:	2038      	movs	r0, #56	; 0x38
 8012bce:	f7ef fbac 	bl	800232a <HAL_NVIC_EnableIRQ>

}
 8012bd2:	bf00      	nop
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	40023800 	.word	0x40023800
 8012be0:	2000fd10 	.word	0x2000fd10
 8012be4:	40026440 	.word	0x40026440
 8012be8:	08015fcc 	.word	0x08015fcc
 8012bec:	2000fc00 	.word	0x2000fc00
 8012bf0:	40026428 	.word	0x40026428

08012bf4 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b088      	sub	sp, #32
 8012bf8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8012bfa:	4b21      	ldr	r3, [pc, #132]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012bfc:	4a21      	ldr	r2, [pc, #132]	; (8012c84 <MX_FMC_Init+0x90>)
 8012bfe:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8012c00:	4b1f      	ldr	r3, [pc, #124]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c02:	2200      	movs	r2, #0
 8012c04:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8012c06:	4b1e      	ldr	r3, [pc, #120]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c08:	2200      	movs	r2, #0
 8012c0a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8012c0c:	4b1c      	ldr	r3, [pc, #112]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c0e:	2204      	movs	r2, #4
 8012c10:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8012c12:	4b1b      	ldr	r3, [pc, #108]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c14:	2210      	movs	r2, #16
 8012c16:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8012c18:	4b19      	ldr	r3, [pc, #100]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c1a:	2240      	movs	r2, #64	; 0x40
 8012c1c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8012c1e:	4b18      	ldr	r3, [pc, #96]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012c24:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8012c26:	4b16      	ldr	r3, [pc, #88]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c28:	2200      	movs	r2, #0
 8012c2a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8012c2c:	4b14      	ldr	r3, [pc, #80]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012c32:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8012c34:	4b12      	ldr	r3, [pc, #72]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8012c3c:	4b10      	ldr	r3, [pc, #64]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c3e:	2200      	movs	r2, #0
 8012c40:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8012c42:	2302      	movs	r3, #2
 8012c44:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8012c46:	2307      	movs	r3, #7
 8012c48:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8012c4a:	2304      	movs	r3, #4
 8012c4c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8012c4e:	2306      	movs	r3, #6
 8012c50:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8012c52:	2302      	movs	r3, #2
 8012c54:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8012c56:	2302      	movs	r3, #2
 8012c58:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8012c5a:	2302      	movs	r3, #2
 8012c5c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8012c5e:	1d3b      	adds	r3, r7, #4
 8012c60:	4619      	mov	r1, r3
 8012c62:	4807      	ldr	r0, [pc, #28]	; (8012c80 <MX_FMC_Init+0x8c>)
 8012c64:	f7f3 fc8a 	bl	800657c <HAL_SDRAM_Init>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d004      	beq.n	8012c78 <MX_FMC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012c6e:	f240 4117 	movw	r1, #1047	; 0x417
 8012c72:	4805      	ldr	r0, [pc, #20]	; (8012c88 <MX_FMC_Init+0x94>)
 8012c74:	f7ff fc08 	bl	8012488 <_Error_Handler>
  }

}
 8012c78:	bf00      	nop
 8012c7a:	3720      	adds	r7, #32
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	2000fd70 	.word	0x2000fd70
 8012c84:	a0000140 	.word	0xa0000140
 8012c88:	08015fcc 	.word	0x08015fcc

08012c8c <MX_GPIO_Init>:
     PA7   ------> ETH_CRS_DV
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b090      	sub	sp, #64	; 0x40
 8012c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012c92:	4aae      	ldr	r2, [pc, #696]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012c94:	4bad      	ldr	r3, [pc, #692]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c98:	f043 0310 	orr.w	r3, r3, #16
 8012c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8012c9e:	4bab      	ldr	r3, [pc, #684]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca2:	f003 0310 	and.w	r3, r3, #16
 8012ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012caa:	4aa8      	ldr	r2, [pc, #672]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cac:	4ba7      	ldr	r3, [pc, #668]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8012cb6:	4ba5      	ldr	r3, [pc, #660]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012cc2:	4aa2      	ldr	r2, [pc, #648]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cc4:	4ba1      	ldr	r3, [pc, #644]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc8:	f043 0302 	orr.w	r3, r3, #2
 8012ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8012cce:	4b9f      	ldr	r3, [pc, #636]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd2:	f003 0302 	and.w	r3, r3, #2
 8012cd6:	623b      	str	r3, [r7, #32]
 8012cd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012cda:	4a9c      	ldr	r2, [pc, #624]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cdc:	4b9b      	ldr	r3, [pc, #620]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce0:	f043 0308 	orr.w	r3, r3, #8
 8012ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ce6:	4b99      	ldr	r3, [pc, #612]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cea:	f003 0308 	and.w	r3, r3, #8
 8012cee:	61fb      	str	r3, [r7, #28]
 8012cf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012cf2:	4a96      	ldr	r2, [pc, #600]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cf4:	4b95      	ldr	r3, [pc, #596]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf8:	f043 0304 	orr.w	r3, r3, #4
 8012cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8012cfe:	4b93      	ldr	r3, [pc, #588]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d02:	f003 0304 	and.w	r3, r3, #4
 8012d06:	61bb      	str	r3, [r7, #24]
 8012d08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012d0a:	4a90      	ldr	r2, [pc, #576]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d0c:	4b8f      	ldr	r3, [pc, #572]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d10:	f043 0301 	orr.w	r3, r3, #1
 8012d14:	6313      	str	r3, [r2, #48]	; 0x30
 8012d16:	4b8d      	ldr	r3, [pc, #564]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d1a:	f003 0301 	and.w	r3, r3, #1
 8012d1e:	617b      	str	r3, [r7, #20]
 8012d20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012d22:	4a8a      	ldr	r2, [pc, #552]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d24:	4b89      	ldr	r3, [pc, #548]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8012d2e:	4b87      	ldr	r3, [pc, #540]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012d36:	613b      	str	r3, [r7, #16]
 8012d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012d3a:	4a84      	ldr	r2, [pc, #528]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d3c:	4b83      	ldr	r3, [pc, #524]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d44:	6313      	str	r3, [r2, #48]	; 0x30
 8012d46:	4b81      	ldr	r3, [pc, #516]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d4e:	60fb      	str	r3, [r7, #12]
 8012d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8012d52:	4a7e      	ldr	r2, [pc, #504]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d54:	4b7d      	ldr	r3, [pc, #500]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8012d5e:	4b7b      	ldr	r3, [pc, #492]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d66:	60bb      	str	r3, [r7, #8]
 8012d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012d6a:	4a78      	ldr	r2, [pc, #480]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d6c:	4b77      	ldr	r3, [pc, #476]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d70:	f043 0320 	orr.w	r3, r3, #32
 8012d74:	6313      	str	r3, [r2, #48]	; 0x30
 8012d76:	4b75      	ldr	r3, [pc, #468]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d7a:	f003 0320 	and.w	r3, r3, #32
 8012d7e:	607b      	str	r3, [r7, #4]
 8012d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012d82:	4a72      	ldr	r2, [pc, #456]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d84:	4b71      	ldr	r3, [pc, #452]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8012d8e:	4b6f      	ldr	r3, [pc, #444]	; (8012f4c <MX_GPIO_Init+0x2c0>)
 8012d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d96:	603b      	str	r3, [r7, #0]
 8012d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	2120      	movs	r1, #32
 8012d9e:	486c      	ldr	r0, [pc, #432]	; (8012f50 <MX_GPIO_Init+0x2c4>)
 8012da0:	f7f0 fb02 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8012da4:	2200      	movs	r2, #0
 8012da6:	f241 010c 	movw	r1, #4108	; 0x100c
 8012daa:	486a      	ldr	r0, [pc, #424]	; (8012f54 <MX_GPIO_Init+0x2c8>)
 8012dac:	f7f0 fafc 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8012db0:	2200      	movs	r2, #0
 8012db2:	2108      	movs	r1, #8
 8012db4:	4868      	ldr	r0, [pc, #416]	; (8012f58 <MX_GPIO_Init+0x2cc>)
 8012db6:	f7f0 faf7 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8012dba:	2200      	movs	r2, #0
 8012dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012dc0:	4866      	ldr	r0, [pc, #408]	; (8012f5c <MX_GPIO_Init+0x2d0>)
 8012dc2:	f7f0 faf1 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	21c8      	movs	r1, #200	; 0xc8
 8012dca:	4865      	ldr	r0, [pc, #404]	; (8012f60 <MX_GPIO_Init+0x2d4>)
 8012dcc:	f7f0 faec 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8012dd0:	2308      	movs	r3, #8
 8012dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8012ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012de0:	4619      	mov	r1, r3
 8012de2:	4860      	ldr	r0, [pc, #384]	; (8012f64 <MX_GPIO_Init+0x2d8>)
 8012de4:	f7f0 f936 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8012de8:	2304      	movs	r3, #4
 8012dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dec:	2302      	movs	r3, #2
 8012dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012df0:	2300      	movs	r3, #0
 8012df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012df4:	2303      	movs	r3, #3
 8012df6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8012df8:	2309      	movs	r3, #9
 8012dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8012dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e00:	4619      	mov	r1, r3
 8012e02:	4858      	ldr	r0, [pc, #352]	; (8012f64 <MX_GPIO_Init+0x2d8>)
 8012e04:	f7f0 f926 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8012e08:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8012e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e0e:	2302      	movs	r3, #2
 8012e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e12:	2300      	movs	r3, #0
 8012e14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e16:	2303      	movs	r3, #3
 8012e18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012e1a:	230b      	movs	r3, #11
 8012e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e22:	4619      	mov	r1, r3
 8012e24:	484e      	ldr	r0, [pc, #312]	; (8012f60 <MX_GPIO_Init+0x2d4>)
 8012e26:	f7f0 f915 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8012e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012e30:	2312      	movs	r3, #18
 8012e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012e34:	2301      	movs	r3, #1
 8012e36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012e3c:	2304      	movs	r3, #4
 8012e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e44:	4619      	mov	r1, r3
 8012e46:	4848      	ldr	r0, [pc, #288]	; (8012f68 <MX_GPIO_Init+0x2dc>)
 8012e48:	f7f0 f904 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8012e4c:	2380      	movs	r3, #128	; 0x80
 8012e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e50:	2302      	movs	r3, #2
 8012e52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e54:	2300      	movs	r3, #0
 8012e56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8012e5c:	2308      	movs	r3, #8
 8012e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8012e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e64:	4619      	mov	r1, r3
 8012e66:	483a      	ldr	r0, [pc, #232]	; (8012f50 <MX_GPIO_Init+0x2c4>)
 8012e68:	f7f0 f8f4 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8012e6c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8012e70:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e72:	2302      	movs	r3, #2
 8012e74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e76:	2300      	movs	r3, #0
 8012e78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e7a:	2303      	movs	r3, #3
 8012e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8012e7e:	230c      	movs	r3, #12
 8012e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e86:	4619      	mov	r1, r3
 8012e88:	4838      	ldr	r0, [pc, #224]	; (8012f6c <MX_GPIO_Init+0x2e0>)
 8012e8a:	f7f0 f8e3 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8012e8e:	2360      	movs	r3, #96	; 0x60
 8012e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e92:	2302      	movs	r3, #2
 8012e94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e96:	2300      	movs	r3, #0
 8012e98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012e9e:	230d      	movs	r3, #13
 8012ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	482e      	ldr	r0, [pc, #184]	; (8012f64 <MX_GPIO_Init+0x2d8>)
 8012eaa:	f7f0 f8d3 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8012eae:	2340      	movs	r3, #64	; 0x40
 8012eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012eb2:	2302      	movs	r3, #2
 8012eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012eba:	2303      	movs	r3, #3
 8012ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8012ebe:	230a      	movs	r3, #10
 8012ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8012ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	4827      	ldr	r0, [pc, #156]	; (8012f68 <MX_GPIO_Init+0x2dc>)
 8012eca:	f7f0 f8c3 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8012ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8012edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	4823      	ldr	r0, [pc, #140]	; (8012f70 <MX_GPIO_Init+0x2e4>)
 8012ee4:	f7f0 f8b6 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8012ee8:	2340      	movs	r3, #64	; 0x40
 8012eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8012eec:	4b21      	ldr	r3, [pc, #132]	; (8012f74 <MX_GPIO_Init+0x2e8>)
 8012eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8012ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ef8:	4619      	mov	r1, r3
 8012efa:	4815      	ldr	r0, [pc, #84]	; (8012f50 <MX_GPIO_Init+0x2c4>)
 8012efc:	f7f0 f8aa 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8012f00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f06:	2302      	movs	r3, #2
 8012f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012f12:	230a      	movs	r3, #10
 8012f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	4816      	ldr	r0, [pc, #88]	; (8012f78 <MX_GPIO_Init+0x2ec>)
 8012f1e:	f7f0 f899 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8012f22:	23f0      	movs	r3, #240	; 0xf0
 8012f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f26:	2302      	movs	r3, #2
 8012f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012f32:	230a      	movs	r3, #10
 8012f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	4805      	ldr	r0, [pc, #20]	; (8012f54 <MX_GPIO_Init+0x2c8>)
 8012f3e:	f7f0 f889 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8012f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f48:	e018      	b.n	8012f7c <MX_GPIO_Init+0x2f0>
 8012f4a:	bf00      	nop
 8012f4c:	40023800 	.word	0x40023800
 8012f50:	40020c00 	.word	0x40020c00
 8012f54:	40022000 	.word	0x40022000
 8012f58:	40022800 	.word	0x40022800
 8012f5c:	40021c00 	.word	0x40021c00
 8012f60:	40021800 	.word	0x40021800
 8012f64:	40021000 	.word	0x40021000
 8012f68:	40020400 	.word	0x40020400
 8012f6c:	40020800 	.word	0x40020800
 8012f70:	40022400 	.word	0x40022400
 8012f74:	10120000 	.word	0x10120000
 8012f78:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f7c:	2302      	movs	r3, #2
 8012f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f80:	2300      	movs	r3, #0
 8012f82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f84:	2300      	movs	r3, #0
 8012f86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012f88:	230a      	movs	r3, #10
 8012f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8012f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f90:	4619      	mov	r1, r3
 8012f92:	48bb      	ldr	r0, [pc, #748]	; (8013280 <MX_GPIO_Init+0x5f4>)
 8012f94:	f7f0 f85e 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8012f98:	2320      	movs	r3, #32
 8012f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8012fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fac:	4619      	mov	r1, r3
 8012fae:	48b5      	ldr	r0, [pc, #724]	; (8013284 <MX_GPIO_Init+0x5f8>)
 8012fb0:	f7f0 f850 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8012fb4:	2308      	movs	r3, #8
 8012fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012fb8:	2302      	movs	r3, #2
 8012fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012fc4:	230d      	movs	r3, #13
 8012fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8012fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fcc:	4619      	mov	r1, r3
 8012fce:	48ad      	ldr	r0, [pc, #692]	; (8013284 <MX_GPIO_Init+0x5f8>)
 8012fd0:	f7f0 f840 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8012fd4:	f241 030c 	movw	r3, #4108	; 0x100c
 8012fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012fda:	2301      	movs	r3, #1
 8012fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fea:	4619      	mov	r1, r3
 8012fec:	48a6      	ldr	r0, [pc, #664]	; (8013288 <MX_GPIO_Init+0x5fc>)
 8012fee:	f7f0 f831 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8012ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8013000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013004:	4619      	mov	r1, r3
 8013006:	48a1      	ldr	r0, [pc, #644]	; (801328c <MX_GPIO_Init+0x600>)
 8013008:	f7f0 f824 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 801300c:	2308      	movs	r3, #8
 801300e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013010:	2301      	movs	r3, #1
 8013012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013014:	2300      	movs	r3, #0
 8013016:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013018:	2300      	movs	r3, #0
 801301a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 801301c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013020:	4619      	mov	r1, r3
 8013022:	489b      	ldr	r0, [pc, #620]	; (8013290 <MX_GPIO_Init+0x604>)
 8013024:	f7f0 f816 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8013028:	f44f 7300 	mov.w	r3, #512	; 0x200
 801302c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801302e:	2302      	movs	r3, #2
 8013030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013032:	2300      	movs	r3, #0
 8013034:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013036:	2300      	movs	r3, #0
 8013038:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801303a:	230d      	movs	r3, #13
 801303c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 801303e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013042:	4619      	mov	r1, r3
 8013044:	488e      	ldr	r0, [pc, #568]	; (8013280 <MX_GPIO_Init+0x5f4>)
 8013046:	f7f0 f805 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 801304a:	2310      	movs	r3, #16
 801304c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801304e:	2300      	movs	r3, #0
 8013050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013052:	2300      	movs	r3, #0
 8013054:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801305a:	4619      	mov	r1, r3
 801305c:	4889      	ldr	r0, [pc, #548]	; (8013284 <MX_GPIO_Init+0x5f8>)
 801305e:	f7ef fff9 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8013062:	2304      	movs	r3, #4
 8013064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013066:	2302      	movs	r3, #2
 8013068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801306a:	2300      	movs	r3, #0
 801306c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801306e:	2303      	movs	r3, #3
 8013070:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8013072:	230c      	movs	r3, #12
 8013074:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8013076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801307a:	4619      	mov	r1, r3
 801307c:	4881      	ldr	r0, [pc, #516]	; (8013284 <MX_GPIO_Init+0x5f8>)
 801307e:	f7ef ffe9 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8013082:	f248 0304 	movw	r3, #32772	; 0x8004
 8013086:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013088:	2300      	movs	r3, #0
 801308a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801308c:	2300      	movs	r3, #0
 801308e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013094:	4619      	mov	r1, r3
 8013096:	487f      	ldr	r0, [pc, #508]	; (8013294 <MX_GPIO_Init+0x608>)
 8013098:	f7ef ffdc 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 801309c:	2302      	movs	r3, #2
 801309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130a0:	2302      	movs	r3, #2
 80130a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130a4:	2300      	movs	r3, #0
 80130a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130a8:	2300      	movs	r3, #0
 80130aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80130ac:	2305      	movs	r3, #5
 80130ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80130b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130b4:	4619      	mov	r1, r3
 80130b6:	4874      	ldr	r0, [pc, #464]	; (8013288 <MX_GPIO_Init+0x5fc>)
 80130b8:	f7ef ffcc 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80130bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80130c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130c2:	2301      	movs	r3, #1
 80130c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130c6:	2300      	movs	r3, #0
 80130c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130ca:	2300      	movs	r3, #0
 80130cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80130ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130d2:	4619      	mov	r1, r3
 80130d4:	486f      	ldr	r0, [pc, #444]	; (8013294 <MX_GPIO_Init+0x608>)
 80130d6:	f7ef ffbd 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80130da:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80130de:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130e0:	2302      	movs	r3, #2
 80130e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130e8:	2300      	movs	r3, #0
 80130ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80130ec:	230d      	movs	r3, #13
 80130ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80130f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130f4:	4619      	mov	r1, r3
 80130f6:	4867      	ldr	r0, [pc, #412]	; (8013294 <MX_GPIO_Init+0x608>)
 80130f8:	f7ef ffac 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 80130fc:	2301      	movs	r3, #1
 80130fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013100:	2302      	movs	r3, #2
 8013102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013104:	2300      	movs	r3, #0
 8013106:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013108:	2300      	movs	r3, #0
 801310a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801310c:	2302      	movs	r3, #2
 801310e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 8013110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013114:	4619      	mov	r1, r3
 8013116:	485c      	ldr	r0, [pc, #368]	; (8013288 <MX_GPIO_Init+0x5fc>)
 8013118:	f7ef ff9c 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 801311c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013120:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013122:	2302      	movs	r3, #2
 8013124:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013126:	2300      	movs	r3, #0
 8013128:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801312a:	2300      	movs	r3, #0
 801312c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801312e:	2301      	movs	r3, #1
 8013130:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 8013132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013136:	4619      	mov	r1, r3
 8013138:	4857      	ldr	r0, [pc, #348]	; (8013298 <MX_GPIO_Init+0x60c>)
 801313a:	f7ef ff8b 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 801313e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8013144:	4b55      	ldr	r3, [pc, #340]	; (801329c <MX_GPIO_Init+0x610>)
 8013146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013148:	2300      	movs	r3, #0
 801314a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 801314c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013150:	4619      	mov	r1, r3
 8013152:	484d      	ldr	r0, [pc, #308]	; (8013288 <MX_GPIO_Init+0x5fc>)
 8013154:	f7ef ff7e 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8013158:	23c0      	movs	r3, #192	; 0xc0
 801315a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801315c:	2302      	movs	r3, #2
 801315e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013160:	2300      	movs	r3, #0
 8013162:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013164:	2303      	movs	r3, #3
 8013166:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8013168:	2308      	movs	r3, #8
 801316a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801316c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013170:	4619      	mov	r1, r3
 8013172:	4846      	ldr	r0, [pc, #280]	; (801328c <MX_GPIO_Init+0x600>)
 8013174:	f7ef ff6e 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8013178:	23c8      	movs	r3, #200	; 0xc8
 801317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801317c:	2301      	movs	r3, #1
 801317e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013180:	2300      	movs	r3, #0
 8013182:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013184:	2300      	movs	r3, #0
 8013186:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801318c:	4619      	mov	r1, r3
 801318e:	483c      	ldr	r0, [pc, #240]	; (8013280 <MX_GPIO_Init+0x5f4>)
 8013190:	f7ef ff60 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013194:	2332      	movs	r3, #50	; 0x32
 8013196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013198:	2302      	movs	r3, #2
 801319a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801319c:	2300      	movs	r3, #0
 801319e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131a0:	2303      	movs	r3, #3
 80131a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80131a4:	230b      	movs	r3, #11
 80131a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131ac:	4619      	mov	r1, r3
 80131ae:	4837      	ldr	r0, [pc, #220]	; (801328c <MX_GPIO_Init+0x600>)
 80131b0:	f7ef ff50 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80131b4:	2304      	movs	r3, #4
 80131b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131b8:	2302      	movs	r3, #2
 80131ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131bc:	2300      	movs	r3, #0
 80131be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131c0:	2303      	movs	r3, #3
 80131c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80131c4:	2309      	movs	r3, #9
 80131c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80131c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131cc:	4619      	mov	r1, r3
 80131ce:	4834      	ldr	r0, [pc, #208]	; (80132a0 <MX_GPIO_Init+0x614>)
 80131d0:	f7ef ff40 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80131d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80131d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131da:	2302      	movs	r3, #2
 80131dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131de:	2300      	movs	r3, #0
 80131e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131e2:	2303      	movs	r3, #3
 80131e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80131e6:	2309      	movs	r3, #9
 80131e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80131ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131ee:	4619      	mov	r1, r3
 80131f0:	4824      	ldr	r0, [pc, #144]	; (8013284 <MX_GPIO_Init+0x5f8>)
 80131f2:	f7ef ff2f 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80131f6:	2304      	movs	r3, #4
 80131f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80131fa:	2300      	movs	r3, #0
 80131fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131fe:	2300      	movs	r3, #0
 8013200:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8013202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013206:	4619      	mov	r1, r3
 8013208:	481d      	ldr	r0, [pc, #116]	; (8013280 <MX_GPIO_Init+0x5f4>)
 801320a:	f7ef ff23 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801320e:	2386      	movs	r3, #134	; 0x86
 8013210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013212:	2302      	movs	r3, #2
 8013214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013216:	2300      	movs	r3, #0
 8013218:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801321a:	2303      	movs	r3, #3
 801321c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801321e:	230b      	movs	r3, #11
 8013220:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013226:	4619      	mov	r1, r3
 8013228:	481b      	ldr	r0, [pc, #108]	; (8013298 <MX_GPIO_Init+0x60c>)
 801322a:	f7ef ff13 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 801322e:	2350      	movs	r3, #80	; 0x50
 8013230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013232:	2302      	movs	r3, #2
 8013234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013236:	2300      	movs	r3, #0
 8013238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801323a:	2300      	movs	r3, #0
 801323c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801323e:	230d      	movs	r3, #13
 8013240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013246:	4619      	mov	r1, r3
 8013248:	4813      	ldr	r0, [pc, #76]	; (8013298 <MX_GPIO_Init+0x60c>)
 801324a:	f7ef ff03 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 801324e:	2340      	movs	r3, #64	; 0x40
 8013250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013252:	2302      	movs	r3, #2
 8013254:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013256:	2300      	movs	r3, #0
 8013258:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801325a:	2300      	movs	r3, #0
 801325c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 801325e:	2309      	movs	r3, #9
 8013260:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8013262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013266:	4619      	mov	r1, r3
 8013268:	480a      	ldr	r0, [pc, #40]	; (8013294 <MX_GPIO_Init+0x608>)
 801326a:	f7ef fef3 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801326e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8013272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013274:	2302      	movs	r3, #2
 8013276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013278:	2300      	movs	r3, #0
 801327a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801327c:	2300      	movs	r3, #0
 801327e:	e011      	b.n	80132a4 <MX_GPIO_Init+0x618>
 8013280:	40021800 	.word	0x40021800
 8013284:	40020c00 	.word	0x40020c00
 8013288:	40022000 	.word	0x40022000
 801328c:	40020800 	.word	0x40020800
 8013290:	40022800 	.word	0x40022800
 8013294:	40021c00 	.word	0x40021c00
 8013298:	40020000 	.word	0x40020000
 801329c:	10120000 	.word	0x10120000
 80132a0:	40020400 	.word	0x40020400
 80132a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80132a6:	2305      	movs	r3, #5
 80132a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80132aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80132ae:	4619      	mov	r1, r3
 80132b0:	4803      	ldr	r0, [pc, #12]	; (80132c0 <MX_GPIO_Init+0x634>)
 80132b2:	f7ef fecf 	bl	8003054 <HAL_GPIO_Init>

}
 80132b6:	bf00      	nop
 80132b8:	3740      	adds	r7, #64	; 0x40
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	40020400 	.word	0x40020400

080132c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	4a04      	ldr	r2, [pc, #16]	; (80132e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d101      	bne.n	80132da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80132d6:	f7ee fbd1 	bl	8001a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80132da:	bf00      	nop
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	40010000 	.word	0x40010000

080132e8 <strbuf_init>:
const static _U32 u32 = {
	ucBytes : { 0, 1, 2, 3 }
};

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	68ba      	ldr	r2, [r7, #8]
 80132f8:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	68ba      	ldr	r2, [r7, #8]
 80132fe:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	1e5a      	subs	r2, r3, #1
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2200      	movs	r2, #0
 801330c:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	3310      	adds	r3, #16
 8013312:	2210      	movs	r2, #16
 8013314:	2100      	movs	r1, #0
 8013316:	4618      	mov	r0, r3
 8013318:	f001 fd21 	bl	8014d5e <memset>
}
 801331c:	bf00      	nop
 801331e:	3710      	adds	r7, #16
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}

08013324 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d10d      	bne.n	8013352 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	b2db      	uxtb	r3, r3
 801333a:	2214      	movs	r2, #20
 801333c:	4611      	mov	r1, r2
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff f88b 	bl	801245a <vOutputChar>
		apStr->curLen++;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	1c5a      	adds	r2, r3, #1
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 801334e:	2301      	movs	r3, #1
 8013350:	e022      	b.n	8013398 <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	689b      	ldr	r3, [r3, #8]
 801335a:	429a      	cmp	r2, r3
 801335c:	d20e      	bcs.n	801337c <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	1c59      	adds	r1, r3, #1
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	6011      	str	r1, [r2, #0]
 8013368:	683a      	ldr	r2, [r7, #0]
 801336a:	b2d2      	uxtb	r2, r2
 801336c:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	1c5a      	adds	r2, r3, #1
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8013378:	2301      	movs	r3, #1
 801337a:	e00d      	b.n	8013398 <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681a      	ldr	r2, [r3, #0]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	429a      	cmp	r2, r3
 8013386:	d106      	bne.n	8013396 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	1c59      	adds	r1, r3, #1
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	6011      	str	r1, [r2, #0]
 8013392:	2200      	movs	r2, #0
 8013394:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static portINLINE BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d112      	bne.n	80133d8 <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	b2db      	uxtb	r3, r3
 80133b6:	2214      	movs	r2, #20
 80133b8:	4611      	mov	r1, r2
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7ff f84d 	bl	801245a <vOutputChar>
		if( c == 0 )
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d101      	bne.n	80133ca <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 80133c6:	2300      	movs	r3, #0
 80133c8:	e02e      	b.n	8013428 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	1c5a      	adds	r2, r3, #1
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80133d4:	2301      	movs	r3, #1
 80133d6:	e027      	b.n	8013428 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681a      	ldr	r2, [r3, #0]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	689b      	ldr	r3, [r3, #8]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d213      	bcs.n	801340c <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	1c59      	adds	r1, r3, #1
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	6011      	str	r1, [r2, #0]
 80133ee:	683a      	ldr	r2, [r7, #0]
 80133f0:	b2d2      	uxtb	r2, r2
 80133f2:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d101      	bne.n	80133fe <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 80133fa:	2300      	movs	r3, #0
 80133fc:	e014      	b.n	8013428 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	1c5a      	adds	r2, r3, #1
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8013408:	2301      	movs	r3, #1
 801340a:	e00d      	b.n	8013428 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681a      	ldr	r2, [r3, #0]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	689b      	ldr	r3, [r3, #8]
 8013414:	429a      	cmp	r2, r3
 8013416:	d106      	bne.n	8013426 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	1c59      	adds	r1, r3, #1
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	6011      	str	r1, [r2, #0]
 8013422:	2200      	movs	r2, #0
 8013424:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8013426:	2300      	movs	r3, #0
}
 8013428:	4618      	mov	r0, r3
 801342a:	3708      	adds	r7, #8
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8013430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013432:	b085      	sub	sp, #20
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 801343a:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	4618      	mov	r0, r3
 8013440:	f7ff f817 	bl	8012472 <xApplicationMemoryPermissions>
 8013444:	4603      	mov	r3, r0
 8013446:	2b00      	cmp	r3, #0
 8013448:	d101      	bne.n	801344e <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 801344a:	4b4c      	ldr	r3, [pc, #304]	; (801357c <prints+0x14c>)
 801344c:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	695b      	ldr	r3, [r3, #20]
 8013452:	2b00      	cmp	r3, #0
 8013454:	dd1b      	ble.n	801348e <prints+0x5e>
	{
		register int count = 0;
 8013456:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 8013458:	683d      	ldr	r5, [r7, #0]
 801345a:	e001      	b.n	8013460 <prints+0x30>
		{
			++count;
 801345c:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 801345e:	3501      	adds	r5, #1
 8013460:	782b      	ldrb	r3, [r5, #0]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d1fa      	bne.n	801345c <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	695b      	ldr	r3, [r3, #20]
 801346a:	42a3      	cmp	r3, r4
 801346c:	dc03      	bgt.n	8013476 <prints+0x46>
		{
			apBuf->flags.width = 0;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2200      	movs	r2, #0
 8013472:	615a      	str	r2, [r3, #20]
 8013474:	e004      	b.n	8013480 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	695b      	ldr	r3, [r3, #20]
 801347a:	1b1a      	subs	r2, r3, r4
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	7f1b      	ldrb	r3, [r3, #28]
 8013484:	f003 0302 	and.w	r3, r3, #2
 8013488:	2b00      	cmp	r3, #0
 801348a:	d000      	beq.n	801348e <prints+0x5e>
		{
			padchar = '0';
 801348c:	2630      	movs	r6, #48	; 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	7f1b      	ldrb	r3, [r3, #28]
 8013492:	f003 0301 	and.w	r3, r3, #1
 8013496:	2b00      	cmp	r3, #0
 8013498:	d112      	bne.n	80134c0 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 801349a:	e00d      	b.n	80134b8 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 801349c:	4631      	mov	r1, r6
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f7ff ff40 	bl	8013324 <strbuf_printchar>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d101      	bne.n	80134ae <prints+0x7e>
			{
				return pdFALSE;
 80134aa:	2300      	movs	r3, #0
 80134ac:	e062      	b.n	8013574 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	695b      	ldr	r3, [r3, #20]
 80134b2:	1e5a      	subs	r2, r3, #1
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	615a      	str	r2, [r3, #20]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	695b      	ldr	r3, [r3, #20]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	dced      	bgt.n	801349c <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	7f9b      	ldrb	r3, [r3, #30]
 80134c4:	f003 0302 	and.w	r3, r3, #2
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d036      	beq.n	801353c <prints+0x10c>
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	7f1b      	ldrb	r3, [r3, #28]
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	d132      	bne.n	801353c <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 80134d6:	6838      	ldr	r0, [r7, #0]
 80134d8:	f7ec fea4 	bl	8000224 <strlen>
 80134dc:	4603      	mov	r3, r0
 80134de:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	699a      	ldr	r2, [r3, #24]
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	dd28      	ble.n	801353c <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	699a      	ldr	r2, [r3, #24]
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 80134f4:	e00b      	b.n	801350e <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 80134f6:	2130      	movs	r1, #48	; 0x30
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7ff ff13 	bl	8013324 <strbuf_printchar>
 80134fe:	4603      	mov	r3, r0
 8013500:	2b00      	cmp	r3, #0
 8013502:	d101      	bne.n	8013508 <prints+0xd8>
				{
					return pdFALSE;
 8013504:	2300      	movs	r3, #0
 8013506:	e035      	b.n	8013574 <prints+0x144>
			for( ; i; i-- )
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	3b01      	subs	r3, #1
 801350c:	60fb      	str	r3, [r7, #12]
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d1f0      	bne.n	80134f6 <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8013514:	e012      	b.n	801353c <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	4619      	mov	r1, r3
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff ff01 	bl	8013324 <strbuf_printchar>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d101      	bne.n	801352c <prints+0xfc>
		{
			return pdFALSE;
 8013528:	2300      	movs	r3, #0
 801352a:	e023      	b.n	8013574 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	3301      	adds	r3, #1
 8013530:	603b      	str	r3, [r7, #0]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	699b      	ldr	r3, [r3, #24]
 8013536:	1e5a      	subs	r2, r3, #1
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	619a      	str	r2, [r3, #24]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	699b      	ldr	r3, [r3, #24]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d012      	beq.n	801356a <prints+0x13a>
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d1e4      	bne.n	8013516 <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 801354c:	e00d      	b.n	801356a <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 801354e:	4631      	mov	r1, r6
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff fee7 	bl	8013324 <strbuf_printchar>
 8013556:	4603      	mov	r3, r0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d101      	bne.n	8013560 <prints+0x130>
		{
			return pdFALSE;
 801355c:	2300      	movs	r3, #0
 801355e:	e009      	b.n	8013574 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	695b      	ldr	r3, [r3, #20]
 8013564:	1e5a      	subs	r2, r3, #1
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	615a      	str	r2, [r3, #20]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	2b00      	cmp	r3, #0
 8013570:	dced      	bgt.n	801354e <prints+0x11e>
		}
	}

	return pdTRUE;
 8013572:	2301      	movs	r3, #1
}
 8013574:	4618      	mov	r0, r3
 8013576:	3714      	adds	r7, #20
 8013578:	46bd      	mov	sp, r7
 801357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801357c:	080162c4 	.word	0x080162c4

08013580 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8013580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013584:	b087      	sub	sp, #28
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
 801358a:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 801358c:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8013590:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	691b      	ldr	r3, [r3, #16]
 8013596:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	7f93      	ldrb	r3, [r2, #30]
 801359c:	f043 0302 	orr.w	r3, r3, #2
 80135a0:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d10b      	bne.n	80135c0 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 80135a8:	2330      	movs	r3, #48	; 0x30
 80135aa:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 80135ac:	2300      	movs	r3, #0
 80135ae:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 80135b0:	f107 030c 	add.w	r3, r7, #12
 80135b4:	4619      	mov	r1, r3
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f7ff ff3a 	bl	8013430 <prints>
 80135bc:	4603      	mov	r3, r0
 80135be:	e065      	b.n	801368c <printi+0x10c>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	7f9b      	ldrb	r3, [r3, #30]
 80135c4:	f003 0301 	and.w	r3, r3, #1
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d009      	beq.n	80135e2 <printi+0x62>
 80135ce:	2e0a      	cmp	r6, #10
 80135d0:	d107      	bne.n	80135e2 <printi+0x62>
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	da04      	bge.n	80135e2 <printi+0x62>
	{
		neg = 1;
 80135d8:	f04f 0901 	mov.w	r9, #1
		u = -i;
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	425b      	negs	r3, r3
 80135e0:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 80135e2:	f107 040c 	add.w	r4, r7, #12
 80135e6:	340b      	adds	r4, #11

	*s = '\0';
 80135e8:	2300      	movs	r3, #0
 80135ea:	7023      	strb	r3, [r4, #0]
	switch( base )
 80135ec:	2e0a      	cmp	r6, #10
 80135ee:	d026      	beq.n	801363e <printi+0xbe>
 80135f0:	2e10      	cmp	r6, #16
 80135f2:	d013      	beq.n	801361c <printi+0x9c>
 80135f4:	2e08      	cmp	r6, #8
 80135f6:	d022      	beq.n	801363e <printi+0xbe>
 80135f8:	e024      	b.n	8013644 <printi+0xc4>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 80135fa:	462b      	mov	r3, r5
 80135fc:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8013600:	f1b8 0f09 	cmp.w	r8, #9
 8013604:	dd03      	ble.n	801360e <printi+0x8e>
			{
				t += apBuf->flags.letBase - '0' - 10;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	7f5b      	ldrb	r3, [r3, #29]
 801360a:	3b3a      	subs	r3, #58	; 0x3a
 801360c:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 801360e:	3c01      	subs	r4, #1
 8013610:	fa5f f388 	uxtb.w	r3, r8
 8013614:	3330      	adds	r3, #48	; 0x30
 8013616:	b2db      	uxtb	r3, r3
 8013618:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 801361a:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 801361c:	2d00      	cmp	r5, #0
 801361e:	d1ec      	bne.n	80135fa <printi+0x7a>
		}
		break;
 8013620:	e010      	b.n	8013644 <printi+0xc4>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 8013622:	fbb5 f3f6 	udiv	r3, r5, r6
 8013626:	fb06 f303 	mul.w	r3, r6, r3
 801362a:	1aeb      	subs	r3, r5, r3
 801362c:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 801362e:	3c01      	subs	r4, #1
 8013630:	fa5f f388 	uxtb.w	r3, r8
 8013634:	3330      	adds	r3, #48	; 0x30
 8013636:	b2db      	uxtb	r3, r3
 8013638:	7023      	strb	r3, [r4, #0]
			u /= base;
 801363a:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 801363e:	2d00      	cmp	r5, #0
 8013640:	d1ef      	bne.n	8013622 <printi+0xa2>
		}
		break;
 8013642:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 8013644:	f1b9 0f00 	cmp.w	r9, #0
 8013648:	d01b      	beq.n	8013682 <printi+0x102>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	695b      	ldr	r3, [r3, #20]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d014      	beq.n	801367c <printi+0xfc>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	7f1b      	ldrb	r3, [r3, #28]
 8013656:	f003 0302 	and.w	r3, r3, #2
 801365a:	2b00      	cmp	r3, #0
 801365c:	d00e      	beq.n	801367c <printi+0xfc>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 801365e:	212d      	movs	r1, #45	; 0x2d
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f7ff fe5f 	bl	8013324 <strbuf_printchar>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d101      	bne.n	8013670 <printi+0xf0>
			{
				return pdFALSE;
 801366c:	2300      	movs	r3, #0
 801366e:	e00d      	b.n	801368c <printi+0x10c>
			}
			--apBuf->flags.width;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	695b      	ldr	r3, [r3, #20]
 8013674:	1e5a      	subs	r2, r3, #1
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	615a      	str	r2, [r3, #20]
 801367a:	e002      	b.n	8013682 <printi+0x102>
		}
		else
		{
			*( --s ) = '-';
 801367c:	3c01      	subs	r4, #1
 801367e:	232d      	movs	r3, #45	; 0x2d
 8013680:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 8013682:	4621      	mov	r1, r4
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff fed3 	bl	8013430 <prints>
 801368a:	4603      	mov	r3, r0
}
 801368c:	4618      	mov	r0, r3
 801368e:	371c      	adds	r7, #28
 8013690:	46bd      	mov	sp, r7
 8013692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013698 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8013698:	b590      	push	{r4, r7, lr}
 801369a:	b089      	sub	sp, #36	; 0x24
 801369c:	af02      	add	r7, sp, #8
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 80136aa:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	683a      	ldr	r2, [r7, #0]
 80136b4:	b2d2      	uxtb	r2, r2
 80136b6:	f107 0008 	add.w	r0, r7, #8
 80136ba:	9201      	str	r2, [sp, #4]
 80136bc:	9300      	str	r3, [sp, #0]
 80136be:	4623      	mov	r3, r4
 80136c0:	460a      	mov	r2, r1
 80136c2:	4909      	ldr	r1, [pc, #36]	; (80136e8 <printIp+0x50>)
 80136c4:	f000 fa63 	bl	8013b8e <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	7f93      	ldrb	r3, [r2, #30]
 80136cc:	f043 0302 	orr.w	r3, r3, #2
 80136d0:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 80136d2:	f107 0308 	add.w	r3, r7, #8
 80136d6:	4619      	mov	r1, r3
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7ff fea9 	bl	8013430 <prints>

	return pdTRUE;
 80136de:	2301      	movs	r3, #1
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	371c      	adds	r7, #28
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd90      	pop	{r4, r7, pc}
 80136e8:	080162cc 	.word	0x080162cc

080136ec <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	4603      	mov	r3, r0
 80136f4:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 80136f6:	4b0b      	ldr	r3, [pc, #44]	; (8013724 <usNetToHost+0x38>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4a0b      	ldr	r2, [pc, #44]	; (8013728 <usNetToHost+0x3c>)
 80136fc:	4293      	cmp	r3, r2
 80136fe:	d101      	bne.n	8013704 <usNetToHost+0x18>
	{
		return usValue;
 8013700:	88fb      	ldrh	r3, [r7, #6]
 8013702:	e009      	b.n	8013718 <usNetToHost+0x2c>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8013704:	88fb      	ldrh	r3, [r7, #6]
 8013706:	021b      	lsls	r3, r3, #8
 8013708:	b21a      	sxth	r2, r3
 801370a:	88fb      	ldrh	r3, [r7, #6]
 801370c:	0a1b      	lsrs	r3, r3, #8
 801370e:	b29b      	uxth	r3, r3
 8013710:	b21b      	sxth	r3, r3
 8013712:	4313      	orrs	r3, r2
 8013714:	b21b      	sxth	r3, r3
 8013716:	b29b      	uxth	r3, r3
	}
}
 8013718:	4618      	mov	r0, r3
 801371a:	370c      	adds	r7, #12
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr
 8013724:	08018d78 	.word	0x08018d78
 8013728:	00010203 	.word	0x00010203

0801372c <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b088      	sub	sp, #32
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 8013736:	f04f 33ff 	mov.w	r3, #4294967295
 801373a:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 801373c:	2300      	movs	r3, #0
 801373e:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 8013740:	2300      	movs	r3, #0
 8013742:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 8013744:	2300      	movs	r3, #0
 8013746:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8013748:	2300      	movs	r3, #0
 801374a:	61fb      	str	r3, [r7, #28]
 801374c:	e023      	b.n	8013796 <printIPv6+0x6a>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	005b      	lsls	r3, r3, #1
 8013752:	683a      	ldr	r2, [r7, #0]
 8013754:	4413      	add	r3, r2
 8013756:	881b      	ldrh	r3, [r3, #0]
 8013758:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 801375a:	897b      	ldrh	r3, [r7, #10]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d107      	bne.n	8013770 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d101      	bne.n	801376a <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	3301      	adds	r3, #1
 801376e:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8013770:	897b      	ldrh	r3, [r7, #10]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d102      	bne.n	801377c <printIPv6+0x50>
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	2b07      	cmp	r3, #7
 801377a:	d109      	bne.n	8013790 <printIPv6+0x64>
		{
			if( iZeroLength < iCurLength )
 801377c:	697a      	ldr	r2, [r7, #20]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	429a      	cmp	r2, r3
 8013782:	da03      	bge.n	801378c <printIPv6+0x60>
			{
				iZeroLength = iCurLength;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 801378c:	2300      	movs	r3, #0
 801378e:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	3301      	adds	r3, #1
 8013794:	61fb      	str	r3, [r7, #28]
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	2b07      	cmp	r3, #7
 801379a:	ddd8      	ble.n	801374e <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2210      	movs	r2, #16
 80137a0:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2261      	movs	r2, #97	; 0x61
 80137a6:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80137a8:	2300      	movs	r3, #0
 80137aa:	61fb      	str	r3, [r7, #28]
 80137ac:	e02b      	b.n	8013806 <printIPv6+0xda>
	{
		if( iIndex == iZeroStart )
 80137ae:	69fa      	ldr	r2, [r7, #28]
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d110      	bne.n	80137d8 <printIPv6+0xac>
		{
			iIndex += iZeroLength - 1;
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	3b01      	subs	r3, #1
 80137ba:	69fa      	ldr	r2, [r7, #28]
 80137bc:	4413      	add	r3, r2
 80137be:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 80137c0:	213a      	movs	r1, #58	; 0x3a
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7ff fdae 	bl	8013324 <strbuf_printchar>
			if( iIndex == 7 )
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	2b07      	cmp	r3, #7
 80137cc:	d118      	bne.n	8013800 <printIPv6+0xd4>
			{
				strbuf_printchar( apBuf, ':' );
 80137ce:	213a      	movs	r1, #58	; 0x3a
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f7ff fda7 	bl	8013324 <strbuf_printchar>
 80137d6:	e013      	b.n	8013800 <printIPv6+0xd4>
			}
		}
		else
		{
			if( iIndex > 0 )
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	dd03      	ble.n	80137e6 <printIPv6+0xba>
			{
				strbuf_printchar( apBuf, ':' );
 80137de:	213a      	movs	r1, #58	; 0x3a
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7ff fd9f 	bl	8013324 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	005b      	lsls	r3, r3, #1
 80137ea:	683a      	ldr	r2, [r7, #0]
 80137ec:	4413      	add	r3, r2
 80137ee:	881b      	ldrh	r3, [r3, #0]
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7ff ff7b 	bl	80136ec <usNetToHost>
 80137f6:	4603      	mov	r3, r0
 80137f8:	4619      	mov	r1, r3
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f7ff fec0 	bl	8013580 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	3301      	adds	r3, #1
 8013804:	61fb      	str	r3, [r7, #28]
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	2b07      	cmp	r3, #7
 801380a:	ddd0      	ble.n	80137ae <printIPv6+0x82>
		}
	}

	return pdTRUE;
 801380c:	2301      	movs	r3, #1
}
 801380e:	4618      	mov	r0, r3
 8013810:	3720      	adds	r7, #32
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
	...

08013818 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8013818:	b590      	push	{r4, r7, lr}
 801381a:	b087      	sub	sp, #28
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	1c5a      	adds	r2, r3, #1
 8013828:	60ba      	str	r2, [r7, #8]
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	2b25      	cmp	r3, #37	; 0x25
 8013832:	d00f      	beq.n	8013854 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 8013834:	6979      	ldr	r1, [r7, #20]
 8013836:	68f8      	ldr	r0, [r7, #12]
 8013838:	f7ff fdb2 	bl	80133a0 <strbuf_printchar_inline>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	f000 817e 	beq.w	8013b40 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	1c5a      	adds	r2, r3, #1
 8013848:	60ba      	str	r2, [r7, #8]
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	2b25      	cmp	r3, #37	; 0x25
 8013852:	d1ef      	bne.n	8013834 <tiny_print+0x1c>
		}
		ch = *( format++ );
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	1c5a      	adds	r2, r3, #1
 8013858:	60ba      	str	r2, [r7, #8]
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	2b00      	cmp	r3, #0
 8013862:	f000 8165 	beq.w	8013b30 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	2b25      	cmp	r3, #37	; 0x25
 801386a:	d108      	bne.n	801387e <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 801386c:	6979      	ldr	r1, [r7, #20]
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f7ff fd58 	bl	8013324 <strbuf_printchar>
 8013874:	4603      	mov	r3, r0
 8013876:	2b00      	cmp	r3, #0
 8013878:	f040 814e 	bne.w	8013b18 <tiny_print+0x300>
			{
				return;
 801387c:	e161      	b.n	8013b42 <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	3310      	adds	r3, #16
 8013882:	2210      	movs	r2, #16
 8013884:	2100      	movs	r1, #0
 8013886:	4618      	mov	r0, r3
 8013888:	f001 fa69 	bl	8014d5e <memset>

		if( ch == '-' )
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	2b2d      	cmp	r3, #45	; 0x2d
 8013890:	d114      	bne.n	80138bc <tiny_print+0xa4>
		{
			ch = *( format++ );
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	1c5a      	adds	r2, r3, #1
 8013896:	60ba      	str	r2, [r7, #8]
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2201      	movs	r2, #1
 80138a0:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 80138a2:	e00b      	b.n	80138bc <tiny_print+0xa4>
		{
			ch = *( format++ );
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	1c5a      	adds	r2, r3, #1
 80138a8:	60ba      	str	r2, [r7, #8]
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	7f1b      	ldrb	r3, [r3, #28]
 80138b2:	f043 0302 	orr.w	r3, r3, #2
 80138b6:	b2da      	uxtb	r2, r3
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	2b30      	cmp	r3, #48	; 0x30
 80138c0:	d0f0      	beq.n	80138a4 <tiny_print+0x8c>
		}
		if( ch == '*' )
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	2b2a      	cmp	r3, #42	; 0x2a
 80138c6:	d120      	bne.n	801390a <tiny_print+0xf2>
		{
			ch = *( format++ );
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	1c5a      	adds	r2, r3, #1
 80138cc:	60ba      	str	r2, [r7, #8]
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	1d1a      	adds	r2, r3, #4
 80138d6:	607a      	str	r2, [r7, #4]
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	615a      	str	r2, [r3, #20]
 80138de:	e01a      	b.n	8013916 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	695a      	ldr	r2, [r3, #20]
 80138e4:	4613      	mov	r3, r2
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	4413      	add	r3, r2
 80138ea:	005b      	lsls	r3, r3, #1
 80138ec:	461a      	mov	r2, r3
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	695a      	ldr	r2, [r3, #20]
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	3b30      	subs	r3, #48	; 0x30
 80138fa:	441a      	add	r2, r3
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	60ba      	str	r2, [r7, #8]
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	2b2f      	cmp	r3, #47	; 0x2f
 801390e:	dd02      	ble.n	8013916 <tiny_print+0xfe>
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	2b39      	cmp	r3, #57	; 0x39
 8013914:	dde4      	ble.n	80138e0 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	2b2e      	cmp	r3, #46	; 0x2e
 801391a:	d12e      	bne.n	801397a <tiny_print+0x162>
		{
			ch = *( format++ );
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	1c5a      	adds	r2, r3, #1
 8013920:	60ba      	str	r2, [r7, #8]
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	2b2a      	cmp	r3, #42	; 0x2a
 801392a:	d120      	bne.n	801396e <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	1d1a      	adds	r2, r3, #4
 8013930:	607a      	str	r2, [r7, #4]
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	1c5a      	adds	r2, r3, #1
 801393c:	60ba      	str	r2, [r7, #8]
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	617b      	str	r3, [r7, #20]
 8013942:	e01a      	b.n	801397a <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	699a      	ldr	r2, [r3, #24]
 8013948:	4613      	mov	r3, r2
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	4413      	add	r3, r2
 801394e:	005b      	lsls	r3, r3, #1
 8013950:	461a      	mov	r2, r3
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	699a      	ldr	r2, [r3, #24]
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	3b30      	subs	r3, #48	; 0x30
 801395e:	441a      	add	r2, r3
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	1c5a      	adds	r2, r3, #1
 8013968:	60ba      	str	r2, [r7, #8]
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	2b2f      	cmp	r3, #47	; 0x2f
 8013972:	dd02      	ble.n	801397a <tiny_print+0x162>
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	2b39      	cmp	r3, #57	; 0x39
 8013978:	dde4      	ble.n	8013944 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	699b      	ldr	r3, [r3, #24]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d104      	bne.n	801398c <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	699b      	ldr	r3, [r3, #24]
 8013986:	1e5a      	subs	r2, r3, #1
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	2b70      	cmp	r3, #112	; 0x70
 8013990:	d118      	bne.n	80139c4 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	2b69      	cmp	r3, #105	; 0x69
 8013998:	d114      	bne.n	80139c4 <tiny_print+0x1ac>
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	3301      	adds	r3, #1
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	2b70      	cmp	r3, #112	; 0x70
 80139a2:	d10f      	bne.n	80139c4 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	3302      	adds	r3, #2
 80139a8:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	1d1a      	adds	r2, r3, #4
 80139ae:	607a      	str	r2, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	4619      	mov	r1, r3
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	f7ff feb9 	bl	801372c <printIPv6>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f040 80ad 	bne.w	8013b1c <tiny_print+0x304>
				{
					break;
 80139c2:	e0b8      	b.n	8013b36 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	2b73      	cmp	r3, #115	; 0x73
 80139c8:	d112      	bne.n	80139f0 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	1d1a      	adds	r2, r3, #4
 80139ce:	607a      	str	r2, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 80139d4:	2c00      	cmp	r4, #0
 80139d6:	d001      	beq.n	80139dc <tiny_print+0x1c4>
 80139d8:	4623      	mov	r3, r4
 80139da:	e000      	b.n	80139de <tiny_print+0x1c6>
 80139dc:	4b5a      	ldr	r3, [pc, #360]	; (8013b48 <tiny_print+0x330>)
 80139de:	4619      	mov	r1, r3
 80139e0:	68f8      	ldr	r0, [r7, #12]
 80139e2:	f7ff fd25 	bl	8013430 <prints>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	f040 8099 	bne.w	8013b20 <tiny_print+0x308>
			{
				break;
 80139ee:	e0a2      	b.n	8013b36 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	2b63      	cmp	r3, #99	; 0x63
 80139f4:	d10f      	bne.n	8013a16 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	1d1a      	adds	r2, r3, #4
 80139fa:	607a      	str	r2, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 8013a02:	7c3b      	ldrb	r3, [r7, #16]
 8013a04:	4619      	mov	r1, r3
 8013a06:	68f8      	ldr	r0, [r7, #12]
 8013a08:	f7ff fc8c 	bl	8013324 <strbuf_printchar>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	f040 8088 	bne.w	8013b24 <tiny_print+0x30c>
			{
				return;
 8013a14:	e095      	b.n	8013b42 <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	2b6c      	cmp	r3, #108	; 0x6c
 8013a1a:	d109      	bne.n	8013a30 <tiny_print+0x218>
		{
			ch = *( format++ );
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	1c5a      	adds	r2, r3, #1
 8013a20:	60ba      	str	r2, [r7, #8]
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8013a26:	68fa      	ldr	r2, [r7, #12]
 8013a28:	7f93      	ldrb	r3, [r2, #30]
 8013a2a:	f043 0304 	orr.w	r3, r3, #4
 8013a2e:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	2b4c      	cmp	r3, #76	; 0x4c
 8013a34:	d109      	bne.n	8013a4a <tiny_print+0x232>
		{
			ch = *( format++ );
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	1c5a      	adds	r2, r3, #1
 8013a3a:	60ba      	str	r2, [r7, #8]
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	7f93      	ldrb	r3, [r2, #30]
 8013a44:	f043 0308 	orr.w	r3, r3, #8
 8013a48:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	220a      	movs	r2, #10
 8013a4e:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	2261      	movs	r2, #97	; 0x61
 8013a54:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	2b64      	cmp	r3, #100	; 0x64
 8013a5a:	d002      	beq.n	8013a62 <tiny_print+0x24a>
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	2b75      	cmp	r3, #117	; 0x75
 8013a60:	d116      	bne.n	8013a90 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	2b64      	cmp	r3, #100	; 0x64
 8013a66:	bf0c      	ite	eq
 8013a68:	2301      	moveq	r3, #1
 8013a6a:	2300      	movne	r3, #0
 8013a6c:	b2d9      	uxtb	r1, r3
 8013a6e:	68fa      	ldr	r2, [r7, #12]
 8013a70:	7f93      	ldrb	r3, [r2, #30]
 8013a72:	f361 0300 	bfi	r3, r1, #0, #1
 8013a76:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	1d1a      	adds	r2, r3, #4
 8013a7c:	607a      	str	r2, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4619      	mov	r1, r3
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f7ff fd7c 	bl	8013580 <printi>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d14c      	bne.n	8013b28 <tiny_print+0x310>
			{
				break;
 8013a8e:	e052      	b.n	8013b36 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2210      	movs	r2, #16
 8013a94:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	2b78      	cmp	r3, #120	; 0x78
 8013a9a:	d117      	bne.n	8013acc <tiny_print+0x2b4>
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	2b69      	cmp	r3, #105	; 0x69
 8013aa2:	d113      	bne.n	8013acc <tiny_print+0x2b4>
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	2b70      	cmp	r3, #112	; 0x70
 8013aac:	d10e      	bne.n	8013acc <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	3302      	adds	r3, #2
 8013ab2:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	1d1a      	adds	r2, r3, #4
 8013ab8:	607a      	str	r2, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	4619      	mov	r1, r3
 8013abe:	68f8      	ldr	r0, [r7, #12]
 8013ac0:	f7ff fdea 	bl	8013698 <printIp>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d130      	bne.n	8013b2c <tiny_print+0x314>
			{
				break;
 8013aca:	e034      	b.n	8013b36 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	2b78      	cmp	r3, #120	; 0x78
 8013ad0:	d009      	beq.n	8013ae6 <tiny_print+0x2ce>
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	2b58      	cmp	r3, #88	; 0x58
 8013ad6:	d006      	beq.n	8013ae6 <tiny_print+0x2ce>
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	2b70      	cmp	r3, #112	; 0x70
 8013adc:	d003      	beq.n	8013ae6 <tiny_print+0x2ce>
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	2b6f      	cmp	r3, #111	; 0x6f
 8013ae2:	f47f ae9f 	bne.w	8013824 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	2b58      	cmp	r3, #88	; 0x58
 8013aea:	d103      	bne.n	8013af4 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2241      	movs	r2, #65	; 0x41
 8013af0:	775a      	strb	r2, [r3, #29]
 8013af2:	e005      	b.n	8013b00 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	2b6f      	cmp	r3, #111	; 0x6f
 8013af8:	d102      	bne.n	8013b00 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	2208      	movs	r2, #8
 8013afe:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	1d1a      	adds	r2, r3, #4
 8013b04:	607a      	str	r2, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4619      	mov	r1, r3
 8013b0a:	68f8      	ldr	r0, [r7, #12]
 8013b0c:	f7ff fd38 	bl	8013580 <printi>
 8013b10:	4603      	mov	r3, r0
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d00e      	beq.n	8013b34 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8013b16:	e00a      	b.n	8013b2e <tiny_print+0x316>
			continue;
 8013b18:	bf00      	nop
 8013b1a:	e683      	b.n	8013824 <tiny_print+0xc>
				continue;
 8013b1c:	bf00      	nop
 8013b1e:	e681      	b.n	8013824 <tiny_print+0xc>
			continue;
 8013b20:	bf00      	nop
 8013b22:	e67f      	b.n	8013824 <tiny_print+0xc>
			continue;
 8013b24:	bf00      	nop
 8013b26:	e67d      	b.n	8013824 <tiny_print+0xc>
			continue;
 8013b28:	bf00      	nop
 8013b2a:	e67b      	b.n	8013824 <tiny_print+0xc>
			continue;
 8013b2c:	bf00      	nop
	{
 8013b2e:	e679      	b.n	8013824 <tiny_print+0xc>
			break;
 8013b30:	bf00      	nop
 8013b32:	e000      	b.n	8013b36 <tiny_print+0x31e>
				break;
 8013b34:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8013b36:	2100      	movs	r1, #0
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f7ff fbf3 	bl	8013324 <strbuf_printchar>
 8013b3e:	e000      	b.n	8013b42 <tiny_print+0x32a>
					return;
 8013b40:	bf00      	nop
}
 8013b42:	371c      	adds	r7, #28
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd90      	pop	{r4, r7, pc}
 8013b48:	080162d8 	.word	0x080162d8

08013b4c <snprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 8013b4c:	b40c      	push	{r2, r3}
 8013b4e:	b580      	push	{r7, lr}
 8013b50:	b08c      	sub	sp, #48	; 0x30
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
 8013b56:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8013b58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	441a      	add	r2, r3
 8013b64:	f107 030c 	add.w	r3, r7, #12
 8013b68:	6879      	ldr	r1, [r7, #4]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7ff fbbc 	bl	80132e8 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8013b70:	f107 030c 	add.w	r3, r7, #12
 8013b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7ff fe4d 	bl	8013818 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8013b7e:	69bb      	ldr	r3, [r7, #24]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3730      	adds	r7, #48	; 0x30
 8013b84:	46bd      	mov	sp, r7
 8013b86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013b8a:	b002      	add	sp, #8
 8013b8c:	4770      	bx	lr

08013b8e <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8013b8e:	b40e      	push	{r1, r2, r3}
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b08d      	sub	sp, #52	; 0x34
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8013b98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8013ba4:	f107 030c 	add.w	r3, r7, #12
 8013ba8:	6879      	ldr	r1, [r7, #4]
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7ff fb9c 	bl	80132e8 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8013bb0:	f107 030c 	add.w	r3, r7, #12
 8013bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7ff fe2d 	bl	8013818 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8013bbe:	69bb      	ldr	r3, [r7, #24]
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3734      	adds	r7, #52	; 0x34
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013bca:	b003      	add	sp, #12
 8013bcc:	4770      	bx	lr
	...

08013bd0 <SDRAMDISK_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_initialize(BYTE lun)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013bda:	4b0b      	ldr	r3, [pc, #44]	; (8013c08 <SDRAMDISK_initialize+0x38>)
 8013bdc:	2201      	movs	r2, #1
 8013bde:	701a      	strb	r2, [r3, #0]

  /* Configure the SDRAM device */
  if(BSP_SDRAM_Init() == SDRAM_OK)
 8013be0:	f7fd faf4 	bl	80111cc <BSP_SDRAM_Init>
 8013be4:	4603      	mov	r3, r0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d107      	bne.n	8013bfa <SDRAMDISK_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013bea:	4b07      	ldr	r3, [pc, #28]	; (8013c08 <SDRAMDISK_initialize+0x38>)
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	f023 0301 	bic.w	r3, r3, #1
 8013bf4:	b2da      	uxtb	r2, r3
 8013bf6:	4b04      	ldr	r3, [pc, #16]	; (8013c08 <SDRAMDISK_initialize+0x38>)
 8013bf8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013bfa:	4b03      	ldr	r3, [pc, #12]	; (8013c08 <SDRAMDISK_initialize+0x38>)
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	b2db      	uxtb	r3, r3
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	20000038 	.word	0x20000038

08013c0c <SDRAMDISK_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	b083      	sub	sp, #12
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	4603      	mov	r3, r0
 8013c14:	71fb      	strb	r3, [r7, #7]
  return Stat;
 8013c16:	4b04      	ldr	r3, [pc, #16]	; (8013c28 <SDRAMDISK_status+0x1c>)
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	b2db      	uxtb	r3, r3
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	370c      	adds	r7, #12
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr
 8013c28:	20000038 	.word	0x20000038

08013c2c <SDRAMDISK_read>:
  * @retval DRESULT: Operation result
  */
/* USER CODE BEGIN beforeWriteSection */

//TV: Moved to user code because changes
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b088      	sub	sp, #32
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60b9      	str	r1, [r7, #8]
 8013c34:	607a      	str	r2, [r7, #4]
 8013c36:	603b      	str	r3, [r7, #0]
 8013c38:	4603      	mov	r3, r0
 8013c3a:	73fb      	strb	r3, [r7, #15]
	uint32_t *pSrcBuffer = (uint32_t *) &buff;
 8013c3c:	f107 0308 	add.w	r3, r7, #8
 8013c40:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	025b      	lsls	r3, r3, #9
 8013c46:	089b      	lsrs	r3, r3, #2
 8013c48:	61bb      	str	r3, [r7, #24]
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	4b08      	ldr	r3, [pc, #32]	; (8013c70 <SDRAMDISK_read+0x44>)
 8013c4e:	4413      	add	r3, r2
 8013c50:	025b      	lsls	r3, r3, #9
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 8013c52:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 8013c54:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pSrcBuffer, BufferSize);
 8013c56:	69fb      	ldr	r3, [r7, #28]
 8013c58:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 8013c5a:	69ba      	ldr	r2, [r7, #24]
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	f7fd fac1 	bl	80111e4 <BSP_SDRAM_ReadData>
 8013c62:	4603      	mov	r3, r0
 8013c64:	74fb      	strb	r3, [r7, #19]

	return RES_OK;
 8013c66:	7cfb      	ldrb	r3, [r7, #19]
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3720      	adds	r7, #32
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	00600800 	.word	0x00600800

08013c74 <SDRAMDISK_write>:
  */

/* USER CODE BEGIN beforeIoctlSection */
//TV: Moved to user code because changes
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b088      	sub	sp, #32
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60b9      	str	r1, [r7, #8]
 8013c7c:	607a      	str	r2, [r7, #4]
 8013c7e:	603b      	str	r3, [r7, #0]
 8013c80:	4603      	mov	r3, r0
 8013c82:	73fb      	strb	r3, [r7, #15]
	uint32_t *pDstBuffer = (uint32_t *) &buff;
 8013c84:	f107 0308 	add.w	r3, r7, #8
 8013c88:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	025b      	lsls	r3, r3, #9
 8013c8e:	089b      	lsrs	r3, r3, #2
 8013c90:	61bb      	str	r3, [r7, #24]
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	4b08      	ldr	r3, [pc, #32]	; (8013cb8 <SDRAMDISK_write+0x44>)
 8013c96:	4413      	add	r3, r2
 8013c98:	025b      	lsls	r3, r3, #9
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 8013c9a:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8013c9c:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pDstBuffer, BufferSize);
 8013c9e:	69fb      	ldr	r3, [r7, #28]
 8013ca0:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8013ca2:	69ba      	ldr	r2, [r7, #24]
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	f7fd fab7 	bl	8011218 <BSP_SDRAM_WriteData>
 8013caa:	4603      	mov	r3, r0
 8013cac:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*(__IO uint32_t *) pSramAddress++ = *pDstBuffer++;
	//}

	return RES_OK;
 8013cae:	7cfb      	ldrb	r3, [r7, #19]
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3720      	adds	r7, #32
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	00600800 	.word	0x00600800

08013cbc <SDRAMDISK_ioctl>:
  */

/* USER CODE BEGIN lastSection */
//TV: Moved to user code because changes
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
 8013cbc:	b480      	push	{r7}
 8013cbe:	b085      	sub	sp, #20
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	603a      	str	r2, [r7, #0]
 8013cc6:	71fb      	strb	r3, [r7, #7]
 8013cc8:	460b      	mov	r3, r1
 8013cca:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT)
 8013cd0:	4b1b      	ldr	r3, [pc, #108]	; (8013d40 <SDRAMDISK_ioctl+0x84>)
 8013cd2:	781b      	ldrb	r3, [r3, #0]
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	f003 0301 	and.w	r3, r3, #1
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d001      	beq.n	8013ce2 <SDRAMDISK_ioctl+0x26>
		return RES_NOTRDY;
 8013cde:	2303      	movs	r3, #3
 8013ce0:	e027      	b.n	8013d32 <SDRAMDISK_ioctl+0x76>

	switch (cmd) {
 8013ce2:	79bb      	ldrb	r3, [r7, #6]
 8013ce4:	2b03      	cmp	r3, #3
 8013ce6:	d821      	bhi.n	8013d2c <SDRAMDISK_ioctl+0x70>
 8013ce8:	a201      	add	r2, pc, #4	; (adr r2, 8013cf0 <SDRAMDISK_ioctl+0x34>)
 8013cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cee:	bf00      	nop
 8013cf0:	08013d01 	.word	0x08013d01
 8013cf4:	08013d07 	.word	0x08013d07
 8013cf8:	08013d13 	.word	0x08013d13
 8013cfc:	08013d21 	.word	0x08013d21
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 8013d00:	2300      	movs	r3, #0
 8013d02:	73fb      	strb	r3, [r7, #15]
		break;
 8013d04:	e014      	b.n	8013d30 <SDRAMDISK_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	4a0e      	ldr	r2, [pc, #56]	; (8013d44 <SDRAMDISK_ioctl+0x88>)
 8013d0a:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	73fb      	strb	r3, [r7, #15]
		break;
 8013d10:	e00e      	b.n	8013d30 <SDRAMDISK_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d18:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	73fb      	strb	r3, [r7, #15]
		break;
 8013d1e:	e007      	b.n	8013d30 <SDRAMDISK_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	2201      	movs	r2, #1
 8013d24:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8013d26:	2300      	movs	r3, #0
 8013d28:	73fb      	strb	r3, [r7, #15]
		break;
 8013d2a:	e001      	b.n	8013d30 <SDRAMDISK_ioctl+0x74>

	default:
		res = RES_PARERR;
 8013d2c:	2304      	movs	r3, #4
 8013d2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3714      	adds	r7, #20
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr
 8013d3e:	bf00      	nop
 8013d40:	20000038 	.word	0x20000038
 8013d44:	007ff800 	.word	0x007ff800

08013d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013d4c:	2003      	movs	r0, #3
 8013d4e:	f7ee fac5 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8013d52:	2200      	movs	r2, #0
 8013d54:	2100      	movs	r1, #0
 8013d56:	f06f 000b 	mvn.w	r0, #11
 8013d5a:	f7ee faca 	bl	80022f2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8013d5e:	2200      	movs	r2, #0
 8013d60:	2100      	movs	r1, #0
 8013d62:	f06f 000a 	mvn.w	r0, #10
 8013d66:	f7ee fac4 	bl	80022f2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	2100      	movs	r1, #0
 8013d6e:	f06f 0009 	mvn.w	r0, #9
 8013d72:	f7ee fabe 	bl	80022f2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8013d76:	2200      	movs	r2, #0
 8013d78:	2100      	movs	r1, #0
 8013d7a:	f06f 0004 	mvn.w	r0, #4
 8013d7e:	f7ee fab8 	bl	80022f2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8013d82:	2200      	movs	r2, #0
 8013d84:	2100      	movs	r1, #0
 8013d86:	f06f 0003 	mvn.w	r0, #3
 8013d8a:	f7ee fab2 	bl	80022f2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8013d8e:	2200      	movs	r2, #0
 8013d90:	210f      	movs	r1, #15
 8013d92:	f06f 0001 	mvn.w	r0, #1
 8013d96:	f7ee faac 	bl	80022f2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	210f      	movs	r1, #15
 8013d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013da2:	f7ee faa6 	bl	80022f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013da6:	bf00      	nop
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b088      	sub	sp, #32
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a2f      	ldr	r2, [pc, #188]	; (8013e78 <HAL_ADC_MspInit+0xcc>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d157      	bne.n	8013e6e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8013dbe:	4a2f      	ldr	r2, [pc, #188]	; (8013e7c <HAL_ADC_MspInit+0xd0>)
 8013dc0:	4b2e      	ldr	r3, [pc, #184]	; (8013e7c <HAL_ADC_MspInit+0xd0>)
 8013dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8013dca:	4b2c      	ldr	r3, [pc, #176]	; (8013e7c <HAL_ADC_MspInit+0xd0>)
 8013dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013dd2:	60bb      	str	r3, [r7, #8]
 8013dd4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8013dd6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8013dda:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013ddc:	2303      	movs	r3, #3
 8013dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013de0:	2300      	movs	r3, #0
 8013de2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013de4:	f107 030c 	add.w	r3, r7, #12
 8013de8:	4619      	mov	r1, r3
 8013dea:	4825      	ldr	r0, [pc, #148]	; (8013e80 <HAL_ADC_MspInit+0xd4>)
 8013dec:	f7ef f932 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8013df0:	2301      	movs	r3, #1
 8013df2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013df4:	2303      	movs	r3, #3
 8013df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8013dfc:	f107 030c 	add.w	r3, r7, #12
 8013e00:	4619      	mov	r1, r3
 8013e02:	4820      	ldr	r0, [pc, #128]	; (8013e84 <HAL_ADC_MspInit+0xd8>)
 8013e04:	f7ef f926 	bl	8003054 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8013e08:	4b1f      	ldr	r3, [pc, #124]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e0a:	4a20      	ldr	r2, [pc, #128]	; (8013e8c <HAL_ADC_MspInit+0xe0>)
 8013e0c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8013e0e:	4b1e      	ldr	r3, [pc, #120]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8013e14:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013e16:	4b1c      	ldr	r3, [pc, #112]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e18:	2200      	movs	r2, #0
 8013e1a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8013e1c:	4b1a      	ldr	r3, [pc, #104]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e1e:	2200      	movs	r2, #0
 8013e20:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8013e22:	4b19      	ldr	r3, [pc, #100]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013e28:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8013e2a:	4b17      	ldr	r3, [pc, #92]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e30:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8013e32:	4b15      	ldr	r3, [pc, #84]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013e38:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8013e3a:	4b13      	ldr	r3, [pc, #76]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8013e40:	4b11      	ldr	r3, [pc, #68]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013e46:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8013e48:	4b0f      	ldr	r3, [pc, #60]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8013e4e:	480e      	ldr	r0, [pc, #56]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e50:	f7ee fb80 	bl	8002554 <HAL_DMA_Init>
 8013e54:	4603      	mov	r3, r0
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d003      	beq.n	8013e62 <HAL_ADC_MspInit+0xb6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8013e5a:	2189      	movs	r1, #137	; 0x89
 8013e5c:	480c      	ldr	r0, [pc, #48]	; (8013e90 <HAL_ADC_MspInit+0xe4>)
 8013e5e:	f7fe fb13 	bl	8012488 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4a08      	ldr	r2, [pc, #32]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e66:	639a      	str	r2, [r3, #56]	; 0x38
 8013e68:	4a07      	ldr	r2, [pc, #28]	; (8013e88 <HAL_ADC_MspInit+0xdc>)
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8013e6e:	bf00      	nop
 8013e70:	3720      	adds	r7, #32
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	40012200 	.word	0x40012200
 8013e7c:	40023800 	.word	0x40023800
 8013e80:	40021400 	.word	0x40021400
 8013e84:	40020000 	.word	0x40020000
 8013e88:	2000fab0 	.word	0x2000fab0
 8013e8c:	40026410 	.word	0x40026410
 8013e90:	08016310 	.word	0x08016310

08013e94 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	4a0a      	ldr	r2, [pc, #40]	; (8013ecc <HAL_CRC_MspInit+0x38>)
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	d10b      	bne.n	8013ebe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8013ea6:	4a0a      	ldr	r2, [pc, #40]	; (8013ed0 <HAL_CRC_MspInit+0x3c>)
 8013ea8:	4b09      	ldr	r3, [pc, #36]	; (8013ed0 <HAL_CRC_MspInit+0x3c>)
 8013eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8013eb2:	4b07      	ldr	r3, [pc, #28]	; (8013ed0 <HAL_CRC_MspInit+0x3c>)
 8013eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013eba:	60fb      	str	r3, [r7, #12]
 8013ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8013ebe:	bf00      	nop
 8013ec0:	3714      	adds	r7, #20
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec8:	4770      	bx	lr
 8013eca:	bf00      	nop
 8013ecc:	40023000 	.word	0x40023000
 8013ed0:	40023800 	.word	0x40023800

08013ed4 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b085      	sub	sp, #20
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	4a0a      	ldr	r2, [pc, #40]	; (8013f0c <HAL_DMA2D_MspInit+0x38>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d10b      	bne.n	8013efe <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013ee6:	4a0a      	ldr	r2, [pc, #40]	; (8013f10 <HAL_DMA2D_MspInit+0x3c>)
 8013ee8:	4b09      	ldr	r3, [pc, #36]	; (8013f10 <HAL_DMA2D_MspInit+0x3c>)
 8013eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8013ef2:	4b07      	ldr	r3, [pc, #28]	; (8013f10 <HAL_DMA2D_MspInit+0x3c>)
 8013ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013efa:	60fb      	str	r3, [r7, #12]
 8013efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8013efe:	bf00      	nop
 8013f00:	3714      	adds	r7, #20
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr
 8013f0a:	bf00      	nop
 8013f0c:	4002b000 	.word	0x4002b000
 8013f10:	40023800 	.word	0x40023800

08013f14 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b088      	sub	sp, #32
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a11      	ldr	r2, [pc, #68]	; (8013f68 <HAL_I2C_MspInit+0x54>)
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d11c      	bne.n	8013f60 <HAL_I2C_MspInit+0x4c>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8013f26:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013f2c:	2312      	movs	r3, #18
 8013f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013f30:	2301      	movs	r3, #1
 8013f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f34:	2303      	movs	r3, #3
 8013f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8013f38:	2304      	movs	r3, #4
 8013f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013f3c:	f107 030c 	add.w	r3, r7, #12
 8013f40:	4619      	mov	r1, r3
 8013f42:	480a      	ldr	r0, [pc, #40]	; (8013f6c <HAL_I2C_MspInit+0x58>)
 8013f44:	f7ef f886 	bl	8003054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8013f48:	4a09      	ldr	r2, [pc, #36]	; (8013f70 <HAL_I2C_MspInit+0x5c>)
 8013f4a:	4b09      	ldr	r3, [pc, #36]	; (8013f70 <HAL_I2C_MspInit+0x5c>)
 8013f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013f52:	6413      	str	r3, [r2, #64]	; 0x40
 8013f54:	4b06      	ldr	r3, [pc, #24]	; (8013f70 <HAL_I2C_MspInit+0x5c>)
 8013f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f5c:	60bb      	str	r3, [r7, #8]
 8013f5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8013f60:	bf00      	nop
 8013f62:	3720      	adds	r7, #32
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}
 8013f68:	40005c00 	.word	0x40005c00
 8013f6c:	40021c00 	.word	0x40021c00
 8013f70:	40023800 	.word	0x40023800

08013f74 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b088      	sub	sp, #32
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	4a32      	ldr	r2, [pc, #200]	; (801404c <HAL_LTDC_MspInit+0xd8>)
 8013f82:	4293      	cmp	r3, r2
 8013f84:	d15e      	bne.n	8014044 <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8013f86:	4a32      	ldr	r2, [pc, #200]	; (8014050 <HAL_LTDC_MspInit+0xdc>)
 8013f88:	4b31      	ldr	r3, [pc, #196]	; (8014050 <HAL_LTDC_MspInit+0xdc>)
 8013f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013f90:	6453      	str	r3, [r2, #68]	; 0x44
 8013f92:	4b2f      	ldr	r3, [pc, #188]	; (8014050 <HAL_LTDC_MspInit+0xdc>)
 8013f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013f9a:	60bb      	str	r3, [r7, #8]
 8013f9c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8013f9e:	2310      	movs	r3, #16
 8013fa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013fa2:	2302      	movs	r3, #2
 8013fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013faa:	2300      	movs	r3, #0
 8013fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013fae:	230e      	movs	r3, #14
 8013fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8013fb2:	f107 030c 	add.w	r3, r7, #12
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	4826      	ldr	r0, [pc, #152]	; (8014054 <HAL_LTDC_MspInit+0xe0>)
 8013fba:	f7ef f84b 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8013fbe:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8013fc2:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013fc4:	2302      	movs	r3, #2
 8013fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013fd0:	230e      	movs	r3, #14
 8013fd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8013fd4:	f107 030c 	add.w	r3, r7, #12
 8013fd8:	4619      	mov	r1, r3
 8013fda:	481f      	ldr	r0, [pc, #124]	; (8014058 <HAL_LTDC_MspInit+0xe4>)
 8013fdc:	f7ef f83a 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8013fe0:	23f7      	movs	r3, #247	; 0xf7
 8013fe2:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013fe4:	2302      	movs	r3, #2
 8013fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013fec:	2300      	movs	r3, #0
 8013fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013ff0:	230e      	movs	r3, #14
 8013ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8013ff4:	f107 030c 	add.w	r3, r7, #12
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	4818      	ldr	r0, [pc, #96]	; (801405c <HAL_LTDC_MspInit+0xe8>)
 8013ffc:	f7ef f82a 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8014000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014004:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014006:	2302      	movs	r3, #2
 8014008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801400a:	2300      	movs	r3, #0
 801400c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801400e:	2300      	movs	r3, #0
 8014010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8014012:	2309      	movs	r3, #9
 8014014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8014016:	f107 030c 	add.w	r3, r7, #12
 801401a:	4619      	mov	r1, r3
 801401c:	4810      	ldr	r0, [pc, #64]	; (8014060 <HAL_LTDC_MspInit+0xec>)
 801401e:	f7ef f819 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8014022:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8014026:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014028:	2302      	movs	r3, #2
 801402a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801402c:	2300      	movs	r3, #0
 801402e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014030:	2300      	movs	r3, #0
 8014032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014034:	230e      	movs	r3, #14
 8014036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8014038:	f107 030c 	add.w	r3, r7, #12
 801403c:	4619      	mov	r1, r3
 801403e:	4809      	ldr	r0, [pc, #36]	; (8014064 <HAL_LTDC_MspInit+0xf0>)
 8014040:	f7ef f808 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8014044:	bf00      	nop
 8014046:	3720      	adds	r7, #32
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	40016800 	.word	0x40016800
 8014050:	40023800 	.word	0x40023800
 8014054:	40021000 	.word	0x40021000
 8014058:	40022400 	.word	0x40022400
 801405c:	40022800 	.word	0x40022800
 8014060:	40021800 	.word	0x40021800
 8014064:	40022000 	.word	0x40022000

08014068 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b08a      	sub	sp, #40	; 0x28
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014078:	d10c      	bne.n	8014094 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801407a:	4a19      	ldr	r2, [pc, #100]	; (80140e0 <HAL_TIM_Base_MspInit+0x78>)
 801407c:	4b18      	ldr	r3, [pc, #96]	; (80140e0 <HAL_TIM_Base_MspInit+0x78>)
 801407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014080:	f043 0301 	orr.w	r3, r3, #1
 8014084:	6413      	str	r3, [r2, #64]	; 0x40
 8014086:	4b16      	ldr	r3, [pc, #88]	; (80140e0 <HAL_TIM_Base_MspInit+0x78>)
 8014088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801408a:	f003 0301 	and.w	r3, r3, #1
 801408e:	613b      	str	r3, [r7, #16]
 8014090:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8014092:	e020      	b.n	80140d6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4a12      	ldr	r2, [pc, #72]	; (80140e4 <HAL_TIM_Base_MspInit+0x7c>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d11b      	bne.n	80140d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801409e:	4a10      	ldr	r2, [pc, #64]	; (80140e0 <HAL_TIM_Base_MspInit+0x78>)
 80140a0:	4b0f      	ldr	r3, [pc, #60]	; (80140e0 <HAL_TIM_Base_MspInit+0x78>)
 80140a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140a4:	f043 0302 	orr.w	r3, r3, #2
 80140a8:	6413      	str	r3, [r2, #64]	; 0x40
 80140aa:	4b0d      	ldr	r3, [pc, #52]	; (80140e0 <HAL_TIM_Base_MspInit+0x78>)
 80140ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ae:	f003 0302 	and.w	r3, r3, #2
 80140b2:	60fb      	str	r3, [r7, #12]
 80140b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80140b6:	2310      	movs	r3, #16
 80140b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80140ba:	2302      	movs	r3, #2
 80140bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80140be:	2300      	movs	r3, #0
 80140c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80140c2:	2300      	movs	r3, #0
 80140c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80140c6:	2302      	movs	r3, #2
 80140c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80140ca:	f107 0314 	add.w	r3, r7, #20
 80140ce:	4619      	mov	r1, r3
 80140d0:	4805      	ldr	r0, [pc, #20]	; (80140e8 <HAL_TIM_Base_MspInit+0x80>)
 80140d2:	f7ee ffbf 	bl	8003054 <HAL_GPIO_Init>
}
 80140d6:	bf00      	nop
 80140d8:	3728      	adds	r7, #40	; 0x28
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	40023800 	.word	0x40023800
 80140e4:	40000400 	.word	0x40000400
 80140e8:	40020400 	.word	0x40020400

080140ec <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b088      	sub	sp, #32
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	4a19      	ldr	r2, [pc, #100]	; (8014160 <HAL_UART_MspInit+0x74>)
 80140fa:	4293      	cmp	r3, r2
 80140fc:	d12c      	bne.n	8014158 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80140fe:	4a19      	ldr	r2, [pc, #100]	; (8014164 <HAL_UART_MspInit+0x78>)
 8014100:	4b18      	ldr	r3, [pc, #96]	; (8014164 <HAL_UART_MspInit+0x78>)
 8014102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014104:	f043 0310 	orr.w	r3, r3, #16
 8014108:	6453      	str	r3, [r2, #68]	; 0x44
 801410a:	4b16      	ldr	r3, [pc, #88]	; (8014164 <HAL_UART_MspInit+0x78>)
 801410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801410e:	f003 0310 	and.w	r3, r3, #16
 8014112:	60bb      	str	r3, [r7, #8]
 8014114:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8014116:	2380      	movs	r3, #128	; 0x80
 8014118:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801411a:	2302      	movs	r3, #2
 801411c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801411e:	2300      	movs	r3, #0
 8014120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014122:	2300      	movs	r3, #0
 8014124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014126:	2307      	movs	r3, #7
 8014128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 801412a:	f107 030c 	add.w	r3, r7, #12
 801412e:	4619      	mov	r1, r3
 8014130:	480d      	ldr	r0, [pc, #52]	; (8014168 <HAL_UART_MspInit+0x7c>)
 8014132:	f7ee ff8f 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8014136:	f44f 7300 	mov.w	r3, #512	; 0x200
 801413a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801413c:	2302      	movs	r3, #2
 801413e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014140:	2300      	movs	r3, #0
 8014142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014144:	2300      	movs	r3, #0
 8014146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014148:	2307      	movs	r3, #7
 801414a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 801414c:	f107 030c 	add.w	r3, r7, #12
 8014150:	4619      	mov	r1, r3
 8014152:	4806      	ldr	r0, [pc, #24]	; (801416c <HAL_UART_MspInit+0x80>)
 8014154:	f7ee ff7e 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8014158:	bf00      	nop
 801415a:	3720      	adds	r7, #32
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	40011000 	.word	0x40011000
 8014164:	40023800 	.word	0x40023800
 8014168:	40020400 	.word	0x40020400
 801416c:	40020000 	.word	0x40020000

08014170 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8014170:	b580      	push	{r7, lr}
 8014172:	b086      	sub	sp, #24
 8014174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8014176:	4b3b      	ldr	r3, [pc, #236]	; (8014264 <HAL_FMC_MspInit+0xf4>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d16d      	bne.n	801425a <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 801417e:	4b39      	ldr	r3, [pc, #228]	; (8014264 <HAL_FMC_MspInit+0xf4>)
 8014180:	2201      	movs	r2, #1
 8014182:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8014184:	4a38      	ldr	r2, [pc, #224]	; (8014268 <HAL_FMC_MspInit+0xf8>)
 8014186:	4b38      	ldr	r3, [pc, #224]	; (8014268 <HAL_FMC_MspInit+0xf8>)
 8014188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801418a:	f043 0301 	orr.w	r3, r3, #1
 801418e:	6393      	str	r3, [r2, #56]	; 0x38
 8014190:	4b35      	ldr	r3, [pc, #212]	; (8014268 <HAL_FMC_MspInit+0xf8>)
 8014192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014194:	f003 0301 	and.w	r3, r3, #1
 8014198:	603b      	str	r3, [r7, #0]
 801419a:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 801419c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80141a0:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141a2:	2302      	movs	r3, #2
 80141a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141a6:	2300      	movs	r3, #0
 80141a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141aa:	2303      	movs	r3, #3
 80141ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80141ae:	230c      	movs	r3, #12
 80141b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80141b2:	1d3b      	adds	r3, r7, #4
 80141b4:	4619      	mov	r1, r3
 80141b6:	482d      	ldr	r0, [pc, #180]	; (801426c <HAL_FMC_MspInit+0xfc>)
 80141b8:	f7ee ff4c 	bl	8003054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80141bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80141c0:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141c2:	2302      	movs	r3, #2
 80141c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141c6:	2300      	movs	r3, #0
 80141c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141ca:	2303      	movs	r3, #3
 80141cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80141ce:	230c      	movs	r3, #12
 80141d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80141d2:	1d3b      	adds	r3, r7, #4
 80141d4:	4619      	mov	r1, r3
 80141d6:	4826      	ldr	r0, [pc, #152]	; (8014270 <HAL_FMC_MspInit+0x100>)
 80141d8:	f7ee ff3c 	bl	8003054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80141dc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80141e0:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141e2:	2302      	movs	r3, #2
 80141e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141e6:	2300      	movs	r3, #0
 80141e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141ea:	2303      	movs	r3, #3
 80141ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80141ee:	230c      	movs	r3, #12
 80141f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80141f2:	1d3b      	adds	r3, r7, #4
 80141f4:	4619      	mov	r1, r3
 80141f6:	481f      	ldr	r0, [pc, #124]	; (8014274 <HAL_FMC_MspInit+0x104>)
 80141f8:	f7ee ff2c 	bl	8003054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80141fc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8014200:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014202:	2302      	movs	r3, #2
 8014204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014206:	2300      	movs	r3, #0
 8014208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801420a:	2303      	movs	r3, #3
 801420c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801420e:	230c      	movs	r3, #12
 8014210:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014212:	1d3b      	adds	r3, r7, #4
 8014214:	4619      	mov	r1, r3
 8014216:	4818      	ldr	r0, [pc, #96]	; (8014278 <HAL_FMC_MspInit+0x108>)
 8014218:	f7ee ff1c 	bl	8003054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 801421c:	2328      	movs	r3, #40	; 0x28
 801421e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014220:	2302      	movs	r3, #2
 8014222:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014224:	2300      	movs	r3, #0
 8014226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014228:	2303      	movs	r3, #3
 801422a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801422c:	230c      	movs	r3, #12
 801422e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014230:	1d3b      	adds	r3, r7, #4
 8014232:	4619      	mov	r1, r3
 8014234:	4811      	ldr	r0, [pc, #68]	; (801427c <HAL_FMC_MspInit+0x10c>)
 8014236:	f7ee ff0d 	bl	8003054 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 801423a:	2308      	movs	r3, #8
 801423c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801423e:	2302      	movs	r3, #2
 8014240:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014242:	2300      	movs	r3, #0
 8014244:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014246:	2303      	movs	r3, #3
 8014248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801424a:	230c      	movs	r3, #12
 801424c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 801424e:	1d3b      	adds	r3, r7, #4
 8014250:	4619      	mov	r1, r3
 8014252:	480b      	ldr	r0, [pc, #44]	; (8014280 <HAL_FMC_MspInit+0x110>)
 8014254:	f7ee fefe 	bl	8003054 <HAL_GPIO_Init>
 8014258:	e000      	b.n	801425c <HAL_FMC_MspInit+0xec>
    return;
 801425a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 801425c:	3718      	adds	r7, #24
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	2000f4d4 	.word	0x2000f4d4
 8014268:	40023800 	.word	0x40023800
 801426c:	40021000 	.word	0x40021000
 8014270:	40021800 	.word	0x40021800
 8014274:	40020c00 	.word	0x40020c00
 8014278:	40021400 	.word	0x40021400
 801427c:	40021c00 	.word	0x40021c00
 8014280:	40020800 	.word	0x40020800

08014284 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8014284:	b580      	push	{r7, lr}
 8014286:	b082      	sub	sp, #8
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 801428c:	f7ff ff70 	bl	8014170 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8014290:	bf00      	nop
 8014292:	3708      	adds	r7, #8
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}

08014298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b08c      	sub	sp, #48	; 0x30
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80142a0:	2300      	movs	r3, #0
 80142a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80142a4:	2300      	movs	r3, #0
 80142a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80142a8:	2200      	movs	r2, #0
 80142aa:	6879      	ldr	r1, [r7, #4]
 80142ac:	2019      	movs	r0, #25
 80142ae:	f7ee f820 	bl	80022f2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80142b2:	2019      	movs	r0, #25
 80142b4:	f7ee f839 	bl	800232a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80142b8:	4a1f      	ldr	r2, [pc, #124]	; (8014338 <HAL_InitTick+0xa0>)
 80142ba:	4b1f      	ldr	r3, [pc, #124]	; (8014338 <HAL_InitTick+0xa0>)
 80142bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142be:	f043 0301 	orr.w	r3, r3, #1
 80142c2:	6453      	str	r3, [r2, #68]	; 0x44
 80142c4:	4b1c      	ldr	r3, [pc, #112]	; (8014338 <HAL_InitTick+0xa0>)
 80142c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142c8:	f003 0301 	and.w	r3, r3, #1
 80142cc:	60fb      	str	r3, [r7, #12]
 80142ce:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80142d0:	f107 0210 	add.w	r2, r7, #16
 80142d4:	f107 0314 	add.w	r3, r7, #20
 80142d8:	4611      	mov	r1, r2
 80142da:	4618      	mov	r0, r3
 80142dc:	f7f1 fd2e 	bl	8005d3c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80142e0:	f7f1 fd18 	bl	8005d14 <HAL_RCC_GetPCLK2Freq>
 80142e4:	4603      	mov	r3, r0
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80142ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ec:	4a13      	ldr	r2, [pc, #76]	; (801433c <HAL_InitTick+0xa4>)
 80142ee:	fba2 2303 	umull	r2, r3, r2, r3
 80142f2:	0c9b      	lsrs	r3, r3, #18
 80142f4:	3b01      	subs	r3, #1
 80142f6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80142f8:	4b11      	ldr	r3, [pc, #68]	; (8014340 <HAL_InitTick+0xa8>)
 80142fa:	4a12      	ldr	r2, [pc, #72]	; (8014344 <HAL_InitTick+0xac>)
 80142fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80142fe:	4b10      	ldr	r3, [pc, #64]	; (8014340 <HAL_InitTick+0xa8>)
 8014300:	f240 32e7 	movw	r2, #999	; 0x3e7
 8014304:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8014306:	4a0e      	ldr	r2, [pc, #56]	; (8014340 <HAL_InitTick+0xa8>)
 8014308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 801430c:	4b0c      	ldr	r3, [pc, #48]	; (8014340 <HAL_InitTick+0xa8>)
 801430e:	2200      	movs	r2, #0
 8014310:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014312:	4b0b      	ldr	r3, [pc, #44]	; (8014340 <HAL_InitTick+0xa8>)
 8014314:	2200      	movs	r2, #0
 8014316:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8014318:	4809      	ldr	r0, [pc, #36]	; (8014340 <HAL_InitTick+0xa8>)
 801431a:	f7f2 fa10 	bl	800673e <HAL_TIM_Base_Init>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d104      	bne.n	801432e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8014324:	4806      	ldr	r0, [pc, #24]	; (8014340 <HAL_InitTick+0xa8>)
 8014326:	f7f2 fa7b 	bl	8006820 <HAL_TIM_Base_Start_IT>
 801432a:	4603      	mov	r3, r0
 801432c:	e000      	b.n	8014330 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801432e:	2301      	movs	r3, #1
}
 8014330:	4618      	mov	r0, r3
 8014332:	3730      	adds	r7, #48	; 0x30
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	40023800 	.word	0x40023800
 801433c:	431bde83 	.word	0x431bde83
 8014340:	200104a4 	.word	0x200104a4
 8014344:	40010000 	.word	0x40010000

08014348 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 801434c:	f7f8 f89a 	bl	800c484 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014350:	bf00      	nop
 8014352:	bd80      	pop	{r7, pc}

08014354 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014358:	4802      	ldr	r0, [pc, #8]	; (8014364 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801435a:	f7f2 fa7c 	bl	8006856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801435e:	bf00      	nop
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	200104a4 	.word	0x200104a4

08014368 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 801436c:	4802      	ldr	r0, [pc, #8]	; (8014378 <DMA2_Stream0_IRQHandler+0x10>)
 801436e:	f7ee f99f 	bl	80026b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8014372:	bf00      	nop
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	2000fab0 	.word	0x2000fab0

0801437c <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8014380:	4802      	ldr	r0, [pc, #8]	; (801438c <OTG_HS_IRQHandler+0x10>)
 8014382:	f7ef fa91 	bl	80038a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8014386:	bf00      	nop
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	200108b4 	.word	0x200108b4

08014390 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014390:	b480      	push	{r7}
 8014392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014394:	4a15      	ldr	r2, [pc, #84]	; (80143ec <SystemInit+0x5c>)
 8014396:	4b15      	ldr	r3, [pc, #84]	; (80143ec <SystemInit+0x5c>)
 8014398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801439c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80143a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80143a4:	4a12      	ldr	r2, [pc, #72]	; (80143f0 <SystemInit+0x60>)
 80143a6:	4b12      	ldr	r3, [pc, #72]	; (80143f0 <SystemInit+0x60>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	f043 0301 	orr.w	r3, r3, #1
 80143ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80143b0:	4b0f      	ldr	r3, [pc, #60]	; (80143f0 <SystemInit+0x60>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80143b6:	490e      	ldr	r1, [pc, #56]	; (80143f0 <SystemInit+0x60>)
 80143b8:	4b0d      	ldr	r3, [pc, #52]	; (80143f0 <SystemInit+0x60>)
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	4b0d      	ldr	r3, [pc, #52]	; (80143f4 <SystemInit+0x64>)
 80143be:	4013      	ands	r3, r2
 80143c0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80143c2:	4b0b      	ldr	r3, [pc, #44]	; (80143f0 <SystemInit+0x60>)
 80143c4:	4a0c      	ldr	r2, [pc, #48]	; (80143f8 <SystemInit+0x68>)
 80143c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80143c8:	4a09      	ldr	r2, [pc, #36]	; (80143f0 <SystemInit+0x60>)
 80143ca:	4b09      	ldr	r3, [pc, #36]	; (80143f0 <SystemInit+0x60>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80143d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80143d4:	4b06      	ldr	r3, [pc, #24]	; (80143f0 <SystemInit+0x60>)
 80143d6:	2200      	movs	r2, #0
 80143d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80143da:	4b04      	ldr	r3, [pc, #16]	; (80143ec <SystemInit+0x5c>)
 80143dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80143e0:	609a      	str	r2, [r3, #8]
#endif
}
 80143e2:	bf00      	nop
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr
 80143ec:	e000ed00 	.word	0xe000ed00
 80143f0:	40023800 	.word	0x40023800
 80143f4:	fef6ffff 	.word	0xfef6ffff
 80143f8:	24003010 	.word	0x24003010

080143fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS);
 8014400:	2200      	movs	r2, #0
 8014402:	4906      	ldr	r1, [pc, #24]	; (801441c <MX_USB_HOST_Init+0x20>)
 8014404:	4806      	ldr	r0, [pc, #24]	; (8014420 <MX_USB_HOST_Init+0x24>)
 8014406:	f7fa f9e1 	bl	800e7cc <USBH_Init>

  USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS);
 801440a:	4906      	ldr	r1, [pc, #24]	; (8014424 <MX_USB_HOST_Init+0x28>)
 801440c:	4804      	ldr	r0, [pc, #16]	; (8014420 <MX_USB_HOST_Init+0x24>)
 801440e:	f7fa fa79 	bl	800e904 <USBH_RegisterClass>

  USBH_Start(&hUsbHostHS);
 8014412:	4803      	ldr	r0, [pc, #12]	; (8014420 <MX_USB_HOST_Init+0x24>)
 8014414:	f7fa fb07 	bl	800ea26 <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014418:	bf00      	nop
 801441a:	bd80      	pop	{r7, pc}
 801441c:	08014429 	.word	0x08014429
 8014420:	200104e4 	.word	0x200104e4
 8014424:	20000018 	.word	0x20000018

08014428 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8014428:	b480      	push	{r7}
 801442a:	b083      	sub	sp, #12
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	460b      	mov	r3, r1
 8014432:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014434:	78fb      	ldrb	r3, [r7, #3]
 8014436:	3b01      	subs	r3, #1
 8014438:	2b04      	cmp	r3, #4
 801443a:	d819      	bhi.n	8014470 <USBH_UserProcess+0x48>
 801443c:	a201      	add	r2, pc, #4	; (adr r2, 8014444 <USBH_UserProcess+0x1c>)
 801443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014442:	bf00      	nop
 8014444:	08014471 	.word	0x08014471
 8014448:	08014461 	.word	0x08014461
 801444c:	08014471 	.word	0x08014471
 8014450:	08014469 	.word	0x08014469
 8014454:	08014459 	.word	0x08014459
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014458:	4b09      	ldr	r3, [pc, #36]	; (8014480 <USBH_UserProcess+0x58>)
 801445a:	2203      	movs	r2, #3
 801445c:	701a      	strb	r2, [r3, #0]
  break;
 801445e:	e008      	b.n	8014472 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014460:	4b07      	ldr	r3, [pc, #28]	; (8014480 <USBH_UserProcess+0x58>)
 8014462:	2202      	movs	r2, #2
 8014464:	701a      	strb	r2, [r3, #0]
  break;
 8014466:	e004      	b.n	8014472 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014468:	4b05      	ldr	r3, [pc, #20]	; (8014480 <USBH_UserProcess+0x58>)
 801446a:	2201      	movs	r2, #1
 801446c:	701a      	strb	r2, [r3, #0]
  break;
 801446e:	e000      	b.n	8014472 <USBH_UserProcess+0x4a>

  default:
  break;
 8014470:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014472:	bf00      	nop
 8014474:	370c      	adds	r7, #12
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr
 801447e:	bf00      	nop
 8014480:	2000f4d8 	.word	0x2000f4d8

08014484 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b08a      	sub	sp, #40	; 0x28
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_HS)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	4a33      	ldr	r2, [pc, #204]	; (8014560 <HAL_HCD_MspInit+0xdc>)
 8014492:	4293      	cmp	r3, r2
 8014494:	d160      	bne.n	8014558 <HAL_HCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8014496:	f643 4323 	movw	r3, #15395	; 0x3c23
 801449a:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801449c:	2302      	movs	r3, #2
 801449e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144a0:	2300      	movs	r3, #0
 80144a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144a4:	2303      	movs	r3, #3
 80144a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80144a8:	230a      	movs	r3, #10
 80144aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80144ac:	f107 0314 	add.w	r3, r7, #20
 80144b0:	4619      	mov	r1, r3
 80144b2:	482c      	ldr	r0, [pc, #176]	; (8014564 <HAL_HCD_MspInit+0xe0>)
 80144b4:	f7ee fdce 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80144b8:	2310      	movs	r3, #16
 80144ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144bc:	2302      	movs	r3, #2
 80144be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144c0:	2300      	movs	r3, #0
 80144c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144c4:	2303      	movs	r3, #3
 80144c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80144c8:	230a      	movs	r3, #10
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80144cc:	f107 0314 	add.w	r3, r7, #20
 80144d0:	4619      	mov	r1, r3
 80144d2:	4825      	ldr	r0, [pc, #148]	; (8014568 <HAL_HCD_MspInit+0xe4>)
 80144d4:	f7ee fdbe 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80144d8:	2305      	movs	r3, #5
 80144da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144dc:	2302      	movs	r3, #2
 80144de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144e0:	2300      	movs	r3, #0
 80144e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144e4:	2303      	movs	r3, #3
 80144e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80144e8:	230a      	movs	r3, #10
 80144ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80144ec:	f107 0314 	add.w	r3, r7, #20
 80144f0:	4619      	mov	r1, r3
 80144f2:	481e      	ldr	r0, [pc, #120]	; (801456c <HAL_HCD_MspInit+0xe8>)
 80144f4:	f7ee fdae 	bl	8003054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80144f8:	2328      	movs	r3, #40	; 0x28
 80144fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144fc:	2302      	movs	r3, #2
 80144fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014500:	2300      	movs	r3, #0
 8014502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014504:	2303      	movs	r3, #3
 8014506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8014508:	230a      	movs	r3, #10
 801450a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801450c:	f107 0314 	add.w	r3, r7, #20
 8014510:	4619      	mov	r1, r3
 8014512:	4817      	ldr	r0, [pc, #92]	; (8014570 <HAL_HCD_MspInit+0xec>)
 8014514:	f7ee fd9e 	bl	8003054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8014518:	4a16      	ldr	r2, [pc, #88]	; (8014574 <HAL_HCD_MspInit+0xf0>)
 801451a:	4b16      	ldr	r3, [pc, #88]	; (8014574 <HAL_HCD_MspInit+0xf0>)
 801451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801451e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014522:	6313      	str	r3, [r2, #48]	; 0x30
 8014524:	4b13      	ldr	r3, [pc, #76]	; (8014574 <HAL_HCD_MspInit+0xf0>)
 8014526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801452c:	613b      	str	r3, [r7, #16]
 801452e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8014530:	4a10      	ldr	r2, [pc, #64]	; (8014574 <HAL_HCD_MspInit+0xf0>)
 8014532:	4b10      	ldr	r3, [pc, #64]	; (8014574 <HAL_HCD_MspInit+0xf0>)
 8014534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801453a:	6313      	str	r3, [r2, #48]	; 0x30
 801453c:	4b0d      	ldr	r3, [pc, #52]	; (8014574 <HAL_HCD_MspInit+0xf0>)
 801453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014540:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014544:	60fb      	str	r3, [r7, #12]
 8014546:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8014548:	2200      	movs	r2, #0
 801454a:	2105      	movs	r1, #5
 801454c:	204d      	movs	r0, #77	; 0x4d
 801454e:	f7ed fed0 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8014552:	204d      	movs	r0, #77	; 0x4d
 8014554:	f7ed fee9 	bl	800232a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8014558:	bf00      	nop
 801455a:	3728      	adds	r7, #40	; 0x28
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	40040000 	.word	0x40040000
 8014564:	40020400 	.word	0x40020400
 8014568:	40021c00 	.word	0x40021c00
 801456c:	40020800 	.word	0x40020800
 8014570:	40020000 	.word	0x40020000
 8014574:	40023800 	.word	0x40023800

08014578 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014586:	4618      	mov	r0, r3
 8014588:	f7fa fd19 	bl	800efbe <USBH_LL_IncTimer>
}
 801458c:	bf00      	nop
 801458e:	3708      	adds	r7, #8
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}

08014594 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b082      	sub	sp, #8
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fa fd35 	bl	800f012 <USBH_LL_Connect>
}
 80145a8:	bf00      	nop
 80145aa:	3708      	adds	r7, #8
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}

080145b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b082      	sub	sp, #8
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fa fd55 	bl	800f06e <USBH_LL_Disconnect>
}
 80145c4:	bf00      	nop
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	460b      	mov	r3, r1
 80145d6:	70fb      	strb	r3, [r7, #3]
 80145d8:	4613      	mov	r3, r2
 80145da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fa fd8d 	bl	800f102 <USBH_LL_NotifyURBChange>
#endif
}
 80145e8:	bf00      	nop
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d132      	bne.n	8014668 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8014602:	4a1c      	ldr	r2, [pc, #112]	; (8014674 <USBH_LL_Init+0x84>)
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_HS;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4a19      	ldr	r2, [pc, #100]	; (8014674 <USBH_LL_Init+0x84>)
 801460e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8014612:	4b18      	ldr	r3, [pc, #96]	; (8014674 <USBH_LL_Init+0x84>)
 8014614:	4a18      	ldr	r2, [pc, #96]	; (8014678 <USBH_LL_Init+0x88>)
 8014616:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8014618:	4b16      	ldr	r3, [pc, #88]	; (8014674 <USBH_LL_Init+0x84>)
 801461a:	220c      	movs	r2, #12
 801461c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 801461e:	4b15      	ldr	r3, [pc, #84]	; (8014674 <USBH_LL_Init+0x84>)
 8014620:	2200      	movs	r2, #0
 8014622:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8014624:	4b13      	ldr	r3, [pc, #76]	; (8014674 <USBH_LL_Init+0x84>)
 8014626:	2200      	movs	r2, #0
 8014628:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 801462a:	4b12      	ldr	r3, [pc, #72]	; (8014674 <USBH_LL_Init+0x84>)
 801462c:	2201      	movs	r2, #1
 801462e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8014630:	4b10      	ldr	r3, [pc, #64]	; (8014674 <USBH_LL_Init+0x84>)
 8014632:	2200      	movs	r2, #0
 8014634:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8014636:	4b0f      	ldr	r3, [pc, #60]	; (8014674 <USBH_LL_Init+0x84>)
 8014638:	2200      	movs	r2, #0
 801463a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 801463c:	4b0d      	ldr	r3, [pc, #52]	; (8014674 <USBH_LL_Init+0x84>)
 801463e:	2201      	movs	r2, #1
 8014640:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8014642:	480c      	ldr	r0, [pc, #48]	; (8014674 <USBH_LL_Init+0x84>)
 8014644:	f7ee fec9 	bl	80033da <HAL_HCD_Init>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d004      	beq.n	8014658 <USBH_LL_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 801464e:	f240 110d 	movw	r1, #269	; 0x10d
 8014652:	480a      	ldr	r0, [pc, #40]	; (801467c <USBH_LL_Init+0x8c>)
 8014654:	f7fd ff18 	bl	8012488 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8014658:	4806      	ldr	r0, [pc, #24]	; (8014674 <USBH_LL_Init+0x84>)
 801465a:	f7ef fa9f 	bl	8003b9c <HAL_HCD_GetCurrentFrame>
 801465e:	4603      	mov	r3, r0
 8014660:	4619      	mov	r1, r3
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7fa fc9c 	bl	800efa0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8014668:	2300      	movs	r3, #0
}
 801466a:	4618      	mov	r0, r3
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	200108b4 	.word	0x200108b4
 8014678:	40040000 	.word	0x40040000
 801467c:	0801632c 	.word	0x0801632c

08014680 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014688:	2300      	movs	r3, #0
 801468a:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801468c:	2300      	movs	r3, #0
 801468e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8014696:	4618      	mov	r0, r3
 8014698:	f7ef fa08 	bl	8003aac <HAL_HCD_Start>
 801469c:	4603      	mov	r3, r0
 801469e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80146a0:	7bbb      	ldrb	r3, [r7, #14]
 80146a2:	2b03      	cmp	r3, #3
 80146a4:	d816      	bhi.n	80146d4 <USBH_LL_Start+0x54>
 80146a6:	a201      	add	r2, pc, #4	; (adr r2, 80146ac <USBH_LL_Start+0x2c>)
 80146a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146ac:	080146bd 	.word	0x080146bd
 80146b0:	080146c3 	.word	0x080146c3
 80146b4:	080146c9 	.word	0x080146c9
 80146b8:	080146cf 	.word	0x080146cf
    case HAL_OK :
      usb_status = USBH_OK;
 80146bc:	2300      	movs	r3, #0
 80146be:	73fb      	strb	r3, [r7, #15]
    break;
 80146c0:	e00b      	b.n	80146da <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80146c2:	2302      	movs	r3, #2
 80146c4:	73fb      	strb	r3, [r7, #15]
    break;
 80146c6:	e008      	b.n	80146da <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80146c8:	2301      	movs	r3, #1
 80146ca:	73fb      	strb	r3, [r7, #15]
    break;
 80146cc:	e005      	b.n	80146da <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80146ce:	2302      	movs	r3, #2
 80146d0:	73fb      	strb	r3, [r7, #15]
    break;
 80146d2:	e002      	b.n	80146da <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 80146d4:	2302      	movs	r3, #2
 80146d6:	73fb      	strb	r3, [r7, #15]
    break;
 80146d8:	bf00      	nop
  }
  return usb_status;
 80146da:	7bfb      	ldrb	r3, [r7, #15]
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3710      	adds	r7, #16
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b084      	sub	sp, #16
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146ec:	2300      	movs	r3, #0
 80146ee:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80146f0:	2300      	movs	r3, #0
 80146f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7ef f9f9 	bl	8003af2 <HAL_HCD_Stop>
 8014700:	4603      	mov	r3, r0
 8014702:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014704:	7bbb      	ldrb	r3, [r7, #14]
 8014706:	2b03      	cmp	r3, #3
 8014708:	d816      	bhi.n	8014738 <USBH_LL_Stop+0x54>
 801470a:	a201      	add	r2, pc, #4	; (adr r2, 8014710 <USBH_LL_Stop+0x2c>)
 801470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014710:	08014721 	.word	0x08014721
 8014714:	08014727 	.word	0x08014727
 8014718:	0801472d 	.word	0x0801472d
 801471c:	08014733 	.word	0x08014733
    case HAL_OK :
      usb_status = USBH_OK;
 8014720:	2300      	movs	r3, #0
 8014722:	73fb      	strb	r3, [r7, #15]
    break;
 8014724:	e00b      	b.n	801473e <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014726:	2302      	movs	r3, #2
 8014728:	73fb      	strb	r3, [r7, #15]
    break;
 801472a:	e008      	b.n	801473e <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801472c:	2301      	movs	r3, #1
 801472e:	73fb      	strb	r3, [r7, #15]
    break;
 8014730:	e005      	b.n	801473e <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014732:	2302      	movs	r3, #2
 8014734:	73fb      	strb	r3, [r7, #15]
    break;
 8014736:	e002      	b.n	801473e <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 8014738:	2302      	movs	r3, #2
 801473a:	73fb      	strb	r3, [r7, #15]
    break;
 801473c:	bf00      	nop
  }
  return usb_status;
 801473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014740:	4618      	mov	r0, r3
 8014742:	3710      	adds	r7, #16
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b084      	sub	sp, #16
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014750:	2301      	movs	r3, #1
 8014752:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801475a:	4618      	mov	r0, r3
 801475c:	f7ef fa2c 	bl	8003bb8 <HAL_HCD_GetCurrentSpeed>
 8014760:	4603      	mov	r3, r0
 8014762:	2b01      	cmp	r3, #1
 8014764:	d007      	beq.n	8014776 <USBH_LL_GetSpeed+0x2e>
 8014766:	2b01      	cmp	r3, #1
 8014768:	d302      	bcc.n	8014770 <USBH_LL_GetSpeed+0x28>
 801476a:	2b02      	cmp	r3, #2
 801476c:	d006      	beq.n	801477c <USBH_LL_GetSpeed+0x34>
 801476e:	e008      	b.n	8014782 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014770:	2300      	movs	r3, #0
 8014772:	73fb      	strb	r3, [r7, #15]
    break;
 8014774:	e008      	b.n	8014788 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8014776:	2301      	movs	r3, #1
 8014778:	73fb      	strb	r3, [r7, #15]
    break;
 801477a:	e005      	b.n	8014788 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801477c:	2302      	movs	r3, #2
 801477e:	73fb      	strb	r3, [r7, #15]
    break;
 8014780:	e002      	b.n	8014788 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8014782:	2301      	movs	r3, #1
 8014784:	73fb      	strb	r3, [r7, #15]
    break;
 8014786:	bf00      	nop
  }
  return  speed;
 8014788:	7bfb      	ldrb	r3, [r7, #15]
}
 801478a:	4618      	mov	r0, r3
 801478c:	3710      	adds	r7, #16
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
	...

08014794 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801479c:	2300      	movs	r3, #0
 801479e:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80147a0:	2300      	movs	r3, #0
 80147a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7ef f9be 	bl	8003b2c <HAL_HCD_ResetPort>
 80147b0:	4603      	mov	r3, r0
 80147b2:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 80147b4:	7bbb      	ldrb	r3, [r7, #14]
 80147b6:	2b03      	cmp	r3, #3
 80147b8:	d816      	bhi.n	80147e8 <USBH_LL_ResetPort+0x54>
 80147ba:	a201      	add	r2, pc, #4	; (adr r2, 80147c0 <USBH_LL_ResetPort+0x2c>)
 80147bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c0:	080147d1 	.word	0x080147d1
 80147c4:	080147d7 	.word	0x080147d7
 80147c8:	080147dd 	.word	0x080147dd
 80147cc:	080147e3 	.word	0x080147e3
    case HAL_OK :
      usb_status = USBH_OK;
 80147d0:	2300      	movs	r3, #0
 80147d2:	73fb      	strb	r3, [r7, #15]
    break;
 80147d4:	e00b      	b.n	80147ee <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80147d6:	2302      	movs	r3, #2
 80147d8:	73fb      	strb	r3, [r7, #15]
    break;
 80147da:	e008      	b.n	80147ee <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80147dc:	2301      	movs	r3, #1
 80147de:	73fb      	strb	r3, [r7, #15]
    break;
 80147e0:	e005      	b.n	80147ee <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80147e2:	2302      	movs	r3, #2
 80147e4:	73fb      	strb	r3, [r7, #15]
    break;
 80147e6:	e002      	b.n	80147ee <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 80147e8:	2302      	movs	r3, #2
 80147ea:	73fb      	strb	r3, [r7, #15]
    break;
 80147ec:	bf00      	nop
  }
  return usb_status;
 80147ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	3710      	adds	r7, #16
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}

080147f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	460b      	mov	r3, r1
 8014802:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801480a:	78fa      	ldrb	r2, [r7, #3]
 801480c:	4611      	mov	r1, r2
 801480e:	4618      	mov	r0, r3
 8014810:	f7ef f9af 	bl	8003b72 <HAL_HCD_HC_GetXferCount>
 8014814:	4603      	mov	r3, r0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3708      	adds	r7, #8
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
	...

08014820 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014820:	b590      	push	{r4, r7, lr}
 8014822:	b089      	sub	sp, #36	; 0x24
 8014824:	af04      	add	r7, sp, #16
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	4608      	mov	r0, r1
 801482a:	4611      	mov	r1, r2
 801482c:	461a      	mov	r2, r3
 801482e:	4603      	mov	r3, r0
 8014830:	70fb      	strb	r3, [r7, #3]
 8014832:	460b      	mov	r3, r1
 8014834:	70bb      	strb	r3, [r7, #2]
 8014836:	4613      	mov	r3, r2
 8014838:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801483a:	2300      	movs	r3, #0
 801483c:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801483e:	2300      	movs	r3, #0
 8014840:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 8014848:	787c      	ldrb	r4, [r7, #1]
 801484a:	78ba      	ldrb	r2, [r7, #2]
 801484c:	78f9      	ldrb	r1, [r7, #3]
 801484e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014850:	9302      	str	r3, [sp, #8]
 8014852:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014856:	9301      	str	r3, [sp, #4]
 8014858:	f897 3020 	ldrb.w	r3, [r7, #32]
 801485c:	9300      	str	r3, [sp, #0]
 801485e:	4623      	mov	r3, r4
 8014860:	f7ee fe07 	bl	8003472 <HAL_HCD_HC_Init>
 8014864:	4603      	mov	r3, r0
 8014866:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 8014868:	7bbb      	ldrb	r3, [r7, #14]
 801486a:	2b03      	cmp	r3, #3
 801486c:	d816      	bhi.n	801489c <USBH_LL_OpenPipe+0x7c>
 801486e:	a201      	add	r2, pc, #4	; (adr r2, 8014874 <USBH_LL_OpenPipe+0x54>)
 8014870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014874:	08014885 	.word	0x08014885
 8014878:	0801488b 	.word	0x0801488b
 801487c:	08014891 	.word	0x08014891
 8014880:	08014897 	.word	0x08014897
    case HAL_OK :
      usb_status = USBH_OK;
 8014884:	2300      	movs	r3, #0
 8014886:	73fb      	strb	r3, [r7, #15]
    break;
 8014888:	e00b      	b.n	80148a2 <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801488a:	2302      	movs	r3, #2
 801488c:	73fb      	strb	r3, [r7, #15]
    break;
 801488e:	e008      	b.n	80148a2 <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014890:	2301      	movs	r3, #1
 8014892:	73fb      	strb	r3, [r7, #15]
    break;
 8014894:	e005      	b.n	80148a2 <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014896:	2302      	movs	r3, #2
 8014898:	73fb      	strb	r3, [r7, #15]
    break;
 801489a:	e002      	b.n	80148a2 <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 801489c:	2302      	movs	r3, #2
 801489e:	73fb      	strb	r3, [r7, #15]
    break;
 80148a0:	bf00      	nop
  }
  return usb_status;
 80148a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3714      	adds	r7, #20
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd90      	pop	{r4, r7, pc}

080148ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	460b      	mov	r3, r1
 80148b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148b8:	2300      	movs	r3, #0
 80148ba:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80148bc:	2300      	movs	r3, #0
 80148be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80148c6:	78fa      	ldrb	r2, [r7, #3]
 80148c8:	4611      	mov	r1, r2
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7ee fe62 	bl	8003594 <HAL_HCD_HC_Halt>
 80148d0:	4603      	mov	r3, r0
 80148d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80148d4:	7bbb      	ldrb	r3, [r7, #14]
 80148d6:	2b03      	cmp	r3, #3
 80148d8:	d816      	bhi.n	8014908 <USBH_LL_ClosePipe+0x5c>
 80148da:	a201      	add	r2, pc, #4	; (adr r2, 80148e0 <USBH_LL_ClosePipe+0x34>)
 80148dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e0:	080148f1 	.word	0x080148f1
 80148e4:	080148f7 	.word	0x080148f7
 80148e8:	080148fd 	.word	0x080148fd
 80148ec:	08014903 	.word	0x08014903
    case HAL_OK :
      usb_status = USBH_OK;
 80148f0:	2300      	movs	r3, #0
 80148f2:	73fb      	strb	r3, [r7, #15]
    break;
 80148f4:	e00b      	b.n	801490e <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80148f6:	2302      	movs	r3, #2
 80148f8:	73fb      	strb	r3, [r7, #15]
    break;
 80148fa:	e008      	b.n	801490e <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80148fc:	2301      	movs	r3, #1
 80148fe:	73fb      	strb	r3, [r7, #15]
    break;
 8014900:	e005      	b.n	801490e <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014902:	2302      	movs	r3, #2
 8014904:	73fb      	strb	r3, [r7, #15]
    break;
 8014906:	e002      	b.n	801490e <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 8014908:	2302      	movs	r3, #2
 801490a:	73fb      	strb	r3, [r7, #15]
    break;
 801490c:	bf00      	nop
  }
  return usb_status;
 801490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014910:	4618      	mov	r0, r3
 8014912:	3710      	adds	r7, #16
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8014918:	b590      	push	{r4, r7, lr}
 801491a:	b089      	sub	sp, #36	; 0x24
 801491c:	af04      	add	r7, sp, #16
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	4608      	mov	r0, r1
 8014922:	4611      	mov	r1, r2
 8014924:	461a      	mov	r2, r3
 8014926:	4603      	mov	r3, r0
 8014928:	70fb      	strb	r3, [r7, #3]
 801492a:	460b      	mov	r3, r1
 801492c:	70bb      	strb	r3, [r7, #2]
 801492e:	4613      	mov	r3, r2
 8014930:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014932:	2300      	movs	r3, #0
 8014934:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014936:	2300      	movs	r3, #0
 8014938:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 8014940:	787c      	ldrb	r4, [r7, #1]
 8014942:	78ba      	ldrb	r2, [r7, #2]
 8014944:	78f9      	ldrb	r1, [r7, #3]
 8014946:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801494a:	9303      	str	r3, [sp, #12]
 801494c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801494e:	9302      	str	r3, [sp, #8]
 8014950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014952:	9301      	str	r3, [sp, #4]
 8014954:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014958:	9300      	str	r3, [sp, #0]
 801495a:	4623      	mov	r3, r4
 801495c:	f7ee fe3e 	bl	80035dc <HAL_HCD_HC_SubmitRequest>
 8014960:	4603      	mov	r3, r0
 8014962:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8014964:	7bbb      	ldrb	r3, [r7, #14]
 8014966:	2b03      	cmp	r3, #3
 8014968:	d816      	bhi.n	8014998 <USBH_LL_SubmitURB+0x80>
 801496a:	a201      	add	r2, pc, #4	; (adr r2, 8014970 <USBH_LL_SubmitURB+0x58>)
 801496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014970:	08014981 	.word	0x08014981
 8014974:	08014987 	.word	0x08014987
 8014978:	0801498d 	.word	0x0801498d
 801497c:	08014993 	.word	0x08014993
    case HAL_OK :
      usb_status = USBH_OK;
 8014980:	2300      	movs	r3, #0
 8014982:	73fb      	strb	r3, [r7, #15]
    break;
 8014984:	e00b      	b.n	801499e <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014986:	2302      	movs	r3, #2
 8014988:	73fb      	strb	r3, [r7, #15]
    break;
 801498a:	e008      	b.n	801499e <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801498c:	2301      	movs	r3, #1
 801498e:	73fb      	strb	r3, [r7, #15]
    break;
 8014990:	e005      	b.n	801499e <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014992:	2302      	movs	r3, #2
 8014994:	73fb      	strb	r3, [r7, #15]
    break;
 8014996:	e002      	b.n	801499e <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 8014998:	2302      	movs	r3, #2
 801499a:	73fb      	strb	r3, [r7, #15]
    break;
 801499c:	bf00      	nop
  }
  return usb_status;
 801499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3714      	adds	r7, #20
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd90      	pop	{r4, r7, pc}

080149a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b082      	sub	sp, #8
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	460b      	mov	r3, r1
 80149b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80149ba:	78fa      	ldrb	r2, [r7, #3]
 80149bc:	4611      	mov	r1, r2
 80149be:	4618      	mov	r0, r3
 80149c0:	f7ef f8c2 	bl	8003b48 <HAL_HCD_HC_GetURBState>
 80149c4:	4603      	mov	r3, r0
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	3708      	adds	r7, #8
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}

080149ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80149ce:	b580      	push	{r7, lr}
 80149d0:	b082      	sub	sp, #8
 80149d2:	af00      	add	r7, sp, #0
 80149d4:	6078      	str	r0, [r7, #4]
 80149d6:	460b      	mov	r3, r1
 80149d8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 80149da:	20c8      	movs	r0, #200	; 0xc8
 80149dc:	f7ed f86e 	bl	8001abc <HAL_Delay>
  return USBH_OK;
 80149e0:	2300      	movs	r3, #0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80149ea:	b480      	push	{r7}
 80149ec:	b085      	sub	sp, #20
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	460b      	mov	r3, r1
 80149f4:	70fb      	strb	r3, [r7, #3]
 80149f6:	4613      	mov	r3, r2
 80149f8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8014a00:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014a02:	78fa      	ldrb	r2, [r7, #3]
 8014a04:	68f9      	ldr	r1, [r7, #12]
 8014a06:	4613      	mov	r3, r2
 8014a08:	009b      	lsls	r3, r3, #2
 8014a0a:	4413      	add	r3, r2
 8014a0c:	00db      	lsls	r3, r3, #3
 8014a0e:	440b      	add	r3, r1
 8014a10:	333b      	adds	r3, #59	; 0x3b
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d00a      	beq.n	8014a2e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014a18:	78fa      	ldrb	r2, [r7, #3]
 8014a1a:	68f9      	ldr	r1, [r7, #12]
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	4413      	add	r3, r2
 8014a22:	00db      	lsls	r3, r3, #3
 8014a24:	440b      	add	r3, r1
 8014a26:	3350      	adds	r3, #80	; 0x50
 8014a28:	78ba      	ldrb	r2, [r7, #2]
 8014a2a:	701a      	strb	r2, [r3, #0]
 8014a2c:	e009      	b.n	8014a42 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8014a2e:	78fa      	ldrb	r2, [r7, #3]
 8014a30:	68f9      	ldr	r1, [r7, #12]
 8014a32:	4613      	mov	r3, r2
 8014a34:	009b      	lsls	r3, r3, #2
 8014a36:	4413      	add	r3, r2
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	440b      	add	r3, r1
 8014a3c:	3351      	adds	r3, #81	; 0x51
 8014a3e:	78ba      	ldrb	r2, [r7, #2]
 8014a40:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8014a42:	2300      	movs	r3, #0
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3714      	adds	r7, #20
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4e:	4770      	bx	lr

08014a50 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014a50:	b480      	push	{r7}
 8014a52:	b085      	sub	sp, #20
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	460b      	mov	r3, r1
 8014a5a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8014a66:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8014a68:	78fa      	ldrb	r2, [r7, #3]
 8014a6a:	68b9      	ldr	r1, [r7, #8]
 8014a6c:	4613      	mov	r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	4413      	add	r3, r2
 8014a72:	00db      	lsls	r3, r3, #3
 8014a74:	440b      	add	r3, r1
 8014a76:	333b      	adds	r3, #59	; 0x3b
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00a      	beq.n	8014a94 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8014a7e:	78fa      	ldrb	r2, [r7, #3]
 8014a80:	68b9      	ldr	r1, [r7, #8]
 8014a82:	4613      	mov	r3, r2
 8014a84:	009b      	lsls	r3, r3, #2
 8014a86:	4413      	add	r3, r2
 8014a88:	00db      	lsls	r3, r3, #3
 8014a8a:	440b      	add	r3, r1
 8014a8c:	3350      	adds	r3, #80	; 0x50
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	73fb      	strb	r3, [r7, #15]
 8014a92:	e009      	b.n	8014aa8 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8014a94:	78fa      	ldrb	r2, [r7, #3]
 8014a96:	68b9      	ldr	r1, [r7, #8]
 8014a98:	4613      	mov	r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	440b      	add	r3, r1
 8014aa2:	3351      	adds	r3, #81	; 0x51
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8014aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3714      	adds	r7, #20
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr

08014ab6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8014ab6:	b580      	push	{r7, lr}
 8014ab8:	b082      	sub	sp, #8
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f7ec fffc 	bl	8001abc <HAL_Delay>
}
 8014ac4:	bf00      	nop
 8014ac6:	3708      	adds	r7, #8
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}

08014acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8014acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014ad2:	e003      	b.n	8014adc <LoopCopyDataInit>

08014ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014ad4:	4b0c      	ldr	r3, [pc, #48]	; (8014b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8014ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014ada:	3104      	adds	r1, #4

08014adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014adc:	480b      	ldr	r0, [pc, #44]	; (8014b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014ade:	4b0c      	ldr	r3, [pc, #48]	; (8014b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014ae4:	d3f6      	bcc.n	8014ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8014ae6:	4a0b      	ldr	r2, [pc, #44]	; (8014b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014ae8:	e002      	b.n	8014af0 <LoopFillZerobss>

08014aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014aec:	f842 3b04 	str.w	r3, [r2], #4

08014af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014af0:	4b09      	ldr	r3, [pc, #36]	; (8014b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014af4:	d3f9      	bcc.n	8014aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8014af6:	f7ff fc4b 	bl	8014390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014afa:	f000 f8db 	bl	8014cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014afe:	f7fd f8fd 	bl	8011cfc <main>
  bx  lr    
 8014b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8014b04:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8014b08:	08018f5c 	.word	0x08018f5c
  ldr  r0, =_sdata
 8014b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014b10:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8014b14:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8014b18:	20010b50 	.word	0x20010b50

08014b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014b1c:	e7fe      	b.n	8014b1c <ADC_IRQHandler>
	...

08014b20 <_cleanup_r>:
 8014b20:	4901      	ldr	r1, [pc, #4]	; (8014b28 <_cleanup_r+0x8>)
 8014b22:	f000 b8a9 	b.w	8014c78 <_fwalk_reent>
 8014b26:	bf00      	nop
 8014b28:	08015559 	.word	0x08015559

08014b2c <std.isra.0>:
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	b510      	push	{r4, lr}
 8014b30:	4604      	mov	r4, r0
 8014b32:	6003      	str	r3, [r0, #0]
 8014b34:	6043      	str	r3, [r0, #4]
 8014b36:	6083      	str	r3, [r0, #8]
 8014b38:	8181      	strh	r1, [r0, #12]
 8014b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8014b3c:	81c2      	strh	r2, [r0, #14]
 8014b3e:	6103      	str	r3, [r0, #16]
 8014b40:	6143      	str	r3, [r0, #20]
 8014b42:	6183      	str	r3, [r0, #24]
 8014b44:	4619      	mov	r1, r3
 8014b46:	2208      	movs	r2, #8
 8014b48:	305c      	adds	r0, #92	; 0x5c
 8014b4a:	f000 f908 	bl	8014d5e <memset>
 8014b4e:	4b05      	ldr	r3, [pc, #20]	; (8014b64 <std.isra.0+0x38>)
 8014b50:	6263      	str	r3, [r4, #36]	; 0x24
 8014b52:	4b05      	ldr	r3, [pc, #20]	; (8014b68 <std.isra.0+0x3c>)
 8014b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b56:	4b05      	ldr	r3, [pc, #20]	; (8014b6c <std.isra.0+0x40>)
 8014b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b5a:	4b05      	ldr	r3, [pc, #20]	; (8014b70 <std.isra.0+0x44>)
 8014b5c:	6224      	str	r4, [r4, #32]
 8014b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8014b60:	bd10      	pop	{r4, pc}
 8014b62:	bf00      	nop
 8014b64:	080150b5 	.word	0x080150b5
 8014b68:	080150d7 	.word	0x080150d7
 8014b6c:	0801510f 	.word	0x0801510f
 8014b70:	08015133 	.word	0x08015133

08014b74 <__sfmoreglue>:
 8014b74:	b570      	push	{r4, r5, r6, lr}
 8014b76:	1e4a      	subs	r2, r1, #1
 8014b78:	2568      	movs	r5, #104	; 0x68
 8014b7a:	4355      	muls	r5, r2
 8014b7c:	460e      	mov	r6, r1
 8014b7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b82:	f000 f943 	bl	8014e0c <_malloc_r>
 8014b86:	4604      	mov	r4, r0
 8014b88:	b140      	cbz	r0, 8014b9c <__sfmoreglue+0x28>
 8014b8a:	2100      	movs	r1, #0
 8014b8c:	e880 0042 	stmia.w	r0, {r1, r6}
 8014b90:	300c      	adds	r0, #12
 8014b92:	60a0      	str	r0, [r4, #8]
 8014b94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b98:	f000 f8e1 	bl	8014d5e <memset>
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	bd70      	pop	{r4, r5, r6, pc}

08014ba0 <__sinit>:
 8014ba0:	6983      	ldr	r3, [r0, #24]
 8014ba2:	b510      	push	{r4, lr}
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	bb33      	cbnz	r3, 8014bf6 <__sinit+0x56>
 8014ba8:	6483      	str	r3, [r0, #72]	; 0x48
 8014baa:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014bac:	6503      	str	r3, [r0, #80]	; 0x50
 8014bae:	4b12      	ldr	r3, [pc, #72]	; (8014bf8 <__sinit+0x58>)
 8014bb0:	4a12      	ldr	r2, [pc, #72]	; (8014bfc <__sinit+0x5c>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	6282      	str	r2, [r0, #40]	; 0x28
 8014bb6:	4298      	cmp	r0, r3
 8014bb8:	bf04      	itt	eq
 8014bba:	2301      	moveq	r3, #1
 8014bbc:	6183      	streq	r3, [r0, #24]
 8014bbe:	f000 f81f 	bl	8014c00 <__sfp>
 8014bc2:	6060      	str	r0, [r4, #4]
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	f000 f81b 	bl	8014c00 <__sfp>
 8014bca:	60a0      	str	r0, [r4, #8]
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f000 f817 	bl	8014c00 <__sfp>
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	60e0      	str	r0, [r4, #12]
 8014bd6:	2104      	movs	r1, #4
 8014bd8:	6860      	ldr	r0, [r4, #4]
 8014bda:	f7ff ffa7 	bl	8014b2c <std.isra.0>
 8014bde:	2201      	movs	r2, #1
 8014be0:	2109      	movs	r1, #9
 8014be2:	68a0      	ldr	r0, [r4, #8]
 8014be4:	f7ff ffa2 	bl	8014b2c <std.isra.0>
 8014be8:	2202      	movs	r2, #2
 8014bea:	2112      	movs	r1, #18
 8014bec:	68e0      	ldr	r0, [r4, #12]
 8014bee:	f7ff ff9d 	bl	8014b2c <std.isra.0>
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	61a3      	str	r3, [r4, #24]
 8014bf6:	bd10      	pop	{r4, pc}
 8014bf8:	08018e08 	.word	0x08018e08
 8014bfc:	08014b21 	.word	0x08014b21

08014c00 <__sfp>:
 8014c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c02:	4b1c      	ldr	r3, [pc, #112]	; (8014c74 <__sfp+0x74>)
 8014c04:	681e      	ldr	r6, [r3, #0]
 8014c06:	69b3      	ldr	r3, [r6, #24]
 8014c08:	4607      	mov	r7, r0
 8014c0a:	b913      	cbnz	r3, 8014c12 <__sfp+0x12>
 8014c0c:	4630      	mov	r0, r6
 8014c0e:	f7ff ffc7 	bl	8014ba0 <__sinit>
 8014c12:	3648      	adds	r6, #72	; 0x48
 8014c14:	68b4      	ldr	r4, [r6, #8]
 8014c16:	6873      	ldr	r3, [r6, #4]
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	d503      	bpl.n	8014c24 <__sfp+0x24>
 8014c1c:	6833      	ldr	r3, [r6, #0]
 8014c1e:	b133      	cbz	r3, 8014c2e <__sfp+0x2e>
 8014c20:	6836      	ldr	r6, [r6, #0]
 8014c22:	e7f7      	b.n	8014c14 <__sfp+0x14>
 8014c24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c28:	b16d      	cbz	r5, 8014c46 <__sfp+0x46>
 8014c2a:	3468      	adds	r4, #104	; 0x68
 8014c2c:	e7f4      	b.n	8014c18 <__sfp+0x18>
 8014c2e:	2104      	movs	r1, #4
 8014c30:	4638      	mov	r0, r7
 8014c32:	f7ff ff9f 	bl	8014b74 <__sfmoreglue>
 8014c36:	6030      	str	r0, [r6, #0]
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	d1f1      	bne.n	8014c20 <__sfp+0x20>
 8014c3c:	230c      	movs	r3, #12
 8014c3e:	603b      	str	r3, [r7, #0]
 8014c40:	4604      	mov	r4, r0
 8014c42:	4620      	mov	r0, r4
 8014c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c4a:	81e3      	strh	r3, [r4, #14]
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	81a3      	strh	r3, [r4, #12]
 8014c50:	6665      	str	r5, [r4, #100]	; 0x64
 8014c52:	6025      	str	r5, [r4, #0]
 8014c54:	60a5      	str	r5, [r4, #8]
 8014c56:	6065      	str	r5, [r4, #4]
 8014c58:	6125      	str	r5, [r4, #16]
 8014c5a:	6165      	str	r5, [r4, #20]
 8014c5c:	61a5      	str	r5, [r4, #24]
 8014c5e:	2208      	movs	r2, #8
 8014c60:	4629      	mov	r1, r5
 8014c62:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c66:	f000 f87a 	bl	8014d5e <memset>
 8014c6a:	6365      	str	r5, [r4, #52]	; 0x34
 8014c6c:	63a5      	str	r5, [r4, #56]	; 0x38
 8014c6e:	64a5      	str	r5, [r4, #72]	; 0x48
 8014c70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8014c72:	e7e6      	b.n	8014c42 <__sfp+0x42>
 8014c74:	08018e08 	.word	0x08018e08

08014c78 <_fwalk_reent>:
 8014c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c7c:	4680      	mov	r8, r0
 8014c7e:	4689      	mov	r9, r1
 8014c80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c84:	2600      	movs	r6, #0
 8014c86:	b914      	cbnz	r4, 8014c8e <_fwalk_reent+0x16>
 8014c88:	4630      	mov	r0, r6
 8014c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c8e:	68a5      	ldr	r5, [r4, #8]
 8014c90:	6867      	ldr	r7, [r4, #4]
 8014c92:	3f01      	subs	r7, #1
 8014c94:	d501      	bpl.n	8014c9a <_fwalk_reent+0x22>
 8014c96:	6824      	ldr	r4, [r4, #0]
 8014c98:	e7f5      	b.n	8014c86 <_fwalk_reent+0xe>
 8014c9a:	89ab      	ldrh	r3, [r5, #12]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d907      	bls.n	8014cb0 <_fwalk_reent+0x38>
 8014ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	d003      	beq.n	8014cb0 <_fwalk_reent+0x38>
 8014ca8:	4629      	mov	r1, r5
 8014caa:	4640      	mov	r0, r8
 8014cac:	47c8      	blx	r9
 8014cae:	4306      	orrs	r6, r0
 8014cb0:	3568      	adds	r5, #104	; 0x68
 8014cb2:	e7ee      	b.n	8014c92 <_fwalk_reent+0x1a>

08014cb4 <__libc_init_array>:
 8014cb4:	b570      	push	{r4, r5, r6, lr}
 8014cb6:	4e0d      	ldr	r6, [pc, #52]	; (8014cec <__libc_init_array+0x38>)
 8014cb8:	4c0d      	ldr	r4, [pc, #52]	; (8014cf0 <__libc_init_array+0x3c>)
 8014cba:	1ba4      	subs	r4, r4, r6
 8014cbc:	10a4      	asrs	r4, r4, #2
 8014cbe:	2500      	movs	r5, #0
 8014cc0:	42a5      	cmp	r5, r4
 8014cc2:	d109      	bne.n	8014cd8 <__libc_init_array+0x24>
 8014cc4:	4e0b      	ldr	r6, [pc, #44]	; (8014cf4 <__libc_init_array+0x40>)
 8014cc6:	4c0c      	ldr	r4, [pc, #48]	; (8014cf8 <__libc_init_array+0x44>)
 8014cc8:	f001 f820 	bl	8015d0c <_init>
 8014ccc:	1ba4      	subs	r4, r4, r6
 8014cce:	10a4      	asrs	r4, r4, #2
 8014cd0:	2500      	movs	r5, #0
 8014cd2:	42a5      	cmp	r5, r4
 8014cd4:	d105      	bne.n	8014ce2 <__libc_init_array+0x2e>
 8014cd6:	bd70      	pop	{r4, r5, r6, pc}
 8014cd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014cdc:	4798      	blx	r3
 8014cde:	3501      	adds	r5, #1
 8014ce0:	e7ee      	b.n	8014cc0 <__libc_init_array+0xc>
 8014ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014ce6:	4798      	blx	r3
 8014ce8:	3501      	adds	r5, #1
 8014cea:	e7f2      	b.n	8014cd2 <__libc_init_array+0x1e>
 8014cec:	08018f54 	.word	0x08018f54
 8014cf0:	08018f54 	.word	0x08018f54
 8014cf4:	08018f54 	.word	0x08018f54
 8014cf8:	08018f58 	.word	0x08018f58

08014cfc <__locale_ctype_ptr_l>:
 8014cfc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014d00:	4770      	bx	lr
	...

08014d04 <malloc>:
 8014d04:	4b02      	ldr	r3, [pc, #8]	; (8014d10 <malloc+0xc>)
 8014d06:	4601      	mov	r1, r0
 8014d08:	6818      	ldr	r0, [r3, #0]
 8014d0a:	f000 b87f 	b.w	8014e0c <_malloc_r>
 8014d0e:	bf00      	nop
 8014d10:	20000040 	.word	0x20000040

08014d14 <free>:
 8014d14:	4b02      	ldr	r3, [pc, #8]	; (8014d20 <free+0xc>)
 8014d16:	4601      	mov	r1, r0
 8014d18:	6818      	ldr	r0, [r3, #0]
 8014d1a:	f000 b829 	b.w	8014d70 <_free_r>
 8014d1e:	bf00      	nop
 8014d20:	20000040 	.word	0x20000040

08014d24 <__ascii_mbtowc>:
 8014d24:	b082      	sub	sp, #8
 8014d26:	b901      	cbnz	r1, 8014d2a <__ascii_mbtowc+0x6>
 8014d28:	a901      	add	r1, sp, #4
 8014d2a:	b142      	cbz	r2, 8014d3e <__ascii_mbtowc+0x1a>
 8014d2c:	b14b      	cbz	r3, 8014d42 <__ascii_mbtowc+0x1e>
 8014d2e:	7813      	ldrb	r3, [r2, #0]
 8014d30:	600b      	str	r3, [r1, #0]
 8014d32:	7812      	ldrb	r2, [r2, #0]
 8014d34:	1c10      	adds	r0, r2, #0
 8014d36:	bf18      	it	ne
 8014d38:	2001      	movne	r0, #1
 8014d3a:	b002      	add	sp, #8
 8014d3c:	4770      	bx	lr
 8014d3e:	4610      	mov	r0, r2
 8014d40:	e7fb      	b.n	8014d3a <__ascii_mbtowc+0x16>
 8014d42:	f06f 0001 	mvn.w	r0, #1
 8014d46:	e7f8      	b.n	8014d3a <__ascii_mbtowc+0x16>

08014d48 <memcpy>:
 8014d48:	b510      	push	{r4, lr}
 8014d4a:	1e43      	subs	r3, r0, #1
 8014d4c:	440a      	add	r2, r1
 8014d4e:	4291      	cmp	r1, r2
 8014d50:	d100      	bne.n	8014d54 <memcpy+0xc>
 8014d52:	bd10      	pop	{r4, pc}
 8014d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d5c:	e7f7      	b.n	8014d4e <memcpy+0x6>

08014d5e <memset>:
 8014d5e:	4402      	add	r2, r0
 8014d60:	4603      	mov	r3, r0
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d100      	bne.n	8014d68 <memset+0xa>
 8014d66:	4770      	bx	lr
 8014d68:	f803 1b01 	strb.w	r1, [r3], #1
 8014d6c:	e7f9      	b.n	8014d62 <memset+0x4>
	...

08014d70 <_free_r>:
 8014d70:	b538      	push	{r3, r4, r5, lr}
 8014d72:	4605      	mov	r5, r0
 8014d74:	2900      	cmp	r1, #0
 8014d76:	d045      	beq.n	8014e04 <_free_r+0x94>
 8014d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d7c:	1f0c      	subs	r4, r1, #4
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	bfb8      	it	lt
 8014d82:	18e4      	addlt	r4, r4, r3
 8014d84:	f000 fc88 	bl	8015698 <__malloc_lock>
 8014d88:	4a1f      	ldr	r2, [pc, #124]	; (8014e08 <_free_r+0x98>)
 8014d8a:	6813      	ldr	r3, [r2, #0]
 8014d8c:	4610      	mov	r0, r2
 8014d8e:	b933      	cbnz	r3, 8014d9e <_free_r+0x2e>
 8014d90:	6063      	str	r3, [r4, #4]
 8014d92:	6014      	str	r4, [r2, #0]
 8014d94:	4628      	mov	r0, r5
 8014d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d9a:	f000 bc7e 	b.w	801569a <__malloc_unlock>
 8014d9e:	42a3      	cmp	r3, r4
 8014da0:	d90c      	bls.n	8014dbc <_free_r+0x4c>
 8014da2:	6821      	ldr	r1, [r4, #0]
 8014da4:	1862      	adds	r2, r4, r1
 8014da6:	4293      	cmp	r3, r2
 8014da8:	bf04      	itt	eq
 8014daa:	681a      	ldreq	r2, [r3, #0]
 8014dac:	685b      	ldreq	r3, [r3, #4]
 8014dae:	6063      	str	r3, [r4, #4]
 8014db0:	bf04      	itt	eq
 8014db2:	1852      	addeq	r2, r2, r1
 8014db4:	6022      	streq	r2, [r4, #0]
 8014db6:	6004      	str	r4, [r0, #0]
 8014db8:	e7ec      	b.n	8014d94 <_free_r+0x24>
 8014dba:	4613      	mov	r3, r2
 8014dbc:	685a      	ldr	r2, [r3, #4]
 8014dbe:	b10a      	cbz	r2, 8014dc4 <_free_r+0x54>
 8014dc0:	42a2      	cmp	r2, r4
 8014dc2:	d9fa      	bls.n	8014dba <_free_r+0x4a>
 8014dc4:	6819      	ldr	r1, [r3, #0]
 8014dc6:	1858      	adds	r0, r3, r1
 8014dc8:	42a0      	cmp	r0, r4
 8014dca:	d10b      	bne.n	8014de4 <_free_r+0x74>
 8014dcc:	6820      	ldr	r0, [r4, #0]
 8014dce:	4401      	add	r1, r0
 8014dd0:	1858      	adds	r0, r3, r1
 8014dd2:	4282      	cmp	r2, r0
 8014dd4:	6019      	str	r1, [r3, #0]
 8014dd6:	d1dd      	bne.n	8014d94 <_free_r+0x24>
 8014dd8:	6810      	ldr	r0, [r2, #0]
 8014dda:	6852      	ldr	r2, [r2, #4]
 8014ddc:	605a      	str	r2, [r3, #4]
 8014dde:	4401      	add	r1, r0
 8014de0:	6019      	str	r1, [r3, #0]
 8014de2:	e7d7      	b.n	8014d94 <_free_r+0x24>
 8014de4:	d902      	bls.n	8014dec <_free_r+0x7c>
 8014de6:	230c      	movs	r3, #12
 8014de8:	602b      	str	r3, [r5, #0]
 8014dea:	e7d3      	b.n	8014d94 <_free_r+0x24>
 8014dec:	6820      	ldr	r0, [r4, #0]
 8014dee:	1821      	adds	r1, r4, r0
 8014df0:	428a      	cmp	r2, r1
 8014df2:	bf04      	itt	eq
 8014df4:	6811      	ldreq	r1, [r2, #0]
 8014df6:	6852      	ldreq	r2, [r2, #4]
 8014df8:	6062      	str	r2, [r4, #4]
 8014dfa:	bf04      	itt	eq
 8014dfc:	1809      	addeq	r1, r1, r0
 8014dfe:	6021      	streq	r1, [r4, #0]
 8014e00:	605c      	str	r4, [r3, #4]
 8014e02:	e7c7      	b.n	8014d94 <_free_r+0x24>
 8014e04:	bd38      	pop	{r3, r4, r5, pc}
 8014e06:	bf00      	nop
 8014e08:	2000f4dc 	.word	0x2000f4dc

08014e0c <_malloc_r>:
 8014e0c:	b570      	push	{r4, r5, r6, lr}
 8014e0e:	1ccd      	adds	r5, r1, #3
 8014e10:	f025 0503 	bic.w	r5, r5, #3
 8014e14:	3508      	adds	r5, #8
 8014e16:	2d0c      	cmp	r5, #12
 8014e18:	bf38      	it	cc
 8014e1a:	250c      	movcc	r5, #12
 8014e1c:	2d00      	cmp	r5, #0
 8014e1e:	4606      	mov	r6, r0
 8014e20:	db01      	blt.n	8014e26 <_malloc_r+0x1a>
 8014e22:	42a9      	cmp	r1, r5
 8014e24:	d903      	bls.n	8014e2e <_malloc_r+0x22>
 8014e26:	230c      	movs	r3, #12
 8014e28:	6033      	str	r3, [r6, #0]
 8014e2a:	2000      	movs	r0, #0
 8014e2c:	bd70      	pop	{r4, r5, r6, pc}
 8014e2e:	f000 fc33 	bl	8015698 <__malloc_lock>
 8014e32:	4a23      	ldr	r2, [pc, #140]	; (8014ec0 <_malloc_r+0xb4>)
 8014e34:	6814      	ldr	r4, [r2, #0]
 8014e36:	4621      	mov	r1, r4
 8014e38:	b991      	cbnz	r1, 8014e60 <_malloc_r+0x54>
 8014e3a:	4c22      	ldr	r4, [pc, #136]	; (8014ec4 <_malloc_r+0xb8>)
 8014e3c:	6823      	ldr	r3, [r4, #0]
 8014e3e:	b91b      	cbnz	r3, 8014e48 <_malloc_r+0x3c>
 8014e40:	4630      	mov	r0, r6
 8014e42:	f000 f927 	bl	8015094 <_sbrk_r>
 8014e46:	6020      	str	r0, [r4, #0]
 8014e48:	4629      	mov	r1, r5
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	f000 f922 	bl	8015094 <_sbrk_r>
 8014e50:	1c43      	adds	r3, r0, #1
 8014e52:	d126      	bne.n	8014ea2 <_malloc_r+0x96>
 8014e54:	230c      	movs	r3, #12
 8014e56:	6033      	str	r3, [r6, #0]
 8014e58:	4630      	mov	r0, r6
 8014e5a:	f000 fc1e 	bl	801569a <__malloc_unlock>
 8014e5e:	e7e4      	b.n	8014e2a <_malloc_r+0x1e>
 8014e60:	680b      	ldr	r3, [r1, #0]
 8014e62:	1b5b      	subs	r3, r3, r5
 8014e64:	d41a      	bmi.n	8014e9c <_malloc_r+0x90>
 8014e66:	2b0b      	cmp	r3, #11
 8014e68:	d90f      	bls.n	8014e8a <_malloc_r+0x7e>
 8014e6a:	600b      	str	r3, [r1, #0]
 8014e6c:	50cd      	str	r5, [r1, r3]
 8014e6e:	18cc      	adds	r4, r1, r3
 8014e70:	4630      	mov	r0, r6
 8014e72:	f000 fc12 	bl	801569a <__malloc_unlock>
 8014e76:	f104 000b 	add.w	r0, r4, #11
 8014e7a:	1d23      	adds	r3, r4, #4
 8014e7c:	f020 0007 	bic.w	r0, r0, #7
 8014e80:	1ac3      	subs	r3, r0, r3
 8014e82:	d01b      	beq.n	8014ebc <_malloc_r+0xb0>
 8014e84:	425a      	negs	r2, r3
 8014e86:	50e2      	str	r2, [r4, r3]
 8014e88:	bd70      	pop	{r4, r5, r6, pc}
 8014e8a:	428c      	cmp	r4, r1
 8014e8c:	bf0d      	iteet	eq
 8014e8e:	6863      	ldreq	r3, [r4, #4]
 8014e90:	684b      	ldrne	r3, [r1, #4]
 8014e92:	6063      	strne	r3, [r4, #4]
 8014e94:	6013      	streq	r3, [r2, #0]
 8014e96:	bf18      	it	ne
 8014e98:	460c      	movne	r4, r1
 8014e9a:	e7e9      	b.n	8014e70 <_malloc_r+0x64>
 8014e9c:	460c      	mov	r4, r1
 8014e9e:	6849      	ldr	r1, [r1, #4]
 8014ea0:	e7ca      	b.n	8014e38 <_malloc_r+0x2c>
 8014ea2:	1cc4      	adds	r4, r0, #3
 8014ea4:	f024 0403 	bic.w	r4, r4, #3
 8014ea8:	42a0      	cmp	r0, r4
 8014eaa:	d005      	beq.n	8014eb8 <_malloc_r+0xac>
 8014eac:	1a21      	subs	r1, r4, r0
 8014eae:	4630      	mov	r0, r6
 8014eb0:	f000 f8f0 	bl	8015094 <_sbrk_r>
 8014eb4:	3001      	adds	r0, #1
 8014eb6:	d0cd      	beq.n	8014e54 <_malloc_r+0x48>
 8014eb8:	6025      	str	r5, [r4, #0]
 8014eba:	e7d9      	b.n	8014e70 <_malloc_r+0x64>
 8014ebc:	bd70      	pop	{r4, r5, r6, pc}
 8014ebe:	bf00      	nop
 8014ec0:	2000f4dc 	.word	0x2000f4dc
 8014ec4:	2000f4e0 	.word	0x2000f4e0

08014ec8 <iprintf>:
 8014ec8:	b40f      	push	{r0, r1, r2, r3}
 8014eca:	4b0a      	ldr	r3, [pc, #40]	; (8014ef4 <iprintf+0x2c>)
 8014ecc:	b513      	push	{r0, r1, r4, lr}
 8014ece:	681c      	ldr	r4, [r3, #0]
 8014ed0:	b124      	cbz	r4, 8014edc <iprintf+0x14>
 8014ed2:	69a3      	ldr	r3, [r4, #24]
 8014ed4:	b913      	cbnz	r3, 8014edc <iprintf+0x14>
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f7ff fe62 	bl	8014ba0 <__sinit>
 8014edc:	ab05      	add	r3, sp, #20
 8014ede:	9a04      	ldr	r2, [sp, #16]
 8014ee0:	68a1      	ldr	r1, [r4, #8]
 8014ee2:	9301      	str	r3, [sp, #4]
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	f000 fc03 	bl	80156f0 <_vfiprintf_r>
 8014eea:	b002      	add	sp, #8
 8014eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ef0:	b004      	add	sp, #16
 8014ef2:	4770      	bx	lr
 8014ef4:	20000040 	.word	0x20000040

08014ef8 <_puts_r>:
 8014ef8:	b570      	push	{r4, r5, r6, lr}
 8014efa:	460e      	mov	r6, r1
 8014efc:	4605      	mov	r5, r0
 8014efe:	b118      	cbz	r0, 8014f08 <_puts_r+0x10>
 8014f00:	6983      	ldr	r3, [r0, #24]
 8014f02:	b90b      	cbnz	r3, 8014f08 <_puts_r+0x10>
 8014f04:	f7ff fe4c 	bl	8014ba0 <__sinit>
 8014f08:	69ab      	ldr	r3, [r5, #24]
 8014f0a:	68ac      	ldr	r4, [r5, #8]
 8014f0c:	b913      	cbnz	r3, 8014f14 <_puts_r+0x1c>
 8014f0e:	4628      	mov	r0, r5
 8014f10:	f7ff fe46 	bl	8014ba0 <__sinit>
 8014f14:	4b23      	ldr	r3, [pc, #140]	; (8014fa4 <_puts_r+0xac>)
 8014f16:	429c      	cmp	r4, r3
 8014f18:	d117      	bne.n	8014f4a <_puts_r+0x52>
 8014f1a:	686c      	ldr	r4, [r5, #4]
 8014f1c:	89a3      	ldrh	r3, [r4, #12]
 8014f1e:	071b      	lsls	r3, r3, #28
 8014f20:	d51d      	bpl.n	8014f5e <_puts_r+0x66>
 8014f22:	6923      	ldr	r3, [r4, #16]
 8014f24:	b1db      	cbz	r3, 8014f5e <_puts_r+0x66>
 8014f26:	3e01      	subs	r6, #1
 8014f28:	68a3      	ldr	r3, [r4, #8]
 8014f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014f2e:	3b01      	subs	r3, #1
 8014f30:	60a3      	str	r3, [r4, #8]
 8014f32:	b9e9      	cbnz	r1, 8014f70 <_puts_r+0x78>
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	da2e      	bge.n	8014f96 <_puts_r+0x9e>
 8014f38:	4622      	mov	r2, r4
 8014f3a:	210a      	movs	r1, #10
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	f000 f993 	bl	8015268 <__swbuf_r>
 8014f42:	3001      	adds	r0, #1
 8014f44:	d011      	beq.n	8014f6a <_puts_r+0x72>
 8014f46:	200a      	movs	r0, #10
 8014f48:	bd70      	pop	{r4, r5, r6, pc}
 8014f4a:	4b17      	ldr	r3, [pc, #92]	; (8014fa8 <_puts_r+0xb0>)
 8014f4c:	429c      	cmp	r4, r3
 8014f4e:	d101      	bne.n	8014f54 <_puts_r+0x5c>
 8014f50:	68ac      	ldr	r4, [r5, #8]
 8014f52:	e7e3      	b.n	8014f1c <_puts_r+0x24>
 8014f54:	4b15      	ldr	r3, [pc, #84]	; (8014fac <_puts_r+0xb4>)
 8014f56:	429c      	cmp	r4, r3
 8014f58:	bf08      	it	eq
 8014f5a:	68ec      	ldreq	r4, [r5, #12]
 8014f5c:	e7de      	b.n	8014f1c <_puts_r+0x24>
 8014f5e:	4621      	mov	r1, r4
 8014f60:	4628      	mov	r0, r5
 8014f62:	f000 f9f3 	bl	801534c <__swsetup_r>
 8014f66:	2800      	cmp	r0, #0
 8014f68:	d0dd      	beq.n	8014f26 <_puts_r+0x2e>
 8014f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f6e:	bd70      	pop	{r4, r5, r6, pc}
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	da04      	bge.n	8014f7e <_puts_r+0x86>
 8014f74:	69a2      	ldr	r2, [r4, #24]
 8014f76:	4293      	cmp	r3, r2
 8014f78:	db06      	blt.n	8014f88 <_puts_r+0x90>
 8014f7a:	290a      	cmp	r1, #10
 8014f7c:	d004      	beq.n	8014f88 <_puts_r+0x90>
 8014f7e:	6823      	ldr	r3, [r4, #0]
 8014f80:	1c5a      	adds	r2, r3, #1
 8014f82:	6022      	str	r2, [r4, #0]
 8014f84:	7019      	strb	r1, [r3, #0]
 8014f86:	e7cf      	b.n	8014f28 <_puts_r+0x30>
 8014f88:	4622      	mov	r2, r4
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	f000 f96c 	bl	8015268 <__swbuf_r>
 8014f90:	3001      	adds	r0, #1
 8014f92:	d1c9      	bne.n	8014f28 <_puts_r+0x30>
 8014f94:	e7e9      	b.n	8014f6a <_puts_r+0x72>
 8014f96:	6823      	ldr	r3, [r4, #0]
 8014f98:	200a      	movs	r0, #10
 8014f9a:	1c5a      	adds	r2, r3, #1
 8014f9c:	6022      	str	r2, [r4, #0]
 8014f9e:	7018      	strb	r0, [r3, #0]
 8014fa0:	bd70      	pop	{r4, r5, r6, pc}
 8014fa2:	bf00      	nop
 8014fa4:	08018dc8 	.word	0x08018dc8
 8014fa8:	08018de8 	.word	0x08018de8
 8014fac:	08018da8 	.word	0x08018da8

08014fb0 <puts>:
 8014fb0:	4b02      	ldr	r3, [pc, #8]	; (8014fbc <puts+0xc>)
 8014fb2:	4601      	mov	r1, r0
 8014fb4:	6818      	ldr	r0, [r3, #0]
 8014fb6:	f7ff bf9f 	b.w	8014ef8 <_puts_r>
 8014fba:	bf00      	nop
 8014fbc:	20000040 	.word	0x20000040

08014fc0 <cleanup_glue>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	460c      	mov	r4, r1
 8014fc4:	6809      	ldr	r1, [r1, #0]
 8014fc6:	4605      	mov	r5, r0
 8014fc8:	b109      	cbz	r1, 8014fce <cleanup_glue+0xe>
 8014fca:	f7ff fff9 	bl	8014fc0 <cleanup_glue>
 8014fce:	4621      	mov	r1, r4
 8014fd0:	4628      	mov	r0, r5
 8014fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fd6:	f7ff becb 	b.w	8014d70 <_free_r>
	...

08014fdc <_reclaim_reent>:
 8014fdc:	4b2c      	ldr	r3, [pc, #176]	; (8015090 <_reclaim_reent+0xb4>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4283      	cmp	r3, r0
 8014fe2:	b570      	push	{r4, r5, r6, lr}
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	d051      	beq.n	801508c <_reclaim_reent+0xb0>
 8014fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014fea:	b1ab      	cbz	r3, 8015018 <_reclaim_reent+0x3c>
 8014fec:	68db      	ldr	r3, [r3, #12]
 8014fee:	b16b      	cbz	r3, 801500c <_reclaim_reent+0x30>
 8014ff0:	2500      	movs	r5, #0
 8014ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	5959      	ldr	r1, [r3, r5]
 8014ff8:	2900      	cmp	r1, #0
 8014ffa:	d141      	bne.n	8015080 <_reclaim_reent+0xa4>
 8014ffc:	3504      	adds	r5, #4
 8014ffe:	2d80      	cmp	r5, #128	; 0x80
 8015000:	d1f7      	bne.n	8014ff2 <_reclaim_reent+0x16>
 8015002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015004:	4620      	mov	r0, r4
 8015006:	68d9      	ldr	r1, [r3, #12]
 8015008:	f7ff feb2 	bl	8014d70 <_free_r>
 801500c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801500e:	6819      	ldr	r1, [r3, #0]
 8015010:	b111      	cbz	r1, 8015018 <_reclaim_reent+0x3c>
 8015012:	4620      	mov	r0, r4
 8015014:	f7ff feac 	bl	8014d70 <_free_r>
 8015018:	6961      	ldr	r1, [r4, #20]
 801501a:	b111      	cbz	r1, 8015022 <_reclaim_reent+0x46>
 801501c:	4620      	mov	r0, r4
 801501e:	f7ff fea7 	bl	8014d70 <_free_r>
 8015022:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015024:	b111      	cbz	r1, 801502c <_reclaim_reent+0x50>
 8015026:	4620      	mov	r0, r4
 8015028:	f7ff fea2 	bl	8014d70 <_free_r>
 801502c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801502e:	b111      	cbz	r1, 8015036 <_reclaim_reent+0x5a>
 8015030:	4620      	mov	r0, r4
 8015032:	f7ff fe9d 	bl	8014d70 <_free_r>
 8015036:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015038:	b111      	cbz	r1, 8015040 <_reclaim_reent+0x64>
 801503a:	4620      	mov	r0, r4
 801503c:	f7ff fe98 	bl	8014d70 <_free_r>
 8015040:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015042:	b111      	cbz	r1, 801504a <_reclaim_reent+0x6e>
 8015044:	4620      	mov	r0, r4
 8015046:	f7ff fe93 	bl	8014d70 <_free_r>
 801504a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801504c:	b111      	cbz	r1, 8015054 <_reclaim_reent+0x78>
 801504e:	4620      	mov	r0, r4
 8015050:	f7ff fe8e 	bl	8014d70 <_free_r>
 8015054:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015056:	b111      	cbz	r1, 801505e <_reclaim_reent+0x82>
 8015058:	4620      	mov	r0, r4
 801505a:	f7ff fe89 	bl	8014d70 <_free_r>
 801505e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015060:	b111      	cbz	r1, 8015068 <_reclaim_reent+0x8c>
 8015062:	4620      	mov	r0, r4
 8015064:	f7ff fe84 	bl	8014d70 <_free_r>
 8015068:	69a3      	ldr	r3, [r4, #24]
 801506a:	b17b      	cbz	r3, 801508c <_reclaim_reent+0xb0>
 801506c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801506e:	4620      	mov	r0, r4
 8015070:	4798      	blx	r3
 8015072:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015074:	b151      	cbz	r1, 801508c <_reclaim_reent+0xb0>
 8015076:	4620      	mov	r0, r4
 8015078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801507c:	f7ff bfa0 	b.w	8014fc0 <cleanup_glue>
 8015080:	680e      	ldr	r6, [r1, #0]
 8015082:	4620      	mov	r0, r4
 8015084:	f7ff fe74 	bl	8014d70 <_free_r>
 8015088:	4631      	mov	r1, r6
 801508a:	e7b5      	b.n	8014ff8 <_reclaim_reent+0x1c>
 801508c:	bd70      	pop	{r4, r5, r6, pc}
 801508e:	bf00      	nop
 8015090:	20000040 	.word	0x20000040

08015094 <_sbrk_r>:
 8015094:	b538      	push	{r3, r4, r5, lr}
 8015096:	4c06      	ldr	r4, [pc, #24]	; (80150b0 <_sbrk_r+0x1c>)
 8015098:	2300      	movs	r3, #0
 801509a:	4605      	mov	r5, r0
 801509c:	4608      	mov	r0, r1
 801509e:	6023      	str	r3, [r4, #0]
 80150a0:	f000 fe26 	bl	8015cf0 <_sbrk>
 80150a4:	1c43      	adds	r3, r0, #1
 80150a6:	d102      	bne.n	80150ae <_sbrk_r+0x1a>
 80150a8:	6823      	ldr	r3, [r4, #0]
 80150aa:	b103      	cbz	r3, 80150ae <_sbrk_r+0x1a>
 80150ac:	602b      	str	r3, [r5, #0]
 80150ae:	bd38      	pop	{r3, r4, r5, pc}
 80150b0:	20010b4c 	.word	0x20010b4c

080150b4 <__sread>:
 80150b4:	b510      	push	{r4, lr}
 80150b6:	460c      	mov	r4, r1
 80150b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150bc:	f000 fdc4 	bl	8015c48 <_read_r>
 80150c0:	2800      	cmp	r0, #0
 80150c2:	bfab      	itete	ge
 80150c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80150c6:	89a3      	ldrhlt	r3, [r4, #12]
 80150c8:	181b      	addge	r3, r3, r0
 80150ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150ce:	bfac      	ite	ge
 80150d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80150d2:	81a3      	strhlt	r3, [r4, #12]
 80150d4:	bd10      	pop	{r4, pc}

080150d6 <__swrite>:
 80150d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150da:	461f      	mov	r7, r3
 80150dc:	898b      	ldrh	r3, [r1, #12]
 80150de:	05db      	lsls	r3, r3, #23
 80150e0:	4605      	mov	r5, r0
 80150e2:	460c      	mov	r4, r1
 80150e4:	4616      	mov	r6, r2
 80150e6:	d505      	bpl.n	80150f4 <__swrite+0x1e>
 80150e8:	2302      	movs	r3, #2
 80150ea:	2200      	movs	r2, #0
 80150ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150f0:	f000 fa5c 	bl	80155ac <_lseek_r>
 80150f4:	89a3      	ldrh	r3, [r4, #12]
 80150f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150fe:	81a3      	strh	r3, [r4, #12]
 8015100:	4632      	mov	r2, r6
 8015102:	463b      	mov	r3, r7
 8015104:	4628      	mov	r0, r5
 8015106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801510a:	f000 b90d 	b.w	8015328 <_write_r>

0801510e <__sseek>:
 801510e:	b510      	push	{r4, lr}
 8015110:	460c      	mov	r4, r1
 8015112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015116:	f000 fa49 	bl	80155ac <_lseek_r>
 801511a:	1c43      	adds	r3, r0, #1
 801511c:	89a3      	ldrh	r3, [r4, #12]
 801511e:	bf15      	itete	ne
 8015120:	6560      	strne	r0, [r4, #84]	; 0x54
 8015122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801512a:	81a3      	strheq	r3, [r4, #12]
 801512c:	bf18      	it	ne
 801512e:	81a3      	strhne	r3, [r4, #12]
 8015130:	bd10      	pop	{r4, pc}

08015132 <__sclose>:
 8015132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015136:	f000 b977 	b.w	8015428 <_close_r>

0801513a <_strtol_l.isra.0>:
 801513a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801513e:	4680      	mov	r8, r0
 8015140:	4689      	mov	r9, r1
 8015142:	4692      	mov	sl, r2
 8015144:	461f      	mov	r7, r3
 8015146:	468b      	mov	fp, r1
 8015148:	465d      	mov	r5, fp
 801514a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801514c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015150:	f7ff fdd4 	bl	8014cfc <__locale_ctype_ptr_l>
 8015154:	4420      	add	r0, r4
 8015156:	7846      	ldrb	r6, [r0, #1]
 8015158:	f016 0608 	ands.w	r6, r6, #8
 801515c:	d10b      	bne.n	8015176 <_strtol_l.isra.0+0x3c>
 801515e:	2c2d      	cmp	r4, #45	; 0x2d
 8015160:	d10b      	bne.n	801517a <_strtol_l.isra.0+0x40>
 8015162:	782c      	ldrb	r4, [r5, #0]
 8015164:	2601      	movs	r6, #1
 8015166:	f10b 0502 	add.w	r5, fp, #2
 801516a:	b167      	cbz	r7, 8015186 <_strtol_l.isra.0+0x4c>
 801516c:	2f10      	cmp	r7, #16
 801516e:	d114      	bne.n	801519a <_strtol_l.isra.0+0x60>
 8015170:	2c30      	cmp	r4, #48	; 0x30
 8015172:	d00a      	beq.n	801518a <_strtol_l.isra.0+0x50>
 8015174:	e011      	b.n	801519a <_strtol_l.isra.0+0x60>
 8015176:	46ab      	mov	fp, r5
 8015178:	e7e6      	b.n	8015148 <_strtol_l.isra.0+0xe>
 801517a:	2c2b      	cmp	r4, #43	; 0x2b
 801517c:	bf04      	itt	eq
 801517e:	782c      	ldrbeq	r4, [r5, #0]
 8015180:	f10b 0502 	addeq.w	r5, fp, #2
 8015184:	e7f1      	b.n	801516a <_strtol_l.isra.0+0x30>
 8015186:	2c30      	cmp	r4, #48	; 0x30
 8015188:	d127      	bne.n	80151da <_strtol_l.isra.0+0xa0>
 801518a:	782b      	ldrb	r3, [r5, #0]
 801518c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015190:	2b58      	cmp	r3, #88	; 0x58
 8015192:	d14b      	bne.n	801522c <_strtol_l.isra.0+0xf2>
 8015194:	786c      	ldrb	r4, [r5, #1]
 8015196:	2710      	movs	r7, #16
 8015198:	3502      	adds	r5, #2
 801519a:	2e00      	cmp	r6, #0
 801519c:	bf0c      	ite	eq
 801519e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80151a2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80151a6:	2200      	movs	r2, #0
 80151a8:	fbb1 fef7 	udiv	lr, r1, r7
 80151ac:	4610      	mov	r0, r2
 80151ae:	fb07 1c1e 	mls	ip, r7, lr, r1
 80151b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80151b6:	2b09      	cmp	r3, #9
 80151b8:	d811      	bhi.n	80151de <_strtol_l.isra.0+0xa4>
 80151ba:	461c      	mov	r4, r3
 80151bc:	42a7      	cmp	r7, r4
 80151be:	dd1d      	ble.n	80151fc <_strtol_l.isra.0+0xc2>
 80151c0:	1c53      	adds	r3, r2, #1
 80151c2:	d007      	beq.n	80151d4 <_strtol_l.isra.0+0x9a>
 80151c4:	4586      	cmp	lr, r0
 80151c6:	d316      	bcc.n	80151f6 <_strtol_l.isra.0+0xbc>
 80151c8:	d101      	bne.n	80151ce <_strtol_l.isra.0+0x94>
 80151ca:	45a4      	cmp	ip, r4
 80151cc:	db13      	blt.n	80151f6 <_strtol_l.isra.0+0xbc>
 80151ce:	fb00 4007 	mla	r0, r0, r7, r4
 80151d2:	2201      	movs	r2, #1
 80151d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80151d8:	e7eb      	b.n	80151b2 <_strtol_l.isra.0+0x78>
 80151da:	270a      	movs	r7, #10
 80151dc:	e7dd      	b.n	801519a <_strtol_l.isra.0+0x60>
 80151de:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80151e2:	2b19      	cmp	r3, #25
 80151e4:	d801      	bhi.n	80151ea <_strtol_l.isra.0+0xb0>
 80151e6:	3c37      	subs	r4, #55	; 0x37
 80151e8:	e7e8      	b.n	80151bc <_strtol_l.isra.0+0x82>
 80151ea:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80151ee:	2b19      	cmp	r3, #25
 80151f0:	d804      	bhi.n	80151fc <_strtol_l.isra.0+0xc2>
 80151f2:	3c57      	subs	r4, #87	; 0x57
 80151f4:	e7e2      	b.n	80151bc <_strtol_l.isra.0+0x82>
 80151f6:	f04f 32ff 	mov.w	r2, #4294967295
 80151fa:	e7eb      	b.n	80151d4 <_strtol_l.isra.0+0x9a>
 80151fc:	1c53      	adds	r3, r2, #1
 80151fe:	d108      	bne.n	8015212 <_strtol_l.isra.0+0xd8>
 8015200:	2322      	movs	r3, #34	; 0x22
 8015202:	f8c8 3000 	str.w	r3, [r8]
 8015206:	4608      	mov	r0, r1
 8015208:	f1ba 0f00 	cmp.w	sl, #0
 801520c:	d107      	bne.n	801521e <_strtol_l.isra.0+0xe4>
 801520e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015212:	b106      	cbz	r6, 8015216 <_strtol_l.isra.0+0xdc>
 8015214:	4240      	negs	r0, r0
 8015216:	f1ba 0f00 	cmp.w	sl, #0
 801521a:	d00c      	beq.n	8015236 <_strtol_l.isra.0+0xfc>
 801521c:	b122      	cbz	r2, 8015228 <_strtol_l.isra.0+0xee>
 801521e:	3d01      	subs	r5, #1
 8015220:	f8ca 5000 	str.w	r5, [sl]
 8015224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015228:	464d      	mov	r5, r9
 801522a:	e7f9      	b.n	8015220 <_strtol_l.isra.0+0xe6>
 801522c:	2430      	movs	r4, #48	; 0x30
 801522e:	2f00      	cmp	r7, #0
 8015230:	d1b3      	bne.n	801519a <_strtol_l.isra.0+0x60>
 8015232:	2708      	movs	r7, #8
 8015234:	e7b1      	b.n	801519a <_strtol_l.isra.0+0x60>
 8015236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801523c <strtol>:
 801523c:	4b08      	ldr	r3, [pc, #32]	; (8015260 <strtol+0x24>)
 801523e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015240:	681c      	ldr	r4, [r3, #0]
 8015242:	4d08      	ldr	r5, [pc, #32]	; (8015264 <strtol+0x28>)
 8015244:	6a23      	ldr	r3, [r4, #32]
 8015246:	2b00      	cmp	r3, #0
 8015248:	bf08      	it	eq
 801524a:	462b      	moveq	r3, r5
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	4613      	mov	r3, r2
 8015250:	460a      	mov	r2, r1
 8015252:	4601      	mov	r1, r0
 8015254:	4620      	mov	r0, r4
 8015256:	f7ff ff70 	bl	801513a <_strtol_l.isra.0>
 801525a:	b003      	add	sp, #12
 801525c:	bd30      	pop	{r4, r5, pc}
 801525e:	bf00      	nop
 8015260:	20000040 	.word	0x20000040
 8015264:	200000a4 	.word	0x200000a4

08015268 <__swbuf_r>:
 8015268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801526a:	460e      	mov	r6, r1
 801526c:	4614      	mov	r4, r2
 801526e:	4605      	mov	r5, r0
 8015270:	b118      	cbz	r0, 801527a <__swbuf_r+0x12>
 8015272:	6983      	ldr	r3, [r0, #24]
 8015274:	b90b      	cbnz	r3, 801527a <__swbuf_r+0x12>
 8015276:	f7ff fc93 	bl	8014ba0 <__sinit>
 801527a:	4b21      	ldr	r3, [pc, #132]	; (8015300 <__swbuf_r+0x98>)
 801527c:	429c      	cmp	r4, r3
 801527e:	d12a      	bne.n	80152d6 <__swbuf_r+0x6e>
 8015280:	686c      	ldr	r4, [r5, #4]
 8015282:	69a3      	ldr	r3, [r4, #24]
 8015284:	60a3      	str	r3, [r4, #8]
 8015286:	89a3      	ldrh	r3, [r4, #12]
 8015288:	071a      	lsls	r2, r3, #28
 801528a:	d52e      	bpl.n	80152ea <__swbuf_r+0x82>
 801528c:	6923      	ldr	r3, [r4, #16]
 801528e:	b363      	cbz	r3, 80152ea <__swbuf_r+0x82>
 8015290:	6923      	ldr	r3, [r4, #16]
 8015292:	6820      	ldr	r0, [r4, #0]
 8015294:	1ac0      	subs	r0, r0, r3
 8015296:	6963      	ldr	r3, [r4, #20]
 8015298:	b2f6      	uxtb	r6, r6
 801529a:	4298      	cmp	r0, r3
 801529c:	4637      	mov	r7, r6
 801529e:	db04      	blt.n	80152aa <__swbuf_r+0x42>
 80152a0:	4621      	mov	r1, r4
 80152a2:	4628      	mov	r0, r5
 80152a4:	f000 f958 	bl	8015558 <_fflush_r>
 80152a8:	bb28      	cbnz	r0, 80152f6 <__swbuf_r+0x8e>
 80152aa:	68a3      	ldr	r3, [r4, #8]
 80152ac:	3b01      	subs	r3, #1
 80152ae:	60a3      	str	r3, [r4, #8]
 80152b0:	6823      	ldr	r3, [r4, #0]
 80152b2:	1c5a      	adds	r2, r3, #1
 80152b4:	6022      	str	r2, [r4, #0]
 80152b6:	701e      	strb	r6, [r3, #0]
 80152b8:	6963      	ldr	r3, [r4, #20]
 80152ba:	3001      	adds	r0, #1
 80152bc:	4298      	cmp	r0, r3
 80152be:	d004      	beq.n	80152ca <__swbuf_r+0x62>
 80152c0:	89a3      	ldrh	r3, [r4, #12]
 80152c2:	07db      	lsls	r3, r3, #31
 80152c4:	d519      	bpl.n	80152fa <__swbuf_r+0x92>
 80152c6:	2e0a      	cmp	r6, #10
 80152c8:	d117      	bne.n	80152fa <__swbuf_r+0x92>
 80152ca:	4621      	mov	r1, r4
 80152cc:	4628      	mov	r0, r5
 80152ce:	f000 f943 	bl	8015558 <_fflush_r>
 80152d2:	b190      	cbz	r0, 80152fa <__swbuf_r+0x92>
 80152d4:	e00f      	b.n	80152f6 <__swbuf_r+0x8e>
 80152d6:	4b0b      	ldr	r3, [pc, #44]	; (8015304 <__swbuf_r+0x9c>)
 80152d8:	429c      	cmp	r4, r3
 80152da:	d101      	bne.n	80152e0 <__swbuf_r+0x78>
 80152dc:	68ac      	ldr	r4, [r5, #8]
 80152de:	e7d0      	b.n	8015282 <__swbuf_r+0x1a>
 80152e0:	4b09      	ldr	r3, [pc, #36]	; (8015308 <__swbuf_r+0xa0>)
 80152e2:	429c      	cmp	r4, r3
 80152e4:	bf08      	it	eq
 80152e6:	68ec      	ldreq	r4, [r5, #12]
 80152e8:	e7cb      	b.n	8015282 <__swbuf_r+0x1a>
 80152ea:	4621      	mov	r1, r4
 80152ec:	4628      	mov	r0, r5
 80152ee:	f000 f82d 	bl	801534c <__swsetup_r>
 80152f2:	2800      	cmp	r0, #0
 80152f4:	d0cc      	beq.n	8015290 <__swbuf_r+0x28>
 80152f6:	f04f 37ff 	mov.w	r7, #4294967295
 80152fa:	4638      	mov	r0, r7
 80152fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152fe:	bf00      	nop
 8015300:	08018dc8 	.word	0x08018dc8
 8015304:	08018de8 	.word	0x08018de8
 8015308:	08018da8 	.word	0x08018da8

0801530c <__ascii_wctomb>:
 801530c:	b149      	cbz	r1, 8015322 <__ascii_wctomb+0x16>
 801530e:	2aff      	cmp	r2, #255	; 0xff
 8015310:	bf85      	ittet	hi
 8015312:	238a      	movhi	r3, #138	; 0x8a
 8015314:	6003      	strhi	r3, [r0, #0]
 8015316:	700a      	strbls	r2, [r1, #0]
 8015318:	f04f 30ff 	movhi.w	r0, #4294967295
 801531c:	bf98      	it	ls
 801531e:	2001      	movls	r0, #1
 8015320:	4770      	bx	lr
 8015322:	4608      	mov	r0, r1
 8015324:	4770      	bx	lr
	...

08015328 <_write_r>:
 8015328:	b538      	push	{r3, r4, r5, lr}
 801532a:	4c07      	ldr	r4, [pc, #28]	; (8015348 <_write_r+0x20>)
 801532c:	4605      	mov	r5, r0
 801532e:	4608      	mov	r0, r1
 8015330:	4611      	mov	r1, r2
 8015332:	2200      	movs	r2, #0
 8015334:	6022      	str	r2, [r4, #0]
 8015336:	461a      	mov	r2, r3
 8015338:	f7fd f83e 	bl	80123b8 <_write>
 801533c:	1c43      	adds	r3, r0, #1
 801533e:	d102      	bne.n	8015346 <_write_r+0x1e>
 8015340:	6823      	ldr	r3, [r4, #0]
 8015342:	b103      	cbz	r3, 8015346 <_write_r+0x1e>
 8015344:	602b      	str	r3, [r5, #0]
 8015346:	bd38      	pop	{r3, r4, r5, pc}
 8015348:	20010b4c 	.word	0x20010b4c

0801534c <__swsetup_r>:
 801534c:	4b32      	ldr	r3, [pc, #200]	; (8015418 <__swsetup_r+0xcc>)
 801534e:	b570      	push	{r4, r5, r6, lr}
 8015350:	681d      	ldr	r5, [r3, #0]
 8015352:	4606      	mov	r6, r0
 8015354:	460c      	mov	r4, r1
 8015356:	b125      	cbz	r5, 8015362 <__swsetup_r+0x16>
 8015358:	69ab      	ldr	r3, [r5, #24]
 801535a:	b913      	cbnz	r3, 8015362 <__swsetup_r+0x16>
 801535c:	4628      	mov	r0, r5
 801535e:	f7ff fc1f 	bl	8014ba0 <__sinit>
 8015362:	4b2e      	ldr	r3, [pc, #184]	; (801541c <__swsetup_r+0xd0>)
 8015364:	429c      	cmp	r4, r3
 8015366:	d10f      	bne.n	8015388 <__swsetup_r+0x3c>
 8015368:	686c      	ldr	r4, [r5, #4]
 801536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801536e:	b29a      	uxth	r2, r3
 8015370:	0715      	lsls	r5, r2, #28
 8015372:	d42c      	bmi.n	80153ce <__swsetup_r+0x82>
 8015374:	06d0      	lsls	r0, r2, #27
 8015376:	d411      	bmi.n	801539c <__swsetup_r+0x50>
 8015378:	2209      	movs	r2, #9
 801537a:	6032      	str	r2, [r6, #0]
 801537c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015380:	81a3      	strh	r3, [r4, #12]
 8015382:	f04f 30ff 	mov.w	r0, #4294967295
 8015386:	bd70      	pop	{r4, r5, r6, pc}
 8015388:	4b25      	ldr	r3, [pc, #148]	; (8015420 <__swsetup_r+0xd4>)
 801538a:	429c      	cmp	r4, r3
 801538c:	d101      	bne.n	8015392 <__swsetup_r+0x46>
 801538e:	68ac      	ldr	r4, [r5, #8]
 8015390:	e7eb      	b.n	801536a <__swsetup_r+0x1e>
 8015392:	4b24      	ldr	r3, [pc, #144]	; (8015424 <__swsetup_r+0xd8>)
 8015394:	429c      	cmp	r4, r3
 8015396:	bf08      	it	eq
 8015398:	68ec      	ldreq	r4, [r5, #12]
 801539a:	e7e6      	b.n	801536a <__swsetup_r+0x1e>
 801539c:	0751      	lsls	r1, r2, #29
 801539e:	d512      	bpl.n	80153c6 <__swsetup_r+0x7a>
 80153a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153a2:	b141      	cbz	r1, 80153b6 <__swsetup_r+0x6a>
 80153a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153a8:	4299      	cmp	r1, r3
 80153aa:	d002      	beq.n	80153b2 <__swsetup_r+0x66>
 80153ac:	4630      	mov	r0, r6
 80153ae:	f7ff fcdf 	bl	8014d70 <_free_r>
 80153b2:	2300      	movs	r3, #0
 80153b4:	6363      	str	r3, [r4, #52]	; 0x34
 80153b6:	89a3      	ldrh	r3, [r4, #12]
 80153b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80153bc:	81a3      	strh	r3, [r4, #12]
 80153be:	2300      	movs	r3, #0
 80153c0:	6063      	str	r3, [r4, #4]
 80153c2:	6923      	ldr	r3, [r4, #16]
 80153c4:	6023      	str	r3, [r4, #0]
 80153c6:	89a3      	ldrh	r3, [r4, #12]
 80153c8:	f043 0308 	orr.w	r3, r3, #8
 80153cc:	81a3      	strh	r3, [r4, #12]
 80153ce:	6923      	ldr	r3, [r4, #16]
 80153d0:	b94b      	cbnz	r3, 80153e6 <__swsetup_r+0x9a>
 80153d2:	89a3      	ldrh	r3, [r4, #12]
 80153d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80153d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153dc:	d003      	beq.n	80153e6 <__swsetup_r+0x9a>
 80153de:	4621      	mov	r1, r4
 80153e0:	4630      	mov	r0, r6
 80153e2:	f000 f919 	bl	8015618 <__smakebuf_r>
 80153e6:	89a2      	ldrh	r2, [r4, #12]
 80153e8:	f012 0301 	ands.w	r3, r2, #1
 80153ec:	d00c      	beq.n	8015408 <__swsetup_r+0xbc>
 80153ee:	2300      	movs	r3, #0
 80153f0:	60a3      	str	r3, [r4, #8]
 80153f2:	6963      	ldr	r3, [r4, #20]
 80153f4:	425b      	negs	r3, r3
 80153f6:	61a3      	str	r3, [r4, #24]
 80153f8:	6923      	ldr	r3, [r4, #16]
 80153fa:	b953      	cbnz	r3, 8015412 <__swsetup_r+0xc6>
 80153fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015400:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015404:	d1ba      	bne.n	801537c <__swsetup_r+0x30>
 8015406:	bd70      	pop	{r4, r5, r6, pc}
 8015408:	0792      	lsls	r2, r2, #30
 801540a:	bf58      	it	pl
 801540c:	6963      	ldrpl	r3, [r4, #20]
 801540e:	60a3      	str	r3, [r4, #8]
 8015410:	e7f2      	b.n	80153f8 <__swsetup_r+0xac>
 8015412:	2000      	movs	r0, #0
 8015414:	e7f7      	b.n	8015406 <__swsetup_r+0xba>
 8015416:	bf00      	nop
 8015418:	20000040 	.word	0x20000040
 801541c:	08018dc8 	.word	0x08018dc8
 8015420:	08018de8 	.word	0x08018de8
 8015424:	08018da8 	.word	0x08018da8

08015428 <_close_r>:
 8015428:	b538      	push	{r3, r4, r5, lr}
 801542a:	4c06      	ldr	r4, [pc, #24]	; (8015444 <_close_r+0x1c>)
 801542c:	2300      	movs	r3, #0
 801542e:	4605      	mov	r5, r0
 8015430:	4608      	mov	r0, r1
 8015432:	6023      	str	r3, [r4, #0]
 8015434:	f000 fc3c 	bl	8015cb0 <_close>
 8015438:	1c43      	adds	r3, r0, #1
 801543a:	d102      	bne.n	8015442 <_close_r+0x1a>
 801543c:	6823      	ldr	r3, [r4, #0]
 801543e:	b103      	cbz	r3, 8015442 <_close_r+0x1a>
 8015440:	602b      	str	r3, [r5, #0]
 8015442:	bd38      	pop	{r3, r4, r5, pc}
 8015444:	20010b4c 	.word	0x20010b4c

08015448 <__sflush_r>:
 8015448:	898a      	ldrh	r2, [r1, #12]
 801544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801544e:	4605      	mov	r5, r0
 8015450:	0710      	lsls	r0, r2, #28
 8015452:	460c      	mov	r4, r1
 8015454:	d45a      	bmi.n	801550c <__sflush_r+0xc4>
 8015456:	684b      	ldr	r3, [r1, #4]
 8015458:	2b00      	cmp	r3, #0
 801545a:	dc05      	bgt.n	8015468 <__sflush_r+0x20>
 801545c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801545e:	2b00      	cmp	r3, #0
 8015460:	dc02      	bgt.n	8015468 <__sflush_r+0x20>
 8015462:	2000      	movs	r0, #0
 8015464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801546a:	2e00      	cmp	r6, #0
 801546c:	d0f9      	beq.n	8015462 <__sflush_r+0x1a>
 801546e:	2300      	movs	r3, #0
 8015470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015474:	682f      	ldr	r7, [r5, #0]
 8015476:	602b      	str	r3, [r5, #0]
 8015478:	d033      	beq.n	80154e2 <__sflush_r+0x9a>
 801547a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801547c:	89a3      	ldrh	r3, [r4, #12]
 801547e:	075a      	lsls	r2, r3, #29
 8015480:	d505      	bpl.n	801548e <__sflush_r+0x46>
 8015482:	6863      	ldr	r3, [r4, #4]
 8015484:	1ac0      	subs	r0, r0, r3
 8015486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015488:	b10b      	cbz	r3, 801548e <__sflush_r+0x46>
 801548a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801548c:	1ac0      	subs	r0, r0, r3
 801548e:	2300      	movs	r3, #0
 8015490:	4602      	mov	r2, r0
 8015492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015494:	6a21      	ldr	r1, [r4, #32]
 8015496:	4628      	mov	r0, r5
 8015498:	47b0      	blx	r6
 801549a:	1c43      	adds	r3, r0, #1
 801549c:	89a3      	ldrh	r3, [r4, #12]
 801549e:	d106      	bne.n	80154ae <__sflush_r+0x66>
 80154a0:	6829      	ldr	r1, [r5, #0]
 80154a2:	291d      	cmp	r1, #29
 80154a4:	d84b      	bhi.n	801553e <__sflush_r+0xf6>
 80154a6:	4a2b      	ldr	r2, [pc, #172]	; (8015554 <__sflush_r+0x10c>)
 80154a8:	40ca      	lsrs	r2, r1
 80154aa:	07d6      	lsls	r6, r2, #31
 80154ac:	d547      	bpl.n	801553e <__sflush_r+0xf6>
 80154ae:	2200      	movs	r2, #0
 80154b0:	6062      	str	r2, [r4, #4]
 80154b2:	04d9      	lsls	r1, r3, #19
 80154b4:	6922      	ldr	r2, [r4, #16]
 80154b6:	6022      	str	r2, [r4, #0]
 80154b8:	d504      	bpl.n	80154c4 <__sflush_r+0x7c>
 80154ba:	1c42      	adds	r2, r0, #1
 80154bc:	d101      	bne.n	80154c2 <__sflush_r+0x7a>
 80154be:	682b      	ldr	r3, [r5, #0]
 80154c0:	b903      	cbnz	r3, 80154c4 <__sflush_r+0x7c>
 80154c2:	6560      	str	r0, [r4, #84]	; 0x54
 80154c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154c6:	602f      	str	r7, [r5, #0]
 80154c8:	2900      	cmp	r1, #0
 80154ca:	d0ca      	beq.n	8015462 <__sflush_r+0x1a>
 80154cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154d0:	4299      	cmp	r1, r3
 80154d2:	d002      	beq.n	80154da <__sflush_r+0x92>
 80154d4:	4628      	mov	r0, r5
 80154d6:	f7ff fc4b 	bl	8014d70 <_free_r>
 80154da:	2000      	movs	r0, #0
 80154dc:	6360      	str	r0, [r4, #52]	; 0x34
 80154de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154e2:	6a21      	ldr	r1, [r4, #32]
 80154e4:	2301      	movs	r3, #1
 80154e6:	4628      	mov	r0, r5
 80154e8:	47b0      	blx	r6
 80154ea:	1c41      	adds	r1, r0, #1
 80154ec:	d1c6      	bne.n	801547c <__sflush_r+0x34>
 80154ee:	682b      	ldr	r3, [r5, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d0c3      	beq.n	801547c <__sflush_r+0x34>
 80154f4:	2b1d      	cmp	r3, #29
 80154f6:	d001      	beq.n	80154fc <__sflush_r+0xb4>
 80154f8:	2b16      	cmp	r3, #22
 80154fa:	d101      	bne.n	8015500 <__sflush_r+0xb8>
 80154fc:	602f      	str	r7, [r5, #0]
 80154fe:	e7b0      	b.n	8015462 <__sflush_r+0x1a>
 8015500:	89a3      	ldrh	r3, [r4, #12]
 8015502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015506:	81a3      	strh	r3, [r4, #12]
 8015508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801550c:	690f      	ldr	r7, [r1, #16]
 801550e:	2f00      	cmp	r7, #0
 8015510:	d0a7      	beq.n	8015462 <__sflush_r+0x1a>
 8015512:	0793      	lsls	r3, r2, #30
 8015514:	680e      	ldr	r6, [r1, #0]
 8015516:	bf08      	it	eq
 8015518:	694b      	ldreq	r3, [r1, #20]
 801551a:	600f      	str	r7, [r1, #0]
 801551c:	bf18      	it	ne
 801551e:	2300      	movne	r3, #0
 8015520:	eba6 0807 	sub.w	r8, r6, r7
 8015524:	608b      	str	r3, [r1, #8]
 8015526:	f1b8 0f00 	cmp.w	r8, #0
 801552a:	dd9a      	ble.n	8015462 <__sflush_r+0x1a>
 801552c:	4643      	mov	r3, r8
 801552e:	463a      	mov	r2, r7
 8015530:	6a21      	ldr	r1, [r4, #32]
 8015532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015534:	4628      	mov	r0, r5
 8015536:	47b0      	blx	r6
 8015538:	2800      	cmp	r0, #0
 801553a:	dc07      	bgt.n	801554c <__sflush_r+0x104>
 801553c:	89a3      	ldrh	r3, [r4, #12]
 801553e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015542:	81a3      	strh	r3, [r4, #12]
 8015544:	f04f 30ff 	mov.w	r0, #4294967295
 8015548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801554c:	4407      	add	r7, r0
 801554e:	eba8 0800 	sub.w	r8, r8, r0
 8015552:	e7e8      	b.n	8015526 <__sflush_r+0xde>
 8015554:	20400001 	.word	0x20400001

08015558 <_fflush_r>:
 8015558:	b538      	push	{r3, r4, r5, lr}
 801555a:	690b      	ldr	r3, [r1, #16]
 801555c:	4605      	mov	r5, r0
 801555e:	460c      	mov	r4, r1
 8015560:	b1db      	cbz	r3, 801559a <_fflush_r+0x42>
 8015562:	b118      	cbz	r0, 801556c <_fflush_r+0x14>
 8015564:	6983      	ldr	r3, [r0, #24]
 8015566:	b90b      	cbnz	r3, 801556c <_fflush_r+0x14>
 8015568:	f7ff fb1a 	bl	8014ba0 <__sinit>
 801556c:	4b0c      	ldr	r3, [pc, #48]	; (80155a0 <_fflush_r+0x48>)
 801556e:	429c      	cmp	r4, r3
 8015570:	d109      	bne.n	8015586 <_fflush_r+0x2e>
 8015572:	686c      	ldr	r4, [r5, #4]
 8015574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015578:	b17b      	cbz	r3, 801559a <_fflush_r+0x42>
 801557a:	4621      	mov	r1, r4
 801557c:	4628      	mov	r0, r5
 801557e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015582:	f7ff bf61 	b.w	8015448 <__sflush_r>
 8015586:	4b07      	ldr	r3, [pc, #28]	; (80155a4 <_fflush_r+0x4c>)
 8015588:	429c      	cmp	r4, r3
 801558a:	d101      	bne.n	8015590 <_fflush_r+0x38>
 801558c:	68ac      	ldr	r4, [r5, #8]
 801558e:	e7f1      	b.n	8015574 <_fflush_r+0x1c>
 8015590:	4b05      	ldr	r3, [pc, #20]	; (80155a8 <_fflush_r+0x50>)
 8015592:	429c      	cmp	r4, r3
 8015594:	bf08      	it	eq
 8015596:	68ec      	ldreq	r4, [r5, #12]
 8015598:	e7ec      	b.n	8015574 <_fflush_r+0x1c>
 801559a:	2000      	movs	r0, #0
 801559c:	bd38      	pop	{r3, r4, r5, pc}
 801559e:	bf00      	nop
 80155a0:	08018dc8 	.word	0x08018dc8
 80155a4:	08018de8 	.word	0x08018de8
 80155a8:	08018da8 	.word	0x08018da8

080155ac <_lseek_r>:
 80155ac:	b538      	push	{r3, r4, r5, lr}
 80155ae:	4c07      	ldr	r4, [pc, #28]	; (80155cc <_lseek_r+0x20>)
 80155b0:	4605      	mov	r5, r0
 80155b2:	4608      	mov	r0, r1
 80155b4:	4611      	mov	r1, r2
 80155b6:	2200      	movs	r2, #0
 80155b8:	6022      	str	r2, [r4, #0]
 80155ba:	461a      	mov	r2, r3
 80155bc:	f000 fb90 	bl	8015ce0 <_lseek>
 80155c0:	1c43      	adds	r3, r0, #1
 80155c2:	d102      	bne.n	80155ca <_lseek_r+0x1e>
 80155c4:	6823      	ldr	r3, [r4, #0]
 80155c6:	b103      	cbz	r3, 80155ca <_lseek_r+0x1e>
 80155c8:	602b      	str	r3, [r5, #0]
 80155ca:	bd38      	pop	{r3, r4, r5, pc}
 80155cc:	20010b4c 	.word	0x20010b4c

080155d0 <__swhatbuf_r>:
 80155d0:	b570      	push	{r4, r5, r6, lr}
 80155d2:	460e      	mov	r6, r1
 80155d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155d8:	2900      	cmp	r1, #0
 80155da:	b090      	sub	sp, #64	; 0x40
 80155dc:	4614      	mov	r4, r2
 80155de:	461d      	mov	r5, r3
 80155e0:	da07      	bge.n	80155f2 <__swhatbuf_r+0x22>
 80155e2:	2300      	movs	r3, #0
 80155e4:	602b      	str	r3, [r5, #0]
 80155e6:	89b3      	ldrh	r3, [r6, #12]
 80155e8:	061a      	lsls	r2, r3, #24
 80155ea:	d410      	bmi.n	801560e <__swhatbuf_r+0x3e>
 80155ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80155f0:	e00e      	b.n	8015610 <__swhatbuf_r+0x40>
 80155f2:	aa01      	add	r2, sp, #4
 80155f4:	f000 fb3a 	bl	8015c6c <_fstat_r>
 80155f8:	2800      	cmp	r0, #0
 80155fa:	dbf2      	blt.n	80155e2 <__swhatbuf_r+0x12>
 80155fc:	9a02      	ldr	r2, [sp, #8]
 80155fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015602:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015606:	425a      	negs	r2, r3
 8015608:	415a      	adcs	r2, r3
 801560a:	602a      	str	r2, [r5, #0]
 801560c:	e7ee      	b.n	80155ec <__swhatbuf_r+0x1c>
 801560e:	2340      	movs	r3, #64	; 0x40
 8015610:	2000      	movs	r0, #0
 8015612:	6023      	str	r3, [r4, #0]
 8015614:	b010      	add	sp, #64	; 0x40
 8015616:	bd70      	pop	{r4, r5, r6, pc}

08015618 <__smakebuf_r>:
 8015618:	898b      	ldrh	r3, [r1, #12]
 801561a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801561c:	079d      	lsls	r5, r3, #30
 801561e:	4606      	mov	r6, r0
 8015620:	460c      	mov	r4, r1
 8015622:	d507      	bpl.n	8015634 <__smakebuf_r+0x1c>
 8015624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015628:	6023      	str	r3, [r4, #0]
 801562a:	6123      	str	r3, [r4, #16]
 801562c:	2301      	movs	r3, #1
 801562e:	6163      	str	r3, [r4, #20]
 8015630:	b002      	add	sp, #8
 8015632:	bd70      	pop	{r4, r5, r6, pc}
 8015634:	ab01      	add	r3, sp, #4
 8015636:	466a      	mov	r2, sp
 8015638:	f7ff ffca 	bl	80155d0 <__swhatbuf_r>
 801563c:	9900      	ldr	r1, [sp, #0]
 801563e:	4605      	mov	r5, r0
 8015640:	4630      	mov	r0, r6
 8015642:	f7ff fbe3 	bl	8014e0c <_malloc_r>
 8015646:	b948      	cbnz	r0, 801565c <__smakebuf_r+0x44>
 8015648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801564c:	059a      	lsls	r2, r3, #22
 801564e:	d4ef      	bmi.n	8015630 <__smakebuf_r+0x18>
 8015650:	f023 0303 	bic.w	r3, r3, #3
 8015654:	f043 0302 	orr.w	r3, r3, #2
 8015658:	81a3      	strh	r3, [r4, #12]
 801565a:	e7e3      	b.n	8015624 <__smakebuf_r+0xc>
 801565c:	4b0d      	ldr	r3, [pc, #52]	; (8015694 <__smakebuf_r+0x7c>)
 801565e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015660:	89a3      	ldrh	r3, [r4, #12]
 8015662:	6020      	str	r0, [r4, #0]
 8015664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015668:	81a3      	strh	r3, [r4, #12]
 801566a:	9b00      	ldr	r3, [sp, #0]
 801566c:	6163      	str	r3, [r4, #20]
 801566e:	9b01      	ldr	r3, [sp, #4]
 8015670:	6120      	str	r0, [r4, #16]
 8015672:	b15b      	cbz	r3, 801568c <__smakebuf_r+0x74>
 8015674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015678:	4630      	mov	r0, r6
 801567a:	f000 fb09 	bl	8015c90 <_isatty_r>
 801567e:	b128      	cbz	r0, 801568c <__smakebuf_r+0x74>
 8015680:	89a3      	ldrh	r3, [r4, #12]
 8015682:	f023 0303 	bic.w	r3, r3, #3
 8015686:	f043 0301 	orr.w	r3, r3, #1
 801568a:	81a3      	strh	r3, [r4, #12]
 801568c:	89a3      	ldrh	r3, [r4, #12]
 801568e:	431d      	orrs	r5, r3
 8015690:	81a5      	strh	r5, [r4, #12]
 8015692:	e7cd      	b.n	8015630 <__smakebuf_r+0x18>
 8015694:	08014b21 	.word	0x08014b21

08015698 <__malloc_lock>:
 8015698:	4770      	bx	lr

0801569a <__malloc_unlock>:
 801569a:	4770      	bx	lr

0801569c <__sfputc_r>:
 801569c:	6893      	ldr	r3, [r2, #8]
 801569e:	3b01      	subs	r3, #1
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	b410      	push	{r4}
 80156a4:	6093      	str	r3, [r2, #8]
 80156a6:	da09      	bge.n	80156bc <__sfputc_r+0x20>
 80156a8:	6994      	ldr	r4, [r2, #24]
 80156aa:	42a3      	cmp	r3, r4
 80156ac:	db02      	blt.n	80156b4 <__sfputc_r+0x18>
 80156ae:	b2cb      	uxtb	r3, r1
 80156b0:	2b0a      	cmp	r3, #10
 80156b2:	d103      	bne.n	80156bc <__sfputc_r+0x20>
 80156b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156b8:	f7ff bdd6 	b.w	8015268 <__swbuf_r>
 80156bc:	6813      	ldr	r3, [r2, #0]
 80156be:	1c58      	adds	r0, r3, #1
 80156c0:	6010      	str	r0, [r2, #0]
 80156c2:	7019      	strb	r1, [r3, #0]
 80156c4:	b2c8      	uxtb	r0, r1
 80156c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156ca:	4770      	bx	lr

080156cc <__sfputs_r>:
 80156cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ce:	4606      	mov	r6, r0
 80156d0:	460f      	mov	r7, r1
 80156d2:	4614      	mov	r4, r2
 80156d4:	18d5      	adds	r5, r2, r3
 80156d6:	42ac      	cmp	r4, r5
 80156d8:	d101      	bne.n	80156de <__sfputs_r+0x12>
 80156da:	2000      	movs	r0, #0
 80156dc:	e007      	b.n	80156ee <__sfputs_r+0x22>
 80156de:	463a      	mov	r2, r7
 80156e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156e4:	4630      	mov	r0, r6
 80156e6:	f7ff ffd9 	bl	801569c <__sfputc_r>
 80156ea:	1c43      	adds	r3, r0, #1
 80156ec:	d1f3      	bne.n	80156d6 <__sfputs_r+0xa>
 80156ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156f0 <_vfiprintf_r>:
 80156f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f4:	b09d      	sub	sp, #116	; 0x74
 80156f6:	460c      	mov	r4, r1
 80156f8:	4617      	mov	r7, r2
 80156fa:	9303      	str	r3, [sp, #12]
 80156fc:	4606      	mov	r6, r0
 80156fe:	b118      	cbz	r0, 8015708 <_vfiprintf_r+0x18>
 8015700:	6983      	ldr	r3, [r0, #24]
 8015702:	b90b      	cbnz	r3, 8015708 <_vfiprintf_r+0x18>
 8015704:	f7ff fa4c 	bl	8014ba0 <__sinit>
 8015708:	4b7c      	ldr	r3, [pc, #496]	; (80158fc <_vfiprintf_r+0x20c>)
 801570a:	429c      	cmp	r4, r3
 801570c:	d157      	bne.n	80157be <_vfiprintf_r+0xce>
 801570e:	6874      	ldr	r4, [r6, #4]
 8015710:	89a3      	ldrh	r3, [r4, #12]
 8015712:	0718      	lsls	r0, r3, #28
 8015714:	d55d      	bpl.n	80157d2 <_vfiprintf_r+0xe2>
 8015716:	6923      	ldr	r3, [r4, #16]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d05a      	beq.n	80157d2 <_vfiprintf_r+0xe2>
 801571c:	2300      	movs	r3, #0
 801571e:	9309      	str	r3, [sp, #36]	; 0x24
 8015720:	2320      	movs	r3, #32
 8015722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015726:	2330      	movs	r3, #48	; 0x30
 8015728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801572c:	f04f 0b01 	mov.w	fp, #1
 8015730:	46b8      	mov	r8, r7
 8015732:	4645      	mov	r5, r8
 8015734:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015738:	2b00      	cmp	r3, #0
 801573a:	d155      	bne.n	80157e8 <_vfiprintf_r+0xf8>
 801573c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015740:	d00b      	beq.n	801575a <_vfiprintf_r+0x6a>
 8015742:	4653      	mov	r3, sl
 8015744:	463a      	mov	r2, r7
 8015746:	4621      	mov	r1, r4
 8015748:	4630      	mov	r0, r6
 801574a:	f7ff ffbf 	bl	80156cc <__sfputs_r>
 801574e:	3001      	adds	r0, #1
 8015750:	f000 80c4 	beq.w	80158dc <_vfiprintf_r+0x1ec>
 8015754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015756:	4453      	add	r3, sl
 8015758:	9309      	str	r3, [sp, #36]	; 0x24
 801575a:	f898 3000 	ldrb.w	r3, [r8]
 801575e:	2b00      	cmp	r3, #0
 8015760:	f000 80bc 	beq.w	80158dc <_vfiprintf_r+0x1ec>
 8015764:	2300      	movs	r3, #0
 8015766:	f04f 32ff 	mov.w	r2, #4294967295
 801576a:	9304      	str	r3, [sp, #16]
 801576c:	9307      	str	r3, [sp, #28]
 801576e:	9205      	str	r2, [sp, #20]
 8015770:	9306      	str	r3, [sp, #24]
 8015772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015776:	931a      	str	r3, [sp, #104]	; 0x68
 8015778:	2205      	movs	r2, #5
 801577a:	7829      	ldrb	r1, [r5, #0]
 801577c:	4860      	ldr	r0, [pc, #384]	; (8015900 <_vfiprintf_r+0x210>)
 801577e:	f7ea fd5f 	bl	8000240 <memchr>
 8015782:	f105 0801 	add.w	r8, r5, #1
 8015786:	9b04      	ldr	r3, [sp, #16]
 8015788:	2800      	cmp	r0, #0
 801578a:	d131      	bne.n	80157f0 <_vfiprintf_r+0x100>
 801578c:	06d9      	lsls	r1, r3, #27
 801578e:	bf44      	itt	mi
 8015790:	2220      	movmi	r2, #32
 8015792:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015796:	071a      	lsls	r2, r3, #28
 8015798:	bf44      	itt	mi
 801579a:	222b      	movmi	r2, #43	; 0x2b
 801579c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80157a0:	782a      	ldrb	r2, [r5, #0]
 80157a2:	2a2a      	cmp	r2, #42	; 0x2a
 80157a4:	d02c      	beq.n	8015800 <_vfiprintf_r+0x110>
 80157a6:	9a07      	ldr	r2, [sp, #28]
 80157a8:	2100      	movs	r1, #0
 80157aa:	200a      	movs	r0, #10
 80157ac:	46a8      	mov	r8, r5
 80157ae:	3501      	adds	r5, #1
 80157b0:	f898 3000 	ldrb.w	r3, [r8]
 80157b4:	3b30      	subs	r3, #48	; 0x30
 80157b6:	2b09      	cmp	r3, #9
 80157b8:	d96d      	bls.n	8015896 <_vfiprintf_r+0x1a6>
 80157ba:	b371      	cbz	r1, 801581a <_vfiprintf_r+0x12a>
 80157bc:	e026      	b.n	801580c <_vfiprintf_r+0x11c>
 80157be:	4b51      	ldr	r3, [pc, #324]	; (8015904 <_vfiprintf_r+0x214>)
 80157c0:	429c      	cmp	r4, r3
 80157c2:	d101      	bne.n	80157c8 <_vfiprintf_r+0xd8>
 80157c4:	68b4      	ldr	r4, [r6, #8]
 80157c6:	e7a3      	b.n	8015710 <_vfiprintf_r+0x20>
 80157c8:	4b4f      	ldr	r3, [pc, #316]	; (8015908 <_vfiprintf_r+0x218>)
 80157ca:	429c      	cmp	r4, r3
 80157cc:	bf08      	it	eq
 80157ce:	68f4      	ldreq	r4, [r6, #12]
 80157d0:	e79e      	b.n	8015710 <_vfiprintf_r+0x20>
 80157d2:	4621      	mov	r1, r4
 80157d4:	4630      	mov	r0, r6
 80157d6:	f7ff fdb9 	bl	801534c <__swsetup_r>
 80157da:	2800      	cmp	r0, #0
 80157dc:	d09e      	beq.n	801571c <_vfiprintf_r+0x2c>
 80157de:	f04f 30ff 	mov.w	r0, #4294967295
 80157e2:	b01d      	add	sp, #116	; 0x74
 80157e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e8:	2b25      	cmp	r3, #37	; 0x25
 80157ea:	d0a7      	beq.n	801573c <_vfiprintf_r+0x4c>
 80157ec:	46a8      	mov	r8, r5
 80157ee:	e7a0      	b.n	8015732 <_vfiprintf_r+0x42>
 80157f0:	4a43      	ldr	r2, [pc, #268]	; (8015900 <_vfiprintf_r+0x210>)
 80157f2:	1a80      	subs	r0, r0, r2
 80157f4:	fa0b f000 	lsl.w	r0, fp, r0
 80157f8:	4318      	orrs	r0, r3
 80157fa:	9004      	str	r0, [sp, #16]
 80157fc:	4645      	mov	r5, r8
 80157fe:	e7bb      	b.n	8015778 <_vfiprintf_r+0x88>
 8015800:	9a03      	ldr	r2, [sp, #12]
 8015802:	1d11      	adds	r1, r2, #4
 8015804:	6812      	ldr	r2, [r2, #0]
 8015806:	9103      	str	r1, [sp, #12]
 8015808:	2a00      	cmp	r2, #0
 801580a:	db01      	blt.n	8015810 <_vfiprintf_r+0x120>
 801580c:	9207      	str	r2, [sp, #28]
 801580e:	e004      	b.n	801581a <_vfiprintf_r+0x12a>
 8015810:	4252      	negs	r2, r2
 8015812:	f043 0302 	orr.w	r3, r3, #2
 8015816:	9207      	str	r2, [sp, #28]
 8015818:	9304      	str	r3, [sp, #16]
 801581a:	f898 3000 	ldrb.w	r3, [r8]
 801581e:	2b2e      	cmp	r3, #46	; 0x2e
 8015820:	d110      	bne.n	8015844 <_vfiprintf_r+0x154>
 8015822:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015826:	2b2a      	cmp	r3, #42	; 0x2a
 8015828:	f108 0101 	add.w	r1, r8, #1
 801582c:	d137      	bne.n	801589e <_vfiprintf_r+0x1ae>
 801582e:	9b03      	ldr	r3, [sp, #12]
 8015830:	1d1a      	adds	r2, r3, #4
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	9203      	str	r2, [sp, #12]
 8015836:	2b00      	cmp	r3, #0
 8015838:	bfb8      	it	lt
 801583a:	f04f 33ff 	movlt.w	r3, #4294967295
 801583e:	f108 0802 	add.w	r8, r8, #2
 8015842:	9305      	str	r3, [sp, #20]
 8015844:	4d31      	ldr	r5, [pc, #196]	; (801590c <_vfiprintf_r+0x21c>)
 8015846:	f898 1000 	ldrb.w	r1, [r8]
 801584a:	2203      	movs	r2, #3
 801584c:	4628      	mov	r0, r5
 801584e:	f7ea fcf7 	bl	8000240 <memchr>
 8015852:	b140      	cbz	r0, 8015866 <_vfiprintf_r+0x176>
 8015854:	2340      	movs	r3, #64	; 0x40
 8015856:	1b40      	subs	r0, r0, r5
 8015858:	fa03 f000 	lsl.w	r0, r3, r0
 801585c:	9b04      	ldr	r3, [sp, #16]
 801585e:	4303      	orrs	r3, r0
 8015860:	9304      	str	r3, [sp, #16]
 8015862:	f108 0801 	add.w	r8, r8, #1
 8015866:	f898 1000 	ldrb.w	r1, [r8]
 801586a:	4829      	ldr	r0, [pc, #164]	; (8015910 <_vfiprintf_r+0x220>)
 801586c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015870:	2206      	movs	r2, #6
 8015872:	f108 0701 	add.w	r7, r8, #1
 8015876:	f7ea fce3 	bl	8000240 <memchr>
 801587a:	2800      	cmp	r0, #0
 801587c:	d034      	beq.n	80158e8 <_vfiprintf_r+0x1f8>
 801587e:	4b25      	ldr	r3, [pc, #148]	; (8015914 <_vfiprintf_r+0x224>)
 8015880:	bb03      	cbnz	r3, 80158c4 <_vfiprintf_r+0x1d4>
 8015882:	9b03      	ldr	r3, [sp, #12]
 8015884:	3307      	adds	r3, #7
 8015886:	f023 0307 	bic.w	r3, r3, #7
 801588a:	3308      	adds	r3, #8
 801588c:	9303      	str	r3, [sp, #12]
 801588e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015890:	444b      	add	r3, r9
 8015892:	9309      	str	r3, [sp, #36]	; 0x24
 8015894:	e74c      	b.n	8015730 <_vfiprintf_r+0x40>
 8015896:	fb00 3202 	mla	r2, r0, r2, r3
 801589a:	2101      	movs	r1, #1
 801589c:	e786      	b.n	80157ac <_vfiprintf_r+0xbc>
 801589e:	2300      	movs	r3, #0
 80158a0:	9305      	str	r3, [sp, #20]
 80158a2:	4618      	mov	r0, r3
 80158a4:	250a      	movs	r5, #10
 80158a6:	4688      	mov	r8, r1
 80158a8:	3101      	adds	r1, #1
 80158aa:	f898 2000 	ldrb.w	r2, [r8]
 80158ae:	3a30      	subs	r2, #48	; 0x30
 80158b0:	2a09      	cmp	r2, #9
 80158b2:	d903      	bls.n	80158bc <_vfiprintf_r+0x1cc>
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d0c5      	beq.n	8015844 <_vfiprintf_r+0x154>
 80158b8:	9005      	str	r0, [sp, #20]
 80158ba:	e7c3      	b.n	8015844 <_vfiprintf_r+0x154>
 80158bc:	fb05 2000 	mla	r0, r5, r0, r2
 80158c0:	2301      	movs	r3, #1
 80158c2:	e7f0      	b.n	80158a6 <_vfiprintf_r+0x1b6>
 80158c4:	ab03      	add	r3, sp, #12
 80158c6:	9300      	str	r3, [sp, #0]
 80158c8:	4622      	mov	r2, r4
 80158ca:	4b13      	ldr	r3, [pc, #76]	; (8015918 <_vfiprintf_r+0x228>)
 80158cc:	a904      	add	r1, sp, #16
 80158ce:	4630      	mov	r0, r6
 80158d0:	f3af 8000 	nop.w
 80158d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80158d8:	4681      	mov	r9, r0
 80158da:	d1d8      	bne.n	801588e <_vfiprintf_r+0x19e>
 80158dc:	89a3      	ldrh	r3, [r4, #12]
 80158de:	065b      	lsls	r3, r3, #25
 80158e0:	f53f af7d 	bmi.w	80157de <_vfiprintf_r+0xee>
 80158e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158e6:	e77c      	b.n	80157e2 <_vfiprintf_r+0xf2>
 80158e8:	ab03      	add	r3, sp, #12
 80158ea:	9300      	str	r3, [sp, #0]
 80158ec:	4622      	mov	r2, r4
 80158ee:	4b0a      	ldr	r3, [pc, #40]	; (8015918 <_vfiprintf_r+0x228>)
 80158f0:	a904      	add	r1, sp, #16
 80158f2:	4630      	mov	r0, r6
 80158f4:	f000 f888 	bl	8015a08 <_printf_i>
 80158f8:	e7ec      	b.n	80158d4 <_vfiprintf_r+0x1e4>
 80158fa:	bf00      	nop
 80158fc:	08018dc8 	.word	0x08018dc8
 8015900:	08018f17 	.word	0x08018f17
 8015904:	08018de8 	.word	0x08018de8
 8015908:	08018da8 	.word	0x08018da8
 801590c:	08018f1d 	.word	0x08018f1d
 8015910:	08018f21 	.word	0x08018f21
 8015914:	00000000 	.word	0x00000000
 8015918:	080156cd 	.word	0x080156cd

0801591c <_printf_common>:
 801591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015920:	4691      	mov	r9, r2
 8015922:	461f      	mov	r7, r3
 8015924:	688a      	ldr	r2, [r1, #8]
 8015926:	690b      	ldr	r3, [r1, #16]
 8015928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801592c:	4293      	cmp	r3, r2
 801592e:	bfb8      	it	lt
 8015930:	4613      	movlt	r3, r2
 8015932:	f8c9 3000 	str.w	r3, [r9]
 8015936:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801593a:	4606      	mov	r6, r0
 801593c:	460c      	mov	r4, r1
 801593e:	b112      	cbz	r2, 8015946 <_printf_common+0x2a>
 8015940:	3301      	adds	r3, #1
 8015942:	f8c9 3000 	str.w	r3, [r9]
 8015946:	6823      	ldr	r3, [r4, #0]
 8015948:	0699      	lsls	r1, r3, #26
 801594a:	bf42      	ittt	mi
 801594c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015950:	3302      	addmi	r3, #2
 8015952:	f8c9 3000 	strmi.w	r3, [r9]
 8015956:	6825      	ldr	r5, [r4, #0]
 8015958:	f015 0506 	ands.w	r5, r5, #6
 801595c:	d107      	bne.n	801596e <_printf_common+0x52>
 801595e:	f104 0a19 	add.w	sl, r4, #25
 8015962:	68e3      	ldr	r3, [r4, #12]
 8015964:	f8d9 2000 	ldr.w	r2, [r9]
 8015968:	1a9b      	subs	r3, r3, r2
 801596a:	429d      	cmp	r5, r3
 801596c:	db29      	blt.n	80159c2 <_printf_common+0xa6>
 801596e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015972:	6822      	ldr	r2, [r4, #0]
 8015974:	3300      	adds	r3, #0
 8015976:	bf18      	it	ne
 8015978:	2301      	movne	r3, #1
 801597a:	0692      	lsls	r2, r2, #26
 801597c:	d42e      	bmi.n	80159dc <_printf_common+0xc0>
 801597e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015982:	4639      	mov	r1, r7
 8015984:	4630      	mov	r0, r6
 8015986:	47c0      	blx	r8
 8015988:	3001      	adds	r0, #1
 801598a:	d021      	beq.n	80159d0 <_printf_common+0xb4>
 801598c:	6823      	ldr	r3, [r4, #0]
 801598e:	68e5      	ldr	r5, [r4, #12]
 8015990:	f8d9 2000 	ldr.w	r2, [r9]
 8015994:	f003 0306 	and.w	r3, r3, #6
 8015998:	2b04      	cmp	r3, #4
 801599a:	bf08      	it	eq
 801599c:	1aad      	subeq	r5, r5, r2
 801599e:	68a3      	ldr	r3, [r4, #8]
 80159a0:	6922      	ldr	r2, [r4, #16]
 80159a2:	bf0c      	ite	eq
 80159a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80159a8:	2500      	movne	r5, #0
 80159aa:	4293      	cmp	r3, r2
 80159ac:	bfc4      	itt	gt
 80159ae:	1a9b      	subgt	r3, r3, r2
 80159b0:	18ed      	addgt	r5, r5, r3
 80159b2:	f04f 0900 	mov.w	r9, #0
 80159b6:	341a      	adds	r4, #26
 80159b8:	454d      	cmp	r5, r9
 80159ba:	d11b      	bne.n	80159f4 <_printf_common+0xd8>
 80159bc:	2000      	movs	r0, #0
 80159be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159c2:	2301      	movs	r3, #1
 80159c4:	4652      	mov	r2, sl
 80159c6:	4639      	mov	r1, r7
 80159c8:	4630      	mov	r0, r6
 80159ca:	47c0      	blx	r8
 80159cc:	3001      	adds	r0, #1
 80159ce:	d103      	bne.n	80159d8 <_printf_common+0xbc>
 80159d0:	f04f 30ff 	mov.w	r0, #4294967295
 80159d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159d8:	3501      	adds	r5, #1
 80159da:	e7c2      	b.n	8015962 <_printf_common+0x46>
 80159dc:	18e1      	adds	r1, r4, r3
 80159de:	1c5a      	adds	r2, r3, #1
 80159e0:	2030      	movs	r0, #48	; 0x30
 80159e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80159e6:	4422      	add	r2, r4
 80159e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80159ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80159f0:	3302      	adds	r3, #2
 80159f2:	e7c4      	b.n	801597e <_printf_common+0x62>
 80159f4:	2301      	movs	r3, #1
 80159f6:	4622      	mov	r2, r4
 80159f8:	4639      	mov	r1, r7
 80159fa:	4630      	mov	r0, r6
 80159fc:	47c0      	blx	r8
 80159fe:	3001      	adds	r0, #1
 8015a00:	d0e6      	beq.n	80159d0 <_printf_common+0xb4>
 8015a02:	f109 0901 	add.w	r9, r9, #1
 8015a06:	e7d7      	b.n	80159b8 <_printf_common+0x9c>

08015a08 <_printf_i>:
 8015a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a0c:	4617      	mov	r7, r2
 8015a0e:	7e0a      	ldrb	r2, [r1, #24]
 8015a10:	b085      	sub	sp, #20
 8015a12:	2a6e      	cmp	r2, #110	; 0x6e
 8015a14:	4698      	mov	r8, r3
 8015a16:	4606      	mov	r6, r0
 8015a18:	460c      	mov	r4, r1
 8015a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a1c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8015a20:	f000 80bc 	beq.w	8015b9c <_printf_i+0x194>
 8015a24:	d81a      	bhi.n	8015a5c <_printf_i+0x54>
 8015a26:	2a63      	cmp	r2, #99	; 0x63
 8015a28:	d02e      	beq.n	8015a88 <_printf_i+0x80>
 8015a2a:	d80a      	bhi.n	8015a42 <_printf_i+0x3a>
 8015a2c:	2a00      	cmp	r2, #0
 8015a2e:	f000 80c8 	beq.w	8015bc2 <_printf_i+0x1ba>
 8015a32:	2a58      	cmp	r2, #88	; 0x58
 8015a34:	f000 808a 	beq.w	8015b4c <_printf_i+0x144>
 8015a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8015a40:	e02a      	b.n	8015a98 <_printf_i+0x90>
 8015a42:	2a64      	cmp	r2, #100	; 0x64
 8015a44:	d001      	beq.n	8015a4a <_printf_i+0x42>
 8015a46:	2a69      	cmp	r2, #105	; 0x69
 8015a48:	d1f6      	bne.n	8015a38 <_printf_i+0x30>
 8015a4a:	6821      	ldr	r1, [r4, #0]
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8015a52:	d023      	beq.n	8015a9c <_printf_i+0x94>
 8015a54:	1d11      	adds	r1, r2, #4
 8015a56:	6019      	str	r1, [r3, #0]
 8015a58:	6813      	ldr	r3, [r2, #0]
 8015a5a:	e027      	b.n	8015aac <_printf_i+0xa4>
 8015a5c:	2a73      	cmp	r2, #115	; 0x73
 8015a5e:	f000 80b4 	beq.w	8015bca <_printf_i+0x1c2>
 8015a62:	d808      	bhi.n	8015a76 <_printf_i+0x6e>
 8015a64:	2a6f      	cmp	r2, #111	; 0x6f
 8015a66:	d02a      	beq.n	8015abe <_printf_i+0xb6>
 8015a68:	2a70      	cmp	r2, #112	; 0x70
 8015a6a:	d1e5      	bne.n	8015a38 <_printf_i+0x30>
 8015a6c:	680a      	ldr	r2, [r1, #0]
 8015a6e:	f042 0220 	orr.w	r2, r2, #32
 8015a72:	600a      	str	r2, [r1, #0]
 8015a74:	e003      	b.n	8015a7e <_printf_i+0x76>
 8015a76:	2a75      	cmp	r2, #117	; 0x75
 8015a78:	d021      	beq.n	8015abe <_printf_i+0xb6>
 8015a7a:	2a78      	cmp	r2, #120	; 0x78
 8015a7c:	d1dc      	bne.n	8015a38 <_printf_i+0x30>
 8015a7e:	2278      	movs	r2, #120	; 0x78
 8015a80:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8015a84:	496e      	ldr	r1, [pc, #440]	; (8015c40 <_printf_i+0x238>)
 8015a86:	e064      	b.n	8015b52 <_printf_i+0x14a>
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8015a8e:	1d11      	adds	r1, r2, #4
 8015a90:	6019      	str	r1, [r3, #0]
 8015a92:	6813      	ldr	r3, [r2, #0]
 8015a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a98:	2301      	movs	r3, #1
 8015a9a:	e0a3      	b.n	8015be4 <_printf_i+0x1dc>
 8015a9c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8015aa0:	f102 0104 	add.w	r1, r2, #4
 8015aa4:	6019      	str	r1, [r3, #0]
 8015aa6:	d0d7      	beq.n	8015a58 <_printf_i+0x50>
 8015aa8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	da03      	bge.n	8015ab8 <_printf_i+0xb0>
 8015ab0:	222d      	movs	r2, #45	; 0x2d
 8015ab2:	425b      	negs	r3, r3
 8015ab4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015ab8:	4962      	ldr	r1, [pc, #392]	; (8015c44 <_printf_i+0x23c>)
 8015aba:	220a      	movs	r2, #10
 8015abc:	e017      	b.n	8015aee <_printf_i+0xe6>
 8015abe:	6820      	ldr	r0, [r4, #0]
 8015ac0:	6819      	ldr	r1, [r3, #0]
 8015ac2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015ac6:	d003      	beq.n	8015ad0 <_printf_i+0xc8>
 8015ac8:	1d08      	adds	r0, r1, #4
 8015aca:	6018      	str	r0, [r3, #0]
 8015acc:	680b      	ldr	r3, [r1, #0]
 8015ace:	e006      	b.n	8015ade <_printf_i+0xd6>
 8015ad0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015ad4:	f101 0004 	add.w	r0, r1, #4
 8015ad8:	6018      	str	r0, [r3, #0]
 8015ada:	d0f7      	beq.n	8015acc <_printf_i+0xc4>
 8015adc:	880b      	ldrh	r3, [r1, #0]
 8015ade:	4959      	ldr	r1, [pc, #356]	; (8015c44 <_printf_i+0x23c>)
 8015ae0:	2a6f      	cmp	r2, #111	; 0x6f
 8015ae2:	bf14      	ite	ne
 8015ae4:	220a      	movne	r2, #10
 8015ae6:	2208      	moveq	r2, #8
 8015ae8:	2000      	movs	r0, #0
 8015aea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8015aee:	6865      	ldr	r5, [r4, #4]
 8015af0:	60a5      	str	r5, [r4, #8]
 8015af2:	2d00      	cmp	r5, #0
 8015af4:	f2c0 809c 	blt.w	8015c30 <_printf_i+0x228>
 8015af8:	6820      	ldr	r0, [r4, #0]
 8015afa:	f020 0004 	bic.w	r0, r0, #4
 8015afe:	6020      	str	r0, [r4, #0]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d13f      	bne.n	8015b84 <_printf_i+0x17c>
 8015b04:	2d00      	cmp	r5, #0
 8015b06:	f040 8095 	bne.w	8015c34 <_printf_i+0x22c>
 8015b0a:	4675      	mov	r5, lr
 8015b0c:	2a08      	cmp	r2, #8
 8015b0e:	d10b      	bne.n	8015b28 <_printf_i+0x120>
 8015b10:	6823      	ldr	r3, [r4, #0]
 8015b12:	07da      	lsls	r2, r3, #31
 8015b14:	d508      	bpl.n	8015b28 <_printf_i+0x120>
 8015b16:	6923      	ldr	r3, [r4, #16]
 8015b18:	6862      	ldr	r2, [r4, #4]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	bfde      	ittt	le
 8015b1e:	2330      	movle	r3, #48	; 0x30
 8015b20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015b24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015b28:	ebae 0305 	sub.w	r3, lr, r5
 8015b2c:	6123      	str	r3, [r4, #16]
 8015b2e:	f8cd 8000 	str.w	r8, [sp]
 8015b32:	463b      	mov	r3, r7
 8015b34:	aa03      	add	r2, sp, #12
 8015b36:	4621      	mov	r1, r4
 8015b38:	4630      	mov	r0, r6
 8015b3a:	f7ff feef 	bl	801591c <_printf_common>
 8015b3e:	3001      	adds	r0, #1
 8015b40:	d155      	bne.n	8015bee <_printf_i+0x1e6>
 8015b42:	f04f 30ff 	mov.w	r0, #4294967295
 8015b46:	b005      	add	sp, #20
 8015b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b4c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8015b50:	493c      	ldr	r1, [pc, #240]	; (8015c44 <_printf_i+0x23c>)
 8015b52:	6822      	ldr	r2, [r4, #0]
 8015b54:	6818      	ldr	r0, [r3, #0]
 8015b56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8015b5a:	f100 0504 	add.w	r5, r0, #4
 8015b5e:	601d      	str	r5, [r3, #0]
 8015b60:	d001      	beq.n	8015b66 <_printf_i+0x15e>
 8015b62:	6803      	ldr	r3, [r0, #0]
 8015b64:	e002      	b.n	8015b6c <_printf_i+0x164>
 8015b66:	0655      	lsls	r5, r2, #25
 8015b68:	d5fb      	bpl.n	8015b62 <_printf_i+0x15a>
 8015b6a:	8803      	ldrh	r3, [r0, #0]
 8015b6c:	07d0      	lsls	r0, r2, #31
 8015b6e:	bf44      	itt	mi
 8015b70:	f042 0220 	orrmi.w	r2, r2, #32
 8015b74:	6022      	strmi	r2, [r4, #0]
 8015b76:	b91b      	cbnz	r3, 8015b80 <_printf_i+0x178>
 8015b78:	6822      	ldr	r2, [r4, #0]
 8015b7a:	f022 0220 	bic.w	r2, r2, #32
 8015b7e:	6022      	str	r2, [r4, #0]
 8015b80:	2210      	movs	r2, #16
 8015b82:	e7b1      	b.n	8015ae8 <_printf_i+0xe0>
 8015b84:	4675      	mov	r5, lr
 8015b86:	fbb3 f0f2 	udiv	r0, r3, r2
 8015b8a:	fb02 3310 	mls	r3, r2, r0, r3
 8015b8e:	5ccb      	ldrb	r3, [r1, r3]
 8015b90:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015b94:	4603      	mov	r3, r0
 8015b96:	2800      	cmp	r0, #0
 8015b98:	d1f5      	bne.n	8015b86 <_printf_i+0x17e>
 8015b9a:	e7b7      	b.n	8015b0c <_printf_i+0x104>
 8015b9c:	6808      	ldr	r0, [r1, #0]
 8015b9e:	681a      	ldr	r2, [r3, #0]
 8015ba0:	6949      	ldr	r1, [r1, #20]
 8015ba2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015ba6:	d004      	beq.n	8015bb2 <_printf_i+0x1aa>
 8015ba8:	1d10      	adds	r0, r2, #4
 8015baa:	6018      	str	r0, [r3, #0]
 8015bac:	6813      	ldr	r3, [r2, #0]
 8015bae:	6019      	str	r1, [r3, #0]
 8015bb0:	e007      	b.n	8015bc2 <_printf_i+0x1ba>
 8015bb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015bb6:	f102 0004 	add.w	r0, r2, #4
 8015bba:	6018      	str	r0, [r3, #0]
 8015bbc:	6813      	ldr	r3, [r2, #0]
 8015bbe:	d0f6      	beq.n	8015bae <_printf_i+0x1a6>
 8015bc0:	8019      	strh	r1, [r3, #0]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	6123      	str	r3, [r4, #16]
 8015bc6:	4675      	mov	r5, lr
 8015bc8:	e7b1      	b.n	8015b2e <_printf_i+0x126>
 8015bca:	681a      	ldr	r2, [r3, #0]
 8015bcc:	1d11      	adds	r1, r2, #4
 8015bce:	6019      	str	r1, [r3, #0]
 8015bd0:	6815      	ldr	r5, [r2, #0]
 8015bd2:	6862      	ldr	r2, [r4, #4]
 8015bd4:	2100      	movs	r1, #0
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	f7ea fb32 	bl	8000240 <memchr>
 8015bdc:	b108      	cbz	r0, 8015be2 <_printf_i+0x1da>
 8015bde:	1b40      	subs	r0, r0, r5
 8015be0:	6060      	str	r0, [r4, #4]
 8015be2:	6863      	ldr	r3, [r4, #4]
 8015be4:	6123      	str	r3, [r4, #16]
 8015be6:	2300      	movs	r3, #0
 8015be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bec:	e79f      	b.n	8015b2e <_printf_i+0x126>
 8015bee:	6923      	ldr	r3, [r4, #16]
 8015bf0:	462a      	mov	r2, r5
 8015bf2:	4639      	mov	r1, r7
 8015bf4:	4630      	mov	r0, r6
 8015bf6:	47c0      	blx	r8
 8015bf8:	3001      	adds	r0, #1
 8015bfa:	d0a2      	beq.n	8015b42 <_printf_i+0x13a>
 8015bfc:	6823      	ldr	r3, [r4, #0]
 8015bfe:	079b      	lsls	r3, r3, #30
 8015c00:	d507      	bpl.n	8015c12 <_printf_i+0x20a>
 8015c02:	2500      	movs	r5, #0
 8015c04:	f104 0919 	add.w	r9, r4, #25
 8015c08:	68e3      	ldr	r3, [r4, #12]
 8015c0a:	9a03      	ldr	r2, [sp, #12]
 8015c0c:	1a9b      	subs	r3, r3, r2
 8015c0e:	429d      	cmp	r5, r3
 8015c10:	db05      	blt.n	8015c1e <_printf_i+0x216>
 8015c12:	68e0      	ldr	r0, [r4, #12]
 8015c14:	9b03      	ldr	r3, [sp, #12]
 8015c16:	4298      	cmp	r0, r3
 8015c18:	bfb8      	it	lt
 8015c1a:	4618      	movlt	r0, r3
 8015c1c:	e793      	b.n	8015b46 <_printf_i+0x13e>
 8015c1e:	2301      	movs	r3, #1
 8015c20:	464a      	mov	r2, r9
 8015c22:	4639      	mov	r1, r7
 8015c24:	4630      	mov	r0, r6
 8015c26:	47c0      	blx	r8
 8015c28:	3001      	adds	r0, #1
 8015c2a:	d08a      	beq.n	8015b42 <_printf_i+0x13a>
 8015c2c:	3501      	adds	r5, #1
 8015c2e:	e7eb      	b.n	8015c08 <_printf_i+0x200>
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d1a7      	bne.n	8015b84 <_printf_i+0x17c>
 8015c34:	780b      	ldrb	r3, [r1, #0]
 8015c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c3e:	e765      	b.n	8015b0c <_printf_i+0x104>
 8015c40:	08018f39 	.word	0x08018f39
 8015c44:	08018f28 	.word	0x08018f28

08015c48 <_read_r>:
 8015c48:	b538      	push	{r3, r4, r5, lr}
 8015c4a:	4c07      	ldr	r4, [pc, #28]	; (8015c68 <_read_r+0x20>)
 8015c4c:	4605      	mov	r5, r0
 8015c4e:	4608      	mov	r0, r1
 8015c50:	4611      	mov	r1, r2
 8015c52:	2200      	movs	r2, #0
 8015c54:	6022      	str	r2, [r4, #0]
 8015c56:	461a      	mov	r2, r3
 8015c58:	f7fc fbe2 	bl	8012420 <_read>
 8015c5c:	1c43      	adds	r3, r0, #1
 8015c5e:	d102      	bne.n	8015c66 <_read_r+0x1e>
 8015c60:	6823      	ldr	r3, [r4, #0]
 8015c62:	b103      	cbz	r3, 8015c66 <_read_r+0x1e>
 8015c64:	602b      	str	r3, [r5, #0]
 8015c66:	bd38      	pop	{r3, r4, r5, pc}
 8015c68:	20010b4c 	.word	0x20010b4c

08015c6c <_fstat_r>:
 8015c6c:	b538      	push	{r3, r4, r5, lr}
 8015c6e:	4c07      	ldr	r4, [pc, #28]	; (8015c8c <_fstat_r+0x20>)
 8015c70:	2300      	movs	r3, #0
 8015c72:	4605      	mov	r5, r0
 8015c74:	4608      	mov	r0, r1
 8015c76:	4611      	mov	r1, r2
 8015c78:	6023      	str	r3, [r4, #0]
 8015c7a:	f000 f821 	bl	8015cc0 <_fstat>
 8015c7e:	1c43      	adds	r3, r0, #1
 8015c80:	d102      	bne.n	8015c88 <_fstat_r+0x1c>
 8015c82:	6823      	ldr	r3, [r4, #0]
 8015c84:	b103      	cbz	r3, 8015c88 <_fstat_r+0x1c>
 8015c86:	602b      	str	r3, [r5, #0]
 8015c88:	bd38      	pop	{r3, r4, r5, pc}
 8015c8a:	bf00      	nop
 8015c8c:	20010b4c 	.word	0x20010b4c

08015c90 <_isatty_r>:
 8015c90:	b538      	push	{r3, r4, r5, lr}
 8015c92:	4c06      	ldr	r4, [pc, #24]	; (8015cac <_isatty_r+0x1c>)
 8015c94:	2300      	movs	r3, #0
 8015c96:	4605      	mov	r5, r0
 8015c98:	4608      	mov	r0, r1
 8015c9a:	6023      	str	r3, [r4, #0]
 8015c9c:	f000 f818 	bl	8015cd0 <_isatty>
 8015ca0:	1c43      	adds	r3, r0, #1
 8015ca2:	d102      	bne.n	8015caa <_isatty_r+0x1a>
 8015ca4:	6823      	ldr	r3, [r4, #0]
 8015ca6:	b103      	cbz	r3, 8015caa <_isatty_r+0x1a>
 8015ca8:	602b      	str	r3, [r5, #0]
 8015caa:	bd38      	pop	{r3, r4, r5, pc}
 8015cac:	20010b4c 	.word	0x20010b4c

08015cb0 <_close>:
 8015cb0:	4b02      	ldr	r3, [pc, #8]	; (8015cbc <_close+0xc>)
 8015cb2:	2258      	movs	r2, #88	; 0x58
 8015cb4:	601a      	str	r2, [r3, #0]
 8015cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cba:	4770      	bx	lr
 8015cbc:	20010b4c 	.word	0x20010b4c

08015cc0 <_fstat>:
 8015cc0:	4b02      	ldr	r3, [pc, #8]	; (8015ccc <_fstat+0xc>)
 8015cc2:	2258      	movs	r2, #88	; 0x58
 8015cc4:	601a      	str	r2, [r3, #0]
 8015cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cca:	4770      	bx	lr
 8015ccc:	20010b4c 	.word	0x20010b4c

08015cd0 <_isatty>:
 8015cd0:	4b02      	ldr	r3, [pc, #8]	; (8015cdc <_isatty+0xc>)
 8015cd2:	2258      	movs	r2, #88	; 0x58
 8015cd4:	601a      	str	r2, [r3, #0]
 8015cd6:	2000      	movs	r0, #0
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop
 8015cdc:	20010b4c 	.word	0x20010b4c

08015ce0 <_lseek>:
 8015ce0:	4b02      	ldr	r3, [pc, #8]	; (8015cec <_lseek+0xc>)
 8015ce2:	2258      	movs	r2, #88	; 0x58
 8015ce4:	601a      	str	r2, [r3, #0]
 8015ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cea:	4770      	bx	lr
 8015cec:	20010b4c 	.word	0x20010b4c

08015cf0 <_sbrk>:
 8015cf0:	4b04      	ldr	r3, [pc, #16]	; (8015d04 <_sbrk+0x14>)
 8015cf2:	6819      	ldr	r1, [r3, #0]
 8015cf4:	4602      	mov	r2, r0
 8015cf6:	b909      	cbnz	r1, 8015cfc <_sbrk+0xc>
 8015cf8:	4903      	ldr	r1, [pc, #12]	; (8015d08 <_sbrk+0x18>)
 8015cfa:	6019      	str	r1, [r3, #0]
 8015cfc:	6818      	ldr	r0, [r3, #0]
 8015cfe:	4402      	add	r2, r0
 8015d00:	601a      	str	r2, [r3, #0]
 8015d02:	4770      	bx	lr
 8015d04:	2000f4e4 	.word	0x2000f4e4
 8015d08:	20010b50 	.word	0x20010b50

08015d0c <_init>:
 8015d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d0e:	bf00      	nop
 8015d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d12:	bc08      	pop	{r3}
 8015d14:	469e      	mov	lr, r3
 8015d16:	4770      	bx	lr

08015d18 <_fini>:
 8015d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d1a:	bf00      	nop
 8015d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d1e:	bc08      	pop	{r3}
 8015d20:	469e      	mov	lr, r3
 8015d22:	4770      	bx	lr
