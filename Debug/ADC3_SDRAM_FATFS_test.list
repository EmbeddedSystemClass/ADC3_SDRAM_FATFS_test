
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016da8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003340  08016f78  08016f78  00026f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a2b8  0801a2b8  0002a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a2c0  0801a2c0  0002a2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a2c4  0801a2c4  0002a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  20000000  0801a2c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005514  20000210  0801a4d8  00030210  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005724  0801a4d8  00035724  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004a2a4  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000824d  00000000  00000000  0007a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000026e0  00000000  00000000  00082738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000023a8  00000000  00000000  00084e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019ad7  00000000  00000000  000871c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000c7a9  00000000  00000000  000a0c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000ad440  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000b3f4  00000000  00000000  000ad4bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000006c  00000000  00000000  000b88b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000e3  00000000  00000000  000b891c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016f60 	.word	0x08016f60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08016f60 	.word	0x08016f60

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2uiz>:
 8000c00:	004a      	lsls	r2, r1, #1
 8000c02:	d211      	bcs.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c08:	d211      	bcs.n	8000c2e <__aeabi_d2uiz+0x2e>
 8000c0a:	d50d      	bpl.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c14:	d40e      	bmi.n	8000c34 <__aeabi_d2uiz+0x34>
 8000c16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c22:	fa23 f002 	lsr.w	r0, r3, r2
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d102      	bne.n	8000c3a <__aeabi_d2uiz+0x3a>
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_d2f>:
 8000c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c48:	bf24      	itt	cs
 8000c4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c52:	d90d      	bls.n	8000c70 <__aeabi_d2f+0x30>
 8000c54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c74:	d121      	bne.n	8000cba <__aeabi_d2f+0x7a>
 8000c76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7a:	bfbc      	itt	lt
 8000c7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	4770      	bxlt	lr
 8000c82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8a:	f1c2 0218 	rsb	r2, r2, #24
 8000c8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c96:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ca0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cac:	ea40 000c 	orr.w	r0, r0, ip
 8000cb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb8:	e7cc      	b.n	8000c54 <__aeabi_d2f+0x14>
 8000cba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cbe:	d107      	bne.n	8000cd0 <__aeabi_d2f+0x90>
 8000cc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bxne	lr
 8000cd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_uldivmod>:
 8000ce0:	b953      	cbnz	r3, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce2:	b94a      	cbnz	r2, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	2800      	cmpeq	r0, #0
 8000cea:	bf1c      	itt	ne
 8000cec:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf4:	f000 b97a 	b.w	8000fec <__aeabi_idiv0>
 8000cf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d00:	f000 f806 	bl	8000d10 <__udivmoddi4>
 8000d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0c:	b004      	add	sp, #16
 8000d0e:	4770      	bx	lr

08000d10 <__udivmoddi4>:
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	468c      	mov	ip, r1
 8000d16:	460d      	mov	r5, r1
 8000d18:	4604      	mov	r4, r0
 8000d1a:	9e08      	ldr	r6, [sp, #32]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d151      	bne.n	8000dc4 <__udivmoddi4+0xb4>
 8000d20:	428a      	cmp	r2, r1
 8000d22:	4617      	mov	r7, r2
 8000d24:	d96d      	bls.n	8000e02 <__udivmoddi4+0xf2>
 8000d26:	fab2 fe82 	clz	lr, r2
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d00b      	beq.n	8000d48 <__udivmoddi4+0x38>
 8000d30:	f1ce 0c20 	rsb	ip, lr, #32
 8000d34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d4c:	0c25      	lsrs	r5, r4, #16
 8000d4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d52:	fa1f f987 	uxth.w	r9, r7
 8000d56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d5e:	fb08 f309 	mul.w	r3, r8, r9
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x6c>
 8000d66:	19ed      	adds	r5, r5, r7
 8000d68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d6c:	f080 8123 	bcs.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f240 8120 	bls.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aed      	subs	r5, r5, r3
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	fb00 f909 	mul.w	r9, r0, r9
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x98>
 8000d94:	19e4      	adds	r4, r4, r7
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	f080 810a 	bcs.w	8000fb2 <__udivmoddi4+0x2a2>
 8000d9e:	45a1      	cmp	r9, r4
 8000da0:	f240 8107 	bls.w	8000fb2 <__udivmoddi4+0x2a2>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 0409 	sub.w	r4, r4, r9
 8000dac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db0:	2100      	movs	r1, #0
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d061      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000db6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6034      	str	r4, [r6, #0]
 8000dbe:	6073      	str	r3, [r6, #4]
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xc8>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d054      	beq.n	8000e76 <__udivmoddi4+0x166>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	f040 808e 	bne.w	8000efe <__udivmoddi4+0x1ee>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xdc>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80fa 	bhi.w	8000fe0 <__udivmoddi4+0x2d0>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb65 0503 	sbc.w	r5, r5, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	46ac      	mov	ip, r5
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d03f      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000dfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b912      	cbnz	r2, 8000e0a <__udivmoddi4+0xfa>
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e0a:	fab7 fe87 	clz	lr, r7
 8000e0e:	f1be 0f00 	cmp.w	lr, #0
 8000e12:	d134      	bne.n	8000e7e <__udivmoddi4+0x16e>
 8000e14:	1beb      	subs	r3, r5, r7
 8000e16:	0c3a      	lsrs	r2, r7, #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e22:	0c25      	lsrs	r5, r4, #16
 8000e24:	fb02 3318 	mls	r3, r2, r8, r3
 8000e28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2c:	fb0c f308 	mul.w	r3, ip, r8
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x134>
 8000e34:	19ed      	adds	r5, r5, r7
 8000e36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x132>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	f200 80d1 	bhi.w	8000fe4 <__udivmoddi4+0x2d4>
 8000e42:	4680      	mov	r8, r0
 8000e44:	1aed      	subs	r5, r5, r3
 8000e46:	b2a3      	uxth	r3, r4
 8000e48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e54:	fb0c fc00 	mul.w	ip, ip, r0
 8000e58:	45a4      	cmp	ip, r4
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x15c>
 8000e5c:	19e4      	adds	r4, r4, r7
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x15a>
 8000e64:	45a4      	cmp	ip, r4
 8000e66:	f200 80b8 	bhi.w	8000fda <__udivmoddi4+0x2ca>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	eba4 040c 	sub.w	r4, r4, ip
 8000e70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e74:	e79d      	b.n	8000db2 <__udivmoddi4+0xa2>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	f1ce 0420 	rsb	r4, lr, #32
 8000e82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e8e:	0c3a      	lsrs	r2, r7, #16
 8000e90:	fa25 f404 	lsr.w	r4, r5, r4
 8000e94:	ea48 0803 	orr.w	r8, r8, r3
 8000e98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ea0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000eac:	fb01 f30c 	mul.w	r3, r1, ip
 8000eb0:	42ab      	cmp	r3, r5
 8000eb2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000eb6:	d909      	bls.n	8000ecc <__udivmoddi4+0x1bc>
 8000eb8:	19ed      	adds	r5, r5, r7
 8000eba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ebe:	f080 808a 	bcs.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec2:	42ab      	cmp	r3, r5
 8000ec4:	f240 8087 	bls.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	443d      	add	r5, r7
 8000ecc:	1aeb      	subs	r3, r5, r3
 8000ece:	fa1f f588 	uxth.w	r5, r8
 8000ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ed6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ede:	fb00 f30c 	mul.w	r3, r0, ip
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1e6>
 8000ee6:	19ed      	adds	r5, r5, r7
 8000ee8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eec:	d26f      	bcs.n	8000fce <__udivmoddi4+0x2be>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d96d      	bls.n	8000fce <__udivmoddi4+0x2be>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	443d      	add	r5, r7
 8000ef6:	1aeb      	subs	r3, r5, r3
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	e78f      	b.n	8000e1e <__udivmoddi4+0x10e>
 8000efe:	f1c1 0720 	rsb	r7, r1, #32
 8000f02:	fa22 f807 	lsr.w	r8, r2, r7
 8000f06:	408b      	lsls	r3, r1
 8000f08:	fa05 f401 	lsl.w	r4, r5, r1
 8000f0c:	ea48 0303 	orr.w	r3, r8, r3
 8000f10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f2a:	fa1f f883 	uxth.w	r8, r3
 8000f2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f32:	fb09 f408 	mul.w	r4, r9, r8
 8000f36:	42ac      	cmp	r4, r5
 8000f38:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x244>
 8000f42:	18ed      	adds	r5, r5, r3
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d243      	bcs.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	d941      	bls.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	441d      	add	r5, r3
 8000f54:	1b2d      	subs	r5, r5, r4
 8000f56:	fa1f fe8e 	uxth.w	lr, lr
 8000f5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x26e>
 8000f6e:	18e4      	adds	r4, r4, r3
 8000f70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f74:	d229      	bcs.n	8000fca <__udivmoddi4+0x2ba>
 8000f76:	45a0      	cmp	r8, r4
 8000f78:	d927      	bls.n	8000fca <__udivmoddi4+0x2ba>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	441c      	add	r4, r3
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba4 0408 	sub.w	r4, r4, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454c      	cmp	r4, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	464d      	mov	r5, r9
 8000f90:	d315      	bcc.n	8000fbe <__udivmoddi4+0x2ae>
 8000f92:	d012      	beq.n	8000fba <__udivmoddi4+0x2aa>
 8000f94:	b156      	cbz	r6, 8000fac <__udivmoddi4+0x29c>
 8000f96:	ebba 030e 	subs.w	r3, sl, lr
 8000f9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000fa2:	40cb      	lsrs	r3, r1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	40cc      	lsrs	r4, r1
 8000fa8:	6037      	str	r7, [r6, #0]
 8000faa:	6074      	str	r4, [r6, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e6f8      	b.n	8000da8 <__udivmoddi4+0x98>
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	e6e0      	b.n	8000d7c <__udivmoddi4+0x6c>
 8000fba:	45c2      	cmp	sl, r8
 8000fbc:	d2ea      	bcs.n	8000f94 <__udivmoddi4+0x284>
 8000fbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7e4      	b.n	8000f94 <__udivmoddi4+0x284>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	e7d7      	b.n	8000f7e <__udivmoddi4+0x26e>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	e791      	b.n	8000ef6 <__udivmoddi4+0x1e6>
 8000fd2:	4681      	mov	r9, r0
 8000fd4:	e7be      	b.n	8000f54 <__udivmoddi4+0x244>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	e778      	b.n	8000ecc <__udivmoddi4+0x1bc>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	443c      	add	r4, r7
 8000fde:	e745      	b.n	8000e6c <__udivmoddi4+0x15c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xe6>
 8000fe4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe8:	443d      	add	r5, r7
 8000fea:	e72b      	b.n	8000e44 <__udivmoddi4+0x134>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001002:	2235      	movs	r2, #53	; 0x35
 8001004:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001008:	220b      	movs	r2, #11
 800100a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <BSP_LCD_Init+0xcc>)
 800100e:	f240 121b 	movw	r2, #283	; 0x11b
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001016:	f240 2215 	movw	r2, #533	; 0x215
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <BSP_LCD_Init+0xcc>)
 800101e:	f240 121d 	movw	r2, #285	; 0x11d
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001026:	f240 2235 	movw	r2, #565	; 0x235
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800102c:	2100      	movs	r1, #0
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001030:	f000 fcae 	bl	8001990 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001036:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800103a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <BSP_LCD_Init+0xcc>)
 800103e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001042:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <BSP_LCD_Init+0xcc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <BSP_LCD_Init+0xcc>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <BSP_LCD_Init+0xcc>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <BSP_LCD_Init+0xd0>)
 8001078:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <BSP_LCD_Init+0xcc>)
 800107c:	f004 f8dc 	bl	8005238 <HAL_LTDC_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001086:	2100      	movs	r1, #0
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <BSP_LCD_Init+0xcc>)
 800108a:	f000 fba7 	bl	80017dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001090:	f003 ffb8 	bl	8005004 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <BSP_LCD_Init+0xd4>)
 800109c:	f002 fa4a 	bl	8003534 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2108      	movs	r1, #8
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <BSP_LCD_Init+0xd8>)
 80010a6:	f002 fa45 	bl	8003534 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80010aa:	f010 f8df 	bl	801126c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <BSP_LCD_Init+0xdc>)
 80010b0:	f000 f8d8 	bl	8001264 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200040bc 	.word	0x200040bc
 80010c0:	40016800 	.word	0x40016800
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40022800 	.word	0x40022800
 80010cc:	20000000 	.word	0x20000000

080010d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <BSP_LCD_GetXSize+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <BSP_LCD_GetXSize+0x24>)
 80010da:	2134      	movs	r1, #52	; 0x34
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	3360      	adds	r3, #96	; 0x60
 80010e4:	681b      	ldr	r3, [r3, #0]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	2000026c 	.word	0x2000026c
 80010f4:	200040bc 	.word	0x200040bc

080010f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <BSP_LCD_GetYSize+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <BSP_LCD_GetYSize+0x24>)
 8001102:	2134      	movs	r1, #52	; 0x34
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3364      	adds	r3, #100	; 0x64
 800110c:	681b      	ldr	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	2000026c 	.word	0x2000026c
 800111c:	200040bc 	.word	0x200040bc

08001120 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001130:	f7ff ffce 	bl	80010d0 <BSP_LCD_GetXSize>
 8001134:	4603      	mov	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800113c:	f7ff ffdc 	bl	80010f8 <BSP_LCD_GetYSize>
 8001140:	4603      	mov	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800116c:	2307      	movs	r3, #7
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001170:	f7ff ffae 	bl	80010d0 <BSP_LCD_GetXSize>
 8001174:	4603      	mov	r3, r0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001178:	f7ff ffbe 	bl	80010f8 <BSP_LCD_GetYSize>
 800117c:	4603      	mov	r3, r0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800118a:	f004 f817 	bl	80051bc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	4911      	ldr	r1, [pc, #68]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3304      	adds	r3, #4
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	490c      	ldr	r1, [pc, #48]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80011b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3740      	adds	r7, #64	; 0x40
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200040bc 	.word	0x200040bc
 80011d8:	20000270 	.word	0x20000270
 80011dc:	20000000 	.word	0x20000000

080011e0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <BSP_LCD_SelectLayer+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
} 
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000026c 	.word	0x2000026c

08001200 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <BSP_LCD_SetTextColor+0x28>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <BSP_LCD_SetTextColor+0x2c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	2000026c 	.word	0x2000026c
 800122c:	20000270 	.word	0x20000270

08001230 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <BSP_LCD_SetBackColor+0x2c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4908      	ldr	r1, [pc, #32]	; (8001260 <BSP_LCD_SetBackColor+0x30>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3304      	adds	r3, #4
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000026c 	.word	0x2000026c
 8001260:	20000270 	.word	0x20000270

08001264 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <BSP_LCD_SetFont+0x2c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <BSP_LCD_SetFont+0x30>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	3308      	adds	r3, #8
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2000026c 	.word	0x2000026c
 8001294:	20000270 	.word	0x20000270

08001298 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <BSP_LCD_GetFont+0x24>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <BSP_LCD_GetFont+0x28>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	3308      	adds	r3, #8
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000026c 	.word	0x2000026c
 80012c0:	20000270 	.word	0x20000270

080012c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <BSP_LCD_Clear+0x48>)
 80012ce:	681c      	ldr	r4, [r3, #0]
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <BSP_LCD_Clear+0x48>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <BSP_LCD_Clear+0x4c>)
 80012d6:	2134      	movs	r1, #52	; 0x34
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	335c      	adds	r3, #92	; 0x5c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461d      	mov	r5, r3
 80012e4:	f7ff fef4 	bl	80010d0 <BSP_LCD_GetXSize>
 80012e8:	4606      	mov	r6, r0
 80012ea:	f7ff ff05 	bl	80010f8 <BSP_LCD_GetYSize>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	4632      	mov	r2, r6
 80012fc:	4629      	mov	r1, r5
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fc1a 	bl	8001b38 <LL_FillBuffer>
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	2000026c 	.word	0x2000026c
 8001310:	200040bc 	.word	0x200040bc

08001314 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	492d      	ldr	r1, [pc, #180]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800133a:	460b      	mov	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4403      	add	r3, r0
 8001344:	3304      	adds	r3, #4
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4403      	add	r3, r0
 8001354:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	491f      	ldr	r1, [pc, #124]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	88da      	ldrh	r2, [r3, #6]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	fb12 f303 	smulbb	r3, r2, r3
 8001374:	b29c      	uxth	r4, r3
 8001376:	f7ff feab 	bl	80010d0 <BSP_LCD_GetXSize>
 800137a:	4603      	mov	r3, r0
 800137c:	b298      	uxth	r0, r3
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4915      	ldr	r1, [pc, #84]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3308      	adds	r3, #8
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	4602      	mov	r2, r0
 8001396:	4621      	mov	r1, r4
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f987 	bl	80016ac <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff1b 	bl	8001200 <BSP_LCD_SetTextColor>
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000026c 	.word	0x2000026c
 80013d8:	20000270 	.word	0x20000270

080013dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	460b      	mov	r3, r1
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3308      	adds	r3, #8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4c14      	ldr	r4, [pc, #80]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4423      	add	r3, r4
 800141a:	3308      	adds	r3, #8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001420:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4423      	add	r3, r4
 8001434:	3308      	adds	r3, #8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	3307      	adds	r3, #7
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <BSP_LCD_DisplayChar+0x66>
 8001440:	3307      	adds	r3, #7
 8001442:	10db      	asrs	r3, r3, #3
 8001444:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001448:	18ca      	adds	r2, r1, r3
 800144a:	88b9      	ldrh	r1, [r7, #4]
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 faba 	bl	80019c8 <DrawChar>
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	2000026c 	.word	0x2000026c
 8001460:	20000270 	.word	0x20000270

08001464 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	460b      	mov	r3, r1
 8001474:	81bb      	strh	r3, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800147a:	2301      	movs	r3, #1
 800147c:	83fb      	strh	r3, [r7, #30]
 800147e:	2300      	movs	r3, #0
 8001480:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800148e:	e002      	b.n	8001496 <BSP_LCD_DisplayStringAt+0x32>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3301      	adds	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	617a      	str	r2, [r7, #20]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f6      	bne.n	8001490 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80014a2:	f7ff fe15 	bl	80010d0 <BSP_LCD_GetXSize>
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	494f      	ldr	r1, [pc, #316]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3308      	adds	r3, #8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01c      	beq.n	8001502 <BSP_LCD_DisplayStringAt+0x9e>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <BSP_LCD_DisplayStringAt+0x98>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12e      	bne.n	800152e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4843      	ldr	r0, [pc, #268]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	3308      	adds	r3, #8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	fb03 f301 	mul.w	r3, r3, r1
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	4413      	add	r3, r2
 80014f8:	83fb      	strh	r3, [r7, #30]
      break;
 80014fa:	e01b      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001500:	e018      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b299      	uxth	r1, r3
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4836      	ldr	r0, [pc, #216]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3308      	adds	r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	fb11 f303 	smulbb	r3, r1, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	83fb      	strh	r3, [r7, #30]
      break;
 800152c:	e002      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	83fb      	strh	r3, [r7, #30]
      break;
 8001532:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <BSP_LCD_DisplayStringAt+0xde>
 800153a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da1d      	bge.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001546:	e01a      	b.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	89b9      	ldrh	r1, [r7, #12]
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff43 	bl	80013dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4923      	ldr	r1, [pc, #140]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	889a      	ldrh	r2, [r3, #4]
 800156c:	8bfb      	ldrh	r3, [r7, #30]
 800156e:	4413      	add	r3, r2
 8001570:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
    i++;
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	3301      	adds	r3, #1
 800157c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2dc      	uxtb	r4, r3
 800158c:	f7ff fda0 	bl	80010d0 <BSP_LCD_GetXSize>
 8001590:	4605      	mov	r5, r0
 8001592:	8bb9      	ldrh	r1, [r7, #28]
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4403      	add	r3, r0
 80015a4:	3308      	adds	r3, #8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	fb03 f301 	mul.w	r3, r3, r1
 80015ae:	1aeb      	subs	r3, r5, r3
 80015b0:	b299      	uxth	r1, r3
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3308      	adds	r3, #8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	4299      	cmp	r1, r3
 80015ca:	bf2c      	ite	cs
 80015cc:	2301      	movcs	r3, #1
 80015ce:	2300      	movcc	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4023      	ands	r3, r4
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1b6      	bne.n	8001548 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000026c 	.word	0x2000026c
 80015e8:	20000270 	.word	0x20000270

080015ec <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015f8:	f7ff fe4e 	bl	8001298 <BSP_LCD_GetFont>
 80015fc:	4603      	mov	r3, r0
 80015fe:	88db      	ldrh	r3, [r3, #6]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	fb12 f303 	smulbb	r3, r2, r3
 8001606:	b299      	uxth	r1, r3
 8001608:	2303      	movs	r3, #3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff29 	bl	8001464 <BSP_LCD_DisplayStringAt>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	460b      	mov	r3, r1
 800162a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001632:	2134      	movs	r1, #52	; 0x34
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3348      	adds	r3, #72	; 0x48
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d116      	bne.n	8001670 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001648:	2134      	movs	r1, #52	; 0x34
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	335c      	adds	r3, #92	; 0x5c
 8001652:	681c      	ldr	r4, [r3, #0]
 8001654:	88bd      	ldrh	r5, [r7, #4]
 8001656:	f7ff fd3b 	bl	80010d0 <BSP_LCD_GetXSize>
 800165a:	4603      	mov	r3, r0
 800165c:	fb03 f205 	mul.w	r2, r3, r5
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4423      	add	r3, r4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b292      	uxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800166e:	e015      	b.n	800169c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001676:	2134      	movs	r1, #52	; 0x34
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	335c      	adds	r3, #92	; 0x5c
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	88bd      	ldrh	r5, [r7, #4]
 8001684:	f7ff fd24 	bl	80010d0 <BSP_LCD_GetXSize>
 8001688:	4603      	mov	r3, r0
 800168a:	fb03 f205 	mul.w	r2, r3, r5
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4423      	add	r3, r4
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	2000026c 	.word	0x2000026c
 80016a8:	200040bc 	.word	0x200040bc

080016ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <BSP_LCD_FillRect+0xec>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd8c 	bl	8001200 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2b      	ldr	r2, [pc, #172]	; (800179c <BSP_LCD_FillRect+0xf0>)
 80016ee:	2134      	movs	r1, #52	; 0x34
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3348      	adds	r3, #72	; 0x48
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d114      	bne.n	8001728 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <BSP_LCD_FillRect+0xf0>)
 8001704:	2134      	movs	r1, #52	; 0x34
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	335c      	adds	r3, #92	; 0x5c
 800170e:	681c      	ldr	r4, [r3, #0]
 8001710:	f7ff fcde 	bl	80010d0 <BSP_LCD_GetXSize>
 8001714:	4602      	mov	r2, r0
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	fb03 f202 	mul.w	r2, r3, r2
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4423      	add	r3, r4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e013      	b.n	8001750 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <BSP_LCD_FillRect+0xf0>)
 800172e:	2134      	movs	r1, #52	; 0x34
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	335c      	adds	r3, #92	; 0x5c
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	f7ff fcc9 	bl	80010d0 <BSP_LCD_GetXSize>
 800173e:	4602      	mov	r2, r0
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4423      	add	r3, r4
 800174e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	68fd      	ldr	r5, [r7, #12]
 8001756:	887e      	ldrh	r6, [r7, #2]
 8001758:	f8b7 8000 	ldrh.w	r8, [r7]
 800175c:	f7ff fcb8 	bl	80010d0 <BSP_LCD_GetXSize>
 8001760:	4602      	mov	r2, r0
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	1ad1      	subs	r1, r2, r3
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <BSP_LCD_FillRect+0xec>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	9100      	str	r1, [sp, #0]
 800177c:	4643      	mov	r3, r8
 800177e:	4632      	mov	r2, r6
 8001780:	4629      	mov	r1, r5
 8001782:	4620      	mov	r0, r4
 8001784:	f000 f9d8 	bl	8001b38 <LL_FillBuffer>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001792:	bf00      	nop
 8001794:	2000026c 	.word	0x2000026c
 8001798:	20000270 	.word	0x20000270
 800179c:	200040bc 	.word	0x200040bc

080017a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	6992      	ldr	r2, [r2, #24]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <BSP_LCD_DisplayOn+0x34>)
 80017bc:	f001 feba 	bl	8003534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80017c0:	2201      	movs	r2, #1
 80017c2:	2108      	movs	r1, #8
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <BSP_LCD_DisplayOn+0x38>)
 80017c6:	f001 feb5 	bl	8003534 <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200040bc 	.word	0x200040bc
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40022800 	.word	0x40022800

080017dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017e6:	4a64      	ldr	r2, [pc, #400]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	4a52      	ldr	r2, [pc, #328]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001876:	4a40      	ldr	r2, [pc, #256]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800188e:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80018be:	2310      	movs	r3, #16
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80018ce:	230e      	movs	r3, #14
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <BSP_LCD_MspInit+0x1a0>)
 80018da:	f001 fc81 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80018e8:	2309      	movs	r3, #9
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <BSP_LCD_MspInit+0x1a4>)
 80018f4:	f001 fc74 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80018f8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001902:	230e      	movs	r3, #14
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 800190e:	f001 fc67 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001912:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800191c:	230e      	movs	r3, #14
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <BSP_LCD_MspInit+0x1ac>)
 8001928:	f001 fc5a 	bl	80031e0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800192c:	23f7      	movs	r3, #247	; 0xf7
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001934:	230e      	movs	r3, #14
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 8001940:	f001 fc4e 	bl	80031e0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 8001956:	f001 fc43 	bl	80031e0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 800196a:	f001 fc39 	bl	80031e0 <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	; 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40021800 	.word	0x40021800
 8001984:	40022000 	.word	0x40022000
 8001988:	40022400 	.word	0x40022400
 800198c:	40022800 	.word	0x40022800

08001990 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 800199c:	2208      	movs	r2, #8
 800199e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a2:	22c0      	movs	r2, #192	; 0xc0
 80019a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a8:	2205      	movs	r2, #5
 80019aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019b6:	f004 fab9 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000288 	.word	0x20000288

080019c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <DrawChar+0x168>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4953      	ldr	r1, [pc, #332]	; (8001b34 <DrawChar+0x16c>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	88db      	ldrh	r3, [r3, #6]
 80019f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <DrawChar+0x168>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <DrawChar+0x16c>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001a10:	8a3b      	ldrh	r3, [r7, #16]
 8001a12:	3307      	adds	r3, #7
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da00      	bge.n	8001a1a <DrawChar+0x52>
 8001a18:	3307      	adds	r3, #7
 8001a1a:	10db      	asrs	r3, r3, #3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	8a3b      	ldrh	r3, [r7, #16]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e076      	b.n	8001b1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a30:	8a3b      	ldrh	r3, [r7, #16]
 8001a32:	3307      	adds	r3, #7
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da00      	bge.n	8001a3a <DrawChar+0x72>
 8001a38:	3307      	adds	r3, #7
 8001a3a:	10db      	asrs	r3, r3, #3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fb03 f302 	mul.w	r3, r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001a4a:	8a3b      	ldrh	r3, [r7, #16]
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da00      	bge.n	8001a54 <DrawChar+0x8c>
 8001a52:	3307      	adds	r3, #7
 8001a54:	10db      	asrs	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <DrawChar+0x98>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <DrawChar+0xa0>
 8001a5e:	e00c      	b.n	8001a7a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	617b      	str	r3, [r7, #20]
      break;
 8001a66:	e016      	b.n	8001a96 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	3201      	adds	r2, #1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
      break;
 8001a78:	e00d      	b.n	8001a96 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	3202      	adds	r2, #2
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e036      	b.n	8001b0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001a9c:	8a3a      	ldrh	r2, [r7, #16]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <DrawChar+0x168>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <DrawChar+0x16c>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fda0 	bl	800161c <BSP_LCD_DrawPixel>
 8001adc:	e012      	b.n	8001b04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <DrawChar+0x168>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4911      	ldr	r1, [pc, #68]	; (8001b34 <DrawChar+0x16c>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fd8c 	bl	800161c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	8a3a      	ldrh	r2, [r7, #16]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8c4      	bhi.n	8001a9c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	8a7a      	ldrh	r2, [r7, #18]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d884      	bhi.n	8001a30 <DrawChar+0x68>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000026c 	.word	0x2000026c
 8001b34:	20000270 	.word	0x20000270

08001b38 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b4c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <LL_FillBuffer+0x8c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <LL_FillBuffer+0x90>)
 8001b54:	2134      	movs	r1, #52	; 0x34
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3348      	adds	r3, #72	; 0x48
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d103      	bne.n	8001b6c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	e002      	b.n	8001b72 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <LL_FillBuffer+0x94>)
 8001b7c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b80:	f001 f896 	bl	8002cb0 <HAL_DMA2D_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b8e:	f001 f9ed 	bl	8002f6c <HAL_DMA2D_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10e      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001ba4:	f001 f8ce 	bl	8002d44 <HAL_DMA2D_Start>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001bae:	210a      	movs	r1, #10
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001bb2:	f001 f8f2 	bl	8002d9a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000022c 	.word	0x2000022c
 8001bc4:	2000026c 	.word	0x2000026c
 8001bc8:	200040bc 	.word	0x200040bc
 8001bcc:	4002b000 	.word	0x4002b000

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fc3b 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f011 feb2 	bl	801395c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f011 fc08 	bl	801340c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	20004164 	.word	0x20004164

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20004164 	.word	0x20004164

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_Delay+0x40>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3f7      	bcc.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000010 	.word	0x20000010

08001c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e031      	b.n	8001d06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f011 fbd9 	bl	8013470 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_ADC_Init+0x84>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa02 	bl	80020e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	ffffeefd 	.word	0xffffeefd

08001d14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x1a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e085      	b.n	8001e3a <HAL_ADC_Start+0x126>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d018      	beq.n	8001d76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6892      	ldr	r2, [r2, #8]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_ADC_Start+0x134>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <HAL_ADC_Start+0x138>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9a      	lsrs	r2, r3, #18
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d059      	beq.n	8001e38 <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_ADC_Start+0x13c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_ADC_Start+0x140>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11c      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	6892      	ldr	r2, [r2, #8]
 8001e08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e013      	b.n	8001e38 <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_ADC_Start+0x144>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_Start+0x124>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	6892      	ldr	r2, [r2, #8]
 8001e32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e36:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000003c 	.word	0x2000003c
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	fffff8fe 	.word	0xfffff8fe
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000

08001e5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e117      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x24c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d936      	bls.n	8001f12 <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d10a      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68d1      	ldr	r1, [r2, #12]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	0612      	lsls	r2, r2, #24
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	e037      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461c      	mov	r4, r3
 8001f00:	4623      	mov	r3, r4
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4423      	add	r3, r4
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f303 	lsl.w	r3, r0, r3
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	e023      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	400b      	ands	r3, r1
 8001f34:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4423      	add	r3, r4
 8001f52:	fa00 f303 	lsl.w	r3, r0, r3
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d824      	bhi.n	8001fac <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b05      	subs	r3, #5
 8001f78:	221f      	movs	r2, #31
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4003      	ands	r3, r0
 8001f82:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461c      	mov	r4, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b05      	subs	r3, #5
 8001fa2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8001faa:	e04c      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d824      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b23      	subs	r3, #35	; 0x23
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b23      	subs	r3, #35	; 0x23
 8001ff4:	fa04 f303 	lsl.w	r3, r4, r3
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	630b      	str	r3, [r1, #48]	; 0x30
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4003      	ands	r3, r0
 800201e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461c      	mov	r4, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b41      	subs	r3, #65	; 0x41
 800203e:	fa04 f303 	lsl.w	r3, r4, r3
 8002042:	4303      	orrs	r3, r0
 8002044:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d109      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002062:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d125      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <HAL_ADC_ConfigChannel+0x208>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b11      	cmp	r3, #17
 800207e:	d11c      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d111      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x264>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x268>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	0c9a      	lsrs	r2, r3, #18
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc90      	pop	{r4, r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	10000012 	.word	0x10000012
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40012300 	.word	0x40012300
 80020dc:	2000003c 	.word	0x2000003c
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020ee:	4b77      	ldr	r3, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	4974      	ldr	r1, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6851      	ldr	r1, [r2, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6912      	ldr	r2, [r2, #16]
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	6852      	ldr	r2, [r2, #4]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	6851      	ldr	r1, [r2, #4]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6892      	ldr	r2, [r2, #8]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6891      	ldr	r1, [r2, #8]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <ADC_Init+0x1ec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6891      	ldr	r1, [r2, #8]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6891      	ldr	r1, [r2, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	6892      	ldr	r2, [r2, #8]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	6892      	ldr	r2, [r2, #8]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	6891      	ldr	r1, [r2, #8]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6992      	ldr	r2, [r2, #24]
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01b      	beq.n	8002242 <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6852      	ldr	r2, [r2, #4]
 8002214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002228:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6851      	ldr	r1, [r2, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	3a01      	subs	r2, #1
 800223a:	0352      	lsls	r2, r2, #13
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	e007      	b.n	8002252 <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800225c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	69d2      	ldr	r2, [r2, #28]
 8002270:	3a01      	subs	r2, #1
 8002272:	0512      	lsls	r2, r2, #20
 8002274:	430a      	orrs	r2, r1
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6891      	ldr	r1, [r2, #8]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002296:	0252      	lsls	r2, r2, #9
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6891      	ldr	r1, [r2, #8]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6952      	ldr	r2, [r2, #20]
 80022ba:	0292      	lsls	r2, r2, #10
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <NVIC_SetPriorityGrouping+0x44>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0000 	.word	0x05fa0000

0800231c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002342:	4909      	ldr	r1, [pc, #36]	; (8002368 <NVIC_EnableIRQ+0x30>)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0b      	bge.n	8002398 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <NVIC_SetPriority+0x4c>)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	3b04      	subs	r3, #4
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002396:	e009      	b.n	80023ac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	4908      	ldr	r1, [pc, #32]	; (80023bc <NVIC_SetPriority+0x50>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	2201      	movs	r2, #1
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	401a      	ands	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002406:	2101      	movs	r1, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	1e59      	subs	r1, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff90 	bl	800236c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff2f 	bl	80022d4 <NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff44 	bl	800231c <NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff90 	bl	80023c0 <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5f 	bl	800236c <NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff37 	bl	8002338 <NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d106      	bne.n	8002508 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002506:	e005      	b.n	8002514 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e054      	b.n	80025e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7f5b      	ldrb	r3, [r3, #29]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f011 f806 	bl	8013558 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	791b      	ldrb	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <HAL_CRC_Init+0xc4>)
 8002560:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	f022 0218 	bic.w	r2, r2, #24
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	e00c      	b.n	800258e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	461a      	mov	r2, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f834 	bl	80025ec <HAL_CRCEx_Polynomial_Set>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e028      	b.n	80025e0 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	795b      	ldrb	r3, [r3, #5]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	e004      	b.n	80025ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6912      	ldr	r2, [r2, #16]
 80025aa:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6952      	ldr	r2, [r2, #20]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6992      	ldr	r2, [r2, #24]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	04c11db7 	.word	0x04c11db7

080025ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80025f8:	231f      	movs	r3, #31
 80025fa:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 80025fc:	bf00      	nop
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <HAL_CRCEx_Polynomial_Set+0x2c>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	617a      	str	r2, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f2      	bne.n	80025fe <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b18      	cmp	r3, #24
 800261c:	d843      	bhi.n	80026a6 <HAL_CRCEx_Polynomial_Set+0xba>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <HAL_CRCEx_Polynomial_Set+0x38>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	080026a7 	.word	0x080026a7
 8002628:	080026a7 	.word	0x080026a7
 800262c:	080026a7 	.word	0x080026a7
 8002630:	080026a7 	.word	0x080026a7
 8002634:	080026a7 	.word	0x080026a7
 8002638:	080026a7 	.word	0x080026a7
 800263c:	080026a7 	.word	0x080026a7
 8002640:	080026a7 	.word	0x080026a7
 8002644:	0800269d 	.word	0x0800269d
 8002648:	080026a7 	.word	0x080026a7
 800264c:	080026a7 	.word	0x080026a7
 8002650:	080026a7 	.word	0x080026a7
 8002654:	080026a7 	.word	0x080026a7
 8002658:	080026a7 	.word	0x080026a7
 800265c:	080026a7 	.word	0x080026a7
 8002660:	080026a7 	.word	0x080026a7
 8002664:	08002693 	.word	0x08002693
 8002668:	080026a7 	.word	0x080026a7
 800266c:	080026a7 	.word	0x080026a7
 8002670:	080026a7 	.word	0x080026a7
 8002674:	080026a7 	.word	0x080026a7
 8002678:	080026a7 	.word	0x080026a7
 800267c:	080026a7 	.word	0x080026a7
 8002680:	080026a7 	.word	0x080026a7
 8002684:	08002689 	.word	0x08002689
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d90d      	bls.n	80026aa <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01f      	b.n	80026d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b07      	cmp	r3, #7
 8002696:	d90a      	bls.n	80026ae <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e01a      	b.n	80026d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	d907      	bls.n	80026b2 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e015      	b.n	80026d2 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 80026a6:	bf00      	nop
 80026a8:	e004      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026b2:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	6892      	ldr	r2, [r2, #8]
 80026c6:	f022 0118 	bic.w	r1, r2, #24
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff faa0 	bl	8001c30 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e099      	b.n	8002830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e00f      	b.n	800273e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff fa87 	bl	8001c30 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d908      	bls.n	800273e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e078      	b.n	8002830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e8      	bne.n	800271e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_DMA_Init+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4313      	orrs	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d117      	bne.n	8002802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f9e9 	bl	8002bbc <DMA_CheckFifoParam>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027fe:	2301      	movs	r3, #1
 8002800:	e016      	b.n	8002830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9a0 	bl	8002b50 <DMA_CalcBaseAndBitshift>
 8002810:	4603      	mov	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	f010803f 	.word	0xf010803f

0800283c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002848:	4b92      	ldr	r3, [pc, #584]	; (8002a94 <HAL_DMA_IRQHandler+0x258>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a92      	ldr	r2, [pc, #584]	; (8002a98 <HAL_DMA_IRQHandler+0x25c>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2208      	movs	r2, #8
 8002868:	409a      	lsls	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01a      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	f022 0204 	bic.w	r2, r2, #4
 800288e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2208      	movs	r2, #8
 8002896:	409a      	lsls	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	2201      	movs	r2, #1
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	2201      	movs	r2, #1
 80028cc:	409a      	lsls	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2204      	movs	r2, #4
 80028e4:	409a      	lsls	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2204      	movs	r2, #4
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0204 	orr.w	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2210      	movs	r2, #16
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d043      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d03c      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2210      	movs	r2, #16
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d018      	beq.n	800297e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d024      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
 800296a:	e01f      	b.n	80029ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
 800297c:	e016      	b.n	80029ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	f022 0208 	bic.w	r2, r2, #8
 800299a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2220      	movs	r2, #32
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 808e 	beq.w	8002ada <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8086 	beq.w	8002ada <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2220      	movs	r2, #32
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d136      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	f022 0216 	bic.w	r2, r2, #22
 80029f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	6952      	ldr	r2, [r2, #20]
 8002a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <HAL_DMA_IRQHandler+0x1da>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	f022 0208 	bic.w	r2, r2, #8
 8002a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	223f      	movs	r2, #63	; 0x3f
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d07d      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
        }
        return;
 8002a52:	e078      	b.n	8002b46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01c      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d108      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d030      	beq.n	8002ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
 8002a80:	e02b      	b.n	8002ada <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d027      	beq.n	8002ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e022      	b.n	8002ada <HAL_DMA_IRQHandler+0x29e>
 8002a94:	2000003c 	.word	0x2000003c
 8002a98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	f022 0210 	bic.w	r2, r2, #16
 8002ab8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d032      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d022      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2205      	movs	r2, #5
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d807      	bhi.n	8002b22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f2      	bne.n	8002b06 <HAL_DMA_IRQHandler+0x2ca>
 8002b20:	e000      	b.n	8002b24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b46:	bf00      	nop
    }
  }
}
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop

08002b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3b10      	subs	r3, #16
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <DMA_CalcBaseAndBitshift+0x60>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d908      	bls.n	8002b90 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	1d1a      	adds	r2, r3, #4
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b8e:	e006      	b.n	8002b9e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	aaaaaaab 	.word	0xaaaaaaab
 8002bb4:	08019f24 	.word	0x08019f24
 8002bb8:	fffffc00 	.word	0xfffffc00

08002bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d11f      	bne.n	8002c16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d855      	bhi.n	8002c88 <DMA_CheckFifoParam+0xcc>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <DMA_CheckFifoParam+0x28>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c07 	.word	0x08002c07
 8002bec:	08002bf5 	.word	0x08002bf5
 8002bf0:	08002c89 	.word	0x08002c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d045      	beq.n	8002c8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e042      	b.n	8002c8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c0e:	d13f      	bne.n	8002c90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c14:	e03c      	b.n	8002c90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	d121      	bne.n	8002c64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d836      	bhi.n	8002c94 <DMA_CheckFifoParam+0xd8>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <DMA_CheckFifoParam+0x70>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c43 	.word	0x08002c43
 8002c34:	08002c3d 	.word	0x08002c3d
 8002c38:	08002c55 	.word	0x08002c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e02f      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d024      	beq.n	8002c98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c52:	e021      	b.n	8002c98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c5c:	d11e      	bne.n	8002c9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c62:	e01b      	b.n	8002c9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <DMA_CheckFifoParam+0xb4>
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d003      	beq.n	8002c76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c6e:	e018      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e015      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00e      	beq.n	8002ca0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      break;
 8002c86:	e00b      	b.n	8002ca0 <DMA_CheckFifoParam+0xe4>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e00a      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e008      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c90:	bf00      	nop
 8002c92:	e006      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c94:	bf00      	nop
 8002c96:	e004      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e002      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ca0:	bf00      	nop
    }
  } 
  
  return status; 
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e039      	b.n	8002d36 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f010 fc5e 	bl	8013598 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6852      	ldr	r2, [r2, #4]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d04:	f022 0107 	bic.w	r1, r2, #7
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_DMA2D_Init+0x90>)
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68c9      	ldr	r1, [r1, #12]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	ffffc000 	.word	0xffffc000

08002d44 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA2D_Start+0x1c>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e018      	b.n	8002d92 <HAL_DMA2D_Start+0x4e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f98a 	bl	8003094 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d056      	beq.n	8002e68 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002dba:	f7fe ff39 	bl	8001c30 <HAL_GetTick>
 8002dbe:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002dc0:	e04b      	b.n	8002e5a <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d023      	beq.n	8002e1c <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	f043 0202 	orr.w	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2221      	movs	r2, #33	; 0x21
 8002e06:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0a2      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d01a      	beq.n	8002e5a <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_DMA2D_PollForTransfer+0xa0>
 8002e2a:	f7fe ff01 	bl	8001c30 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad2      	subs	r2, r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d90f      	bls.n	8002e5a <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e083      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ac      	beq.n	8002dc2 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d061      	beq.n	8002f48 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e84:	f7fe fed4 	bl	8001c30 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002e8a:	e056      	b.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d02e      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	f043 0204 	orr.w	r2, r3, #4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2229      	movs	r2, #41	; 0x29
 8002ee6:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2204      	movs	r2, #4
 8002eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e032      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d01a      	beq.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_DMA2D_PollForTransfer+0x180>
 8002f0a:	f7fe fe91 	bl	8001c30 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad2      	subs	r2, r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90f      	bls.n	8002f3a <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e013      	b.n	8002f62 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0a1      	beq.n	8002e8c <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2212      	movs	r2, #18
 8002f4e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	3318      	adds	r3, #24
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA2D_ConfigLayer+0x34>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e071      	b.n	8003084 <HAL_DMA2D_ConfigLayer+0x118>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_DMA2D_ConfigLayer+0x124>)
 8002fc0:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b0a      	cmp	r3, #10
 8002fc8:	d003      	beq.n	8002fd2 <HAL_DMA2D_ConfigLayer+0x66>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b09      	cmp	r3, #9
 8002fd0:	d107      	bne.n	8002fe2 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e005      	b.n	8002fee <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11f      	bne.n	8003034 <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	43d2      	mvns	r2, r2
 8003002:	4011      	ands	r1, r2
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	430a      	orrs	r2, r1
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b0a      	cmp	r3, #10
 800301a:	d003      	beq.n	8003024 <HAL_DMA2D_ConfigLayer+0xb8>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d126      	bne.n	8003072 <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	68d2      	ldr	r2, [r2, #12]
 800302c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
 8003032:	e01e      	b.n	8003072 <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	69d1      	ldr	r1, [r2, #28]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	43d2      	mvns	r2, r2
 8003042:	4011      	ands	r1, r2
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	430a      	orrs	r2, r1
 8003048:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b0a      	cmp	r3, #10
 800305a:	d003      	beq.n	8003064 <HAL_DMA2D_ConfigLayer+0xf8>
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b09      	cmp	r3, #9
 8003062:	d106      	bne.n	8003072 <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68d2      	ldr	r2, [r2, #12]
 800306c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003070:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	ff03000f 	.word	0xff03000f

08003094 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8003094:	b480      	push	{r7}
 8003096:	b08b      	sub	sp, #44	; 0x2c
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030c0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	0410      	lsls	r0, r2, #16
 80030c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ca:	4302      	orrs	r2, r0
 80030cc:	430a      	orrs	r2, r1
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e0:	d174      	bne.n	80031cc <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d108      	bne.n	800311a <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	431a      	orrs	r2, r3
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	e053      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	431a      	orrs	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e048      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d111      	bne.n	800315c <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	0cdb      	lsrs	r3, r3, #19
 800313c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	0a9b      	lsrs	r3, r3, #10
 8003142:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	08db      	lsrs	r3, r3, #3
 8003148:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	02db      	lsls	r3, r3, #11
 8003152:	431a      	orrs	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	e032      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d117      	bne.n	8003194 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	0fdb      	lsrs	r3, r3, #31
 8003168:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	0cdb      	lsrs	r3, r3, #19
 800316e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	029b      	lsls	r3, r3, #10
 8003184:	431a      	orrs	r2, r3
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	03db      	lsls	r3, r3, #15
 800318a:	431a      	orrs	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	e016      	b.n	80031c2 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	0f1b      	lsrs	r3, r3, #28
 8003198:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	0d1b      	lsrs	r3, r3, #20
 800319e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	0b1b      	lsrs	r3, r3, #12
 80031a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	011a      	lsls	r2, r3, #4
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	431a      	orrs	r2, r3
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	031b      	lsls	r3, r3, #12
 80031ba:	431a      	orrs	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031ca:	e003      	b.n	80031d4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	60da      	str	r2, [r3, #12]
}
 80031d4:	bf00      	nop
 80031d6:	372c      	adds	r7, #44	; 0x2c
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e175      	b.n	80034ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	f040 8164 	bne.w	80034e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x4e>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b12      	cmp	r3, #18
 800322c:	d123      	bne.n	8003276 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d00b      	beq.n	80032ca <HAL_GPIO_Init+0xea>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032be:	2b11      	cmp	r3, #17
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b12      	cmp	r3, #18
 80032c8:	d130      	bne.n	800332c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 0201 	and.w	r2, r3, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80be 	beq.w	80034e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_GPIO_Init+0x320>)
 800336c:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_GPIO_Init+0x320>)
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b62      	ldr	r3, [pc, #392]	; (8003500 <HAL_GPIO_Init+0x320>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003382:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_GPIO_Init+0x324>)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_GPIO_Init+0x328>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d037      	beq.n	800341e <HAL_GPIO_Init+0x23e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_GPIO_Init+0x32c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d031      	beq.n	800341a <HAL_GPIO_Init+0x23a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a55      	ldr	r2, [pc, #340]	; (8003510 <HAL_GPIO_Init+0x330>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <HAL_GPIO_Init+0x236>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_GPIO_Init+0x334>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x232>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a53      	ldr	r2, [pc, #332]	; (8003518 <HAL_GPIO_Init+0x338>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x22e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_GPIO_Init+0x33c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x22a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_GPIO_Init+0x340>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x226>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_GPIO_Init+0x344>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x222>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	; (8003528 <HAL_GPIO_Init+0x348>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x21e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4e      	ldr	r2, [pc, #312]	; (800352c <HAL_GPIO_Init+0x34c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x21a>
 80033f6:	2309      	movs	r3, #9
 80033f8:	e012      	b.n	8003420 <HAL_GPIO_Init+0x240>
 80033fa:	230a      	movs	r3, #10
 80033fc:	e010      	b.n	8003420 <HAL_GPIO_Init+0x240>
 80033fe:	2308      	movs	r3, #8
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003402:	2307      	movs	r3, #7
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x240>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x240>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003430:	4934      	ldr	r1, [pc, #208]	; (8003504 <HAL_GPIO_Init+0x324>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_GPIO_Init+0x350>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <HAL_GPIO_Init+0x350>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_GPIO_Init+0x350>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <HAL_GPIO_Init+0x350>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_GPIO_Init+0x350>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_GPIO_Init+0x350>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_GPIO_Init+0x350>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_GPIO_Init+0x350>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f ae86 	bls.w	8003200 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	; 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40022000 	.word	0x40022000
 800352c:	40022400 	.word	0x40022400
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003568:	b08d      	sub	sp, #52	; 0x34
 800356a:	af0a      	add	r7, sp, #40	; 0x28
 800356c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if(hhcd == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e03e      	b.n	80035f6 <HAL_HCD_Init+0x90>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2203      	movs	r2, #3
 800357c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_HCD_MspInit(hhcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f010 fae1 	bl	8013b48 <HAL_HCD_MspInit>

  /* Disable the Interrupts */
 __HAL_HCD_DISABLE(hhcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f004 fc6f 	bl	8007e6e <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	687e      	ldr	r6, [r7, #4]
 8003598:	466d      	mov	r5, sp
 800359a:	f106 0410 	add.w	r4, r6, #16
 800359e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ae:	1d33      	adds	r3, r6, #4
 80035b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	f004 fbf8 	bl	8007da8 <USB_CoreInit>

 /* Force Host Mode*/
 USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 fc66 	bl	8007e90 <USB_SetCurrentMode>

 /* Init Host */
 USB_HostInit(hhcd->Instance, hhcd->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	687e      	ldr	r6, [r7, #4]
 80035cc:	466d      	mov	r5, sp
 80035ce:	f106 0410 	add.w	r4, r6, #16
 80035d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035de:	e885 0003 	stmia.w	r5, {r0, r1}
 80035e2:	1d33      	adds	r3, r6, #4
 80035e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f004 fd7c 	bl	80080e4 <USB_HostInit>

 hhcd->State= HAL_HCD_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

 return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035fe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80035fe:	b590      	push	{r4, r7, lr}
 8003600:	b089      	sub	sp, #36	; 0x24
 8003602:	af04      	add	r7, sp, #16
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	4608      	mov	r0, r1
 8003608:	4611      	mov	r1, r2
 800360a:	461a      	mov	r2, r3
 800360c:	4603      	mov	r3, r0
 800360e:	70fb      	strb	r3, [r7, #3]
 8003610:	460b      	mov	r3, r1
 8003612:	70bb      	strb	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_HCD_HC_Init+0x2c>
 8003626:	2302      	movs	r3, #2
 8003628:	e076      	b.n	8003718 <HAL_HCD_HC_Init+0x11a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hhcd->hc[ch_num].do_ping = 0;
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	333d      	adds	r3, #61	; 0x3d
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3338      	adds	r3, #56	; 0x38
 8003656:	787a      	ldrb	r2, [r7, #1]
 8003658:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	3340      	adds	r3, #64	; 0x40
 800366a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800366c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	440b      	add	r3, r1
 800367c:	3339      	adds	r3, #57	; 0x39
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	333f      	adds	r3, #63	; 0x3f
 8003692:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	78bb      	ldrb	r3, [r7, #2]
 800369c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a0:	b2d8      	uxtb	r0, r3
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	333a      	adds	r3, #58	; 0x3a
 80036b0:	4602      	mov	r2, r0
 80036b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	09db      	lsrs	r3, r3, #7
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	333b      	adds	r3, #59	; 0x3b
 80036d0:	4602      	mov	r2, r0
 80036d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].speed = speed;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	333c      	adds	r3, #60	; 0x3c
 80036e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	787c      	ldrb	r4, [r7, #1]
 80036f0:	78ba      	ldrb	r2, [r7, #2]
 80036f2:	78f9      	ldrb	r1, [r7, #3]
 80036f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4623      	mov	r3, r4
 8003706:	f004 fe49 	bl	800839c <USB_HC_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}

08003720 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_HCD_HC_Halt+0x1e>
 800373a:	2302      	movs	r3, #2
 800373c:	e00f      	b.n	800375e <HAL_HCD_HC_Halt+0x3e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f005 f883 	bl	800885a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_HCD_HC_SubmitRequest>:
                                            uint8_t ep_type,
                                            uint8_t token,
                                            uint8_t* pbuff,
                                            uint16_t length,
                                            uint8_t do_ping)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	70fb      	strb	r3, [r7, #3]
 800377a:	460b      	mov	r3, r1
 800377c:	70bb      	strb	r3, [r7, #2]
 800377e:	4613      	mov	r3, r2
 8003780:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	333b      	adds	r3, #59	; 0x3b
 8003792:	78ba      	ldrb	r2, [r7, #2]
 8003794:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	333f      	adds	r3, #63	; 0x3f
 80037a6:	787a      	ldrb	r2, [r7, #1]
 80037a8:	701a      	strb	r2, [r3, #0]

  if(token == 0)
 80037aa:	7c3b      	ldrb	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	3342      	adds	r3, #66	; 0x42
 80037c0:	2203      	movs	r2, #3
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e009      	b.n	80037da <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	440b      	add	r3, r1
 80037d4:	3342      	adds	r3, #66	; 0x42
 80037d6:	2202      	movs	r2, #2
 80037d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch(ep_type)
 80037da:	787b      	ldrb	r3, [r7, #1]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	f200 80d7 	bhi.w	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_HCD_HC_SubmitRequest+0x80>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	08003979 	.word	0x08003979
 80037f0:	08003865 	.word	0x08003865
 80037f4:	080038ef 	.word	0x080038ef
  {
  case EP_TYPE_CTRL:
    if((token == 1) && (direction == 0)) /*send data */
 80037f8:	7c3b      	ldrb	r3, [r7, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 80c7 	bne.w	800398e <HAL_HCD_HC_SubmitRequest+0x226>
 8003800:	78bb      	ldrb	r3, [r7, #2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 80c3 	bne.w	800398e <HAL_HCD_HC_SubmitRequest+0x226>
    {
      if ( length == 0 )
 8003808:	8b3b      	ldrh	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_HCD_HC_SubmitRequest+0xba>
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	3351      	adds	r3, #81	; 0x51
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]
      }

      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	3351      	adds	r3, #81	; 0x51
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <HAL_HCD_HC_SubmitRequest+0xe6>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	3342      	adds	r3, #66	; 0x42
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 800384c:	e09f      	b.n	800398e <HAL_HCD_HC_SubmitRequest+0x226>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	3342      	adds	r3, #66	; 0x42
 800385e:	2202      	movs	r2, #2
 8003860:	701a      	strb	r2, [r3, #0]
    break;
 8003862:	e094      	b.n	800398e <HAL_HCD_HC_SubmitRequest+0x226>

  case EP_TYPE_BULK:
    if(direction == 0)
 8003864:	78bb      	ldrb	r3, [r7, #2]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d120      	bne.n	80038ac <HAL_HCD_HC_SubmitRequest+0x144>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	3351      	adds	r3, #81	; 0x51
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_HCD_HC_SubmitRequest+0x12e>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	440b      	add	r3, r1
 800388e:	3342      	adds	r3, #66	; 0x42
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }

    break;
 8003894:	e07c      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	3342      	adds	r3, #66	; 0x42
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]
    break;
 80038aa:	e071      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
      if( hhcd->hc[ch_num].toggle_in == 0)
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	3350      	adds	r3, #80	; 0x50
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_HCD_HC_SubmitRequest+0x170>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	3342      	adds	r3, #66	; 0x42
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    break;
 80038d6:	e05b      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	440b      	add	r3, r1
 80038e6:	3342      	adds	r3, #66	; 0x42
 80038e8:	2202      	movs	r2, #2
 80038ea:	701a      	strb	r2, [r3, #0]
    break;
 80038ec:	e050      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
  case EP_TYPE_INTR:
    if(direction == 0)
 80038ee:	78bb      	ldrb	r3, [r7, #2]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d120      	bne.n	8003936 <HAL_HCD_HC_SubmitRequest+0x1ce>
    {
      /* Set the Data Toggle bit as per the Flag */
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3351      	adds	r3, #81	; 0x51
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <HAL_HCD_HC_SubmitRequest+0x1b8>
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3342      	adds	r3, #66	; 0x42
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
      else
      {
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
      }
    }
    break;
 800391e:	e037      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1 ;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	3342      	adds	r3, #66	; 0x42
 8003930:	2202      	movs	r2, #2
 8003932:	701a      	strb	r2, [r3, #0]
    break;
 8003934:	e02c      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	3350      	adds	r3, #80	; 0x50
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_HCD_HC_SubmitRequest+0x1fa>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3342      	adds	r3, #66	; 0x42
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
    break;
 8003960:	e016      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	3342      	adds	r3, #66	; 0x42
 8003972:	2202      	movs	r2, #2
 8003974:	701a      	strb	r2, [r3, #0]
    break;
 8003976:	e00b      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>

  case EP_TYPE_ISOC:
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	3342      	adds	r3, #66	; 0x42
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
    break;
 800398c:	e000      	b.n	8003990 <HAL_HCD_HC_SubmitRequest+0x228>
    break;
 800398e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	440b      	add	r3, r1
 800399e:	3344      	adds	r3, #68	; 0x44
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	8b39      	ldrh	r1, [r7, #24]
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4403      	add	r3, r0
 80039b4:	3348      	adds	r3, #72	; 0x48
 80039b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state =   URB_IDLE;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	335c      	adds	r3, #92	; 0x5c
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0 ;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	334c      	adds	r3, #76	; 0x4c
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	3339      	adds	r3, #57	; 0x39
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	335d      	adds	r3, #93	; 0x5d
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	3338      	adds	r3, #56	; 0x38
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	18d1      	adds	r1, r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	f004 fdb6 	bl	8008594 <USB_HC_StartXfer>
 8003a28:	4603      	mov	r3, r0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop

08003a34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t i = 0 , interrupt = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 fb05 	bl	800805e <USB_GetMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	f040 80eb 	bne.w	8003c32 <HAL_HCD_IRQHandler+0x1fe>
  {
    /* avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f004 fae7 	bl	8008034 <USB_ReadInterrupts>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80e1 	beq.w	8003c30 <HAL_HCD_IRQHandler+0x1fc>
    {
      return;
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fade 	bl	8008034 <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a82:	d104      	bne.n	8003a8e <HAL_HCD_IRQHandler+0x5a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a8c:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 face 	bl	8008034 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa2:	d104      	bne.n	8003aae <HAL_HCD_IRQHandler+0x7a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003aac:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 fabe 	bl	8008034 <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d104      	bne.n	8003ace <HAL_HCD_IRQHandler+0x9a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003acc:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 faae 	bl	8008034 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d103      	bne.n	8003aea <HAL_HCD_IRQHandler+0xb6>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 faa0 	bl	8008034 <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afe:	d118      	bne.n	8003b32 <HAL_HCD_IRQHandler+0xfe>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b06:	461a      	mov	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b14:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f010 f8ac 	bl	8013c74 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fb7e 	bl	8008224 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fa7c 	bl	8008034 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b46:	d102      	bne.n	8003b4e <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f001 f8a9 	bl	8004ca0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 fa6e 	bl	8008034 <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d106      	bne.n	8003b70 <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f010 f86a 	bl	8013c3c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f004 fa5d 	bl	8008034 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b84:	d136      	bne.n	8003bf4 <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f004 fe56 	bl	800883c <USB_HC_ReadInterrupt>
 8003b90:	60f8      	str	r0, [r7, #12]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e023      	b.n	8003be0 <HAL_HCD_IRQHandler+0x1ac>
      {
        if (interrupt & (1 << i))
 8003b98:	2201      	movs	r2, #1
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler (hhcd, i);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8ca 	bl	8003d60 <HCD_HC_IN_IRQHandler>
 8003bcc:	e005      	b.n	8003bda <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fc55 	bl	8004484 <HCD_HC_OUT_IRQHandler>
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d8d6      	bhi.n	8003b98 <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bf2:	615a      	str	r2, [r3, #20]
    }

        /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 fa1b 	bl	8008034 <USB_ReadInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d114      	bne.n	8003c32 <HAL_HCD_IRQHandler+0x1fe>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	6992      	ldr	r2, [r2, #24]
 8003c12:	f022 0210 	bic.w	r2, r2, #16
 8003c16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler (hhcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 ff8f 	bl	8004b3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	6992      	ldr	r2, [r2, #24]
 8003c28:	f042 0210 	orr.w	r2, r2, #16
 8003c2c:	619a      	str	r2, [r3, #24]
 8003c2e:	e000      	b.n	8003c32 <HAL_HCD_IRQHandler+0x1fe>
      return;
 8003c30:	bf00      	nop
    }
  }
}
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_HCD_Start+0x16>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e013      	b.n	8003c76 <HAL_HCD_Start+0x3e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f004 f8f6 	bl	8007e4c <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 fb3e 	bl	80082e8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_HCD_Stop+0x16>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e00d      	b.n	8003cb0 <HAL_HCD_Stop+0x32>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 ff21 	bl	8008ae8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f004 fae7 	bl	8008298 <USB_ResetPort>
 8003cca:	4603      	mov	r3, r0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	335c      	adds	r3, #92	; 0x5c
 8003cf0:	781b      	ldrb	r3, [r3, #0]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	334c      	adds	r3, #76	; 0x4c
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fb21 	bl	800837c <USB_GetCurrentFrame>
 8003d3a:	4603      	mov	r3, r0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f004 fb00 	bl	8008356 <USB_GetHostSpeed>
 8003d56:	4603      	mov	r3, r0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler   (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01a      	beq.n	8003dc2 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003daa:	4619      	mov	r1, r3
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	60cb      	str	r3, [r1, #12]
 8003dc0:	e094      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2320      	movs	r3, #32
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	e07f      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  }

  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d034      	beq.n	8003e6c <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	4619      	mov	r1, r3
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	335d      	adds	r3, #93	; 0x5d
 8003e34:	2205      	movs	r2, #5
 8003e36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	461a      	mov	r2, r3
 8003e46:	2310      	movs	r3, #16
 8003e48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	461a      	mov	r2, r3
 8003e58:	2308      	movs	r3, #8
 8003e5a:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 fcf8 	bl	800885a <USB_HC_Halt>
 8003e6a:	e03f      	b.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d034      	beq.n	8003eec <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8e:	4619      	mov	r1, r3
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f043 0302 	orr.w	r3, r3, #2
 8003ea2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 fcd4 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	440b      	add	r3, r1
 8003ed2:	335d      	adds	r3, #93	; 0x5d
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eea:	6093      	str	r3, [r2, #8]
  }

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d022      	beq.n	8003f48 <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	4619      	mov	r1, r3
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f043 0302 	orr.w	r3, r3, #2
 8003f22:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 fc94 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f44:	6093      	str	r3, [r2, #8]
         USB_HC_Halt(hhcd->Instance, chnum);
       }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
  }
}
 8003f46:	e299      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80c0 	beq.w	80040e0 <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	78f9      	ldrb	r1, [r7, #3]
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4403      	add	r3, r0
 8003f78:	3348      	adds	r3, #72	; 0x48
 8003f7a:	6819      	ldr	r1, [r3, #0]
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	0158      	lsls	r0, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4403      	add	r3, r0
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003f8e:	1ac9      	subs	r1, r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4403      	add	r3, r0
 8003f9c:	334c      	adds	r3, #76	; 0x4c
 8003f9e:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	440b      	add	r3, r1
 8003fae:	335d      	adds	r3, #93	; 0x5d
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3358      	adds	r3, #88	; 0x58
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	333f      	adds	r3, #63	; 0x3f
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	333f      	adds	r3, #63	; 0x3f
 8004000:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8004002:	2b02      	cmp	r3, #2
 8004004:	d121      	bne.n	800404a <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004012:	4619      	mov	r1, r3
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f004 fc12 	bl	800885a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004042:	461a      	mov	r2, r3
 8004044:	2310      	movs	r3, #16
 8004046:	6093      	str	r3, [r2, #8]
 8004048:	e033      	b.n	80040b2 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	333f      	adds	r3, #63	; 0x3f
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d128      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406c:	4619      	mov	r1, r3
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004080:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	335c      	adds	r3, #92	; 0x5c
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	335c      	adds	r3, #92	; 0x5c
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f00f fdef 	bl	8013c90 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	78f9      	ldrb	r1, [r7, #3]
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4403      	add	r3, r0
 80040c2:	3350      	adds	r3, #80	; 0x50
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	f083 0301 	eor.w	r3, r3, #1
 80040ca:	b2d8      	uxtb	r0, r3
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	440b      	add	r3, r1
 80040d8:	3350      	adds	r3, #80	; 0x50
 80040da:	4602      	mov	r2, r0
 80040dc:	701a      	strb	r2, [r3, #0]
}
 80040de:	e1cd      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80e6 	beq.w	80042c4 <HCD_HC_IN_IRQHandler+0x564>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	4619      	mov	r1, r3
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f023 0302 	bic.w	r3, r3, #2
 8004118:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	440b      	add	r3, r1
 8004128:	335d      	adds	r3, #93	; 0x5d
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10a      	bne.n	8004146 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	335c      	adds	r3, #92	; 0x5c
 8004140:	2201      	movs	r2, #1
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e0a6      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	335d      	adds	r3, #93	; 0x5d
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d10a      	bne.n	8004172 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	335c      	adds	r3, #92	; 0x5c
 800416c:	2205      	movs	r2, #5
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	e090      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	440b      	add	r3, r1
 8004180:	335d      	adds	r3, #93	; 0x5d
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d00a      	beq.n	800419e <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	440b      	add	r3, r1
 8004196:	335d      	adds	r3, #93	; 0x5d
 8004198:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800419a:	2b08      	cmp	r3, #8
 800419c:	d14c      	bne.n	8004238 <HCD_HC_IN_IRQHandler+0x4d8>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	440b      	add	r3, r1
 80041ac:	3358      	adds	r3, #88	; 0x58
 80041ae:	6819      	ldr	r1, [r3, #0]
 80041b0:	1c48      	adds	r0, r1, #1
 80041b2:	687c      	ldr	r4, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4423      	add	r3, r4
 80041be:	3358      	adds	r3, #88	; 0x58
 80041c0:	6018      	str	r0, [r3, #0]
 80041c2:	2903      	cmp	r1, #3
 80041c4:	d914      	bls.n	80041f0 <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	3358      	adds	r3, #88	; 0x58
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	335c      	adds	r3, #92	; 0x5c
 80041ea:	2204      	movs	r2, #4
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e009      	b.n	8004204 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	440b      	add	r3, r1
 80041fe:	335c      	adds	r3, #92	; 0x5c
 8004200:	2202      	movs	r2, #2
 8004202:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800421a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004222:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e02d      	b.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	335d      	adds	r3, #93	; 0x5d
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d122      	bne.n	8004294 <HCD_HC_IN_IRQHandler+0x534>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	335c      	adds	r3, #92	; 0x5c
 800425e:	2202      	movs	r2, #2
 8004260:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004278:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004280:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	461a      	mov	r2, r3
 80042a2:	2302      	movs	r3, #2
 80042a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	335c      	adds	r3, #92	; 0x5c
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f00f fce7 	bl	8013c90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042c2:	e0db      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03d      	beq.n	8004356 <HCD_HC_IN_IRQHandler+0x5f6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	4619      	mov	r1, r3
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f043 0302 	orr.w	r3, r3, #2
 80042fa:	60cb      	str	r3, [r1, #12]
     hhcd->hc[chnum].ErrCnt++;
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	3358      	adds	r3, #88	; 0x58
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4403      	add	r3, r0
 800431c:	3358      	adds	r3, #88	; 0x58
 800431e:	6019      	str	r1, [r3, #0]
     hhcd->hc[chnum].state = HC_XACTERR;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	335d      	adds	r3, #93	; 0x5d
 8004330:	2206      	movs	r2, #6
 8004332:	701a      	strb	r2, [r3, #0]
     USB_HC_Halt(hhcd->Instance, chnum);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f004 fa8c 	bl	800885a <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	461a      	mov	r2, r3
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	6093      	str	r3, [r2, #8]
}
 8004354:	e092      	b.n	800447c <HCD_HC_IN_IRQHandler+0x71c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8087 	beq.w	800447c <HCD_HC_IN_IRQHandler+0x71c>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	333f      	adds	r3, #63	; 0x3f
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d12c      	bne.n	80043de <HCD_HC_IN_IRQHandler+0x67e>
       hhcd->hc[chnum].ErrCnt = 0;
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	3358      	adds	r3, #88	; 0x58
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
       hhcd->hc[chnum].state = HC_NAK;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	335d      	adds	r3, #93	; 0x5d
 80043a8:	2203      	movs	r2, #3
 80043aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	4619      	mov	r1, r3
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 fa3f 	bl	800885a <USB_HC_Halt>
 80043dc:	e045      	b.n	800446a <HCD_HC_IN_IRQHandler+0x70a>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	333f      	adds	r3, #63	; 0x3f
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HCD_HC_IN_IRQHandler+0x6aa>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	440b      	add	r3, r1
 8004402:	333f      	adds	r3, #63	; 0x3f
 8004404:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8004406:	2b02      	cmp	r3, #2
 8004408:	d12f      	bne.n	800446a <HCD_HC_IN_IRQHandler+0x70a>
       hhcd->hc[chnum].ErrCnt = 0;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	3358      	adds	r3, #88	; 0x58
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
       if (!hhcd->Init.dma_enable)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d121      	bne.n	800446a <HCD_HC_IN_IRQHandler+0x70a>
         hhcd->hc[chnum].state = HC_NAK;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	440b      	add	r3, r1
 8004434:	335d      	adds	r3, #93	; 0x5d
 8004436:	2203      	movs	r2, #3
 8004438:	701a      	strb	r2, [r3, #0]
         __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	4619      	mov	r1, r3
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f043 0302 	orr.w	r3, r3, #2
 800445a:	60cb      	str	r3, [r1, #12]
         USB_HC_Halt(hhcd->Instance, chnum);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f004 f9f8 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004476:	461a      	mov	r2, r3
 8004478:	2310      	movs	r3, #16
 800447a:	6093      	str	r3, [r2, #8]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	bd90      	pop	{r4, r7, pc}

08004484 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01a      	beq.n	80044e6 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044bc:	461a      	mov	r2, r3
 80044be:	2304      	movs	r3, #4
 80044c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	4619      	mov	r1, r3
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f043 0302 	orr.w	r3, r3, #2
 80044e2:	60cb      	str	r3, [r1, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
  }
}
 80044e4:	e326      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d041      	beq.n	8004580 <HCD_HC_OUT_IRQHandler+0xfc>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004508:	461a      	mov	r2, r3
 800450a:	2320      	movs	r3, #32
 800450c:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	333d      	adds	r3, #61	; 0x3d
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 8307 	bne.w	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[chnum].do_ping = 0;
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	440b      	add	r3, r1
 8004534:	333d      	adds	r3, #61	; 0x3d
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	440b      	add	r3, r1
 8004548:	335c      	adds	r3, #92	; 0x5c
 800454a:	2202      	movs	r2, #2
 800454c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	4619      	mov	r1, r3
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f043 0302 	orr.w	r3, r3, #2
 800456e:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f004 f96e 	bl	800885a <USB_HC_Halt>
}
 800457e:	e2d9      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d03f      	beq.n	8004616 <HCD_HC_OUT_IRQHandler+0x192>
    hhcd->hc[chnum].state = HC_NYET;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	440b      	add	r3, r1
 80045a4:	335d      	adds	r3, #93	; 0x5d
 80045a6:	2204      	movs	r2, #4
 80045a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1;
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	440b      	add	r3, r1
 80045b8:	333d      	adds	r3, #61	; 0x3d
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0;
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	440b      	add	r3, r1
 80045cc:	3358      	adds	r3, #88	; 0x58
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	4619      	mov	r1, r3
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f004 f92c 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	461a      	mov	r2, r3
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	6093      	str	r3, [r2, #8]
}
 8004614:	e28e      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004628:	2b00      	cmp	r3, #0
 800462a:	d022      	beq.n	8004672 <HCD_HC_OUT_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	4619      	mov	r1, r3
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f004 f8ff 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800466e:	6093      	str	r3, [r2, #8]
}
 8004670:	e260      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d035      	beq.n	80046f4 <HCD_HC_OUT_IRQHandler+0x270>
      hhcd->hc[chnum].ErrCnt = 0;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	3358      	adds	r3, #88	; 0x58
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a8:	4619      	mov	r1, r3
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 f8c7 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	461a      	mov	r2, r3
 80046da:	2301      	movs	r3, #1
 80046dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	335d      	adds	r3, #93	; 0x5d
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
}
 80046f2:	e21f      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02b      	beq.n	8004762 <HCD_HC_OUT_IRQHandler+0x2de>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	461a      	mov	r2, r3
 8004718:	2308      	movs	r3, #8
 800471a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	4619      	mov	r1, r3
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f004 f887 	bl	800885a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	440b      	add	r3, r1
 800475a:	335d      	adds	r3, #93	; 0x5d
 800475c:	2205      	movs	r2, #5
 800475e:	701a      	strb	r2, [r3, #0]
}
 8004760:	e1e8      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d055      	beq.n	8004824 <HCD_HC_OUT_IRQHandler+0x3a0>
    hhcd->hc[chnum].ErrCnt = 0;
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	3358      	adds	r3, #88	; 0x58
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	440b      	add	r3, r1
 800479a:	335d      	adds	r3, #93	; 0x5d
 800479c:	2203      	movs	r2, #3
 800479e:	701a      	strb	r2, [r3, #0]
    if ( hhcd->hc[chnum].do_ping == 0)
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	333d      	adds	r3, #61	; 0x3d
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d114      	bne.n	80047e0 <HCD_HC_OUT_IRQHandler+0x35c>
      if (hhcd->hc[chnum].speed == HCD_SPEED_HIGH)
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	440b      	add	r3, r1
 80047c4:	333c      	adds	r3, #60	; 0x3c
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HCD_HC_OUT_IRQHandler+0x35c>
        hhcd->hc[chnum].do_ping = 1;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	333d      	adds	r3, #61	; 0x3d
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	4619      	mov	r1, r3
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f004 f825 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	2310      	movs	r3, #16
 8004820:	6093      	str	r3, [r2, #8]
}
 8004822:	e187      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02b      	beq.n	8004892 <HCD_HC_OUT_IRQHandler+0x40e>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	4619      	mov	r1, r3
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f003 fff8 	bl	800885a <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	335d      	adds	r3, #93	; 0x5d
 800487a:	2206      	movs	r2, #6
 800487c:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	461a      	mov	r2, r3
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	6093      	str	r3, [r2, #8]
}
 8004890:	e150      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d035      	beq.n	8004914 <HCD_HC_OUT_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	4619      	mov	r1, r3
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f003 ffc1 	bl	800885a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	461a      	mov	r2, r3
 80048e6:	2310      	movs	r3, #16
 80048e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	461a      	mov	r2, r3
 80048f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	440b      	add	r3, r1
 800490c:	335d      	adds	r3, #93	; 0x5d
 800490e:	2208      	movs	r2, #8
 8004910:	701a      	strb	r2, [r3, #0]
}
 8004912:	e10f      	b.n	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8104 	beq.w	8004b34 <HCD_HC_OUT_IRQHandler+0x6b0>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	4619      	mov	r1, r3
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 0302 	bic.w	r3, r3, #2
 800494c:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	440b      	add	r3, r1
 800495c:	335d      	adds	r3, #93	; 0x5d
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d12c      	bne.n	80049be <HCD_HC_OUT_IRQHandler+0x53a>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	440b      	add	r3, r1
 8004972:	335c      	adds	r3, #92	; 0x5c
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	333f      	adds	r3, #63	; 0x3f
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b02      	cmp	r3, #2
 800498c:	f040 80bb 	bne.w	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
        hhcd->hc[chnum].toggle_out ^= 1;
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	78f9      	ldrb	r1, [r7, #3]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4403      	add	r3, r0
 80049a0:	3351      	adds	r3, #81	; 0x51
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f083 0301 	eor.w	r3, r3, #1
 80049a8:	b2d8      	uxtb	r0, r3
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	3351      	adds	r3, #81	; 0x51
 80049b8:	4602      	mov	r2, r0
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e0a3      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NAK)
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	335d      	adds	r3, #93	; 0x5d
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d10a      	bne.n	80049ea <HCD_HC_OUT_IRQHandler+0x566>
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	335c      	adds	r3, #92	; 0x5c
 80049e4:	2202      	movs	r2, #2
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e08d      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	335d      	adds	r3, #93	; 0x5d
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d10a      	bne.n	8004a16 <HCD_HC_OUT_IRQHandler+0x592>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	440b      	add	r3, r1
 8004a0e:	335c      	adds	r3, #92	; 0x5c
 8004a10:	2202      	movs	r2, #2
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e077      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	440b      	add	r3, r1
 8004a24:	335d      	adds	r3, #93	; 0x5d
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d10a      	bne.n	8004a42 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	440b      	add	r3, r1
 8004a3a:	335c      	adds	r3, #92	; 0x5c
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e061      	b.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	440b      	add	r3, r1
 8004a50:	335d      	adds	r3, #93	; 0x5d
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b06      	cmp	r3, #6
 8004a56:	d00a      	beq.n	8004a6e <HCD_HC_OUT_IRQHandler+0x5ea>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	440b      	add	r3, r1
 8004a66:	335d      	adds	r3, #93	; 0x5d
 8004a68:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d14b      	bne.n	8004b06 <HCD_HC_OUT_IRQHandler+0x682>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3358      	adds	r3, #88	; 0x58
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	1c48      	adds	r0, r1, #1
 8004a82:	687c      	ldr	r4, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4423      	add	r3, r4
 8004a8e:	3358      	adds	r3, #88	; 0x58
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	2903      	cmp	r1, #3
 8004a94:	d914      	bls.n	8004ac0 <HCD_HC_OUT_IRQHandler+0x63c>
        hhcd->hc[chnum].ErrCnt = 0;
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3358      	adds	r3, #88	; 0x58
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	335c      	adds	r3, #92	; 0x5c
 8004aba:	2204      	movs	r2, #4
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e009      	b.n	8004ad4 <HCD_HC_OUT_IRQHandler+0x650>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	335c      	adds	r3, #92	; 0x5c
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b12:	461a      	mov	r2, r3
 8004b14:	2302      	movs	r3, #2
 8004b16:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	440b      	add	r3, r1
 8004b26:	335c      	adds	r3, #92	; 0x5c
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f00f f8ae 	bl	8013c90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}

08004b3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	61fb      	str	r3, [r7, #28]
  uint8_t                       channelnum =0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	76fb      	strb	r3, [r7, #27]
  uint32_t                      pktsts;
  uint32_t                      pktcnt;
  uint32_t                      temp = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]

  temp = hhcd->Instance->GRXSTSP ;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	0c5b      	lsrs	r3, r3, #17
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b7a:	60bb      	str	r3, [r7, #8]

  switch (pktsts)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d003      	beq.n	8004b8a <HCD_RXQLVL_IRQHandler+0x4e>
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	f000 8082 	beq.w	8004c8c <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8004b88:	e083      	b.n	8004c92 <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d07f      	beq.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
 8004b90:	7efa      	ldrb	r2, [r7, #27]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3344      	adds	r3, #68	; 0x44
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d074      	beq.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	7efa      	ldrb	r2, [r7, #27]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3344      	adds	r3, #68	; 0x44
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f003 fa0d 	bl	8007fe0 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;
 8004bc6:	7efa      	ldrb	r2, [r7, #27]
 8004bc8:	7ef9      	ldrb	r1, [r7, #27]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4403      	add	r3, r0
 8004bd6:	3344      	adds	r3, #68	; 0x44
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4419      	add	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4403      	add	r3, r0
 8004bea:	3344      	adds	r3, #68	; 0x44
 8004bec:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8004bee:	7efa      	ldrb	r2, [r7, #27]
 8004bf0:	7ef9      	ldrb	r1, [r7, #27]
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4403      	add	r3, r0
 8004bfe:	334c      	adds	r3, #76	; 0x4c
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4419      	add	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4403      	add	r3, r0
 8004c12:	334c      	adds	r3, #76	; 0x4c
 8004c14:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8004c16:	7efb      	ldrb	r3, [r7, #27]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HCD_RXQLVL_IRQHandler+0x160>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d031      	beq.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8004c2c:	7efb      	ldrb	r3, [r7, #27]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c42:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c4a:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8004c4c:	7efb      	ldrb	r3, [r7, #27]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c58:	461a      	mov	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8004c5e:	7efa      	ldrb	r2, [r7, #27]
 8004c60:	7ef9      	ldrb	r1, [r7, #27]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4403      	add	r3, r0
 8004c6e:	3350      	adds	r3, #80	; 0x50
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f083 0301 	eor.w	r3, r3, #1
 8004c76:	b2d8      	uxtb	r0, r3
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	440b      	add	r3, r1
 8004c84:	3350      	adds	r3, #80	; 0x50
 8004c86:	4602      	mov	r2, r0
 8004c88:	701a      	strb	r2, [r3, #0]
    break;
 8004c8a:	e001      	b.n	8004c90 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8004c90:	bf00      	nop
  }
}
 8004c92:	bf00      	nop
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	1ff80000 	.word	0x1ff80000

08004ca0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cc8:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d113      	bne.n	8004cfc <HCD_Port_IRQHandler+0x5c>
  {
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10a      	bne.n	8004cf4 <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	6992      	ldr	r2, [r2, #24]
 8004ce8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004cec:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f00e ffb2 	bl	8013c58 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f043 0302 	orr.w	r3, r3, #2
 8004cfa:	60fb      	str	r3, [r7, #12]

  }

  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d142      	bne.n	8004d8c <HCD_Port_IRQHandler+0xec>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f043 0308 	orr.w	r3, r3, #8
 8004d0c:	60fb      	str	r3, [r7, #12]

    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d126      	bne.n	8004d66 <HCD_Port_IRQHandler+0xc6>
    {
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d113      	bne.n	8004d48 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d2a:	d106      	bne.n	8004d3a <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f003 fa76 	bl	8008224 <USB_InitFSLSPClkSel>
 8004d38:	e011      	b.n	8004d5e <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4618      	mov	r0, r3
 8004d42:	f003 fa6f 	bl	8008224 <USB_InitFSLSPClkSel>
 8004d46:	e00a      	b.n	8004d5e <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d106      	bne.n	8004d5e <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = (uint32_t)60000;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d56:	461a      	mov	r2, r3
 8004d58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004d5c:	6053      	str	r3, [r2, #4]
        }
      }
      HAL_HCD_Connect_Callback(hhcd);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f00e ff7a 	bl	8013c58 <HAL_HCD_Connect_Callback>
 8004d64:	e012      	b.n	8004d8c <HCD_Port_IRQHandler+0xec>

    }
    else
    {
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d7a:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	6992      	ldr	r2, [r2, #24]
 8004d86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d8a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d103      	bne.n	8004d9e <HCD_Port_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f043 0320 	orr.w	r3, r3, #32
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004da4:	461a      	mov	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e07e      	b.n	8004ec4 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f00e fbfc 	bl	80135d8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2224      	movs	r2, #36	; 0x24
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6852      	ldr	r2, [r2, #4]
 8004e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	6892      	ldr	r2, [r2, #8]
 8004e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d107      	bne.n	8004e2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6892      	ldr	r2, [r2, #8]
 8004e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	e006      	b.n	8004e3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6892      	ldr	r2, [r2, #8]
 8004e36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d104      	bne.n	8004e4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	4b1c      	ldr	r3, [pc, #112]	; (8004ecc <HAL_I2C_Init+0x118>)
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	68d2      	ldr	r2, [r2, #12]
 8004e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6911      	ldr	r1, [r2, #16]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6952      	ldr	r2, [r2, #20]
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6992      	ldr	r2, [r2, #24]
 8004e80:	0212      	lsls	r2, r2, #8
 8004e82:	430a      	orrs	r2, r1
 8004e84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	69d1      	ldr	r1, [r2, #28]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6a12      	ldr	r2, [r2, #32]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	02008000 	.word	0x02008000

08004ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d138      	bne.n	8004f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e032      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	6811      	ldr	r1, [r2, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d139      	bne.n	8004ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e033      	b.n	8004ff6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2224      	movs	r2, #36	; 0x24
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e000      	b.n	8004ff6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0c7      	b.n	80051ae <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f00e fb00 	bl	8013638 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	6992      	ldr	r2, [r2, #24]
 800504a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800504e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	6991      	ldr	r1, [r2, #24]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6850      	ldr	r0, [r2, #4]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005068:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6912      	ldr	r2, [r2, #16]
 800506e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005070:	430a      	orrs	r2, r1
 8005072:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	4b4e      	ldr	r3, [pc, #312]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 8005080:	400b      	ands	r3, r1
 8005082:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	6891      	ldr	r1, [r2, #8]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6990      	ldr	r0, [r2, #24]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4302      	orrs	r2, r0
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68d9      	ldr	r1, [r3, #12]
 80050ac:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 80050ae:	400b      	ands	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	68d1      	ldr	r1, [r2, #12]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6a10      	ldr	r0, [r2, #32]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4302      	orrs	r2, r0
 80050cc:	430a      	orrs	r2, r1
 80050ce:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6919      	ldr	r1, [r3, #16]
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 80050dc:	400b      	ands	r3, r1
 80050de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	6911      	ldr	r1, [r2, #16]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4302      	orrs	r2, r0
 80050fa:	430a      	orrs	r2, r1
 80050fc:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6959      	ldr	r1, [r3, #20]
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_LTDC_Init+0x1b4>)
 800510a:	400b      	ands	r3, r1
 800510c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	6951      	ldr	r1, [r2, #20]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4302      	orrs	r2, r0
 8005128:	430a      	orrs	r2, r1
 800512a:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800514a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800514e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4302      	orrs	r2, r0
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8005166:	4302      	orrs	r2, r0
 8005168:	430a      	orrs	r2, r1
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005176:	f042 0204 	orr.w	r2, r2, #4
 800517a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005186:	f042 0202 	orr.w	r2, r2, #2
 800518a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	6992      	ldr	r2, [r2, #24]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	f000f800 	.word	0xf000f800

080051bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80051bc:	b5b0      	push	{r4, r5, r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_LTDC_ConfigLayer+0x1a>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e02c      	b.n	8005230 <HAL_LTDC_ConfigLayer+0x74>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2134      	movs	r1, #52	; 0x34
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f81f 	bl	8005254 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bdb0      	pop	{r4, r5, r7, pc}

08005238 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005246:	b2db      	uxtb	r3, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527c:	4413      	add	r3, r2
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	01db      	lsls	r3, r3, #7
 800528c:	4413      	add	r3, r2
 800528e:	3384      	adds	r3, #132	; 0x84
 8005290:	461a      	mov	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	01db      	lsls	r3, r3, #7
 800529c:	440b      	add	r3, r1
 800529e:	3384      	adds	r3, #132	; 0x84
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052a6:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	01db      	lsls	r3, r3, #7
 80052b2:	4413      	add	r3, r2
 80052b4:	3384      	adds	r3, #132	; 0x84
 80052b6:	4619      	mov	r1, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c8:	4413      	add	r3, r2
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e0:	4413      	add	r3, r2
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	4413      	add	r3, r2
 80052f2:	3384      	adds	r3, #132	; 0x84
 80052f4:	461a      	mov	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	01db      	lsls	r3, r3, #7
 8005300:	440b      	add	r3, r1
 8005302:	3384      	adds	r3, #132	; 0x84
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800530a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	4413      	add	r3, r2
 8005318:	3384      	adds	r3, #132	; 0x84
 800531a:	4619      	mov	r1, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800532a:	4413      	add	r3, r2
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4313      	orrs	r3, r2
 8005332:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	01db      	lsls	r3, r3, #7
 800533e:	4413      	add	r3, r2
 8005340:	3384      	adds	r3, #132	; 0x84
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4619      	mov	r1, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	01db      	lsls	r3, r3, #7
 800534e:	440b      	add	r3, r1
 8005350:	3384      	adds	r3, #132	; 0x84
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	01db      	lsls	r3, r3, #7
 8005364:	4413      	add	r3, r2
 8005366:	3384      	adds	r3, #132	; 0x84
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	01db      	lsls	r3, r3, #7
 8005396:	4413      	add	r3, r2
 8005398:	3384      	adds	r3, #132	; 0x84
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	01db      	lsls	r3, r3, #7
 80053a6:	4413      	add	r3, r2
 80053a8:	3384      	adds	r3, #132	; 0x84
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	4413      	add	r3, r2
 80053bc:	3384      	adds	r3, #132	; 0x84
 80053be:	4619      	mov	r1, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053c6:	461a      	mov	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	4413      	add	r3, r2
 80053e2:	3384      	adds	r3, #132	; 0x84
 80053e4:	461a      	mov	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4619      	mov	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	440b      	add	r3, r1
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	01db      	lsls	r3, r3, #7
 8005406:	4413      	add	r3, r2
 8005408:	3384      	adds	r3, #132	; 0x84
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	01db      	lsls	r3, r3, #7
 800541c:	4413      	add	r3, r2
 800541e:	3384      	adds	r3, #132	; 0x84
 8005420:	4619      	mov	r1, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	01db      	lsls	r3, r3, #7
 800542c:	4413      	add	r3, r2
 800542e:	3384      	adds	r3, #132	; 0x84
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <LTDC_SetConfig+0x348>)
 8005434:	4013      	ands	r3, r2
 8005436:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	01db      	lsls	r3, r3, #7
 8005442:	4413      	add	r3, r2
 8005444:	3384      	adds	r3, #132	; 0x84
 8005446:	4619      	mov	r1, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	4313      	orrs	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	01db      	lsls	r3, r3, #7
 800545e:	4413      	add	r3, r2
 8005460:	3384      	adds	r3, #132	; 0x84
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	01db      	lsls	r3, r3, #7
 800546e:	4413      	add	r3, r2
 8005470:	3384      	adds	r3, #132	; 0x84
 8005472:	461a      	mov	r2, r3
 8005474:	2300      	movs	r3, #0
 8005476:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4413      	add	r3, r2
 8005484:	3384      	adds	r3, #132	; 0x84
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 8005496:	2304      	movs	r3, #4
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e01b      	b.n	80054d4 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 80054a4:	2303      	movs	r3, #3
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	e014      	b.n	80054d4 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d00b      	beq.n	80054ca <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d007      	beq.n	80054ca <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d003      	beq.n	80054ca <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054c6:	2b07      	cmp	r3, #7
 80054c8:	d102      	bne.n	80054d0 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 80054ca:	2302      	movs	r3, #2
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e001      	b.n	80054d4 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 80054d0:	2301      	movs	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	01db      	lsls	r3, r3, #7
 80054de:	4413      	add	r3, r2
 80054e0:	3384      	adds	r3, #132	; 0x84
 80054e2:	461a      	mov	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	440b      	add	r3, r1
 80054f0:	3384      	adds	r3, #132	; 0x84
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	4413      	add	r3, r2
 8005506:	3384      	adds	r3, #132	; 0x84
 8005508:	4618      	mov	r0, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
 8005514:	041a      	lsls	r2, r3, #16
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	1acb      	subs	r3, r1, r3
 8005520:	69f9      	ldr	r1, [r7, #28]
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	3303      	adds	r3, #3
 8005528:	4313      	orrs	r3, r2
 800552a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	01db      	lsls	r3, r3, #7
 8005536:	4413      	add	r3, r2
 8005538:	3384      	adds	r3, #132	; 0x84
 800553a:	4619      	mov	r1, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	01db      	lsls	r3, r3, #7
 8005546:	4413      	add	r3, r2
 8005548:	3384      	adds	r3, #132	; 0x84
 800554a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554c:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <LTDC_SetConfig+0x34c>)
 800554e:	4013      	ands	r3, r2
 8005550:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	4413      	add	r3, r2
 800555e:	3384      	adds	r3, #132	; 0x84
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	01db      	lsls	r3, r3, #7
 8005572:	4413      	add	r3, r2
 8005574:	3384      	adds	r3, #132	; 0x84
 8005576:	461a      	mov	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4619      	mov	r1, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	440b      	add	r3, r1
 8005584:	3384      	adds	r3, #132	; 0x84
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6013      	str	r3, [r2, #0]
}
 800558e:	bf00      	nop
 8005590:	3724      	adds	r7, #36	; 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	fffff8f8 	.word	0xfffff8f8
 80055a0:	fffff800 	.word	0xfffff800

080055a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <HAL_PWREx_EnableOverDrive+0x98>)
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <HAL_PWREx_EnableOverDrive+0x98>)
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_PWREx_EnableOverDrive+0x98>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055c6:	4a1e      	ldr	r2, [pc, #120]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d2:	f7fc fb2d 	bl	8001c30 <HAL_GetTick>
 80055d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055d8:	e009      	b.n	80055ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055da:	f7fc fb29 	bl	8001c30 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055e8:	d901      	bls.n	80055ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e022      	b.n	8005634 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d1ee      	bne.n	80055da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055fc:	4a10      	ldr	r2, [pc, #64]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005606:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005608:	f7fc fb12 	bl	8001c30 <HAL_GetTick>
 800560c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800560e:	e009      	b.n	8005624 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005610:	f7fc fb0e 	bl	8001c30 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561e:	d901      	bls.n	8005624 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e007      	b.n	8005634 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005630:	d1ee      	bne.n	8005610 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40023800 	.word	0x40023800
 8005640:	40007000 	.word	0x40007000

08005644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e25c      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8087 	beq.w	8005776 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005668:	4b96      	ldr	r3, [pc, #600]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b04      	cmp	r3, #4
 8005672:	d00c      	beq.n	800568e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005674:	4b93      	ldr	r3, [pc, #588]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b08      	cmp	r3, #8
 800567e:	d112      	bne.n	80056a6 <HAL_RCC_OscConfig+0x62>
 8005680:	4b90      	ldr	r3, [pc, #576]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568c:	d10b      	bne.n	80056a6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800568e:	4b8d      	ldr	r3, [pc, #564]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d06c      	beq.n	8005774 <HAL_RCC_OscConfig+0x130>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d168      	bne.n	8005774 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e236      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ae:	d106      	bne.n	80056be <HAL_RCC_OscConfig+0x7a>
 80056b0:	4a84      	ldr	r2, [pc, #528]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056b2:	4b84      	ldr	r3, [pc, #528]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e02e      	b.n	800571c <HAL_RCC_OscConfig+0xd8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0x9c>
 80056c6:	4a7f      	ldr	r2, [pc, #508]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056c8:	4b7e      	ldr	r3, [pc, #504]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	4a7c      	ldr	r2, [pc, #496]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056d4:	4b7b      	ldr	r3, [pc, #492]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e01d      	b.n	800571c <HAL_RCC_OscConfig+0xd8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCC_OscConfig+0xc0>
 80056ea:	4a76      	ldr	r2, [pc, #472]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056ec:	4b75      	ldr	r3, [pc, #468]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	4a73      	ldr	r2, [pc, #460]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056f8:	4b72      	ldr	r3, [pc, #456]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e00b      	b.n	800571c <HAL_RCC_OscConfig+0xd8>
 8005704:	4a6f      	ldr	r2, [pc, #444]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005706:	4b6f      	ldr	r3, [pc, #444]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4a6c      	ldr	r2, [pc, #432]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005712:	4b6c      	ldr	r3, [pc, #432]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fc fa84 	bl	8001c30 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800572c:	f7fc fa80 	bl	8001c30 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1ea      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0xe8>
 800574a:	e014      	b.n	8005776 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fc fa70 	bl	8001c30 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005754:	f7fc fa6c 	bl	8001c30 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1d6      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005766:	4b57      	ldr	r3, [pc, #348]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x110>
 8005772:	e000      	b.n	8005776 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d069      	beq.n	8005856 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005782:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578e:	4b4d      	ldr	r3, [pc, #308]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b08      	cmp	r3, #8
 8005798:	d11c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x190>
 800579a:	4b4a      	ldr	r3, [pc, #296]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_RCC_OscConfig+0x17a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e1aa      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4941      	ldr	r1, [pc, #260]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057c0:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4313      	orrs	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d2:	e040      	b.n	8005856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d023      	beq.n	8005824 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057dc:	4a39      	ldr	r2, [pc, #228]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057de:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fc fa22 	bl	8001c30 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f0:	f7fc fa1e 	bl	8001c30 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e188      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005802:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580e:	492d      	ldr	r1, [pc, #180]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005810:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
 8005822:	e018      	b.n	8005856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005824:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005826:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fc f9fe 	bl	8001c30 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005838:	f7fc f9fa 	bl	8001c30 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e164      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584a:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d038      	beq.n	80058d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d019      	beq.n	800589e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800586c:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fc f9db 	bl	8001c30 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800587e:	f7fc f9d7 	bl	8001c30 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e141      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005890:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 8005892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x23a>
 800589c:	e01a      	b.n	80058d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_RCC_OscConfig+0x280>)
 80058a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058aa:	f7fc f9c1 	bl	8001c30 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b0:	e00a      	b.n	80058c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b2:	f7fc f9bd 	bl	8001c30 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d903      	bls.n	80058c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e127      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
 80058c4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c8:	4b94      	ldr	r3, [pc, #592]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1ee      	bne.n	80058b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80a4 	beq.w	8005a2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e2:	4b8e      	ldr	r3, [pc, #568]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ee:	4a8b      	ldr	r2, [pc, #556]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058f0:	4b8a      	ldr	r3, [pc, #552]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6413      	str	r3, [r2, #64]	; 0x40
 80058fa:	4b88      	ldr	r3, [pc, #544]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800590a:	4b85      	ldr	r3, [pc, #532]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d118      	bne.n	8005948 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005916:	4a82      	ldr	r2, [pc, #520]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 8005918:	4b81      	ldr	r3, [pc, #516]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005922:	f7fc f985 	bl	8001c30 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800592a:	f7fc f981 	bl	8001c30 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b64      	cmp	r3, #100	; 0x64
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e0eb      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800593c:	4b78      	ldr	r3, [pc, #480]	; (8005b20 <HAL_RCC_OscConfig+0x4dc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x31a>
 8005950:	4a72      	ldr	r2, [pc, #456]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005952:	4b72      	ldr	r3, [pc, #456]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
 800595c:	e02d      	b.n	80059ba <HAL_RCC_OscConfig+0x376>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x33c>
 8005966:	4a6d      	ldr	r2, [pc, #436]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005968:	4b6c      	ldr	r3, [pc, #432]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	6713      	str	r3, [r2, #112]	; 0x70
 8005972:	4a6a      	ldr	r2, [pc, #424]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005974:	4b69      	ldr	r3, [pc, #420]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	6713      	str	r3, [r2, #112]	; 0x70
 800597e:	e01c      	b.n	80059ba <HAL_RCC_OscConfig+0x376>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b05      	cmp	r3, #5
 8005986:	d10c      	bne.n	80059a2 <HAL_RCC_OscConfig+0x35e>
 8005988:	4a64      	ldr	r2, [pc, #400]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 800598a:	4b64      	ldr	r3, [pc, #400]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	6713      	str	r3, [r2, #112]	; 0x70
 8005994:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005996:	4b61      	ldr	r3, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	e00b      	b.n	80059ba <HAL_RCC_OscConfig+0x376>
 80059a2:	4a5e      	ldr	r2, [pc, #376]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059a4:	4b5d      	ldr	r3, [pc, #372]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	6713      	str	r3, [r2, #112]	; 0x70
 80059ae:	4a5b      	ldr	r2, [pc, #364]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059b0:	4b5a      	ldr	r3, [pc, #360]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d015      	beq.n	80059ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fc f935 	bl	8001c30 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fc f931 	bl	8001c30 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e099      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e0:	4b4e      	ldr	r3, [pc, #312]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0ee      	beq.n	80059ca <HAL_RCC_OscConfig+0x386>
 80059ec:	e014      	b.n	8005a18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ee:	f7fc f91f 	bl	8001c30 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fc f91b 	bl	8001c30 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e083      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a0c:	4b43      	ldr	r3, [pc, #268]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ee      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4a3f      	ldr	r2, [pc, #252]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a20:	4b3e      	ldr	r3, [pc, #248]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d06f      	beq.n	8005b12 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a32:	4b3a      	ldr	r3, [pc, #232]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d067      	beq.n	8005b0e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d149      	bne.n	8005ada <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a46:	4a35      	ldr	r2, [pc, #212]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a48:	4b34      	ldr	r3, [pc, #208]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc f8ed 	bl	8001c30 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a5a:	f7fc f8e9 	bl	8001c30 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e053      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a78:	4928      	ldr	r1, [pc, #160]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	019b      	lsls	r3, r3, #6
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	3b01      	subs	r3, #1
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	061b      	lsls	r3, r3, #24
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005aa8:	4b1c      	ldr	r3, [pc, #112]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab2:	f7fc f8bd 	bl	8001c30 <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aba:	f7fc f8b9 	bl	8001c30 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e023      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x476>
 8005ad8:	e01b      	b.n	8005b12 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fc f8a3 	bl	8001c30 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fc f89f 	bl	8001c30 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e009      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCC_OscConfig+0x4d8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x4aa>
 8005b0c:	e001      	b.n	8005b12 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40007000 	.word	0x40007000

08005b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0ce      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 020f 	and.w	r2, r3, #15
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d210      	bcs.n	8005b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4966      	ldr	r1, [pc, #408]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4c:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f023 020f 	bic.w	r2, r3, #15
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5a:	4b62      	ldr	r3, [pc, #392]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0b6      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d020      	beq.n	8005bba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b84:	4a58      	ldr	r2, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b86:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b9c:	4a52      	ldr	r2, [pc, #328]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba8:	494f      	ldr	r1, [pc, #316]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	4b4f      	ldr	r3, [pc, #316]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d040      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	4b46      	ldr	r3, [pc, #280]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d115      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07d      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be6:	4b40      	ldr	r3, [pc, #256]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e071      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf6:	4b3c      	ldr	r3, [pc, #240]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e069      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c06:	4938      	ldr	r1, [pc, #224]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f023 0203 	bic.w	r2, r3, #3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c18:	f7fc f80a 	bl	8001c30 <HAL_GetTick>
 8005c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c20:	f7fc f806 	bl	8001c30 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e051      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 020c 	and.w	r2, r3, #12
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d1eb      	bne.n	8005c20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c48:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d910      	bls.n	8005c78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4923      	ldr	r1, [pc, #140]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c58:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f023 020f 	bic.w	r2, r3, #15
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 020f 	and.w	r2, r3, #15
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e030      	b.n	8005cda <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c84:	4918      	ldr	r1, [pc, #96]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ca2:	4911      	ldr	r1, [pc, #68]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb6:	f000 f81d 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8005cba:	4601      	mov	r1, r0
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <HAL_RCC_ClockConfig+0x1c8>)
 8005cc8:	5cd3      	ldrb	r3, [r2, r3]
 8005cca:	fa21 f303 	lsr.w	r3, r1, r3
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8005cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f00d fe42 	bl	801395c <HAL_InitTick>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	08019fe0 	.word	0x08019fe0
 8005cf0:	2000003c 	.word	0x2000003c

08005cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	b087      	sub	sp, #28
 8005cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60fa      	str	r2, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	617a      	str	r2, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8005d08:	2200      	movs	r2, #0
 8005d0a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0c:	4a51      	ldr	r2, [pc, #324]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d0e:	6892      	ldr	r2, [r2, #8]
 8005d10:	f002 020c 	and.w	r2, r2, #12
 8005d14:	2a04      	cmp	r2, #4
 8005d16:	d007      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0x34>
 8005d18:	2a08      	cmp	r2, #8
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	f040 8090 	bne.w	8005e42 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d22:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d24:	613b      	str	r3, [r7, #16]
       break;
 8005d26:	e08f      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d28:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8005d2a:	613b      	str	r3, [r7, #16]
      break;
 8005d2c:	e08c      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d2e:	4a49      	ldr	r2, [pc, #292]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d30:	6852      	ldr	r2, [r2, #4]
 8005d32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005d36:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d38:	4a46      	ldr	r2, [pc, #280]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d3a:	6852      	ldr	r2, [r2, #4]
 8005d3c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	d023      	beq.n	8005d8c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d44:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	099b      	lsrs	r3, r3, #6
 8005d4a:	f04f 0400 	mov.w	r4, #0
 8005d4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	ea03 0301 	and.w	r3, r3, r1
 8005d5a:	ea04 0402 	and.w	r4, r4, r2
 8005d5e:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8005d60:	fb02 f104 	mul.w	r1, r2, r4
 8005d64:	2200      	movs	r2, #0
 8005d66:	fb02 f203 	mul.w	r2, r2, r3
 8005d6a:	440a      	add	r2, r1
 8005d6c:	493b      	ldr	r1, [pc, #236]	; (8005e5c <HAL_RCC_GetSysClockFreq+0x168>)
 8005d6e:	fba3 0101 	umull	r0, r1, r3, r1
 8005d72:	1853      	adds	r3, r2, r1
 8005d74:	4619      	mov	r1, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f04f 0400 	mov.w	r4, #0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4623      	mov	r3, r4
 8005d80:	f7fa ffae 	bl	8000ce0 <__aeabi_uldivmod>
 8005d84:	4603      	mov	r3, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e04c      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d8c:	4a31      	ldr	r2, [pc, #196]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d8e:	6852      	ldr	r2, [r2, #4]
 8005d90:	0992      	lsrs	r2, r2, #6
 8005d92:	4611      	mov	r1, r2
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005d9c:	f04f 0600 	mov.w	r6, #0
 8005da0:	ea05 0501 	and.w	r5, r5, r1
 8005da4:	ea06 0602 	and.w	r6, r6, r2
 8005da8:	4629      	mov	r1, r5
 8005daa:	4632      	mov	r2, r6
 8005dac:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8005db0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8005db4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005db8:	4651      	mov	r1, sl
 8005dba:	465a      	mov	r2, fp
 8005dbc:	46aa      	mov	sl, r5
 8005dbe:	46b3      	mov	fp, r6
 8005dc0:	4655      	mov	r5, sl
 8005dc2:	465e      	mov	r6, fp
 8005dc4:	1b4d      	subs	r5, r1, r5
 8005dc6:	eb62 0606 	sbc.w	r6, r2, r6
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4632      	mov	r2, r6
 8005dce:	0194      	lsls	r4, r2, #6
 8005dd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005dd4:	018b      	lsls	r3, r1, #6
 8005dd6:	1a5b      	subs	r3, r3, r1
 8005dd8:	eb64 0402 	sbc.w	r4, r4, r2
 8005ddc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005de0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005de4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8005de8:	4643      	mov	r3, r8
 8005dea:	464c      	mov	r4, r9
 8005dec:	4655      	mov	r5, sl
 8005dee:	465e      	mov	r6, fp
 8005df0:	18ed      	adds	r5, r5, r3
 8005df2:	eb46 0604 	adc.w	r6, r6, r4
 8005df6:	462b      	mov	r3, r5
 8005df8:	4634      	mov	r4, r6
 8005dfa:	02a2      	lsls	r2, r4, #10
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	4621      	mov	r1, r4
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f04f 0400 	mov.w	r4, #0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	f7fa ff60 	bl	8000ce0 <__aeabi_uldivmod>
 8005e20:	4603      	mov	r3, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	3301      	adds	r3, #1
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3e:	613b      	str	r3, [r7, #16]
      break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e44:	613b      	str	r3, [r7, #16]
      break;
 8005e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e48:	693b      	ldr	r3, [r7, #16]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	40023800 	.word	0x40023800
 8005e58:	00f42400 	.word	0x00f42400
 8005e5c:	017d7840 	.word	0x017d7840

08005e60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e66:	681b      	ldr	r3, [r3, #0]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	2000003c 	.word	0x2000003c

08005e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e7c:	f7ff fff0 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005e80:	4601      	mov	r1, r0
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	0a9b      	lsrs	r3, r3, #10
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	4a03      	ldr	r2, [pc, #12]	; (8005e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e8e:	5cd3      	ldrb	r3, [r2, r3]
 8005e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	08019ff0 	.word	0x08019ff0

08005ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ea4:	f7ff ffdc 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005ea8:	4601      	mov	r1, r0
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	0b5b      	lsrs	r3, r3, #13
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	4a03      	ldr	r2, [pc, #12]	; (8005ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb6:	5cd3      	ldrb	r3, [r2, r3]
 8005eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	08019ff0 	.word	0x08019ff0

08005ec8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	220f      	movs	r2, #15
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ed8:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0203 	and.w	r2, r3, #3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <HAL_RCC_GetClockConfig+0x5c>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	08db      	lsrs	r3, r3, #3
 8005f02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <HAL_RCC_GetClockConfig+0x60>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 020f 	and.w	r2, r3, #15
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40023c00 	.word	0x40023c00

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d012      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f54:	4a69      	ldr	r2, [pc, #420]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f56:	4b69      	ldr	r3, [pc, #420]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f5e:	6093      	str	r3, [r2, #8]
 8005f60:	4966      	ldr	r1, [pc, #408]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f62:	4b66      	ldr	r3, [pc, #408]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005f76:	2301      	movs	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d017      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f86:	495d      	ldr	r1, [pc, #372]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f88:	4b5c      	ldr	r3, [pc, #368]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa4:	d101      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d017      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fc2:	494e      	ldr	r1, [pc, #312]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005ffe:	2301      	movs	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 808b 	beq.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006010:	4a3a      	ldr	r2, [pc, #232]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006012:	4b3a      	ldr	r3, [pc, #232]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601a:	6413      	str	r3, [r2, #64]	; 0x40
 800601c:	4b37      	ldr	r3, [pc, #220]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006024:	60bb      	str	r3, [r7, #8]
 8006026:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006028:	4a35      	ldr	r2, [pc, #212]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800602a:	4b35      	ldr	r3, [pc, #212]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006032:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006034:	f7fb fdfc 	bl	8001c30 <HAL_GetTick>
 8006038:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603c:	f7fb fdf8 	bl	8001c30 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e355      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800604e:	4b2c      	ldr	r3, [pc, #176]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800605a:	4b28      	ldr	r3, [pc, #160]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006062:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d035      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	429a      	cmp	r2, r3
 8006076:	d02e      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006078:	4b20      	ldr	r3, [pc, #128]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006080:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006082:	4a1e      	ldr	r2, [pc, #120]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800608e:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800609a:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060a0:	4b16      	ldr	r3, [pc, #88]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d014      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fb fdc0 	bl	8001c30 <HAL_GetTick>
 80060b0:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b2:	e00a      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b4:	f7fb fdbc 	bl	8001c30 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e317      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0ee      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e2:	d111      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80060e4:	4805      	ldr	r0, [pc, #20]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060f2:	4b04      	ldr	r3, [pc, #16]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060f4:	400b      	ands	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	6083      	str	r3, [r0, #8]
 80060fa:	e00b      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060fc:	40023800 	.word	0x40023800
 8006100:	40007000 	.word	0x40007000
 8006104:	0ffffcff 	.word	0x0ffffcff
 8006108:	4ab0      	ldr	r2, [pc, #704]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800610a:	4bb0      	ldr	r3, [pc, #704]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006112:	6093      	str	r3, [r2, #8]
 8006114:	49ad      	ldr	r1, [pc, #692]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006116:	4bad      	ldr	r3, [pc, #692]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006122:	4313      	orrs	r3, r2
 8006124:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b00      	cmp	r3, #0
 8006130:	d010      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006132:	4aa6      	ldr	r2, [pc, #664]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006134:	4ba5      	ldr	r3, [pc, #660]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800613a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800613e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006142:	49a2      	ldr	r1, [pc, #648]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006144:	4ba1      	ldr	r3, [pc, #644]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006146:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006160:	499a      	ldr	r1, [pc, #616]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006162:	4b9a      	ldr	r3, [pc, #616]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006182:	4992      	ldr	r1, [pc, #584]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006184:	4b91      	ldr	r3, [pc, #580]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061a4:	4989      	ldr	r1, [pc, #548]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061c6:	4981      	ldr	r1, [pc, #516]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061c8:	4b80      	ldr	r3, [pc, #512]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061e8:	4978      	ldr	r1, [pc, #480]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ea:	4b78      	ldr	r3, [pc, #480]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f023 0203 	bic.w	r2, r3, #3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800620a:	4970      	ldr	r1, [pc, #448]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620c:	4b6f      	ldr	r3, [pc, #444]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f023 020c 	bic.w	r2, r3, #12
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800622c:	4967      	ldr	r1, [pc, #412]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800622e:	4b67      	ldr	r3, [pc, #412]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800624e:	495f      	ldr	r1, [pc, #380]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006250:	4b5e      	ldr	r3, [pc, #376]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006270:	4956      	ldr	r1, [pc, #344]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006272:	4b56      	ldr	r3, [pc, #344]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006292:	494e      	ldr	r1, [pc, #312]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006294:	4b4d      	ldr	r3, [pc, #308]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062b4:	4945      	ldr	r1, [pc, #276]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b6:	4b45      	ldr	r3, [pc, #276]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80062d6:	493d      	ldr	r1, [pc, #244]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d8:	4b3c      	ldr	r3, [pc, #240]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062f8:	4934      	ldr	r1, [pc, #208]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062fa:	4b34      	ldr	r3, [pc, #208]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800631a:	492c      	ldr	r1, [pc, #176]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800631c:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006322:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006338:	d101      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 800633a:	2301      	movs	r3, #1
 800633c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 800634a:	2301      	movs	r3, #1
 800634c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800635a:	491c      	ldr	r1, [pc, #112]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800637c:	4913      	ldr	r1, [pc, #76]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006384:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d005      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063a2:	f040 80d8 	bne.w	8006556 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 80063a6:	4a09      	ldr	r2, [pc, #36]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063a8:	4b08      	ldr	r3, [pc, #32]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063b0:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b2:	f7fb fc3d 	bl	8001c30 <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063b8:	e00a      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063ba:	f7fb fc39 	bl	8001c30 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b64      	cmp	r3, #100	; 0x64
 80063c6:	d903      	bls.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e196      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80063cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063d0:	4b6c      	ldr	r3, [pc, #432]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1ee      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d021      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11d      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063f0:	4b64      	ldr	r3, [pc, #400]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063fe:	4b61      	ldr	r3, [pc, #388]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006404:	0e1b      	lsrs	r3, r3, #24
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800640c:	495d      	ldr	r1, [pc, #372]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	019a      	lsls	r2, r3, #6
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	431a      	orrs	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	071b      	lsls	r3, r3, #28
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800644a:	2b00      	cmp	r3, #0
 800644c:	d02e      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006456:	d129      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006458:	4b4a      	ldr	r3, [pc, #296]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800645a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006466:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646c:	0f1b      	lsrs	r3, r3, #28
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006474:	4943      	ldr	r1, [pc, #268]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	019a      	lsls	r2, r3, #6
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	071b      	lsls	r3, r3, #28
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8006494:	493b      	ldr	r1, [pc, #236]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006496:	4b3b      	ldr	r3, [pc, #236]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800649c:	f023 021f 	bic.w	r2, r3, #31
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	3b01      	subs	r3, #1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01d      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064b8:	4b32      	ldr	r3, [pc, #200]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064be:	0e1b      	lsrs	r3, r3, #24
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064cc:	0f1b      	lsrs	r3, r3, #28
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064d4:	492b      	ldr	r1, [pc, #172]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	019a      	lsls	r2, r3, #6
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	431a      	orrs	r2, r3
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	071b      	lsls	r3, r3, #28
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d011      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006500:	4920      	ldr	r1, [pc, #128]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	019a      	lsls	r2, r3, #6
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	071b      	lsls	r3, r3, #28
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006524:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006526:	4b17      	ldr	r3, [pc, #92]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800652e:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006530:	f7fb fb7e 	bl	8001c30 <HAL_GetTick>
 8006534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006536:	e008      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006538:	f7fb fb7a 	bl	8001c30 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b64      	cmp	r3, #100	; 0x64
 8006544:	d901      	bls.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0d7      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800654a:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b01      	cmp	r3, #1
 800655a:	f040 80cd 	bne.w	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006560:	4b08      	ldr	r3, [pc, #32]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006568:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656a:	f7fb fb61 	bl	8001c30 <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006570:	e00a      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006572:	f7fb fb5d 	bl	8001c30 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b64      	cmp	r3, #100	; 0x64
 800657e:	d903      	bls.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0ba      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006584:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006588:	4b5e      	ldr	r3, [pc, #376]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006594:	d0ed      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02e      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d12a      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065be:	4b51      	ldr	r3, [pc, #324]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065cc:	4b4d      	ldr	r3, [pc, #308]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d2:	0f1b      	lsrs	r3, r3, #28
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80065da:	494a      	ldr	r1, [pc, #296]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	019a      	lsls	r2, r3, #6
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	071b      	lsls	r3, r3, #28
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80065fa:	4942      	ldr	r1, [pc, #264]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065fc:	4b41      	ldr	r3, [pc, #260]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006602:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	3b01      	subs	r3, #1
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d022      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006628:	d11d      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800662a:	4b36      	ldr	r3, [pc, #216]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006630:	0e1b      	lsrs	r3, r3, #24
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006638:	4b32      	ldr	r3, [pc, #200]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	0f1b      	lsrs	r3, r3, #28
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006646:	492f      	ldr	r1, [pc, #188]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	019a      	lsls	r2, r3, #6
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	431a      	orrs	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	061b      	lsls	r3, r3, #24
 800665a:	431a      	orrs	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	071b      	lsls	r3, r3, #28
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d028      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006672:	4b24      	ldr	r3, [pc, #144]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	0e1b      	lsrs	r3, r3, #24
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006680:	4b20      	ldr	r3, [pc, #128]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800668e:	491d      	ldr	r1, [pc, #116]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	019a      	lsls	r2, r3, #6
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	431a      	orrs	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	061b      	lsls	r3, r3, #24
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	071b      	lsls	r3, r3, #28
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066ae:	4915      	ldr	r1, [pc, #84]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066b0:	4b14      	ldr	r3, [pc, #80]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ce:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d0:	f7fb faae 	bl	8001c30 <HAL_GetTick>
 80066d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066d8:	f7fb faaa 	bl	8001c30 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b64      	cmp	r3, #100	; 0x64
 80066e4:	d901      	bls.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e007      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f6:	d1ef      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40023800 	.word	0x40023800

08006708 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e025      	b.n	8006768 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f00d f909 	bl	8013948 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f001 fa19 	bl	8007b80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	461a      	mov	r2, r3
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	f001 fa83 	bl	8007c64 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_SDRAM_Read_32b+0x20>
 800678c:	2302      	movs	r3, #2
 800678e:	e028      	b.n	80067e2 <HAL_SDRAM_Read_32b+0x72>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d101      	bne.n	80067a8 <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
 80067a6:	e01c      	b.n	80067e2 <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b05      	cmp	r3, #5
 80067b2:	d10e      	bne.n	80067d2 <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 80067b4:	2301      	movs	r3, #1
 80067b6:	e014      	b.n	80067e2 <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	3304      	adds	r3, #4
 80067ca:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ef      	bne.n	80067b8 <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_SDRAM_Write_32b+0x24>
 800680e:	2302      	movs	r3, #2
 8006810:	e02a      	b.n	8006868 <HAL_SDRAM_Write_32b+0x7a>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d101      	bne.n	800682e <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
 800682c:	e01c      	b.n	8006868 <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b05      	cmp	r3, #5
 8006832:	d002      	beq.n	800683a <HAL_SDRAM_Write_32b+0x4c>
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b04      	cmp	r3, #4
 8006838:	d10e      	bne.n	8006858 <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 800683a:	2301      	movs	r3, #1
 800683c:	e014      	b.n	8006868 <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3304      	adds	r3, #4
 800684a:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3304      	adds	r3, #4
 8006850:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	3b01      	subs	r3, #1
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1ef      	bne.n	800683e <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d101      	bne.n	8006890 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800688c:	2302      	movs	r3, #2
 800688e:	e018      	b.n	80068c2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 fa5f 	bl	8007d64 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d104      	bne.n	80068b8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2205      	movs	r2, #5
 80068b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80068b6:	e003      	b.n	80068c0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e01d      	b.n	8006918 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f00c ff1b 	bl	801372c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f000 fa4b 	bl	8006da4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	68d2      	ldr	r2, [r2, #12]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b02      	cmp	r3, #2
 800696a:	d122      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d11b      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f06f 0202 	mvn.w	r2, #2
 8006982:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f9e5 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 800699e:	e005      	b.n	80069ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f9d7 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9e8 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d122      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d11b      	bne.n	8006a06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f06f 0204 	mvn.w	r2, #4
 80069d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9bb 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 80069f2:	e005      	b.n	8006a00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9ad 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9be 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d122      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d11b      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0208 	mvn.w	r2, #8
 8006a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f991 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006a46:	e005      	b.n	8006a54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f983 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f994 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d122      	bne.n	8006aae <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d11b      	bne.n	8006aae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f06f 0210 	mvn.w	r2, #16
 8006a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2208      	movs	r2, #8
 8006a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f967 	bl	8006d68 <HAL_TIM_IC_CaptureCallback>
 8006a9a:	e005      	b.n	8006aa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f959 	bl	8006d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f96a 	bl	8006d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0201 	mvn.w	r2, #1
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f00c fbcb 	bl	8013270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae4:	2b80      	cmp	r3, #128	; 0x80
 8006ae6:	d10e      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d107      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fb07 	bl	8007114 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d10e      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d107      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 faf0 	bl	8007114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d10e      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b40      	cmp	r3, #64	; 0x40
 8006b4e:	d107      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f918 	bl	8006d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d10e      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0220 	mvn.w	r2, #32
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 faba 	bl	8007100 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e0c8      	b.n	8006d42 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4b60      	ldr	r3, [pc, #384]	; (8006d4c <HAL_TIM_ConfigClockSource+0x1b8>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d077      	beq.n	8006cd8 <HAL_TIM_ConfigClockSource+0x144>
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d80e      	bhi.n	8006c0a <HAL_TIM_ConfigClockSource+0x76>
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	f000 808a 	beq.w	8006d06 <HAL_TIM_ConfigClockSource+0x172>
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d802      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x68>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d07e      	beq.n	8006cf8 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8006bfa:	e099      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	f000 8089 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x180>
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	f000 808d 	beq.w	8006d22 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8006c08:	e092      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006c0a:	2b70      	cmp	r3, #112	; 0x70
 8006c0c:	d016      	beq.n	8006c3c <HAL_TIM_ConfigClockSource+0xa8>
 8006c0e:	2b70      	cmp	r3, #112	; 0x70
 8006c10:	d804      	bhi.n	8006c1c <HAL_TIM_ConfigClockSource+0x88>
 8006c12:	2b50      	cmp	r3, #80	; 0x50
 8006c14:	d040      	beq.n	8006c98 <HAL_TIM_ConfigClockSource+0x104>
 8006c16:	2b60      	cmp	r3, #96	; 0x60
 8006c18:	d04e      	beq.n	8006cb8 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8006c1a:	e089      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x96>
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	d024      	beq.n	8006c72 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8006c28:	e082      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6899      	ldr	r1, [r3, #8]
 8006c34:	4b46      	ldr	r3, [pc, #280]	; (8006d50 <HAL_TIM_ConfigClockSource+0x1bc>)
 8006c36:	400b      	ands	r3, r1
 8006c38:	6093      	str	r3, [r2, #8]
    break;
 8006c3a:	e079      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	6899      	ldr	r1, [r3, #8]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f000 f9e1 	bl	8007012 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <HAL_TIM_ConfigClockSource+0x1b8>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	609a      	str	r2, [r3, #8]
    break;
 8006c70:	e05e      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6899      	ldr	r1, [r3, #8]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f000 f9c6 	bl	8007012 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	6892      	ldr	r2, [r2, #8]
 8006c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c94:	609a      	str	r2, [r3, #8]
    break;
 8006c96:	e04b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6859      	ldr	r1, [r3, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f000 f92d 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2150      	movs	r1, #80	; 0x50
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 f98e 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006cb6:	e03b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	6859      	ldr	r1, [r3, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f000 f950 	bl	8006f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2160      	movs	r1, #96	; 0x60
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f97e 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006cd6:	e02b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	6859      	ldr	r1, [r3, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f000 f90d 	bl	8006f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2140      	movs	r1, #64	; 0x40
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f96e 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006cf6:	e01b      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f967 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d04:	e014      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2110      	movs	r1, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f960 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d12:	e00d      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2120      	movs	r1, #32
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f959 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d20:	e006      	b.n	8006d30 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2130      	movs	r1, #48	; 0x30
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 f952 	bl	8006fd2 <TIM_ITRx_SetConfig>
    break;
 8006d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	fffeff88 	.word	0xfffeff88
 8006d50:	fffefff8 	.word	0xfffefff8

08006d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a47      	ldr	r2, [pc, #284]	; (8006ed8 <TIM_Base_SetConfig+0x134>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d00f      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a44      	ldr	r2, [pc, #272]	; (8006edc <TIM_Base_SetConfig+0x138>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a43      	ldr	r2, [pc, #268]	; (8006ee0 <TIM_Base_SetConfig+0x13c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d007      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a42      	ldr	r2, [pc, #264]	; (8006ee4 <TIM_Base_SetConfig+0x140>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_Base_SetConfig+0x44>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a41      	ldr	r2, [pc, #260]	; (8006ee8 <TIM_Base_SetConfig+0x144>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d101      	bne.n	8006dec <TIM_Base_SetConfig+0x48>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <TIM_Base_SetConfig+0x4a>
 8006dec:	2300      	movs	r3, #0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a34      	ldr	r2, [pc, #208]	; (8006ed8 <TIM_Base_SetConfig+0x134>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d02b      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e12:	d027      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a31      	ldr	r2, [pc, #196]	; (8006edc <TIM_Base_SetConfig+0x138>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d023      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a30      	ldr	r2, [pc, #192]	; (8006ee0 <TIM_Base_SetConfig+0x13c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d01f      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a2f      	ldr	r2, [pc, #188]	; (8006ee4 <TIM_Base_SetConfig+0x140>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01b      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <TIM_Base_SetConfig+0x144>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d017      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a2d      	ldr	r2, [pc, #180]	; (8006eec <TIM_Base_SetConfig+0x148>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d013      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a2c      	ldr	r2, [pc, #176]	; (8006ef0 <TIM_Base_SetConfig+0x14c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00f      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <TIM_Base_SetConfig+0x150>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00b      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <TIM_Base_SetConfig+0x154>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d007      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a29      	ldr	r2, [pc, #164]	; (8006efc <TIM_Base_SetConfig+0x158>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_Base_SetConfig+0xc0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a28      	ldr	r2, [pc, #160]	; (8006f00 <TIM_Base_SetConfig+0x15c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d101      	bne.n	8006e68 <TIM_Base_SetConfig+0xc4>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <TIM_Base_SetConfig+0xc6>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <TIM_Base_SetConfig+0x134>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_Base_SetConfig+0x110>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <TIM_Base_SetConfig+0x144>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d101      	bne.n	8006eb8 <TIM_Base_SetConfig+0x114>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <TIM_Base_SetConfig+0x116>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	615a      	str	r2, [r3, #20]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400
 8006ee0:	40000800 	.word	0x40000800
 8006ee4:	40000c00 	.word	0x40000c00
 8006ee8:	40010400 	.word	0x40010400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800
 8006ef8:	40001800 	.word	0x40001800
 8006efc:	40001c00 	.word	0x40001c00
 8006f00:	40002000 	.word	0x40002000

08006f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f023 0201 	bic.w	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f023 030a 	bic.w	r3, r3, #10
 8006f48:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b087      	sub	sp, #28
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8006ff0:	887b      	ldrh	r3, [r7, #2]
 8006ff2:	f043 0307 	orr.w	r3, r3, #7
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	609a      	str	r2, [r3, #8]
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007030:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	021a      	lsls	r2, r3, #8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	431a      	orrs	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4313      	orrs	r3, r2
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	609a      	str	r2, [r3, #8]
} 
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800706c:	2302      	movs	r3, #2
 800706e:	e03d      	b.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1a      	ldr	r2, [pc, #104]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a19      	ldr	r2, [pc, #100]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
} 
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40010000 	.word	0x40010000
 80070fc:	40010400 	.word	0x40010400

08007100 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e043      	b.n	80071c2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f00c fb2e 	bl	80137b0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	; 0x24
 8007158:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f9c3 	bl	80074f8 <UART_SetConfig>
 8007172:	4603      	mov	r3, r0
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e022      	b.n	80071c2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc25 	bl	80079d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	6852      	ldr	r2, [r2, #4]
 8007194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	6892      	ldr	r2, [r2, #8]
 80071a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fcac 	bl	8007b18 <UART_CheckIdleState>
 80071c0:	4603      	mov	r3, r0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b088      	sub	sp, #32
 80071ce:	af02      	add	r7, sp, #8
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	4613      	mov	r3, r2
 80071d8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d175      	bne.n	80072d6 <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_UART_Transmit+0x2c>
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e06e      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_UART_Transmit+0x3e>
 8007204:	2302      	movs	r3, #2
 8007206:	e067      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2221      	movs	r2, #33	; 0x21
 800721a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800721e:	f7fa fd07 	bl	8001c30 <HAL_GetTick>
 8007222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8007234:	e032      	b.n	800729c <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2200      	movs	r2, #0
 8007250:	2180      	movs	r1, #128	; 0x80
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f906 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e03a      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	d110      	bne.n	800728e <HAL_UART_Transmit+0xc4>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10c      	bne.n	800728e <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007284:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	3302      	adds	r3, #2
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	e006      	b.n	800729c <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	1c59      	adds	r1, r3, #1
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1c6      	bne.n	8007236 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2200      	movs	r2, #0
 80072b0:	2140      	movs	r1, #64	; 0x40
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f8d6 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e00a      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e000      	b.n	80072d8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80072d6:	2302      	movs	r3, #2
  }
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	f040 80ac 	bne.w	800745a <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_UART_Receive+0x2e>
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e0a4      	b.n	800745c <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_UART_Receive+0x40>
 800731c:	2302      	movs	r3, #2
 800731e:	e09d      	b.n	800745c <HAL_UART_Receive+0x17c>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2222      	movs	r2, #34	; 0x22
 8007332:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007336:	f7fa fc7b 	bl	8001c30 <HAL_GetTick>
 800733a:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	88fa      	ldrh	r2, [r7, #6]
 8007348:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007354:	d10e      	bne.n	8007374 <HAL_UART_Receive+0x94>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d105      	bne.n	800736a <HAL_UART_Receive+0x8a>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007368:	e028      	b.n	80073bc <HAL_UART_Receive+0xdc>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	22ff      	movs	r2, #255	; 0xff
 800736e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007372:	e023      	b.n	80073bc <HAL_UART_Receive+0xdc>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <HAL_UART_Receive+0xb8>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d104      	bne.n	800738e <HAL_UART_Receive+0xae>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	22ff      	movs	r2, #255	; 0xff
 8007388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800738c:	e016      	b.n	80073bc <HAL_UART_Receive+0xdc>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	227f      	movs	r2, #127	; 0x7f
 8007392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007396:	e011      	b.n	80073bc <HAL_UART_Receive+0xdc>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073a0:	d10c      	bne.n	80073bc <HAL_UART_Receive+0xdc>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <HAL_UART_Receive+0xd4>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	227f      	movs	r2, #127	; 0x7f
 80073ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073b2:	e003      	b.n	80073bc <HAL_UART_Receive+0xdc>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	223f      	movs	r2, #63	; 0x3f
 80073b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073c2:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80073c4:	e039      	b.n	800743a <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	2200      	movs	r2, #0
 80073e0:	2120      	movs	r1, #32
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f83e 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e034      	b.n	800745c <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	d112      	bne.n	8007422 <HAL_UART_Receive+0x142>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10e      	bne.n	8007422 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	b29a      	uxth	r2, r3
 8007410:	8b7b      	ldrh	r3, [r7, #26]
 8007412:	4013      	ands	r3, r2
 8007414:	b29a      	uxth	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	3302      	adds	r3, #2
 800741e:	60bb      	str	r3, [r7, #8]
 8007420:	e00b      	b.n	800743a <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	60ba      	str	r2, [r7, #8]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	6812      	ldr	r2, [r2, #0]
 800742c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800742e:	b2d1      	uxtb	r1, r2
 8007430:	8b7a      	ldrh	r2, [r7, #26]
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	400a      	ands	r2, r1
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1bf      	bne.n	80073c6 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e000      	b.n	800745c <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007474:	e02c      	b.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d028      	beq.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <UART_WaitOnFlagUntilTimeout+0x30>
 8007484:	f7fa fbd4 	bl	8001c30 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	1ad2      	subs	r2, r2, r3
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	429a      	cmp	r2, r3
 8007492:	d31d      	bcc.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	6892      	ldr	r2, [r2, #8]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e00f      	b.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69da      	ldr	r2, [r3, #28]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	401a      	ands	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d0c3      	beq.n	8007476 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007504:	2310      	movs	r3, #16
 8007506:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8007508:	2300      	movs	r3, #0
 800750a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800750c:	2300      	movs	r3, #0
 800750e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6819      	ldr	r1, [r3, #0]
 8007536:	4baa      	ldr	r3, [pc, #680]	; (80077e0 <UART_SetConfig+0x2e8>)
 8007538:	400b      	ands	r3, r1
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	430b      	orrs	r3, r1
 800753e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	6852      	ldr	r2, [r2, #4]
 800754a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68d2      	ldr	r2, [r2, #12]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	6892      	ldr	r2, [r2, #8]
 800756c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	430a      	orrs	r2, r1
 8007574:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a9a      	ldr	r2, [pc, #616]	; (80077e4 <UART_SetConfig+0x2ec>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d11f      	bne.n	80075c0 <UART_SetConfig+0xc8>
 8007580:	4b99      	ldr	r3, [pc, #612]	; (80077e8 <UART_SetConfig+0x2f0>)
 8007582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	2b03      	cmp	r3, #3
 800758c:	f200 813e 	bhi.w	800780c <UART_SetConfig+0x314>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0xa0>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075b5 	.word	0x080075b5
 80075a0:	080075af 	.word	0x080075af
 80075a4:	080075bb 	.word	0x080075bb
 80075a8:	2301      	movs	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]
 80075ac:	e12e      	b.n	800780c <UART_SetConfig+0x314>
 80075ae:	2302      	movs	r3, #2
 80075b0:	75fb      	strb	r3, [r7, #23]
 80075b2:	e12b      	b.n	800780c <UART_SetConfig+0x314>
 80075b4:	2304      	movs	r3, #4
 80075b6:	75fb      	strb	r3, [r7, #23]
 80075b8:	e128      	b.n	800780c <UART_SetConfig+0x314>
 80075ba:	2308      	movs	r3, #8
 80075bc:	75fb      	strb	r3, [r7, #23]
 80075be:	e125      	b.n	800780c <UART_SetConfig+0x314>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a89      	ldr	r2, [pc, #548]	; (80077ec <UART_SetConfig+0x2f4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d130      	bne.n	800762c <UART_SetConfig+0x134>
 80075ca:	4b87      	ldr	r3, [pc, #540]	; (80077e8 <UART_SetConfig+0x2f0>)
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	f003 030c 	and.w	r3, r3, #12
 80075d4:	2b0c      	cmp	r3, #12
 80075d6:	f200 8119 	bhi.w	800780c <UART_SetConfig+0x314>
 80075da:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <UART_SetConfig+0xe8>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	08007615 	.word	0x08007615
 80075e4:	0800780d 	.word	0x0800780d
 80075e8:	0800780d 	.word	0x0800780d
 80075ec:	0800780d 	.word	0x0800780d
 80075f0:	08007621 	.word	0x08007621
 80075f4:	0800780d 	.word	0x0800780d
 80075f8:	0800780d 	.word	0x0800780d
 80075fc:	0800780d 	.word	0x0800780d
 8007600:	0800761b 	.word	0x0800761b
 8007604:	0800780d 	.word	0x0800780d
 8007608:	0800780d 	.word	0x0800780d
 800760c:	0800780d 	.word	0x0800780d
 8007610:	08007627 	.word	0x08007627
 8007614:	2300      	movs	r3, #0
 8007616:	75fb      	strb	r3, [r7, #23]
 8007618:	e0f8      	b.n	800780c <UART_SetConfig+0x314>
 800761a:	2302      	movs	r3, #2
 800761c:	75fb      	strb	r3, [r7, #23]
 800761e:	e0f5      	b.n	800780c <UART_SetConfig+0x314>
 8007620:	2304      	movs	r3, #4
 8007622:	75fb      	strb	r3, [r7, #23]
 8007624:	e0f2      	b.n	800780c <UART_SetConfig+0x314>
 8007626:	2308      	movs	r3, #8
 8007628:	75fb      	strb	r3, [r7, #23]
 800762a:	e0ef      	b.n	800780c <UART_SetConfig+0x314>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a6f      	ldr	r2, [pc, #444]	; (80077f0 <UART_SetConfig+0x2f8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d11c      	bne.n	8007670 <UART_SetConfig+0x178>
 8007636:	4b6c      	ldr	r3, [pc, #432]	; (80077e8 <UART_SetConfig+0x2f0>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007640:	2b10      	cmp	r3, #16
 8007642:	d00f      	beq.n	8007664 <UART_SetConfig+0x16c>
 8007644:	2b10      	cmp	r3, #16
 8007646:	d802      	bhi.n	800764e <UART_SetConfig+0x156>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <UART_SetConfig+0x160>
 800764c:	e0de      	b.n	800780c <UART_SetConfig+0x314>
 800764e:	2b20      	cmp	r3, #32
 8007650:	d005      	beq.n	800765e <UART_SetConfig+0x166>
 8007652:	2b30      	cmp	r3, #48	; 0x30
 8007654:	d009      	beq.n	800766a <UART_SetConfig+0x172>
 8007656:	e0d9      	b.n	800780c <UART_SetConfig+0x314>
 8007658:	2300      	movs	r3, #0
 800765a:	75fb      	strb	r3, [r7, #23]
 800765c:	e0d6      	b.n	800780c <UART_SetConfig+0x314>
 800765e:	2302      	movs	r3, #2
 8007660:	75fb      	strb	r3, [r7, #23]
 8007662:	e0d3      	b.n	800780c <UART_SetConfig+0x314>
 8007664:	2304      	movs	r3, #4
 8007666:	75fb      	strb	r3, [r7, #23]
 8007668:	e0d0      	b.n	800780c <UART_SetConfig+0x314>
 800766a:	2308      	movs	r3, #8
 800766c:	75fb      	strb	r3, [r7, #23]
 800766e:	e0cd      	b.n	800780c <UART_SetConfig+0x314>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a5f      	ldr	r2, [pc, #380]	; (80077f4 <UART_SetConfig+0x2fc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d11c      	bne.n	80076b4 <UART_SetConfig+0x1bc>
 800767a:	4b5b      	ldr	r3, [pc, #364]	; (80077e8 <UART_SetConfig+0x2f0>)
 800767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007680:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d00f      	beq.n	80076a8 <UART_SetConfig+0x1b0>
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d802      	bhi.n	8007692 <UART_SetConfig+0x19a>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <UART_SetConfig+0x1a4>
 8007690:	e0bc      	b.n	800780c <UART_SetConfig+0x314>
 8007692:	2b80      	cmp	r3, #128	; 0x80
 8007694:	d005      	beq.n	80076a2 <UART_SetConfig+0x1aa>
 8007696:	2bc0      	cmp	r3, #192	; 0xc0
 8007698:	d009      	beq.n	80076ae <UART_SetConfig+0x1b6>
 800769a:	e0b7      	b.n	800780c <UART_SetConfig+0x314>
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]
 80076a0:	e0b4      	b.n	800780c <UART_SetConfig+0x314>
 80076a2:	2302      	movs	r3, #2
 80076a4:	75fb      	strb	r3, [r7, #23]
 80076a6:	e0b1      	b.n	800780c <UART_SetConfig+0x314>
 80076a8:	2304      	movs	r3, #4
 80076aa:	75fb      	strb	r3, [r7, #23]
 80076ac:	e0ae      	b.n	800780c <UART_SetConfig+0x314>
 80076ae:	2308      	movs	r3, #8
 80076b0:	75fb      	strb	r3, [r7, #23]
 80076b2:	e0ab      	b.n	800780c <UART_SetConfig+0x314>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a4f      	ldr	r2, [pc, #316]	; (80077f8 <UART_SetConfig+0x300>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d120      	bne.n	8007700 <UART_SetConfig+0x208>
 80076be:	4b4a      	ldr	r3, [pc, #296]	; (80077e8 <UART_SetConfig+0x2f0>)
 80076c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076cc:	d012      	beq.n	80076f4 <UART_SetConfig+0x1fc>
 80076ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d2:	d802      	bhi.n	80076da <UART_SetConfig+0x1e2>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <UART_SetConfig+0x1f0>
 80076d8:	e098      	b.n	800780c <UART_SetConfig+0x314>
 80076da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076de:	d006      	beq.n	80076ee <UART_SetConfig+0x1f6>
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e4:	d009      	beq.n	80076fa <UART_SetConfig+0x202>
 80076e6:	e091      	b.n	800780c <UART_SetConfig+0x314>
 80076e8:	2300      	movs	r3, #0
 80076ea:	75fb      	strb	r3, [r7, #23]
 80076ec:	e08e      	b.n	800780c <UART_SetConfig+0x314>
 80076ee:	2302      	movs	r3, #2
 80076f0:	75fb      	strb	r3, [r7, #23]
 80076f2:	e08b      	b.n	800780c <UART_SetConfig+0x314>
 80076f4:	2304      	movs	r3, #4
 80076f6:	75fb      	strb	r3, [r7, #23]
 80076f8:	e088      	b.n	800780c <UART_SetConfig+0x314>
 80076fa:	2308      	movs	r3, #8
 80076fc:	75fb      	strb	r3, [r7, #23]
 80076fe:	e085      	b.n	800780c <UART_SetConfig+0x314>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a3d      	ldr	r2, [pc, #244]	; (80077fc <UART_SetConfig+0x304>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d120      	bne.n	800774c <UART_SetConfig+0x254>
 800770a:	4b37      	ldr	r3, [pc, #220]	; (80077e8 <UART_SetConfig+0x2f0>)
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007718:	d012      	beq.n	8007740 <UART_SetConfig+0x248>
 800771a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771e:	d802      	bhi.n	8007726 <UART_SetConfig+0x22e>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <UART_SetConfig+0x23c>
 8007724:	e072      	b.n	800780c <UART_SetConfig+0x314>
 8007726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772a:	d006      	beq.n	800773a <UART_SetConfig+0x242>
 800772c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007730:	d009      	beq.n	8007746 <UART_SetConfig+0x24e>
 8007732:	e06b      	b.n	800780c <UART_SetConfig+0x314>
 8007734:	2301      	movs	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
 8007738:	e068      	b.n	800780c <UART_SetConfig+0x314>
 800773a:	2302      	movs	r3, #2
 800773c:	75fb      	strb	r3, [r7, #23]
 800773e:	e065      	b.n	800780c <UART_SetConfig+0x314>
 8007740:	2304      	movs	r3, #4
 8007742:	75fb      	strb	r3, [r7, #23]
 8007744:	e062      	b.n	800780c <UART_SetConfig+0x314>
 8007746:	2308      	movs	r3, #8
 8007748:	75fb      	strb	r3, [r7, #23]
 800774a:	e05f      	b.n	800780c <UART_SetConfig+0x314>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2b      	ldr	r2, [pc, #172]	; (8007800 <UART_SetConfig+0x308>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d120      	bne.n	8007798 <UART_SetConfig+0x2a0>
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <UART_SetConfig+0x2f0>)
 8007758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007764:	d012      	beq.n	800778c <UART_SetConfig+0x294>
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	d802      	bhi.n	8007772 <UART_SetConfig+0x27a>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <UART_SetConfig+0x288>
 8007770:	e04c      	b.n	800780c <UART_SetConfig+0x314>
 8007772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007776:	d006      	beq.n	8007786 <UART_SetConfig+0x28e>
 8007778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800777c:	d009      	beq.n	8007792 <UART_SetConfig+0x29a>
 800777e:	e045      	b.n	800780c <UART_SetConfig+0x314>
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
 8007784:	e042      	b.n	800780c <UART_SetConfig+0x314>
 8007786:	2302      	movs	r3, #2
 8007788:	75fb      	strb	r3, [r7, #23]
 800778a:	e03f      	b.n	800780c <UART_SetConfig+0x314>
 800778c:	2304      	movs	r3, #4
 800778e:	75fb      	strb	r3, [r7, #23]
 8007790:	e03c      	b.n	800780c <UART_SetConfig+0x314>
 8007792:	2308      	movs	r3, #8
 8007794:	75fb      	strb	r3, [r7, #23]
 8007796:	e039      	b.n	800780c <UART_SetConfig+0x314>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a19      	ldr	r2, [pc, #100]	; (8007804 <UART_SetConfig+0x30c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d135      	bne.n	800780e <UART_SetConfig+0x316>
 80077a2:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <UART_SetConfig+0x2f0>)
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80077ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b0:	d012      	beq.n	80077d8 <UART_SetConfig+0x2e0>
 80077b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b6:	d802      	bhi.n	80077be <UART_SetConfig+0x2c6>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <UART_SetConfig+0x2d4>
 80077bc:	e026      	b.n	800780c <UART_SetConfig+0x314>
 80077be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c2:	d006      	beq.n	80077d2 <UART_SetConfig+0x2da>
 80077c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80077c8:	d01e      	beq.n	8007808 <UART_SetConfig+0x310>
 80077ca:	e01f      	b.n	800780c <UART_SetConfig+0x314>
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
 80077d0:	e01c      	b.n	800780c <UART_SetConfig+0x314>
 80077d2:	2302      	movs	r3, #2
 80077d4:	75fb      	strb	r3, [r7, #23]
 80077d6:	e019      	b.n	800780c <UART_SetConfig+0x314>
 80077d8:	2304      	movs	r3, #4
 80077da:	75fb      	strb	r3, [r7, #23]
 80077dc:	e016      	b.n	800780c <UART_SetConfig+0x314>
 80077de:	bf00      	nop
 80077e0:	efff69f3 	.word	0xefff69f3
 80077e4:	40011000 	.word	0x40011000
 80077e8:	40023800 	.word	0x40023800
 80077ec:	40004400 	.word	0x40004400
 80077f0:	40004800 	.word	0x40004800
 80077f4:	40004c00 	.word	0x40004c00
 80077f8:	40005000 	.word	0x40005000
 80077fc:	40011400 	.word	0x40011400
 8007800:	40007800 	.word	0x40007800
 8007804:	40007c00 	.word	0x40007c00
 8007808:	2308      	movs	r3, #8
 800780a:	75fb      	strb	r3, [r7, #23]
 800780c:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007816:	d16c      	bne.n	80078f2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b08      	cmp	r3, #8
 800781c:	d854      	bhi.n	80078c8 <UART_SetConfig+0x3d0>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <UART_SetConfig+0x32c>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007849 	.word	0x08007849
 8007828:	08007865 	.word	0x08007865
 800782c:	08007881 	.word	0x08007881
 8007830:	080078c9 	.word	0x080078c9
 8007834:	08007897 	.word	0x08007897
 8007838:	080078c9 	.word	0x080078c9
 800783c:	080078c9 	.word	0x080078c9
 8007840:	080078c9 	.word	0x080078c9
 8007844:	080078b3 	.word	0x080078b3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007848:	f7fe fb16 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 800784c:	4603      	mov	r3, r0
 800784e:	005a      	lsls	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	441a      	add	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007860:	82bb      	strh	r3, [r7, #20]
      break;
 8007862:	e034      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007864:	f7fe fb1c 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 8007868:	4603      	mov	r3, r0
 800786a:	005a      	lsls	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	441a      	add	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	82bb      	strh	r3, [r7, #20]
      break;
 800787e:	e026      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	085a      	lsrs	r2, r3, #1
 8007886:	4b51      	ldr	r3, [pc, #324]	; (80079cc <UART_SetConfig+0x4d4>)
 8007888:	4413      	add	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007892:	82bb      	strh	r3, [r7, #20]
      break;
 8007894:	e01b      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007896:	f7fe fa2d 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 800789a:	4603      	mov	r3, r0
 800789c:	005a      	lsls	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	441a      	add	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	82bb      	strh	r3, [r7, #20]
      break;
 80078b0:	e00d      	b.n	80078ce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	82bb      	strh	r3, [r7, #20]
      break;
 80078c6:	e002      	b.n	80078ce <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	74fb      	strb	r3, [r7, #19]
      break;
 80078cc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80078ce:	8abb      	ldrh	r3, [r7, #20]
 80078d0:	f023 030f 	bic.w	r3, r3, #15
 80078d4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d6:	8abb      	ldrh	r3, [r7, #20]
 80078d8:	105b      	asrs	r3, r3, #1
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	897b      	ldrh	r3, [r7, #10]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	897a      	ldrh	r2, [r7, #10]
 80078ee:	60da      	str	r2, [r3, #12]
 80078f0:	e067      	b.n	80079c2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d861      	bhi.n	80079bc <UART_SetConfig+0x4c4>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <UART_SetConfig+0x408>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007925 	.word	0x08007925
 8007904:	08007945 	.word	0x08007945
 8007908:	08007965 	.word	0x08007965
 800790c:	080079bd 	.word	0x080079bd
 8007910:	08007981 	.word	0x08007981
 8007914:	080079bd 	.word	0x080079bd
 8007918:	080079bd 	.word	0x080079bd
 800791c:	080079bd 	.word	0x080079bd
 8007920:	080079a1 	.word	0x080079a1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681c      	ldr	r4, [r3, #0]
 8007928:	f7fe faa6 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	441a      	add	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	fbb2 f3f3 	udiv	r3, r2, r3
 800793e:	b29b      	uxth	r3, r3
 8007940:	60e3      	str	r3, [r4, #12]
      break;
 8007942:	e03e      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681c      	ldr	r4, [r3, #0]
 8007948:	f7fe faaa 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	441a      	add	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	fbb2 f3f3 	udiv	r3, r2, r3
 800795e:	b29b      	uxth	r3, r3
 8007960:	60e3      	str	r3, [r4, #12]
      break;
 8007962:	e02e      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	0859      	lsrs	r1, r3, #1
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <UART_SetConfig+0x4d8>)
 8007970:	440b      	add	r3, r1
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	6849      	ldr	r1, [r1, #4]
 8007976:	fbb3 f3f1 	udiv	r3, r3, r1
 800797a:	b29b      	uxth	r3, r3
 800797c:	60d3      	str	r3, [r2, #12]
      break;
 800797e:	e020      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681c      	ldr	r4, [r3, #0]
 8007984:	f7fe f9b6 	bl	8005cf4 <HAL_RCC_GetSysClockFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	441a      	add	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	fbb2 f3f3 	udiv	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	60e3      	str	r3, [r4, #12]
      break;
 800799e:	e010      	b.n	80079c2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6852      	ldr	r2, [r2, #4]
 80079a8:	0852      	lsrs	r2, r2, #1
 80079aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6852      	ldr	r2, [r2, #4]
 80079b2:	fbb1 f2f2 	udiv	r2, r1, r2
 80079b6:	b292      	uxth	r2, r2
 80079b8:	60da      	str	r2, [r3, #12]
      break;
 80079ba:	e002      	b.n	80079c2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	74fb      	strb	r3, [r7, #19]
      break;
 80079c0:	bf00      	nop
    }
  }

  return ret;
 80079c2:	7cfb      	ldrb	r3, [r7, #19]

}
 80079c4:	4618      	mov	r0, r3
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	01e84800 	.word	0x01e84800
 80079d0:	00f42400 	.word	0x00f42400

080079d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	6852      	ldr	r2, [r2, #4]
 80079f2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	6852      	ldr	r2, [r2, #4]
 8007a14:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	6852      	ldr	r2, [r2, #4]
 8007a36:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6812      	ldr	r2, [r2, #0]
 8007a56:	6852      	ldr	r2, [r2, #4]
 8007a58:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	6892      	ldr	r2, [r2, #8]
 8007a7a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	6892      	ldr	r2, [r2, #8]
 8007a9c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01a      	beq.n	8007aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	6852      	ldr	r2, [r2, #4]
 8007abe:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad2:	d10a      	bne.n	8007aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	6852      	ldr	r2, [r2, #4]
 8007ade:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	6852      	ldr	r2, [r2, #4]
 8007b00:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b2a:	f7fa f881 	bl	8001c30 <HAL_GetTick>
 8007b2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d10e      	bne.n	8007b5c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff fc89 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e00c      	b.n	8007b76 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d027      	beq.n	8007bea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4b2f      	ldr	r3, [pc, #188]	; (8007c60 <FMC_SDRAM_Init+0xe0>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007bb0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007bb6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007bbc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007bc2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007bc8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007bce:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007bd4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007bda:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e032      	b.n	8007c50 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bf6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007c00:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007c06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <FMC_SDRAM_Init+0xe0>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007c2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007c30:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007c36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007c3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	ffff8000 	.word	0xffff8000

08007c64 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d02e      	beq.n	8007cdc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c8a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007c9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007ca4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007cae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007cb8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007cc2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	609a      	str	r2, [r3, #8]
 8007cda:	e039      	b.n	8007d50 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <FMC_SDRAM_Timing_Init+0xfc>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d0e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007d28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007d32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	ff0f0fff 	.word	0xff0f0fff

08007d64 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d7c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007d86:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
	...

08007da8 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007da8:	b084      	sub	sp, #16
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	f107 0014 	add.w	r0, r7, #20
 8007db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d11e      	bne.n	8007dfe <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <USB_CoreInit+0xa0>)
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8007de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d105      	bne.n	8007df6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f940 	bl	800807c <USB_CoreReset>
 8007dfc:	e00c      	b.n	8007e18 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f936 	bl	800807c <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d10b      	bne.n	8007e36 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f043 0206 	orr.w	r2, r3, #6
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f043 0220 	orr.w	r2, r3, #32
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e42:	b004      	add	sp, #16
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	ffbdffbf 	.word	0xffbdffbf

08007e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f043 0201 	orr.w	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d106      	bne.n	8007ebc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	e008      	b.n	8007ece <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8007ece:	2032      	movs	r0, #50	; 0x32
 8007ed0:	f7f9 feba 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	019b      	lsls	r3, r3, #6
 8007ef2:	f043 0220 	orr.w	r2, r3, #32
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a09      	ldr	r2, [pc, #36]	; (8007f28 <USB_FlushTxFifo+0x48>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d901      	bls.n	8007f0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e006      	b.n	8007f1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d0f0      	beq.n	8007efa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	00030d40 	.word	0x00030d40

08007f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4a09      	ldr	r2, [pc, #36]	; (8007f6c <USB_FlushRxFifo+0x40>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d901      	bls.n	8007f50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e006      	b.n	8007f5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d0f0      	beq.n	8007f3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	00030d40 	.word	0x00030d40

08007f70 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	460b      	mov	r3, r1
 8007f80:	71fb      	strb	r3, [r7, #7]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8007f8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d11d      	bne.n	8007fd2 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 8007f96:	88bb      	ldrh	r3, [r7, #4]
 8007f98:	3303      	adds	r3, #3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da00      	bge.n	8007fa0 <USB_WritePacket+0x30>
 8007f9e:	3303      	adds	r3, #3
 8007fa0:	109b      	asrs	r3, r3, #2
 8007fa2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e00f      	b.n	8007fca <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	031a      	lsls	r2, r3, #12
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d3eb      	bcc.n	8007faa <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8007ff2:	88fb      	ldrh	r3, [r7, #6]
 8007ff4:	3303      	adds	r3, #3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da00      	bge.n	8007ffc <USB_ReadPacket+0x1c>
 8007ffa:	3303      	adds	r3, #3
 8007ffc:	109b      	asrs	r3, r3, #2
 8007ffe:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	e00b      	b.n	800801e <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	3301      	adds	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3304      	adds	r3, #4
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	429a      	cmp	r2, r3
 8008024:	d3ef      	bcc.n	8008006 <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 8008026:	68bb      	ldr	r3, [r7, #8]
}
 8008028:	4618      	mov	r0, r3
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  return v;
 8008050:	68fb      	ldr	r3, [r7, #12]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0301 	and.w	r3, r3, #1
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4a13      	ldr	r2, [pc, #76]	; (80080e0 <USB_CoreReset+0x64>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d901      	bls.n	800809a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e01b      	b.n	80080d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	daf2      	bge.n	8008088 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f043 0201 	orr.w	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <USB_CoreReset+0x64>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d901      	bls.n	80080c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e006      	b.n	80080d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d0f0      	beq.n	80080b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	00030d40 	.word	0x00030d40

080080e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080e4:	b084      	sub	sp, #16
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	f107 001c 	add.w	r0, r7, #28
 80080f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080fc:	461a      	mov	r2, r3
 80080fe:	2300      	movs	r3, #0
 8008100:	6013      	str	r3, [r2, #0]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	2b03      	cmp	r3, #3
 8008112:	d10f      	bne.n	8008134 <USB_HostInit+0x50>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800811a:	d00b      	beq.n	8008134 <USB_HostInit+0x50>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f043 0304 	orr.w	r3, r3, #4
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e00a      	b.n	800814a <USB_HostInit+0x66>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f023 0304 	bic.w	r3, r3, #4
 8008148:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
 800814a:	2110      	movs	r1, #16
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fec7 	bl	8007ee0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff feea 	bl	8007f2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0; i < cfg.Host_channels; i++)
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	e015      	b.n	800818a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFF;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	461a      	mov	r2, r3
 800816c:	f04f 33ff 	mov.w	r3, #4294967295
 8008170:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817e:	461a      	mov	r2, r3
 8008180:	2300      	movs	r3, #0
 8008182:	60d3      	str	r3, [r2, #12]
  for (i = 0; i < cfg.Host_channels; i++)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	6a3a      	ldr	r2, [r7, #32]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	429a      	cmp	r2, r3
 8008190:	d8e5      	bhi.n	800815e <USB_HostInit+0x7a>
  }

  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1);
 8008192:	2101      	movs	r1, #1
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8a7 	bl	80082e8 <USB_DriveVbus>

  HAL_Delay(200);
 800819a:	20c8      	movs	r0, #200	; 0xc8
 800819c:	f7f9 fd54 	bl	8001c48 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFF;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ac:	615a      	str	r2, [r3, #20]

  if(USBx == USB_OTG_FS)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081b4:	d10a      	bne.n	80081cc <USB_HostInit+0xe8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2280      	movs	r2, #128	; 0x80
 80081ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60 << 16)& USB_OTG_NPTXFD) | 0x80);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a14      	ldr	r2, [pc, #80]	; (8008210 <USB_HostInit+0x12c>)
 80081c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a13      	ldr	r2, [pc, #76]	; (8008214 <USB_HostInit+0x130>)
 80081c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80081ca:	e00a      	b.n	80081e2 <USB_HostInit+0xfe>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x200;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100 << 16)& USB_OTG_NPTXFD) | 0x200);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a10      	ldr	r2, [pc, #64]	; (8008218 <USB_HostInit+0x134>)
 80081d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a0f      	ldr	r2, [pc, #60]	; (800821c <USB_HostInit+0x138>)
 80081de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80081e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <USB_HostInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f043 0210 	orr.w	r2, r3, #16
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699a      	ldr	r2, [r3, #24]
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <USB_HostInit+0x13c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800820c:	b004      	add	sp, #16
 800820e:	4770      	bx	lr
 8008210:	00600080 	.word	0x00600080
 8008214:	004000e0 	.word	0x004000e0
 8008218:	01000200 	.word	0x01000200
 800821c:	00e00300 	.word	0x00e00300
 8008220:	a3200008 	.word	0xa3200008

08008224 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008236:	461a      	mov	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824c:	4619      	mov	r1, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	4313      	orrs	r3, r2
 800825e:	600b      	str	r3, [r1, #0]

  if (freq ==  HCFG_48_MHZ)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d107      	bne.n	8008276 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800826c:	461a      	mov	r2, r3
 800826e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008272:	6053      	str	r3, [r2, #4]
 8008274:	e009      	b.n	800828a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	2b02      	cmp	r3, #2
 800827a:	d106      	bne.n	800828a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008282:	461a      	mov	r2, r3
 8008284:	f241 7370 	movw	r3, #6000	; 0x1770
 8008288:	6053      	str	r3, [r2, #4]
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USB_ResetPort>:
  * @retval HAL status
  * @note : (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80082b0:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082b8:	461a      	mov	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c0:	6013      	str	r3, [r2, #0]
  HAL_Delay (100);                                /* See Note #1 */
 80082c2:	2064      	movs	r0, #100	; 0x64
 80082c4:	f7f9 fcc0 	bl	8001c48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082ce:	461a      	mov	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d6:	6013      	str	r3, [r2, #0]
  HAL_Delay (10);
 80082d8:	200a      	movs	r0, #10
 80082da:	f7f9 fcb5 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008304:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <USB_DriveVbus+0x3e>
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d107      	bne.n	8008326 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800831c:	461a      	mov	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008324:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800832c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008330:	d10a      	bne.n	8008348 <USB_DriveVbus+0x60>
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d107      	bne.n	8008348 <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800833e:	461a      	mov	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008346:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	0c5b      	lsrs	r3, r3, #17
 800836c:	f003 0303 	and.w	r3, r3, #3
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	b29b      	uxth	r3, r3
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	461a      	mov	r2, r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	70fb      	strb	r3, [r7, #3]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70bb      	strb	r3, [r7, #2]
 80083b2:	4613      	mov	r3, r2
 80083b4:	707b      	strb	r3, [r7, #1]

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c2:	461a      	mov	r2, r3
 80083c4:	f04f 33ff 	mov.w	r3, #4294967295
 80083c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083ca:	7d3b      	ldrb	r3, [r7, #20]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	f200 8086 	bhi.w	80084de <USB_HC_Init+0x142>
 80083d2:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <USB_HC_Init+0x3c>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	08008495 	.word	0x08008495
 80083e0:	080083e9 	.word	0x080083e9
 80083e4:	08008455 	.word	0x08008455
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f4:	461a      	mov	r2, r3
 80083f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80083fa:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;

    if (epnum & 0x80)
 80083fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	da11      	bge.n	8008428 <USB_HC_Init+0x8c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4413      	add	r3, r2
 800840c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008410:	4619      	mov	r1, r3
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008424:	60cb      	str	r3, [r1, #12]
      if(USBx != USB_OTG_FS)
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
      }
    }
    break;
 8008426:	e055      	b.n	80084d4 <USB_HC_Init+0x138>
      if(USBx != USB_OTG_FS)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800842e:	d051      	beq.n	80084d4 <USB_HC_Init+0x138>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843c:	4619      	mov	r1, r3
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4413      	add	r3, r2
 8008446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008450:	60cb      	str	r3, [r1, #12]
    break;
 8008452:	e03f      	b.n	80084d4 <USB_HC_Init+0x138>

  case EP_TYPE_INTR:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008460:	461a      	mov	r2, r3
 8008462:	f240 639d 	movw	r3, #1693	; 0x69d
 8008466:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
 8008468:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800846c:	2b00      	cmp	r3, #0
 800846e:	da33      	bge.n	80084d8 <USB_HC_Init+0x13c>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	4619      	mov	r1, r3
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4413      	add	r3, r2
 8008486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008490:	60cb      	str	r3, [r1, #12]
    }

    break;
 8008492:	e021      	b.n	80084d8 <USB_HC_Init+0x13c>
  case EP_TYPE_ISOC:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4413      	add	r3, r2
 800849c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a0:	461a      	mov	r2, r3
 80084a2:	f240 2325 	movw	r3, #549	; 0x225
 80084a6:	60d3      	str	r3, [r2, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
 80084a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	da15      	bge.n	80084dc <USB_HC_Init+0x140>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084bc:	4619      	mov	r1, r3
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80084d0:	60cb      	str	r3, [r1, #12]
    }
    break;
 80084d2:	e003      	b.n	80084dc <USB_HC_Init+0x140>
    break;
 80084d4:	bf00      	nop
 80084d6:	e002      	b.n	80084de <USB_HC_Init+0x142>
    break;
 80084d8:	bf00      	nop
 80084da:	e000      	b.n	80084de <USB_HC_Init+0x142>
    break;
 80084dc:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084e4:	4618      	mov	r0, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	2101      	movs	r1, #1
 80084f2:	fa01 f202 	lsl.w	r2, r1, r2
 80084f6:	4313      	orrs	r3, r2
 80084f8:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	4619      	mov	r1, r3
 8008514:	787b      	ldrb	r3, [r7, #1]
 8008516:	059b      	lsls	r3, r3, #22
 8008518:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 800851c:	78bb      	ldrb	r3, [r7, #2]
 800851e:	02db      	lsls	r3, r3, #11
 8008520:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8008524:	431a      	orrs	r2, r3
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8008526:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800852a:	2b00      	cmp	r3, #0
 800852c:	da02      	bge.n	8008534 <USB_HC_Init+0x198>
 800852e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008532:	e000      	b.n	8008536 <USB_HC_Init+0x19a>
 8008534:	2300      	movs	r3, #0
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 8008536:	431a      	orrs	r2, r3
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8008538:	7c3b      	ldrb	r3, [r7, #16]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d102      	bne.n	8008544 <USB_HC_Init+0x1a8>
 800853e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008542:	e000      	b.n	8008546 <USB_HC_Init+0x1aa>
 8008544:	2300      	movs	r3, #0
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8008546:	431a      	orrs	r2, r3
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 8008548:	7d3b      	ldrb	r3, [r7, #20]
 800854a:	049b      	lsls	r3, r3, #18
 800854c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 8008550:	431a      	orrs	r2, r3
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8008552:	8b3b      	ldrh	r3, [r7, #24]
 8008554:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 8008558:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 800855a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800855c:	7d3b      	ldrb	r3, [r7, #20]
 800855e:	2b03      	cmp	r3, #3
 8008560:	d110      	bne.n	8008584 <USB_HC_Init+0x1e8>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	4619      	mov	r1, r3
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008582:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop

08008594 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af02      	add	r7, sp, #8
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
  static __IO uint32_t tmpreg = 0;
  uint8_t  is_oddframe = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	757b      	strb	r3, [r7, #21]
  uint16_t len_words = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	827b      	strh	r3, [r7, #18]
  uint16_t num_packets = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	82fb      	strh	r3, [r7, #22]
  uint16_t max_hc_pkt_count = 256;
 80085ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085b2:	823b      	strh	r3, [r7, #16]

  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ba:	d02b      	beq.n	8008614 <USB_HC_StartXfer+0x80>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	791b      	ldrb	r3, [r3, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d127      	bne.n	8008614 <USB_HC_StartXfer+0x80>
  {
    if((dma == 0) && (hc->do_ping == 1))
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10b      	bne.n	80085e2 <USB_HC_StartXfer+0x4e>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	795b      	ldrb	r3, [r3, #5]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d107      	bne.n	80085e2 <USB_HC_StartXfer+0x4e>
    {
      USB_DoPing(USBx, hc->ch_num);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fa49 	bl	8008a70 <USB_DoPing>
      return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e123      	b.n	800882a <USB_HC_StartXfer+0x296>
    }
    else if(dma == 1)
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d115      	bne.n	8008614 <USB_HC_StartXfer+0x80>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f6:	4619      	mov	r1, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800860c:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2200      	movs	r2, #0
 8008612:	715a      	strb	r2, [r3, #5]
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d019      	beq.n	8008650 <USB_HC_StartXfer+0xbc>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1) / hc->max_packet;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	8912      	ldrh	r2, [r2, #8]
 8008624:	4413      	add	r3, r2
 8008626:	3b01      	subs	r3, #1
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	8912      	ldrh	r2, [r2, #8]
 800862c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008630:	82fb      	strh	r3, [r7, #22]

    if (num_packets > max_hc_pkt_count)
 8008632:	8afa      	ldrh	r2, [r7, #22]
 8008634:	8a3b      	ldrh	r3, [r7, #16]
 8008636:	429a      	cmp	r2, r3
 8008638:	d90c      	bls.n	8008654 <USB_HC_StartXfer+0xc0>
    {
      num_packets = max_hc_pkt_count;
 800863a:	8a3b      	ldrh	r3, [r7, #16]
 800863c:	82fb      	strh	r3, [r7, #22]
      hc->xfer_len = num_packets * hc->max_packet;
 800863e:	8afb      	ldrh	r3, [r7, #22]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	8912      	ldrh	r2, [r2, #8]
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	461a      	mov	r2, r3
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	611a      	str	r2, [r3, #16]
 800864e:	e001      	b.n	8008654 <USB_HC_StartXfer+0xc0>
    }
  }
  else
  {
    num_packets = 1;
 8008650:	2301      	movs	r3, #1
 8008652:	82fb      	strh	r3, [r7, #22]
  }
  if (hc->ep_is_in)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	78db      	ldrb	r3, [r3, #3]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <USB_HC_StartXfer+0xd8>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 800865c:	8afb      	ldrh	r3, [r7, #22]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	8912      	ldrh	r2, [r2, #8]
 8008662:	fb02 f303 	mul.w	r3, r2, r3
 8008666:	461a      	mov	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867a:	4619      	mov	r1, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8008684:	8afb      	ldrh	r3, [r7, #22]
 8008686:	04db      	lsls	r3, r3, #19
 8008688:	4618      	mov	r0, r3
 800868a:	4b6a      	ldr	r3, [pc, #424]	; (8008834 <USB_HC_StartXfer+0x2a0>)
 800868c:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800868e:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	7a9b      	ldrb	r3, [r3, #10]
 8008694:	075b      	lsls	r3, r3, #29
 8008696:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800869a:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800869c:	610b      	str	r3, [r1, #16]

  if (dma)
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00a      	beq.n	80086ba <USB_HC_StartXfer+0x126>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	785b      	ldrb	r3, [r3, #1]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b2:	461a      	mov	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bf0c      	ite	eq
 80086ca:	2301      	moveq	r3, #1
 80086cc:	2300      	movne	r3, #0
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	757b      	strb	r3, [r7, #21]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	4619      	mov	r1, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086f6:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008706:	4619      	mov	r1, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	7d7a      	ldrb	r2, [r7, #21]
 800871a:	0752      	lsls	r2, r2, #29
 800871c:	4313      	orrs	r3, r2
 800871e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a41      	ldr	r2, [pc, #260]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008732:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008734:	4b40      	ldr	r3, [pc, #256]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800873c:	4a3e      	ldr	r2, [pc, #248]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 800873e:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	78db      	ldrb	r3, [r3, #3]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d006      	beq.n	8008756 <USB_HC_StartXfer+0x1c2>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008748:	4b3b      	ldr	r3, [pc, #236]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008750:	4a39      	ldr	r2, [pc, #228]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	e005      	b.n	8008762 <USB_HC_StartXfer+0x1ce>
  }
  else
  {
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008756:	4b38      	ldr	r3, [pc, #224]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800875e:	4a36      	ldr	r2, [pc, #216]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008760:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008762:	4b35      	ldr	r3, [pc, #212]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800876a:	4a33      	ldr	r2, [pc, #204]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 800876c:	6013      	str	r3, [r2, #0]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877c:	461a      	mov	r2, r3
 800877e:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <USB_HC_StartXfer+0x2a4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6013      	str	r3, [r2, #0]

  if (dma == 0) /* Slave mode */
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d14e      	bne.n	8008828 <USB_HC_StartXfer+0x294>
  {
    if((hc->ep_is_in == 0) && (hc->xfer_len > 0))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	78db      	ldrb	r3, [r3, #3]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d14a      	bne.n	8008828 <USB_HC_StartXfer+0x294>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d046      	beq.n	8008828 <USB_HC_StartXfer+0x294>
    {
      switch(hc->ep_type)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	79db      	ldrb	r3, [r3, #7]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d830      	bhi.n	8008804 <USB_HC_StartXfer+0x270>
 80087a2:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <USB_HC_StartXfer+0x214>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	080087dd 	.word	0x080087dd
 80087b0:	080087b9 	.word	0x080087b9
 80087b4:	080087dd 	.word	0x080087dd
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (hc->xfer_len + 3) / 4;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	3303      	adds	r3, #3
 80087be:	089b      	lsrs	r3, r3, #2
 80087c0:	827b      	strh	r3, [r7, #18]

        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80087c2:	8a7a      	ldrh	r2, [r7, #18]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d91c      	bls.n	8008808 <USB_HC_StartXfer+0x274>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80087da:	e015      	b.n	8008808 <USB_HC_StartXfer+0x274>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	3303      	adds	r3, #3
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	827b      	strh	r3, [r7, #18]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 80087e6:	8a7a      	ldrh	r2, [r7, #18]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d90a      	bls.n	800880c <USB_HC_StartXfer+0x278>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	619a      	str	r2, [r3, #24]
        }
        break;
 8008802:	e003      	b.n	800880c <USB_HC_StartXfer+0x278>

      default:
        break;
 8008804:	bf00      	nop
 8008806:	e002      	b.n	800880e <USB_HC_StartXfer+0x27a>
        break;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <USB_HC_StartXfer+0x27a>
        break;
 800880c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	68d9      	ldr	r1, [r3, #12]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	785a      	ldrb	r2, [r3, #1]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	b298      	uxth	r0, r3
 800881c:	2300      	movs	r3, #0
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	4603      	mov	r3, r0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff fba4 	bl	8007f70 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	1ff80000 	.word	0x1ff80000
 8008838:	2000030c 	.word	0x2000030c

0800883c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFF);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	b29b      	uxth	r3, r3
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]

  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	0c9b      	lsrs	r3, r3, #18
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00b      	beq.n	800889a <USB_HC_Halt+0x40>
     (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	0c9b      	lsrs	r3, r3, #18
 8008892:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 8008896:	2b02      	cmp	r3, #2
 8008898:	d170      	bne.n	800897c <USB_HC_Halt+0x122>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a6:	4619      	mov	r1, r3
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088ba:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d146      	bne.n	8008954 <USB_HC_Halt+0xfa>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d2:	4619      	mov	r1, r3
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088e6:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088f4:	4619      	mov	r1, r3
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008908:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4413      	add	r3, r2
 8008912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008916:	4619      	mov	r1, r3
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4413      	add	r3, r2
 8008920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800892a:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008938:	d81e      	bhi.n	8008978 <USB_HC_Halt+0x11e>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800894c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008950:	d0ec      	beq.n	800892c <USB_HC_Halt+0xd2>
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8008952:	e085      	b.n	8008a60 <USB_HC_Halt+0x206>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4413      	add	r3, r2
 800895c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008960:	4619      	mov	r1, r3
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008974:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8008976:	e073      	b.n	8008a60 <USB_HC_Halt+0x206>
          break;
 8008978:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800897a:	e071      	b.n	8008a60 <USB_HC_Halt+0x206>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008988:	4619      	mov	r1, r3
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899c:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d146      	bne.n	8008a3a <USB_HC_Halt+0x1e0>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b8:	4619      	mov	r1, r3
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089da:	4619      	mov	r1, r3
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ee:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fc:	4619      	mov	r1, r3
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a10:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a1e:	d81e      	bhi.n	8008a5e <USB_HC_Halt+0x204>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a36:	d0ec      	beq.n	8008a12 <USB_HC_Halt+0x1b8>
 8008a38:	e012      	b.n	8008a60 <USB_HC_Halt+0x206>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a46:	4619      	mov	r1, r3
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a5a:	600b      	str	r3, [r1, #0]
 8008a5c:	e000      	b.n	8008a60 <USB_HC_Halt+0x206>
          break;
 8008a5e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a90:	461a      	mov	r2, r3
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	04db      	lsls	r3, r3, #19
 8008a96:	4619      	mov	r1, r3
 8008a98:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <USB_DoPing+0x74>)
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa0:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ab8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ac0:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	1ff80000 	.word	0x1ff80000

08008ae8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	613b      	str	r3, [r7, #16]
  uint32_t value;

  USB_DisableGlobalInt(USBx);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff f9ba 	bl	8007e6e <USB_DisableGlobalInt>

    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 8008afa:	2110      	movs	r1, #16
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff f9ef 	bl	8007ee0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff fa12 	bl	8007f2c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75fb      	strb	r3, [r7, #23]
 8008b0c:	e01f      	b.n	8008b4e <USB_StopHost+0x66>
  {

    value = USBx_HC(i)->HCCHAR ;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b24:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b34:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	015a      	lsls	r2, r3, #5
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b42:	461a      	mov	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b0f      	cmp	r3, #15
 8008b52:	d9dc      	bls.n	8008b0e <USB_StopHost+0x26>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0; i <= 15; i++)
 8008b54:	2300      	movs	r3, #0
 8008b56:	75fb      	strb	r3, [r7, #23]
 8008b58:	e034      	b.n	8008bc4 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]

    value |= USB_OTG_HCCHAR_CHDIS;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b70:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b78:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b80:	60fb      	str	r3, [r7, #12]

    USBx_HC(i)->HCCHAR = value;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6013      	str	r3, [r2, #0]
    do
    {
      if (++count > 1000)
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	3301      	adds	r3, #1
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ba0:	d80c      	bhi.n	8008bbc <USB_StopHost+0xd4>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bb8:	d0ec      	beq.n	8008b94 <USB_StopHost+0xac>
 8008bba:	e000      	b.n	8008bbe <USB_StopHost+0xd6>
        break;
 8008bbc:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	d9c7      	bls.n	8008b5a <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFF;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff f933 	bl	8007e4c <USB_EnableGlobalInt>
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <disk_status+0x30>)
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	79fa      	ldrb	r2, [r7, #7]
 8008c08:	4905      	ldr	r1, [pc, #20]	; (8008c20 <disk_status+0x30>)
 8008c0a:	440a      	add	r2, r1
 8008c0c:	7a12      	ldrb	r2, [r2, #8]
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4798      	blx	r3
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000338 	.word	0x20000338

08008c24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	4a0d      	ldr	r2, [pc, #52]	; (8008c6c <disk_initialize+0x48>)
 8008c36:	5cd3      	ldrb	r3, [r2, r3]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d111      	bne.n	8008c60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	4a0b      	ldr	r2, [pc, #44]	; (8008c6c <disk_initialize+0x48>)
 8008c40:	2101      	movs	r1, #1
 8008c42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	4a09      	ldr	r2, [pc, #36]	; (8008c6c <disk_initialize+0x48>)
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	79fa      	ldrb	r2, [r7, #7]
 8008c52:	4906      	ldr	r1, [pc, #24]	; (8008c6c <disk_initialize+0x48>)
 8008c54:	440a      	add	r2, r1
 8008c56:	7a12      	ldrb	r2, [r2, #8]
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000338 	.word	0x20000338

08008c70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c70:	b590      	push	{r4, r7, lr}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <disk_read+0x3c>)
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	689c      	ldr	r4, [r3, #8]
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4a07      	ldr	r2, [pc, #28]	; (8008cac <disk_read+0x3c>)
 8008c90:	4413      	add	r3, r2
 8008c92:	7a18      	ldrb	r0, [r3, #8]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	47a0      	blx	r4
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000338 	.word	0x20000338

08008cb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008cb0:	b590      	push	{r4, r7, lr}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	4a0a      	ldr	r2, [pc, #40]	; (8008cec <disk_write+0x3c>)
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	68dc      	ldr	r4, [r3, #12]
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	4a07      	ldr	r2, [pc, #28]	; (8008cec <disk_write+0x3c>)
 8008cd0:	4413      	add	r3, r2
 8008cd2:	7a18      	ldrb	r0, [r3, #8]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	47a0      	blx	r4
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000338 	.word	0x20000338

08008cf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	603a      	str	r2, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <disk_ioctl+0x38>)
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	79fa      	ldrb	r2, [r7, #7]
 8008d0e:	4906      	ldr	r1, [pc, #24]	; (8008d28 <disk_ioctl+0x38>)
 8008d10:	440a      	add	r2, r1
 8008d12:	7a10      	ldrb	r0, [r2, #8]
 8008d14:	79b9      	ldrb	r1, [r7, #6]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	4798      	blx	r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000338 	.word	0x20000338

08008d2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3301      	adds	r3, #1
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d3c:	89fb      	ldrh	r3, [r7, #14]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	b21a      	sxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b21b      	sxth	r3, r3
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	b21b      	sxth	r3, r3
 8008d4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3303      	adds	r3, #3
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	3202      	adds	r2, #2
 8008d74:	7812      	ldrb	r2, [r2, #0]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	3201      	adds	r2, #1
 8008d82:	7812      	ldrb	r2, [r2, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7812      	ldrb	r2, [r2, #0]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d94:	68fb      	ldr	r3, [r7, #12]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	887a      	ldrh	r2, [r7, #2]
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	887b      	ldrh	r3, [r7, #2]
 8008dbc:	0a1b      	lsrs	r3, r3, #8
 8008dbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	887a      	ldrh	r2, [r7, #2]
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	0a1b      	lsrs	r3, r3, #8
 8008df2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	0a1b      	lsrs	r3, r3, #8
 8008e04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	b2d2      	uxtb	r2, r2
 8008e22:	701a      	strb	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00d      	beq.n	8008e66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	617a      	str	r2, [r7, #20]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	1c51      	adds	r1, r2, #1
 8008e54:	6139      	str	r1, [r7, #16]
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	607b      	str	r3, [r7, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f1      	bne.n	8008e4a <mem_cpy+0x1a>
	}
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e72:	b480      	push	{r7}
 8008e74:	b087      	sub	sp, #28
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	617a      	str	r2, [r7, #20]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	607b      	str	r3, [r7, #4]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f3      	bne.n	8008e82 <mem_set+0x10>
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008ea6:	b480      	push	{r7}
 8008ea8:	b089      	sub	sp, #36	; 0x24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	61fa      	str	r2, [r7, #28]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	61ba      	str	r2, [r7, #24]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	1acb      	subs	r3, r1, r3
 8008ed2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <mem_cmp+0x40>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0eb      	beq.n	8008ebe <mem_cmp+0x18>

	return r;
 8008ee6:	697b      	ldr	r3, [r7, #20]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3724      	adds	r7, #36	; 0x24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008efe:	e002      	b.n	8008f06 <chk_chr+0x12>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3301      	adds	r3, #1
 8008f04:	607b      	str	r3, [r7, #4]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <chk_chr+0x26>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d1f2      	bne.n	8008f00 <chk_chr+0xc>
	return *str;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d009      	beq.n	8008f4c <lock_fs+0x22>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f003 f916 	bl	800c16e <ff_req_grant>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <lock_fs+0x22>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <lock_fs+0x24>
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00d      	beq.n	8008f84 <unlock_fs+0x2e>
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	2b0c      	cmp	r3, #12
 8008f6c:	d00a      	beq.n	8008f84 <unlock_fs+0x2e>
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	2b0b      	cmp	r3, #11
 8008f72:	d007      	beq.n	8008f84 <unlock_fs+0x2e>
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d004      	beq.n	8008f84 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f003 f90a 	bl	800c198 <ff_rel_grant>
	}
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e029      	b.n	8008ff4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008fa0:	4a27      	ldr	r2, [pc, #156]	; (8009040 <chk_lock+0xb4>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	4413      	add	r3, r2
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01d      	beq.n	8008fea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fae:	4a24      	ldr	r2, [pc, #144]	; (8009040 <chk_lock+0xb4>)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	4413      	add	r3, r2
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d116      	bne.n	8008fee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008fc0:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <chk_lock+0xb4>)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3304      	adds	r3, #4
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d10c      	bne.n	8008fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fd4:	4a1a      	ldr	r2, [pc, #104]	; (8009040 <chk_lock+0xb4>)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	4413      	add	r3, r2
 8008fdc:	3308      	adds	r3, #8
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d102      	bne.n	8008fee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fe8:	e007      	b.n	8008ffa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fea:	2301      	movs	r3, #1
 8008fec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d9d2      	bls.n	8008fa0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d109      	bne.n	8009014 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <chk_lock+0x80>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d101      	bne.n	8009010 <chk_lock+0x84>
 800900c:	2300      	movs	r3, #0
 800900e:	e010      	b.n	8009032 <chk_lock+0xa6>
 8009010:	2312      	movs	r3, #18
 8009012:	e00e      	b.n	8009032 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d108      	bne.n	800902c <chk_lock+0xa0>
 800901a:	4a09      	ldr	r2, [pc, #36]	; (8009040 <chk_lock+0xb4>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4413      	add	r3, r2
 8009022:	330c      	adds	r3, #12
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902a:	d101      	bne.n	8009030 <chk_lock+0xa4>
 800902c:	2310      	movs	r3, #16
 800902e:	e000      	b.n	8009032 <chk_lock+0xa6>
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000318 	.word	0x20000318

08009044 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800904a:	2300      	movs	r3, #0
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	e002      	b.n	8009056 <enq_lock+0x12>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3301      	adds	r3, #1
 8009054:	607b      	str	r3, [r7, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d806      	bhi.n	800906a <enq_lock+0x26>
 800905c:	4a09      	ldr	r2, [pc, #36]	; (8009084 <enq_lock+0x40>)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	011b      	lsls	r3, r3, #4
 8009062:	4413      	add	r3, r2
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f2      	bne.n	8009050 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b02      	cmp	r3, #2
 800906e:	bf14      	ite	ne
 8009070:	2301      	movne	r3, #1
 8009072:	2300      	moveq	r3, #0
 8009074:	b2db      	uxtb	r3, r3
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20000318 	.word	0x20000318

08009088 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e01f      	b.n	80090d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009098:	4a41      	ldr	r2, [pc, #260]	; (80091a0 <inc_lock+0x118>)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	011b      	lsls	r3, r3, #4
 800909e:	4413      	add	r3, r2
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d113      	bne.n	80090d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80090aa:	4a3d      	ldr	r2, [pc, #244]	; (80091a0 <inc_lock+0x118>)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	4413      	add	r3, r2
 80090b2:	3304      	adds	r3, #4
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d109      	bne.n	80090d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80090be:	4a38      	ldr	r2, [pc, #224]	; (80091a0 <inc_lock+0x118>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	4413      	add	r3, r2
 80090c6:	3308      	adds	r3, #8
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d006      	beq.n	80090e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3301      	adds	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d9dc      	bls.n	8009098 <inc_lock+0x10>
 80090de:	e000      	b.n	80090e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d132      	bne.n	800914e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e002      	b.n	80090f4 <inc_lock+0x6c>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d806      	bhi.n	8009108 <inc_lock+0x80>
 80090fa:	4a29      	ldr	r2, [pc, #164]	; (80091a0 <inc_lock+0x118>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	4413      	add	r3, r2
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1f2      	bne.n	80090ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d101      	bne.n	8009112 <inc_lock+0x8a>
 800910e:	2300      	movs	r3, #0
 8009110:	e040      	b.n	8009194 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	4922      	ldr	r1, [pc, #136]	; (80091a0 <inc_lock+0x118>)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	440b      	add	r3, r1
 800911e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	491e      	ldr	r1, [pc, #120]	; (80091a0 <inc_lock+0x118>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	440b      	add	r3, r1
 800912c:	3304      	adds	r3, #4
 800912e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	695a      	ldr	r2, [r3, #20]
 8009134:	491a      	ldr	r1, [pc, #104]	; (80091a0 <inc_lock+0x118>)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	440b      	add	r3, r1
 800913c:	3308      	adds	r3, #8
 800913e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <inc_lock+0x118>)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	4413      	add	r3, r2
 8009148:	330c      	adds	r3, #12
 800914a:	2200      	movs	r2, #0
 800914c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <inc_lock+0xe0>
 8009154:	4a12      	ldr	r2, [pc, #72]	; (80091a0 <inc_lock+0x118>)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	4413      	add	r3, r2
 800915c:	330c      	adds	r3, #12
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <inc_lock+0xe0>
 8009164:	2300      	movs	r3, #0
 8009166:	e015      	b.n	8009194 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d108      	bne.n	8009180 <inc_lock+0xf8>
 800916e:	4a0c      	ldr	r2, [pc, #48]	; (80091a0 <inc_lock+0x118>)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	4413      	add	r3, r2
 8009176:	330c      	adds	r3, #12
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	e001      	b.n	8009184 <inc_lock+0xfc>
 8009180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009184:	4906      	ldr	r1, [pc, #24]	; (80091a0 <inc_lock+0x118>)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	440b      	add	r3, r1
 800918c:	330c      	adds	r3, #12
 800918e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20000318 	.word	0x20000318

080091a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d825      	bhi.n	8009204 <dec_lock+0x60>
		n = Files[i].ctr;
 80091b8:	4a17      	ldr	r2, [pc, #92]	; (8009218 <dec_lock+0x74>)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	011b      	lsls	r3, r3, #4
 80091be:	4413      	add	r3, r2
 80091c0:	330c      	adds	r3, #12
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80091c6:	89fb      	ldrh	r3, [r7, #14]
 80091c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091cc:	d101      	bne.n	80091d2 <dec_lock+0x2e>
 80091ce:	2300      	movs	r3, #0
 80091d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80091d2:	89fb      	ldrh	r3, [r7, #14]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <dec_lock+0x3a>
 80091d8:	89fb      	ldrh	r3, [r7, #14]
 80091da:	3b01      	subs	r3, #1
 80091dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091de:	4a0e      	ldr	r2, [pc, #56]	; (8009218 <dec_lock+0x74>)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	4413      	add	r3, r2
 80091e6:	330c      	adds	r3, #12
 80091e8:	89fa      	ldrh	r2, [r7, #14]
 80091ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d105      	bne.n	80091fe <dec_lock+0x5a>
 80091f2:	4a09      	ldr	r2, [pc, #36]	; (8009218 <dec_lock+0x74>)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	4413      	add	r3, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	737b      	strb	r3, [r7, #13]
 8009202:	e001      	b.n	8009208 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009204:	2302      	movs	r3, #2
 8009206:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009208:	7b7b      	ldrb	r3, [r7, #13]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20000318 	.word	0x20000318

0800921c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	e010      	b.n	800924c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800922a:	4a0d      	ldr	r2, [pc, #52]	; (8009260 <clear_lock+0x44>)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	4413      	add	r3, r2
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	429a      	cmp	r2, r3
 8009238:	d105      	bne.n	8009246 <clear_lock+0x2a>
 800923a:	4a09      	ldr	r2, [pc, #36]	; (8009260 <clear_lock+0x44>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	4413      	add	r3, r2
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d9eb      	bls.n	800922a <clear_lock+0xe>
	}
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20000318 	.word	0x20000318

08009264 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	78db      	ldrb	r3, [r3, #3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d034      	beq.n	80092e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7858      	ldrb	r0, [r3, #1]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009288:	2301      	movs	r3, #1
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	f7ff fd10 	bl	8008cb0 <disk_write>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009296:	2301      	movs	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	e022      	b.n	80092e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d217      	bcs.n	80092e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	789b      	ldrb	r3, [r3, #2]
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	e010      	b.n	80092dc <sync_window+0x78>
					wsect += fs->fsize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	4413      	add	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7858      	ldrb	r0, [r3, #1]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092ce:	2301      	movs	r3, #1
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	f7ff fced 	bl	8008cb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d8eb      	bhi.n	80092ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d01b      	beq.n	800933c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff ffad 	bl	8009264 <sync_window>
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d113      	bne.n	800933c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7858      	ldrb	r0, [r3, #1]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800931e:	2301      	movs	r3, #1
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	f7ff fca5 	bl	8008c70 <disk_read>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009332:	2301      	movs	r3, #1
 8009334:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ff87 	bl	8009264 <sync_window>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d158      	bne.n	8009412 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b03      	cmp	r3, #3
 8009366:	d148      	bne.n	80093fa <sync_fs+0xb2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	791b      	ldrb	r3, [r3, #4]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d144      	bne.n	80093fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3334      	adds	r3, #52	; 0x34
 8009374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009378:	2100      	movs	r1, #0
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fd79 	bl	8008e72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3334      	adds	r3, #52	; 0x34
 8009384:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009388:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fd08 	bl	8008da2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3334      	adds	r3, #52	; 0x34
 8009396:	4921      	ldr	r1, [pc, #132]	; (800941c <sync_fs+0xd4>)
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fd1d 	bl	8008dd8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3334      	adds	r3, #52	; 0x34
 80093a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80093a6:	491e      	ldr	r1, [pc, #120]	; (8009420 <sync_fs+0xd8>)
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fd15 	bl	8008dd8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3334      	adds	r3, #52	; 0x34
 80093b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	4619      	mov	r1, r3
 80093bc:	4610      	mov	r0, r2
 80093be:	f7ff fd0b 	bl	8008dd8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3334      	adds	r3, #52	; 0x34
 80093c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7ff fd01 	bl	8008dd8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7858      	ldrb	r0, [r3, #1]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ee:	2301      	movs	r3, #1
 80093f0:	f7ff fc5e 	bl	8008cb0 <disk_write>
			fs->fsi_flag = 0;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2200      	movs	r2, #0
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff fc74 	bl	8008cf0 <disk_ioctl>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <sync_fs+0xca>
 800940e:	2301      	movs	r3, #1
 8009410:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	41615252 	.word	0x41615252
 8009420:	61417272 	.word	0x61417272

08009424 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	3b02      	subs	r3, #2
 8009432:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	1e9a      	subs	r2, r3, #2
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d801      	bhi.n	8009444 <clust2sect+0x20>
 8009440:	2300      	movs	r3, #0
 8009442:	e008      	b.n	8009456 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	895b      	ldrh	r3, [r3, #10]
 8009448:	461a      	mov	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	fb03 f202 	mul.w	r2, r3, r2
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009454:	4413      	add	r3, r2
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b086      	sub	sp, #24
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d904      	bls.n	8009482 <get_fat+0x20>
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	699a      	ldr	r2, [r3, #24]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d802      	bhi.n	8009488 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009482:	2301      	movs	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	e08c      	b.n	80095a2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009488:	f04f 33ff 	mov.w	r3, #4294967295
 800948c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d045      	beq.n	8009522 <get_fat+0xc0>
 8009496:	2b03      	cmp	r3, #3
 8009498:	d05d      	beq.n	8009556 <get_fat+0xf4>
 800949a:	2b01      	cmp	r3, #1
 800949c:	d177      	bne.n	800958e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	60fb      	str	r3, [r7, #12]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	085b      	lsrs	r3, r3, #1
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0a5b      	lsrs	r3, r3, #9
 80094b4:	4413      	add	r3, r2
 80094b6:	4619      	mov	r1, r3
 80094b8:	6938      	ldr	r0, [r7, #16]
 80094ba:	f7ff ff17 	bl	80092ec <move_window>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d167      	bne.n	8009594 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	60fa      	str	r2, [r7, #12]
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4413      	add	r3, r2
 80094d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	0a5b      	lsrs	r3, r3, #9
 80094e0:	4413      	add	r3, r2
 80094e2:	4619      	mov	r1, r3
 80094e4:	6938      	ldr	r0, [r7, #16]
 80094e6:	f7ff ff01 	bl	80092ec <move_window>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d153      	bne.n	8009598 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4413      	add	r3, r2
 80094fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	461a      	mov	r2, r3
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4313      	orrs	r3, r2
 8009506:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <get_fat+0xb6>
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	091b      	lsrs	r3, r3, #4
 8009516:	e002      	b.n	800951e <get_fat+0xbc>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800951e:	617b      	str	r3, [r7, #20]
			break;
 8009520:	e03f      	b.n	80095a2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	0a1b      	lsrs	r3, r3, #8
 800952a:	4413      	add	r3, r2
 800952c:	4619      	mov	r1, r3
 800952e:	6938      	ldr	r0, [r7, #16]
 8009530:	f7ff fedc 	bl	80092ec <move_window>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d130      	bne.n	800959c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009548:	4413      	add	r3, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff fbee 	bl	8008d2c <ld_word>
 8009550:	4603      	mov	r3, r0
 8009552:	617b      	str	r3, [r7, #20]
			break;
 8009554:	e025      	b.n	80095a2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	09db      	lsrs	r3, r3, #7
 800955e:	4413      	add	r3, r2
 8009560:	4619      	mov	r1, r3
 8009562:	6938      	ldr	r0, [r7, #16]
 8009564:	f7ff fec2 	bl	80092ec <move_window>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d118      	bne.n	80095a0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800957c:	4413      	add	r3, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fbec 	bl	8008d5c <ld_dword>
 8009584:	4603      	mov	r3, r0
 8009586:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800958a:	617b      	str	r3, [r7, #20]
			break;
 800958c:	e009      	b.n	80095a2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e006      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009594:	bf00      	nop
 8009596:	e004      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009598:	bf00      	nop
 800959a:	e002      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800959c:	bf00      	nop
 800959e:	e000      	b.n	80095a2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095a0:	bf00      	nop
		}
	}

	return val;
 80095a2:	697b      	ldr	r3, [r7, #20]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b089      	sub	sp, #36	; 0x24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095b8:	2302      	movs	r3, #2
 80095ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	f240 80d6 	bls.w	8009770 <put_fat+0x1c4>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	f240 80d0 	bls.w	8009770 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d073      	beq.n	80096c0 <put_fat+0x114>
 80095d8:	2b03      	cmp	r3, #3
 80095da:	f000 8091 	beq.w	8009700 <put_fat+0x154>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	f040 80c6 	bne.w	8009770 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	61bb      	str	r3, [r7, #24]
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	4413      	add	r3, r2
 80095f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	0a5b      	lsrs	r3, r3, #9
 80095fa:	4413      	add	r3, r2
 80095fc:	4619      	mov	r1, r3
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7ff fe74 	bl	80092ec <move_window>
 8009604:	4603      	mov	r3, r0
 8009606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009608:	7ffb      	ldrb	r3, [r7, #31]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 80a9 	bne.w	8009762 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	1c59      	adds	r1, r3, #1
 800961a:	61b9      	str	r1, [r7, #24]
 800961c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009620:	4413      	add	r3, r2
 8009622:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00d      	beq.n	800964a <put_fat+0x9e>
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b25b      	sxtb	r3, r3
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	b25a      	sxtb	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	b25b      	sxtb	r3, r3
 8009642:	4313      	orrs	r3, r2
 8009644:	b25b      	sxtb	r3, r3
 8009646:	b2db      	uxtb	r3, r3
 8009648:	e001      	b.n	800964e <put_fat+0xa2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	0a5b      	lsrs	r3, r3, #9
 8009660:	4413      	add	r3, r2
 8009662:	4619      	mov	r1, r3
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fe41 	bl	80092ec <move_window>
 800966a:	4603      	mov	r3, r0
 800966c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800966e:	7ffb      	ldrb	r3, [r7, #31]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d178      	bne.n	8009766 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009680:	4413      	add	r3, r2
 8009682:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <put_fat+0xea>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	091b      	lsrs	r3, r3, #4
 8009692:	b2db      	uxtb	r3, r3
 8009694:	e00e      	b.n	80096b4 <put_fat+0x108>
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	b25b      	sxtb	r3, r3
 800969c:	f023 030f 	bic.w	r3, r3, #15
 80096a0:	b25a      	sxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	b25b      	sxtb	r3, r3
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	b25b      	sxtb	r3, r3
 80096ae:	4313      	orrs	r3, r2
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	70da      	strb	r2, [r3, #3]
			break;
 80096be:	e057      	b.n	8009770 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	4413      	add	r3, r2
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff fe0d 	bl	80092ec <move_window>
 80096d2:	4603      	mov	r3, r0
 80096d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096d6:	7ffb      	ldrb	r3, [r7, #31]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d146      	bne.n	800976a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80096ea:	4413      	add	r3, r2
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	b292      	uxth	r2, r2
 80096f0:	4611      	mov	r1, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fb55 	bl	8008da2 <st_word>
			fs->wflag = 1;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	70da      	strb	r2, [r3, #3]
			break;
 80096fe:	e037      	b.n	8009770 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	09db      	lsrs	r3, r3, #7
 8009708:	4413      	add	r3, r2
 800970a:	4619      	mov	r1, r3
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fded 	bl	80092ec <move_window>
 8009712:	4603      	mov	r3, r0
 8009714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009716:	7ffb      	ldrb	r3, [r7, #31]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d128      	bne.n	800976e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009730:	4413      	add	r3, r2
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fb12 	bl	8008d5c <ld_dword>
 8009738:	4603      	mov	r3, r0
 800973a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800973e:	4323      	orrs	r3, r4
 8009740:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009750:	4413      	add	r3, r2
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff fb3f 	bl	8008dd8 <st_dword>
			fs->wflag = 1;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	70da      	strb	r2, [r3, #3]
			break;
 8009760:	e006      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009762:	bf00      	nop
 8009764:	e004      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009766:	bf00      	nop
 8009768:	e002      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800976a:	bf00      	nop
 800976c:	e000      	b.n	8009770 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800976e:	bf00      	nop
		}
	}
	return res;
 8009770:	7ffb      	ldrb	r3, [r7, #31]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3724      	adds	r7, #36	; 0x24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd90      	pop	{r4, r7, pc}

0800977a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b088      	sub	sp, #32
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d904      	bls.n	80097a0 <remove_chain+0x26>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	429a      	cmp	r2, r3
 800979e:	d801      	bhi.n	80097a4 <remove_chain+0x2a>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e04b      	b.n	800983c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00c      	beq.n	80097c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	69b8      	ldr	r0, [r7, #24]
 80097b2:	f7ff fefb 	bl	80095ac <put_fat>
 80097b6:	4603      	mov	r3, r0
 80097b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80097ba:	7ffb      	ldrb	r3, [r7, #31]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <remove_chain+0x4a>
 80097c0:	7ffb      	ldrb	r3, [r7, #31]
 80097c2:	e03b      	b.n	800983c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fe4b 	bl	8009462 <get_fat>
 80097cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d031      	beq.n	8009838 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <remove_chain+0x64>
 80097da:	2302      	movs	r3, #2
 80097dc:	e02e      	b.n	800983c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e4:	d101      	bne.n	80097ea <remove_chain+0x70>
 80097e6:	2301      	movs	r3, #1
 80097e8:	e028      	b.n	800983c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80097ea:	2200      	movs	r2, #0
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	69b8      	ldr	r0, [r7, #24]
 80097f0:	f7ff fedc 	bl	80095ac <put_fat>
 80097f4:	4603      	mov	r3, r0
 80097f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80097f8:	7ffb      	ldrb	r3, [r7, #31]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <remove_chain+0x88>
 80097fe:	7ffb      	ldrb	r3, [r7, #31]
 8009800:	e01c      	b.n	800983c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	3b02      	subs	r3, #2
 800980c:	429a      	cmp	r2, r3
 800980e:	d20b      	bcs.n	8009828 <remove_chain+0xae>
			fs->free_clst++;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	791b      	ldrb	r3, [r3, #4]
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	b2da      	uxtb	r2, r3
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	699a      	ldr	r2, [r3, #24]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	429a      	cmp	r2, r3
 8009834:	d8c6      	bhi.n	80097c4 <remove_chain+0x4a>
 8009836:	e000      	b.n	800983a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009838:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3720      	adds	r7, #32
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10d      	bne.n	8009876 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d004      	beq.n	8009870 <create_chain+0x2c>
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	699a      	ldr	r2, [r3, #24]
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	429a      	cmp	r2, r3
 800986e:	d81b      	bhi.n	80098a8 <create_chain+0x64>
 8009870:	2301      	movs	r3, #1
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	e018      	b.n	80098a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff fdf2 	bl	8009462 <get_fat>
 800987e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d801      	bhi.n	800988a <create_chain+0x46>
 8009886:	2301      	movs	r3, #1
 8009888:	e070      	b.n	800996c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d101      	bne.n	8009896 <create_chain+0x52>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	e06a      	b.n	800996c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	699a      	ldr	r2, [r3, #24]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	429a      	cmp	r2, r3
 800989e:	d901      	bls.n	80098a4 <create_chain+0x60>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	e063      	b.n	800996c <create_chain+0x128>
		scl = clst;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	3301      	adds	r3, #1
 80098b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d807      	bhi.n	80098cc <create_chain+0x88>
				ncl = 2;
 80098bc:	2302      	movs	r3, #2
 80098be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d901      	bls.n	80098cc <create_chain+0x88>
 80098c8:	2300      	movs	r3, #0
 80098ca:	e04f      	b.n	800996c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80098cc:	69f9      	ldr	r1, [r7, #28]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff fdc7 	bl	8009462 <get_fat>
 80098d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00e      	beq.n	80098fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d003      	beq.n	80098ea <create_chain+0xa6>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e8:	d101      	bne.n	80098ee <create_chain+0xaa>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	e03e      	b.n	800996c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d1da      	bne.n	80098ac <create_chain+0x68>
 80098f6:	2300      	movs	r3, #0
 80098f8:	e038      	b.n	800996c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80098fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80098fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009900:	69f9      	ldr	r1, [r7, #28]
 8009902:	6938      	ldr	r0, [r7, #16]
 8009904:	f7ff fe52 	bl	80095ac <put_fat>
 8009908:	4603      	mov	r3, r0
 800990a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d109      	bne.n	8009926 <create_chain+0xe2>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d006      	beq.n	8009926 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009918:	69fa      	ldr	r2, [r7, #28]
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6938      	ldr	r0, [r7, #16]
 800991e:	f7ff fe45 	bl	80095ac <put_fat>
 8009922:	4603      	mov	r3, r0
 8009924:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d116      	bne.n	800995a <create_chain+0x116>
		fs->last_clst = ncl;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	695a      	ldr	r2, [r3, #20]
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	3b02      	subs	r3, #2
 800993c:	429a      	cmp	r2, r3
 800993e:	d804      	bhi.n	800994a <create_chain+0x106>
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	1e5a      	subs	r2, r3, #1
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	791b      	ldrb	r3, [r3, #4]
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	711a      	strb	r2, [r3, #4]
 8009958:	e007      	b.n	800996a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d102      	bne.n	8009966 <create_chain+0x122>
 8009960:	f04f 33ff 	mov.w	r3, #4294967295
 8009964:	e000      	b.n	8009968 <create_chain+0x124>
 8009966:	2301      	movs	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800996a:	69fb      	ldr	r3, [r7, #28]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	3304      	adds	r3, #4
 800998a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	0a5b      	lsrs	r3, r3, #9
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	8952      	ldrh	r2, [r2, #10]
 8009994:	fbb3 f3f2 	udiv	r3, r3, r2
 8009998:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	1d1a      	adds	r2, r3, #4
 800999e:	613a      	str	r2, [r7, #16]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <clmt_clust+0x3a>
 80099aa:	2300      	movs	r3, #0
 80099ac:	e010      	b.n	80099d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d307      	bcc.n	80099c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	617b      	str	r3, [r7, #20]
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	3304      	adds	r3, #4
 80099c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80099c4:	e7e9      	b.n	800999a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80099c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	4413      	add	r3, r2
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	371c      	adds	r7, #28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099f2:	d204      	bcs.n	80099fe <dir_sdi+0x22>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <dir_sdi+0x26>
		return FR_INT_ERR;
 80099fe:	2302      	movs	r3, #2
 8009a00:	e063      	b.n	8009aca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <dir_sdi+0x46>
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d902      	bls.n	8009a22 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10c      	bne.n	8009a42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	8912      	ldrh	r2, [r2, #8]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d301      	bcc.n	8009a38 <dir_sdi+0x5c>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e048      	b.n	8009aca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	61da      	str	r2, [r3, #28]
 8009a40:	e029      	b.n	8009a96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	895b      	ldrh	r3, [r3, #10]
 8009a46:	025b      	lsls	r3, r3, #9
 8009a48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a4a:	e019      	b.n	8009a80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6979      	ldr	r1, [r7, #20]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff fd06 	bl	8009462 <get_fat>
 8009a56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d101      	bne.n	8009a64 <dir_sdi+0x88>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e032      	b.n	8009aca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d904      	bls.n	8009a74 <dir_sdi+0x98>
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	699a      	ldr	r2, [r3, #24]
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d801      	bhi.n	8009a78 <dir_sdi+0x9c>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e028      	b.n	8009aca <dir_sdi+0xee>
			ofs -= csz;
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d2e1      	bcs.n	8009a4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009a88:	6979      	ldr	r1, [r7, #20]
 8009a8a:	6938      	ldr	r0, [r7, #16]
 8009a8c:	f7ff fcca 	bl	8009424 <clust2sect>
 8009a90:	4602      	mov	r2, r0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <dir_sdi+0xcc>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e010      	b.n	8009aca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	69da      	ldr	r2, [r3, #28]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	0a5b      	lsrs	r3, r3, #9
 8009ab0:	441a      	add	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	441a      	add	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	3320      	adds	r3, #32
 8009ae8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <dir_next+0x28>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009af8:	d301      	bcc.n	8009afe <dir_next+0x2c>
 8009afa:	2304      	movs	r3, #4
 8009afc:	e0aa      	b.n	8009c54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 8098 	bne.w	8009c3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	8912      	ldrh	r2, [r2, #8]
 8009b24:	4293      	cmp	r3, r2
 8009b26:	f0c0 8088 	bcc.w	8009c3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	61da      	str	r2, [r3, #28]
 8009b30:	2304      	movs	r3, #4
 8009b32:	e08f      	b.n	8009c54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	0a5b      	lsrs	r3, r3, #9
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	8952      	ldrh	r2, [r2, #10]
 8009b3c:	3a01      	subs	r2, #1
 8009b3e:	4013      	ands	r3, r2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d17a      	bne.n	8009c3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f7ff fc88 	bl	8009462 <get_fat>
 8009b52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d801      	bhi.n	8009b5e <dir_next+0x8c>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e07a      	b.n	8009c54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d101      	bne.n	8009b6a <dir_next+0x98>
 8009b66:	2301      	movs	r3, #1
 8009b68:	e074      	b.n	8009c54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699a      	ldr	r2, [r3, #24]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d858      	bhi.n	8009c26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d104      	bne.n	8009b84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	61da      	str	r2, [r3, #28]
 8009b80:	2304      	movs	r3, #4
 8009b82:	e067      	b.n	8009c54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7ff fe59 	bl	8009844 <create_chain>
 8009b92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <dir_next+0xcc>
 8009b9a:	2307      	movs	r3, #7
 8009b9c:	e05a      	b.n	8009c54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <dir_next+0xd6>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e055      	b.n	8009c54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d101      	bne.n	8009bb4 <dir_next+0xe2>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e04f      	b.n	8009c54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff fb55 	bl	8009264 <sync_window>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <dir_next+0xf2>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e047      	b.n	8009c54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3334      	adds	r3, #52	; 0x34
 8009bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff f94f 	bl	8008e72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	6979      	ldr	r1, [r7, #20]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff fc22 	bl	8009424 <clust2sect>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
 8009be6:	e012      	b.n	8009c0e <dir_next+0x13c>
						fs->wflag = 1;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2201      	movs	r2, #1
 8009bec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff fb38 	bl	8009264 <sync_window>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <dir_next+0x12c>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e02a      	b.n	8009c54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	3301      	adds	r3, #1
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	895b      	ldrh	r3, [r3, #10]
 8009c12:	461a      	mov	r2, r3
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d8e6      	bhi.n	8009be8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad2      	subs	r2, r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009c2c:	6979      	ldr	r1, [r7, #20]
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff fbf8 	bl	8009424 <clust2sect>
 8009c34:	4602      	mov	r2, r0
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4c:	441a      	add	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff feb4 	bl	80099dc <dir_sdi>
 8009c74:	4603      	mov	r3, r0
 8009c76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d12b      	bne.n	8009cd6 <dir_alloc+0x7a>
		n = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	4619      	mov	r1, r3
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f7ff fb2f 	bl	80092ec <move_window>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11d      	bne.n	8009cd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2be5      	cmp	r3, #229	; 0xe5
 8009ca0:	d004      	beq.n	8009cac <dir_alloc+0x50>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d102      	bne.n	8009cc0 <dir_alloc+0x64>
 8009cba:	e00c      	b.n	8009cd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff ff05 	bl	8009ad2 <dir_next>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0d7      	beq.n	8009c82 <dir_alloc+0x26>
 8009cd2:	e000      	b.n	8009cd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009cd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d101      	bne.n	8009ce0 <dir_alloc+0x84>
 8009cdc:	2307      	movs	r3, #7
 8009cde:	75fb      	strb	r3, [r7, #23]
	return res;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	331a      	adds	r3, #26
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7ff f817 	bl	8008d2c <ld_word>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d109      	bne.n	8009d1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	3314      	adds	r3, #20
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff f80c 	bl	8008d2c <ld_word>
 8009d14:	4603      	mov	r3, r0
 8009d16:	041b      	lsls	r3, r3, #16
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	331a      	adds	r3, #26
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	b292      	uxth	r2, r2
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff f82f 	bl	8008da2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d109      	bne.n	8009d60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f103 0214 	add.w	r2, r3, #20
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	0c1b      	lsrs	r3, r3, #16
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	f7ff f821 	bl	8008da2 <st_word>
	}
}
 8009d60:	bf00      	nop
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009d72:	2304      	movs	r3, #4
 8009d74:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009d7c:	e03c      	b.n	8009df8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6938      	ldr	r0, [r7, #16]
 8009d86:	f7ff fab1 	bl	80092ec <move_window>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d136      	bne.n	8009e02 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009da2:	2304      	movs	r3, #4
 8009da4:	75fb      	strb	r3, [r7, #23]
 8009da6:	e031      	b.n	8009e0c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	330b      	adds	r3, #11
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009db4:	73bb      	strb	r3, [r7, #14]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7bba      	ldrb	r2, [r7, #14]
 8009dba:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2be5      	cmp	r3, #229	; 0xe5
 8009dc0:	d011      	beq.n	8009de6 <dir_read+0x7e>
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc6:	d00e      	beq.n	8009de6 <dir_read+0x7e>
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b0f      	cmp	r3, #15
 8009dcc:	d00b      	beq.n	8009de6 <dir_read+0x7e>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	f023 0320 	bic.w	r3, r3, #32
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	bf0c      	ite	eq
 8009dd8:	2301      	moveq	r3, #1
 8009dda:	2300      	movne	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	461a      	mov	r2, r3
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d00f      	beq.n	8009e06 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fe72 	bl	8009ad2 <dir_next>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d108      	bne.n	8009e0a <dir_read+0xa2>
	while (dp->sect) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1be      	bne.n	8009d7e <dir_read+0x16>
 8009e00:	e004      	b.n	8009e0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009e02:	bf00      	nop
 8009e04:	e002      	b.n	8009e0c <dir_read+0xa4>
				break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009e0a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <dir_read+0xb0>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	61da      	str	r2, [r3, #28]
	return res;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e30:	2100      	movs	r1, #0
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fdd2 	bl	80099dc <dir_sdi>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <dir_find+0x24>
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	e03e      	b.n	8009ec4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6938      	ldr	r0, [r7, #16]
 8009e4e:	f7ff fa4d 	bl	80092ec <move_window>
 8009e52:	4603      	mov	r3, r0
 8009e54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d12f      	bne.n	8009ebc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <dir_find+0x4e>
 8009e6a:	2304      	movs	r3, #4
 8009e6c:	75fb      	strb	r3, [r7, #23]
 8009e6e:	e028      	b.n	8009ec2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	330b      	adds	r3, #11
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	330b      	adds	r3, #11
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10a      	bne.n	8009ea8 <dir_find+0x86>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a18      	ldr	r0, [r3, #32]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3324      	adds	r3, #36	; 0x24
 8009e9a:	220b      	movs	r2, #11
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	f7ff f802 	bl	8008ea6 <mem_cmp>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fe11 	bl	8009ad2 <dir_next>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0c5      	beq.n	8009e46 <dir_find+0x24>
 8009eba:	e002      	b.n	8009ec2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009ebc:	bf00      	nop
 8009ebe:	e000      	b.n	8009ec2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ec0:	bf00      	nop

	return res;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009eda:	2101      	movs	r1, #1
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff febd 	bl	8009c5c <dir_alloc>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d11c      	bne.n	8009f26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f7ff f9fa 	bl	80092ec <move_window>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d111      	bne.n	8009f26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	2220      	movs	r2, #32
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe ffb1 	bl	8008e72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a18      	ldr	r0, [r3, #32]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3324      	adds	r3, #36	; 0x24
 8009f18:	220b      	movs	r2, #11
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	f7fe ff88 	bl	8008e30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2201      	movs	r2, #1
 8009f24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d04e      	beq.n	8009fe6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009f50:	e021      	b.n	8009f96 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	1c59      	adds	r1, r3, #1
 8009f5a:	6179      	str	r1, [r7, #20]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d100      	bne.n	8009f6a <get_fileinfo+0x3a>
 8009f68:	e015      	b.n	8009f96 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	2b05      	cmp	r3, #5
 8009f6e:	d101      	bne.n	8009f74 <get_fileinfo+0x44>
 8009f70:	23e5      	movs	r3, #229	; 0xe5
 8009f72:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	2b09      	cmp	r3, #9
 8009f78:	d106      	bne.n	8009f88 <get_fileinfo+0x58>
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	613a      	str	r2, [r7, #16]
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	4413      	add	r3, r2
 8009f84:	222e      	movs	r2, #46	; 0x2e
 8009f86:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	613a      	str	r2, [r7, #16]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	4413      	add	r3, r2
 8009f92:	7bfa      	ldrb	r2, [r7, #15]
 8009f94:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b0a      	cmp	r3, #10
 8009f9a:	d9da      	bls.n	8009f52 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	3309      	adds	r3, #9
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	7ada      	ldrb	r2, [r3, #11]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	331c      	adds	r3, #28
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fecf 	bl	8008d5c <ld_dword>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	3316      	adds	r3, #22
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fec6 	bl	8008d5c <ld_dword>
 8009fd0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	80da      	strh	r2, [r3, #6]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	0c1b      	lsrs	r3, r3, #16
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	809a      	strh	r2, [r3, #4]
 8009fe4:	e000      	b.n	8009fe8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009fe6:	bf00      	nop
}
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3324      	adds	r3, #36	; 0x24
 800a004:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a006:	220b      	movs	r2, #11
 800a008:	2120      	movs	r1, #32
 800a00a:	68b8      	ldr	r0, [r7, #8]
 800a00c:	f7fe ff31 	bl	8008e72 <mem_set>
	si = i = 0; ni = 8;
 800a010:	2300      	movs	r3, #0
 800a012:	613b      	str	r3, [r7, #16]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	2308      	movs	r3, #8
 800a01a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	617a      	str	r2, [r7, #20]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4413      	add	r3, r2
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a02a:	7ffb      	ldrb	r3, [r7, #31]
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d94e      	bls.n	800a0ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a030:	7ffb      	ldrb	r3, [r7, #31]
 800a032:	2b2f      	cmp	r3, #47	; 0x2f
 800a034:	d006      	beq.n	800a044 <create_name+0x54>
 800a036:	7ffb      	ldrb	r3, [r7, #31]
 800a038:	2b5c      	cmp	r3, #92	; 0x5c
 800a03a:	d110      	bne.n	800a05e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a03c:	e002      	b.n	800a044 <create_name+0x54>
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3301      	adds	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	4413      	add	r3, r2
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b2f      	cmp	r3, #47	; 0x2f
 800a04e:	d0f6      	beq.n	800a03e <create_name+0x4e>
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b5c      	cmp	r3, #92	; 0x5c
 800a05a:	d0f0      	beq.n	800a03e <create_name+0x4e>
			break;
 800a05c:	e038      	b.n	800a0d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a05e:	7ffb      	ldrb	r3, [r7, #31]
 800a060:	2b2e      	cmp	r3, #46	; 0x2e
 800a062:	d003      	beq.n	800a06c <create_name+0x7c>
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d30c      	bcc.n	800a086 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	2b0b      	cmp	r3, #11
 800a070:	d002      	beq.n	800a078 <create_name+0x88>
 800a072:	7ffb      	ldrb	r3, [r7, #31]
 800a074:	2b2e      	cmp	r3, #46	; 0x2e
 800a076:	d001      	beq.n	800a07c <create_name+0x8c>
 800a078:	2306      	movs	r3, #6
 800a07a:	e044      	b.n	800a106 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a07c:	2308      	movs	r3, #8
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	230b      	movs	r3, #11
 800a082:	61bb      	str	r3, [r7, #24]
			continue;
 800a084:	e022      	b.n	800a0cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a086:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da04      	bge.n	800a098 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a08e:	7ffb      	ldrb	r3, [r7, #31]
 800a090:	3b80      	subs	r3, #128	; 0x80
 800a092:	4a1f      	ldr	r2, [pc, #124]	; (800a110 <create_name+0x120>)
 800a094:	5cd3      	ldrb	r3, [r2, r3]
 800a096:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a098:	7ffb      	ldrb	r3, [r7, #31]
 800a09a:	4619      	mov	r1, r3
 800a09c:	481d      	ldr	r0, [pc, #116]	; (800a114 <create_name+0x124>)
 800a09e:	f7fe ff29 	bl	8008ef4 <chk_chr>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <create_name+0xbc>
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	e02c      	b.n	800a106 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a0ac:	7ffb      	ldrb	r3, [r7, #31]
 800a0ae:	2b60      	cmp	r3, #96	; 0x60
 800a0b0:	d905      	bls.n	800a0be <create_name+0xce>
 800a0b2:	7ffb      	ldrb	r3, [r7, #31]
 800a0b4:	2b7a      	cmp	r3, #122	; 0x7a
 800a0b6:	d802      	bhi.n	800a0be <create_name+0xce>
 800a0b8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ba:	3b20      	subs	r3, #32
 800a0bc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	613a      	str	r2, [r7, #16]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	7ffa      	ldrb	r2, [r7, #31]
 800a0ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a0cc:	e7a6      	b.n	800a01c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <create_name+0xf4>
 800a0e0:	2306      	movs	r3, #6
 800a0e2:	e010      	b.n	800a106 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2be5      	cmp	r3, #229	; 0xe5
 800a0ea:	d102      	bne.n	800a0f2 <create_name+0x102>
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2205      	movs	r2, #5
 800a0f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	330b      	adds	r3, #11
 800a0f6:	7ffa      	ldrb	r2, [r7, #31]
 800a0f8:	2a20      	cmp	r2, #32
 800a0fa:	d801      	bhi.n	800a100 <create_name+0x110>
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	e000      	b.n	800a102 <create_name+0x112>
 800a100:	2200      	movs	r2, #0
 800a102:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a104:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	08019f2c 	.word	0x08019f2c
 800a114:	08016f78 	.word	0x08016f78

0800a118 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a12c:	e002      	b.n	800a134 <follow_path+0x1c>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	3301      	adds	r3, #1
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b2f      	cmp	r3, #47	; 0x2f
 800a13a:	d0f8      	beq.n	800a12e <follow_path+0x16>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b5c      	cmp	r3, #92	; 0x5c
 800a142:	d0f4      	beq.n	800a12e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2200      	movs	r2, #0
 800a148:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b1f      	cmp	r3, #31
 800a150:	d80a      	bhi.n	800a168 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2280      	movs	r2, #128	; 0x80
 800a156:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a15a:	2100      	movs	r1, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fc3d 	bl	80099dc <dir_sdi>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
 800a166:	e043      	b.n	800a1f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a168:	463b      	mov	r3, r7
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff ff3f 	bl	8009ff0 <create_name>
 800a172:	4603      	mov	r3, r0
 800a174:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d134      	bne.n	800a1e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff fe50 	bl	8009e22 <dir_find>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a18c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00a      	beq.n	800a1aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b04      	cmp	r3, #4
 800a198:	d127      	bne.n	800a1ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d122      	bne.n	800a1ea <follow_path+0xd2>
 800a1a4:	2305      	movs	r3, #5
 800a1a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a1a8:	e01f      	b.n	800a1ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d11c      	bne.n	800a1ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	799b      	ldrb	r3, [r3, #6]
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d102      	bne.n	800a1c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a1c0:	2305      	movs	r3, #5
 800a1c2:	75fb      	strb	r3, [r7, #23]
 800a1c4:	e014      	b.n	800a1f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fd86 	bl	8009cea <ld_clust>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a1e4:	e7c0      	b.n	800a168 <follow_path+0x50>
			if (res != FR_OK) break;
 800a1e6:	bf00      	nop
 800a1e8:	e002      	b.n	800a1f0 <follow_path+0xd8>
				break;
 800a1ea:	bf00      	nop
 800a1ec:	e000      	b.n	800a1f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1ee:	bf00      	nop
			}
		}
	}

	return res;
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b087      	sub	sp, #28
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a202:	f04f 33ff 	mov.w	r3, #4294967295
 800a206:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d031      	beq.n	800a274 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e002      	b.n	800a21e <get_ldnumber+0x24>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	3301      	adds	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	2b20      	cmp	r3, #32
 800a224:	d903      	bls.n	800a22e <get_ldnumber+0x34>
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b3a      	cmp	r3, #58	; 0x3a
 800a22c:	d1f4      	bne.n	800a218 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	2b3a      	cmp	r3, #58	; 0x3a
 800a234:	d11c      	bne.n	800a270 <get_ldnumber+0x76>
			tp = *path;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	60fa      	str	r2, [r7, #12]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	3b30      	subs	r3, #48	; 0x30
 800a246:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b09      	cmp	r3, #9
 800a24c:	d80e      	bhi.n	800a26c <get_ldnumber+0x72>
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	429a      	cmp	r2, r3
 800a254:	d10a      	bne.n	800a26c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d107      	bne.n	800a26c <get_ldnumber+0x72>
					vol = (int)i;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	3301      	adds	r3, #1
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	e002      	b.n	800a276 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a270:	2300      	movs	r3, #0
 800a272:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a274:	693b      	ldr	r3, [r7, #16]
}
 800a276:	4618      	mov	r0, r3
 800a278:	371c      	adds	r7, #28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
	...

0800a284 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	70da      	strb	r2, [r3, #3]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f04f 32ff 	mov.w	r2, #4294967295
 800a29a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff f824 	bl	80092ec <move_window>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <check_fs+0x2a>
 800a2aa:	2304      	movs	r3, #4
 800a2ac:	e038      	b.n	800a320 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3334      	adds	r3, #52	; 0x34
 800a2b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fd38 	bl	8008d2c <ld_word>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d001      	beq.n	800a2cc <check_fs+0x48>
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e029      	b.n	800a320 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2d2:	2be9      	cmp	r3, #233	; 0xe9
 800a2d4:	d009      	beq.n	800a2ea <check_fs+0x66>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2dc:	2beb      	cmp	r3, #235	; 0xeb
 800a2de:	d11e      	bne.n	800a31e <check_fs+0x9a>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a2e6:	2b90      	cmp	r3, #144	; 0x90
 800a2e8:	d119      	bne.n	800a31e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3334      	adds	r3, #52	; 0x34
 800a2ee:	3336      	adds	r3, #54	; 0x36
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe fd33 	bl	8008d5c <ld_dword>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a2fc:	4a0a      	ldr	r2, [pc, #40]	; (800a328 <check_fs+0xa4>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d101      	bne.n	800a306 <check_fs+0x82>
 800a302:	2300      	movs	r3, #0
 800a304:	e00c      	b.n	800a320 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3334      	adds	r3, #52	; 0x34
 800a30a:	3352      	adds	r3, #82	; 0x52
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe fd25 	bl	8008d5c <ld_dword>
 800a312:	4602      	mov	r2, r0
 800a314:	4b05      	ldr	r3, [pc, #20]	; (800a32c <check_fs+0xa8>)
 800a316:	429a      	cmp	r2, r3
 800a318:	d101      	bne.n	800a31e <check_fs+0x9a>
 800a31a:	2300      	movs	r3, #0
 800a31c:	e000      	b.n	800a320 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a31e:	2302      	movs	r3, #2
}
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	00544146 	.word	0x00544146
 800a32c:	33544146 	.word	0x33544146

0800a330 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b096      	sub	sp, #88	; 0x58
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f7ff ff58 	bl	800a1fa <get_ldnumber>
 800a34a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	da01      	bge.n	800a356 <find_volume+0x26>
 800a352:	230b      	movs	r3, #11
 800a354:	e236      	b.n	800a7c4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a356:	4aac      	ldr	r2, [pc, #688]	; (800a608 <find_volume+0x2d8>)
 800a358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a35e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <find_volume+0x3a>
 800a366:	230c      	movs	r3, #12
 800a368:	e22c      	b.n	800a7c4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800a36a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a36c:	f7fe fddd 	bl	8008f2a <lock_fs>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <find_volume+0x4a>
 800a376:	230f      	movs	r3, #15
 800a378:	e224      	b.n	800a7c4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a37e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	f023 0301 	bic.w	r3, r3, #1
 800a386:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01a      	beq.n	800a3c6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fc2b 	bl	8008bf0 <disk_status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a3a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10c      	bne.n	800a3c6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d007      	beq.n	800a3c2 <find_volume+0x92>
 800a3b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3b6:	f003 0304 	and.w	r3, r3, #4
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a3be:	230a      	movs	r3, #10
 800a3c0:	e200      	b.n	800a7c4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e1fe      	b.n	800a7c4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fc23 	bl	8008c24 <disk_initialize>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e1e7      	b.n	800a7c4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d007      	beq.n	800a40a <find_volume+0xda>
 800a3fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3fe:	f003 0304 	and.w	r3, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a406:	230a      	movs	r3, #10
 800a408:	e1dc      	b.n	800a7c4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a40e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a412:	f7ff ff37 	bl	800a284 <check_fs>
 800a416:	4603      	mov	r3, r0
 800a418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a41c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a420:	2b02      	cmp	r3, #2
 800a422:	d14b      	bne.n	800a4bc <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a424:	2300      	movs	r3, #0
 800a426:	643b      	str	r3, [r7, #64]	; 0x40
 800a428:	e01f      	b.n	800a46a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a438:	4413      	add	r3, r2
 800a43a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	3304      	adds	r3, #4
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d006      	beq.n	800a454 <find_volume+0x124>
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	3308      	adds	r3, #8
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fc86 	bl	8008d5c <ld_dword>
 800a450:	4602      	mov	r2, r0
 800a452:	e000      	b.n	800a456 <find_volume+0x126>
 800a454:	2200      	movs	r2, #0
 800a456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a45e:	440b      	add	r3, r1
 800a460:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a466:	3301      	adds	r3, #1
 800a468:	643b      	str	r3, [r7, #64]	; 0x40
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d9dc      	bls.n	800a42a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a470:	2300      	movs	r3, #0
 800a472:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <find_volume+0x150>
 800a47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a47c:	3b01      	subs	r3, #1
 800a47e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a488:	4413      	add	r3, r2
 800a48a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a48e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a492:	2b00      	cmp	r3, #0
 800a494:	d005      	beq.n	800a4a2 <find_volume+0x172>
 800a496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a49a:	f7ff fef3 	bl	800a284 <check_fs>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	e000      	b.n	800a4a4 <find_volume+0x174>
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a4a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d905      	bls.n	800a4bc <find_volume+0x18c>
 800a4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d9e1      	bls.n	800a480 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	d101      	bne.n	800a4c8 <find_volume+0x198>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e17d      	b.n	800a7c4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d901      	bls.n	800a4d4 <find_volume+0x1a4>
 800a4d0:	230d      	movs	r3, #13
 800a4d2:	e177      	b.n	800a7c4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	3334      	adds	r3, #52	; 0x34
 800a4d8:	330b      	adds	r3, #11
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fc26 	bl	8008d2c <ld_word>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e6:	d001      	beq.n	800a4ec <find_volume+0x1bc>
 800a4e8:	230d      	movs	r3, #13
 800a4ea:	e16b      	b.n	800a7c4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	3334      	adds	r3, #52	; 0x34
 800a4f0:	3316      	adds	r3, #22
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fc1a 	bl	8008d2c <ld_word>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <find_volume+0x1e0>
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	3334      	adds	r3, #52	; 0x34
 800a506:	3324      	adds	r3, #36	; 0x24
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe fc27 	bl	8008d5c <ld_dword>
 800a50e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a514:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a522:	789b      	ldrb	r3, [r3, #2]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d005      	beq.n	800a534 <find_volume+0x204>
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	789b      	ldrb	r3, [r3, #2]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d001      	beq.n	800a534 <find_volume+0x204>
 800a530:	230d      	movs	r3, #13
 800a532:	e147      	b.n	800a7c4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	789b      	ldrb	r3, [r3, #2]
 800a538:	461a      	mov	r2, r3
 800a53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a548:	b29a      	uxth	r2, r3
 800a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	895b      	ldrh	r3, [r3, #10]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d008      	beq.n	800a568 <find_volume+0x238>
 800a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a558:	895b      	ldrh	r3, [r3, #10]
 800a55a:	461a      	mov	r2, r3
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	895b      	ldrh	r3, [r3, #10]
 800a560:	3b01      	subs	r3, #1
 800a562:	4013      	ands	r3, r2
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <find_volume+0x23c>
 800a568:	230d      	movs	r3, #13
 800a56a:	e12b      	b.n	800a7c4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	3334      	adds	r3, #52	; 0x34
 800a570:	3311      	adds	r3, #17
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fbda 	bl	8008d2c <ld_word>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	891b      	ldrh	r3, [r3, #8]
 800a584:	f003 030f 	and.w	r3, r3, #15
 800a588:	b29b      	uxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <find_volume+0x262>
 800a58e:	230d      	movs	r3, #13
 800a590:	e118      	b.n	800a7c4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	3334      	adds	r3, #52	; 0x34
 800a596:	3313      	adds	r3, #19
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe fbc7 	bl	8008d2c <ld_word>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a5a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d106      	bne.n	800a5b6 <find_volume+0x286>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	3334      	adds	r3, #52	; 0x34
 800a5ac:	3320      	adds	r3, #32
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fbd4 	bl	8008d5c <ld_dword>
 800a5b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	3334      	adds	r3, #52	; 0x34
 800a5ba:	330e      	adds	r3, #14
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fbb5 	bl	8008d2c <ld_word>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a5c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <find_volume+0x2a0>
 800a5cc:	230d      	movs	r3, #13
 800a5ce:	e0f9      	b.n	800a7c4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a5d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d4:	4413      	add	r3, r2
 800a5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5d8:	8912      	ldrh	r2, [r2, #8]
 800a5da:	0912      	lsrs	r2, r2, #4
 800a5dc:	b292      	uxth	r2, r2
 800a5de:	4413      	add	r3, r2
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d201      	bcs.n	800a5ee <find_volume+0x2be>
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	e0ea      	b.n	800a7c4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f6:	8952      	ldrh	r2, [r2, #10]
 800a5f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <find_volume+0x2dc>
 800a604:	230d      	movs	r3, #13
 800a606:	e0dd      	b.n	800a7c4 <find_volume+0x494>
 800a608:	20000310 	.word	0x20000310
		fmt = FS_FAT32;
 800a60c:	2303      	movs	r3, #3
 800a60e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a618:	4293      	cmp	r3, r2
 800a61a:	d802      	bhi.n	800a622 <find_volume+0x2f2>
 800a61c:	2302      	movs	r3, #2
 800a61e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a628:	4293      	cmp	r3, r2
 800a62a:	d802      	bhi.n	800a632 <find_volume+0x302>
 800a62c:	2301      	movs	r3, #1
 800a62e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	1c9a      	adds	r2, r3, #2
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a63e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a640:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a644:	441a      	add	r2, r3
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a64a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	441a      	add	r2, r3
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d11e      	bne.n	800a69a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	3334      	adds	r3, #52	; 0x34
 800a660:	332a      	adds	r3, #42	; 0x2a
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fb62 	bl	8008d2c <ld_word>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <find_volume+0x342>
 800a66e:	230d      	movs	r3, #13
 800a670:	e0a8      	b.n	800a7c4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	891b      	ldrh	r3, [r3, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <find_volume+0x34e>
 800a67a:	230d      	movs	r3, #13
 800a67c:	e0a2      	b.n	800a7c4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a680:	3334      	adds	r3, #52	; 0x34
 800a682:	332c      	adds	r3, #44	; 0x2c
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fb69 	bl	8008d5c <ld_dword>
 800a68a:	4602      	mov	r2, r0
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	647b      	str	r3, [r7, #68]	; 0x44
 800a698:	e01f      	b.n	800a6da <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	891b      	ldrh	r3, [r3, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <find_volume+0x376>
 800a6a2:	230d      	movs	r3, #13
 800a6a4:	e08e      	b.n	800a7c4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ac:	441a      	add	r2, r3
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a6b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d103      	bne.n	800a6c2 <find_volume+0x392>
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	e00a      	b.n	800a6d8 <find_volume+0x3a8>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	699a      	ldr	r2, [r3, #24]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	4413      	add	r3, r2
 800a6cc:	085a      	lsrs	r2, r3, #1
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a6d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a6e4:	0a5b      	lsrs	r3, r3, #9
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d201      	bcs.n	800a6ee <find_volume+0x3be>
 800a6ea:	230d      	movs	r3, #13
 800a6ec:	e06a      	b.n	800a7c4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	615a      	str	r2, [r3, #20]
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	695a      	ldr	r2, [r3, #20]
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a700:	2280      	movs	r2, #128	; 0x80
 800a702:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d149      	bne.n	800a7a0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	3334      	adds	r3, #52	; 0x34
 800a710:	3330      	adds	r3, #48	; 0x30
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fb0a 	bl	8008d2c <ld_word>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d140      	bne.n	800a7a0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a720:	3301      	adds	r3, #1
 800a722:	4619      	mov	r1, r3
 800a724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a726:	f7fe fde1 	bl	80092ec <move_window>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d137      	bne.n	800a7a0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	2200      	movs	r2, #0
 800a734:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	3334      	adds	r3, #52	; 0x34
 800a73a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe faf4 	bl	8008d2c <ld_word>
 800a744:	4603      	mov	r3, r0
 800a746:	461a      	mov	r2, r3
 800a748:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d127      	bne.n	800a7a0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	3334      	adds	r3, #52	; 0x34
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fb01 	bl	8008d5c <ld_dword>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <find_volume+0x49c>)
 800a75e:	429a      	cmp	r2, r3
 800a760:	d11e      	bne.n	800a7a0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	3334      	adds	r3, #52	; 0x34
 800a766:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe faf6 	bl	8008d5c <ld_dword>
 800a770:	4602      	mov	r2, r0
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <find_volume+0x4a0>)
 800a774:	429a      	cmp	r2, r3
 800a776:	d113      	bne.n	800a7a0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	3334      	adds	r3, #52	; 0x34
 800a77c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe faeb 	bl	8008d5c <ld_dword>
 800a786:	4602      	mov	r2, r0
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78e:	3334      	adds	r3, #52	; 0x34
 800a790:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fae1 	bl	8008d5c <ld_dword>
 800a79a:	4602      	mov	r2, r0
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a7a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a7a8:	4b0a      	ldr	r3, [pc, #40]	; (800a7d4 <find_volume+0x4a4>)
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <find_volume+0x4a4>)
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <find_volume+0x4a4>)
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a7bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7be:	f7fe fd2d 	bl	800921c <clear_lock>
#endif
	return FR_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3758      	adds	r7, #88	; 0x58
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	41615252 	.word	0x41615252
 800a7d0:	61417272 	.word	0x61417272
 800a7d4:	20000314 	.word	0x20000314

0800a7d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d01a      	beq.n	800a81e <validate+0x46>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d016      	beq.n	800a81e <validate+0x46>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d011      	beq.n	800a81e <validate+0x46>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	88da      	ldrh	r2, [r3, #6]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	889b      	ldrh	r3, [r3, #4]
 800a804:	429a      	cmp	r2, r3
 800a806:	d10a      	bne.n	800a81e <validate+0x46>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe f9ee 	bl	8008bf0 <disk_status>
 800a814:	4603      	mov	r3, r0
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d005      	beq.n	800a82a <validate+0x52>
		*fs = 0;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800a824:	2309      	movs	r3, #9
 800a826:	73fb      	strb	r3, [r7, #15]
 800a828:	e00f      	b.n	800a84a <validate+0x72>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fb77 	bl	8008f2a <lock_fs>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <validate+0x6e>
 800a842:	230f      	movs	r3, #15
 800a844:	e002      	b.n	800a84c <validate+0x74>
		res = FR_OK;			/* Valid object */
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a866:	f107 0310 	add.w	r3, r7, #16
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff fcc5 	bl	800a1fa <get_ldnumber>
 800a870:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	2b00      	cmp	r3, #0
 800a876:	da01      	bge.n	800a87c <f_mount+0x28>
 800a878:	230b      	movs	r3, #11
 800a87a:	e048      	b.n	800a90e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a87c:	4a26      	ldr	r2, [pc, #152]	; (800a918 <f_mount+0xc4>)
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a884:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00f      	beq.n	800a8ac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a88c:	69b8      	ldr	r0, [r7, #24]
 800a88e:	f7fe fcc5 	bl	800921c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	4618      	mov	r0, r3
 800a898:	f001 fc5d 	bl	800c156 <ff_del_syncobj>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <f_mount+0x52>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	e033      	b.n	800a90e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00f      	beq.n	800a8d2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	330c      	adds	r3, #12
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	f001 fc29 	bl	800c11a <ff_cre_syncobj>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <f_mount+0x7e>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e01d      	b.n	800a90e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4910      	ldr	r1, [pc, #64]	; (800a918 <f_mount+0xc4>)
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <f_mount+0x94>
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d001      	beq.n	800a8ec <f_mount+0x98>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	e010      	b.n	800a90e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a8ec:	f107 010c 	add.w	r1, r7, #12
 800a8f0:	f107 0308 	add.w	r3, r7, #8
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fd1a 	bl	800a330 <find_volume>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	7dfa      	ldrb	r2, [r7, #23]
 800a904:	4611      	mov	r1, r2
 800a906:	4618      	mov	r0, r3
 800a908:	f7fe fb25 	bl	8008f56 <unlock_fs>
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000310 	.word	0x20000310

0800a91c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b098      	sub	sp, #96	; 0x60
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <f_open+0x18>
 800a930:	2309      	movs	r3, #9
 800a932:	e1b4      	b.n	800ac9e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a93a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a93c:	79fa      	ldrb	r2, [r7, #7]
 800a93e:	f107 0110 	add.w	r1, r7, #16
 800a942:	f107 0308 	add.w	r3, r7, #8
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff fcf2 	bl	800a330 <find_volume>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 8191 	bne.w	800ac7e <f_open+0x362>
		dj.obj.fs = fs;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	f107 0314 	add.w	r3, r7, #20
 800a966:	4611      	mov	r1, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fbd5 	bl	800a118 <follow_path>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d11a      	bne.n	800a9b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a97c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a980:	b25b      	sxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	da03      	bge.n	800a98e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a986:	2306      	movs	r3, #6
 800a988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a98c:	e011      	b.n	800a9b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	bf14      	ite	ne
 800a998:	2301      	movne	r3, #1
 800a99a:	2300      	moveq	r3, #0
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f107 0314 	add.w	r3, r7, #20
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe faf0 	bl	8008f8c <chk_lock>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	f003 031c 	and.w	r3, r3, #28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d07f      	beq.n	800aabc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d017      	beq.n	800a9f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a9c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d10e      	bne.n	800a9ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a9cc:	f7fe fb3a 	bl	8009044 <enq_lock>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d006      	beq.n	800a9e4 <f_open+0xc8>
 800a9d6:	f107 0314 	add.w	r3, r7, #20
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fa76 	bl	8009ecc <dir_register>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	e000      	b.n	800a9e6 <f_open+0xca>
 800a9e4:	2312      	movs	r3, #18
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	f043 0308 	orr.w	r3, r3, #8
 800a9f0:	71fb      	strb	r3, [r7, #7]
 800a9f2:	e010      	b.n	800aa16 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a9f4:	7ebb      	ldrb	r3, [r7, #26]
 800a9f6:	f003 0311 	and.w	r3, r3, #17
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <f_open+0xea>
					res = FR_DENIED;
 800a9fe:	2307      	movs	r3, #7
 800aa00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa04:	e007      	b.n	800aa16 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa06:	79fb      	ldrb	r3, [r7, #7]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <f_open+0xfa>
 800aa10:	2308      	movs	r3, #8
 800aa12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aa16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d168      	bne.n	800aaf0 <f_open+0x1d4>
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d063      	beq.n	800aaf0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aa28:	f006 fcd0 	bl	80113cc <get_fattime>
 800aa2c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa30:	330e      	adds	r3, #14
 800aa32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe f9cf 	bl	8008dd8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3c:	3316      	adds	r3, #22
 800aa3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe f9c9 	bl	8008dd8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	330b      	adds	r3, #11
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff f948 	bl	8009cea <ld_clust>
 800aa5a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa60:	2200      	movs	r2, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff f960 	bl	8009d28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6a:	331c      	adds	r3, #28
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe f9b2 	bl	8008dd8 <st_dword>
					fs->wflag = 1;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	2201      	movs	r2, #1
 800aa78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aa7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d037      	beq.n	800aaf0 <f_open+0x1d4>
						dw = fs->winsect;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa84:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800aa86:	f107 0314 	add.w	r3, r7, #20
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe fe73 	bl	800977a <remove_chain>
 800aa94:	4603      	mov	r3, r0
 800aa96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800aa9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d126      	bne.n	800aaf0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fc20 	bl	80092ec <move_window>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aab6:	3a01      	subs	r2, #1
 800aab8:	611a      	str	r2, [r3, #16]
 800aaba:	e019      	b.n	800aaf0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aabc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d115      	bne.n	800aaf0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aac4:	7ebb      	ldrb	r3, [r7, #26]
 800aac6:	f003 0310 	and.w	r3, r3, #16
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800aace:	2304      	movs	r3, #4
 800aad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aad4:	e00c      	b.n	800aaf0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <f_open+0x1d4>
 800aae0:	7ebb      	ldrb	r3, [r7, #26]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <f_open+0x1d4>
						res = FR_DENIED;
 800aaea:	2307      	movs	r3, #7
 800aaec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aaf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d128      	bne.n	800ab4a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aaf8:	79fb      	ldrb	r3, [r7, #7]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ab12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bf14      	ite	ne
 800ab22:	2301      	movne	r3, #1
 800ab24:	2300      	moveq	r3, #0
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe faa9 	bl	8009088 <inc_lock>
 800ab36:	4602      	mov	r2, r0
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <f_open+0x22e>
 800ab44:	2302      	movs	r3, #2
 800ab46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ab4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f040 8095 	bne.w	800ac7e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab58:	4611      	mov	r1, r2
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7ff f8c5 	bl	8009cea <ld_clust>
 800ab60:	4602      	mov	r2, r0
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab68:	331c      	adds	r3, #28
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe f8f6 	bl	8008d5c <ld_dword>
 800ab70:	4602      	mov	r2, r0
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	88da      	ldrh	r2, [r3, #6]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	79fa      	ldrb	r2, [r7, #7]
 800ab8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3330      	adds	r3, #48	; 0x30
 800aba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe f960 	bl	8008e72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d060      	beq.n	800ac7e <f_open+0x362>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d05c      	beq.n	800ac7e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	895b      	ldrh	r3, [r3, #10]
 800abd0:	025b      	lsls	r3, r3, #9
 800abd2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	657b      	str	r3, [r7, #84]	; 0x54
 800abe0:	e016      	b.n	800ac10 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe fc3b 	bl	8009462 <get_fat>
 800abec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800abee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d802      	bhi.n	800abfa <f_open+0x2de>
 800abf4:	2302      	movs	r3, #2
 800abf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800abfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d102      	bne.n	800ac08 <f_open+0x2ec>
 800ac02:	2301      	movs	r3, #1
 800ac04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	657b      	str	r3, [r7, #84]	; 0x54
 800ac10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d103      	bne.n	800ac20 <f_open+0x304>
 800ac18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d8e0      	bhi.n	800abe2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d127      	bne.n	800ac7e <f_open+0x362>
 800ac2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d022      	beq.n	800ac7e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe fbf1 	bl	8009424 <clust2sect>
 800ac42:	6478      	str	r0, [r7, #68]	; 0x44
 800ac44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d103      	bne.n	800ac52 <f_open+0x336>
						res = FR_INT_ERR;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac50:	e015      	b.n	800ac7e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac54:	0a5a      	lsrs	r2, r3, #9
 800ac56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac58:	441a      	add	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	7858      	ldrb	r0, [r3, #1]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6a1a      	ldr	r2, [r3, #32]
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	f7fd ffff 	bl	8008c70 <disk_read>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <f_open+0x362>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ac7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d002      	beq.n	800ac8c <f_open+0x370>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ac92:	4611      	mov	r1, r2
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe f95e 	bl	8008f56 <unlock_fs>
 800ac9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3760      	adds	r7, #96	; 0x60
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b08e      	sub	sp, #56	; 0x38
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
 800acb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f107 0214 	add.w	r2, r7, #20
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff fd86 	bl	800a7d8 <validate>
 800accc:	4603      	mov	r3, r0
 800acce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800acd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d107      	bne.n	800acea <f_read+0x44>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	7d5b      	ldrb	r3, [r3, #21]
 800acde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ace2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <f_read+0x58>
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe f92f 	bl	8008f56 <unlock_fs>
 800acf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acfc:	e13d      	b.n	800af7a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	7d1b      	ldrb	r3, [r3, #20]
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <f_read+0x72>
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2107      	movs	r1, #7
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe f921 	bl	8008f56 <unlock_fs>
 800ad14:	2307      	movs	r3, #7
 800ad16:	e130      	b.n	800af7a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	68da      	ldr	r2, [r3, #12]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	f240 811c 	bls.w	800af66 <f_read+0x2c0>
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ad32:	e118      	b.n	800af66 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 80e4 	bne.w	800af0a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	0a5b      	lsrs	r3, r3, #9
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	8952      	ldrh	r2, [r2, #10]
 800ad4c:	3a01      	subs	r2, #1
 800ad4e:	4013      	ands	r3, r2
 800ad50:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d139      	bne.n	800adcc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	633b      	str	r3, [r7, #48]	; 0x30
 800ad66:	e013      	b.n	800ad90 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d007      	beq.n	800ad80 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	4619      	mov	r1, r3
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7fe fdfc 	bl	8009974 <clmt_clust>
 800ad7c:	6338      	str	r0, [r7, #48]	; 0x30
 800ad7e:	e007      	b.n	800ad90 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7fe fb6a 	bl	8009462 <get_fat>
 800ad8e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d809      	bhi.n	800adaa <f_read+0x104>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2202      	movs	r2, #2
 800ad9a:	755a      	strb	r2, [r3, #21]
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2102      	movs	r1, #2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe f8d8 	bl	8008f56 <unlock_fs>
 800ada6:	2302      	movs	r3, #2
 800ada8:	e0e7      	b.n	800af7a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d109      	bne.n	800adc6 <f_read+0x120>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	755a      	strb	r2, [r3, #21]
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2101      	movs	r1, #1
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe f8ca 	bl	8008f56 <unlock_fs>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e0d9      	b.n	800af7a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adca:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	4619      	mov	r1, r3
 800add4:	4610      	mov	r0, r2
 800add6:	f7fe fb25 	bl	8009424 <clust2sect>
 800adda:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <f_read+0x150>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2202      	movs	r2, #2
 800ade6:	755a      	strb	r2, [r3, #21]
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2102      	movs	r1, #2
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe f8b2 	bl	8008f56 <unlock_fs>
 800adf2:	2302      	movs	r3, #2
 800adf4:	e0c1      	b.n	800af7a <f_read+0x2d4>
			sect += csect;
 800adf6:	69ba      	ldr	r2, [r7, #24]
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4413      	add	r3, r2
 800adfc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	0a5b      	lsrs	r3, r3, #9
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d03e      	beq.n	800ae88 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ae0a:	69fa      	ldr	r2, [r7, #28]
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	4413      	add	r3, r2
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	8952      	ldrh	r2, [r2, #10]
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d905      	bls.n	800ae24 <f_read+0x17e>
					cc = fs->csize - csect;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	895b      	ldrh	r3, [r3, #10]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	7858      	ldrb	r0, [r3, #1]
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae2e:	f7fd ff1f 	bl	8008c70 <disk_read>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d009      	beq.n	800ae4c <f_read+0x1a6>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	755a      	strb	r2, [r3, #21]
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2101      	movs	r1, #1
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fe f887 	bl	8008f56 <unlock_fs>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e096      	b.n	800af7a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	7d1b      	ldrb	r3, [r3, #20]
 800ae50:	b25b      	sxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	da14      	bge.n	800ae80 <f_read+0x1da>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6a1a      	ldr	r2, [r3, #32]
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	1ad2      	subs	r2, r2, r3
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d20d      	bcs.n	800ae80 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6a1a      	ldr	r2, [r3, #32]
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	025b      	lsls	r3, r3, #9
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae70:	18d0      	adds	r0, r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3330      	adds	r3, #48	; 0x30
 800ae76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f7fd ffd8 	bl	8008e30 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	025b      	lsls	r3, r3, #9
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ae86:	e05a      	b.n	800af3e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a1a      	ldr	r2, [r3, #32]
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d038      	beq.n	800af04 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	7d1b      	ldrb	r3, [r3, #20]
 800ae96:	b25b      	sxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	da1d      	bge.n	800aed8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	7858      	ldrb	r0, [r3, #1]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a1a      	ldr	r2, [r3, #32]
 800aeaa:	2301      	movs	r3, #1
 800aeac:	f7fd ff00 	bl	8008cb0 <disk_write>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d009      	beq.n	800aeca <f_read+0x224>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	755a      	strb	r2, [r3, #21]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2101      	movs	r1, #1
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe f848 	bl	8008f56 <unlock_fs>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e057      	b.n	800af7a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	7d1b      	ldrb	r3, [r3, #20]
 800aece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	7858      	ldrb	r0, [r3, #1]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aee2:	2301      	movs	r3, #1
 800aee4:	69ba      	ldr	r2, [r7, #24]
 800aee6:	f7fd fec3 	bl	8008c70 <disk_read>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d009      	beq.n	800af04 <f_read+0x25e>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	755a      	strb	r2, [r3, #21]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2101      	movs	r1, #1
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe f82b 	bl	8008f56 <unlock_fs>
 800af00:	2301      	movs	r3, #1
 800af02:	e03a      	b.n	800af7a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af12:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800af18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d901      	bls.n	800af24 <f_read+0x27e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	4413      	add	r3, r2
 800af34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af36:	4619      	mov	r1, r3
 800af38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af3a:	f7fd ff79 	bl	8008e30 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800af3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af42:	4413      	add	r3, r2
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	441a      	add	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	619a      	str	r2, [r3, #24]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af58:	441a      	add	r2, r3
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f47f aee3 	bne.w	800ad34 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2100      	movs	r1, #0
 800af72:	4618      	mov	r0, r3
 800af74:	f7fd ffef 	bl	8008f56 <unlock_fs>
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3738      	adds	r7, #56	; 0x38
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b08c      	sub	sp, #48	; 0x30
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	607a      	str	r2, [r7, #4]
 800af8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f107 0210 	add.w	r2, r7, #16
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff fc18 	bl	800a7d8 <validate>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800afae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d107      	bne.n	800afc6 <f_write+0x44>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	7d5b      	ldrb	r3, [r3, #21]
 800afba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800afbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d009      	beq.n	800afda <f_write+0x58>
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fd ffc1 	bl	8008f56 <unlock_fs>
 800afd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afd8:	e173      	b.n	800b2c2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	7d1b      	ldrb	r3, [r3, #20]
 800afde:	f003 0302 	and.w	r3, r3, #2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d106      	bne.n	800aff4 <f_write+0x72>
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2107      	movs	r1, #7
 800afea:	4618      	mov	r0, r3
 800afec:	f7fd ffb3 	bl	8008f56 <unlock_fs>
 800aff0:	2307      	movs	r3, #7
 800aff2:	e166      	b.n	800b2c2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	699a      	ldr	r2, [r3, #24]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	441a      	add	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	f080 814b 	bcs.w	800b29c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	43db      	mvns	r3, r3
 800b00c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b00e:	e145      	b.n	800b29c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 8101 	bne.w	800b220 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	0a5b      	lsrs	r3, r3, #9
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	8952      	ldrh	r2, [r2, #10]
 800b028:	3a01      	subs	r2, #1
 800b02a:	4013      	ands	r3, r2
 800b02c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d14d      	bne.n	800b0d0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10c      	bne.n	800b056 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b044:	2b00      	cmp	r3, #0
 800b046:	d11a      	bne.n	800b07e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2100      	movs	r1, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fbf9 	bl	8009844 <create_chain>
 800b052:	62b8      	str	r0, [r7, #40]	; 0x28
 800b054:	e013      	b.n	800b07e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	4619      	mov	r1, r3
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7fe fc85 	bl	8009974 <clmt_clust>
 800b06a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b06c:	e007      	b.n	800b07e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f7fe fbe4 	bl	8009844 <create_chain>
 800b07c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 8110 	beq.w	800b2a6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d109      	bne.n	800b0a0 <f_write+0x11e>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2202      	movs	r2, #2
 800b090:	755a      	strb	r2, [r3, #21]
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2102      	movs	r1, #2
 800b096:	4618      	mov	r0, r3
 800b098:	f7fd ff5d 	bl	8008f56 <unlock_fs>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e110      	b.n	800b2c2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a6:	d109      	bne.n	800b0bc <f_write+0x13a>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	755a      	strb	r2, [r3, #21]
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fd ff4f 	bl	8008f56 <unlock_fs>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e102      	b.n	800b2c2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d102      	bne.n	800b0d0 <f_write+0x14e>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	7d1b      	ldrb	r3, [r3, #20]
 800b0d4:	b25b      	sxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da1d      	bge.n	800b116 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	7858      	ldrb	r0, [r3, #1]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a1a      	ldr	r2, [r3, #32]
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f7fd fde1 	bl	8008cb0 <disk_write>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d009      	beq.n	800b108 <f_write+0x186>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	755a      	strb	r2, [r3, #21]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fd ff29 	bl	8008f56 <unlock_fs>
 800b104:	2301      	movs	r3, #1
 800b106:	e0dc      	b.n	800b2c2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	7d1b      	ldrb	r3, [r3, #20]
 800b10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b110:	b2da      	uxtb	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	69db      	ldr	r3, [r3, #28]
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f7fe f980 	bl	8009424 <clust2sect>
 800b124:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d109      	bne.n	800b140 <f_write+0x1be>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2202      	movs	r2, #2
 800b130:	755a      	strb	r2, [r3, #21]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2102      	movs	r1, #2
 800b136:	4618      	mov	r0, r3
 800b138:	f7fd ff0d 	bl	8008f56 <unlock_fs>
 800b13c:	2302      	movs	r3, #2
 800b13e:	e0c0      	b.n	800b2c2 <f_write+0x340>
			sect += csect;
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	4413      	add	r3, r2
 800b146:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	0a5b      	lsrs	r3, r3, #9
 800b14c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d041      	beq.n	800b1d8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	4413      	add	r3, r2
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	8952      	ldrh	r2, [r2, #10]
 800b15e:	4293      	cmp	r3, r2
 800b160:	d905      	bls.n	800b16e <f_write+0x1ec>
					cc = fs->csize - csect;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	895b      	ldrh	r3, [r3, #10]
 800b166:	461a      	mov	r2, r3
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	7858      	ldrb	r0, [r3, #1]
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	69f9      	ldr	r1, [r7, #28]
 800b178:	f7fd fd9a 	bl	8008cb0 <disk_write>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d009      	beq.n	800b196 <f_write+0x214>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	755a      	strb	r2, [r3, #21]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2101      	movs	r1, #1
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fd fee2 	bl	8008f56 <unlock_fs>
 800b192:	2301      	movs	r3, #1
 800b194:	e095      	b.n	800b2c2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6a1a      	ldr	r2, [r3, #32]
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	1ad2      	subs	r2, r2, r3
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d215      	bcs.n	800b1d0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6a1a      	ldr	r2, [r3, #32]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	025b      	lsls	r3, r3, #9
 800b1b4:	69fa      	ldr	r2, [r7, #28]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1bc:	4619      	mov	r1, r3
 800b1be:	f7fd fe37 	bl	8008e30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	7d1b      	ldrb	r3, [r3, #20]
 800b1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	025b      	lsls	r3, r3, #9
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b1d6:	e044      	b.n	800b262 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6a1a      	ldr	r2, [r3, #32]
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d01b      	beq.n	800b21a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	699a      	ldr	r2, [r3, #24]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d215      	bcs.n	800b21a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	7858      	ldrb	r0, [r3, #1]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	f7fd fd38 	bl	8008c70 <disk_read>
 800b200:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b202:	2b00      	cmp	r3, #0
 800b204:	d009      	beq.n	800b21a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2201      	movs	r2, #1
 800b20a:	755a      	strb	r2, [r3, #21]
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2101      	movs	r1, #1
 800b210:	4618      	mov	r0, r3
 800b212:	f7fd fea0 	bl	8008f56 <unlock_fs>
 800b216:	2301      	movs	r3, #1
 800b218:	e053      	b.n	800b2c2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b228:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	429a      	cmp	r2, r3
 800b234:	d901      	bls.n	800b23a <f_write+0x2b8>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b248:	4413      	add	r3, r2
 800b24a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24c:	69f9      	ldr	r1, [r7, #28]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fd fdee 	bl	8008e30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	7d1b      	ldrb	r3, [r3, #20]
 800b258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b262:	69fa      	ldr	r2, [r7, #28]
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	4413      	add	r3, r2
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	699a      	ldr	r2, [r3, #24]
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	441a      	add	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	619a      	str	r2, [r3, #24]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	429a      	cmp	r2, r3
 800b280:	bf38      	it	cc
 800b282:	461a      	movcc	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	60da      	str	r2, [r3, #12]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	441a      	add	r2, r3
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f47f aeb6 	bne.w	800b010 <f_write+0x8e>
 800b2a4:	e000      	b.n	800b2a8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b2a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	7d1b      	ldrb	r3, [r3, #20]
 800b2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd fe4b 	bl	8008f56 <unlock_fs>
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3730      	adds	r7, #48	; 0x30
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b086      	sub	sp, #24
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f107 0208 	add.w	r2, r7, #8
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fa7c 	bl	800a7d8 <validate>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d16d      	bne.n	800b3c6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7d1b      	ldrb	r3, [r3, #20]
 800b2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d067      	beq.n	800b3c6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	7d1b      	ldrb	r3, [r3, #20]
 800b2fa:	b25b      	sxtb	r3, r3
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da1a      	bge.n	800b336 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	7858      	ldrb	r0, [r3, #1]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1a      	ldr	r2, [r3, #32]
 800b30e:	2301      	movs	r3, #1
 800b310:	f7fd fcce 	bl	8008cb0 <disk_write>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <f_sync+0x5e>
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2101      	movs	r1, #1
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fd fe19 	bl	8008f56 <unlock_fs>
 800b324:	2301      	movs	r3, #1
 800b326:	e055      	b.n	800b3d4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7d1b      	ldrb	r3, [r3, #20]
 800b32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b330:	b2da      	uxtb	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b336:	f006 f849 	bl	80113cc <get_fattime>
 800b33a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f7fd ffd1 	bl	80092ec <move_window>
 800b34a:	4603      	mov	r3, r0
 800b34c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d138      	bne.n	800b3c6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b358:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	330b      	adds	r3, #11
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	320b      	adds	r2, #11
 800b362:	7812      	ldrb	r2, [r2, #0]
 800b364:	f042 0220 	orr.w	r2, r2, #32
 800b368:	b2d2      	uxtb	r2, r2
 800b36a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	461a      	mov	r2, r3
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	f7fe fcd6 	bl	8009d28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f103 021c 	add.w	r2, r3, #28
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7fd fd25 	bl	8008dd8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3316      	adds	r3, #22
 800b392:	6939      	ldr	r1, [r7, #16]
 800b394:	4618      	mov	r0, r3
 800b396:	f7fd fd1f 	bl	8008dd8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3312      	adds	r3, #18
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fd fcfe 	bl	8008da2 <st_word>
					fs->wflag = 1;
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fd ffca 	bl	8009348 <sync_fs>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7d1b      	ldrb	r3, [r3, #20]
 800b3bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	7dfa      	ldrb	r2, [r7, #23]
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fd fdc2 	bl	8008f56 <unlock_fs>
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7ff ff70 	bl	800b2ca <f_sync>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d11d      	bne.n	800b430 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f107 0208 	add.w	r2, r7, #8
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7ff f9eb 	bl	800a7d8 <validate>
 800b402:	4603      	mov	r3, r0
 800b404:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d111      	bne.n	800b430 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	4618      	mov	r0, r3
 800b412:	f7fd fec7 	bl	80091a4 <dec_lock>
 800b416:	4603      	mov	r3, r0
 800b418:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2100      	movs	r1, #0
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fd fd93 	bl	8008f56 <unlock_fs>
#endif
		}
	}
	return res;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b086      	sub	sp, #24
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <f_opendir+0x14>
 800b44a:	2309      	movs	r3, #9
 800b44c:	e06a      	b.n	800b524 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b452:	f107 010c 	add.w	r1, r7, #12
 800b456:	463b      	mov	r3, r7
 800b458:	2200      	movs	r2, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe ff68 	bl	800a330 <find_volume>
 800b460:	4603      	mov	r3, r0
 800b462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d14f      	bne.n	800b50a <f_opendir+0xd0>
		obj->fs = fs;
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7fe fe4f 	bl	800a118 <follow_path>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d13d      	bne.n	800b500 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b48a:	b25b      	sxtb	r3, r3
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	db12      	blt.n	800b4b6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	799b      	ldrb	r3, [r3, #6]
 800b494:	f003 0310 	and.w	r3, r3, #16
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	f7fe fc20 	bl	8009cea <ld_clust>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	609a      	str	r2, [r3, #8]
 800b4b0:	e001      	b.n	800b4b6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b4b2:	2305      	movs	r3, #5
 800b4b4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d121      	bne.n	800b500 <f_opendir+0xc6>
				obj->id = fs->id;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	88da      	ldrh	r2, [r3, #6]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fe fa88 	bl	80099dc <dir_sdi>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d114      	bne.n	800b500 <f_opendir+0xc6>
					if (obj->sclust) {
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00d      	beq.n	800b4fa <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b4de:	2100      	movs	r1, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7fd fdd1 	bl	8009088 <inc_lock>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d105      	bne.n	800b500 <f_opendir+0xc6>
 800b4f4:	2312      	movs	r3, #18
 800b4f6:	75fb      	strb	r3, [r7, #23]
 800b4f8:	e002      	b.n	800b500 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	2b04      	cmp	r3, #4
 800b504:	d101      	bne.n	800b50a <f_opendir+0xd0>
 800b506:	2305      	movs	r3, #5
 800b508:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <f_opendir+0xdc>
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	7dfa      	ldrb	r2, [r7, #23]
 800b51a:	4611      	mov	r1, r2
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fd fd1a 	bl	8008f56 <unlock_fs>
 800b522:	7dfb      	ldrb	r3, [r7, #23]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f107 0208 	add.w	r2, r7, #8
 800b53a:	4611      	mov	r1, r2
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff f94b 	bl	800a7d8 <validate>
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d115      	bne.n	800b578 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d006      	beq.n	800b562 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fd fe23 	bl	80091a4 <dec_lock>
 800b55e:	4603      	mov	r3, r0
 800b560:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2100      	movs	r1, #0
 800b572:	4618      	mov	r0, r3
 800b574:	f7fd fcef 	bl	8008f56 <unlock_fs>
#endif
	}
	return res;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
 800b58a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f107 0208 	add.w	r2, r7, #8
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff f91f 	bl	800a7d8 <validate>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d126      	bne.n	800b5f2 <f_readdir+0x70>
		if (!fno) {
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f7fe fa15 	bl	80099dc <dir_sdi>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]
 800b5b6:	e01c      	b.n	800b5f2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fe fbd4 	bl	8009d68 <dir_read>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d101      	bne.n	800b5ce <f_readdir+0x4c>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10e      	bne.n	800b5f2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7fe fcaa 	bl	8009f30 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b5dc:	2100      	movs	r1, #0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7fe fa77 	bl	8009ad2 <dir_next>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d101      	bne.n	800b5f2 <f_readdir+0x70>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	7bfa      	ldrb	r2, [r7, #15]
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fd fcac 	bl	8008f56 <unlock_fs>
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b092      	sub	sp, #72	; 0x48
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b614:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b618:	f107 030c 	add.w	r3, r7, #12
 800b61c:	2200      	movs	r2, #0
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe fe86 	bl	800a330 <find_volume>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b62a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f040 8099 	bne.w	800b766 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	695a      	ldr	r2, [r3, #20]
 800b63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	3b02      	subs	r3, #2
 800b644:	429a      	cmp	r2, r3
 800b646:	d804      	bhi.n	800b652 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	695a      	ldr	r2, [r3, #20]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	e089      	b.n	800b766 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d128      	bne.n	800b6b0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b65e:	2302      	movs	r3, #2
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b666:	f107 0314 	add.w	r3, r7, #20
 800b66a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fd fef8 	bl	8009462 <get_fat>
 800b672:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67a:	d103      	bne.n	800b684 <f_getfree+0x7c>
 800b67c:	2301      	movs	r3, #1
 800b67e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b682:	e063      	b.n	800b74c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	2b01      	cmp	r3, #1
 800b688:	d103      	bne.n	800b692 <f_getfree+0x8a>
 800b68a:	2302      	movs	r3, #2
 800b68c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b690:	e05c      	b.n	800b74c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <f_getfree+0x96>
 800b698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69a:	3301      	adds	r3, #1
 800b69c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d3db      	bcc.n	800b666 <f_getfree+0x5e>
 800b6ae:	e04d      	b.n	800b74c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	637b      	str	r3, [r7, #52]	; 0x34
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d113      	bne.n	800b6f2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	63ba      	str	r2, [r7, #56]	; 0x38
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	f7fd fe0a 	bl	80092ec <move_window>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b6de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d131      	bne.n	800b74a <f_getfree+0x142>
							p = fs->win;
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	3334      	adds	r3, #52	; 0x34
 800b6ea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b6ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d10f      	bne.n	800b71a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b6fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fc:	f7fd fb16 	bl	8008d2c <ld_word>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <f_getfree+0x104>
 800b706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b708:	3301      	adds	r3, #1
 800b70a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	3302      	adds	r3, #2
 800b710:	633b      	str	r3, [r7, #48]	; 0x30
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	3b02      	subs	r3, #2
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
 800b718:	e010      	b.n	800b73c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b71a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b71c:	f7fd fb1e 	bl	8008d5c <ld_dword>
 800b720:	4603      	mov	r3, r0
 800b722:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d102      	bne.n	800b730 <f_getfree+0x128>
 800b72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72c:	3301      	adds	r3, #1
 800b72e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	3304      	adds	r3, #4
 800b734:	633b      	str	r3, [r7, #48]	; 0x30
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	3b04      	subs	r3, #4
 800b73a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73e:	3b01      	subs	r3, #1
 800b740:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1bd      	bne.n	800b6c4 <f_getfree+0xbc>
 800b748:	e000      	b.n	800b74c <f_getfree+0x144>
							if (res != FR_OK) break;
 800b74a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b750:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b756:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75c:	7912      	ldrb	r2, [r2, #4]
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	b2d2      	uxtb	r2, r2
 800b764:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fd fbf1 	bl	8008f56 <unlock_fs>
 800b774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3748      	adds	r7, #72	; 0x48
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b780:	b590      	push	{r4, r7, lr}
 800b782:	b09d      	sub	sp, #116	; 0x74
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	607a      	str	r2, [r7, #4]
 800b78a:	603b      	str	r3, [r7, #0]
 800b78c:	460b      	mov	r3, r1
 800b78e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b790:	2301      	movs	r3, #1
 800b792:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b794:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b798:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b79a:	f107 030c 	add.w	r3, r7, #12
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fd2b 	bl	800a1fa <get_ldnumber>
 800b7a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	da02      	bge.n	800b7b2 <f_mkfs+0x32>
 800b7ac:	230b      	movs	r3, #11
 800b7ae:	f000 bc0d 	b.w	800bfcc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b7b2:	4a94      	ldr	r2, [pc, #592]	; (800ba04 <f_mkfs+0x284>)
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d005      	beq.n	800b7ca <f_mkfs+0x4a>
 800b7be:	4a91      	ldr	r2, [pc, #580]	; (800ba04 <f_mkfs+0x284>)
 800b7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b7d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fd fa22 	bl	8008c24 <disk_initialize>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b7e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d001      	beq.n	800b7f6 <f_mkfs+0x76>
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e3ea      	b.n	800bfcc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b7f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b7fa:	f003 0304 	and.w	r3, r3, #4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <f_mkfs+0x86>
 800b802:	230a      	movs	r3, #10
 800b804:	e3e2      	b.n	800bfcc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b806:	f107 0214 	add.w	r2, r7, #20
 800b80a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b80e:	2103      	movs	r1, #3
 800b810:	4618      	mov	r0, r3
 800b812:	f7fd fa6d 	bl	8008cf0 <disk_ioctl>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10c      	bne.n	800b836 <f_mkfs+0xb6>
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d009      	beq.n	800b836 <f_mkfs+0xb6>
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b828:	d805      	bhi.n	800b836 <f_mkfs+0xb6>
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	1e5a      	subs	r2, r3, #1
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	4013      	ands	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <f_mkfs+0xba>
 800b836:	2301      	movs	r3, #1
 800b838:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b83a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b83e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <f_mkfs+0xce>
 800b846:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d809      	bhi.n	800b862 <f_mkfs+0xe2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b854:	d805      	bhi.n	800b862 <f_mkfs+0xe2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	1e5a      	subs	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4013      	ands	r3, r2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <f_mkfs+0xe6>
 800b862:	2313      	movs	r3, #19
 800b864:	e3b2      	b.n	800bfcc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b866:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b884:	fb02 f303 	mul.w	r3, r2, r3
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <f_mkfs+0x114>
 800b890:	230e      	movs	r3, #14
 800b892:	e39b      	b.n	800bfcc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b894:	f107 0210 	add.w	r2, r7, #16
 800b898:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b89c:	2101      	movs	r1, #1
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fd fa26 	bl	8008cf0 <disk_ioctl>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <f_mkfs+0x12e>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e38e      	b.n	800bfcc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b8ae:	7afb      	ldrb	r3, [r7, #11]
 800b8b0:	f003 0308 	and.w	r3, r3, #8
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <f_mkfs+0x13c>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e000      	b.n	800b8be <f_mkfs+0x13e>
 800b8bc:	233f      	movs	r3, #63	; 0x3f
 800b8be:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d201      	bcs.n	800b8cc <f_mkfs+0x14c>
 800b8c8:	230e      	movs	r3, #14
 800b8ca:	e37f      	b.n	800bfcc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b7f      	cmp	r3, #127	; 0x7f
 800b8d8:	d801      	bhi.n	800b8de <f_mkfs+0x15e>
 800b8da:	230e      	movs	r3, #14
 800b8dc:	e376      	b.n	800bfcc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b80      	cmp	r3, #128	; 0x80
 800b8e2:	d901      	bls.n	800b8e8 <f_mkfs+0x168>
 800b8e4:	2313      	movs	r3, #19
 800b8e6:	e371      	b.n	800bfcc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b8e8:	7afb      	ldrb	r3, [r7, #11]
 800b8ea:	f003 0302 	and.w	r3, r3, #2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00d      	beq.n	800b90e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b8f2:	7afb      	ldrb	r3, [r7, #11]
 800b8f4:	f003 0307 	and.w	r3, r3, #7
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d004      	beq.n	800b906 <f_mkfs+0x186>
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	d103      	bne.n	800b90e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b906:	2303      	movs	r3, #3
 800b908:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b90c:	e009      	b.n	800b922 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b90e:	7afb      	ldrb	r3, [r7, #11]
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <f_mkfs+0x19c>
 800b918:	2313      	movs	r3, #19
 800b91a:	e357      	b.n	800bfcc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b91c:	2302      	movs	r3, #2
 800b91e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b926:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d13c      	bne.n	800b9a8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b92e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b930:	2b00      	cmp	r3, #0
 800b932:	d11b      	bne.n	800b96c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	0c5b      	lsrs	r3, r3, #17
 800b938:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b93a:	2300      	movs	r3, #0
 800b93c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b93e:	2301      	movs	r3, #1
 800b940:	66bb      	str	r3, [r7, #104]	; 0x68
 800b942:	e005      	b.n	800b950 <f_mkfs+0x1d0>
 800b944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b946:	3301      	adds	r3, #1
 800b948:	64bb      	str	r3, [r7, #72]	; 0x48
 800b94a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b950:	4a2d      	ldr	r2, [pc, #180]	; (800ba08 <f_mkfs+0x288>)
 800b952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d007      	beq.n	800b96c <f_mkfs+0x1ec>
 800b95c:	4a2a      	ldr	r2, [pc, #168]	; (800ba08 <f_mkfs+0x288>)
 800b95e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b964:	461a      	mov	r2, r3
 800b966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b968:	429a      	cmp	r2, r3
 800b96a:	d9eb      	bls.n	800b944 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b970:	fbb2 f3f3 	udiv	r3, r2, r3
 800b974:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	3302      	adds	r3, #2
 800b97a:	009a      	lsls	r2, r3, #2
 800b97c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b97e:	4413      	add	r3, r2
 800b980:	1e5a      	subs	r2, r3, #1
 800b982:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b984:	fbb2 f3f3 	udiv	r3, r2, r3
 800b988:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 32;	/* Number of reserved sectors */
 800b98a:	2320      	movs	r3, #32
 800b98c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b98e:	2300      	movs	r3, #0
 800b990:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b998:	4293      	cmp	r3, r2
 800b99a:	d903      	bls.n	800b9a4 <f_mkfs+0x224>
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	4a1b      	ldr	r2, [pc, #108]	; (800ba0c <f_mkfs+0x28c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d952      	bls.n	800ba4a <f_mkfs+0x2ca>
 800b9a4:	230e      	movs	r3, #14
 800b9a6:	e311      	b.n	800bfcc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b9a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d11b      	bne.n	800b9e6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	0b1b      	lsrs	r3, r3, #12
 800b9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9bc:	e005      	b.n	800b9ca <f_mkfs+0x24a>
 800b9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9ca:	4a11      	ldr	r2, [pc, #68]	; (800ba10 <f_mkfs+0x290>)
 800b9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d007      	beq.n	800b9e6 <f_mkfs+0x266>
 800b9d6:	4a0e      	ldr	r2, [pc, #56]	; (800ba10 <f_mkfs+0x290>)
 800b9d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d9eb      	bls.n	800b9be <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ee:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d90c      	bls.n	800ba14 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba02:	e012      	b.n	800ba2a <f_mkfs+0x2aa>
 800ba04:	20000310 	.word	0x20000310
 800ba08:	08019fac 	.word	0x08019fac
 800ba0c:	0ffffff5 	.word	0x0ffffff5
 800ba10:	08019fbc 	.word	0x08019fbc
				} else {
					fmt = FS_FAT12;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ba1a:	6a3a      	ldr	r2, [r7, #32]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	005b      	lsls	r3, r3, #1
 800ba20:	4413      	add	r3, r2
 800ba22:	3301      	adds	r3, #1
 800ba24:	085b      	lsrs	r3, r3, #1
 800ba26:	3303      	adds	r3, #3
 800ba28:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ba2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ba2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba2e:	4413      	add	r3, r2
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba38:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 1;						/* Number of reserved sectors */
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ba3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba48:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ba4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba4e:	4413      	add	r3, r2
 800ba50:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ba52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba56:	fb02 f203 	mul.w	r2, r2, r3
 800ba5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba5c:	441a      	add	r2, r3
 800ba5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba60:	4413      	add	r3, r2
 800ba62:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	4413      	add	r3, r2
 800ba6a:	1e5a      	subs	r2, r3, #1
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	425b      	negs	r3, r3
 800ba70:	401a      	ands	r2, r3
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ba78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d108      	bne.n	800ba92 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ba80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba84:	4413      	add	r3, r2
 800ba86:	657b      	str	r3, [r7, #84]	; 0x54
 800ba88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba8c:	4413      	add	r3, r2
 800ba8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba90:	e006      	b.n	800baa0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ba92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba9c:	4413      	add	r3, r2
 800ba9e:	653b      	str	r3, [r7, #80]	; 0x50
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800baa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baa2:	011a      	lsls	r2, r3, #4
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	441a      	add	r2, r3
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d901      	bls.n	800bab6 <f_mkfs+0x336>
 800bab2:	230e      	movs	r3, #14
 800bab4:	e28a      	b.n	800bfcc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baba:	1ad2      	subs	r2, r2, r3
 800babc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800babe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bac0:	fb01 f303 	mul.w	r3, r1, r3
 800bac4:	1ad2      	subs	r2, r2, r3
 800bac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac8:	1ad2      	subs	r2, r2, r3
 800baca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800bad2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d10f      	bne.n	800bafa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d80a      	bhi.n	800bafa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d105      	bne.n	800baf6 <f_mkfs+0x376>
 800baea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baec:	085b      	lsrs	r3, r3, #1
 800baee:	607b      	str	r3, [r7, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d144      	bne.n	800bb80 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800baf6:	230e      	movs	r3, #14
 800baf8:	e268      	b.n	800bfcc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800bafa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d133      	bne.n	800bb6a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d91e      	bls.n	800bb4a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d107      	bne.n	800bb22 <f_mkfs+0x3a2>
 800bb12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d803      	bhi.n	800bb22 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800bb1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	607b      	str	r3, [r7, #4]
 800bb20:	e033      	b.n	800bb8a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800bb22:	7afb      	ldrb	r3, [r7, #11]
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800bb32:	e02a      	b.n	800bb8a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d105      	bne.n	800bb46 <f_mkfs+0x3c6>
 800bb3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	607b      	str	r3, [r7, #4]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d91e      	bls.n	800bb84 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bb46:	230e      	movs	r3, #14
 800bb48:	e240      	b.n	800bfcc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d80a      	bhi.n	800bb6a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d105      	bne.n	800bb66 <f_mkfs+0x3e6>
 800bb5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	607b      	str	r3, [r7, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b80      	cmp	r3, #128	; 0x80
 800bb64:	d910      	bls.n	800bb88 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bb66:	230e      	movs	r3, #14
 800bb68:	e230      	b.n	800bfcc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bb6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d10c      	bne.n	800bb8c <f_mkfs+0x40c>
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d907      	bls.n	800bb8c <f_mkfs+0x40c>
 800bb7c:	230e      	movs	r3, #14
 800bb7e:	e225      	b.n	800bfcc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bb80:	bf00      	nop
 800bb82:	e6ce      	b.n	800b922 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb84:	bf00      	nop
 800bb86:	e6cc      	b.n	800b922 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bb88:	bf00      	nop
			pau = au;
 800bb8a:	e6ca      	b.n	800b922 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bb8c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bb8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb90:	461a      	mov	r2, r3
 800bb92:	2100      	movs	r1, #0
 800bb94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb96:	f7fd f96c 	bl	8008e72 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bb9a:	220b      	movs	r2, #11
 800bb9c:	49bc      	ldr	r1, [pc, #752]	; (800be90 <f_mkfs+0x710>)
 800bb9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba0:	f7fd f946 	bl	8008e30 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	330b      	adds	r3, #11
 800bba8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd f8f8 	bl	8008da2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	330d      	adds	r3, #13
 800bbb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	330e      	adds	r3, #14
 800bbc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbc2:	b292      	uxth	r2, r2
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fd f8eb 	bl	8008da2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	3310      	adds	r3, #16
 800bbd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	f103 0211 	add.w	r2, r3, #17
 800bbdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d002      	beq.n	800bbea <f_mkfs+0x46a>
 800bbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	e000      	b.n	800bbec <f_mkfs+0x46c>
 800bbea:	2300      	movs	r3, #0
 800bbec:	4619      	mov	r1, r3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	f7fd f8d7 	bl	8008da2 <st_word>
		if (sz_vol < 0x10000) {
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbfa:	d208      	bcs.n	800bc0e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	3313      	adds	r3, #19
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	b292      	uxth	r2, r2
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fd f8cb 	bl	8008da2 <st_word>
 800bc0c:	e006      	b.n	800bc1c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	3320      	adds	r3, #32
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fd f8de 	bl	8008dd8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	3315      	adds	r3, #21
 800bc20:	22f8      	movs	r2, #248	; 0xf8
 800bc22:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	3318      	adds	r3, #24
 800bc28:	213f      	movs	r1, #63	; 0x3f
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd f8b9 	bl	8008da2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	331a      	adds	r3, #26
 800bc34:	21ff      	movs	r1, #255	; 0xff
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd f8b3 	bl	8008da2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	331c      	adds	r3, #28
 800bc40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fd f8c8 	bl	8008dd8 <st_dword>
		if (fmt == FS_FAT32) {
 800bc48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d131      	bne.n	800bcb4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800bc56:	f005 fbb9 	bl	80113cc <get_fattime>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f7fd f8ba 	bl	8008dd8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	3324      	adds	r3, #36	; 0x24
 800bc68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd f8b4 	bl	8008dd8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	332c      	adds	r3, #44	; 0x2c
 800bc74:	2102      	movs	r1, #2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fd f8ae 	bl	8008dd8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	3330      	adds	r3, #48	; 0x30
 800bc80:	2101      	movs	r1, #1
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fd f88d 	bl	8008da2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	3332      	adds	r3, #50	; 0x32
 800bc8c:	2106      	movs	r1, #6
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fd f887 	bl	8008da2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	3340      	adds	r3, #64	; 0x40
 800bc98:	2280      	movs	r2, #128	; 0x80
 800bc9a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	3342      	adds	r3, #66	; 0x42
 800bca0:	2229      	movs	r2, #41	; 0x29
 800bca2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	3347      	adds	r3, #71	; 0x47
 800bca8:	2213      	movs	r2, #19
 800bcaa:	497a      	ldr	r1, [pc, #488]	; (800be94 <f_mkfs+0x714>)
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fd f8bf 	bl	8008e30 <mem_cpy>
 800bcb2:	e020      	b.n	800bcf6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800bcba:	f005 fb87 	bl	80113cc <get_fattime>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f7fd f888 	bl	8008dd8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	3316      	adds	r3, #22
 800bccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcce:	b292      	uxth	r2, r2
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fd f865 	bl	8008da2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	3324      	adds	r3, #36	; 0x24
 800bcdc:	2280      	movs	r2, #128	; 0x80
 800bcde:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	3326      	adds	r3, #38	; 0x26
 800bce4:	2229      	movs	r2, #41	; 0x29
 800bce6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	332b      	adds	r3, #43	; 0x2b
 800bcec:	2213      	movs	r2, #19
 800bcee:	496a      	ldr	r1, [pc, #424]	; (800be98 <f_mkfs+0x718>)
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fd f89d 	bl	8008e30 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcfc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd f84e 	bl	8008da2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800bd06:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd10:	f7fc ffce 	bl	8008cb0 <disk_write>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <f_mkfs+0x59e>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e156      	b.n	800bfcc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800bd1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d140      	bne.n	800bda8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	1d9a      	adds	r2, r3, #6
 800bd2a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd2e:	2301      	movs	r3, #1
 800bd30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd32:	f7fc ffbd 	bl	8008cb0 <disk_write>
			mem_set(buf, 0, ss);
 800bd36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd38:	461a      	mov	r2, r3
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3e:	f7fd f898 	bl	8008e72 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800bd42:	4956      	ldr	r1, [pc, #344]	; (800be9c <f_mkfs+0x71c>)
 800bd44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd46:	f7fd f847 	bl	8008dd8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd50:	4953      	ldr	r1, [pc, #332]	; (800bea0 <f_mkfs+0x720>)
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd f840 	bl	8008dd8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7fd f837 	bl	8008dd8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bd70:	2102      	movs	r1, #2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fd f830 	bl	8008dd8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fd f80d 	bl	8008da2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	1dda      	adds	r2, r3, #7
 800bd8c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd90:	2301      	movs	r3, #1
 800bd92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd94:	f7fc ff8c 	bl	8008cb0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bda0:	2301      	movs	r3, #1
 800bda2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bda4:	f7fc ff84 	bl	8008cb0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800bda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdaa:	2100      	movs	r1, #0
 800bdac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdae:	f7fd f860 	bl	8008e72 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800bdb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdb4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdba:	e04b      	b.n	800be54 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800bdbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d113      	bne.n	800bdec <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800bdc4:	f06f 0107 	mvn.w	r1, #7
 800bdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdca:	f7fd f805 	bl	8008dd8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	f04f 31ff 	mov.w	r1, #4294967295
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fc fffe 	bl	8008dd8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	3308      	adds	r3, #8
 800bde0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fc fff7 	bl	8008dd8 <st_dword>
 800bdea:	e00b      	b.n	800be04 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800bdec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d101      	bne.n	800bdf8 <f_mkfs+0x678>
 800bdf4:	4b2b      	ldr	r3, [pc, #172]	; (800bea4 <f_mkfs+0x724>)
 800bdf6:	e001      	b.n	800bdfc <f_mkfs+0x67c>
 800bdf8:	f06f 0307 	mvn.w	r3, #7
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be00:	f7fc ffea 	bl	8008dd8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800be04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be06:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800be08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	4293      	cmp	r3, r2
 800be0e:	bf28      	it	cs
 800be10:	4613      	movcs	r3, r2
 800be12:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800be14:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800be18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be1e:	f7fc ff47 	bl	8008cb0 <disk_write>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <f_mkfs+0x6ac>
 800be28:	2301      	movs	r3, #1
 800be2a:	e0cf      	b.n	800bfcc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800be2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be2e:	461a      	mov	r2, r3
 800be30:	2100      	movs	r1, #0
 800be32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be34:	f7fd f81d 	bl	8008e72 <mem_set>
				sect += n; nsect -= n;
 800be38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be3c:	4413      	add	r3, r2
 800be3e:	667b      	str	r3, [r7, #100]	; 0x64
 800be40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800be48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1dc      	bne.n	800be08 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800be4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be50:	3301      	adds	r3, #1
 800be52:	64bb      	str	r3, [r7, #72]	; 0x48
 800be54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be58:	429a      	cmp	r2, r3
 800be5a:	d3af      	bcc.n	800bdbc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800be5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800be60:	2b03      	cmp	r3, #3
 800be62:	d101      	bne.n	800be68 <f_mkfs+0x6e8>
 800be64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be66:	e000      	b.n	800be6a <f_mkfs+0x6ea>
 800be68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be6a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800be6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	4293      	cmp	r3, r2
 800be72:	bf28      	it	cs
 800be74:	4613      	movcs	r3, r2
 800be76:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800be78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800be7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be82:	f7fc ff15 	bl	8008cb0 <disk_write>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00d      	beq.n	800bea8 <f_mkfs+0x728>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e09d      	b.n	800bfcc <f_mkfs+0x84c>
 800be90:	08016f88 	.word	0x08016f88
 800be94:	08016f94 	.word	0x08016f94
 800be98:	08016fa8 	.word	0x08016fa8
 800be9c:	41615252 	.word	0x41615252
 800bea0:	61417272 	.word	0x61417272
 800bea4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800bea8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800beaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beac:	4413      	add	r3, r2
 800beae:	667b      	str	r3, [r7, #100]	; 0x64
 800beb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800beb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800beb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1d6      	bne.n	800be6c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800bebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d103      	bne.n	800bece <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800bec6:	230c      	movs	r3, #12
 800bec8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800becc:	e010      	b.n	800bef0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed4:	d303      	bcc.n	800bede <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800bed6:	2306      	movs	r3, #6
 800bed8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800bedc:	e008      	b.n	800bef0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800bede:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d101      	bne.n	800beea <f_mkfs+0x76a>
 800bee6:	2304      	movs	r3, #4
 800bee8:	e000      	b.n	800beec <f_mkfs+0x76c>
 800beea:	2301      	movs	r3, #1
 800beec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800bef0:	7afb      	ldrb	r3, [r7, #11]
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d15b      	bne.n	800bfb2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800befa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800befc:	461a      	mov	r2, r3
 800befe:	2100      	movs	r1, #0
 800bf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf02:	f7fc ffb6 	bl	8008e72 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf0c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fc ff46 	bl	8008da2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bf1c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	2200      	movs	r2, #0
 800bf22:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	3301      	adds	r3, #1
 800bf28:	2201      	movs	r2, #1
 800bf2a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	3302      	adds	r3, #2
 800bf30:	2201      	movs	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	3303      	adds	r3, #3
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800bf44:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	441a      	add	r2, r3
 800bf4c:	4b21      	ldr	r3, [pc, #132]	; (800bfd4 <f_mkfs+0x854>)
 800bf4e:	fba3 1302 	umull	r1, r3, r3, r2
 800bf52:	1ad2      	subs	r2, r2, r3
 800bf54:	0852      	lsrs	r2, r2, #1
 800bf56:	4413      	add	r3, r2
 800bf58:	0b5b      	lsrs	r3, r3, #13
 800bf5a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	3305      	adds	r3, #5
 800bf60:	22fe      	movs	r2, #254	; 0xfe
 800bf62:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	3306      	adds	r3, #6
 800bf68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf6a:	0892      	lsrs	r2, r2, #2
 800bf6c:	b2d2      	uxtb	r2, r2
 800bf6e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	3307      	adds	r3, #7
 800bf7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf7c:	b2d2      	uxtb	r2, r2
 800bf7e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	3308      	adds	r3, #8
 800bf84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fc ff26 	bl	8008dd8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	330c      	adds	r3, #12
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4611      	mov	r1, r2
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fc ff1f 	bl	8008dd8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800bf9a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfa4:	f7fc fe84 	bl	8008cb0 <disk_write>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <f_mkfs+0x832>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e00c      	b.n	800bfcc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800bfb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2100      	movs	r1, #0
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fc fe98 	bl	8008cf0 <disk_ioctl>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <f_mkfs+0x84a>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e000      	b.n	800bfcc <f_mkfs+0x84c>

	return FR_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3774      	adds	r7, #116	; 0x74
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd90      	pop	{r4, r7, pc}
 800bfd4:	0515565b 	.word	0x0515565b

0800bfd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bfee:	4b1f      	ldr	r3, [pc, #124]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800bff0:	7a5b      	ldrb	r3, [r3, #9]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d131      	bne.n	800c05c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bff8:	4b1c      	ldr	r3, [pc, #112]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800bffa:	7a5b      	ldrb	r3, [r3, #9]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	461a      	mov	r2, r3
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c002:	2100      	movs	r1, #0
 800c004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c006:	4b19      	ldr	r3, [pc, #100]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c008:	7a5b      	ldrb	r3, [r3, #9]
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	4a17      	ldr	r2, [pc, #92]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c016:	4b15      	ldr	r3, [pc, #84]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c018:	7a5b      	ldrb	r3, [r3, #9]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	461a      	mov	r2, r3
 800c01e:	4b13      	ldr	r3, [pc, #76]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c020:	4413      	add	r3, r2
 800c022:	79fa      	ldrb	r2, [r7, #7]
 800c024:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c028:	7a5b      	ldrb	r3, [r3, #9]
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	b2d1      	uxtb	r1, r2
 800c030:	4a0e      	ldr	r2, [pc, #56]	; (800c06c <FATFS_LinkDriverEx+0x94>)
 800c032:	7251      	strb	r1, [r2, #9]
 800c034:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c036:	7dbb      	ldrb	r3, [r7, #22]
 800c038:	3330      	adds	r3, #48	; 0x30
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	3301      	adds	r3, #1
 800c044:	223a      	movs	r2, #58	; 0x3a
 800c046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	3302      	adds	r3, #2
 800c04c:	222f      	movs	r2, #47	; 0x2f
 800c04e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	3303      	adds	r3, #3
 800c054:	2200      	movs	r2, #0
 800c056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	371c      	adds	r7, #28
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	20000338 	.word	0x20000338

0800c070 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c07a:	2200      	movs	r2, #0
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ffaa 	bl	800bfd8 <FATFS_LinkDriverEx>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800c0a4:	4b15      	ldr	r3, [pc, #84]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0a6:	7a5b      	ldrb	r3, [r3, #9]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01e      	beq.n	800c0ec <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	3b30      	subs	r3, #48	; 0x30
 800c0b4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	4a10      	ldr	r2, [pc, #64]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d013      	beq.n	800c0ec <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	4a0d      	ldr	r2, [pc, #52]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0d4:	4413      	add	r3, r2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800c0da:	4b08      	ldr	r3, [pc, #32]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0dc:	7a5b      	ldrb	r3, [r3, #9]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <FATFS_UnLinkDriverEx+0x6c>)
 800c0e6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20000338 	.word	0x20000338

0800c100 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800c108:	2100      	movs	r1, #0
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff ffc0 	bl	800c090 <FATFS_UnLinkDriverEx>
 800c110:	4603      	mov	r3, r0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	4603      	mov	r3, r0
 800c122:	6039      	str	r1, [r7, #0]
 800c124:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 800c126:	2300      	movs	r3, #0
 800c128:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c12a:	f107 0308 	add.w	r3, r7, #8
 800c12e:	2101      	movs	r1, #1
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f8a8 	bl	800c286 <osSemaphoreCreate>
 800c136:	4602      	mov	r2, r0
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	bf14      	ite	ne
 800c144:	2301      	movne	r3, #1
 800c146:	2300      	moveq	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	60fb      	str	r3, [r7, #12]

    return ret;
 800c14c:	68fb      	ldr	r3, [r7, #12]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f936 	bl	800c3d0 <osSemaphoreDelete>
    return 1;
 800c164:	2301      	movs	r3, #1
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c17a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f8a0 	bl	800c2c4 <osSemaphoreWait>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <ff_req_grant+0x20>
  {
    ret = 1;
 800c18a:	2301      	movs	r3, #1
 800c18c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c18e:	68fb      	ldr	r3, [r7, #12]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f8df 	bl	800c364 <osSemaphoreRelease>
}
 800c1a6:	bf00      	nop
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b085      	sub	sp, #20
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c1bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1c0:	2b84      	cmp	r3, #132	; 0x84
 800c1c2:	d005      	beq.n	800c1d0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c1c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3303      	adds	r3, #3
 800c1ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e4:	f3ef 8305 	mrs	r3, IPSR
 800c1e8:	607b      	str	r3, [r7, #4]
  return(result);
 800c1ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bf14      	ite	ne
 800c1f0:	2301      	movne	r3, #1
 800c1f2:	2300      	moveq	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c206:	f001 fda3 	bl	800dd50 <vTaskStartScheduler>
  
  return osOK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c212:	b087      	sub	sp, #28
 800c214:	af02      	add	r7, sp, #8
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685c      	ldr	r4, [r3, #4]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c226:	b29e      	uxth	r6, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff ffbd 	bl	800c1ae <makeFreeRtosPriority>
 800c234:	4602      	mov	r2, r0
 800c236:	f107 030c 	add.w	r3, r7, #12
 800c23a:	9301      	str	r3, [sp, #4]
 800c23c:	9200      	str	r2, [sp, #0]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	4632      	mov	r2, r6
 800c242:	4629      	mov	r1, r5
 800c244:	4620      	mov	r0, r4
 800c246:	f001 fc21 	bl	800da8c <xTaskCreate>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d001      	beq.n	800c254 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	e000      	b.n	800c256 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800c254:	68fb      	ldr	r3, [r7, #12]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c25e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b084      	sub	sp, #16
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <osDelay+0x16>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	e000      	b.n	800c276 <osDelay+0x18>
 800c274:	2301      	movs	r3, #1
 800c276:	4618      	mov	r0, r3
 800c278:	f001 fd34 	bl	800dce4 <vTaskDelay>
  
  return osOK;
 800c27c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c286:	b580      	push	{r7, lr}
 800c288:	b084      	sub	sp, #16
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d110      	bne.n	800c2b8 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800c296:	2203      	movs	r2, #3
 800c298:	2100      	movs	r1, #0
 800c29a:	2001      	movs	r0, #1
 800c29c:	f000 fe78 	bl	800cf90 <xQueueGenericCreate>
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d005      	beq.n	800c2b4 <osSemaphoreCreate+0x2e>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 fec8 	bl	800d044 <xQueueGenericSend>
    return sema;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	e000      	b.n	800c2ba <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800c2b8:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c2d8:	2380      	movs	r3, #128	; 0x80
 800c2da:	e03c      	b.n	800c356 <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e6:	d103      	bne.n	800c2f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	e009      	b.n	800c304 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d006      	beq.n	800c304 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <osSemaphoreWait+0x40>
      ticks = 1;
 800c300:	2301      	movs	r3, #1
 800c302:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c304:	f7ff ff6b 	bl	800c1de <inHandlerMode>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d017      	beq.n	800c33e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c30e:	f107 0308 	add.w	r3, r7, #8
 800c312:	461a      	mov	r2, r3
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 f9dc 	bl	800d6d4 <xQueueReceiveFromISR>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d001      	beq.n	800c326 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c322:	23ff      	movs	r3, #255	; 0xff
 800c324:	e017      	b.n	800c356 <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d013      	beq.n	800c354 <osSemaphoreWait+0x90>
 800c32c:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <osSemaphoreWait+0x9c>)
 800c32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	e00a      	b.n	800c354 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c33e:	2300      	movs	r3, #0
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	2100      	movs	r1, #0
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 f8ad 	bl	800d4a4 <xQueueGenericReceive>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d001      	beq.n	800c354 <osSemaphoreWait+0x90>
    return osErrorOS;
 800c350:	23ff      	movs	r3, #255	; 0xff
 800c352:	e000      	b.n	800c356 <osSemaphoreWait+0x92>
  }
  
  return osOK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	e000ed04 	.word	0xe000ed04

0800c364 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c370:	2300      	movs	r3, #0
 800c372:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c374:	f7ff ff33 	bl	800c1de <inHandlerMode>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d016      	beq.n	800c3ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c37e:	f107 0308 	add.w	r3, r7, #8
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fffb 	bl	800d380 <xQueueGiveFromISR>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d001      	beq.n	800c394 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c390:	23ff      	movs	r3, #255	; 0xff
 800c392:	e017      	b.n	800c3c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d013      	beq.n	800c3c2 <osSemaphoreRelease+0x5e>
 800c39a:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <osSemaphoreRelease+0x68>)
 800c39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	e00a      	b.n	800c3c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fe46 	bl	800d044 <xQueueGenericSend>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d001      	beq.n	800c3c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c3be:	23ff      	movs	r3, #255	; 0xff
 800c3c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c3d8:	f7ff ff01 	bl	800c1de <inHandlerMode>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c3e2:	2382      	movs	r3, #130	; 0x82
 800c3e4:	e003      	b.n	800c3ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f001 f9f7 	bl	800d7da <vQueueDelete>

  return osOK; 
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	4619      	mov	r1, r3
 800c40c:	f000 fdc0 	bl	800cf90 <xQueueGenericCreate>
 800c410:	4603      	mov	r3, r0
#endif
}
 800c412:	4618      	mov	r0, r3
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c428:	2300      	movs	r3, #0
 800c42a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <osMessagePut+0x1e>
    ticks = 1;
 800c436:	2301      	movs	r3, #1
 800c438:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c43a:	f7ff fed0 	bl	800c1de <inHandlerMode>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d018      	beq.n	800c476 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c444:	f107 0210 	add.w	r2, r7, #16
 800c448:	f107 0108 	add.w	r1, r7, #8
 800c44c:	2300      	movs	r3, #0
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f000 fefa 	bl	800d248 <xQueueGenericSendFromISR>
 800c454:	4603      	mov	r3, r0
 800c456:	2b01      	cmp	r3, #1
 800c458:	d001      	beq.n	800c45e <osMessagePut+0x42>
      return osErrorOS;
 800c45a:	23ff      	movs	r3, #255	; 0xff
 800c45c:	e018      	b.n	800c490 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d014      	beq.n	800c48e <osMessagePut+0x72>
 800c464:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <osMessagePut+0x7c>)
 800c466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	e00b      	b.n	800c48e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c476:	f107 0108 	add.w	r1, r7, #8
 800c47a:	2300      	movs	r3, #0
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 fde0 	bl	800d044 <xQueueGenericSend>
 800c484:	4603      	mov	r3, r0
 800c486:	2b01      	cmp	r3, #1
 800c488:	d001      	beq.n	800c48e <osMessagePut+0x72>
      return osErrorOS;
 800c48a:	23ff      	movs	r3, #255	; 0xff
 800c48c:	e000      	b.n	800c490 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3718      	adds	r7, #24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	e000ed04 	.word	0xe000ed04

0800c49c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c49c:	b590      	push	{r4, r7, lr}
 800c49e:	b08b      	sub	sp, #44	; 0x2c
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c4b6:	2380      	movs	r3, #128	; 0x80
 800c4b8:	617b      	str	r3, [r7, #20]
    return event;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	461c      	mov	r4, r3
 800c4be:	f107 0314 	add.w	r3, r7, #20
 800c4c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c4ca:	e054      	b.n	800c576 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4da:	d103      	bne.n	800c4e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4e2:	e009      	b.n	800c4f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d006      	beq.n	800c4f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <osMessageGet+0x5c>
      ticks = 1;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c4f8:	f7ff fe71 	bl	800c1de <inHandlerMode>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d01c      	beq.n	800c53c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c502:	f107 0220 	add.w	r2, r7, #32
 800c506:	f107 0314 	add.w	r3, r7, #20
 800c50a:	3304      	adds	r3, #4
 800c50c:	4619      	mov	r1, r3
 800c50e:	68b8      	ldr	r0, [r7, #8]
 800c510:	f001 f8e0 	bl	800d6d4 <xQueueReceiveFromISR>
 800c514:	4603      	mov	r3, r0
 800c516:	2b01      	cmp	r3, #1
 800c518:	d102      	bne.n	800c520 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c51a:	2310      	movs	r3, #16
 800c51c:	617b      	str	r3, [r7, #20]
 800c51e:	e001      	b.n	800c524 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c520:	2300      	movs	r3, #0
 800c522:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d01d      	beq.n	800c566 <osMessageGet+0xca>
 800c52a:	4b15      	ldr	r3, [pc, #84]	; (800c580 <osMessageGet+0xe4>)
 800c52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	e014      	b.n	800c566 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c53c:	f107 0314 	add.w	r3, r7, #20
 800c540:	1d19      	adds	r1, r3, #4
 800c542:	2300      	movs	r3, #0
 800c544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c546:	68b8      	ldr	r0, [r7, #8]
 800c548:	f000 ffac 	bl	800d4a4 <xQueueGenericReceive>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d102      	bne.n	800c558 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c552:	2310      	movs	r3, #16
 800c554:	617b      	str	r3, [r7, #20]
 800c556:	e006      	b.n	800c566 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <osMessageGet+0xc6>
 800c55e:	2300      	movs	r3, #0
 800c560:	e000      	b.n	800c564 <osMessageGet+0xc8>
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	461c      	mov	r4, r3
 800c56a:	f107 0314 	add.w	r3, r7, #20
 800c56e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	372c      	adds	r7, #44	; 0x2c
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd90      	pop	{r4, r7, pc}
 800c57e:	bf00      	nop
 800c580:	e000ed04 	.word	0xe000ed04

0800c584 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c588:	f001 ffda 	bl	800e540 <xTaskGetSchedulerState>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d001      	beq.n	800c596 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800c592:	f000 fc09 	bl	800cda8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c596:	bf00      	nop
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5a8:	f001 fc1c 	bl	800dde4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5ac:	4b5a      	ldr	r3, [pc, #360]	; (800c718 <pvPortMalloc+0x17c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d101      	bne.n	800c5b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5b4:	f000 f916 	bl	800c7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5b8:	4b58      	ldr	r3, [pc, #352]	; (800c71c <pvPortMalloc+0x180>)
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4013      	ands	r3, r2
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f040 8090 	bne.w	800c6e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01e      	beq.n	800c60a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c5cc:	2208      	movs	r2, #8
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d015      	beq.n	800c60a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f023 0307 	bic.w	r3, r3, #7
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f003 0307 	and.w	r3, r3, #7
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	b672      	cpsid	i
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	b662      	cpsie	i
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e7fe      	b.n	800c608 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d06a      	beq.n	800c6e6 <pvPortMalloc+0x14a>
 800c610:	4b43      	ldr	r3, [pc, #268]	; (800c720 <pvPortMalloc+0x184>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	429a      	cmp	r2, r3
 800c618:	d865      	bhi.n	800c6e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c61a:	4b42      	ldr	r3, [pc, #264]	; (800c724 <pvPortMalloc+0x188>)
 800c61c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c61e:	4b41      	ldr	r3, [pc, #260]	; (800c724 <pvPortMalloc+0x188>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c624:	e004      	b.n	800c630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	429a      	cmp	r2, r3
 800c638:	d203      	bcs.n	800c642 <pvPortMalloc+0xa6>
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1f1      	bne.n	800c626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c642:	4b35      	ldr	r3, [pc, #212]	; (800c718 <pvPortMalloc+0x17c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c648:	429a      	cmp	r2, r3
 800c64a:	d04c      	beq.n	800c6e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2208      	movs	r2, #8
 800c652:	4413      	add	r3, r2
 800c654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	1ad2      	subs	r2, r2, r3
 800c666:	2308      	movs	r3, #8
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d920      	bls.n	800c6b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4413      	add	r3, r2
 800c674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	f003 0307 	and.w	r3, r3, #7
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <pvPortMalloc+0xfc>
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	b672      	cpsid	i
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	b662      	cpsie	i
 800c694:	613b      	str	r3, [r7, #16]
 800c696:	e7fe      	b.n	800c696 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	1ad2      	subs	r2, r2, r3
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6aa:	69b8      	ldr	r0, [r7, #24]
 800c6ac:	f000 f8fc 	bl	800c8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6b0:	4b1b      	ldr	r3, [pc, #108]	; (800c720 <pvPortMalloc+0x184>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	4a19      	ldr	r2, [pc, #100]	; (800c720 <pvPortMalloc+0x184>)
 800c6bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c6be:	4b18      	ldr	r3, [pc, #96]	; (800c720 <pvPortMalloc+0x184>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	4b19      	ldr	r3, [pc, #100]	; (800c728 <pvPortMalloc+0x18c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d203      	bcs.n	800c6d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6ca:	4b15      	ldr	r3, [pc, #84]	; (800c720 <pvPortMalloc+0x184>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a16      	ldr	r2, [pc, #88]	; (800c728 <pvPortMalloc+0x18c>)
 800c6d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	4b11      	ldr	r3, [pc, #68]	; (800c71c <pvPortMalloc+0x180>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6e6:	f001 fb8b 	bl	800de00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	f003 0307 	and.w	r3, r3, #7
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <pvPortMalloc+0x170>
 800c6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f8:	b672      	cpsid	i
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	b662      	cpsie	i
 800c708:	60fb      	str	r3, [r7, #12]
 800c70a:	e7fe      	b.n	800c70a <pvPortMalloc+0x16e>
	return pvReturn;
 800c70c:	69fb      	ldr	r3, [r7, #28]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3728      	adds	r7, #40	; 0x28
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20003f4c 	.word	0x20003f4c
 800c71c:	20003f58 	.word	0x20003f58
 800c720:	20003f50 	.word	0x20003f50
 800c724:	20003f44 	.word	0x20003f44
 800c728:	20003f54 	.word	0x20003f54

0800c72c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d04a      	beq.n	800c7d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c73e:	2308      	movs	r3, #8
 800c740:	425b      	negs	r3, r3
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	4413      	add	r3, r2
 800c746:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	4b22      	ldr	r3, [pc, #136]	; (800c7dc <vPortFree+0xb0>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4013      	ands	r3, r2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10b      	bne.n	800c772 <vPortFree+0x46>
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	b672      	cpsid	i
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	b662      	cpsie	i
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	e7fe      	b.n	800c770 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00b      	beq.n	800c792 <vPortFree+0x66>
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	b672      	cpsid	i
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	b662      	cpsie	i
 800c78e:	60bb      	str	r3, [r7, #8]
 800c790:	e7fe      	b.n	800c790 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	4b11      	ldr	r3, [pc, #68]	; (800c7dc <vPortFree+0xb0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4013      	ands	r3, r2
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d019      	beq.n	800c7d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d115      	bne.n	800c7d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	685a      	ldr	r2, [r3, #4]
 800c7ac:	4b0b      	ldr	r3, [pc, #44]	; (800c7dc <vPortFree+0xb0>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	43db      	mvns	r3, r3
 800c7b2:	401a      	ands	r2, r3
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c7b8:	f001 fb14 	bl	800dde4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	685a      	ldr	r2, [r3, #4]
 800c7c0:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <vPortFree+0xb4>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	4a06      	ldr	r2, [pc, #24]	; (800c7e0 <vPortFree+0xb4>)
 800c7c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7ca:	6938      	ldr	r0, [r7, #16]
 800c7cc:	f000 f86c 	bl	800c8a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c7d0:	f001 fb16 	bl	800de00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7d4:	bf00      	nop
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	20003f58 	.word	0x20003f58
 800c7e0:	20003f50 	.word	0x20003f50

0800c7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7f0:	4b27      	ldr	r3, [pc, #156]	; (800c890 <prvHeapInit+0xac>)
 800c7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00c      	beq.n	800c818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3307      	adds	r3, #7
 800c802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 0307 	bic.w	r3, r3, #7
 800c80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	4a1f      	ldr	r2, [pc, #124]	; (800c890 <prvHeapInit+0xac>)
 800c814:	4413      	add	r3, r2
 800c816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c81c:	4a1d      	ldr	r2, [pc, #116]	; (800c894 <prvHeapInit+0xb0>)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c822:	4b1c      	ldr	r3, [pc, #112]	; (800c894 <prvHeapInit+0xb0>)
 800c824:	2200      	movs	r2, #0
 800c826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	4413      	add	r3, r2
 800c82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c830:	2208      	movs	r2, #8
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	1a9b      	subs	r3, r3, r2
 800c836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f023 0307 	bic.w	r3, r3, #7
 800c83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	4a15      	ldr	r2, [pc, #84]	; (800c898 <prvHeapInit+0xb4>)
 800c844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c846:	4b14      	ldr	r3, [pc, #80]	; (800c898 <prvHeapInit+0xb4>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2200      	movs	r2, #0
 800c84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c84e:	4b12      	ldr	r3, [pc, #72]	; (800c898 <prvHeapInit+0xb4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	1ad2      	subs	r2, r2, r3
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c864:	4b0c      	ldr	r3, [pc, #48]	; (800c898 <prvHeapInit+0xb4>)
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	4a0a      	ldr	r2, [pc, #40]	; (800c89c <prvHeapInit+0xb8>)
 800c872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <prvHeapInit+0xbc>)
 800c87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c87c:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <prvHeapInit+0xc0>)
 800c87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c882:	601a      	str	r2, [r3, #0]
}
 800c884:	bf00      	nop
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr
 800c890:	20000344 	.word	0x20000344
 800c894:	20003f44 	.word	0x20003f44
 800c898:	20003f4c 	.word	0x20003f4c
 800c89c:	20003f54 	.word	0x20003f54
 800c8a0:	20003f50 	.word	0x20003f50
 800c8a4:	20003f58 	.word	0x20003f58

0800c8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8b0:	4b28      	ldr	r3, [pc, #160]	; (800c954 <prvInsertBlockIntoFreeList+0xac>)
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	e002      	b.n	800c8bc <prvInsertBlockIntoFreeList+0x14>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d3f7      	bcc.n	800c8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d108      	bne.n	800c8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	441a      	add	r2, r3
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	441a      	add	r2, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d118      	bne.n	800c930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	4b15      	ldr	r3, [pc, #84]	; (800c958 <prvInsertBlockIntoFreeList+0xb0>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	429a      	cmp	r2, r3
 800c908:	d00d      	beq.n	800c926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685a      	ldr	r2, [r3, #4]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	441a      	add	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	e008      	b.n	800c938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c926:	4b0c      	ldr	r3, [pc, #48]	; (800c958 <prvInsertBlockIntoFreeList+0xb0>)
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	e003      	b.n	800c938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d002      	beq.n	800c946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c946:	bf00      	nop
 800c948:	3714      	adds	r7, #20
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	20003f44 	.word	0x20003f44
 800c958:	20003f4c 	.word	0x20003f4c

0800c95c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f103 0208 	add.w	r2, r3, #8
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f04f 32ff 	mov.w	r2, #4294967295
 800c974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f103 0208 	add.w	r2, r3, #8
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f103 0208 	add.w	r2, r3, #8
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9aa:	bf00      	nop
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	b085      	sub	sp, #20
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	689a      	ldr	r2, [r3, #8]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	683a      	ldr	r2, [r7, #0]
 800c9da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	601a      	str	r2, [r3, #0]
}
 800c9f2:	bf00      	nop
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9fe:	b480      	push	{r7}
 800ca00:	b085      	sub	sp, #20
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca14:	d103      	bne.n	800ca1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	e00c      	b.n	800ca38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	3308      	adds	r3, #8
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e002      	b.n	800ca2c <vListInsert+0x2e>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d9f6      	bls.n	800ca26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	601a      	str	r2, [r3, #0]
}
 800ca64:	bf00      	nop
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	6892      	ldr	r2, [r2, #8]
 800ca86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6852      	ldr	r2, [r2, #4]
 800ca90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d103      	bne.n	800caa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	689a      	ldr	r2, [r3, #8]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	1e5a      	subs	r2, r3, #1
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3714      	adds	r7, #20
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3b04      	subs	r3, #4
 800cad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cadc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3b04      	subs	r3, #4
 800cae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	f023 0201 	bic.w	r2, r3, #1
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3b04      	subs	r3, #4
 800caf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800caf4:	4a0c      	ldr	r2, [pc, #48]	; (800cb28 <pxPortInitialiseStack+0x64>)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3b14      	subs	r3, #20
 800cafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f06f 0202 	mvn.w	r2, #2
 800cb12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	3b20      	subs	r3, #32
 800cb18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	0800cb2d 	.word	0x0800cb2d

0800cb2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb32:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <prvTaskExitError+0x40>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3a:	d00b      	beq.n	800cb54 <prvTaskExitError+0x28>
 800cb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb40:	b672      	cpsid	i
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	b662      	cpsie	i
 800cb50:	607b      	str	r3, [r7, #4]
 800cb52:	e7fe      	b.n	800cb52 <prvTaskExitError+0x26>
 800cb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb58:	b672      	cpsid	i
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	b662      	cpsie	i
 800cb68:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800cb6a:	e7fe      	b.n	800cb6a <prvTaskExitError+0x3e>
 800cb6c:	20000014 	.word	0x20000014

0800cb70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <pxCurrentTCBConst2>)
 800cb72:	6819      	ldr	r1, [r3, #0]
 800cb74:	6808      	ldr	r0, [r1, #0]
 800cb76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7a:	f380 8809 	msr	PSP, r0
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f04f 0000 	mov.w	r0, #0
 800cb86:	f380 8811 	msr	BASEPRI, r0
 800cb8a:	4770      	bx	lr
 800cb8c:	f3af 8000 	nop.w

0800cb90 <pxCurrentTCBConst2>:
 800cb90:	20003f64 	.word	0x20003f64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb94:	bf00      	nop
 800cb96:	bf00      	nop

0800cb98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cb98:	4806      	ldr	r0, [pc, #24]	; (800cbb4 <prvPortStartFirstTask+0x1c>)
 800cb9a:	6800      	ldr	r0, [r0, #0]
 800cb9c:	6800      	ldr	r0, [r0, #0]
 800cb9e:	f380 8808 	msr	MSP, r0
 800cba2:	b662      	cpsie	i
 800cba4:	b661      	cpsie	f
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	df00      	svc	0
 800cbb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbb2:	bf00      	nop
 800cbb4:	e000ed08 	.word	0xe000ed08

0800cbb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbbe:	4b2c      	ldr	r3, [pc, #176]	; (800cc70 <xPortStartScheduler+0xb8>)
 800cbc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	22ff      	movs	r2, #255	; 0xff
 800cbce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	4b24      	ldr	r3, [pc, #144]	; (800cc74 <xPortStartScheduler+0xbc>)
 800cbe4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbe6:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <xPortStartScheduler+0xc0>)
 800cbe8:	2207      	movs	r2, #7
 800cbea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbec:	e009      	b.n	800cc02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cbee:	4b22      	ldr	r3, [pc, #136]	; (800cc78 <xPortStartScheduler+0xc0>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	4a20      	ldr	r2, [pc, #128]	; (800cc78 <xPortStartScheduler+0xc0>)
 800cbf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbf8:	79fb      	ldrb	r3, [r7, #7]
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc02:	79fb      	ldrb	r3, [r7, #7]
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0a:	2b80      	cmp	r3, #128	; 0x80
 800cc0c:	d0ef      	beq.n	800cbee <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc0e:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <xPortStartScheduler+0xc0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	021b      	lsls	r3, r3, #8
 800cc14:	4a18      	ldr	r2, [pc, #96]	; (800cc78 <xPortStartScheduler+0xc0>)
 800cc16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc18:	4b17      	ldr	r3, [pc, #92]	; (800cc78 <xPortStartScheduler+0xc0>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc20:	4a15      	ldr	r2, [pc, #84]	; (800cc78 <xPortStartScheduler+0xc0>)
 800cc22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc2c:	4a13      	ldr	r2, [pc, #76]	; (800cc7c <xPortStartScheduler+0xc4>)
 800cc2e:	4b13      	ldr	r3, [pc, #76]	; (800cc7c <xPortStartScheduler+0xc4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc38:	4a10      	ldr	r2, [pc, #64]	; (800cc7c <xPortStartScheduler+0xc4>)
 800cc3a:	4b10      	ldr	r3, [pc, #64]	; (800cc7c <xPortStartScheduler+0xc4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc44:	f000 f8d2 	bl	800cdec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc48:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <xPortStartScheduler+0xc8>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc4e:	f000 f8e9 	bl	800ce24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc52:	4a0c      	ldr	r2, [pc, #48]	; (800cc84 <xPortStartScheduler+0xcc>)
 800cc54:	4b0b      	ldr	r3, [pc, #44]	; (800cc84 <xPortStartScheduler+0xcc>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc5e:	f7ff ff9b 	bl	800cb98 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800cc62:	f7ff ff63 	bl	800cb2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	e000e400 	.word	0xe000e400
 800cc74:	20003f5c 	.word	0x20003f5c
 800cc78:	20003f60 	.word	0x20003f60
 800cc7c:	e000ed20 	.word	0xe000ed20
 800cc80:	20000014 	.word	0x20000014
 800cc84:	e000ef34 	.word	0xe000ef34

0800cc88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc92:	b672      	cpsid	i
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	b662      	cpsie	i
 800cca2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cca4:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <vPortEnterCritical+0x5c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	4a0e      	ldr	r2, [pc, #56]	; (800cce4 <vPortEnterCritical+0x5c>)
 800ccac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ccae:	4b0d      	ldr	r3, [pc, #52]	; (800cce4 <vPortEnterCritical+0x5c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d110      	bne.n	800ccd8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccb6:	4b0c      	ldr	r3, [pc, #48]	; (800cce8 <vPortEnterCritical+0x60>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <vPortEnterCritical+0x50>
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	b672      	cpsid	i
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	b662      	cpsie	i
 800ccd4:	603b      	str	r3, [r7, #0]
 800ccd6:	e7fe      	b.n	800ccd6 <vPortEnterCritical+0x4e>
	}
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	20000014 	.word	0x20000014
 800cce8:	e000ed04 	.word	0xe000ed04

0800ccec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccf2:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <vPortExitCritical+0x50>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10b      	bne.n	800cd12 <vPortExitCritical+0x26>
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	b672      	cpsid	i
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	b662      	cpsie	i
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	e7fe      	b.n	800cd10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800cd12:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <vPortExitCritical+0x50>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3b01      	subs	r3, #1
 800cd18:	4a08      	ldr	r2, [pc, #32]	; (800cd3c <vPortExitCritical+0x50>)
 800cd1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd1c:	4b07      	ldr	r3, [pc, #28]	; (800cd3c <vPortExitCritical+0x50>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d104      	bne.n	800cd2e <vPortExitCritical+0x42>
 800cd24:	2300      	movs	r3, #0
 800cd26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd2e:	bf00      	nop
 800cd30:	370c      	adds	r7, #12
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	20000014 	.word	0x20000014

0800cd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd40:	f3ef 8009 	mrs	r0, PSP
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	4b15      	ldr	r3, [pc, #84]	; (800cda0 <pxCurrentTCBConst>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	f01e 0f10 	tst.w	lr, #16
 800cd50:	bf08      	it	eq
 800cd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	6010      	str	r0, [r2, #0]
 800cd5c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800cd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd64:	b672      	cpsid	i
 800cd66:	f380 8811 	msr	BASEPRI, r0
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	b662      	cpsie	i
 800cd74:	f001 f9a0 	bl	800e0b8 <vTaskSwitchContext>
 800cd78:	f04f 0000 	mov.w	r0, #0
 800cd7c:	f380 8811 	msr	BASEPRI, r0
 800cd80:	bc08      	pop	{r3}
 800cd82:	6819      	ldr	r1, [r3, #0]
 800cd84:	6808      	ldr	r0, [r1, #0]
 800cd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8a:	f01e 0f10 	tst.w	lr, #16
 800cd8e:	bf08      	it	eq
 800cd90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd94:	f380 8809 	msr	PSP, r0
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop

0800cda0 <pxCurrentTCBConst>:
 800cda0:	20003f64 	.word	0x20003f64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop

0800cda8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	b672      	cpsid	i
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	b662      	cpsie	i
 800cdc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cdc4:	f001 f8ba 	bl	800df3c <xTaskIncrementTick>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d003      	beq.n	800cdd6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdce:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <xPortSysTickHandler+0x40>)
 800cdd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	e000ed04 	.word	0xe000ed04

0800cdec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdec:	b480      	push	{r7}
 800cdee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdf0:	4a08      	ldr	r2, [pc, #32]	; (800ce14 <vPortSetupTimerInterrupt+0x28>)
 800cdf2:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <vPortSetupTimerInterrupt+0x2c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4909      	ldr	r1, [pc, #36]	; (800ce1c <vPortSetupTimerInterrupt+0x30>)
 800cdf8:	fba1 1303 	umull	r1, r3, r1, r3
 800cdfc:	099b      	lsrs	r3, r3, #6
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <vPortSetupTimerInterrupt+0x34>)
 800ce04:	2207      	movs	r2, #7
 800ce06:	601a      	str	r2, [r3, #0]
}
 800ce08:	bf00      	nop
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	e000e014 	.word	0xe000e014
 800ce18:	2000003c 	.word	0x2000003c
 800ce1c:	10624dd3 	.word	0x10624dd3
 800ce20:	e000e010 	.word	0xe000e010

0800ce24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce34 <vPortEnableVFP+0x10>
 800ce28:	6801      	ldr	r1, [r0, #0]
 800ce2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce2e:	6001      	str	r1, [r0, #0]
 800ce30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce32:	bf00      	nop
 800ce34:	e000ed88 	.word	0xe000ed88

0800ce38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800ce3e:	f3ef 8305 	mrs	r3, IPSR
 800ce42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b0f      	cmp	r3, #15
 800ce48:	d915      	bls.n	800ce76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce4a:	4a18      	ldr	r2, [pc, #96]	; (800ceac <vPortValidateInterruptPriority+0x74>)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4413      	add	r3, r2
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce54:	4b16      	ldr	r3, [pc, #88]	; (800ceb0 <vPortValidateInterruptPriority+0x78>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	7afa      	ldrb	r2, [r7, #11]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d20b      	bcs.n	800ce76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	b672      	cpsid	i
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	b662      	cpsie	i
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	e7fe      	b.n	800ce74 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce76:	4b0f      	ldr	r3, [pc, #60]	; (800ceb4 <vPortValidateInterruptPriority+0x7c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce7e:	4b0e      	ldr	r3, [pc, #56]	; (800ceb8 <vPortValidateInterruptPriority+0x80>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d90b      	bls.n	800ce9e <vPortValidateInterruptPriority+0x66>
 800ce86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8a:	b672      	cpsid	i
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	b662      	cpsie	i
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	e7fe      	b.n	800ce9c <vPortValidateInterruptPriority+0x64>
	}
 800ce9e:	bf00      	nop
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	e000e3f0 	.word	0xe000e3f0
 800ceb0:	20003f5c 	.word	0x20003f5c
 800ceb4:	e000ed0c 	.word	0xe000ed0c
 800ceb8:	20003f60 	.word	0x20003f60

0800cebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10b      	bne.n	800cee8 <xQueueGenericReset+0x2c>
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	b672      	cpsid	i
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	b662      	cpsie	i
 800cee4:	60bb      	str	r3, [r7, #8]
 800cee6:	e7fe      	b.n	800cee6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800cee8:	f7ff fece 	bl	800cc88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef4:	68f9      	ldr	r1, [r7, #12]
 800cef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cef8:	fb01 f303 	mul.w	r3, r1, r3
 800cefc:	441a      	add	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	68f9      	ldr	r1, [r7, #12]
 800cf1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf1e:	fb01 f303 	mul.w	r3, r1, r3
 800cf22:	441a      	add	r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	22ff      	movs	r2, #255	; 0xff
 800cf2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	22ff      	movs	r2, #255	; 0xff
 800cf34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d114      	bne.n	800cf68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01a      	beq.n	800cf7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3310      	adds	r3, #16
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f001 f936 	bl	800e1bc <xTaskRemoveFromEventList>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d012      	beq.n	800cf7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf56:	4b0d      	ldr	r3, [pc, #52]	; (800cf8c <xQueueGenericReset+0xd0>)
 800cf58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	e009      	b.n	800cf7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	3310      	adds	r3, #16
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff fcf5 	bl	800c95c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3324      	adds	r3, #36	; 0x24
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff fcf0 	bl	800c95c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf7c:	f7ff feb6 	bl	800ccec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf80:	2301      	movs	r3, #1
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	e000ed04 	.word	0xe000ed04

0800cf90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10b      	bne.n	800cfbc <xQueueGenericCreate+0x2c>
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	b672      	cpsid	i
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	b662      	cpsie	i
 800cfb8:	613b      	str	r3, [r7, #16]
 800cfba:	e7fe      	b.n	800cfba <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d102      	bne.n	800cfc8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	61fb      	str	r3, [r7, #28]
 800cfc6:	e004      	b.n	800cfd2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	fb02 f303 	mul.w	r3, r2, r3
 800cfd0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	3348      	adds	r3, #72	; 0x48
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff fae0 	bl	800c59c <pvPortMalloc>
 800cfdc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00b      	beq.n	800cffc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	3348      	adds	r3, #72	; 0x48
 800cfe8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfea:	79fa      	ldrb	r2, [r7, #7]
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	4613      	mov	r3, r2
 800cff2:	697a      	ldr	r2, [r7, #20]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f000 f805 	bl	800d006 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800cffc:	69bb      	ldr	r3, [r7, #24]
	}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
 800d012:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d103      	bne.n	800d022 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	69ba      	ldr	r2, [r7, #24]
 800d01e:	601a      	str	r2, [r3, #0]
 800d020:	e002      	b.n	800d028 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d034:	2101      	movs	r1, #1
 800d036:	69b8      	ldr	r0, [r7, #24]
 800d038:	f7ff ff40 	bl	800cebc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d03c:	bf00      	nop
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08e      	sub	sp, #56	; 0x38
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d052:	2300      	movs	r3, #0
 800d054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10b      	bne.n	800d078 <xQueueGenericSend+0x34>
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	b672      	cpsid	i
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	b662      	cpsie	i
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28
 800d076:	e7fe      	b.n	800d076 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d103      	bne.n	800d086 <xQueueGenericSend+0x42>
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <xQueueGenericSend+0x46>
 800d086:	2301      	movs	r3, #1
 800d088:	e000      	b.n	800d08c <xQueueGenericSend+0x48>
 800d08a:	2300      	movs	r3, #0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10b      	bne.n	800d0a8 <xQueueGenericSend+0x64>
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	b672      	cpsid	i
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	b662      	cpsie	i
 800d0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800d0a6:	e7fe      	b.n	800d0a6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d103      	bne.n	800d0b6 <xQueueGenericSend+0x72>
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d101      	bne.n	800d0ba <xQueueGenericSend+0x76>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e000      	b.n	800d0bc <xQueueGenericSend+0x78>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10b      	bne.n	800d0d8 <xQueueGenericSend+0x94>
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	b672      	cpsid	i
 800d0c6:	f383 8811 	msr	BASEPRI, r3
 800d0ca:	f3bf 8f6f 	isb	sy
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	b662      	cpsie	i
 800d0d4:	623b      	str	r3, [r7, #32]
 800d0d6:	e7fe      	b.n	800d0d6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0d8:	f001 fa32 	bl	800e540 <xTaskGetSchedulerState>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <xQueueGenericSend+0xa4>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d101      	bne.n	800d0ec <xQueueGenericSend+0xa8>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e000      	b.n	800d0ee <xQueueGenericSend+0xaa>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d10b      	bne.n	800d10a <xQueueGenericSend+0xc6>
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	b672      	cpsid	i
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	b662      	cpsie	i
 800d106:	61fb      	str	r3, [r7, #28]
 800d108:	e7fe      	b.n	800d108 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d10a:	f7ff fdbd 	bl	800cc88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d116:	429a      	cmp	r2, r3
 800d118:	d302      	bcc.n	800d120 <xQueueGenericSend+0xdc>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d129      	bne.n	800d174 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	68b9      	ldr	r1, [r7, #8]
 800d124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d126:	f000 fb77 	bl	800d818 <prvCopyDataToQueue>
 800d12a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	2b00      	cmp	r3, #0
 800d132:	d010      	beq.n	800d156 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	3324      	adds	r3, #36	; 0x24
 800d138:	4618      	mov	r0, r3
 800d13a:	f001 f83f 	bl	800e1bc <xTaskRemoveFromEventList>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d013      	beq.n	800d16c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d144:	4b3f      	ldr	r3, [pc, #252]	; (800d244 <xQueueGenericSend+0x200>)
 800d146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	e00a      	b.n	800d16c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d15c:	4b39      	ldr	r3, [pc, #228]	; (800d244 <xQueueGenericSend+0x200>)
 800d15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d16c:	f7ff fdbe 	bl	800ccec <vPortExitCritical>
				return pdPASS;
 800d170:	2301      	movs	r3, #1
 800d172:	e063      	b.n	800d23c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d103      	bne.n	800d182 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d17a:	f7ff fdb7 	bl	800ccec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	e05c      	b.n	800d23c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800d188:	f107 0314 	add.w	r3, r7, #20
 800d18c:	4618      	mov	r0, r3
 800d18e:	f001 f879 	bl	800e284 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d192:	2301      	movs	r3, #1
 800d194:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d196:	f7ff fda9 	bl	800ccec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d19a:	f000 fe23 	bl	800dde4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d19e:	f7ff fd73 	bl	800cc88 <vPortEnterCritical>
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1a8:	b25b      	sxtb	r3, r3
 800d1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ae:	d103      	bne.n	800d1b8 <xQueueGenericSend+0x174>
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1be:	b25b      	sxtb	r3, r3
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c4:	d103      	bne.n	800d1ce <xQueueGenericSend+0x18a>
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ce:	f7ff fd8d 	bl	800ccec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1d2:	1d3a      	adds	r2, r7, #4
 800d1d4:	f107 0314 	add.w	r3, r7, #20
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f001 f878 	bl	800e2d0 <xTaskCheckForTimeOut>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d124      	bne.n	800d230 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e8:	f000 fc0e 	bl	800da08 <prvIsQueueFull>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d018      	beq.n	800d224 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 ffb8 	bl	800e170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d202:	f000 fb99 	bl	800d938 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d206:	f000 fdfb 	bl	800de00 <xTaskResumeAll>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f47f af7c 	bne.w	800d10a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d212:	4b0c      	ldr	r3, [pc, #48]	; (800d244 <xQueueGenericSend+0x200>)
 800d214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	e772      	b.n	800d10a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d226:	f000 fb87 	bl	800d938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d22a:	f000 fde9 	bl	800de00 <xTaskResumeAll>
 800d22e:	e76c      	b.n	800d10a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d232:	f000 fb81 	bl	800d938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d236:	f000 fde3 	bl	800de00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d23a:	2300      	movs	r3, #0
		}
	}
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3738      	adds	r7, #56	; 0x38
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	e000ed04 	.word	0xe000ed04

0800d248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b08e      	sub	sp, #56	; 0x38
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10b      	bne.n	800d278 <xQueueGenericSendFromISR+0x30>
 800d260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d264:	b672      	cpsid	i
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	b662      	cpsie	i
 800d274:	627b      	str	r3, [r7, #36]	; 0x24
 800d276:	e7fe      	b.n	800d276 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d103      	bne.n	800d286 <xQueueGenericSendFromISR+0x3e>
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <xQueueGenericSendFromISR+0x42>
 800d286:	2301      	movs	r3, #1
 800d288:	e000      	b.n	800d28c <xQueueGenericSendFromISR+0x44>
 800d28a:	2300      	movs	r3, #0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10b      	bne.n	800d2a8 <xQueueGenericSendFromISR+0x60>
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	b672      	cpsid	i
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	b662      	cpsie	i
 800d2a4:	623b      	str	r3, [r7, #32]
 800d2a6:	e7fe      	b.n	800d2a6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d103      	bne.n	800d2b6 <xQueueGenericSendFromISR+0x6e>
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d101      	bne.n	800d2ba <xQueueGenericSendFromISR+0x72>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e000      	b.n	800d2bc <xQueueGenericSendFromISR+0x74>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10b      	bne.n	800d2d8 <xQueueGenericSendFromISR+0x90>
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	b672      	cpsid	i
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	b662      	cpsie	i
 800d2d4:	61fb      	str	r3, [r7, #28]
 800d2d6:	e7fe      	b.n	800d2d6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2d8:	f7ff fdae 	bl	800ce38 <vPortValidateInterruptPriority>
	__asm volatile
 800d2dc:	f3ef 8211 	mrs	r2, BASEPRI
 800d2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e4:	b672      	cpsid	i
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	b662      	cpsie	i
 800d2f4:	61ba      	str	r2, [r7, #24]
 800d2f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d304:	429a      	cmp	r2, r3
 800d306:	d302      	bcc.n	800d30e <xQueueGenericSendFromISR+0xc6>
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d12c      	bne.n	800d368 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d318:	683a      	ldr	r2, [r7, #0]
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d31e:	f000 fa7b 	bl	800d818 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d322:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32a:	d112      	bne.n	800d352 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d330:	2b00      	cmp	r3, #0
 800d332:	d016      	beq.n	800d362 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	3324      	adds	r3, #36	; 0x24
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 ff3f 	bl	800e1bc <xTaskRemoveFromEventList>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00e      	beq.n	800d362 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00b      	beq.n	800d362 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2201      	movs	r2, #1
 800d34e:	601a      	str	r2, [r3, #0]
 800d350:	e007      	b.n	800d362 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d356:	3301      	adds	r3, #1
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	b25a      	sxtb	r2, r3
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d362:	2301      	movs	r3, #1
 800d364:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d366:	e001      	b.n	800d36c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d368:	2300      	movs	r3, #0
 800d36a:	637b      	str	r3, [r7, #52]	; 0x34
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3738      	adds	r7, #56	; 0x38
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b08e      	sub	sp, #56	; 0x38
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10b      	bne.n	800d3ac <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	b672      	cpsid	i
 800d39a:	f383 8811 	msr	BASEPRI, r3
 800d39e:	f3bf 8f6f 	isb	sy
 800d3a2:	f3bf 8f4f 	dsb	sy
 800d3a6:	b662      	cpsie	i
 800d3a8:	623b      	str	r3, [r7, #32]
 800d3aa:	e7fe      	b.n	800d3aa <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00b      	beq.n	800d3cc <xQueueGiveFromISR+0x4c>
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	b672      	cpsid	i
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	b662      	cpsie	i
 800d3c8:	61fb      	str	r3, [r7, #28]
 800d3ca:	e7fe      	b.n	800d3ca <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d103      	bne.n	800d3dc <xQueueGiveFromISR+0x5c>
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <xQueueGiveFromISR+0x60>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e000      	b.n	800d3e2 <xQueueGiveFromISR+0x62>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10b      	bne.n	800d3fe <xQueueGiveFromISR+0x7e>
 800d3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ea:	b672      	cpsid	i
 800d3ec:	f383 8811 	msr	BASEPRI, r3
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	b662      	cpsie	i
 800d3fa:	61bb      	str	r3, [r7, #24]
 800d3fc:	e7fe      	b.n	800d3fc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3fe:	f7ff fd1b 	bl	800ce38 <vPortValidateInterruptPriority>
	__asm volatile
 800d402:	f3ef 8211 	mrs	r2, BASEPRI
 800d406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40a:	b672      	cpsid	i
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	b662      	cpsie	i
 800d41a:	617a      	str	r2, [r7, #20]
 800d41c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d41e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d420:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	429a      	cmp	r2, r3
 800d430:	d92b      	bls.n	800d48a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d442:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44c:	d112      	bne.n	800d474 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d452:	2b00      	cmp	r3, #0
 800d454:	d016      	beq.n	800d484 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d458:	3324      	adds	r3, #36	; 0x24
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 feae 	bl	800e1bc <xTaskRemoveFromEventList>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00e      	beq.n	800d484 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00b      	beq.n	800d484 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2201      	movs	r2, #1
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	e007      	b.n	800d484 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d478:	3301      	adds	r3, #1
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	b25a      	sxtb	r2, r3
 800d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d484:	2301      	movs	r3, #1
 800d486:	637b      	str	r3, [r7, #52]	; 0x34
 800d488:	e001      	b.n	800d48e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	637b      	str	r3, [r7, #52]	; 0x34
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3738      	adds	r7, #56	; 0x38
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
	...

0800d4a4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08e      	sub	sp, #56	; 0x38
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10b      	bne.n	800d4d8 <xQueueGenericReceive+0x34>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	b672      	cpsid	i
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	b662      	cpsie	i
 800d4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d6:	e7fe      	b.n	800d4d6 <xQueueGenericReceive+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d103      	bne.n	800d4e6 <xQueueGenericReceive+0x42>
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <xQueueGenericReceive+0x46>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <xQueueGenericReceive+0x48>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10b      	bne.n	800d508 <xQueueGenericReceive+0x64>
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	b672      	cpsid	i
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	b662      	cpsie	i
 800d504:	623b      	str	r3, [r7, #32]
 800d506:	e7fe      	b.n	800d506 <xQueueGenericReceive+0x62>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d508:	f001 f81a 	bl	800e540 <xTaskGetSchedulerState>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d102      	bne.n	800d518 <xQueueGenericReceive+0x74>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <xQueueGenericReceive+0x78>
 800d518:	2301      	movs	r3, #1
 800d51a:	e000      	b.n	800d51e <xQueueGenericReceive+0x7a>
 800d51c:	2300      	movs	r3, #0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10b      	bne.n	800d53a <xQueueGenericReceive+0x96>
 800d522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d526:	b672      	cpsid	i
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	b662      	cpsie	i
 800d536:	61fb      	str	r3, [r7, #28]
 800d538:	e7fe      	b.n	800d538 <xQueueGenericReceive+0x94>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d53a:	f7ff fba5 	bl	800cc88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d542:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d046      	beq.n	800d5d8 <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d550:	68b9      	ldr	r1, [r7, #8]
 800d552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d554:	f000 f9ca 	bl	800d8ec <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d121      	bne.n	800d5a2 <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	1e5a      	subs	r2, r3, #1
 800d562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d564:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d104      	bne.n	800d578 <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d56e:	f001 f903 	bl	800e778 <pvTaskIncrementMutexHeldCount>
 800d572:	4602      	mov	r2, r0
 800d574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d576:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d027      	beq.n	800d5d0 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	3310      	adds	r3, #16
 800d584:	4618      	mov	r0, r3
 800d586:	f000 fe19 	bl	800e1bc <xTaskRemoveFromEventList>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d01f      	beq.n	800d5d0 <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800d590:	4b4f      	ldr	r3, [pc, #316]	; (800d6d0 <xQueueGenericReceive+0x22c>)
 800d592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	e016      	b.n	800d5d0 <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00f      	beq.n	800d5d0 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b2:	3324      	adds	r3, #36	; 0x24
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 fe01 	bl	800e1bc <xTaskRemoveFromEventList>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d007      	beq.n	800d5d0 <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5c0:	4b43      	ldr	r3, [pc, #268]	; (800d6d0 <xQueueGenericReceive+0x22c>)
 800d5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c6:	601a      	str	r2, [r3, #0]
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800d5d0:	f7ff fb8c 	bl	800ccec <vPortExitCritical>
				return pdPASS;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e077      	b.n	800d6c8 <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d103      	bne.n	800d5e6 <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5de:	f7ff fb85 	bl	800ccec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e070      	b.n	800d6c8 <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d106      	bne.n	800d5fa <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800d5ec:	f107 0314 	add.w	r3, r7, #20
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 fe47 	bl	800e284 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5fa:	f7ff fb77 	bl	800ccec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5fe:	f000 fbf1 	bl	800dde4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d602:	f7ff fb41 	bl	800cc88 <vPortEnterCritical>
 800d606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d60c:	b25b      	sxtb	r3, r3
 800d60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d612:	d103      	bne.n	800d61c <xQueueGenericReceive+0x178>
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d622:	b25b      	sxtb	r3, r3
 800d624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d628:	d103      	bne.n	800d632 <xQueueGenericReceive+0x18e>
 800d62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d632:	f7ff fb5b 	bl	800ccec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d636:	1d3a      	adds	r2, r7, #4
 800d638:	f107 0314 	add.w	r3, r7, #20
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 fe46 	bl	800e2d0 <xTaskCheckForTimeOut>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d131      	bne.n	800d6ae <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d64a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d64c:	f000 f9c6 	bl	800d9dc <prvIsQueueEmpty>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d025      	beq.n	800d6a2 <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d108      	bne.n	800d670 <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 800d65e:	f7ff fb13 	bl	800cc88 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	4618      	mov	r0, r3
 800d668:	f000 ff88 	bl	800e57c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800d66c:	f7ff fb3e 	bl	800ccec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	3324      	adds	r3, #36	; 0x24
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	4611      	mov	r1, r2
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 fd79 	bl	800e170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d67e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d680:	f000 f95a 	bl	800d938 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d684:	f000 fbbc 	bl	800de00 <xTaskResumeAll>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f47f af55 	bne.w	800d53a <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 800d690:	4b0f      	ldr	r3, [pc, #60]	; (800d6d0 <xQueueGenericReceive+0x22c>)
 800d692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	e74b      	b.n	800d53a <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6a4:	f000 f948 	bl	800d938 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6a8:	f000 fbaa 	bl	800de00 <xTaskResumeAll>
 800d6ac:	e745      	b.n	800d53a <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800d6ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6b0:	f000 f942 	bl	800d938 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6b4:	f000 fba4 	bl	800de00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ba:	f000 f98f 	bl	800d9dc <prvIsQueueEmpty>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f43f af3a 	beq.w	800d53a <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3738      	adds	r7, #56	; 0x38
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	e000ed04 	.word	0xe000ed04

0800d6d4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08e      	sub	sp, #56	; 0x38
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10b      	bne.n	800d702 <xQueueReceiveFromISR+0x2e>
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	b672      	cpsid	i
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	b662      	cpsie	i
 800d6fe:	623b      	str	r3, [r7, #32]
 800d700:	e7fe      	b.n	800d700 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d103      	bne.n	800d710 <xQueueReceiveFromISR+0x3c>
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <xQueueReceiveFromISR+0x40>
 800d710:	2301      	movs	r3, #1
 800d712:	e000      	b.n	800d716 <xQueueReceiveFromISR+0x42>
 800d714:	2300      	movs	r3, #0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10b      	bne.n	800d732 <xQueueReceiveFromISR+0x5e>
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	b672      	cpsid	i
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	b662      	cpsie	i
 800d72e:	61fb      	str	r3, [r7, #28]
 800d730:	e7fe      	b.n	800d730 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d732:	f7ff fb81 	bl	800ce38 <vPortValidateInterruptPriority>
	__asm volatile
 800d736:	f3ef 8211 	mrs	r2, BASEPRI
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	b672      	cpsid	i
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	b662      	cpsie	i
 800d74e:	61ba      	str	r2, [r7, #24]
 800d750:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d752:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d754:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d02f      	beq.n	800d7c2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d76c:	68b9      	ldr	r1, [r7, #8]
 800d76e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d770:	f000 f8bc 	bl	800d8ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	1e5a      	subs	r2, r3, #1
 800d778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d77c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d784:	d112      	bne.n	800d7ac <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d016      	beq.n	800d7bc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	3310      	adds	r3, #16
 800d792:	4618      	mov	r0, r3
 800d794:	f000 fd12 	bl	800e1bc <xTaskRemoveFromEventList>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00e      	beq.n	800d7bc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00b      	beq.n	800d7bc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	e007      	b.n	800d7bc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	b25a      	sxtb	r2, r3
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	637b      	str	r3, [r7, #52]	; 0x34
 800d7c0:	e001      	b.n	800d7c6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3738      	adds	r7, #56	; 0x38
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10b      	bne.n	800d804 <vQueueDelete+0x2a>
	__asm volatile
 800d7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f0:	b672      	cpsid	i
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	b662      	cpsie	i
 800d800:	60bb      	str	r3, [r7, #8]
 800d802:	e7fe      	b.n	800d802 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f000 f917 	bl	800da38 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800d80a:	68f8      	ldr	r0, [r7, #12]
 800d80c:	f7fe ff8e 	bl	800c72c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d810:	bf00      	nop
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d824:	2300      	movs	r3, #0
 800d826:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10d      	bne.n	800d852 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d14d      	bne.n	800d8da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	4618      	mov	r0, r3
 800d844:	f000 ff10 	bl	800e668 <xTaskPriorityDisinherit>
 800d848:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	605a      	str	r2, [r3, #4]
 800d850:	e043      	b.n	800d8da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d119      	bne.n	800d88c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6898      	ldr	r0, [r3, #8]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d860:	461a      	mov	r2, r3
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	f006 fd06 	bl	8014274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	689a      	ldr	r2, [r3, #8]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d870:	441a      	add	r2, r3
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	689a      	ldr	r2, [r3, #8]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d32b      	bcc.n	800d8da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	609a      	str	r2, [r3, #8]
 800d88a:	e026      	b.n	800d8da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	68d8      	ldr	r0, [r3, #12]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d894:	461a      	mov	r2, r3
 800d896:	68b9      	ldr	r1, [r7, #8]
 800d898:	f006 fcec 	bl	8014274 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	68da      	ldr	r2, [r3, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a4:	425b      	negs	r3, r3
 800d8a6:	441a      	add	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	68da      	ldr	r2, [r3, #12]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d207      	bcs.n	800d8c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	685a      	ldr	r2, [r3, #4]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c0:	425b      	negs	r3, r3
 800d8c2:	441a      	add	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d105      	bne.n	800d8da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	1c5a      	adds	r2, r3, #1
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8e2:	697b      	ldr	r3, [r7, #20]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3718      	adds	r7, #24
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d018      	beq.n	800d930 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d906:	441a      	add	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	68da      	ldr	r2, [r3, #12]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	429a      	cmp	r2, r3
 800d916:	d303      	bcc.n	800d920 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68d9      	ldr	r1, [r3, #12]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d928:	461a      	mov	r2, r3
 800d92a:	6838      	ldr	r0, [r7, #0]
 800d92c:	f006 fca2 	bl	8014274 <memcpy>
	}
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d940:	f7ff f9a2 	bl	800cc88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d94a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d94c:	e011      	b.n	800d972 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d952:	2b00      	cmp	r3, #0
 800d954:	d012      	beq.n	800d97c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	3324      	adds	r3, #36	; 0x24
 800d95a:	4618      	mov	r0, r3
 800d95c:	f000 fc2e 	bl	800e1bc <xTaskRemoveFromEventList>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d966:	f000 fd15 	bl	800e394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d976:	2b00      	cmp	r3, #0
 800d978:	dce9      	bgt.n	800d94e <prvUnlockQueue+0x16>
 800d97a:	e000      	b.n	800d97e <prvUnlockQueue+0x46>
					break;
 800d97c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	22ff      	movs	r2, #255	; 0xff
 800d982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d986:	f7ff f9b1 	bl	800ccec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d98a:	f7ff f97d 	bl	800cc88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d994:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d996:	e011      	b.n	800d9bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d012      	beq.n	800d9c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3310      	adds	r3, #16
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 fc09 	bl	800e1bc <xTaskRemoveFromEventList>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d001      	beq.n	800d9b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d9b0:	f000 fcf0 	bl	800e394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d9b4:	7bbb      	ldrb	r3, [r7, #14]
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	dce9      	bgt.n	800d998 <prvUnlockQueue+0x60>
 800d9c4:	e000      	b.n	800d9c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d9c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	22ff      	movs	r2, #255	; 0xff
 800d9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d9d0:	f7ff f98c 	bl	800ccec <vPortExitCritical>
}
 800d9d4:	bf00      	nop
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9e4:	f7ff f950 	bl	800cc88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d102      	bne.n	800d9f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	e001      	b.n	800d9fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9fa:	f7ff f977 	bl	800ccec <vPortExitCritical>

	return xReturn;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da10:	f7ff f93a 	bl	800cc88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d102      	bne.n	800da26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da20:	2301      	movs	r3, #1
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e001      	b.n	800da2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da26:	2300      	movs	r3, #0
 800da28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da2a:	f7ff f95f 	bl	800ccec <vPortExitCritical>

	return xReturn;
 800da2e:	68fb      	ldr	r3, [r7, #12]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da40:	2300      	movs	r3, #0
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e016      	b.n	800da74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800da46:	4a10      	ldr	r2, [pc, #64]	; (800da88 <vQueueUnregisterQueue+0x50>)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	00db      	lsls	r3, r3, #3
 800da4c:	4413      	add	r3, r2
 800da4e:	685a      	ldr	r2, [r3, #4]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	429a      	cmp	r2, r3
 800da54:	d10b      	bne.n	800da6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800da56:	4a0c      	ldr	r2, [pc, #48]	; (800da88 <vQueueUnregisterQueue+0x50>)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2100      	movs	r1, #0
 800da5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800da60:	4a09      	ldr	r2, [pc, #36]	; (800da88 <vQueueUnregisterQueue+0x50>)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	00db      	lsls	r3, r3, #3
 800da66:	4413      	add	r3, r2
 800da68:	2200      	movs	r2, #0
 800da6a:	605a      	str	r2, [r3, #4]
				break;
 800da6c:	e005      	b.n	800da7a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3301      	adds	r3, #1
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b07      	cmp	r3, #7
 800da78:	d9e5      	bls.n	800da46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800da7a:	bf00      	nop
 800da7c:	3714      	adds	r7, #20
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	20004168 	.word	0x20004168

0800da8c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08c      	sub	sp, #48	; 0x30
 800da90:	af04      	add	r7, sp, #16
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	603b      	str	r3, [r7, #0]
 800da98:	4613      	mov	r3, r2
 800da9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da9c:	88fb      	ldrh	r3, [r7, #6]
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fe fd7b 	bl	800c59c <pvPortMalloc>
 800daa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00e      	beq.n	800dacc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800daae:	2054      	movs	r0, #84	; 0x54
 800dab0:	f7fe fd74 	bl	800c59c <pvPortMalloc>
 800dab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d003      	beq.n	800dac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	697a      	ldr	r2, [r7, #20]
 800dac0:	631a      	str	r2, [r3, #48]	; 0x30
 800dac2:	e005      	b.n	800dad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dac4:	6978      	ldr	r0, [r7, #20]
 800dac6:	f7fe fe31 	bl	800c72c <vPortFree>
 800daca:	e001      	b.n	800dad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d013      	beq.n	800dafe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dad6:	88fa      	ldrh	r2, [r7, #6]
 800dad8:	2300      	movs	r3, #0
 800dada:	9303      	str	r3, [sp, #12]
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	9302      	str	r3, [sp, #8]
 800dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	68b9      	ldr	r1, [r7, #8]
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 f80e 	bl	800db0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800daf2:	69f8      	ldr	r0, [r7, #28]
 800daf4:	f000 f88c 	bl	800dc10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800daf8:	2301      	movs	r3, #1
 800dafa:	61bb      	str	r3, [r7, #24]
 800dafc:	e002      	b.n	800db04 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dafe:	f04f 33ff 	mov.w	r3, #4294967295
 800db02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db04:	69bb      	ldr	r3, [r7, #24]
	}
 800db06:	4618      	mov	r0, r3
 800db08:	3720      	adds	r7, #32
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b088      	sub	sp, #32
 800db12:	af00      	add	r7, sp, #0
 800db14:	60f8      	str	r0, [r7, #12]
 800db16:	60b9      	str	r1, [r7, #8]
 800db18:	607a      	str	r2, [r7, #4]
 800db1a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db20:	6879      	ldr	r1, [r7, #4]
 800db22:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db26:	440b      	add	r3, r1
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	4413      	add	r3, r2
 800db2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	f023 0307 	bic.w	r3, r3, #7
 800db34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	f003 0307 	and.w	r3, r3, #7
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00b      	beq.n	800db58 <prvInitialiseNewTask+0x4a>
 800db40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db44:	b672      	cpsid	i
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	b662      	cpsie	i
 800db54:	617b      	str	r3, [r7, #20]
 800db56:	e7fe      	b.n	800db56 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db58:	2300      	movs	r3, #0
 800db5a:	61fb      	str	r3, [r7, #28]
 800db5c:	e012      	b.n	800db84 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	4413      	add	r3, r2
 800db64:	7819      	ldrb	r1, [r3, #0]
 800db66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	4413      	add	r3, r2
 800db6c:	3334      	adds	r3, #52	; 0x34
 800db6e:	460a      	mov	r2, r1
 800db70:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	4413      	add	r3, r2
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d006      	beq.n	800db8c <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	3301      	adds	r3, #1
 800db82:	61fb      	str	r3, [r7, #28]
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	2b0f      	cmp	r3, #15
 800db88:	d9e9      	bls.n	800db5e <prvInitialiseNewTask+0x50>
 800db8a:	e000      	b.n	800db8e <prvInitialiseNewTask+0x80>
		{
			break;
 800db8c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	2200      	movs	r2, #0
 800db92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db98:	2b06      	cmp	r3, #6
 800db9a:	d901      	bls.n	800dba0 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db9c:	2306      	movs	r3, #6
 800db9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dba4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbaa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbae:	2200      	movs	r2, #0
 800dbb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe fef0 	bl	800c99c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbe:	3318      	adds	r3, #24
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fe feeb 	bl	800c99c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbce:	f1c3 0207 	rsb	r2, r3, #7
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbde:	2200      	movs	r2, #0
 800dbe0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	68f9      	ldr	r1, [r7, #12]
 800dbee:	69b8      	ldr	r0, [r7, #24]
 800dbf0:	f7fe ff68 	bl	800cac4 <pxPortInitialiseStack>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d002      	beq.n	800dc06 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc06:	bf00      	nop
 800dc08:	3720      	adds	r7, #32
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
	...

0800dc10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc18:	f7ff f836 	bl	800cc88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc1c:	4b2a      	ldr	r3, [pc, #168]	; (800dcc8 <prvAddNewTaskToReadyList+0xb8>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	4a29      	ldr	r2, [pc, #164]	; (800dcc8 <prvAddNewTaskToReadyList+0xb8>)
 800dc24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc26:	4b29      	ldr	r3, [pc, #164]	; (800dccc <prvAddNewTaskToReadyList+0xbc>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d109      	bne.n	800dc42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc2e:	4a27      	ldr	r2, [pc, #156]	; (800dccc <prvAddNewTaskToReadyList+0xbc>)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc34:	4b24      	ldr	r3, [pc, #144]	; (800dcc8 <prvAddNewTaskToReadyList+0xb8>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d110      	bne.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc3c:	f000 fbce 	bl	800e3dc <prvInitialiseTaskLists>
 800dc40:	e00d      	b.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc42:	4b23      	ldr	r3, [pc, #140]	; (800dcd0 <prvAddNewTaskToReadyList+0xc0>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d109      	bne.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc4a:	4b20      	ldr	r3, [pc, #128]	; (800dccc <prvAddNewTaskToReadyList+0xbc>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d802      	bhi.n	800dc5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc58:	4a1c      	ldr	r2, [pc, #112]	; (800dccc <prvAddNewTaskToReadyList+0xbc>)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc5e:	4b1d      	ldr	r3, [pc, #116]	; (800dcd4 <prvAddNewTaskToReadyList+0xc4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	3301      	adds	r3, #1
 800dc64:	4a1b      	ldr	r2, [pc, #108]	; (800dcd4 <prvAddNewTaskToReadyList+0xc4>)
 800dc66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	409a      	lsls	r2, r3
 800dc70:	4b19      	ldr	r3, [pc, #100]	; (800dcd8 <prvAddNewTaskToReadyList+0xc8>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4313      	orrs	r3, r2
 800dc76:	4a18      	ldr	r2, [pc, #96]	; (800dcd8 <prvAddNewTaskToReadyList+0xc8>)
 800dc78:	6013      	str	r3, [r2, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7e:	4613      	mov	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4413      	add	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4a15      	ldr	r2, [pc, #84]	; (800dcdc <prvAddNewTaskToReadyList+0xcc>)
 800dc88:	441a      	add	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4610      	mov	r0, r2
 800dc92:	f7fe fe90 	bl	800c9b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc96:	f7ff f829 	bl	800ccec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc9a:	4b0d      	ldr	r3, [pc, #52]	; (800dcd0 <prvAddNewTaskToReadyList+0xc0>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00e      	beq.n	800dcc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dca2:	4b0a      	ldr	r3, [pc, #40]	; (800dccc <prvAddNewTaskToReadyList+0xbc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d207      	bcs.n	800dcc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <prvAddNewTaskToReadyList+0xd0>)
 800dcb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	20004064 	.word	0x20004064
 800dccc:	20003f64 	.word	0x20003f64
 800dcd0:	20004070 	.word	0x20004070
 800dcd4:	20004080 	.word	0x20004080
 800dcd8:	2000406c 	.word	0x2000406c
 800dcdc:	20003f68 	.word	0x20003f68
 800dce0:	e000ed04 	.word	0xe000ed04

0800dce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d018      	beq.n	800dd28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcf6:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <vTaskDelay+0x64>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00b      	beq.n	800dd16 <vTaskDelay+0x32>
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	b672      	cpsid	i
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	b662      	cpsie	i
 800dd12:	60bb      	str	r3, [r7, #8]
 800dd14:	e7fe      	b.n	800dd14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800dd16:	f000 f865 	bl	800dde4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 fd3f 	bl	800e7a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd22:	f000 f86d 	bl	800de00 <xTaskResumeAll>
 800dd26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d107      	bne.n	800dd3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dd2e:	4b07      	ldr	r3, [pc, #28]	; (800dd4c <vTaskDelay+0x68>)
 800dd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd3e:	bf00      	nop
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	2000408c 	.word	0x2000408c
 800dd4c:	e000ed04 	.word	0xe000ed04

0800dd50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800dd56:	4b1d      	ldr	r3, [pc, #116]	; (800ddcc <vTaskStartScheduler+0x7c>)
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	2280      	movs	r2, #128	; 0x80
 800dd62:	491b      	ldr	r1, [pc, #108]	; (800ddd0 <vTaskStartScheduler+0x80>)
 800dd64:	481b      	ldr	r0, [pc, #108]	; (800ddd4 <vTaskStartScheduler+0x84>)
 800dd66:	f7ff fe91 	bl	800da8c <xTaskCreate>
 800dd6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d117      	bne.n	800dda2 <vTaskStartScheduler+0x52>
 800dd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd76:	b672      	cpsid	i
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	b662      	cpsie	i
 800dd86:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd88:	4b13      	ldr	r3, [pc, #76]	; (800ddd8 <vTaskStartScheduler+0x88>)
 800dd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd90:	4b12      	ldr	r3, [pc, #72]	; (800dddc <vTaskStartScheduler+0x8c>)
 800dd92:	2201      	movs	r2, #1
 800dd94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800dd96:	4b12      	ldr	r3, [pc, #72]	; (800dde0 <vTaskStartScheduler+0x90>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd9c:	f7fe ff0c 	bl	800cbb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dda0:	e00f      	b.n	800ddc2 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda8:	d10b      	bne.n	800ddc2 <vTaskStartScheduler+0x72>
 800ddaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddae:	b672      	cpsid	i
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	b662      	cpsie	i
 800ddbe:	607b      	str	r3, [r7, #4]
 800ddc0:	e7fe      	b.n	800ddc0 <vTaskStartScheduler+0x70>
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20004088 	.word	0x20004088
 800ddd0:	08016fbc 	.word	0x08016fbc
 800ddd4:	0800e3ad 	.word	0x0800e3ad
 800ddd8:	20004084 	.word	0x20004084
 800dddc:	20004070 	.word	0x20004070
 800dde0:	20004068 	.word	0x20004068

0800dde4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dde4:	b480      	push	{r7}
 800dde6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dde8:	4b04      	ldr	r3, [pc, #16]	; (800ddfc <vTaskSuspendAll+0x18>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3301      	adds	r3, #1
 800ddee:	4a03      	ldr	r2, [pc, #12]	; (800ddfc <vTaskSuspendAll+0x18>)
 800ddf0:	6013      	str	r3, [r2, #0]
}
 800ddf2:	bf00      	nop
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr
 800ddfc:	2000408c 	.word	0x2000408c

0800de00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de06:	2300      	movs	r3, #0
 800de08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de0a:	2300      	movs	r3, #0
 800de0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de0e:	4b42      	ldr	r3, [pc, #264]	; (800df18 <xTaskResumeAll+0x118>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10b      	bne.n	800de2e <xTaskResumeAll+0x2e>
 800de16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1a:	b672      	cpsid	i
 800de1c:	f383 8811 	msr	BASEPRI, r3
 800de20:	f3bf 8f6f 	isb	sy
 800de24:	f3bf 8f4f 	dsb	sy
 800de28:	b662      	cpsie	i
 800de2a:	603b      	str	r3, [r7, #0]
 800de2c:	e7fe      	b.n	800de2c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de2e:	f7fe ff2b 	bl	800cc88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de32:	4b39      	ldr	r3, [pc, #228]	; (800df18 <xTaskResumeAll+0x118>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	3b01      	subs	r3, #1
 800de38:	4a37      	ldr	r2, [pc, #220]	; (800df18 <xTaskResumeAll+0x118>)
 800de3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de3c:	4b36      	ldr	r3, [pc, #216]	; (800df18 <xTaskResumeAll+0x118>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d161      	bne.n	800df08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de44:	4b35      	ldr	r3, [pc, #212]	; (800df1c <xTaskResumeAll+0x11c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d05d      	beq.n	800df08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de4c:	e02e      	b.n	800deac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800de4e:	4b34      	ldr	r3, [pc, #208]	; (800df20 <xTaskResumeAll+0x120>)
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	3318      	adds	r3, #24
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe fe08 	bl	800ca70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3304      	adds	r3, #4
 800de64:	4618      	mov	r0, r3
 800de66:	f7fe fe03 	bl	800ca70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6e:	2201      	movs	r2, #1
 800de70:	409a      	lsls	r2, r3
 800de72:	4b2c      	ldr	r3, [pc, #176]	; (800df24 <xTaskResumeAll+0x124>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4313      	orrs	r3, r2
 800de78:	4a2a      	ldr	r2, [pc, #168]	; (800df24 <xTaskResumeAll+0x124>)
 800de7a:	6013      	str	r3, [r2, #0]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de80:	4613      	mov	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	4a27      	ldr	r2, [pc, #156]	; (800df28 <xTaskResumeAll+0x128>)
 800de8a:	441a      	add	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3304      	adds	r3, #4
 800de90:	4619      	mov	r1, r3
 800de92:	4610      	mov	r0, r2
 800de94:	f7fe fd8f 	bl	800c9b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9c:	4b23      	ldr	r3, [pc, #140]	; (800df2c <xTaskResumeAll+0x12c>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d302      	bcc.n	800deac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dea6:	4b22      	ldr	r3, [pc, #136]	; (800df30 <xTaskResumeAll+0x130>)
 800dea8:	2201      	movs	r2, #1
 800deaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800deac:	4b1c      	ldr	r3, [pc, #112]	; (800df20 <xTaskResumeAll+0x120>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1cc      	bne.n	800de4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800deba:	f000 fb1b 	bl	800e4f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800debe:	4b1d      	ldr	r3, [pc, #116]	; (800df34 <xTaskResumeAll+0x134>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d010      	beq.n	800deec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800deca:	f000 f837 	bl	800df3c <xTaskIncrementTick>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ded4:	4b16      	ldr	r3, [pc, #88]	; (800df30 <xTaskResumeAll+0x130>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3b01      	subs	r3, #1
 800dede:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1f1      	bne.n	800deca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dee6:	4b13      	ldr	r3, [pc, #76]	; (800df34 <xTaskResumeAll+0x134>)
 800dee8:	2200      	movs	r2, #0
 800deea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800deec:	4b10      	ldr	r3, [pc, #64]	; (800df30 <xTaskResumeAll+0x130>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d009      	beq.n	800df08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800def4:	2301      	movs	r3, #1
 800def6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800def8:	4b0f      	ldr	r3, [pc, #60]	; (800df38 <xTaskResumeAll+0x138>)
 800defa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df08:	f7fe fef0 	bl	800ccec <vPortExitCritical>

	return xAlreadyYielded;
 800df0c:	68bb      	ldr	r3, [r7, #8]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	2000408c 	.word	0x2000408c
 800df1c:	20004064 	.word	0x20004064
 800df20:	20004024 	.word	0x20004024
 800df24:	2000406c 	.word	0x2000406c
 800df28:	20003f68 	.word	0x20003f68
 800df2c:	20003f64 	.word	0x20003f64
 800df30:	20004078 	.word	0x20004078
 800df34:	20004074 	.word	0x20004074
 800df38:	e000ed04 	.word	0xe000ed04

0800df3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df42:	2300      	movs	r3, #0
 800df44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df46:	4b51      	ldr	r3, [pc, #324]	; (800e08c <xTaskIncrementTick+0x150>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f040 808e 	bne.w	800e06c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800df50:	4b4f      	ldr	r3, [pc, #316]	; (800e090 <xTaskIncrementTick+0x154>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3301      	adds	r3, #1
 800df56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df58:	4a4d      	ldr	r2, [pc, #308]	; (800e090 <xTaskIncrementTick+0x154>)
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d121      	bne.n	800dfa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800df64:	4b4b      	ldr	r3, [pc, #300]	; (800e094 <xTaskIncrementTick+0x158>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00b      	beq.n	800df86 <xTaskIncrementTick+0x4a>
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	b672      	cpsid	i
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	b662      	cpsie	i
 800df82:	603b      	str	r3, [r7, #0]
 800df84:	e7fe      	b.n	800df84 <xTaskIncrementTick+0x48>
 800df86:	4b43      	ldr	r3, [pc, #268]	; (800e094 <xTaskIncrementTick+0x158>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	4b42      	ldr	r3, [pc, #264]	; (800e098 <xTaskIncrementTick+0x15c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a40      	ldr	r2, [pc, #256]	; (800e094 <xTaskIncrementTick+0x158>)
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	4a40      	ldr	r2, [pc, #256]	; (800e098 <xTaskIncrementTick+0x15c>)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6013      	str	r3, [r2, #0]
 800df9a:	4b40      	ldr	r3, [pc, #256]	; (800e09c <xTaskIncrementTick+0x160>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	4a3e      	ldr	r2, [pc, #248]	; (800e09c <xTaskIncrementTick+0x160>)
 800dfa2:	6013      	str	r3, [r2, #0]
 800dfa4:	f000 faa6 	bl	800e4f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfa8:	4b3d      	ldr	r3, [pc, #244]	; (800e0a0 <xTaskIncrementTick+0x164>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	693a      	ldr	r2, [r7, #16]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d34d      	bcc.n	800e04e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfb2:	4b38      	ldr	r3, [pc, #224]	; (800e094 <xTaskIncrementTick+0x158>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d101      	bne.n	800dfc0 <xTaskIncrementTick+0x84>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e000      	b.n	800dfc2 <xTaskIncrementTick+0x86>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d004      	beq.n	800dfd0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfc6:	4b36      	ldr	r3, [pc, #216]	; (800e0a0 <xTaskIncrementTick+0x164>)
 800dfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfcc:	601a      	str	r2, [r3, #0]
					break;
 800dfce:	e03e      	b.n	800e04e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dfd0:	4b30      	ldr	r3, [pc, #192]	; (800e094 <xTaskIncrementTick+0x158>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d203      	bcs.n	800dff0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dfe8:	4a2d      	ldr	r2, [pc, #180]	; (800e0a0 <xTaskIncrementTick+0x164>)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6013      	str	r3, [r2, #0]
						break;
 800dfee:	e02e      	b.n	800e04e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	3304      	adds	r3, #4
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe fd3b 	bl	800ca70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d004      	beq.n	800e00c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	3318      	adds	r3, #24
 800e006:	4618      	mov	r0, r3
 800e008:	f7fe fd32 	bl	800ca70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e010:	2201      	movs	r2, #1
 800e012:	409a      	lsls	r2, r3
 800e014:	4b23      	ldr	r3, [pc, #140]	; (800e0a4 <xTaskIncrementTick+0x168>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4313      	orrs	r3, r2
 800e01a:	4a22      	ldr	r2, [pc, #136]	; (800e0a4 <xTaskIncrementTick+0x168>)
 800e01c:	6013      	str	r3, [r2, #0]
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e022:	4613      	mov	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4a1f      	ldr	r2, [pc, #124]	; (800e0a8 <xTaskIncrementTick+0x16c>)
 800e02c:	441a      	add	r2, r3
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	3304      	adds	r3, #4
 800e032:	4619      	mov	r1, r3
 800e034:	4610      	mov	r0, r2
 800e036:	f7fe fcbe 	bl	800c9b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03e:	4b1b      	ldr	r3, [pc, #108]	; (800e0ac <xTaskIncrementTick+0x170>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e044:	429a      	cmp	r2, r3
 800e046:	d3b4      	bcc.n	800dfb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e04c:	e7b1      	b.n	800dfb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e04e:	4b17      	ldr	r3, [pc, #92]	; (800e0ac <xTaskIncrementTick+0x170>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e054:	4914      	ldr	r1, [pc, #80]	; (800e0a8 <xTaskIncrementTick+0x16c>)
 800e056:	4613      	mov	r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	4413      	add	r3, r2
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	440b      	add	r3, r1
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d907      	bls.n	800e076 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e066:	2301      	movs	r3, #1
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	e004      	b.n	800e076 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e06c:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <xTaskIncrementTick+0x174>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3301      	adds	r3, #1
 800e072:	4a0f      	ldr	r2, [pc, #60]	; (800e0b0 <xTaskIncrementTick+0x174>)
 800e074:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e076:	4b0f      	ldr	r3, [pc, #60]	; (800e0b4 <xTaskIncrementTick+0x178>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d001      	beq.n	800e082 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800e07e:	2301      	movs	r3, #1
 800e080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e082:	697b      	ldr	r3, [r7, #20]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	2000408c 	.word	0x2000408c
 800e090:	20004068 	.word	0x20004068
 800e094:	2000401c 	.word	0x2000401c
 800e098:	20004020 	.word	0x20004020
 800e09c:	2000407c 	.word	0x2000407c
 800e0a0:	20004084 	.word	0x20004084
 800e0a4:	2000406c 	.word	0x2000406c
 800e0a8:	20003f68 	.word	0x20003f68
 800e0ac:	20003f64 	.word	0x20003f64
 800e0b0:	20004074 	.word	0x20004074
 800e0b4:	20004078 	.word	0x20004078

0800e0b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b087      	sub	sp, #28
 800e0bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0be:	4b27      	ldr	r3, [pc, #156]	; (800e15c <vTaskSwitchContext+0xa4>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d003      	beq.n	800e0ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e0c6:	4b26      	ldr	r3, [pc, #152]	; (800e160 <vTaskSwitchContext+0xa8>)
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0cc:	e040      	b.n	800e150 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e0ce:	4b24      	ldr	r3, [pc, #144]	; (800e160 <vTaskSwitchContext+0xa8>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e0d4:	4b23      	ldr	r3, [pc, #140]	; (800e164 <vTaskSwitchContext+0xac>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	fab3 f383 	clz	r3, r3
 800e0e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e0e2:	7afb      	ldrb	r3, [r7, #11]
 800e0e4:	f1c3 031f 	rsb	r3, r3, #31
 800e0e8:	617b      	str	r3, [r7, #20]
 800e0ea:	491f      	ldr	r1, [pc, #124]	; (800e168 <vTaskSwitchContext+0xb0>)
 800e0ec:	697a      	ldr	r2, [r7, #20]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	440b      	add	r3, r1
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10b      	bne.n	800e116 <vTaskSwitchContext+0x5e>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e102:	b672      	cpsid	i
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	b662      	cpsie	i
 800e112:	607b      	str	r3, [r7, #4]
 800e114:	e7fe      	b.n	800e114 <vTaskSwitchContext+0x5c>
 800e116:	697a      	ldr	r2, [r7, #20]
 800e118:	4613      	mov	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4a11      	ldr	r2, [pc, #68]	; (800e168 <vTaskSwitchContext+0xb0>)
 800e122:	4413      	add	r3, r2
 800e124:	613b      	str	r3, [r7, #16]
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	605a      	str	r2, [r3, #4]
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	685a      	ldr	r2, [r3, #4]
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	3308      	adds	r3, #8
 800e138:	429a      	cmp	r2, r3
 800e13a:	d104      	bne.n	800e146 <vTaskSwitchContext+0x8e>
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	685a      	ldr	r2, [r3, #4]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	605a      	str	r2, [r3, #4]
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	4a07      	ldr	r2, [pc, #28]	; (800e16c <vTaskSwitchContext+0xb4>)
 800e14e:	6013      	str	r3, [r2, #0]
}
 800e150:	bf00      	nop
 800e152:	371c      	adds	r7, #28
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	2000408c 	.word	0x2000408c
 800e160:	20004078 	.word	0x20004078
 800e164:	2000406c 	.word	0x2000406c
 800e168:	20003f68 	.word	0x20003f68
 800e16c:	20003f64 	.word	0x20003f64

0800e170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10b      	bne.n	800e198 <vTaskPlaceOnEventList+0x28>
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	b672      	cpsid	i
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	b662      	cpsie	i
 800e194:	60fb      	str	r3, [r7, #12]
 800e196:	e7fe      	b.n	800e196 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e198:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <vTaskPlaceOnEventList+0x48>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3318      	adds	r3, #24
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7fe fc2c 	bl	800c9fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1a6:	2101      	movs	r1, #1
 800e1a8:	6838      	ldr	r0, [r7, #0]
 800e1aa:	f000 faf9 	bl	800e7a0 <prvAddCurrentTaskToDelayedList>
}
 800e1ae:	bf00      	nop
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	20003f64 	.word	0x20003f64

0800e1bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10b      	bne.n	800e1ea <xTaskRemoveFromEventList+0x2e>
 800e1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d6:	b672      	cpsid	i
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	b662      	cpsie	i
 800e1e6:	60fb      	str	r3, [r7, #12]
 800e1e8:	e7fe      	b.n	800e1e8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	3318      	adds	r3, #24
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe fc3e 	bl	800ca70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1f4:	4b1d      	ldr	r3, [pc, #116]	; (800e26c <xTaskRemoveFromEventList+0xb0>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d11c      	bne.n	800e236 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe fc35 	bl	800ca70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20a:	2201      	movs	r2, #1
 800e20c:	409a      	lsls	r2, r3
 800e20e:	4b18      	ldr	r3, [pc, #96]	; (800e270 <xTaskRemoveFromEventList+0xb4>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4313      	orrs	r3, r2
 800e214:	4a16      	ldr	r2, [pc, #88]	; (800e270 <xTaskRemoveFromEventList+0xb4>)
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21c:	4613      	mov	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4a13      	ldr	r2, [pc, #76]	; (800e274 <xTaskRemoveFromEventList+0xb8>)
 800e226:	441a      	add	r2, r3
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	3304      	adds	r3, #4
 800e22c:	4619      	mov	r1, r3
 800e22e:	4610      	mov	r0, r2
 800e230:	f7fe fbc1 	bl	800c9b6 <vListInsertEnd>
 800e234:	e005      	b.n	800e242 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	3318      	adds	r3, #24
 800e23a:	4619      	mov	r1, r3
 800e23c:	480e      	ldr	r0, [pc, #56]	; (800e278 <xTaskRemoveFromEventList+0xbc>)
 800e23e:	f7fe fbba 	bl	800c9b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e246:	4b0d      	ldr	r3, [pc, #52]	; (800e27c <xTaskRemoveFromEventList+0xc0>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d905      	bls.n	800e25c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e250:	2301      	movs	r3, #1
 800e252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e254:	4b0a      	ldr	r3, [pc, #40]	; (800e280 <xTaskRemoveFromEventList+0xc4>)
 800e256:	2201      	movs	r2, #1
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	e001      	b.n	800e260 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e25c:	2300      	movs	r3, #0
 800e25e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800e260:	697b      	ldr	r3, [r7, #20]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3718      	adds	r7, #24
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	2000408c 	.word	0x2000408c
 800e270:	2000406c 	.word	0x2000406c
 800e274:	20003f68 	.word	0x20003f68
 800e278:	20004024 	.word	0x20004024
 800e27c:	20003f64 	.word	0x20003f64
 800e280:	20004078 	.word	0x20004078

0800e284 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <vTaskSetTimeOutState+0x26>
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	b672      	cpsid	i
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	b662      	cpsie	i
 800e2a6:	60fb      	str	r3, [r7, #12]
 800e2a8:	e7fe      	b.n	800e2a8 <vTaskSetTimeOutState+0x24>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2aa:	4b07      	ldr	r3, [pc, #28]	; (800e2c8 <vTaskSetTimeOutState+0x44>)
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2b2:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <vTaskSetTimeOutState+0x48>)
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	605a      	str	r2, [r3, #4]
}
 800e2ba:	bf00      	nop
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	2000407c 	.word	0x2000407c
 800e2cc:	20004068 	.word	0x20004068

0800e2d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10b      	bne.n	800e2f8 <xTaskCheckForTimeOut+0x28>
 800e2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e4:	b672      	cpsid	i
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	b662      	cpsie	i
 800e2f4:	60fb      	str	r3, [r7, #12]
 800e2f6:	e7fe      	b.n	800e2f6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10b      	bne.n	800e316 <xTaskCheckForTimeOut+0x46>
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	b672      	cpsid	i
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	b662      	cpsie	i
 800e312:	60bb      	str	r3, [r7, #8]
 800e314:	e7fe      	b.n	800e314 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e316:	f7fe fcb7 	bl	800cc88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e31a:	4b1c      	ldr	r3, [pc, #112]	; (800e38c <xTaskCheckForTimeOut+0xbc>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e328:	d102      	bne.n	800e330 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e32a:	2300      	movs	r3, #0
 800e32c:	617b      	str	r3, [r7, #20]
 800e32e:	e026      	b.n	800e37e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	4b16      	ldr	r3, [pc, #88]	; (800e390 <xTaskCheckForTimeOut+0xc0>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d007      	beq.n	800e34c <xTaskCheckForTimeOut+0x7c>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	429a      	cmp	r2, r3
 800e344:	d802      	bhi.n	800e34c <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e346:	2301      	movs	r3, #1
 800e348:	617b      	str	r3, [r7, #20]
 800e34a:	e018      	b.n	800e37e <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	693a      	ldr	r2, [r7, #16]
 800e352:	1ad2      	subs	r2, r2, r3
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d20e      	bcs.n	800e37a <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6859      	ldr	r1, [r3, #4]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	1acb      	subs	r3, r1, r3
 800e368:	441a      	add	r2, r3
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff ff88 	bl	800e284 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800e374:	2300      	movs	r3, #0
 800e376:	617b      	str	r3, [r7, #20]
 800e378:	e001      	b.n	800e37e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 800e37a:	2301      	movs	r3, #1
 800e37c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800e37e:	f7fe fcb5 	bl	800ccec <vPortExitCritical>

	return xReturn;
 800e382:	697b      	ldr	r3, [r7, #20]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3718      	adds	r7, #24
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	20004068 	.word	0x20004068
 800e390:	2000407c 	.word	0x2000407c

0800e394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e394:	b480      	push	{r7}
 800e396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e398:	4b03      	ldr	r3, [pc, #12]	; (800e3a8 <vTaskMissedYield+0x14>)
 800e39a:	2201      	movs	r2, #1
 800e39c:	601a      	str	r2, [r3, #0]
}
 800e39e:	bf00      	nop
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	20004078 	.word	0x20004078

0800e3ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3b4:	f000 f852 	bl	800e45c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3b8:	4b06      	ldr	r3, [pc, #24]	; (800e3d4 <prvIdleTask+0x28>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d9f9      	bls.n	800e3b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3c0:	4b05      	ldr	r3, [pc, #20]	; (800e3d8 <prvIdleTask+0x2c>)
 800e3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3d0:	e7f0      	b.n	800e3b4 <prvIdleTask+0x8>
 800e3d2:	bf00      	nop
 800e3d4:	20003f68 	.word	0x20003f68
 800e3d8:	e000ed04 	.word	0xe000ed04

0800e3dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	607b      	str	r3, [r7, #4]
 800e3e6:	e00c      	b.n	800e402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4a12      	ldr	r2, [pc, #72]	; (800e43c <prvInitialiseTaskLists+0x60>)
 800e3f4:	4413      	add	r3, r2
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fe fab0 	bl	800c95c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3301      	adds	r3, #1
 800e400:	607b      	str	r3, [r7, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b06      	cmp	r3, #6
 800e406:	d9ef      	bls.n	800e3e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e408:	480d      	ldr	r0, [pc, #52]	; (800e440 <prvInitialiseTaskLists+0x64>)
 800e40a:	f7fe faa7 	bl	800c95c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e40e:	480d      	ldr	r0, [pc, #52]	; (800e444 <prvInitialiseTaskLists+0x68>)
 800e410:	f7fe faa4 	bl	800c95c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e414:	480c      	ldr	r0, [pc, #48]	; (800e448 <prvInitialiseTaskLists+0x6c>)
 800e416:	f7fe faa1 	bl	800c95c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e41a:	480c      	ldr	r0, [pc, #48]	; (800e44c <prvInitialiseTaskLists+0x70>)
 800e41c:	f7fe fa9e 	bl	800c95c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e420:	480b      	ldr	r0, [pc, #44]	; (800e450 <prvInitialiseTaskLists+0x74>)
 800e422:	f7fe fa9b 	bl	800c95c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e426:	4b0b      	ldr	r3, [pc, #44]	; (800e454 <prvInitialiseTaskLists+0x78>)
 800e428:	4a05      	ldr	r2, [pc, #20]	; (800e440 <prvInitialiseTaskLists+0x64>)
 800e42a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e42c:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <prvInitialiseTaskLists+0x7c>)
 800e42e:	4a05      	ldr	r2, [pc, #20]	; (800e444 <prvInitialiseTaskLists+0x68>)
 800e430:	601a      	str	r2, [r3, #0]
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	20003f68 	.word	0x20003f68
 800e440:	20003ff4 	.word	0x20003ff4
 800e444:	20004008 	.word	0x20004008
 800e448:	20004024 	.word	0x20004024
 800e44c:	20004038 	.word	0x20004038
 800e450:	20004050 	.word	0x20004050
 800e454:	2000401c 	.word	0x2000401c
 800e458:	20004020 	.word	0x20004020

0800e45c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e462:	e028      	b.n	800e4b6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800e464:	f7ff fcbe 	bl	800dde4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e468:	4b17      	ldr	r3, [pc, #92]	; (800e4c8 <prvCheckTasksWaitingTermination+0x6c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	bf0c      	ite	eq
 800e470:	2301      	moveq	r3, #1
 800e472:	2300      	movne	r3, #0
 800e474:	b2db      	uxtb	r3, r3
 800e476:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800e478:	f7ff fcc2 	bl	800de00 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d119      	bne.n	800e4b6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800e482:	f7fe fc01 	bl	800cc88 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e486:	4b10      	ldr	r3, [pc, #64]	; (800e4c8 <prvCheckTasksWaitingTermination+0x6c>)
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	3304      	adds	r3, #4
 800e492:	4618      	mov	r0, r3
 800e494:	f7fe faec 	bl	800ca70 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e498:	4b0c      	ldr	r3, [pc, #48]	; (800e4cc <prvCheckTasksWaitingTermination+0x70>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	4a0b      	ldr	r2, [pc, #44]	; (800e4cc <prvCheckTasksWaitingTermination+0x70>)
 800e4a0:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <prvCheckTasksWaitingTermination+0x74>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	4a09      	ldr	r2, [pc, #36]	; (800e4d0 <prvCheckTasksWaitingTermination+0x74>)
 800e4aa:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800e4ac:	f7fe fc1e 	bl	800ccec <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800e4b0:	6838      	ldr	r0, [r7, #0]
 800e4b2:	f000 f80f 	bl	800e4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4b6:	4b06      	ldr	r3, [pc, #24]	; (800e4d0 <prvCheckTasksWaitingTermination+0x74>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1d2      	bne.n	800e464 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20004038 	.word	0x20004038
 800e4cc:	20004064 	.word	0x20004064
 800e4d0:	2000404c 	.word	0x2000404c

0800e4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fe f923 	bl	800c72c <vPortFree>
			vPortFree( pxTCB );
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7fe f920 	bl	800c72c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b083      	sub	sp, #12
 800e4f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4fa:	4b0f      	ldr	r3, [pc, #60]	; (800e538 <prvResetNextTaskUnblockTime+0x44>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d101      	bne.n	800e508 <prvResetNextTaskUnblockTime+0x14>
 800e504:	2301      	movs	r3, #1
 800e506:	e000      	b.n	800e50a <prvResetNextTaskUnblockTime+0x16>
 800e508:	2300      	movs	r3, #0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d004      	beq.n	800e518 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e50e:	4b0b      	ldr	r3, [pc, #44]	; (800e53c <prvResetNextTaskUnblockTime+0x48>)
 800e510:	f04f 32ff 	mov.w	r2, #4294967295
 800e514:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e516:	e008      	b.n	800e52a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e518:	4b07      	ldr	r3, [pc, #28]	; (800e538 <prvResetNextTaskUnblockTime+0x44>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	4a05      	ldr	r2, [pc, #20]	; (800e53c <prvResetNextTaskUnblockTime+0x48>)
 800e528:	6013      	str	r3, [r2, #0]
}
 800e52a:	bf00      	nop
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	2000401c 	.word	0x2000401c
 800e53c:	20004084 	.word	0x20004084

0800e540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e546:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <xTaskGetSchedulerState+0x34>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d102      	bne.n	800e554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e54e:	2301      	movs	r3, #1
 800e550:	607b      	str	r3, [r7, #4]
 800e552:	e008      	b.n	800e566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e554:	4b08      	ldr	r3, [pc, #32]	; (800e578 <xTaskGetSchedulerState+0x38>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d102      	bne.n	800e562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e55c:	2302      	movs	r3, #2
 800e55e:	607b      	str	r3, [r7, #4]
 800e560:	e001      	b.n	800e566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e562:	2300      	movs	r3, #0
 800e564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e566:	687b      	ldr	r3, [r7, #4]
	}
 800e568:	4618      	mov	r0, r3
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	20004070 	.word	0x20004070
 800e578:	2000408c 	.word	0x2000408c

0800e57c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d062      	beq.n	800e654 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e592:	4b32      	ldr	r3, [pc, #200]	; (800e65c <vTaskPriorityInherit+0xe0>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e598:	429a      	cmp	r2, r3
 800e59a:	d25b      	bcs.n	800e654 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	699b      	ldr	r3, [r3, #24]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	db06      	blt.n	800e5b2 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a4:	4b2d      	ldr	r3, [pc, #180]	; (800e65c <vTaskPriorityInherit+0xe0>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5aa:	f1c3 0207 	rsb	r2, r3, #7
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6959      	ldr	r1, [r3, #20]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4a27      	ldr	r2, [pc, #156]	; (800e660 <vTaskPriorityInherit+0xe4>)
 800e5c4:	4413      	add	r3, r2
 800e5c6:	4299      	cmp	r1, r3
 800e5c8:	d101      	bne.n	800e5ce <vTaskPriorityInherit+0x52>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e000      	b.n	800e5d0 <vTaskPriorityInherit+0x54>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d03a      	beq.n	800e64a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7fe fa49 	bl	800ca70 <uxListRemove>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d115      	bne.n	800e610 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e8:	491d      	ldr	r1, [pc, #116]	; (800e660 <vTaskPriorityInherit+0xe4>)
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	440b      	add	r3, r1
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d10a      	bne.n	800e610 <vTaskPriorityInherit+0x94>
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fe:	2201      	movs	r2, #1
 800e600:	fa02 f303 	lsl.w	r3, r2, r3
 800e604:	43da      	mvns	r2, r3
 800e606:	4b17      	ldr	r3, [pc, #92]	; (800e664 <vTaskPriorityInherit+0xe8>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4013      	ands	r3, r2
 800e60c:	4a15      	ldr	r2, [pc, #84]	; (800e664 <vTaskPriorityInherit+0xe8>)
 800e60e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e610:	4b12      	ldr	r3, [pc, #72]	; (800e65c <vTaskPriorityInherit+0xe0>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61e:	2201      	movs	r2, #1
 800e620:	409a      	lsls	r2, r3
 800e622:	4b10      	ldr	r3, [pc, #64]	; (800e664 <vTaskPriorityInherit+0xe8>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4313      	orrs	r3, r2
 800e628:	4a0e      	ldr	r2, [pc, #56]	; (800e664 <vTaskPriorityInherit+0xe8>)
 800e62a:	6013      	str	r3, [r2, #0]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e630:	4613      	mov	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	4a09      	ldr	r2, [pc, #36]	; (800e660 <vTaskPriorityInherit+0xe4>)
 800e63a:	441a      	add	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	3304      	adds	r3, #4
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	f7fe f9b7 	bl	800c9b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e648:	e004      	b.n	800e654 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e64a:	4b04      	ldr	r3, [pc, #16]	; (800e65c <vTaskPriorityInherit+0xe0>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800e654:	bf00      	nop
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	20003f64 	.word	0x20003f64
 800e660:	20003f68 	.word	0x20003f68
 800e664:	2000406c 	.word	0x2000406c

0800e668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e674:	2300      	movs	r3, #0
 800e676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d070      	beq.n	800e760 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e67e:	4b3b      	ldr	r3, [pc, #236]	; (800e76c <xTaskPriorityDisinherit+0x104>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	693a      	ldr	r2, [r7, #16]
 800e684:	429a      	cmp	r2, r3
 800e686:	d00b      	beq.n	800e6a0 <xTaskPriorityDisinherit+0x38>
 800e688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68c:	b672      	cpsid	i
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	b662      	cpsie	i
 800e69c:	60fb      	str	r3, [r7, #12]
 800e69e:	e7fe      	b.n	800e69e <xTaskPriorityDisinherit+0x36>

			configASSERT( pxTCB->uxMutexesHeld );
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10b      	bne.n	800e6c0 <xTaskPriorityDisinherit+0x58>
 800e6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ac:	b672      	cpsid	i
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	b662      	cpsie	i
 800e6bc:	60bb      	str	r3, [r7, #8]
 800e6be:	e7fe      	b.n	800e6be <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6c4:	1e5a      	subs	r2, r3, #1
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d044      	beq.n	800e760 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d140      	bne.n	800e760 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	3304      	adds	r3, #4
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe f9c4 	bl	800ca70 <uxListRemove>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d115      	bne.n	800e71a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6f2:	491f      	ldr	r1, [pc, #124]	; (800e770 <xTaskPriorityDisinherit+0x108>)
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	440b      	add	r3, r1
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <xTaskPriorityDisinherit+0xb2>
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e708:	2201      	movs	r2, #1
 800e70a:	fa02 f303 	lsl.w	r3, r2, r3
 800e70e:	43da      	mvns	r2, r3
 800e710:	4b18      	ldr	r3, [pc, #96]	; (800e774 <xTaskPriorityDisinherit+0x10c>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4013      	ands	r3, r2
 800e716:	4a17      	ldr	r2, [pc, #92]	; (800e774 <xTaskPriorityDisinherit+0x10c>)
 800e718:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e726:	f1c3 0207 	rsb	r2, r3, #7
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e732:	2201      	movs	r2, #1
 800e734:	409a      	lsls	r2, r3
 800e736:	4b0f      	ldr	r3, [pc, #60]	; (800e774 <xTaskPriorityDisinherit+0x10c>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4313      	orrs	r3, r2
 800e73c:	4a0d      	ldr	r2, [pc, #52]	; (800e774 <xTaskPriorityDisinherit+0x10c>)
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e744:	4613      	mov	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4413      	add	r3, r2
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4a08      	ldr	r2, [pc, #32]	; (800e770 <xTaskPriorityDisinherit+0x108>)
 800e74e:	441a      	add	r2, r3
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	3304      	adds	r3, #4
 800e754:	4619      	mov	r1, r3
 800e756:	4610      	mov	r0, r2
 800e758:	f7fe f92d 	bl	800c9b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e75c:	2301      	movs	r3, #1
 800e75e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e760:	697b      	ldr	r3, [r7, #20]
	}
 800e762:	4618      	mov	r0, r3
 800e764:	3718      	adds	r7, #24
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20003f64 	.word	0x20003f64
 800e770:	20003f68 	.word	0x20003f68
 800e774:	2000406c 	.word	0x2000406c

0800e778 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800e778:	b480      	push	{r7}
 800e77a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e77c:	4b07      	ldr	r3, [pc, #28]	; (800e79c <pvTaskIncrementMutexHeldCount+0x24>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d004      	beq.n	800e78e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e784:	4b05      	ldr	r3, [pc, #20]	; (800e79c <pvTaskIncrementMutexHeldCount+0x24>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e78a:	3201      	adds	r2, #1
 800e78c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e78e:	4b03      	ldr	r3, [pc, #12]	; (800e79c <pvTaskIncrementMutexHeldCount+0x24>)
 800e790:	681b      	ldr	r3, [r3, #0]
	}
 800e792:	4618      	mov	r0, r3
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr
 800e79c:	20003f64 	.word	0x20003f64

0800e7a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7aa:	4b29      	ldr	r3, [pc, #164]	; (800e850 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7b0:	4b28      	ldr	r3, [pc, #160]	; (800e854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe f95a 	bl	800ca70 <uxListRemove>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d10b      	bne.n	800e7da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e7c2:	4b24      	ldr	r3, [pc, #144]	; (800e854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ce:	43da      	mvns	r2, r3
 800e7d0:	4b21      	ldr	r3, [pc, #132]	; (800e858 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	4a20      	ldr	r2, [pc, #128]	; (800e858 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e7d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e0:	d10a      	bne.n	800e7f8 <prvAddCurrentTaskToDelayedList+0x58>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d007      	beq.n	800e7f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7e8:	4b1a      	ldr	r3, [pc, #104]	; (800e854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	481a      	ldr	r0, [pc, #104]	; (800e85c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e7f2:	f7fe f8e0 	bl	800c9b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e7f6:	e026      	b.n	800e846 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e800:	4b14      	ldr	r3, [pc, #80]	; (800e854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e808:	68ba      	ldr	r2, [r7, #8]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d209      	bcs.n	800e824 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e810:	4b13      	ldr	r3, [pc, #76]	; (800e860 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	4b0f      	ldr	r3, [pc, #60]	; (800e854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	3304      	adds	r3, #4
 800e81a:	4619      	mov	r1, r3
 800e81c:	4610      	mov	r0, r2
 800e81e:	f7fe f8ee 	bl	800c9fe <vListInsert>
}
 800e822:	e010      	b.n	800e846 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e824:	4b0f      	ldr	r3, [pc, #60]	; (800e864 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	4b0a      	ldr	r3, [pc, #40]	; (800e854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3304      	adds	r3, #4
 800e82e:	4619      	mov	r1, r3
 800e830:	4610      	mov	r0, r2
 800e832:	f7fe f8e4 	bl	800c9fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e836:	4b0c      	ldr	r3, [pc, #48]	; (800e868 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d202      	bcs.n	800e846 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e840:	4a09      	ldr	r2, [pc, #36]	; (800e868 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	6013      	str	r3, [r2, #0]
}
 800e846:	bf00      	nop
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20004068 	.word	0x20004068
 800e854:	20003f64 	.word	0x20003f64
 800e858:	2000406c 	.word	0x2000406c
 800e85c:	20004050 	.word	0x20004050
 800e860:	20004020 	.word	0x20004020
 800e864:	2000401c 	.word	0x2000401c
 800e868:	20004084 	.word	0x20004084

0800e86c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t ), uint8_t id)
{
 800e86c:	b5b0      	push	{r4, r5, r7, lr}
 800e86e:	b08c      	sub	sp, #48	; 0x30
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	4613      	mov	r3, r2
 800e878:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL; 
 800e880:	2302      	movs	r3, #2
 800e882:	e03c      	b.n	800e8fe <USBH_Init+0x92>
  }
  
  /* Set DRiver ID */
  phost->id = id;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	79fa      	ldrb	r2, [r7, #7]
 800e888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  
  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
  phost->ClassNumber = 0;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  
  /* Restore default states and prepare EP0 */ 
  DeInitStateMachine(phost);
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f000 f837 	bl	800e910 <DeInitStateMachine>
  
  /* Assign User process */
  if(pUsrFunc != NULL)
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d003      	beq.n	800e8b0 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  }
  
#if (USBH_USE_OS == 1) 
  
  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, 10, uint16_t);
 800e8b0:	4a15      	ldr	r2, [pc, #84]	; (800e908 <USBH_Init+0x9c>)
 800e8b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8ba:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
 800e8be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fd fd96 	bl	800c3f6 <osMessageCreate>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
  
  /*Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 800e8d2:	4b0e      	ldr	r3, [pc, #56]	; (800e90c <USBH_Init+0xa0>)
 800e8d4:	f107 0414 	add.w	r4, r7, #20
 800e8d8:	461d      	mov	r5, r3
 800e8da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8de:	682b      	ldr	r3, [r5, #0]
 800e8e0:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, 8 * configMINIMAL_STACK_SIZE);
#endif  
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800e8e2:	f107 0314 	add.w	r3, r7, #20
 800e8e6:	68f9      	ldr	r1, [r7, #12]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fd fc91 	bl	800c210 <osThreadCreate>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
#endif  
  
  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f005 f9dc 	bl	8013cb4 <USBH_LL_Init>
  return USBH_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3730      	adds	r7, #48	; 0x30
 800e902:	46bd      	mov	sp, r7
 800e904:	bdb0      	pop	{r4, r5, r7, pc}
 800e906:	bf00      	nop
 800e908:	08016fc4 	.word	0x08016fc4
 800e90c:	08016fd8 	.word	0x08016fd8

0800e910 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800e91c:	e009      	b.n	800e932 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0;
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	33de      	adds	r3, #222	; 0xde
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	2200      	movs	r2, #0
 800e92a:	605a      	str	r2, [r3, #4]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	3301      	adds	r3, #1
 800e930:	60fb      	str	r3, [r7, #12]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b0e      	cmp	r3, #14
 800e936:	d9f2      	bls.n	800e91e <DeInitStateMachine+0xe>
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800e938:	2300      	movs	r3, #0
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	e009      	b.n	800e952 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0;
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	4413      	add	r3, r2
 800e944:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e948:	2200      	movs	r2, #0
 800e94a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3301      	adds	r3, #1
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e958:	d3f1      	bcc.n	800e93e <DeInitStateMachine+0x2e>
  }
  
  phost->gState = HOST_IDLE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2201      	movs	r2, #1
 800e96a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0;  
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  
  phost->Control.state = CTRL_SETUP;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2240      	movs	r2, #64	; 0x40
 800e97e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	765a      	strb	r2, [r3, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2201      	movs	r2, #1
 800e992:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  
  return USBH_OK;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3714      	adds	r7, #20
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	73fb      	strb	r3, [r7, #15]
  
  if(pclass != 0)
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d016      	beq.n	800e9e6 <USBH_RegisterClass+0x42>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10e      	bne.n	800e9e0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e9c8:	1c59      	adds	r1, r3, #1
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	f8c2 1378 	str.w	r1, [r2, #888]	; 0x378
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	33dc      	adds	r3, #220	; 0xdc
 800e9d4:	6839      	ldr	r1, [r7, #0]
 800e9d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	73fb      	strb	r3, [r7, #15]
 800e9de:	e004      	b.n	800e9ea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL; 
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	73fb      	strb	r3, [r7, #15]
 800e9e4:	e001      	b.n	800e9ea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 800e9e6:	2302      	movs	r3, #2
 800e9e8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3714      	adds	r7, #20
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b085      	sub	sp, #20
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	460b      	mov	r3, r1
 800ea02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	73fb      	strb	r3, [r7, #15]
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ea0e:	78fa      	ldrb	r2, [r7, #3]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d204      	bcs.n	800ea1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	78fa      	ldrb	r2, [r7, #3]
 800ea18:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800ea1c:	e001      	b.n	800ea22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 800ea1e:	2302      	movs	r3, #2
 800ea20:	73fb      	strb	r3, [r7, #15]
  }
  return status;  
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b087      	sub	sp, #28
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	4608      	mov	r0, r1
 800ea3a:	4611      	mov	r1, r2
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	4603      	mov	r3, r0
 800ea40:	70fb      	strb	r3, [r7, #3]
 800ea42:	460b      	mov	r3, r1
 800ea44:	70bb      	strb	r3, [r7, #2]
 800ea46:	4613      	mov	r3, r2
 800ea48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  int8_t                        if_ix = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	75fb      	strb	r3, [r7, #23]
  
  pif = (USBH_InterfaceDescTypeDef *)0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;  
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f203 3332 	addw	r3, r3, #818	; 0x332
 800ea58:	60fb      	str	r3, [r7, #12]
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ea5a:	e029      	b.n	800eab0 <USBH_FindInterface+0x80>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ea5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea60:	221a      	movs	r2, #26
 800ea62:	fb02 f303 	mul.w	r3, r2, r3
 800ea66:	3308      	adds	r3, #8
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	3302      	adds	r3, #2
 800ea6e:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	795b      	ldrb	r3, [r3, #5]
 800ea74:	78fa      	ldrb	r2, [r7, #3]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d002      	beq.n	800ea80 <USBH_FindInterface+0x50>
 800ea7a:	78fb      	ldrb	r3, [r7, #3]
 800ea7c:	2bff      	cmp	r3, #255	; 0xff
 800ea7e:	d111      	bne.n	800eaa4 <USBH_FindInterface+0x74>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 800ea84:	78ba      	ldrb	r2, [r7, #2]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d002      	beq.n	800ea90 <USBH_FindInterface+0x60>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800ea8a:	78bb      	ldrb	r3, [r7, #2]
 800ea8c:	2bff      	cmp	r3, #255	; 0xff
 800ea8e:	d109      	bne.n	800eaa4 <USBH_FindInterface+0x74>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 800ea94:	787a      	ldrb	r2, [r7, #1]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d002      	beq.n	800eaa0 <USBH_FindInterface+0x70>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 800ea9a:	787b      	ldrb	r3, [r7, #1]
 800ea9c:	2bff      	cmp	r3, #255	; 0xff
 800ea9e:	d101      	bne.n	800eaa4 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800eaa0:	7dfb      	ldrb	r3, [r7, #23]
 800eaa2:	e00a      	b.n	800eaba <USBH_FindInterface+0x8a>
    }
    if_ix++;
 800eaa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	3301      	adds	r3, #1
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	ddd1      	ble.n	800ea5c <USBH_FindInterface+0x2c>
  }
  return 0xFF;
 800eab8:	23ff      	movs	r3, #255	; 0xff
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	371c      	adds	r7, #28
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f005 f938 	bl	8013d44 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 800ead4:	2101      	movs	r1, #1
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f005 fadb 	bl	8014092 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
	...

0800eae8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b088      	sub	sp, #32
 800eaec:	af04      	add	r7, sp, #16
 800eaee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->gState)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b0a      	cmp	r3, #10
 800eb00:	f200 814f 	bhi.w	800eda2 <USBH_Process+0x2ba>
 800eb04:	a201      	add	r2, pc, #4	; (adr r2, 800eb0c <USBH_Process+0x24>)
 800eb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb0a:	bf00      	nop
 800eb0c:	0800eb39 	.word	0x0800eb39
 800eb10:	0800eda3 	.word	0x0800eda3
 800eb14:	0800eb6b 	.word	0x0800eb6b
 800eb18:	0800ed7d 	.word	0x0800ed7d
 800eb1c:	0800eda3 	.word	0x0800eda3
 800eb20:	0800ec09 	.word	0x0800ec09
 800eb24:	0800ed23 	.word	0x0800ed23
 800eb28:	0800ec39 	.word	0x0800ec39
 800eb2c:	0800ec69 	.word	0x0800ec69
 800eb30:	0800ec89 	.word	0x0800ec89
 800eb34:	0800ed65 	.word	0x0800ed65
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f000 8130 	beq.w	800eda6 <USBH_Process+0x2be>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200); 
 800eb4c:	20c8      	movs	r0, #200	; 0xc8
 800eb4e:	f005 fb14 	bl	801417a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f005 f980 	bl	8013e58 <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eb5e:	2200      	movs	r2, #0
 800eb60:	2101      	movs	r1, #1
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fd fc5a 	bl	800c41c <osMessagePut>
#endif
    }
    break;
 800eb68:	e11d      	b.n	800eda6 <USBH_Process+0x2be>
  case HOST_DEV_ATTACHED :
    
    USBH_UsrLog("USB Device Attached");  
      
    /* Wait for 100 ms after Reset */
    USBH_Delay(100); 
 800eb6a:	2064      	movs	r0, #100	; 0x64
 800eb6c:	f005 fb05 	bl	801417a <USBH_Delay>
          
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f005 f94b 	bl	8013e0c <USBH_LL_GetSpeed>
 800eb76:	4603      	mov	r3, r0
 800eb78:	461a      	mov	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
    
    phost->gState = HOST_ENUMERATION;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2205      	movs	r2, #5
 800eb84:	701a      	strb	r2, [r3, #0]
    
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 800eb86:	2100      	movs	r1, #0
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 f8e8 	bl	800fd5e <USBH_AllocPipe>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	461a      	mov	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 800eb96:	2180      	movs	r1, #128	; 0x80
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f001 f8e0 	bl	800fd5e <USBH_AllocPipe>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	461a      	mov	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	711a      	strb	r2, [r3, #4]
    
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	7919      	ldrb	r1, [r3, #4]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size); 
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800ebba:	b292      	uxth	r2, r2
 800ebbc:	9202      	str	r2, [sp, #8]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	9201      	str	r2, [sp, #4]
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2280      	movs	r2, #128	; 0x80
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f001 f899 	bl	800fd00 <USBH_OpenPipe>
    
    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	7959      	ldrb	r1, [r3, #5]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800ebe2:	b292      	uxth	r2, r2
 800ebe4:	9202      	str	r2, [sp, #8]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	9201      	str	r2, [sp, #4]
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	4603      	mov	r3, r0
 800ebee:	2200      	movs	r2, #0
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f001 f885 	bl	800fd00 <USBH_OpenPipe>
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2101      	movs	r1, #1
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7fd fc0b 	bl	800c41c <osMessagePut>
#endif    
    
    break;
 800ec06:	e0db      	b.n	800edc0 <USBH_Process+0x2d8>
    
  case HOST_ENUMERATION:     
    /* Check for enumeration status */  
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f8df 	bl	800edcc <USBH_HandleEnum>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f040 80ca 	bne.w	800edaa <USBH_Process+0x2c2>
    { 
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d103      	bne.n	800ec30 <USBH_Process+0x148>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;        
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT; 
      }
          
    }
    break;
 800ec2e:	e0bc      	b.n	800edaa <USBH_Process+0x2c2>
        phost->gState  = HOST_INPUT; 
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2207      	movs	r2, #7
 800ec34:	701a      	strb	r2, [r3, #0]
    break;
 800ec36:	e0b8      	b.n	800edaa <USBH_Process+0x2c2>
    
  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f000 80b5 	beq.w	800edae <USBH_Process+0x2c6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ec4a:	2101      	movs	r1, #1
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2208      	movs	r2, #8
 800ec54:	701a      	strb	r2, [r3, #0]
        
#if (USBH_USE_OS == 1)
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	2105      	movs	r1, #5
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fd fbdb 	bl	800c41c <osMessagePut>
#endif         
      }
    }
    break;
 800ec66:	e0a2      	b.n	800edae <USBH_Process+0x2c6>
    
  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	4619      	mov	r1, r3
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 fb76 	bl	800f364 <USBH_SetCfg>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f040 8099 	bne.w	800edb2 <USBH_Process+0x2ca>
    {
      phost->gState  = HOST_CHECK_CLASS;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2209      	movs	r2, #9
 800ec84:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
      
    }      
    
    break;
 800ec86:	e094      	b.n	800edb2 <USBH_Process+0x2ca>
    
  case HOST_CHECK_CLASS:
    
    if(phost->ClassNumber == 0)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d03e      	beq.n	800ed10 <USBH_Process+0x228>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	73fb      	strb	r3, [r7, #15]
 800ec9e:	e015      	b.n	800eccc <USBH_Process+0x1e4>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800eca0:	7bfa      	ldrb	r2, [r7, #15]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	32dc      	adds	r2, #220	; 0xdc
 800eca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecaa:	791a      	ldrb	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d107      	bne.n	800ecc6 <USBH_Process+0x1de>
        {
          phost->pActiveClass = phost->pClass[idx];
 800ecb6:	7bfa      	ldrb	r2, [r7, #15]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	32dc      	adds	r2, #220	; 0xdc
 800ecbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
      for (idx = 0; idx < USBH_MAX_NUM_SUPPORTED_CLASS ; idx ++)
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	73fb      	strb	r3, [r7, #15]
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d0e6      	beq.n	800eca0 <USBH_Process+0x1b8>
        }
      }
      
      if(phost->pActiveClass != NULL)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d016      	beq.n	800ed0a <USBH_Process+0x222>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	4798      	blx	r3
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d109      	bne.n	800ed02 <USBH_Process+0x21a>
        {
          phost->gState  = HOST_CLASS_REQUEST; 
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2206      	movs	r2, #6
 800ecf2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
          
          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ecfa:	2103      	movs	r1, #3
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	4798      	blx	r3
 800ed00:	e006      	b.n	800ed10 <USBH_Process+0x228>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	220c      	movs	r2, #12
 800ed06:	701a      	strb	r2, [r3, #0]
 800ed08:	e002      	b.n	800ed10 <USBH_Process+0x228>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	220c      	movs	r2, #12
 800ed0e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ed16:	2200      	movs	r2, #0
 800ed18:	2105      	movs	r1, #5
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fd fb7e 	bl	800c41c <osMessagePut>
#endif 
    break;    
 800ed20:	e04e      	b.n	800edc0 <USBH_Process+0x2d8>
    
  case HOST_CLASS_REQUEST:  
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00f      	beq.n	800ed4c <USBH_Process+0x264>
    {
      status = phost->pActiveClass->Requests(phost);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	4798      	blx	r3
 800ed38:	4603      	mov	r3, r0
 800ed3a:	73bb      	strb	r3, [r7, #14]
      
      if(status == USBH_OK)
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d138      	bne.n	800edb6 <USBH_Process+0x2ce>
      {
        phost->gState  = HOST_CLASS;        
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	220a      	movs	r2, #10
 800ed48:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    
    break;    
 800ed4a:	e034      	b.n	800edb6 <USBH_Process+0x2ce>
      phost->gState  = HOST_ABORT_STATE;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	220c      	movs	r2, #12
 800ed50:	701a      	strb	r2, [r3, #0]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ed58:	2200      	movs	r2, #0
 800ed5a:	2105      	movs	r1, #5
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fd fb5d 	bl	800c41c <osMessagePut>
    break;    
 800ed62:	e028      	b.n	800edb6 <USBH_Process+0x2ce>
  case HOST_CLASS:   
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d025      	beq.n	800edba <USBH_Process+0x2d2>
    { 
      phost->pActiveClass->BgndProcess(phost);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed74:	695b      	ldr	r3, [r3, #20]
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	4798      	blx	r3
    }
    break;       
 800ed7a:	e01e      	b.n	800edba <USBH_Process+0x2d2>

  case HOST_DEV_DISCONNECTED :
    
    DeInitStateMachine(phost);  
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff fdc7 	bl	800e910 <DeInitStateMachine>
    
    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d018      	beq.n	800edbe <USBH_Process+0x2d6>
    {
      phost->pActiveClass->DeInit(phost); 
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
    }     
    break;
 800eda0:	e00d      	b.n	800edbe <USBH_Process+0x2d6>
    
  case HOST_ABORT_STATE:
  default :
    break;
 800eda2:	bf00      	nop
 800eda4:	e00c      	b.n	800edc0 <USBH_Process+0x2d8>
    break;
 800eda6:	bf00      	nop
 800eda8:	e00a      	b.n	800edc0 <USBH_Process+0x2d8>
    break;
 800edaa:	bf00      	nop
 800edac:	e008      	b.n	800edc0 <USBH_Process+0x2d8>
    break;
 800edae:	bf00      	nop
 800edb0:	e006      	b.n	800edc0 <USBH_Process+0x2d8>
    break;
 800edb2:	bf00      	nop
 800edb4:	e004      	b.n	800edc0 <USBH_Process+0x2d8>
    break;    
 800edb6:	bf00      	nop
 800edb8:	e002      	b.n	800edc0 <USBH_Process+0x2d8>
    break;       
 800edba:	bf00      	nop
 800edbc:	e000      	b.n	800edc0 <USBH_Process+0x2d8>
    break;
 800edbe:	bf00      	nop
  }
 return USBH_OK;  
 800edc0:	2300      	movs	r3, #0
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop

0800edcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b088      	sub	sp, #32
 800edd0:	af04      	add	r7, sp, #16
 800edd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;  
 800edd4:	2301      	movs	r3, #1
 800edd6:	73fb      	strb	r3, [r7, #15]
  
  switch (phost->EnumState)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	785b      	ldrb	r3, [r3, #1]
 800eddc:	2b07      	cmp	r3, #7
 800edde:	f200 8119 	bhi.w	800f014 <USBH_HandleEnum+0x248>
 800ede2:	a201      	add	r2, pc, #4	; (adr r2, 800ede8 <USBH_HandleEnum+0x1c>)
 800ede4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede8:	0800ee09 	.word	0x0800ee09
 800edec:	0800ee7b 	.word	0x0800ee7b
 800edf0:	0800ee93 	.word	0x0800ee93
 800edf4:	0800ef09 	.word	0x0800ef09
 800edf8:	0800ef21 	.word	0x0800ef21
 800edfc:	0800ef3d 	.word	0x0800ef3d
 800ee00:	0800ef91 	.word	0x0800ef91
 800ee04:	0800efd5 	.word	0x0800efd5
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 800ee08:	2108      	movs	r1, #8
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f9da 	bl	800f1c4 <USBH_Get_DevDesc>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f040 8100 	bne.w	800f018 <USBH_HandleEnum+0x24c>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2201      	movs	r2, #1
 800ee26:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7919      	ldrb	r1, [r3, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ee3c:	b292      	uxth	r2, r2
 800ee3e:	9202      	str	r2, [sp, #8]
 800ee40:	2200      	movs	r2, #0
 800ee42:	9201      	str	r2, [sp, #4]
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	4603      	mov	r3, r0
 800ee48:	2280      	movs	r2, #128	; 0x80
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 ff58 	bl	800fd00 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	7959      	ldrb	r1, [r3, #5]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);           
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800ee64:	b292      	uxth	r2, r2
 800ee66:	9202      	str	r2, [sp, #8]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	9201      	str	r2, [sp, #4]
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2200      	movs	r2, #0
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 ff44 	bl	800fd00 <USBH_OpenPipe>
      
    }
    break;
 800ee78:	e0ce      	b.n	800f018 <USBH_HandleEnum+0x24c>
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800ee7a:	2112      	movs	r1, #18
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 f9a1 	bl	800f1c4 <USBH_Get_DevDesc>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f040 80c9 	bne.w	800f01c <USBH_HandleEnum+0x250>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	705a      	strb	r2, [r3, #1]
       
    }
    break;
 800ee90:	e0c4      	b.n	800f01c <USBH_HandleEnum+0x250>
   
  case ENUM_SET_ADDR: 
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800ee92:	2101      	movs	r1, #1
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fa41 	bl	800f31c <USBH_SetAddress>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f040 80bf 	bne.w	800f020 <USBH_HandleEnum+0x254>
    {
      USBH_Delay(2);
 800eea2:	2002      	movs	r0, #2
 800eea4:	f005 f969 	bl	801417a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
      
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2203      	movs	r2, #3
 800eeb4:	705a      	strb	r2, [r3, #1]
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	7919      	ldrb	r1, [r3, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800eeca:	b292      	uxth	r2, r2
 800eecc:	9202      	str	r2, [sp, #8]
 800eece:	2200      	movs	r2, #0
 800eed0:	9201      	str	r2, [sp, #4]
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	4603      	mov	r3, r0
 800eed6:	2280      	movs	r2, #128	; 0x80
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 ff11 	bl	800fd00 <USBH_OpenPipe>
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	7959      	ldrb	r1, [r3, #5]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size);        
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800eef2:	b292      	uxth	r2, r2
 800eef4:	9202      	str	r2, [sp, #8]
 800eef6:	2200      	movs	r2, #0
 800eef8:	9201      	str	r2, [sp, #4]
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4603      	mov	r3, r0
 800eefe:	2200      	movs	r2, #0
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 fefd 	bl	800fd00 <USBH_OpenPipe>
    }
    break;
 800ef06:	e08b      	b.n	800f020 <USBH_HandleEnum+0x254>
    
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
 800ef08:	2109      	movs	r1, #9
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f982 	bl	800f214 <USBH_Get_CfgDesc>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f040 8086 	bne.w	800f024 <USBH_HandleEnum+0x258>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2204      	movs	r2, #4
 800ef1c:	705a      	strb	r2, [r3, #1]
    }
    break;
 800ef1e:	e081      	b.n	800f024 <USBH_HandleEnum+0x258>
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
 800ef26:	4619      	mov	r1, r3
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 f973 	bl	800f214 <USBH_Get_CfgDesc>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d179      	bne.n	800f028 <USBH_HandleEnum+0x25c>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2205      	movs	r2, #5
 800ef38:	705a      	strb	r2, [r3, #1]
    }
    break;
 800ef3a:	e075      	b.n	800f028 <USBH_HandleEnum+0x25c>
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d018      	beq.n	800ef78 <USBH_HandleEnum+0x1ac>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 132e 	ldrb.w	r1, [r3, #814]	; 0x32e
                               phost->device.DevDesc.iManufacturer, 
                                phost->device.Data , 
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ef52:	23ff      	movs	r3, #255	; 0xff
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 f981 	bl	800f25c <USBH_Get_StringDesc>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d165      	bne.n	800f02c <USBH_HandleEnum+0x260>
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2206      	movs	r2, #6
 800ef64:	705a      	strb	r2, [r3, #1]
        
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	2105      	movs	r1, #5
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fd fa53 	bl	800c41c <osMessagePut>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif       
    }
    break;
 800ef76:	e059      	b.n	800f02c <USBH_HandleEnum+0x260>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2206      	movs	r2, #6
 800ef7c:	705a      	strb	r2, [r3, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef84:	2200      	movs	r2, #0
 800ef86:	2105      	movs	r1, #5
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fd fa47 	bl	800c41c <osMessagePut>
    break;
 800ef8e:	e04d      	b.n	800f02c <USBH_HandleEnum+0x260>
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d010      	beq.n	800efbc <USBH_HandleEnum+0x1f0>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f893 132f 	ldrb.w	r1, [r3, #815]	; 0x32f
                               phost->device.DevDesc.iProduct, 
                               phost->device.Data, 
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800efa6:	23ff      	movs	r3, #255	; 0xff
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f000 f957 	bl	800f25c <USBH_Get_StringDesc>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d13d      	bne.n	800f030 <USBH_HandleEnum+0x264>
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2207      	movs	r2, #7
 800efb8:	705a      	strb	r2, [r3, #1]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    } 
    break;
 800efba:	e039      	b.n	800f030 <USBH_HandleEnum+0x264>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2207      	movs	r2, #7
 800efc0:	705a      	strb	r2, [r3, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800efc8:	2200      	movs	r2, #0
 800efca:	2105      	movs	r1, #5
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fd fa25 	bl	800c41c <osMessagePut>
    break;
 800efd2:	e02d      	b.n	800f030 <USBH_HandleEnum+0x264>
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00f      	beq.n	800effe <USBH_HandleEnum+0x232>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iSerialNumber, 
                               phost->device.Data, 
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800efea:	23ff      	movs	r3, #255	; 0xff
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 f935 	bl	800f25c <USBH_Get_StringDesc>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d11d      	bne.n	800f034 <USBH_HandleEnum+0x268>
                               0xff) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)phost->device.Data);
        Status = USBH_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	73fb      	strb	r3, [r7, #15]
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
#endif        
    }  
    break;
 800effc:	e01a      	b.n	800f034 <USBH_HandleEnum+0x268>
      Status = USBH_OK;
 800effe:	2300      	movs	r3, #0
 800f000:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f008:	2200      	movs	r2, #0
 800f00a:	2105      	movs	r1, #5
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fd fa05 	bl	800c41c <osMessagePut>
    break;
 800f012:	e00f      	b.n	800f034 <USBH_HandleEnum+0x268>
    
  default:
    break;
 800f014:	bf00      	nop
 800f016:	e00e      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f018:	bf00      	nop
 800f01a:	e00c      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f01c:	bf00      	nop
 800f01e:	e00a      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f020:	bf00      	nop
 800f022:	e008      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f024:	bf00      	nop
 800f026:	e006      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f028:	bf00      	nop
 800f02a:	e004      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f02c:	bf00      	nop
 800f02e:	e002      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f030:	bf00      	nop
 800f032:	e000      	b.n	800f036 <USBH_HandleEnum+0x26a>
    break;
 800f034:	bf00      	nop
  }  
  return Status;
 800f036:	7bfb      	ldrb	r3, [r7, #15]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	683a      	ldr	r2, [r7, #0]
 800f04e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
}
 800f052:	bf00      	nop
 800f054:	370c      	adds	r7, #12
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b082      	sub	sp, #8
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  USBH_HandleSof(phost);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 f804 	bl	800f082 <USBH_HandleSof>
}
 800f07a:	bf00      	nop
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b082      	sub	sp, #8
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b0a      	cmp	r3, #10
 800f092:	d10a      	bne.n	800f0aa <USBH_HandleSof+0x28>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800f0a4:	699b      	ldr	r3, [r3, #24]
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	4798      	blx	r3
  }
}
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b082      	sub	sp, #8
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10f      	bne.n	800f0e4 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00e      	beq.n	800f0f4 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f0dc:	2104      	movs	r1, #4
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	4798      	blx	r3
 800f0e2:	e007      	b.n	800f0f4 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d102      	bne.n	800f0f4 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2202      	movs	r2, #2
 800f0f2:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fd f98c 	bl	800c41c <osMessagePut>
#endif 
  
  return USBH_OK;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f004 fe46 	bl	8013da8 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	791b      	ldrb	r3, [r3, #4]
 800f120:	4619      	mov	r1, r3
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 fe3b 	bl	800fd9e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	795b      	ldrb	r3, [r3, #5]
 800f12c:	4619      	mov	r1, r3
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 fe35 	bl	800fd9e <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f142:	2b00      	cmp	r3, #0
 800f144:	d005      	beq.n	800f152 <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f14c:	2105      	movs	r1, #5
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f004 fdf6 	bl	8013d44 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2203      	movs	r2, #3
 800f15c:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f164:	2200      	movs	r2, #0
 800f166:	2101      	movs	r1, #1
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fd f957 	bl	800c41c <osMessagePut>
#endif 
  
  return USBH_OK;
 800f16e:	2300      	movs	r3, #0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  osEvent event;
  
  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 13c8 	ldr.w	r1, [r3, #968]	; 0x3c8
 800f186:	f107 030c 	add.w	r3, r7, #12
 800f18a:	f04f 32ff 	mov.w	r2, #4294967295
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fd f984 	bl	800c49c <osMessageGet>
    
    if( event.status == osEventMessage )
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b10      	cmp	r3, #16
 800f198:	d1f2      	bne.n	800f180 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff fca4 	bl	800eae8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 800f1a0:	e7ee      	b.n	800f180 <USBH_Process_OS+0x8>

0800f1a2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b082      	sub	sp, #8
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	2102      	movs	r1, #2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fd f931 	bl	800c41c <osMessagePut>
  return USBH_OK;
 800f1ba:	2300      	movs	r3, #0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af02      	add	r7, sp, #8
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;
  
  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
                                  USB_DESC_DEVICE, 
                                  phost->device.Data,
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f1d6:	78fb      	ldrb	r3, [r7, #3]
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	4613      	mov	r3, r2
 800f1de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 f864 	bl	800f2b2 <USBH_GetDescriptor>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	73fb      	strb	r3, [r7, #15]
 800f1ee:	7bfb      	ldrb	r3, [r7, #15]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10a      	bne.n	800f20a <USBH_Get_DevDesc+0x46>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */       
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data, length);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f503 7048 	add.w	r0, r3, #800	; 0x320
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f200:	78fa      	ldrb	r2, [r7, #3]
 800f202:	b292      	uxth	r2, r2
 800f204:	4619      	mov	r1, r3
 800f206:	f000 f8f4 	bl	800f3f2 <USBH_ParseDevDesc>
  }
  return status;      
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,                      
                             uint16_t length)

{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af02      	add	r7, sp, #8
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1)  
  pData = phost->device.CfgDesc_Raw;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	331c      	adds	r3, #28
 800f224:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif  
  if((status = USBH_GetDescriptor(phost,
 800f226:	887b      	ldrh	r3, [r7, #2]
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f230:	2100      	movs	r1, #0
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f83d 	bl	800f2b2 <USBH_GetDescriptor>
 800f238:	4603      	mov	r3, r0
 800f23a:	72fb      	strb	r3, [r7, #11]
 800f23c:	7afb      	ldrb	r3, [r7, #11]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d107      	bne.n	800f252 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {
    
    /* Commands successfully sent and Response Received  */       
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f203 3332 	addw	r3, r3, #818	; 0x332
 800f248:	887a      	ldrh	r2, [r7, #2]
 800f24a:	68f9      	ldr	r1, [r7, #12]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f000 f940 	bl	800f4d2 <USBH_ParseCfgDesc>
                       pData,
                       length); 
    
  }
  return status;
 800f252:	7afb      	ldrb	r3, [r7, #11]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index, 
                                uint8_t *buff, 
                                uint16_t length)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af02      	add	r7, sp, #8
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	607a      	str	r2, [r7, #4]
 800f266:	461a      	mov	r2, r3
 800f268:	460b      	mov	r3, r1
 800f26a:	72fb      	strb	r3, [r7, #11]
 800f26c:	4613      	mov	r3, r2
 800f26e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800f270:	7afb      	ldrb	r3, [r7, #11]
 800f272:	b29b      	uxth	r3, r3
 800f274:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f278:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
                                  USB_DESC_STRING | string_index, 
                                  phost->device.Data,
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f280:	893b      	ldrh	r3, [r7, #8]
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	460b      	mov	r3, r1
 800f286:	2100      	movs	r1, #0
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f000 f812 	bl	800f2b2 <USBH_GetDescriptor>
 800f28e:	4603      	mov	r3, r0
 800f290:	75fb      	strb	r3, [r7, #23]
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d107      	bne.n	800f2a8 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */       
    USBH_ParseStringDesc(phost->device.Data,buff, length);    
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f29e:	893a      	ldrh	r2, [r7, #8]
 800f2a0:	6879      	ldr	r1, [r7, #4]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 fa17 	bl	800f6d6 <USBH_ParseStringDesc>
  }
  return status;
 800f2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3718      	adds	r7, #24
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,                          
                               uint8_t  req_type,
                               uint16_t value_idx, 
                               uint8_t* buff, 
                               uint16_t length )
{ 
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b084      	sub	sp, #16
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	60f8      	str	r0, [r7, #12]
 800f2ba:	607b      	str	r3, [r7, #4]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	72fb      	strb	r3, [r7, #11]
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	789b      	ldrb	r3, [r3, #2]
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d11c      	bne.n	800f306 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f2cc:	7afb      	ldrb	r3, [r7, #11]
 800f2ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2d2:	b2da      	uxtb	r2, r3
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2206      	movs	r2, #6
 800f2dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	893a      	ldrh	r2, [r7, #8]
 800f2e2:	825a      	strh	r2, [r3, #18]
    
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 800f2e4:	893b      	ldrh	r3, [r7, #8]
 800f2e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f2ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2ee:	d104      	bne.n	800f2fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f240 4209 	movw	r2, #1033	; 0x409
 800f2f6:	829a      	strh	r2, [r3, #20]
 800f2f8:	e002      	b.n	800f300 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length; 
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	8b3a      	ldrh	r2, [r7, #24]
 800f304:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff , length );     
 800f306:	8b3b      	ldrh	r3, [r7, #24]
 800f308:	461a      	mov	r2, r3
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f000 fa30 	bl	800f772 <USBH_CtlReq>
 800f312:	4603      	mov	r3, r0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost, 
                                   uint8_t DeviceAddress)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	789b      	ldrb	r3, [r3, #2]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d10f      	bne.n	800f350 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2205      	movs	r2, #5
 800f33a:	745a      	strb	r2, [r3, #17]
    
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f33c:	78fb      	ldrb	r3, [r7, #3]
 800f33e:	b29a      	uxth	r2, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2200      	movs	r2, #0
 800f34e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );
 800f350:	2200      	movs	r2, #0
 800f352:	2100      	movs	r1, #0
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fa0c 	bl	800f772 <USBH_CtlReq>
 800f35a:	4603      	mov	r3, r0
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <USBH_SetCfg>:
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, 
                               uint16_t cfg_idx)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	460b      	mov	r3, r1
 800f36e:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	789b      	ldrb	r3, [r3, #2]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d10e      	bne.n	800f396 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2209      	movs	r2, #9
 800f382:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	887a      	ldrh	r2, [r7, #2]
 800f388:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2200      	movs	r2, #0
 800f38e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0; 
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	82da      	strh	r2, [r3, #22]
  }
  
  return USBH_CtlReq(phost, 0 , 0 );      
 800f396:	2200      	movs	r2, #0
 800f398:	2100      	movs	r1, #0
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f9e9 	bl	800f772 <USBH_CtlReq>
 800f3a0:	4603      	mov	r3, r0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <USBH_ClrFeature>:
  * @param  hc_num: Host channel number 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost,
                                   uint8_t ep_num) 
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b082      	sub	sp, #8
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	789b      	ldrb	r3, [r3, #2]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d10f      	bne.n	800f3de <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	741a      	strb	r2, [r3, #16]
      USB_REQ_RECIPIENT_ENDPOINT |
        USB_REQ_TYPE_STANDARD;
    
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f3d0:	78fb      	ldrb	r3, [r7, #3]
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0;           
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0 , 0 );   
 800f3de:	2200      	movs	r2, #0
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f9c5 	bl	800f772 <USBH_CtlReq>
 800f3e8:	4603      	mov	r3, r0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc,
                                uint8_t *buf, 
                                uint16_t length)
{
 800f3f2:	b480      	push	{r7}
 800f3f4:	b085      	sub	sp, #20
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	60f8      	str	r0, [r7, #12]
 800f3fa:	60b9      	str	r1, [r7, #8]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	785a      	ldrb	r2, [r3, #1]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	3302      	adds	r3, #2
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	b29a      	uxth	r2, r3
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	3303      	adds	r3, #3
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	b29b      	uxth	r3, r3
 800f420:	021b      	lsls	r3, r3, #8
 800f422:	b29b      	uxth	r3, r3
 800f424:	4413      	add	r3, r2
 800f426:	b29a      	uxth	r2, r3
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	791a      	ldrb	r2, [r3, #4]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	795a      	ldrb	r2, [r3, #5]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	799a      	ldrb	r2, [r3, #6]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	79da      	ldrb	r2, [r3, #7]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	71da      	strb	r2, [r3, #7]
  
  if (length > 8)
 800f44c:	88fb      	ldrh	r3, [r7, #6]
 800f44e:	2b08      	cmp	r3, #8
 800f450:	d939      	bls.n	800f4c6 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for 
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	3308      	adds	r3, #8
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	b29a      	uxth	r2, r3
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	3309      	adds	r3, #9
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	b29b      	uxth	r3, r3
 800f462:	021b      	lsls	r3, r3, #8
 800f464:	b29b      	uxth	r3, r3
 800f466:	4413      	add	r3, r2
 800f468:	b29a      	uxth	r2, r3
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	330a      	adds	r3, #10
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	b29a      	uxth	r2, r3
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	330b      	adds	r3, #11
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	021b      	lsls	r3, r3, #8
 800f480:	b29b      	uxth	r3, r3
 800f482:	4413      	add	r3, r2
 800f484:	b29a      	uxth	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	330c      	adds	r3, #12
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	b29a      	uxth	r2, r3
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	330d      	adds	r3, #13
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	021b      	lsls	r3, r3, #8
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	4413      	add	r3, r2
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	7b9a      	ldrb	r2, [r3, #14]
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	7bda      	ldrb	r2, [r3, #15]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	7c1a      	ldrb	r2, [r3, #16]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	7c5a      	ldrb	r2, [r3, #17]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	745a      	strb	r2, [r3, #17]
  }
}
 800f4c6:	bf00      	nop
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <USBH_ParseCfgDesc>:
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc,
                               uint8_t *buf, 
                               uint16_t length)
{  
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b08a      	sub	sp, #40	; 0x28
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	60f8      	str	r0, [r7, #12]
 800f4da:	60b9      	str	r1, [r7, #8]
 800f4dc:	4613      	mov	r3, r2
 800f4de:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;  
  USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                      ptr;
  int8_t                        if_ix = 0;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int8_t                        ep_ix = 0;  
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  
  pdesc   = (USBH_DescHeader_t *)buf;
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	781a      	ldrb	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	785a      	ldrb	r2, [r3, #1]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	3302      	adds	r3, #2
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	3303      	adds	r3, #3
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	b29b      	uxth	r3, r3
 800f514:	021b      	lsls	r3, r3, #8
 800f516:	b29b      	uxth	r3, r3
 800f518:	4413      	add	r3, r2
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	791a      	ldrb	r2, [r3, #4]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	795a      	ldrb	r2, [r3, #5]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	799a      	ldrb	r2, [r3, #6]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	79da      	ldrb	r2, [r3, #7]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	7a1a      	ldrb	r2, [r3, #8]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	721a      	strb	r2, [r3, #8]
  
  
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f548:	88fb      	ldrh	r3, [r7, #6]
 800f54a:	2b09      	cmp	r3, #9
 800f54c:	d963      	bls.n	800f616 <USBH_ParseCfgDesc+0x144>
  {
    ptr = USB_LEN_CFG_DESC;
 800f54e:	2309      	movs	r3, #9
 800f550:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f552:	2300      	movs	r3, #0
 800f554:	61fb      	str	r3, [r7, #28]
    
    
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800f556:	e055      	b.n	800f604 <USBH_ParseCfgDesc+0x132>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f558:	f107 0316 	add.w	r3, r7, #22
 800f55c:	4619      	mov	r1, r3
 800f55e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f560:	f000 f8ec 	bl	800f73c <USBH_GetNextDesc>
 800f564:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800f566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f568:	785b      	ldrb	r3, [r3, #1]
 800f56a:	2b04      	cmp	r3, #4
 800f56c:	d14a      	bne.n	800f604 <USBH_ParseCfgDesc+0x132>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f56e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f572:	221a      	movs	r2, #26
 800f574:	fb02 f303 	mul.w	r3, r2, r3
 800f578:	3308      	adds	r3, #8
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	4413      	add	r3, r2
 800f57e:	3302      	adds	r3, #2
 800f580:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);            
 800f582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f584:	69f8      	ldr	r0, [r7, #28]
 800f586:	f000 f84a 	bl	800f61e <USBH_ParseInterfaceDesc>
        
        ep_ix = 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;        
 800f590:	2300      	movs	r3, #0
 800f592:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f594:	e024      	b.n	800f5e0 <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 800f596:	f107 0316 	add.w	r3, r7, #22
 800f59a:	4619      	mov	r1, r3
 800f59c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f59e:	f000 f8cd 	bl	800f73c <USBH_GetNextDesc>
 800f5a2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	785b      	ldrb	r3, [r3, #1]
 800f5a8:	2b05      	cmp	r3, #5
 800f5aa:	d119      	bne.n	800f5e0 <USBH_ParseCfgDesc+0x10e>
          {  
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f5ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f5b0:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 800f5b4:	3201      	adds	r2, #1
 800f5b6:	00d2      	lsls	r2, r2, #3
 800f5b8:	211a      	movs	r1, #26
 800f5ba:	fb01 f303 	mul.w	r3, r1, r3
 800f5be:	4413      	add	r3, r2
 800f5c0:	3308      	adds	r3, #8
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	3304      	adds	r3, #4
 800f5c8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
 800f5ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5cc:	69b8      	ldr	r0, [r7, #24]
 800f5ce:	f000 f855 	bl	800f67c <USBH_ParseEPDesc>
            ep_ix++;
 800f5d2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	3301      	adds	r3, #1
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f5e0:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800f5e4:	69fa      	ldr	r2, [r7, #28]
 800f5e6:	7912      	ldrb	r2, [r2, #4]
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	da04      	bge.n	800f5f6 <USBH_ParseCfgDesc+0x124>
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	885a      	ldrh	r2, [r3, #2]
 800f5f0:	8afb      	ldrh	r3, [r7, #22]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d8cf      	bhi.n	800f596 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f5f6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 800f604:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f608:	2b01      	cmp	r3, #1
 800f60a:	dc04      	bgt.n	800f616 <USBH_ParseCfgDesc+0x144>
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	885a      	ldrh	r2, [r3, #2]
 800f610:	8afb      	ldrh	r3, [r7, #22]
 800f612:	429a      	cmp	r2, r3
 800f614:	d8a0      	bhi.n	800f558 <USBH_ParseCfgDesc+0x86>
      }
    }
  }  
}
 800f616:	bf00      	nop
 800f618:	3728      	adds	r7, #40	; 0x28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}

0800f61e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor, 
                                      uint8_t *buf)
{
 800f61e:	b480      	push	{r7}
 800f620:	b083      	sub	sp, #12
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
 800f626:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	781a      	ldrb	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	785a      	ldrb	r2, [r3, #1]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	789a      	ldrb	r2, [r3, #2]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	78da      	ldrb	r2, [r3, #3]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	791a      	ldrb	r2, [r3, #4]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	795a      	ldrb	r2, [r3, #5]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	799a      	ldrb	r2, [r3, #6]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	79da      	ldrb	r2, [r3, #7]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	7a1a      	ldrb	r2, [r3, #8]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	721a      	strb	r2, [r3, #8]
}
 800f670:	bf00      	nop
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor, 
                               uint8_t *buf)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	781a      	ldrb	r2, [r3, #0]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	785a      	ldrb	r2, [r3, #1]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	789a      	ldrb	r2, [r3, #2]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	78da      	ldrb	r2, [r3, #3]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	3304      	adds	r3, #4
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	3305      	adds	r3, #5
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	021b      	lsls	r3, r3, #8
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	4413      	add	r3, r2
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	799a      	ldrb	r2, [r3, #6]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	719a      	strb	r2, [r3, #6]
}
 800f6ca:	bf00      	nop
 800f6cc:	370c      	adds	r7, #12
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <USBH_ParseStringDesc>:
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, 
                                  uint8_t* pdest, 
                                  uint16_t length)
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	b087      	sub	sp, #28
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	80fb      	strh	r3, [r7, #6]
  */
  
  /* Check which is lower size, the Size of string or the length of bytes read 
  from the device */
  
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	2b03      	cmp	r3, #3
 800f6ec:	d120      	bne.n	800f730 <USBH_ParseStringDesc+0x5a>
  { /* Make sure the Descriptor is String Type */
    
    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */      
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	1e9a      	subs	r2, r3, #2
 800f6f4:	88fb      	ldrh	r3, [r7, #6]
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	bfa8      	it	ge
 800f6fa:	4613      	movge	r3, r2
 800f6fc:	82bb      	strh	r3, [r7, #20]
    psrc += 2; /* Adjust the offset ignoring the String Len and Descriptor type */
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	3302      	adds	r3, #2
 800f702:	60fb      	str	r3, [r7, #12]
    
    for (idx = 0; idx < strlength; idx+=2 )
 800f704:	2300      	movs	r3, #0
 800f706:	82fb      	strh	r3, [r7, #22]
 800f708:	e00b      	b.n	800f722 <USBH_ParseStringDesc+0x4c>
    {/* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f70a:	8afb      	ldrh	r3, [r7, #22]
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	4413      	add	r3, r2
 800f710:	781a      	ldrb	r2, [r3, #0]
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	3301      	adds	r3, #1
 800f71a:	60bb      	str	r3, [r7, #8]
    for (idx = 0; idx < strlength; idx+=2 )
 800f71c:	8afb      	ldrh	r3, [r7, #22]
 800f71e:	3302      	adds	r3, #2
 800f720:	82fb      	strh	r3, [r7, #22]
 800f722:	8afa      	ldrh	r2, [r7, #22]
 800f724:	8abb      	ldrh	r3, [r7, #20]
 800f726:	429a      	cmp	r2, r3
 800f728:	d3ef      	bcc.n	800f70a <USBH_ParseStringDesc+0x34>
    }  
    *pdest = 0; /* mark end of string */  
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	2200      	movs	r2, #0
 800f72e:	701a      	strb	r2, [r3, #0]
  }
}
 800f730:	bf00      	nop
 800f732:	371c      	adds	r7, #28
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;
 
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	881a      	ldrh	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	4413      	add	r3, r2
 800f752:	b29a      	uxth	r2, r3
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
         ((USBH_DescHeader_t *)pbuf)->bLength);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4413      	add	r3, r2
 800f762:	60fb      	str	r3, [r7, #12]
 
  return(pnext);
 800f764:	68fb      	ldr	r3, [r7, #12]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3714      	adds	r7, #20
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr

0800f772 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b086      	sub	sp, #24
 800f776:	af00      	add	r7, sp, #0
 800f778:	60f8      	str	r0, [r7, #12]
 800f77a:	60b9      	str	r1, [r7, #8]
 800f77c:	4613      	mov	r3, r2
 800f77e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f780:	2301      	movs	r3, #1
 800f782:	75fb      	strb	r3, [r7, #23]
  
  switch (phost->RequestState)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	789b      	ldrb	r3, [r3, #2]
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d002      	beq.n	800f792 <USBH_CtlReq+0x20>
 800f78c:	2b02      	cmp	r3, #2
 800f78e:	d017      	beq.n	800f7c0 <USBH_CtlReq+0x4e>
      status = USBH_FAIL;
    }   
    break;
    
  default:
    break; 
 800f790:	e030      	b.n	800f7f4 <USBH_CtlReq+0x82>
    phost->Control.buff = buff; 
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	68ba      	ldr	r2, [r7, #8]
 800f796:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	88fa      	ldrh	r2, [r7, #6]
 800f79c:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;  
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2202      	movs	r2, #2
 800f7a8:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	75fb      	strb	r3, [r7, #23]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	2103      	movs	r1, #3
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fc fe2f 	bl	800c41c <osMessagePut>
    break;
 800f7be:	e019      	b.n	800f7f4 <USBH_CtlReq+0x82>
    status = USBH_HandleControl(phost);
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 f81d 	bl	800f800 <USBH_HandleControl>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	75fb      	strb	r3, [r7, #23]
     if (status == USBH_OK) 
 800f7ca:	7dfb      	ldrb	r3, [r7, #23]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d108      	bne.n	800f7e2 <USBH_CtlReq+0x70>
      phost->RequestState = CMD_SEND;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;  
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;      
 800f7dc:	2300      	movs	r3, #0
 800f7de:	75fb      	strb	r3, [r7, #23]
    break;
 800f7e0:	e007      	b.n	800f7f2 <USBH_CtlReq+0x80>
    else if  (status == USBH_FAIL)
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d104      	bne.n	800f7f2 <USBH_CtlReq+0x80>
      phost->RequestState = CMD_SEND;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	709a      	strb	r2, [r3, #2]
      status = USBH_FAIL;
 800f7ee:	2302      	movs	r3, #2
 800f7f0:	75fb      	strb	r3, [r7, #23]
    break;
 800f7f2:	bf00      	nop
  }
  return status;
 800f7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3718      	adds	r7, #24
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
	...

0800f800 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af02      	add	r7, sp, #8
 800f806:	6078      	str	r0, [r7, #4]
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 800f808:	2301      	movs	r3, #1
 800f80a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f80c:	2300      	movs	r3, #0
 800f80e:	73bb      	strb	r3, [r7, #14]
  
  switch (phost->Control.state)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	7e1b      	ldrb	r3, [r3, #24]
 800f814:	3b01      	subs	r3, #1
 800f816:	2b0a      	cmp	r3, #10
 800f818:	f200 81c1 	bhi.w	800fb9e <USBH_HandleControl+0x39e>
 800f81c:	a201      	add	r2, pc, #4	; (adr r2, 800f824 <USBH_HandleControl+0x24>)
 800f81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f822:	bf00      	nop
 800f824:	0800f851 	.word	0x0800f851
 800f828:	0800f86b 	.word	0x0800f86b
 800f82c:	0800f8ef 	.word	0x0800f8ef
 800f830:	0800f915 	.word	0x0800f915
 800f834:	0800f97d 	.word	0x0800f97d
 800f838:	0800f9a9 	.word	0x0800f9a9
 800f83c:	0800fa3b 	.word	0x0800fa3b
 800f840:	0800fa5d 	.word	0x0800fa5d
 800f844:	0800fac9 	.word	0x0800fac9
 800f848:	0800faf1 	.word	0x0800faf1
 800f84c:	0800fb5f 	.word	0x0800fb5f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
	                   (uint8_t *)phost->Control.setup.d8 , 
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f103 0110 	add.w	r1, r3, #16
    USBH_CtlSendSetup     (phost, 
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	795b      	ldrb	r3, [r3, #5]
 800f85a:	461a      	mov	r2, r3
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 f9af 	bl	800fbc0 <USBH_CtlSendSetup>
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2202      	movs	r2, #2
 800f866:	761a      	strb	r2, [r3, #24]
    break; 
 800f868:	e1a4      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    
  case CTRL_SETUP_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	795b      	ldrb	r3, [r3, #5]
 800f86e:	4619      	mov	r1, r3
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f004 fbfb 	bl	801406c <USBH_LL_GetURBState>
 800f876:	4603      	mov	r3, r0
 800f878:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800f87a:	7bbb      	ldrb	r3, [r7, #14]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d126      	bne.n	800f8ce <USBH_HandleControl+0xce>
    { 
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	7c1b      	ldrb	r3, [r3, #16]
 800f884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f888:	737b      	strb	r3, [r7, #13]
      
      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0 )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	8adb      	ldrh	r3, [r3, #22]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00a      	beq.n	800f8a8 <USBH_HandleControl+0xa8>
      {        
        if (direction == USB_D2H)
 800f892:	7b7b      	ldrb	r3, [r7, #13]
 800f894:	2b80      	cmp	r3, #128	; 0x80
 800f896:	d103      	bne.n	800f8a0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2203      	movs	r2, #3
 800f89c:	761a      	strb	r2, [r3, #24]
 800f89e:	e00d      	b.n	800f8bc <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2205      	movs	r2, #5
 800f8a4:	761a      	strb	r2, [r3, #24]
 800f8a6:	e009      	b.n	800f8bc <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800f8a8:	7b7b      	ldrb	r3, [r7, #13]
 800f8aa:	2b80      	cmp	r3, #128	; 0x80
 800f8ac:	d103      	bne.n	800f8b6 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2209      	movs	r2, #9
 800f8b2:	761a      	strb	r2, [r3, #24]
 800f8b4:	e002      	b.n	800f8bc <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2207      	movs	r2, #7
 800f8ba:	761a      	strb	r2, [r3, #24]
        } 
      }          
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2103      	movs	r1, #3
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fc fda8 	bl	800c41c <osMessagePut>
      phost->Control.state = CTRL_ERROR;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }    
    break;
 800f8cc:	e169      	b.n	800fba2 <USBH_HandleControl+0x3a2>
    else if(URB_Status == USBH_URB_ERROR)
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	2b04      	cmp	r3, #4
 800f8d2:	f040 8166 	bne.w	800fba2 <USBH_HandleControl+0x3a2>
      phost->Control.state = CTRL_ERROR;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	220b      	movs	r2, #11
 800f8da:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	2103      	movs	r1, #3
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fc fd98 	bl	800c41c <osMessagePut>
    break;
 800f8ec:	e159      	b.n	800fba2 <USBH_HandleControl+0x3a2>
    
  case CTRL_DATA_IN:  
    /* Issue an IN token */ 
     phost->Control.timer = phost->Timer;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6899      	ldr	r1, [r3, #8]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	899a      	ldrh	r2, [r3, #12]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	791b      	ldrb	r3, [r3, #4]
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 f999 	bl	800fc3e <USBH_CtlReceiveData>
                        phost->Control.buff, 
                        phost->Control.length,
                        phost->Control.pipe_in);
 
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2204      	movs	r2, #4
 800f910:	761a      	strb	r2, [r3, #24]
    break;    
 800f912:	e14f      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    
  case CTRL_DATA_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	791b      	ldrb	r3, [r3, #4]
 800f918:	4619      	mov	r1, r3
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f004 fba6 	bl	801406c <USBH_LL_GetURBState>
 800f920:	4603      	mov	r3, r0
 800f922:	73bb      	strb	r3, [r7, #14]
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800f924:	7bbb      	ldrb	r3, [r7, #14]
 800f926:	2b01      	cmp	r3, #1
 800f928:	d10a      	bne.n	800f940 <USBH_HandleControl+0x140>
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2209      	movs	r2, #9
 800f92e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f936:	2200      	movs	r2, #0
 800f938:	2103      	movs	r1, #3
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fc fd6e 	bl	800c41c <osMessagePut>
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 800f940:	7bbb      	ldrb	r3, [r7, #14]
 800f942:	2b05      	cmp	r3, #5
 800f944:	d10a      	bne.n	800f95c <USBH_HandleControl+0x15c>
    { 
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800f946:	2303      	movs	r3, #3
 800f948:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f950:	2200      	movs	r2, #0
 800f952:	2103      	movs	r1, #3
 800f954:	4618      	mov	r0, r3
 800f956:	f7fc fd61 	bl	800c41c <osMessagePut>
      phost->Control.state = CTRL_ERROR;  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800f95a:	e124      	b.n	800fba6 <USBH_HandleControl+0x3a6>
    else if (URB_Status == USBH_URB_ERROR)
 800f95c:	7bbb      	ldrb	r3, [r7, #14]
 800f95e:	2b04      	cmp	r3, #4
 800f960:	f040 8121 	bne.w	800fba6 <USBH_HandleControl+0x3a6>
      phost->Control.state = CTRL_ERROR;  
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	220b      	movs	r2, #11
 800f968:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f970:	2200      	movs	r2, #0
 800f972:	2103      	movs	r1, #3
 800f974:	4618      	mov	r0, r3
 800f976:	f7fc fd51 	bl	800c41c <osMessagePut>
    break;
 800f97a:	e114      	b.n	800fba6 <USBH_HandleControl+0x3a6>
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6899      	ldr	r1, [r3, #8]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	899a      	ldrh	r2, [r3, #12]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	7958      	ldrb	r0, [r3, #5]
 800f988:	2301      	movs	r3, #1
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	4603      	mov	r3, r0
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f000 f930 	bl	800fbf4 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2206      	movs	r2, #6
 800f9a4:	761a      	strb	r2, [r3, #24]
    break;
 800f9a6:	e105      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	795b      	ldrb	r3, [r3, #5]
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f004 fb5c 	bl	801406c <USBH_LL_GetURBState>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73bb      	strb	r3, [r7, #14]
    
    if  (URB_Status == USBH_URB_DONE)
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d10b      	bne.n	800f9d6 <USBH_HandleControl+0x1d6>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2207      	movs	r2, #7
 800f9c2:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	2103      	movs	r1, #3
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fc fd24 	bl	800c41c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    } 
    break;
 800f9d4:	e0e9      	b.n	800fbaa <USBH_HandleControl+0x3aa>
    else if  (URB_Status == USBH_URB_STALL) 
 800f9d6:	7bbb      	ldrb	r3, [r7, #14]
 800f9d8:	2b05      	cmp	r3, #5
 800f9da:	d10d      	bne.n	800f9f8 <USBH_HandleControl+0x1f8>
      phost->Control.state = CTRL_STALLED; 
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	220c      	movs	r2, #12
 800f9e0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800f9e2:	2303      	movs	r3, #3
 800f9e4:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	2103      	movs	r1, #3
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fc fd13 	bl	800c41c <osMessagePut>
    break;
 800f9f6:	e0d8      	b.n	800fbaa <USBH_HandleControl+0x3aa>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800f9f8:	7bbb      	ldrb	r3, [r7, #14]
 800f9fa:	2b02      	cmp	r3, #2
 800f9fc:	d10b      	bne.n	800fa16 <USBH_HandleControl+0x216>
      phost->Control.state = CTRL_DATA_OUT;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2205      	movs	r2, #5
 800fa02:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	2103      	movs	r1, #3
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fc fd04 	bl	800c41c <osMessagePut>
    break;
 800fa14:	e0c9      	b.n	800fbaa <USBH_HandleControl+0x3aa>
    else if (URB_Status == USBH_URB_ERROR)
 800fa16:	7bbb      	ldrb	r3, [r7, #14]
 800fa18:	2b04      	cmp	r3, #4
 800fa1a:	f040 80c6 	bne.w	800fbaa <USBH_HandleControl+0x3aa>
      phost->Control.state = CTRL_ERROR;  
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	220b      	movs	r2, #11
 800fa22:	761a      	strb	r2, [r3, #24]
      status = USBH_FAIL;    
 800fa24:	2302      	movs	r3, #2
 800fa26:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fa2e:	2200      	movs	r2, #0
 800fa30:	2103      	movs	r1, #3
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fc fcf2 	bl	800c41c <osMessagePut>
    break;
 800fa38:	e0b7      	b.n	800fbaa <USBH_HandleControl+0x3aa>
    
    
  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	791b      	ldrb	r3, [r3, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	2100      	movs	r1, #0
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f8fb 	bl	800fc3e <USBH_CtlReceiveData>
                         0,
                         0,
                         phost->Control.pipe_in);
    phost->Control.timer = phost->Timer;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800fa4e:	b29a      	uxth	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2208      	movs	r2, #8
 800fa58:	761a      	strb	r2, [r3, #24]
    
    break;
 800fa5a:	e0ab      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    
  case CTRL_STATUS_IN_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	791b      	ldrb	r3, [r3, #4]
 800fa60:	4619      	mov	r1, r3
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f004 fb02 	bl	801406c <USBH_LL_GetURBState>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73bb      	strb	r3, [r7, #14]
    
    if  ( URB_Status == USBH_URB_DONE)
 800fa6c:	7bbb      	ldrb	r3, [r7, #14]
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d10d      	bne.n	800fa8e <USBH_HandleControl+0x28e>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	220d      	movs	r2, #13
 800fa76:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fa82:	2200      	movs	r2, #0
 800fa84:	2103      	movs	r1, #3
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fc fcc8 	bl	800c41c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800fa8c:	e08f      	b.n	800fbae <USBH_HandleControl+0x3ae>
    else if (URB_Status == USBH_URB_ERROR)
 800fa8e:	7bbb      	ldrb	r3, [r7, #14]
 800fa90:	2b04      	cmp	r3, #4
 800fa92:	d10b      	bne.n	800faac <USBH_HandleControl+0x2ac>
      phost->Control.state = CTRL_ERROR;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	220b      	movs	r2, #11
 800fa98:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800faa0:	2200      	movs	r2, #0
 800faa2:	2103      	movs	r1, #3
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fc fcb9 	bl	800c41c <osMessagePut>
    break;
 800faaa:	e080      	b.n	800fbae <USBH_HandleControl+0x3ae>
     else if(URB_Status == USBH_URB_STALL)
 800faac:	7bbb      	ldrb	r3, [r7, #14]
 800faae:	2b05      	cmp	r3, #5
 800fab0:	d17d      	bne.n	800fbae <USBH_HandleControl+0x3ae>
      status = USBH_NOT_SUPPORTED;
 800fab2:	2303      	movs	r3, #3
 800fab4:	73fb      	strb	r3, [r7, #15]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fabc:	2200      	movs	r2, #0
 800fabe:	2103      	movs	r1, #3
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fc fcab 	bl	800c41c <osMessagePut>
    break;
 800fac6:	e072      	b.n	800fbae <USBH_HandleControl+0x3ae>
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	795a      	ldrb	r2, [r3, #5]
 800facc:	2301      	movs	r3, #1
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	4613      	mov	r3, r2
 800fad2:	2200      	movs	r2, #0
 800fad4:	2100      	movs	r1, #0
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f88c 	bl	800fbf4 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	220a      	movs	r2, #10
 800faec:	761a      	strb	r2, [r3, #24]
    break;
 800faee:	e061      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	795b      	ldrb	r3, [r3, #5]
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f004 fab8 	bl	801406c <USBH_LL_GetURBState>
 800fafc:	4603      	mov	r3, r0
 800fafe:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800fb00:	7bbb      	ldrb	r3, [r7, #14]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d10d      	bne.n	800fb22 <USBH_HandleControl+0x322>
    { 
      status = USBH_OK;      
 800fb06:	2300      	movs	r3, #0
 800fb08:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE; 
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	220d      	movs	r2, #13
 800fb0e:	761a      	strb	r2, [r3, #24]
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fb16:	2200      	movs	r2, #0
 800fb18:	2103      	movs	r1, #3
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fc fc7e 	bl	800c41c <osMessagePut>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    break;
 800fb20:	e047      	b.n	800fbb2 <USBH_HandleControl+0x3b2>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800fb22:	7bbb      	ldrb	r3, [r7, #14]
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d10b      	bne.n	800fb40 <USBH_HandleControl+0x340>
      phost->Control.state = CTRL_STATUS_OUT;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2209      	movs	r2, #9
 800fb2c:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fb34:	2200      	movs	r2, #0
 800fb36:	2103      	movs	r1, #3
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fc fc6f 	bl	800c41c <osMessagePut>
    break;
 800fb3e:	e038      	b.n	800fbb2 <USBH_HandleControl+0x3b2>
    else if (URB_Status == USBH_URB_ERROR)
 800fb40:	7bbb      	ldrb	r3, [r7, #14]
 800fb42:	2b04      	cmp	r3, #4
 800fb44:	d135      	bne.n	800fbb2 <USBH_HandleControl+0x3b2>
      phost->Control.state = CTRL_ERROR; 
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	220b      	movs	r2, #11
 800fb4a:	761a      	strb	r2, [r3, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fb52:	2200      	movs	r2, #0
 800fb54:	2103      	movs	r1, #3
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fc fc60 	bl	800c41c <osMessagePut>
    break;
 800fb5c:	e029      	b.n	800fbb2 <USBH_HandleControl+0x3b2>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	7e5b      	ldrb	r3, [r3, #25]
 800fb62:	3301      	adds	r3, #1
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	765a      	strb	r2, [r3, #25]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	7e5b      	ldrb	r3, [r3, #25]
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d809      	bhi.n	800fb86 <USBH_HandleControl+0x386>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f004 f918 	bl	8013da8 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2201      	movs	r2, #1
 800fb82:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800fb84:	e016      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb8c:	2106      	movs	r1, #6
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	4798      	blx	r3
      phost->Control.errorcount = 0;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800fb98:	2302      	movs	r3, #2
 800fb9a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb9c:	e00a      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    
  default:
    break;
 800fb9e:	bf00      	nop
 800fba0:	e008      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    break;
 800fba2:	bf00      	nop
 800fba4:	e006      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    break;
 800fba6:	bf00      	nop
 800fba8:	e004      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    break;
 800fbaa:	bf00      	nop
 800fbac:	e002      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    break;
 800fbae:	bf00      	nop
 800fbb0:	e000      	b.n	800fbb4 <USBH_HandleControl+0x3b4>
    break;
 800fbb2:	bf00      	nop
  }
  return status;
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop

0800fbc0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b088      	sub	sp, #32
 800fbc4:	af04      	add	r7, sp, #16
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fbce:	79f9      	ldrb	r1, [r7, #7]
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	9303      	str	r3, [sp, #12]
 800fbd4:	2308      	movs	r3, #8
 800fbd6:	9302      	str	r3, [sp, #8]
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	9301      	str	r3, [sp, #4]
 800fbdc:	2300      	movs	r3, #0
 800fbde:	9300      	str	r3, [sp, #0]
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f004 f9f9 	bl	8013fdc <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3710      	adds	r7, #16
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b088      	sub	sp, #32
 800fbf8:	af04      	add	r7, sp, #16
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	4611      	mov	r1, r2
 800fc00:	461a      	mov	r2, r3
 800fc02:	460b      	mov	r3, r1
 800fc04:	80fb      	strh	r3, [r7, #6]
 800fc06:	4613      	mov	r3, r2
 800fc08:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d001      	beq.n	800fc18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fc18:	7979      	ldrb	r1, [r7, #5]
 800fc1a:	7e3b      	ldrb	r3, [r7, #24]
 800fc1c:	9303      	str	r3, [sp, #12]
 800fc1e:	88fb      	ldrh	r3, [r7, #6]
 800fc20:	9302      	str	r3, [sp, #8]
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	2301      	movs	r3, #1
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	68f8      	ldr	r0, [r7, #12]
 800fc30:	f004 f9d4 	bl	8013fdc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b088      	sub	sp, #32
 800fc42:	af04      	add	r7, sp, #16
 800fc44:	60f8      	str	r0, [r7, #12]
 800fc46:	60b9      	str	r1, [r7, #8]
 800fc48:	4611      	mov	r1, r2
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	80fb      	strh	r3, [r7, #6]
 800fc50:	4613      	mov	r3, r2
 800fc52:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fc54:	7979      	ldrb	r1, [r7, #5]
 800fc56:	2300      	movs	r3, #0
 800fc58:	9303      	str	r3, [sp, #12]
 800fc5a:	88fb      	ldrh	r3, [r7, #6]
 800fc5c:	9302      	str	r3, [sp, #8]
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	9301      	str	r3, [sp, #4]
 800fc62:	2301      	movs	r3, #1
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	2300      	movs	r3, #0
 800fc68:	2201      	movs	r2, #1
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f004 f9b6 	bl	8013fdc <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
 800fc70:	2300      	movs	r3, #0
  
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b088      	sub	sp, #32
 800fc7e:	af04      	add	r7, sp, #16
 800fc80:	60f8      	str	r0, [r7, #12]
 800fc82:	60b9      	str	r1, [r7, #8]
 800fc84:	4611      	mov	r1, r2
 800fc86:	461a      	mov	r2, r3
 800fc88:	460b      	mov	r3, r1
 800fc8a:	80fb      	strh	r3, [r7, #6]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	763b      	strb	r3, [r7, #24]
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fc9e:	7979      	ldrb	r1, [r7, #5]
 800fca0:	7e3b      	ldrb	r3, [r7, #24]
 800fca2:	9303      	str	r3, [sp, #12]
 800fca4:	88fb      	ldrh	r3, [r7, #6]
 800fca6:	9302      	str	r3, [sp, #8]
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	9301      	str	r3, [sp, #4]
 800fcac:	2301      	movs	r3, #1
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f004 f991 	bl	8013fdc <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b088      	sub	sp, #32
 800fcc8:	af04      	add	r7, sp, #16
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	4611      	mov	r1, r2
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	80fb      	strh	r3, [r7, #6]
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fcda:	7979      	ldrb	r1, [r7, #5]
 800fcdc:	2300      	movs	r3, #0
 800fcde:	9303      	str	r3, [sp, #12]
 800fce0:	88fb      	ldrh	r3, [r7, #6]
 800fce2:	9302      	str	r3, [sp, #8]
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	9301      	str	r3, [sp, #4]
 800fce8:	2301      	movs	r3, #1
 800fcea:	9300      	str	r3, [sp, #0]
 800fcec:	2302      	movs	r3, #2
 800fcee:	2201      	movs	r2, #1
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f004 f973 	bl	8013fdc <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */                          
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af04      	add	r7, sp, #16
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	4608      	mov	r0, r1
 800fd0a:	4611      	mov	r1, r2
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	4603      	mov	r3, r0
 800fd10:	70fb      	strb	r3, [r7, #3]
 800fd12:	460b      	mov	r3, r1
 800fd14:	70bb      	strb	r3, [r7, #2]
 800fd16:	4613      	mov	r3, r2
 800fd18:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800fd1a:	7878      	ldrb	r0, [r7, #1]
 800fd1c:	78ba      	ldrb	r2, [r7, #2]
 800fd1e:	78f9      	ldrb	r1, [r7, #3]
 800fd20:	8b3b      	ldrh	r3, [r7, #24]
 800fd22:	9302      	str	r3, [sp, #8]
 800fd24:	7d3b      	ldrb	r3, [r7, #20]
 800fd26:	9301      	str	r3, [sp, #4]
 800fd28:	7c3b      	ldrb	r3, [r7, #16]
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f004 f8d8 	bl	8013ee4 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  
  return USBH_OK; 
 800fd34:	2300      	movs	r3, #0

}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b082      	sub	sp, #8
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800fd4a:	78fb      	ldrb	r3, [r7, #3]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f004 f90e 	bl	8013f70 <USBH_LL_ClosePipe>
  
  return USBH_OK; 
 800fd54:	2300      	movs	r3, #0

}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b084      	sub	sp, #16
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
 800fd66:	460b      	mov	r3, r1
 800fd68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;
  
  pipe =  USBH_GetFreePipe(phost);
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 f836 	bl	800fddc <USBH_GetFreePipe>
 800fd70:	4603      	mov	r3, r0
 800fd72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFF)
 800fd74:	89fb      	ldrh	r3, [r7, #14]
 800fd76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d009      	beq.n	800fd92 <USBH_AllocPipe+0x34>
  {
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800fd7e:	89fb      	ldrh	r3, [r7, #14]
 800fd80:	78fa      	ldrb	r2, [r7, #3]
 800fd82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd86:	4611      	mov	r1, r2
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	33de      	adds	r3, #222	; 0xde
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	4413      	add	r3, r2
 800fd90:	6059      	str	r1, [r3, #4]
  }
  return pipe;
 800fd92:	89fb      	ldrh	r3, [r7, #14]
 800fd94:	b2db      	uxtb	r3, r3
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}

0800fd9e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fd9e:	b480      	push	{r7}
 800fda0:	b083      	sub	sp, #12
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	460b      	mov	r3, r1
 800fda8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 800fdaa:	78fb      	ldrb	r3, [r7, #3]
 800fdac:	2b0a      	cmp	r3, #10
 800fdae:	d80e      	bhi.n	800fdce <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 800fdb0:	78f8      	ldrb	r0, [r7, #3]
 800fdb2:	78fb      	ldrb	r3, [r7, #3]
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	33de      	adds	r3, #222	; 0xde
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4413      	add	r3, r2
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800fdc2:	6879      	ldr	r1, [r7, #4]
 800fdc4:	f100 03de 	add.w	r3, r0, #222	; 0xde
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	440b      	add	r3, r1
 800fdcc:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b085      	sub	sp, #20
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0;
 800fde4:	2300      	movs	r3, #0
 800fde6:	73fb      	strb	r3, [r7, #15]
  
  for (idx = 0 ; idx < 11 ; idx++)
 800fde8:	2300      	movs	r3, #0
 800fdea:	73fb      	strb	r3, [r7, #15]
 800fdec:	e00f      	b.n	800fe0e <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800fdee:	7bfb      	ldrb	r3, [r7, #15]
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	33de      	adds	r3, #222	; 0xde
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4413      	add	r3, r2
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d102      	bne.n	800fe08 <USBH_GetFreePipe+0x2c>
	{
	   return idx;
 800fe02:	7bfb      	ldrb	r3, [r7, #15]
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	e007      	b.n	800fe18 <USBH_GetFreePipe+0x3c>
  for (idx = 0 ; idx < 11 ; idx++)
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	73fb      	strb	r3, [r7, #15]
 800fe0e:	7bfb      	ldrb	r3, [r7, #15]
 800fe10:	2b0a      	cmp	r3, #10
 800fe12:	d9ec      	bls.n	800fdee <USBH_GetFreePipe+0x12>
	} 
  }
  return 0xFFFF;
 800fe14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3714      	adds	r7, #20
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
{	 
 800fe24:	b590      	push	{r4, r7, lr}
 800fe26:	b089      	sub	sp, #36	; 0x24
 800fe28:	af04      	add	r7, sp, #16
 800fe2a:	6078      	str	r0, [r7, #4]
  uint8_t interface = 0; 
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800fe30:	2302      	movs	r3, #2
 800fe32:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle;
  
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fe3a:	7919      	ldrb	r1, [r3, #4]
 800fe3c:	2350      	movs	r3, #80	; 0x50
 800fe3e:	2206      	movs	r2, #6
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7fe fdf5 	bl	800ea30 <USBH_FindInterface>
 800fe46:	4603      	mov	r3, r0
 800fe48:	73bb      	strb	r3, [r7, #14]
  
  if(interface == 0xFF) /* Not Valid Interface */
 800fe4a:	7bbb      	ldrb	r3, [r7, #14]
 800fe4c:	2bff      	cmp	r3, #255	; 0xff
 800fe4e:	d102      	bne.n	800fe56 <USBH_MSC_InterfaceInit+0x32>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;      
 800fe50:	2302      	movs	r3, #2
 800fe52:	73fb      	strb	r3, [r7, #15]
 800fe54:	e10b      	b.n	801006e <USBH_MSC_InterfaceInit+0x24a>
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f7fe fdcc 	bl	800e9f8 <USBH_SelectInterface>
    
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 4374 	ldr.w	r4, [r3, #884]	; 0x374
 800fe66:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fe6a:	f002 fac2 	bl	80123f2 <malloc>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	61e3      	str	r3, [r4, #28]
    MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800fe78:	69db      	ldr	r3, [r3, #28]
 800fe7a:	60bb      	str	r3, [r7, #8]
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fe82:	4619      	mov	r1, r3
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	231a      	movs	r3, #26
 800fe88:	fb03 f301 	mul.w	r3, r3, r1
 800fe8c:	4413      	add	r3, r2
 800fe8e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	b25b      	sxtb	r3, r3
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	da1c      	bge.n	800fed4 <USBH_MSC_InterfaceInit+0xb0>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fea0:	4619      	mov	r1, r3
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	231a      	movs	r3, #26
 800fea6:	fb03 f301 	mul.w	r3, r3, r1
 800feaa:	4413      	add	r3, r2
 800feac:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800feb0:	781a      	ldrb	r2, [r3, #0]
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800febc:	4619      	mov	r1, r3
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	231a      	movs	r3, #26
 800fec2:	fb03 f301 	mul.w	r3, r3, r1
 800fec6:	4413      	add	r3, r2
 800fec8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fecc:	881a      	ldrh	r2, [r3, #0]
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	815a      	strh	r2, [r3, #10]
 800fed2:	e01b      	b.n	800ff0c <USBH_MSC_InterfaceInit+0xe8>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800feda:	4619      	mov	r1, r3
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	231a      	movs	r3, #26
 800fee0:	fb03 f301 	mul.w	r3, r3, r1
 800fee4:	4413      	add	r3, r2
 800fee6:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800feea:	781a      	ldrb	r2, [r3, #0]
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fef6:	4619      	mov	r1, r3
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	231a      	movs	r3, #26
 800fefc:	fb03 f301 	mul.w	r3, r3, r1
 800ff00:	4413      	add	r3, r2
 800ff02:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800ff06:	881a      	ldrh	r2, [r3, #0]
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	811a      	strh	r2, [r3, #8]
    }
    
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ff12:	4619      	mov	r1, r3
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	231a      	movs	r3, #26
 800ff18:	fb03 f301 	mul.w	r3, r3, r1
 800ff1c:	4413      	add	r3, r2
 800ff1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	b25b      	sxtb	r3, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	da1c      	bge.n	800ff64 <USBH_MSC_InterfaceInit+0x140>
    {
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ff30:	4619      	mov	r1, r3
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	231a      	movs	r3, #26
 800ff36:	fb03 f301 	mul.w	r3, r3, r1
 800ff3a:	4413      	add	r3, r2
 800ff3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ff40:	781a      	ldrb	r2, [r3, #0]
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	71da      	strb	r2, [r3, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	231a      	movs	r3, #26
 800ff52:	fb03 f301 	mul.w	r3, r3, r1
 800ff56:	4413      	add	r3, r2
 800ff58:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ff5c:	881a      	ldrh	r2, [r3, #0]
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	815a      	strh	r2, [r3, #10]
 800ff62:	e01b      	b.n	800ff9c <USBH_MSC_InterfaceInit+0x178>
    }
    else
    {
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ff6a:	4619      	mov	r1, r3
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	231a      	movs	r3, #26
 800ff70:	fb03 f301 	mul.w	r3, r3, r1
 800ff74:	4413      	add	r3, r2
 800ff76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ff7a:	781a      	ldrb	r2, [r3, #0]
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	719a      	strb	r2, [r3, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ff86:	4619      	mov	r1, r3
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	231a      	movs	r3, #26
 800ff8c:	fb03 f301 	mul.w	r3, r3, r1
 800ff90:	4413      	add	r3, r2
 800ff92:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ff96:	881a      	ldrh	r2, [r3, #0]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	811a      	strh	r2, [r3, #8]
    }
    
    MSC_Handle->current_lun = 0;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	731a      	strb	r2, [r3, #12]
    MSC_Handle->error = MSC_OK;
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	735a      	strb	r2, [r3, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	739a      	strb	r2, [r3, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	799b      	ldrb	r3, [r3, #6]
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7ff feca 	bl	800fd5e <USBH_AllocPipe>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	461a      	mov	r2, r3
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	715a      	strb	r2, [r3, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	79db      	ldrb	r3, [r3, #7]
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f7ff fec0 	bl	800fd5e <USBH_AllocPipe>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	711a      	strb	r2, [r3, #4]

    USBH_MSC_BOT_Init(phost);
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fbd0 	bl	801078c <USBH_MSC_BOT_Init>
    
    /* De-Initialize LUNs information */
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	3390      	adds	r3, #144	; 0x90
 800fff0:	2268      	movs	r2, #104	; 0x68
 800fff2:	2100      	movs	r1, #0
 800fff4:	4618      	mov	r0, r3
 800fff6:	f004 f948 	bl	801428a <memset>
    
    /* Open the new channels */
    USBH_OpenPipe  (phost,
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	7959      	ldrb	r1, [r3, #5]
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	7998      	ldrb	r0, [r3, #6]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801000e:	68ba      	ldr	r2, [r7, #8]
 8010010:	8912      	ldrh	r2, [r2, #8]
 8010012:	9202      	str	r2, [sp, #8]
 8010014:	2202      	movs	r2, #2
 8010016:	9201      	str	r2, [sp, #4]
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	4623      	mov	r3, r4
 801001c:	4602      	mov	r2, r0
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff fe6e 	bl	800fd00 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->OutEpSize);  
    
    USBH_OpenPipe  (phost,
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	7919      	ldrb	r1, [r3, #4]
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	79d8      	ldrb	r0, [r3, #7]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	8952      	ldrh	r2, [r2, #10]
 801003c:	9202      	str	r2, [sp, #8]
 801003e:	2202      	movs	r2, #2
 8010040:	9201      	str	r2, [sp, #4]
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	4623      	mov	r3, r4
 8010046:	4602      	mov	r2, r0
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7ff fe59 	bl	800fd00 <USBH_OpenPipe>
                    phost->device.speed,
                    USB_EP_TYPE_BULK,
                    MSC_Handle->InEpSize);     
    
    
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	791b      	ldrb	r3, [r3, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	4619      	mov	r1, r3
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f004 f829 	bl	80140ae <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	795b      	ldrb	r3, [r3, #5]
 8010060:	2200      	movs	r2, #0
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f004 f822 	bl	80140ae <USBH_LL_SetToggle>
    status = USBH_OK; 
 801006a:	2300      	movs	r3, #0
 801006c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 801006e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010070:	4618      	mov	r0, r3
 8010072:	3714      	adds	r7, #20
 8010074:	46bd      	mov	sp, r7
 8010076:	bd90      	pop	{r4, r7, pc}

08010078 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010086:	69db      	ldr	r3, [r3, #28]
 8010088:	60fb      	str	r3, [r7, #12]

  if ( MSC_Handle->OutPipe)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	795b      	ldrb	r3, [r3, #5]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d00e      	beq.n	80100b0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	795b      	ldrb	r3, [r3, #5]
 8010096:	4619      	mov	r1, r3
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7ff fe50 	bl	800fd3e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	795b      	ldrb	r3, [r3, #5]
 80100a2:	4619      	mov	r1, r3
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff fe7a 	bl	800fd9e <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2200      	movs	r2, #0
 80100ae:	715a      	strb	r2, [r3, #5]
  }
  
  if ( MSC_Handle->InPipe)
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	791b      	ldrb	r3, [r3, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00e      	beq.n	80100d6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	791b      	ldrb	r3, [r3, #4]
 80100bc:	4619      	mov	r1, r3
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7ff fe3d 	bl	800fd3e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	791b      	ldrb	r3, [r3, #4]
 80100c8:	4619      	mov	r1, r3
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f7ff fe67 	bl	800fd9e <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2200      	movs	r2, #0
 80100d4:	711a      	strb	r2, [r3, #4]
  } 

  if(phost->pActiveClass->pData)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00b      	beq.n	80100fa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free (phost->pActiveClass->pData);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80100e8:	69db      	ldr	r3, [r3, #28]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f002 f993 	bl	8012416 <free>
    phost->pActiveClass->pData = 0;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80100f6:	2200      	movs	r2, #0
 80100f8:	61da      	str	r2, [r3, #28]
  }
  
  return USBH_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{   
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010112:	69db      	ldr	r3, [r3, #28]
 8010114:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010116:	2301      	movs	r3, #1
 8010118:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	7b9b      	ldrb	r3, [r3, #14]
 801011e:	2b02      	cmp	r3, #2
 8010120:	d004      	beq.n	801012c <USBH_MSC_ClassRequest+0x28>
 8010122:	2b03      	cmp	r3, #3
 8010124:	d039      	beq.n	801019a <USBH_MSC_ClassRequest+0x96>
 8010126:	2b00      	cmp	r3, #0
 8010128:	d000      	beq.n	801012c <USBH_MSC_ClassRequest+0x28>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
    }    
    break;
    
  default:
    break;
 801012a:	e045      	b.n	80101b8 <USBH_MSC_ClassRequest+0xb4>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	4619      	mov	r1, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 fb0d 	bl	8010750 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8010136:	4603      	mov	r3, r0
 8010138:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_NOT_SUPPORTED)
 801013a:	7bfb      	ldrb	r3, [r7, #15]
 801013c:	2b03      	cmp	r3, #3
 801013e:	d104      	bne.n	801014a <USBH_MSC_ClassRequest+0x46>
      MSC_Handle->max_lun = 0;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2200      	movs	r2, #0
 8010144:	601a      	str	r2, [r3, #0]
      status = USBH_OK;
 8010146:	2300      	movs	r3, #0
 8010148:	73fb      	strb	r3, [r7, #15]
    if(status == USBH_OK)
 801014a:	7bfb      	ldrb	r3, [r7, #15]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d130      	bne.n	80101b2 <USBH_MSC_ClassRequest+0xae>
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	b2db      	uxtb	r3, r3
 8010156:	3301      	adds	r3, #1
 8010158:	461a      	mov	r2, r3
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	601a      	str	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 801015e:	2300      	movs	r3, #0
 8010160:	73bb      	strb	r3, [r7, #14]
 8010162:	e014      	b.n	801018e <USBH_MSC_ClassRequest+0x8a>
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8010164:	7bbb      	ldrb	r3, [r7, #14]
 8010166:	68ba      	ldr	r2, [r7, #8]
 8010168:	2134      	movs	r1, #52	; 0x34
 801016a:	fb01 f303 	mul.w	r3, r1, r3
 801016e:	4413      	add	r3, r2
 8010170:	3392      	adds	r3, #146	; 0x92
 8010172:	2202      	movs	r2, #2
 8010174:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[i].state_changed = 0;
 8010176:	7bbb      	ldrb	r3, [r7, #14]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	2134      	movs	r1, #52	; 0x34
 801017c:	fb01 f303 	mul.w	r3, r1, r3
 8010180:	4413      	add	r3, r2
 8010182:	33c1      	adds	r3, #193	; 0xc1
 8010184:	2200      	movs	r2, #0
 8010186:	701a      	strb	r2, [r3, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 8010188:	7bbb      	ldrb	r3, [r7, #14]
 801018a:	3301      	adds	r3, #1
 801018c:	73bb      	strb	r3, [r7, #14]
 801018e:	7bba      	ldrb	r2, [r7, #14]
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	d3e5      	bcc.n	8010164 <USBH_MSC_ClassRequest+0x60>
    break;
 8010198:	e00b      	b.n	80101b2 <USBH_MSC_ClassRequest+0xae>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 801019a:	2100      	movs	r1, #0
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff f904 	bl	800f3aa <USBH_ClrFeature>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d106      	bne.n	80101b6 <USBH_MSC_ClassRequest+0xb2>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	7bda      	ldrb	r2, [r3, #15]
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	739a      	strb	r2, [r3, #14]
    break;
 80101b0:	e001      	b.n	80101b6 <USBH_MSC_ClassRequest+0xb2>
    break;
 80101b2:	bf00      	nop
 80101b4:	e000      	b.n	80101b8 <USBH_MSC_ClassRequest+0xb4>
    break;
 80101b6:	bf00      	nop
  }
  
  return status; 
 80101b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80101d2:	69db      	ldr	r3, [r3, #28]
 80101d4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80101d6:	2301      	movs	r3, #1
 80101d8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
 80101da:	2301      	movs	r3, #1
 80101dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY ;
 80101de:	2301      	movs	r3, #1
 80101e0:	73bb      	strb	r3, [r7, #14]
  
  switch (MSC_Handle->state)
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	7b1b      	ldrb	r3, [r3, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d003      	beq.n	80101f2 <USBH_MSC_Process+0x2e>
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	f000 8280 	beq.w	80106f0 <USBH_MSC_Process+0x52c>
  case MSC_IDLE:
    error = USBH_OK;  
    break;
    
  default:
    break; 
 80101f0:	e281      	b.n	80106f6 <USBH_MSC_Process+0x532>
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101f8:	461a      	mov	r2, r3
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	429a      	cmp	r2, r3
 8010200:	f080 8260 	bcs.w	80106c4 <USBH_MSC_Process+0x500>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801020a:	4619      	mov	r1, r3
 801020c:	693a      	ldr	r2, [r7, #16]
 801020e:	2334      	movs	r3, #52	; 0x34
 8010210:	fb03 f301 	mul.w	r3, r3, r1
 8010214:	4413      	add	r3, r2
 8010216:	3391      	adds	r3, #145	; 0x91
 8010218:	2201      	movs	r2, #1
 801021a:	701a      	strb	r2, [r3, #0]
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010222:	4619      	mov	r1, r3
 8010224:	693a      	ldr	r2, [r7, #16]
 8010226:	2334      	movs	r3, #52	; 0x34
 8010228:	fb03 f301 	mul.w	r3, r3, r1
 801022c:	4413      	add	r3, r2
 801022e:	3390      	adds	r3, #144	; 0x90
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	2b08      	cmp	r3, #8
 8010234:	f200 8234 	bhi.w	80106a0 <USBH_MSC_Process+0x4dc>
 8010238:	a201      	add	r2, pc, #4	; (adr r2, 8010240 <USBH_MSC_Process+0x7c>)
 801023a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801023e:	bf00      	nop
 8010240:	08010265 	.word	0x08010265
 8010244:	080106a1 	.word	0x080106a1
 8010248:	0801032b 	.word	0x0801032b
 801024c:	080104af 	.word	0x080104af
 8010250:	08010289 	.word	0x08010289
 8010254:	0801057b 	.word	0x0801057b
 8010258:	080106a1 	.word	0x080106a1
 801025c:	080106a1 	.word	0x080106a1
 8010260:	0801068f 	.word	0x0801068f
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801026a:	4619      	mov	r1, r3
 801026c:	693a      	ldr	r2, [r7, #16]
 801026e:	2334      	movs	r3, #52	; 0x34
 8010270:	fb03 f301 	mul.w	r3, r3, r1
 8010274:	4413      	add	r3, r2
 8010276:	3390      	adds	r3, #144	; 0x90
 8010278:	2204      	movs	r2, #4
 801027a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->timer = phost->Timer;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801028e:	b2d9      	uxtb	r1, r3
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010296:	461a      	mov	r2, r3
 8010298:	2334      	movs	r3, #52	; 0x34
 801029a:	fb03 f302 	mul.w	r3, r3, r2
 801029e:	3398      	adds	r3, #152	; 0x98
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	4413      	add	r3, r2
 80102a4:	3307      	adds	r3, #7
 80102a6:	461a      	mov	r2, r3
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 fde2 	bl	8010e72 <USBH_MSC_SCSI_Inquiry>
 80102ae:	4603      	mov	r3, r0
 80102b0:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 80102b2:	7bfb      	ldrb	r3, [r7, #15]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10b      	bne.n	80102d0 <USBH_MSC_Process+0x10c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102be:	4619      	mov	r1, r3
 80102c0:	693a      	ldr	r2, [r7, #16]
 80102c2:	2334      	movs	r3, #52	; 0x34
 80102c4:	fb03 f301 	mul.w	r3, r3, r1
 80102c8:	4413      	add	r3, r2
 80102ca:	3390      	adds	r3, #144	; 0x90
 80102cc:	2202      	movs	r2, #2
 80102ce:	701a      	strb	r2, [r3, #0]
        if( scsi_status == USBH_FAIL)
 80102d0:	7bfb      	ldrb	r3, [r7, #15]
 80102d2:	2b02      	cmp	r3, #2
 80102d4:	d10c      	bne.n	80102f0 <USBH_MSC_Process+0x12c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102dc:	4619      	mov	r1, r3
 80102de:	693a      	ldr	r2, [r7, #16]
 80102e0:	2334      	movs	r3, #52	; 0x34
 80102e2:	fb03 f301 	mul.w	r3, r3, r1
 80102e6:	4413      	add	r3, r2
 80102e8:	3390      	adds	r3, #144	; 0x90
 80102ea:	2205      	movs	r2, #5
 80102ec:	701a      	strb	r2, [r3, #0]
        break;    
 80102ee:	e1d9      	b.n	80106a4 <USBH_MSC_Process+0x4e0>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80102f0:	7bfb      	ldrb	r3, [r7, #15]
 80102f2:	2b04      	cmp	r3, #4
 80102f4:	f040 81d6 	bne.w	80106a4 <USBH_MSC_Process+0x4e0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102fe:	4619      	mov	r1, r3
 8010300:	693a      	ldr	r2, [r7, #16]
 8010302:	2334      	movs	r3, #52	; 0x34
 8010304:	fb03 f301 	mul.w	r3, r3, r1
 8010308:	4413      	add	r3, r2
 801030a:	3390      	adds	r3, #144	; 0x90
 801030c:	2201      	movs	r2, #1
 801030e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010316:	4619      	mov	r1, r3
 8010318:	693a      	ldr	r2, [r7, #16]
 801031a:	2334      	movs	r3, #52	; 0x34
 801031c:	fb03 f301 	mul.w	r3, r3, r1
 8010320:	4413      	add	r3, r2
 8010322:	3391      	adds	r3, #145	; 0x91
 8010324:	2202      	movs	r2, #2
 8010326:	701a      	strb	r2, [r3, #0]
        break;    
 8010328:	e1bc      	b.n	80106a4 <USBH_MSC_Process+0x4e0>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010330:	b2db      	uxtb	r3, r3
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fcdd 	bl	8010cf4 <USBH_MSC_SCSI_TestUnitReady>
 801033a:	4603      	mov	r3, r0
 801033c:	73bb      	strb	r3, [r7, #14]
        if( ready_status == USBH_OK)
 801033e:	7bbb      	ldrb	r3, [r7, #14]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d149      	bne.n	80103d8 <USBH_MSC_Process+0x214>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801034a:	4619      	mov	r1, r3
 801034c:	693a      	ldr	r2, [r7, #16]
 801034e:	2334      	movs	r3, #52	; 0x34
 8010350:	fb03 f301 	mul.w	r3, r3, r1
 8010354:	4413      	add	r3, r2
 8010356:	3392      	adds	r3, #146	; 0x92
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00c      	beq.n	8010378 <USBH_MSC_Process+0x1b4>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010364:	4619      	mov	r1, r3
 8010366:	693a      	ldr	r2, [r7, #16]
 8010368:	2334      	movs	r3, #52	; 0x34
 801036a:	fb03 f301 	mul.w	r3, r3, r1
 801036e:	4413      	add	r3, r2
 8010370:	33c1      	adds	r3, #193	; 0xc1
 8010372:	2201      	movs	r2, #1
 8010374:	701a      	strb	r2, [r3, #0]
 8010376:	e00b      	b.n	8010390 <USBH_MSC_Process+0x1cc>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801037e:	4619      	mov	r1, r3
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	2334      	movs	r3, #52	; 0x34
 8010384:	fb03 f301 	mul.w	r3, r3, r1
 8010388:	4413      	add	r3, r2
 801038a:	33c1      	adds	r3, #193	; 0xc1
 801038c:	2200      	movs	r2, #0
 801038e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010396:	4619      	mov	r1, r3
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	2334      	movs	r3, #52	; 0x34
 801039c:	fb03 f301 	mul.w	r3, r3, r1
 80103a0:	4413      	add	r3, r2
 80103a2:	3390      	adds	r3, #144	; 0x90
 80103a4:	2203      	movs	r2, #3
 80103a6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103ae:	4619      	mov	r1, r3
 80103b0:	693a      	ldr	r2, [r7, #16]
 80103b2:	2334      	movs	r3, #52	; 0x34
 80103b4:	fb03 f301 	mul.w	r3, r3, r1
 80103b8:	4413      	add	r3, r2
 80103ba:	3391      	adds	r3, #145	; 0x91
 80103bc:	2200      	movs	r2, #0
 80103be:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103c6:	4619      	mov	r1, r3
 80103c8:	693a      	ldr	r2, [r7, #16]
 80103ca:	2334      	movs	r3, #52	; 0x34
 80103cc:	fb03 f301 	mul.w	r3, r3, r1
 80103d0:	4413      	add	r3, r2
 80103d2:	3392      	adds	r3, #146	; 0x92
 80103d4:	2200      	movs	r2, #0
 80103d6:	701a      	strb	r2, [r3, #0]
        if( ready_status == USBH_FAIL)
 80103d8:	7bbb      	ldrb	r3, [r7, #14]
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d14a      	bne.n	8010474 <USBH_MSC_Process+0x2b0>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103e4:	4619      	mov	r1, r3
 80103e6:	693a      	ldr	r2, [r7, #16]
 80103e8:	2334      	movs	r3, #52	; 0x34
 80103ea:	fb03 f301 	mul.w	r3, r3, r1
 80103ee:	4413      	add	r3, r2
 80103f0:	3392      	adds	r3, #146	; 0x92
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	2b02      	cmp	r3, #2
 80103f6:	d00c      	beq.n	8010412 <USBH_MSC_Process+0x24e>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103fe:	4619      	mov	r1, r3
 8010400:	693a      	ldr	r2, [r7, #16]
 8010402:	2334      	movs	r3, #52	; 0x34
 8010404:	fb03 f301 	mul.w	r3, r3, r1
 8010408:	4413      	add	r3, r2
 801040a:	33c1      	adds	r3, #193	; 0xc1
 801040c:	2201      	movs	r2, #1
 801040e:	701a      	strb	r2, [r3, #0]
 8010410:	e00b      	b.n	801042a <USBH_MSC_Process+0x266>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010418:	4619      	mov	r1, r3
 801041a:	693a      	ldr	r2, [r7, #16]
 801041c:	2334      	movs	r3, #52	; 0x34
 801041e:	fb03 f301 	mul.w	r3, r3, r1
 8010422:	4413      	add	r3, r2
 8010424:	33c1      	adds	r3, #193	; 0xc1
 8010426:	2200      	movs	r2, #0
 8010428:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010430:	4619      	mov	r1, r3
 8010432:	693a      	ldr	r2, [r7, #16]
 8010434:	2334      	movs	r3, #52	; 0x34
 8010436:	fb03 f301 	mul.w	r3, r3, r1
 801043a:	4413      	add	r3, r2
 801043c:	3390      	adds	r3, #144	; 0x90
 801043e:	2205      	movs	r2, #5
 8010440:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010448:	4619      	mov	r1, r3
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	2334      	movs	r3, #52	; 0x34
 801044e:	fb03 f301 	mul.w	r3, r3, r1
 8010452:	4413      	add	r3, r2
 8010454:	3391      	adds	r3, #145	; 0x91
 8010456:	2201      	movs	r2, #1
 8010458:	701a      	strb	r2, [r3, #0]
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010460:	4619      	mov	r1, r3
 8010462:	693a      	ldr	r2, [r7, #16]
 8010464:	2334      	movs	r3, #52	; 0x34
 8010466:	fb03 f301 	mul.w	r3, r3, r1
 801046a:	4413      	add	r3, r2
 801046c:	3392      	adds	r3, #146	; 0x92
 801046e:	2202      	movs	r2, #2
 8010470:	701a      	strb	r2, [r3, #0]
        break;
 8010472:	e119      	b.n	80106a8 <USBH_MSC_Process+0x4e4>
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 8010474:	7bbb      	ldrb	r3, [r7, #14]
 8010476:	2b04      	cmp	r3, #4
 8010478:	f040 8116 	bne.w	80106a8 <USBH_MSC_Process+0x4e4>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010482:	4619      	mov	r1, r3
 8010484:	693a      	ldr	r2, [r7, #16]
 8010486:	2334      	movs	r3, #52	; 0x34
 8010488:	fb03 f301 	mul.w	r3, r3, r1
 801048c:	4413      	add	r3, r2
 801048e:	3390      	adds	r3, #144	; 0x90
 8010490:	2201      	movs	r2, #1
 8010492:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801049a:	4619      	mov	r1, r3
 801049c:	693a      	ldr	r2, [r7, #16]
 801049e:	2334      	movs	r3, #52	; 0x34
 80104a0:	fb03 f301 	mul.w	r3, r3, r1
 80104a4:	4413      	add	r3, r2
 80104a6:	3391      	adds	r3, #145	; 0x91
 80104a8:	2202      	movs	r2, #2
 80104aa:	701a      	strb	r2, [r3, #0]
        break;
 80104ac:	e0fc      	b.n	80106a8 <USBH_MSC_Process+0x4e4>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104b4:	b2d9      	uxtb	r1, r3
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104bc:	461a      	mov	r2, r3
 80104be:	2334      	movs	r3, #52	; 0x34
 80104c0:	fb03 f302 	mul.w	r3, r3, r2
 80104c4:	3390      	adds	r3, #144	; 0x90
 80104c6:	693a      	ldr	r2, [r7, #16]
 80104c8:	4413      	add	r3, r2
 80104ca:	3304      	adds	r3, #4
 80104cc:	461a      	mov	r2, r3
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 fc53 	bl	8010d7a <USBH_MSC_SCSI_ReadCapacity>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73fb      	strb	r3, [r7, #15]
        if(scsi_status == USBH_OK)
 80104d8:	7bfb      	ldrb	r3, [r7, #15]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d120      	bne.n	8010520 <USBH_MSC_Process+0x35c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104e4:	4619      	mov	r1, r3
 80104e6:	693a      	ldr	r2, [r7, #16]
 80104e8:	2334      	movs	r3, #52	; 0x34
 80104ea:	fb03 f301 	mul.w	r3, r3, r1
 80104ee:	4413      	add	r3, r2
 80104f0:	3390      	adds	r3, #144	; 0x90
 80104f2:	2201      	movs	r2, #1
 80104f4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104fc:	4619      	mov	r1, r3
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	2334      	movs	r3, #52	; 0x34
 8010502:	fb03 f301 	mul.w	r3, r3, r1
 8010506:	4413      	add	r3, r2
 8010508:	3391      	adds	r3, #145	; 0x91
 801050a:	2200      	movs	r2, #0
 801050c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010514:	3301      	adds	r3, #1
 8010516:	b29a      	uxth	r2, r3
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;
 801051e:	e0c5      	b.n	80106ac <USBH_MSC_Process+0x4e8>
        else if( scsi_status == USBH_FAIL)
 8010520:	7bfb      	ldrb	r3, [r7, #15]
 8010522:	2b02      	cmp	r3, #2
 8010524:	d10c      	bne.n	8010540 <USBH_MSC_Process+0x37c>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801052c:	4619      	mov	r1, r3
 801052e:	693a      	ldr	r2, [r7, #16]
 8010530:	2334      	movs	r3, #52	; 0x34
 8010532:	fb03 f301 	mul.w	r3, r3, r1
 8010536:	4413      	add	r3, r2
 8010538:	3390      	adds	r3, #144	; 0x90
 801053a:	2205      	movs	r2, #5
 801053c:	701a      	strb	r2, [r3, #0]
        break;
 801053e:	e0b5      	b.n	80106ac <USBH_MSC_Process+0x4e8>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	2b04      	cmp	r3, #4
 8010544:	f040 80b2 	bne.w	80106ac <USBH_MSC_Process+0x4e8>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801054e:	4619      	mov	r1, r3
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	2334      	movs	r3, #52	; 0x34
 8010554:	fb03 f301 	mul.w	r3, r3, r1
 8010558:	4413      	add	r3, r2
 801055a:	3390      	adds	r3, #144	; 0x90
 801055c:	2201      	movs	r2, #1
 801055e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010566:	4619      	mov	r1, r3
 8010568:	693a      	ldr	r2, [r7, #16]
 801056a:	2334      	movs	r3, #52	; 0x34
 801056c:	fb03 f301 	mul.w	r3, r3, r1
 8010570:	4413      	add	r3, r2
 8010572:	3391      	adds	r3, #145	; 0x91
 8010574:	2202      	movs	r2, #2
 8010576:	701a      	strb	r2, [r3, #0]
        break;
 8010578:	e098      	b.n	80106ac <USBH_MSC_Process+0x4e8>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010580:	b2d9      	uxtb	r1, r3
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010588:	461a      	mov	r2, r3
 801058a:	2334      	movs	r3, #52	; 0x34
 801058c:	fb03 f302 	mul.w	r3, r3, r2
 8010590:	3398      	adds	r3, #152	; 0x98
 8010592:	693a      	ldr	r2, [r7, #16]
 8010594:	4413      	add	r3, r2
 8010596:	3304      	adds	r3, #4
 8010598:	461a      	mov	r2, r3
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 fd0b 	bl	8010fb6 <USBH_MSC_SCSI_RequestSense>
 80105a0:	4603      	mov	r3, r0
 80105a2:	73fb      	strb	r3, [r7, #15]
        if( scsi_status == USBH_OK)
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d145      	bne.n	8010636 <USBH_MSC_Process+0x472>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105b0:	4619      	mov	r1, r3
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	2334      	movs	r3, #52	; 0x34
 80105b6:	fb03 f301 	mul.w	r3, r3, r1
 80105ba:	4413      	add	r3, r2
 80105bc:	339c      	adds	r3, #156	; 0x9c
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b06      	cmp	r3, #6
 80105c2:	d00c      	beq.n	80105de <USBH_MSC_Process+0x41a>
             (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105ca:	4619      	mov	r1, r3
 80105cc:	693a      	ldr	r2, [r7, #16]
 80105ce:	2334      	movs	r3, #52	; 0x34
 80105d0:	fb03 f301 	mul.w	r3, r3, r1
 80105d4:	4413      	add	r3, r2
 80105d6:	339c      	adds	r3, #156	; 0x9c
 80105d8:	781b      	ldrb	r3, [r3, #0]
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d117      	bne.n	801060e <USBH_MSC_Process+0x44a>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 23b8 	ldr.w	r2, [r3, #952]	; 0x3b8
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d80c      	bhi.n	801060e <USBH_MSC_Process+0x44a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105fa:	4619      	mov	r1, r3
 80105fc:	693a      	ldr	r2, [r7, #16]
 80105fe:	2334      	movs	r3, #52	; 0x34
 8010600:	fb03 f301 	mul.w	r3, r3, r1
 8010604:	4413      	add	r3, r2
 8010606:	3390      	adds	r3, #144	; 0x90
 8010608:	2202      	movs	r2, #2
 801060a:	701a      	strb	r2, [r3, #0]
              break;
 801060c:	e051      	b.n	80106b2 <USBH_MSC_Process+0x4ee>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010614:	4619      	mov	r1, r3
 8010616:	693a      	ldr	r2, [r7, #16]
 8010618:	2334      	movs	r3, #52	; 0x34
 801061a:	fb03 f301 	mul.w	r3, r3, r1
 801061e:	4413      	add	r3, r2
 8010620:	3390      	adds	r3, #144	; 0x90
 8010622:	2201      	movs	r2, #1
 8010624:	701a      	strb	r2, [r3, #0]
          MSC_Handle->current_lun++;
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801062c:	3301      	adds	r3, #1
 801062e:	b29a      	uxth	r2, r3
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if( scsi_status == USBH_FAIL)
 8010636:	7bfb      	ldrb	r3, [r7, #15]
 8010638:	2b02      	cmp	r3, #2
 801063a:	d10c      	bne.n	8010656 <USBH_MSC_Process+0x492>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010642:	4619      	mov	r1, r3
 8010644:	693a      	ldr	r2, [r7, #16]
 8010646:	2334      	movs	r3, #52	; 0x34
 8010648:	fb03 f301 	mul.w	r3, r3, r1
 801064c:	4413      	add	r3, r2
 801064e:	3390      	adds	r3, #144	; 0x90
 8010650:	2208      	movs	r2, #8
 8010652:	701a      	strb	r2, [r3, #0]
        break;  
 8010654:	e02c      	b.n	80106b0 <USBH_MSC_Process+0x4ec>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 8010656:	7bfb      	ldrb	r3, [r7, #15]
 8010658:	2b04      	cmp	r3, #4
 801065a:	d129      	bne.n	80106b0 <USBH_MSC_Process+0x4ec>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010662:	4619      	mov	r1, r3
 8010664:	693a      	ldr	r2, [r7, #16]
 8010666:	2334      	movs	r3, #52	; 0x34
 8010668:	fb03 f301 	mul.w	r3, r3, r1
 801066c:	4413      	add	r3, r2
 801066e:	3390      	adds	r3, #144	; 0x90
 8010670:	2201      	movs	r2, #1
 8010672:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801067a:	4619      	mov	r1, r3
 801067c:	693a      	ldr	r2, [r7, #16]
 801067e:	2334      	movs	r3, #52	; 0x34
 8010680:	fb03 f301 	mul.w	r3, r3, r1
 8010684:	4413      	add	r3, r2
 8010686:	3391      	adds	r3, #145	; 0x91
 8010688:	2202      	movs	r2, #2
 801068a:	701a      	strb	r2, [r3, #0]
        break;  
 801068c:	e010      	b.n	80106b0 <USBH_MSC_Process+0x4ec>
        MSC_Handle->current_lun++;
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010694:	3301      	adds	r3, #1
 8010696:	b29a      	uxth	r2, r3
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        break;  
 801069e:	e008      	b.n	80106b2 <USBH_MSC_Process+0x4ee>
        break;
 80106a0:	bf00      	nop
 80106a2:	e006      	b.n	80106b2 <USBH_MSC_Process+0x4ee>
        break;    
 80106a4:	bf00      	nop
 80106a6:	e004      	b.n	80106b2 <USBH_MSC_Process+0x4ee>
        break;
 80106a8:	bf00      	nop
 80106aa:	e002      	b.n	80106b2 <USBH_MSC_Process+0x4ee>
        break;
 80106ac:	bf00      	nop
 80106ae:	e000      	b.n	80106b2 <USBH_MSC_Process+0x4ee>
        break;  
 80106b0:	bf00      	nop
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106b8:	2200      	movs	r2, #0
 80106ba:	2104      	movs	r1, #4
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fb fead 	bl	800c41c <osMessagePut>
    break;
 80106c2:	e018      	b.n	80106f6 <USBH_MSC_Process+0x532>
      MSC_Handle->current_lun = 0;
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	2201      	movs	r2, #1
 80106d0:	731a      	strb	r2, [r3, #12]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106d8:	2200      	movs	r2, #0
 80106da:	2104      	movs	r1, #4
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fb fe9d 	bl	800c41c <osMessagePut>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80106e8:	2102      	movs	r1, #2
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	4798      	blx	r3
    break;
 80106ee:	e002      	b.n	80106f6 <USBH_MSC_Process+0x532>
    error = USBH_OK;  
 80106f0:	2300      	movs	r3, #0
 80106f2:	75fb      	strb	r3, [r7, #23]
    break;
 80106f4:	bf00      	nop
  }
  return error;
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3718      	adds	r7, #24
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]

  return USBH_OK;
 8010708:	2300      	movs	r3, #0
}
 801070a:	4618      	mov	r0, r3
 801070c:	370c      	adds	r7, #12
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr

08010716 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8010716:	b580      	push	{r7, lr}
 8010718:	b082      	sub	sp, #8
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2221      	movs	r2, #33	; 0x21
 8010722:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	22ff      	movs	r2, #255	; 0xff
 8010728:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0;           
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 801073c:	2200      	movs	r2, #0
 801073e:	2100      	movs	r1, #0
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7ff f816 	bl	800f772 <USBH_CtlReq>
 8010746:	4603      	mov	r3, r0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	22a1      	movs	r2, #161	; 0xa1
 801075e:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	22fe      	movs	r2, #254	; 0xfe
 8010764:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2200      	movs	r2, #0
 801076a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2200      	movs	r2, #0
 8010770:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1;           
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2201      	movs	r2, #1
 8010776:	82da      	strh	r2, [r3, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 8010778:	2201      	movs	r2, #1
 801077a:	6839      	ldr	r1, [r7, #0]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7fe fff8 	bl	800f772 <USBH_CtlReq>
 8010782:	4603      	mov	r3, r0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 801079a:	69db      	ldr	r3, [r3, #28]
 801079c:	60fb      	str	r3, [r7, #12]
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	4a09      	ldr	r2, [pc, #36]	; (80107c8 <USBH_MSC_BOT_Init+0x3c>)
 80107a2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	4a09      	ldr	r2, [pc, #36]	; (80107cc <USBH_MSC_BOT_Init+0x40>)
 80107a8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2201      	movs	r2, #1
 80107ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2201      	movs	r2, #1
 80107b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
 80107ba:	2300      	movs	r3, #0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3714      	adds	r7, #20
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr
 80107c8:	43425355 	.word	0x43425355
 80107cc:	20304050 	.word	0x20304050

080107d0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process (USBH_HandleTypeDef *phost, uint8_t lun)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b088      	sub	sp, #32
 80107d4:	af02      	add	r7, sp, #8
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80107dc:	2301      	movs	r3, #1
 80107de:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;  
 80107e0:	2301      	movs	r3, #1
 80107e2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80107e4:	2301      	movs	r3, #1
 80107e6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80107e8:	2300      	movs	r3, #0
 80107ea:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80107f2:	69db      	ldr	r3, [r3, #28]
 80107f4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0;
 80107f6:	2300      	movs	r3, #0
 80107f8:	73fb      	strb	r3, [r7, #15]
  
  switch (MSC_Handle->hbot.state)
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010800:	3b01      	subs	r3, #1
 8010802:	2b0a      	cmp	r3, #10
 8010804:	f200 81f1 	bhi.w	8010bea <USBH_MSC_BOT_Process+0x41a>
 8010808:	a201      	add	r2, pc, #4	; (adr r2, 8010810 <USBH_MSC_BOT_Process+0x40>)
 801080a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080e:	bf00      	nop
 8010810:	0801083d 	.word	0x0801083d
 8010814:	08010867 	.word	0x08010867
 8010818:	08010901 	.word	0x08010901
 801081c:	0801091f 	.word	0x0801091f
 8010820:	080109c3 	.word	0x080109c3
 8010824:	080109e7 	.word	0x080109e7
 8010828:	08010ab1 	.word	0x08010ab1
 801082c:	08010acd 	.word	0x08010acd
 8010830:	08010b3f 	.word	0x08010b3f
 8010834:	08010b6f 	.word	0x08010b6f
 8010838:	08010bd1 	.word	0x08010bd1
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	78fa      	ldrb	r2, [r7, #3]
 8010840:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	2202      	movs	r2, #2
 8010848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    USBH_BulkSendData (phost,
                       MSC_Handle->hbot.cbw.data, 
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	f103 0154 	add.w	r1, r3, #84	; 0x54
    USBH_BulkSendData (phost,
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	795a      	ldrb	r2, [r3, #5]
 8010856:	2301      	movs	r3, #1
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	4613      	mov	r3, r2
 801085c:	221f      	movs	r2, #31
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff fa0b 	bl	800fc7a <USBH_BulkSendData>
                       BOT_CBW_LENGTH, 
                       MSC_Handle->OutPipe,
                       1);
    
    break;
 8010864:	e1d0      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_SEND_CBW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	795b      	ldrb	r3, [r3, #5]
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f003 fbfd 	bl	801406c <USBH_LL_GetURBState>
 8010872:	4603      	mov	r3, r0
 8010874:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 8010876:	7d3b      	ldrb	r3, [r7, #20]
 8010878:	2b01      	cmp	r3, #1
 801087a:	d120      	bne.n	80108be <USBH_MSC_BOT_Process+0xee>
    { 
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00f      	beq.n	80108a4 <USBH_MSC_BOT_Process+0xd4>
      {
        /* If there is Data Transfer Stage */
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801088a:	b25b      	sxtb	r3, r3
 801088c:	2b00      	cmp	r3, #0
 801088e:	da04      	bge.n	801089a <USBH_MSC_BOT_Process+0xca>
        {
          /* Data Direction is IN */
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	2203      	movs	r2, #3
 8010894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010898:	e008      	b.n	80108ac <USBH_MSC_BOT_Process+0xdc>
        }
        else
        {
          /* Data Direction is OUT */
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	2205      	movs	r2, #5
 801089e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80108a2:	e003      	b.n	80108ac <USBH_MSC_BOT_Process+0xdc>
        } 
      }
      
      else
      {/* If there is NO Data Transfer Stage */
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	2207      	movs	r2, #7
 80108a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80108b2:	2200      	movs	r2, #0
 80108b4:	2102      	movs	r1, #2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fb fdb0 	bl	800c41c <osMessagePut>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 80108bc:	e197      	b.n	8010bee <USBH_MSC_BOT_Process+0x41e>
    else if(URB_Status == USBH_URB_NOTREADY)
 80108be:	7d3b      	ldrb	r3, [r7, #20]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d10c      	bne.n	80108de <USBH_MSC_BOT_Process+0x10e>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80108d2:	2200      	movs	r2, #0
 80108d4:	2102      	movs	r1, #2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fb fda0 	bl	800c41c <osMessagePut>
    break;
 80108dc:	e187      	b.n	8010bee <USBH_MSC_BOT_Process+0x41e>
    else if(URB_Status == USBH_URB_STALL)
 80108de:	7d3b      	ldrb	r3, [r7, #20]
 80108e0:	2b05      	cmp	r3, #5
 80108e2:	f040 8184 	bne.w	8010bee <USBH_MSC_BOT_Process+0x41e>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	220a      	movs	r2, #10
 80108ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80108f4:	2200      	movs	r2, #0
 80108f6:	2102      	movs	r1, #2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fb fd8f 	bl	800c41c <osMessagePut>
    break;
 80108fe:	e176      	b.n	8010bee <USBH_MSC_BOT_Process+0x41e>
    
  case BOT_DATA_IN:   
    /* Send first packet */        
    USBH_BulkReceiveData (phost,
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	895a      	ldrh	r2, [r3, #10]
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	791b      	ldrb	r3, [r3, #4]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7ff f9d8 	bl	800fcc4 <USBH_BulkReceiveData>
                          MSC_Handle->hbot.pbuf, 
                          MSC_Handle->InEpSize , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	2204      	movs	r2, #4
 8010918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    
    break;   
 801091c:	e174      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_DATA_IN_WAIT:  
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	791b      	ldrb	r3, [r3, #4]
 8010922:	4619      	mov	r1, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f003 fba1 	bl	801406c <USBH_LL_GetURBState>
 801092a:	4603      	mov	r3, r0
 801092c:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE) 
 801092e:	7d3b      	ldrb	r3, [r7, #20]
 8010930:	2b01      	cmp	r3, #1
 8010932:	d135      	bne.n	80109a0 <USBH_MSC_BOT_Process+0x1d0>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010938:	693a      	ldr	r2, [r7, #16]
 801093a:	8952      	ldrh	r2, [r2, #10]
 801093c:	4293      	cmp	r3, r2
 801093e:	d910      	bls.n	8010962 <USBH_MSC_BOT_Process+0x192>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010946:	693a      	ldr	r2, [r7, #16]
 8010948:	8952      	ldrh	r2, [r2, #10]
 801094a:	441a      	add	r2, r3
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010956:	693a      	ldr	r2, [r7, #16]
 8010958:	8952      	ldrh	r2, [r2, #10]
 801095a:	1a9a      	subs	r2, r3, r2
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	65da      	str	r2, [r3, #92]	; 0x5c
 8010960:	e002      	b.n	8010968 <USBH_MSC_BOT_Process+0x198>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	2200      	movs	r2, #0
 8010966:	65da      	str	r2, [r3, #92]	; 0x5c
      }
        
      /* More Data To be Received */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00a      	beq.n	8010986 <USBH_MSC_BOT_Process+0x1b6>
      {
        /* Send next packet */        
        USBH_BulkReceiveData (phost,
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	895a      	ldrh	r2, [r3, #10]
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	791b      	ldrb	r3, [r3, #4]
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7ff f9a0 	bl	800fcc4 <USBH_BulkReceiveData>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }     
    break;  
 8010984:	e135      	b.n	8010bf2 <USBH_MSC_BOT_Process+0x422>
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	2207      	movs	r2, #7
 801098a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010994:	2200      	movs	r2, #0
 8010996:	2102      	movs	r1, #2
 8010998:	4618      	mov	r0, r3
 801099a:	f7fb fd3f 	bl	800c41c <osMessagePut>
    break;  
 801099e:	e128      	b.n	8010bf2 <USBH_MSC_BOT_Process+0x422>
    else if(URB_Status == USBH_URB_STALL)
 80109a0:	7d3b      	ldrb	r3, [r7, #20]
 80109a2:	2b05      	cmp	r3, #5
 80109a4:	f040 8125 	bne.w	8010bf2 <USBH_MSC_BOT_Process+0x422>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	2209      	movs	r2, #9
 80109ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80109b6:	2200      	movs	r2, #0
 80109b8:	2102      	movs	r1, #2
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fb fd2e 	bl	800c41c <osMessagePut>
    break;  
 80109c0:	e117      	b.n	8010bf2 <USBH_MSC_BOT_Process+0x422>
    
  case BOT_DATA_OUT:
    
    USBH_BulkSendData (phost,
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	891a      	ldrh	r2, [r3, #8]
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	7958      	ldrb	r0, [r3, #5]
 80109d0:	2301      	movs	r3, #1
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	4603      	mov	r3, r0
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7ff f94f 	bl	800fc7a <USBH_BulkSendData>
                       MSC_Handle->OutEpSize , 
                       MSC_Handle->OutPipe,
                       1);
    
    
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	2206      	movs	r2, #6
 80109e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 80109e4:	e110      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_DATA_OUT_WAIT:
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	795b      	ldrb	r3, [r3, #5]
 80109ea:	4619      	mov	r1, r3
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f003 fb3d 	bl	801406c <USBH_LL_GetURBState>
 80109f2:	4603      	mov	r3, r0
 80109f4:	753b      	strb	r3, [r7, #20]
    
    if(URB_Status == USBH_URB_DONE)
 80109f6:	7d3b      	ldrb	r3, [r7, #20]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d138      	bne.n	8010a6e <USBH_MSC_BOT_Process+0x29e>
    {
      /* Adjust Data pointer and data length */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a00:	693a      	ldr	r2, [r7, #16]
 8010a02:	8912      	ldrh	r2, [r2, #8]
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d910      	bls.n	8010a2a <USBH_MSC_BOT_Process+0x25a>
      {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	8912      	ldrh	r2, [r2, #8]
 8010a12:	441a      	add	r2, r3
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a1e:	693a      	ldr	r2, [r7, #16]
 8010a20:	8912      	ldrh	r2, [r2, #8]
 8010a22:	1a9a      	subs	r2, r3, r2
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	65da      	str	r2, [r3, #92]	; 0x5c
 8010a28:	e002      	b.n	8010a30 <USBH_MSC_BOT_Process+0x260>
      }
      else
      {
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	65da      	str	r2, [r3, #92]	; 0x5c
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00d      	beq.n	8010a54 <USBH_MSC_BOT_Process+0x284>
      {
        USBH_BulkSendData (phost,
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	891a      	ldrh	r2, [r3, #8]
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	7958      	ldrb	r0, [r3, #5]
 8010a46:	2301      	movs	r3, #1
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff f914 	bl	800fc7a <USBH_BulkSendData>
 8010a52:	e003      	b.n	8010a5c <USBH_MSC_BOT_Process+0x28c>
                           1);
      }
      else
      {
        /* If value was 0, and successful transfer, then change the state */
        MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	2207      	movs	r2, #7
 8010a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }  
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010a62:	2200      	movs	r2, #0
 8010a64:	2102      	movs	r1, #2
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fb fcd8 	bl	800c41c <osMessagePut>
      */      
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 8010a6c:	e0c3      	b.n	8010bf6 <USBH_MSC_BOT_Process+0x426>
    else if(URB_Status == USBH_URB_NOTREADY)
 8010a6e:	7d3b      	ldrb	r3, [r7, #20]
 8010a70:	2b02      	cmp	r3, #2
 8010a72:	d10c      	bne.n	8010a8e <USBH_MSC_BOT_Process+0x2be>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	2205      	movs	r2, #5
 8010a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010a82:	2200      	movs	r2, #0
 8010a84:	2102      	movs	r1, #2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fb fcc8 	bl	800c41c <osMessagePut>
    break;
 8010a8c:	e0b3      	b.n	8010bf6 <USBH_MSC_BOT_Process+0x426>
    else if(URB_Status == USBH_URB_STALL)
 8010a8e:	7d3b      	ldrb	r3, [r7, #20]
 8010a90:	2b05      	cmp	r3, #5
 8010a92:	f040 80b0 	bne.w	8010bf6 <USBH_MSC_BOT_Process+0x426>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	220a      	movs	r2, #10
 8010a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	2102      	movs	r1, #2
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fb fcb7 	bl	800c41c <osMessagePut>
    break;
 8010aae:	e0a2      	b.n	8010bf6 <USBH_MSC_BOT_Process+0x426>
    
  case BOT_RECEIVE_CSW:
    
    USBH_BulkReceiveData (phost,
                          MSC_Handle->hbot.csw.data, 
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	f103 0178 	add.w	r1, r3, #120	; 0x78
    USBH_BulkReceiveData (phost,
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	791b      	ldrb	r3, [r3, #4]
 8010aba:	220d      	movs	r2, #13
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7ff f901 	bl	800fcc4 <USBH_BulkReceiveData>
                          BOT_CSW_LENGTH , 
                          MSC_Handle->InPipe);
    
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	2208      	movs	r2, #8
 8010ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010aca:	e09d      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    
  case BOT_RECEIVE_CSW_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	791b      	ldrb	r3, [r3, #4]
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f003 faca 	bl	801406c <USBH_LL_GetURBState>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	753b      	strb	r3, [r7, #20]
    
    /* Decode CSW */
    if(URB_Status == USBH_URB_DONE)
 8010adc:	7d3b      	ldrb	r3, [r7, #20]
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d11d      	bne.n	8010b1e <USBH_MSC_BOT_Process+0x34e>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      CSW_Status = USBH_MSC_DecodeCSW(phost);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 f8ba 	bl	8010c6c <USBH_MSC_DecodeCSW>
 8010af8:	4603      	mov	r3, r0
 8010afa:	757b      	strb	r3, [r7, #21]
      
      if(CSW_Status == BOT_CSW_CMD_PASSED)
 8010afc:	7d7b      	ldrb	r3, [r7, #21]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d102      	bne.n	8010b08 <USBH_MSC_BOT_Process+0x338>
      {
        status = USBH_OK;
 8010b02:	2300      	movs	r3, #0
 8010b04:	75fb      	strb	r3, [r7, #23]
 8010b06:	e001      	b.n	8010b0c <USBH_MSC_BOT_Process+0x33c>
      }
      else
      {
        status = USBH_FAIL;
 8010b08:	2302      	movs	r3, #2
 8010b0a:	75fb      	strb	r3, [r7, #23]
      }
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010b12:	2200      	movs	r2, #0
 8010b14:	2102      	movs	r1, #2
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fb fc80 	bl	800c41c <osMessagePut>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 8010b1c:	e06d      	b.n	8010bfa <USBH_MSC_BOT_Process+0x42a>
    else if(URB_Status == USBH_URB_STALL)     
 8010b1e:	7d3b      	ldrb	r3, [r7, #20]
 8010b20:	2b05      	cmp	r3, #5
 8010b22:	d16a      	bne.n	8010bfa <USBH_MSC_BOT_Process+0x42a>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	2209      	movs	r2, #9
 8010b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010b32:	2200      	movs	r2, #0
 8010b34:	2102      	movs	r1, #2
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fb fc70 	bl	800c41c <osMessagePut>
    break;
 8010b3c:	e05d      	b.n	8010bfa <USBH_MSC_BOT_Process+0x42a>
    
  case BOT_ERROR_IN: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8010b3e:	78fb      	ldrb	r3, [r7, #3]
 8010b40:	2200      	movs	r2, #0
 8010b42:	4619      	mov	r1, r3
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 f865 	bl	8010c14 <USBH_MSC_BOT_Abort>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	75bb      	strb	r3, [r7, #22]
    
    if (error == USBH_OK)
 8010b4e:	7dbb      	ldrb	r3, [r7, #22]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d104      	bne.n	8010b5e <USBH_MSC_BOT_Process+0x38e>
    {
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	2207      	movs	r2, #7
 8010b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      /* This means that there is a STALL Error limit, Do Reset Recovery */
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8010b5c:	e04f      	b.n	8010bfe <USBH_MSC_BOT_Process+0x42e>
    else if (error == USBH_UNRECOVERED_ERROR)
 8010b5e:	7dbb      	ldrb	r3, [r7, #22]
 8010b60:	2b04      	cmp	r3, #4
 8010b62:	d14c      	bne.n	8010bfe <USBH_MSC_BOT_Process+0x42e>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	220b      	movs	r2, #11
 8010b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010b6c:	e047      	b.n	8010bfe <USBH_MSC_BOT_Process+0x42e>
    
  case BOT_ERROR_OUT: 
    error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8010b6e:	78fb      	ldrb	r3, [r7, #3]
 8010b70:	2201      	movs	r2, #1
 8010b72:	4619      	mov	r1, r3
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 f84d 	bl	8010c14 <USBH_MSC_BOT_Abort>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	75bb      	strb	r3, [r7, #22]
    
    if ( error == USBH_OK)
 8010b7e:	7dbb      	ldrb	r3, [r7, #22]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d11d      	bne.n	8010bc0 <USBH_MSC_BOT_Process+0x3f0>
    { 
      
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	795b      	ldrb	r3, [r3, #5]
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f003 fac2 	bl	8014114 <USBH_LL_GetToggle>
 8010b90:	4603      	mov	r3, r0
 8010b92:	73fb      	strb	r3, [r7, #15]
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	7959      	ldrb	r1, [r3, #5]
 8010b98:	7bfb      	ldrb	r3, [r7, #15]
 8010b9a:	f1c3 0301 	rsb	r3, r3, #1
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f003 fa83 	bl	80140ae <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	791b      	ldrb	r3, [r3, #4]
 8010bac:	2200      	movs	r2, #0
 8010bae:	4619      	mov	r1, r3
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f003 fa7c 	bl	80140ae <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;        
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	2209      	movs	r2, #9
 8010bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    else if (error == USBH_UNRECOVERED_ERROR)
    {
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
    }
    break;
 8010bbe:	e020      	b.n	8010c02 <USBH_MSC_BOT_Process+0x432>
    else if (error == USBH_UNRECOVERED_ERROR)
 8010bc0:	7dbb      	ldrb	r3, [r7, #22]
 8010bc2:	2b04      	cmp	r3, #4
 8010bc4:	d11d      	bne.n	8010c02 <USBH_MSC_BOT_Process+0x432>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	220b      	movs	r2, #11
 8010bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    break;
 8010bce:	e018      	b.n	8010c02 <USBH_MSC_BOT_Process+0x432>
    
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7ff fda0 	bl	8010716 <USBH_MSC_BOT_REQ_Reset>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	75fb      	strb	r3, [r7, #23]
    if ( status == USBH_OK)
 8010bda:	7dfb      	ldrb	r3, [r7, #23]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d112      	bne.n	8010c06 <USBH_MSC_BOT_Process+0x436>
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	2201      	movs	r2, #1
 8010be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }
    break;
 8010be8:	e00d      	b.n	8010c06 <USBH_MSC_BOT_Process+0x436>
    
  default:      
    break;
 8010bea:	bf00      	nop
 8010bec:	e00c      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    break;
 8010bee:	bf00      	nop
 8010bf0:	e00a      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    break;  
 8010bf2:	bf00      	nop
 8010bf4:	e008      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    break;
 8010bf6:	bf00      	nop
 8010bf8:	e006      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    break;
 8010bfa:	bf00      	nop
 8010bfc:	e004      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    break;
 8010bfe:	bf00      	nop
 8010c00:	e002      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    break;
 8010c02:	bf00      	nop
 8010c04:	e000      	b.n	8010c08 <USBH_MSC_BOT_Process+0x438>
    break;
 8010c06:	bf00      	nop
  }
  return status;
 8010c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3718      	adds	r7, #24
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop

08010c14 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	70fb      	strb	r3, [r7, #3]
 8010c20:	4613      	mov	r3, r2
 8010c22:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_FAIL;
 8010c24:	2302      	movs	r3, #2
 8010c26:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010c2e:	69db      	ldr	r3, [r3, #28]
 8010c30:	60bb      	str	r3, [r7, #8]
  
  switch (dir)
 8010c32:	78bb      	ldrb	r3, [r7, #2]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <USBH_MSC_BOT_Abort+0x2a>
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d009      	beq.n	8010c50 <USBH_MSC_BOT_Abort+0x3c>
    /*send ClrFeature on Bulk OUT endpoint */
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
    break;
    
  default:
    break;
 8010c3c:	e011      	b.n	8010c62 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	79db      	ldrb	r3, [r3, #7]
 8010c42:	4619      	mov	r1, r3
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7fe fbb0 	bl	800f3aa <USBH_ClrFeature>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8010c4e:	e008      	b.n	8010c62 <USBH_MSC_BOT_Abort+0x4e>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	799b      	ldrb	r3, [r3, #6]
 8010c54:	4619      	mov	r1, r3
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7fe fba7 	bl	800f3aa <USBH_ClrFeature>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c60:	bf00      	nop
  }
  return status;
 8010c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8010c7e:	2301      	movs	r3, #1
 8010c80:	73fb      	strb	r3, [r7, #15]
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	791b      	ldrb	r3, [r3, #4]
 8010c86:	4619      	mov	r1, r3
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f003 f917 	bl	8013ebc <USBH_LL_GetLastXferSize>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b0d      	cmp	r3, #13
 8010c92:	d002      	beq.n	8010c9a <USBH_MSC_DecodeCSW+0x2e>
      Device intends to transfer no data)
      (11) Ho > Do  (Host expects to send data to the device,
      Device intends to receive data from the host)*/
      
      
      status = BOT_CSW_PHASE_ERROR;
 8010c94:	2302      	movs	r3, #2
 8010c96:	73fb      	strb	r3, [r7, #15]
 8010c98:	e024      	b.n	8010ce4 <USBH_MSC_DecodeCSW+0x78>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c9e:	4a14      	ldr	r2, [pc, #80]	; (8010cf0 <USBH_MSC_DecodeCSW+0x84>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d11d      	bne.n	8010ce0 <USBH_MSC_DecodeCSW+0x74>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d119      	bne.n	8010ce4 <USBH_MSC_DecodeCSW+0x78>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d102      	bne.n	8010cc0 <USBH_MSC_DecodeCSW+0x54>
            (12) Ho = Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            
            */
            
            status = BOT_CSW_CMD_PASSED;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	73fb      	strb	r3, [r7, #15]
 8010cbe:	e011      	b.n	8010ce4 <USBH_MSC_DecodeCSW+0x78>
          }
          else if(MSC_Handle->hbot.csw.field.Status == 1)
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d102      	bne.n	8010cd0 <USBH_MSC_DecodeCSW+0x64>
          {
            status = BOT_CSW_CMD_FAILED;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	73fb      	strb	r3, [r7, #15]
 8010cce:	e009      	b.n	8010ce4 <USBH_MSC_DecodeCSW+0x78>
          }
          
          else if(MSC_Handle->hbot.csw.field.Status == 2)
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	d104      	bne.n	8010ce4 <USBH_MSC_DecodeCSW+0x78>
            Di Device intends to send data to the host)
            (13) Ho < Do (Host expects to send data to the device, 
            Device intends to receive data from the host)
            */
            
            status = BOT_CSW_PHASE_ERROR;
 8010cda:	2302      	movs	r3, #2
 8010cdc:	73fb      	strb	r3, [r7, #15]
 8010cde:	e001      	b.n	8010ce4 <USBH_MSC_DecodeCSW+0x78>
      else
      {
        /* If the CSW Signature is not valid, We sall return the Phase Error to
        Upper Layers for Reset Recovery */
        
        status = BOT_CSW_PHASE_ERROR;
 8010ce0:	2302      	movs	r3, #2
 8010ce2:	73fb      	strb	r3, [r7, #15]
      }
    } /* CSW Length Check*/
    
  return status;
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	53425355 	.word	0x53425355

08010cf4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010d00:	2302      	movs	r3, #2
 8010d02:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010d0a:	69db      	ldr	r3, [r3, #28]
 8010d0c:	60bb      	str	r3, [r7, #8]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d002      	beq.n	8010d1e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d021      	beq.n	8010d60 <USBH_MSC_SCSI_TestUnitReady+0x6c>
  case BOT_CMD_WAIT: 
    error = USBH_MSC_BOT_Process(phost, lun);
    break;
    
  default:
    break;
 8010d1c:	e028      	b.n	8010d70 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	2200      	movs	r2, #0
 8010d22:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	2200      	movs	r2, #0
 8010d28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	220a      	movs	r2, #10
 8010d30:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	3363      	adds	r3, #99	; 0x63
 8010d38:	2210      	movs	r2, #16
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f003 faa4 	bl	801428a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	2200      	movs	r2, #0
 8010d46:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2202      	movs	r2, #2
 8010d56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    error = USBH_BUSY; 
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8010d5e:	e007      	b.n	8010d70 <USBH_MSC_SCSI_TestUnitReady+0x7c>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010d60:	78fb      	ldrb	r3, [r7, #3]
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fd33 	bl	80107d0 <USBH_MSC_BOT_Process>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8010d6e:	bf00      	nop
  }
  
  return error;
 8010d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3710      	adds	r7, #16
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b086      	sub	sp, #24
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	60f8      	str	r0, [r7, #12]
 8010d82:	460b      	mov	r3, r1
 8010d84:	607a      	str	r2, [r7, #4]
 8010d86:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d002      	beq.n	8010da6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d027      	beq.n	8010df4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
    }
    break;
    
  default:
    break;
 8010da4:	e060      	b.n	8010e68 <USBH_MSC_SCSI_ReadCapacity+0xee>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	2208      	movs	r2, #8
 8010daa:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	2280      	movs	r2, #128	; 0x80
 8010db0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	220a      	movs	r2, #10
 8010db8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	3363      	adds	r3, #99	; 0x63
 8010dc0:	2210      	movs	r2, #16
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f003 fa60 	bl	801428a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	2225      	movs	r2, #37	; 0x25
 8010dce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	2202      	movs	r2, #2
 8010dde:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	f103 0210 	add.w	r2, r3, #16
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010dee:	2301      	movs	r3, #1
 8010df0:	75fb      	strb	r3, [r7, #23]
    break;
 8010df2:	e039      	b.n	8010e68 <USBH_MSC_SCSI_ReadCapacity+0xee>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010df4:	7afb      	ldrb	r3, [r7, #11]
 8010df6:	4619      	mov	r1, r3
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f7ff fce9 	bl	80107d0 <USBH_MSC_BOT_Process>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010e02:	7dfb      	ldrb	r3, [r7, #23]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d12e      	bne.n	8010e66 <USBH_MSC_SCSI_ReadCapacity+0xec>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e0e:	3303      	adds	r3, #3
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	461a      	mov	r2, r3
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e1a:	3302      	adds	r3, #2
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	021b      	lsls	r3, r3, #8
 8010e20:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e28:	3301      	adds	r3, #1
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010e2e:	431a      	orrs	r2, r3
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	061b      	lsls	r3, r3, #24
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	461a      	mov	r2, r3
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	601a      	str	r2, [r3, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e48:	3307      	adds	r3, #7
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	b21a      	sxth	r2, r3
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e54:	3306      	adds	r3, #6
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	021b      	lsls	r3, r3, #8
 8010e5a:	b21b      	sxth	r3, r3
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	b21b      	sxth	r3, r3
 8010e60:	b29a      	uxth	r2, r3
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	809a      	strh	r2, [r3, #4]
    break;
 8010e66:	bf00      	nop
  }
  
  return error;
 8010e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3718      	adds	r7, #24
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b086      	sub	sp, #24
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	607a      	str	r2, [r7, #4]
 8010e7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010e80:	2302      	movs	r3, #2
 8010e82:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010e8a:	69db      	ldr	r3, [r3, #28]
 8010e8c:	613b      	str	r3, [r7, #16]
  switch(MSC_Handle->hbot.cmd_state)
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d002      	beq.n	8010e9e <USBH_MSC_SCSI_Inquiry+0x2c>
 8010e98:	2b02      	cmp	r3, #2
 8010e9a:	d03d      	beq.n	8010f18 <USBH_MSC_SCSI_Inquiry+0xa6>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
    }
    break;
    
  default:
    break;
 8010e9c:	e086      	b.n	8010fac <USBH_MSC_SCSI_Inquiry+0x13a>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2224      	movs	r2, #36	; 0x24
 8010ea2:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	2280      	movs	r2, #128	; 0x80
 8010ea8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	220a      	movs	r2, #10
 8010eb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	3363      	adds	r3, #99	; 0x63
 8010eb8:	220a      	movs	r2, #10
 8010eba:	2100      	movs	r1, #0
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f003 f9e4 	bl	801428a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	2212      	movs	r2, #18
 8010ec6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8010eca:	7afb      	ldrb	r3, [r7, #11]
 8010ecc:	015b      	lsls	r3, r3, #5
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	2224      	movs	r2, #36	; 0x24
 8010eea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	2202      	movs	r2, #2
 8010f02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	f103 0210 	add.w	r2, r3, #16
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8010f12:	2301      	movs	r3, #1
 8010f14:	75fb      	strb	r3, [r7, #23]
    break;
 8010f16:	e049      	b.n	8010fac <USBH_MSC_SCSI_Inquiry+0x13a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8010f18:	7afb      	ldrb	r3, [r7, #11]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	f7ff fc57 	bl	80107d0 <USBH_MSC_BOT_Process>
 8010f22:	4603      	mov	r3, r0
 8010f24:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 8010f26:	7dfb      	ldrb	r3, [r7, #23]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d13e      	bne.n	8010faa <USBH_MSC_SCSI_Inquiry+0x138>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8010f2c:	2222      	movs	r2, #34	; 0x22
 8010f2e:	2100      	movs	r1, #0
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f003 f9aa 	bl	801428a <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	f003 031f 	and.w	r3, r3, #31
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	705a      	strb	r2, [r3, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	095b      	lsrs	r3, r3, #5
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	701a      	strb	r2, [r3, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f5e:	3301      	adds	r3, #1
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	b25b      	sxtb	r3, r3
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	09db      	lsrs	r3, r3, #7
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	709a      	strb	r2, [r3, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	1cd8      	adds	r0, r3, #3
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f7a:	3308      	adds	r3, #8
 8010f7c:	2208      	movs	r2, #8
 8010f7e:	4619      	mov	r1, r3
 8010f80:	f003 f978 	bl	8014274 <memcpy>
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f103 000c 	add.w	r0, r3, #12
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f90:	3310      	adds	r3, #16
 8010f92:	2210      	movs	r2, #16
 8010f94:	4619      	mov	r1, r3
 8010f96:	f003 f96d 	bl	8014274 <memcpy>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	331d      	adds	r3, #29
 8010f9e:	693a      	ldr	r2, [r7, #16]
 8010fa0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8010fa4:	3220      	adds	r2, #32
 8010fa6:	6812      	ldr	r2, [r2, #0]
 8010fa8:	601a      	str	r2, [r3, #0]
    break;
 8010faa:	bf00      	nop
  }
  
  return error;
 8010fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}

08010fb6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 8010fb6:	b580      	push	{r7, lr}
 8010fb8:	b086      	sub	sp, #24
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	60f8      	str	r0, [r7, #12]
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	607a      	str	r2, [r7, #4]
 8010fc2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 8010fce:	69db      	ldr	r3, [r3, #28]
 8010fd0:	613b      	str	r3, [r7, #16]
  
  switch(MSC_Handle->hbot.cmd_state)
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d002      	beq.n	8010fe2 <USBH_MSC_SCSI_RequestSense+0x2c>
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d03d      	beq.n	801105c <USBH_MSC_SCSI_RequestSense+0xa6>
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
    }
    break;
    
  default:
    break;
 8010fe0:	e05d      	b.n	801109e <USBH_MSC_SCSI_RequestSense+0xe8>
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	220e      	movs	r2, #14
 8010fe6:	65da      	str	r2, [r3, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	2280      	movs	r2, #128	; 0x80
 8010fec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	220a      	movs	r2, #10
 8010ff4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	3363      	adds	r3, #99	; 0x63
 8010ffc:	2210      	movs	r2, #16
 8010ffe:	2100      	movs	r1, #0
 8011000:	4618      	mov	r0, r3
 8011002:	f003 f942 	bl	801428a <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	2203      	movs	r2, #3
 801100a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 801100e:	7afb      	ldrb	r3, [r7, #11]
 8011010:	015b      	lsls	r3, r3, #5
 8011012:	b2da      	uxtb	r2, r3
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2200      	movs	r2, #0
 801101e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	2200      	movs	r2, #0
 8011026:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	220e      	movs	r2, #14
 801102e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	2200      	movs	r2, #0
 8011036:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	2201      	movs	r2, #1
 801103e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	2202      	movs	r2, #2
 8011046:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	f103 0210 	add.w	r2, r3, #16
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    error = USBH_BUSY; 
 8011056:	2301      	movs	r3, #1
 8011058:	75fb      	strb	r3, [r7, #23]
    break;
 801105a:	e020      	b.n	801109e <USBH_MSC_SCSI_RequestSense+0xe8>
    error = USBH_MSC_BOT_Process(phost, lun);
 801105c:	7afb      	ldrb	r3, [r7, #11]
 801105e:	4619      	mov	r1, r3
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	f7ff fbb5 	bl	80107d0 <USBH_MSC_BOT_Process>
 8011066:	4603      	mov	r3, r0
 8011068:	75fb      	strb	r3, [r7, #23]
    if(error == USBH_OK)
 801106a:	7dfb      	ldrb	r3, [r7, #23]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d115      	bne.n	801109c <USBH_MSC_SCSI_RequestSense+0xe6>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011076:	3302      	adds	r3, #2
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	f003 030f 	and.w	r3, r3, #15
 801107e:	b2da      	uxtb	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	701a      	strb	r2, [r3, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801108a:	7b1a      	ldrb	r2, [r3, #12]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	705a      	strb	r2, [r3, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011096:	7b5a      	ldrb	r2, [r3, #13]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	709a      	strb	r2, [r3, #2]
    break;
 801109c:	bf00      	nop
  }
  
  return error;
 801109e:	7dfb      	ldrb	r3, [r7, #23]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3718      	adds	r7, #24
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <String_GetString>:
//
//         Any character typed other than those above will be masked with 0x7F and stored in the buffer
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_GetString( uint8_t *Buffer )
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
    uint16_t Length = 0;
 80110b0:	2300      	movs	r3, #0
 80110b2:	82fb      	strh	r3, [r7, #22]
    uint16_t Byte = 1;
 80110b4:	2301      	movs	r3, #1
 80110b6:	82bb      	strh	r3, [r7, #20]
    uint8_t  *Ptr;
    //
    //  Looop until exited
    //
    Ptr = Buffer;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	613b      	str	r3, [r7, #16]
    while ( Byte != 0 )
 80110bc:	e086      	b.n	80111cc <String_GetString+0x124>
    {
        //
        //  Get the byte
        //
        Byte = String_GetByte() & ASCII_MASK;
 80110be:	f000 f8c3 	bl	8011248 <String_GetByte>
 80110c2:	4603      	mov	r3, r0
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110ca:	82bb      	strh	r3, [r7, #20]
        //
        //  Handle special characters
        //
        switch ( Byte )
 80110cc:	8abb      	ldrh	r3, [r7, #20]
 80110ce:	3b03      	subs	r3, #3
 80110d0:	2b18      	cmp	r3, #24
 80110d2:	d86c      	bhi.n	80111ae <String_GetString+0x106>
 80110d4:	a201      	add	r2, pc, #4	; (adr r2, 80110dc <String_GetString+0x34>)
 80110d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110da:	bf00      	nop
 80110dc:	0801116b 	.word	0x0801116b
 80110e0:	080111af 	.word	0x080111af
 80110e4:	080111af 	.word	0x080111af
 80110e8:	080111af 	.word	0x080111af
 80110ec:	080111af 	.word	0x080111af
 80110f0:	0801114d 	.word	0x0801114d
 80110f4:	080111af 	.word	0x080111af
 80110f8:	08011141 	.word	0x08011141
 80110fc:	080111af 	.word	0x080111af
 8011100:	080111af 	.word	0x080111af
 8011104:	08011141 	.word	0x08011141
 8011108:	080111af 	.word	0x080111af
 801110c:	080111af 	.word	0x080111af
 8011110:	080111af 	.word	0x080111af
 8011114:	080111af 	.word	0x080111af
 8011118:	08011175 	.word	0x08011175
 801111c:	080111af 	.word	0x080111af
 8011120:	080111af 	.word	0x080111af
 8011124:	08011189 	.word	0x08011189
 8011128:	080111af 	.word	0x080111af
 801112c:	08011189 	.word	0x08011189
 8011130:	080111af 	.word	0x080111af
 8011134:	080111af 	.word	0x080111af
 8011138:	080111af 	.word	0x080111af
 801113c:	08011189 	.word	0x08011189
            case '\n':
            case '\r':
                //
                //  Add a null to the end of the buffer
                //
                *Ptr = '\0';
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	2200      	movs	r2, #0
 8011144:	701a      	strb	r2, [r3, #0]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	82bb      	strh	r3, [r7, #20]
                break;
 801114a:	e03f      	b.n	80111cc <String_GetString+0x124>
            case '\b':
                //
                //  If we have characters to delete
                //  then delete the last one and decrement the length
                //
                if (Ptr > Buffer )
 801114c:	693a      	ldr	r2, [r7, #16]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	429a      	cmp	r2, r3
 8011152:	d93b      	bls.n	80111cc <String_GetString+0x124>
                {
                    Ptr--;
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	3b01      	subs	r3, #1
 8011158:	613b      	str	r3, [r7, #16]
                    Length--;
 801115a:	8afb      	ldrh	r3, [r7, #22]
 801115c:	3b01      	subs	r3, #1
 801115e:	82fb      	strh	r3, [r7, #22]
                    //
                    //  Erase the character
                    //
                    String_PutStringN("\b \b", 3);
 8011160:	2103      	movs	r1, #3
 8011162:	481f      	ldr	r0, [pc, #124]	; (80111e0 <String_GetString+0x138>)
 8011164:	f000 f840 	bl	80111e8 <String_PutStringN>
                }
                break;
 8011168:	e030      	b.n	80111cc <String_GetString+0x124>
            //
            case 'c' & CONTROL_MASK:
                //
                //  Set the length to zero
                //
                Length = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	82fb      	strh	r3, [r7, #22]
                //
                //  Set Byte to zero to exit the while loop
                //
                Byte = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	82bb      	strh	r3, [r7, #20]
                break;
 8011172:	e02b      	b.n	80111cc <String_GetString+0x124>
            //
            case 'r' & CONTROL_MASK:
                //
                //  new line
                //
                String_PutStringN( "\n\r", 2);
 8011174:	2102      	movs	r1, #2
 8011176:	481b      	ldr	r0, [pc, #108]	; (80111e4 <String_GetString+0x13c>)
 8011178:	f000 f836 	bl	80111e8 <String_PutStringN>
                //
                //  output buffer
                //
                String_PutStringN( (char *)Buffer, Length );
 801117c:	8afb      	ldrh	r3, [r7, #22]
 801117e:	4619      	mov	r1, r3
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 f831 	bl	80111e8 <String_PutStringN>
                break;
 8011186:	e021      	b.n	80111cc <String_GetString+0x124>
            {
                uint16_t Counter;
                //
                //  Point to the beginning of the buffer
                //
                Ptr = Buffer;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	613b      	str	r3, [r7, #16]
                //
                //  Erase the line visually
                //
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 801118c:	2300      	movs	r3, #0
 801118e:	81fb      	strh	r3, [r7, #14]
 8011190:	e006      	b.n	80111a0 <String_GetString+0xf8>
                {
                    String_PutStringN("\b \b", 3);
 8011192:	2103      	movs	r1, #3
 8011194:	4812      	ldr	r0, [pc, #72]	; (80111e0 <String_GetString+0x138>)
 8011196:	f000 f827 	bl	80111e8 <String_PutStringN>
                for ( Counter = 0 ; Counter < Length ; Counter++ )
 801119a:	89fb      	ldrh	r3, [r7, #14]
 801119c:	3301      	adds	r3, #1
 801119e:	81fb      	strh	r3, [r7, #14]
 80111a0:	89fa      	ldrh	r2, [r7, #14]
 80111a2:	8afb      	ldrh	r3, [r7, #22]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d3f4      	bcc.n	8011192 <String_GetString+0xea>
                }
                //
                //  Zero out the length of the string
                //
                Length = 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	82fb      	strh	r3, [r7, #22]
                break;
 80111ac:	e00e      	b.n	80111cc <String_GetString+0x124>
            //
            default:
                //
                //  Store the byte
                //
                *(Ptr++) = Byte;
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	1c5a      	adds	r2, r3, #1
 80111b2:	613a      	str	r2, [r7, #16]
 80111b4:	8aba      	ldrh	r2, [r7, #20]
 80111b6:	b2d2      	uxtb	r2, r2
 80111b8:	701a      	strb	r2, [r3, #0]
                //
                //  Increment the length
                //
                Length++;
 80111ba:	8afb      	ldrh	r3, [r7, #22]
 80111bc:	3301      	adds	r3, #1
 80111be:	82fb      	strh	r3, [r7, #22]
                //
                // Echo it back to the user
                //
                String_PutByte( Byte );
 80111c0:	8abb      	ldrh	r3, [r7, #20]
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	4618      	mov	r0, r3
 80111c6:	f000 f82b 	bl	8011220 <String_PutByte>
                break;
 80111ca:	bf00      	nop
    while ( Byte != 0 )
 80111cc:	8abb      	ldrh	r3, [r7, #20]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f47f af75 	bne.w	80110be <String_GetString+0x16>
        }
    }
    return Length;
 80111d4:	8afb      	ldrh	r3, [r7, #22]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3718      	adds	r7, #24
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	08016ff0 	.word	0x08016ff0
 80111e4:	08016ff4 	.word	0x08016ff4

080111e8 <String_PutStringN>:
//
//  Note:   This routine interfaces directly with the STM32CubeMX Hal
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t    String_PutStringN( char *Buffer, uint16_t Length )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	460b      	mov	r3, r1
 80111f2:	807b      	strh	r3, [r7, #2]
    //
    //  Don't do anything if length is zero
    //
    if ( Length > 0 )
 80111f4:	887b      	ldrh	r3, [r7, #2]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00d      	beq.n	8011216 <String_PutStringN+0x2e>
        //
#else
            //
            //  Loop through the buffer
            //
            for ( ; Length > 0 ; Length-- )
 80111fa:	e009      	b.n	8011210 <String_PutStringN+0x28>
            {
                //
                //  output a character
                //
                String_PutByte( (uint8_t)*(Buffer++) );
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	1c5a      	adds	r2, r3, #1
 8011200:	607a      	str	r2, [r7, #4]
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	4618      	mov	r0, r3
 8011206:	f000 f80b 	bl	8011220 <String_PutByte>
            for ( ; Length > 0 ; Length-- )
 801120a:	887b      	ldrh	r3, [r7, #2]
 801120c:	3b01      	subs	r3, #1
 801120e:	807b      	strh	r3, [r7, #2]
 8011210:	887b      	ldrh	r3, [r7, #2]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d1f2      	bne.n	80111fc <String_PutStringN+0x14>
            }
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    }
    return Length;
 8011216:	887b      	ldrh	r3, [r7, #2]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3708      	adds	r7, #8
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <String_PutByte>:
//  Note:   This function interfaces directly with the STM32CubeMX Hal
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_PutByte( uint8_t Byte )
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	4603      	mov	r3, r0
 8011228:	71fb      	strb	r3, [r7, #7]
//
#else
    //
    //  output the byte normally
    //
    HAL_UART_Transmit(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 801122a:	1df9      	adds	r1, r7, #7
 801122c:	f04f 33ff 	mov.w	r3, #4294967295
 8011230:	2201      	movs	r2, #1
 8011232:	4804      	ldr	r0, [pc, #16]	; (8011244 <String_PutByte+0x24>)
 8011234:	f7f5 ffc9 	bl	80071ca <HAL_UART_Transmit>
#endif  // #ifdef _USE_INTERRUPTS_TX_
#endif  // #ifdef _USE_DMA_TX_
    return Byte;
 8011238:	79fb      	ldrb	r3, [r7, #7]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3708      	adds	r7, #8
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	20004834 	.word	0x20004834

08011248 <String_GetByte>:
//          String_GetRxStatus.
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t String_GetByte( void )
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
    uint8_t Byte;
    //
    //  read the byte normally
    //
    HAL_UART_Receive(CONSOLE_UART, &Byte, 1, 0xFFFFFFFF);
 801124e:	1df9      	adds	r1, r7, #7
 8011250:	f04f 33ff 	mov.w	r3, #4294967295
 8011254:	2201      	movs	r2, #1
 8011256:	4804      	ldr	r0, [pc, #16]	; (8011268 <String_GetByte+0x20>)
 8011258:	f7f6 f842 	bl	80072e0 <HAL_UART_Receive>
    return Byte;
 801125c:	79fb      	ldrb	r3, [r7, #7]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	20004834 	.word	0x20004834

0801126c <BSP_SDRAM_Init>:
/**
 * @brief  Initializes the SDRAM device for SDRAM disk area
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
	uint8_t sdramstatus = SDRAM_OK;
 8011272:	2300      	movs	r3, #0
 8011274:	71fb      	strb	r3, [r7, #7]

  return sdramstatus;
 8011276:	79fb      	ldrb	r3, [r7, #7]
}
 8011278:	4618      	mov	r0, r3
 801127a:	370c      	adds	r7, #12
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b086      	sub	sp, #24
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 8011290:	2300      	movs	r3, #0
 8011292:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8011294:	68f9      	ldr	r1, [r7, #12]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	68ba      	ldr	r2, [r7, #8]
 801129a:	4806      	ldr	r0, [pc, #24]	; (80112b4 <BSP_SDRAM_ReadData+0x30>)
 801129c:	f7f5 fa68 	bl	8006770 <HAL_SDRAM_Read_32b>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d001      	beq.n	80112aa <BSP_SDRAM_ReadData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 80112a6:	2301      	movs	r3, #1
 80112a8:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 80112aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3718      	adds	r7, #24
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	20004944 	.word	0x20004944

080112b8 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	75fb      	strb	r3, [r7, #23]

  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 80112c8:	68f9      	ldr	r1, [r7, #12]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	4806      	ldr	r0, [pc, #24]	; (80112e8 <BSP_SDRAM_WriteData+0x30>)
 80112d0:	f7f5 fa8d 	bl	80067ee <HAL_SDRAM_Write_32b>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <BSP_SDRAM_WriteData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 80112da:	2301      	movs	r3, #1
 80112dc:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 80112de:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3718      	adds	r7, #24
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	20004944 	.word	0x20004944

080112ec <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 80112f6:	2300      	movs	r3, #0
 80112f8:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	2201      	movs	r2, #1
 80112fe:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	2210      	movs	r2, #16
 8011304:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	2201      	movs	r2, #1
 801130a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	2200      	movs	r2, #0
 8011310:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8011312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011316:	6839      	ldr	r1, [r7, #0]
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f7f5 faab 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801131e:	2001      	movs	r0, #1
 8011320:	f7f0 fc92 	bl	8001c48 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	2202      	movs	r2, #2
 8011328:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2210      	movs	r2, #16
 801132e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	2201      	movs	r2, #1
 8011334:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	2200      	movs	r2, #0
 801133a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 801133c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011340:	6839      	ldr	r1, [r7, #0]
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f7f5 fa96 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	2203      	movs	r2, #3
 801134c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	2210      	movs	r2, #16
 8011352:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	2208      	movs	r2, #8
 8011358:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2200      	movs	r2, #0
 801135e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8011360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011364:	6839      	ldr	r1, [r7, #0]
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7f5 fa84 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 801136c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8011370:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	2204      	movs	r2, #4
 8011376:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	2210      	movs	r2, #16
 801137c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	2201      	movs	r2, #1
 8011382:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8011384:	68fa      	ldr	r2, [r7, #12]
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 801138a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7f5 fa6f 	bl	8006874 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f240 6203 	movw	r2, #1539	; 0x603
 801139e:	615a      	str	r2, [r3, #20]

}
 80113a0:	bf00      	nop
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 80113ac:	4904      	ldr	r1, [pc, #16]	; (80113c0 <MX_FATFS_Init+0x18>)
 80113ae:	4805      	ldr	r0, [pc, #20]	; (80113c4 <MX_FATFS_Init+0x1c>)
 80113b0:	f7fa fe5e 	bl	800c070 <FATFS_LinkDriver>
 80113b4:	4603      	mov	r3, r0
 80113b6:	461a      	mov	r2, r3
 80113b8:	4b03      	ldr	r3, [pc, #12]	; (80113c8 <MX_FATFS_Init+0x20>)
 80113ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */
  /* USER CODE END Init */
}
 80113bc:	bf00      	nop
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	200041a8 	.word	0x200041a8
 80113c4:	08019fcc 	.word	0x08019fcc
 80113c8:	20004610 	.word	0x20004610

080113cc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80113cc:	b480      	push	{r7}
 80113ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 80113d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr

080113dc <initArray>:

DMA_HandleTypeDef hdma_memtomem_dma2_stream2;
DMA_HandleTypeDef hdma_memtomem_dma2_stream1;
SDRAM_HandleTypeDef hsdram1;

void initArray(Array *a, size_t initialSize) {
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
	a->array = (uint16_t *) malloc(initialSize * sizeof(uint16_t));
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	005b      	lsls	r3, r3, #1
 80113ea:	4618      	mov	r0, r3
 80113ec:	f001 f801 	bl	80123f2 <malloc>
 80113f0:	4603      	mov	r3, r0
 80113f2:	461a      	mov	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	601a      	str	r2, [r3, #0]
	a->used = 0;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	605a      	str	r2, [r3, #4]
	a->size = initialSize;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	609a      	str	r2, [r3, #8]
}
 8011404:	bf00      	nop
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
	a->size = newsize;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	609a      	str	r2, [r3, #8]
	a->array = (uint16_t *) realloc(a->array, a->size * sizeof(uint16_t));
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	689b      	ldr	r3, [r3, #8]
 8011424:	005b      	lsls	r3, r3, #1
 8011426:	4619      	mov	r1, r3
 8011428:	4610      	mov	r0, r2
 801142a:	f003 fc1f 	bl	8014c6c <realloc>
 801142e:	4602      	mov	r2, r0
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	601a      	str	r2, [r3, #0]
	a->used = 0;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	605a      	str	r2, [r3, #4]
}
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <freeArray>:

void freeArray(Array *a) {
 8011442:	b580      	push	{r7, lr}
 8011444:	b082      	sub	sp, #8
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
	free(a->array);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	4618      	mov	r0, r3
 8011450:	f000 ffe1 	bl	8012416 <free>
	a->array = NULL;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2200      	movs	r2, #0
 8011458:	601a      	str	r2, [r3, #0]
	a->used = a->size = 0;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2200      	movs	r2, #0
 801145e:	609a      	str	r2, [r3, #8]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	689a      	ldr	r2, [r3, #8]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	605a      	str	r2, [r3, #4]
}
 8011468:	bf00      	nop
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <string_parser>:

size_t string_parser(char *input, char ***word_array) {
 8011470:	b590      	push	{r4, r7, lr}
 8011472:	b089      	sub	sp, #36	; 0x24
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
	size_t n = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	61fb      	str	r3, [r7, #28]
	const char *p = input;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	61bb      	str	r3, [r7, #24]

	while (*p) {
 8011482:	e02d      	b.n	80114e0 <string_parser+0x70>
		while (isspace((unsigned char )*p))
			++p;
 8011484:	69bb      	ldr	r3, [r7, #24]
 8011486:	3301      	adds	r3, #1
 8011488:	61bb      	str	r3, [r7, #24]
		while (isspace((unsigned char )*p))
 801148a:	f002 fed3 	bl	8014234 <__locale_ctype_ptr>
 801148e:	4602      	mov	r2, r0
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	3301      	adds	r3, #1
 8011496:	4413      	add	r3, r2
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	f003 0308 	and.w	r3, r3, #8
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d1f0      	bne.n	8011484 <string_parser+0x14>
		n += *p != '\0';
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	bf14      	ite	ne
 80114aa:	2301      	movne	r3, #1
 80114ac:	2300      	moveq	r3, #0
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	461a      	mov	r2, r3
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	4413      	add	r3, r2
 80114b6:	61fb      	str	r3, [r7, #28]
		while (*p && !isspace((unsigned char )*p))
 80114b8:	e002      	b.n	80114c0 <string_parser+0x50>
			++p;
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	3301      	adds	r3, #1
 80114be:	61bb      	str	r3, [r7, #24]
		while (*p && !isspace((unsigned char )*p))
 80114c0:	69bb      	ldr	r3, [r7, #24]
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d00b      	beq.n	80114e0 <string_parser+0x70>
 80114c8:	f002 feb4 	bl	8014234 <__locale_ctype_ptr>
 80114cc:	4602      	mov	r2, r0
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	3301      	adds	r3, #1
 80114d4:	4413      	add	r3, r2
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	f003 0308 	and.w	r3, r3, #8
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0ec      	beq.n	80114ba <string_parser+0x4a>
	while (*p) {
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d1d0      	bne.n	801148a <string_parser+0x1a>
	}

	if (n) {
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d062      	beq.n	80115b4 <string_parser+0x144>
		size_t i = 0;
 80114ee:	2300      	movs	r3, #0
 80114f0:	617b      	str	r3, [r7, #20]

		*word_array = (char**) malloc(n * sizeof(char *));
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	4618      	mov	r0, r3
 80114f8:	f000 ff7b 	bl	80123f2 <malloc>
 80114fc:	4603      	mov	r3, r0
 80114fe:	461a      	mov	r2, r3
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	601a      	str	r2, [r3, #0]

		p = input;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	61bb      	str	r3, [r7, #24]

		while (*p) {
 8011508:	e050      	b.n	80115ac <string_parser+0x13c>
			while (isspace((unsigned char )*p))
				++p;
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	3301      	adds	r3, #1
 801150e:	61bb      	str	r3, [r7, #24]
			while (isspace((unsigned char )*p))
 8011510:	f002 fe90 	bl	8014234 <__locale_ctype_ptr>
 8011514:	4602      	mov	r2, r0
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	3301      	adds	r3, #1
 801151c:	4413      	add	r3, r2
 801151e:	781b      	ldrb	r3, [r3, #0]
 8011520:	f003 0308 	and.w	r3, r3, #8
 8011524:	2b00      	cmp	r3, #0
 8011526:	d1f0      	bne.n	801150a <string_parser+0x9a>
			if (*p) {
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d03d      	beq.n	80115ac <string_parser+0x13c>
				const char *q = p;
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	613b      	str	r3, [r7, #16]
				while (*p && !isspace((unsigned char )*p))
 8011534:	e002      	b.n	801153c <string_parser+0xcc>
					++p;
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	3301      	adds	r3, #1
 801153a:	61bb      	str	r3, [r7, #24]
				while (*p && !isspace((unsigned char )*p))
 801153c:	69bb      	ldr	r3, [r7, #24]
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00b      	beq.n	801155c <string_parser+0xec>
 8011544:	f002 fe76 	bl	8014234 <__locale_ctype_ptr>
 8011548:	4602      	mov	r2, r0
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	781b      	ldrb	r3, [r3, #0]
 801154e:	3301      	adds	r3, #1
 8011550:	4413      	add	r3, r2
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	f003 0308 	and.w	r3, r3, #8
 8011558:	2b00      	cmp	r3, #0
 801155a:	d0ec      	beq.n	8011536 <string_parser+0xc6>

				size_t length = p - q;
 801155c:	69ba      	ldr	r2, [r7, #24]
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	60fb      	str	r3, [r7, #12]

				(*word_array)[i] = (char *) malloc(length + 1);
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	009b      	lsls	r3, r3, #2
 801156c:	18d4      	adds	r4, r2, r3
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3301      	adds	r3, #1
 8011572:	4618      	mov	r0, r3
 8011574:	f000 ff3d 	bl	80123f2 <malloc>
 8011578:	4603      	mov	r3, r0
 801157a:	6023      	str	r3, [r4, #0]

				strncpy((*word_array)[i], q, length);
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	4413      	add	r3, r2
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	6939      	ldr	r1, [r7, #16]
 801158c:	4618      	mov	r0, r3
 801158e:	f003 fbd5 	bl	8014d3c <strncpy>
				(*word_array)[i][length] = '\0';
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	4413      	add	r3, r2
 801159c:	681a      	ldr	r2, [r3, #0]
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	4413      	add	r3, r2
 80115a2:	2200      	movs	r2, #0
 80115a4:	701a      	strb	r2, [r3, #0]

				++i;
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	3301      	adds	r3, #1
 80115aa:	617b      	str	r3, [r7, #20]
		while (*p) {
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1ad      	bne.n	8011510 <string_parser+0xa0>
			}
		}
	}

	return n;
 80115b4:	69fb      	ldr	r3, [r7, #28]
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3724      	adds	r7, #36	; 0x24
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd90      	pop	{r4, r7, pc}

080115be <PlotData>:

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	6039      	str	r1, [r7, #0]
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	683a      	ldr	r2, [r7, #0]
 80115ce:	b291      	uxth	r1, r2
 80115d0:	2201      	movs	r2, #1
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7f0 f822 	bl	800161c <BSP_LCD_DrawPixel>
}
 80115d8:	bf00      	nop
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <InitScreen>:

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]

	BSP_LCD_Clear(BackGroundColor);
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f7ef fe6a 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f7ef fe1d 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 80115f6:	6838      	ldr	r0, [r7, #0]
 80115f8:	f7ef fe02 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 80115fc:	4803      	ldr	r0, [pc, #12]	; (801160c <InitScreen+0x2c>)
 80115fe:	f7ef fe31 	bl	8001264 <BSP_LCD_SetFont>
}
 8011602:	bf00      	nop
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	20000008 	.word	0x20000008

08011610 <LCDWrite>:

void LCDWrite(uint32_t Line, char Str[]) {
 8011610:	b580      	push	{r7, lr}
 8011612:	b090      	sub	sp, #64	; 0x40
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
	char IntStr[50];

	BSP_LCD_ClearStringLine(Line);
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7ef fe7a 	bl	8001314 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 8011620:	f107 030c 	add.w	r3, r7, #12
 8011624:	683a      	ldr	r2, [r7, #0]
 8011626:	2132      	movs	r1, #50	; 0x32
 8011628:	4618      	mov	r0, r3
 801162a:	f003 fb27 	bl	8014c7c <sniprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	b29b      	uxth	r3, r3
 8011632:	f107 020c 	add.w	r2, r7, #12
 8011636:	4611      	mov	r1, r2
 8011638:	4618      	mov	r0, r3
 801163a:	f7ef ffd7 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
}
 801163e:	bf00      	nop
 8011640:	3740      	adds	r7, #64	; 0x40
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
	...

08011648 <CountDown>:

void CountDown(uint32_t millisecs) {
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8011650:	f04f 31ff 	mov.w	r1, #4294967295
 8011654:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011658:	f7ff ffc2 	bl	80115e0 <InitScreen>

	LCDWrite(5, " ");
 801165c:	4914      	ldr	r1, [pc, #80]	; (80116b0 <CountDown+0x68>)
 801165e:	2005      	movs	r0, #5
 8011660:	f7ff ffd6 	bl	8011610 <LCDWrite>
	HAL_Delay(1);
 8011664:	2001      	movs	r0, #1
 8011666:	f7f0 faef 	bl	8001c48 <HAL_Delay>

	LCDWrite(5, "Starting in 3... ");
 801166a:	4912      	ldr	r1, [pc, #72]	; (80116b4 <CountDown+0x6c>)
 801166c:	2005      	movs	r0, #5
 801166e:	f7ff ffcf 	bl	8011610 <LCDWrite>
	HAL_Delay(millisecs);
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7f0 fae8 	bl	8001c48 <HAL_Delay>

	LCDWrite(5, "Starting in 2... ");
 8011678:	490f      	ldr	r1, [pc, #60]	; (80116b8 <CountDown+0x70>)
 801167a:	2005      	movs	r0, #5
 801167c:	f7ff ffc8 	bl	8011610 <LCDWrite>
	HAL_Delay(millisecs);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7f0 fae1 	bl	8001c48 <HAL_Delay>

	LCDWrite(5, "Starting in 1... ");
 8011686:	490d      	ldr	r1, [pc, #52]	; (80116bc <CountDown+0x74>)
 8011688:	2005      	movs	r0, #5
 801168a:	f7ff ffc1 	bl	8011610 <LCDWrite>
	HAL_Delay(millisecs);
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f7f0 fada 	bl	8001c48 <HAL_Delay>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 8011694:	490a      	ldr	r1, [pc, #40]	; (80116c0 <CountDown+0x78>)
 8011696:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801169a:	f7ff ffa1 	bl	80115e0 <InitScreen>
	LCDWrite(5, "GO!");
 801169e:	4909      	ldr	r1, [pc, #36]	; (80116c4 <CountDown+0x7c>)
 80116a0:	2005      	movs	r0, #5
 80116a2:	f7ff ffb5 	bl	8011610 <LCDWrite>
}
 80116a6:	bf00      	nop
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	08016ff8 	.word	0x08016ff8
 80116b4:	08016ffc 	.word	0x08016ffc
 80116b8:	08017010 	.word	0x08017010
 80116bc:	08017024 	.word	0x08017024
 80116c0:	ffff0000 	.word	0xffff0000
 80116c4:	08017038 	.word	0x08017038

080116c8 <scan_files>:

FRESULT scan_files(char* path
// Start node to be scanned, also used as work area
		) {
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b090      	sub	sp, #64	; 0x40
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 80116d0:	f107 0308 	add.w	r3, r7, #8
 80116d4:	6879      	ldr	r1, [r7, #4]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7f9 feaf 	bl	800b43a <f_opendir>
 80116dc:	4603      	mov	r3, r0
 80116de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80116e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d140      	bne.n	801176c <scan_files+0xa4>
		for (;;) {
			res = f_readdir(&dir, &fno); /* Read a directory item */
 80116ea:	f107 0308 	add.w	r3, r7, #8
 80116ee:	4922      	ldr	r1, [pc, #136]	; (8011778 <scan_files+0xb0>)
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7f9 ff46 	bl	800b582 <f_readdir>
 80116f6:	4603      	mov	r3, r0
 80116f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (res != FR_OK || fno.fname[0] == 0)
 80116fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011700:	2b00      	cmp	r3, #0
 8011702:	d12e      	bne.n	8011762 <scan_files+0x9a>
 8011704:	4b1c      	ldr	r3, [pc, #112]	; (8011778 <scan_files+0xb0>)
 8011706:	7a5b      	ldrb	r3, [r3, #9]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d02a      	beq.n	8011762 <scan_files+0x9a>
				break; /* Break on error or end of dir */
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 801170c:	4b1a      	ldr	r3, [pc, #104]	; (8011778 <scan_files+0xb0>)
 801170e:	7a1b      	ldrb	r3, [r3, #8]
 8011710:	f003 0310 	and.w	r3, r3, #16
 8011714:	2b00      	cmp	r3, #0
 8011716:	d01b      	beq.n	8011750 <scan_files+0x88>
				i = strlen(path);
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7ee fd83 	bl	8000224 <strlen>
 801171e:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(&path[i], "/%s", fno.fname);
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011724:	4413      	add	r3, r2
 8011726:	4a15      	ldr	r2, [pc, #84]	; (801177c <scan_files+0xb4>)
 8011728:	4915      	ldr	r1, [pc, #84]	; (8011780 <scan_files+0xb8>)
 801172a:	4618      	mov	r0, r3
 801172c:	f003 fada 	bl	8014ce4 <siprintf>
				res = scan_files(path); /* Enter the directory */
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f7ff ffc9 	bl	80116c8 <scan_files>
 8011736:	4603      	mov	r3, r0
 8011738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if (res != FR_OK)
 801173c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011740:	2b00      	cmp	r3, #0
 8011742:	d10d      	bne.n	8011760 <scan_files+0x98>
					break;
				path[i] = 0;
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011748:	4413      	add	r3, r2
 801174a:	2200      	movs	r2, #0
 801174c:	701a      	strb	r2, [r3, #0]
 801174e:	e7cc      	b.n	80116ea <scan_files+0x22>
			} else { /* It is a file. */
				printf("%s/%s 		%lu \r\n", path, fno.fname, fno.fsize);
 8011750:	4b09      	ldr	r3, [pc, #36]	; (8011778 <scan_files+0xb0>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a09      	ldr	r2, [pc, #36]	; (801177c <scan_files+0xb4>)
 8011756:	6879      	ldr	r1, [r7, #4]
 8011758:	480a      	ldr	r0, [pc, #40]	; (8011784 <scan_files+0xbc>)
 801175a:	f003 fa0b 	bl	8014b74 <iprintf>
			res = f_readdir(&dir, &fno); /* Read a directory item */
 801175e:	e7c4      	b.n	80116ea <scan_files+0x22>
					break;
 8011760:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8011762:	f107 0308 	add.w	r3, r7, #8
 8011766:	4618      	mov	r0, r3
 8011768:	f7f9 fee0 	bl	800b52c <f_closedir>
	}

	return res;
 801176c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011770:	4618      	mov	r0, r3
 8011772:	3740      	adds	r7, #64	; 0x40
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	20004090 	.word	0x20004090
 801177c:	20004099 	.word	0x20004099
 8011780:	0801703c 	.word	0x0801703c
 8011784:	08017040 	.word	0x08017040

08011788 <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 8011788:	b590      	push	{r4, r7, lr}
 801178a:	b087      	sub	sp, #28
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 8011794:	4814      	ldr	r0, [pc, #80]	; (80117e8 <SamplePoints+0x60>)
 8011796:	f7f0 fabd 	bl	8001d14 <HAL_ADC_Start>

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 801179a:	2300      	movs	r3, #0
 801179c:	617b      	str	r3, [r7, #20]
 801179e:	e00d      	b.n	80117bc <SamplePoints+0x34>
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	18d4      	adds	r4, r2, r3
 80117aa:	480f      	ldr	r0, [pc, #60]	; (80117e8 <SamplePoints+0x60>)
 80117ac:	f7f0 fb56 	bl	8001e5c <HAL_ADC_GetValue>
 80117b0:	4603      	mov	r3, r0
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < NoOfPoints; i++) {
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	3301      	adds	r3, #1
 80117ba:	617b      	str	r3, [r7, #20]
 80117bc:	697a      	ldr	r2, [r7, #20]
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d3ed      	bcc.n	80117a0 <SamplePoints+0x18>
		// Produce Period_us delay
		//DWT_Delay_us(Period_us);
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 80117c4:	f04f 31ff 	mov.w	r1, #4294967295
 80117c8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80117cc:	f7ff ff08 	bl	80115e0 <InitScreen>
	LCDWrite(5, "DONE!");
 80117d0:	4906      	ldr	r1, [pc, #24]	; (80117ec <SamplePoints+0x64>)
 80117d2:	2005      	movs	r0, #5
 80117d4:	f7ff ff1c 	bl	8011610 <LCDWrite>

	printf("Sampling done.\r\n");
 80117d8:	4805      	ldr	r0, [pc, #20]	; (80117f0 <SamplePoints+0x68>)
 80117da:	f003 fa3f 	bl	8014c5c <puts>
}
 80117de:	bf00      	nop
 80117e0:	371c      	adds	r7, #28
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd90      	pop	{r4, r7, pc}
 80117e6:	bf00      	nop
 80117e8:	2000478c 	.word	0x2000478c
 80117ec:	08017050 	.word	0x08017050
 80117f0:	08017058 	.word	0x08017058

080117f4 <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 80117f4:	b5b0      	push	{r4, r5, r7, lr}
 80117f6:	b09a      	sub	sp, #104	; 0x68
 80117f8:	af02      	add	r7, sp, #8
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start averaging... \r\n");
 8011800:	4842      	ldr	r0, [pc, #264]	; (801190c <AvgAndPlotPoints+0x118>)
 8011802:	f003 fa2b 	bl	8014c5c <puts>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 8011806:	4942      	ldr	r1, [pc, #264]	; (8011910 <AvgAndPlotPoints+0x11c>)
 8011808:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801180c:	f7ff fee8 	bl	80115e0 <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 8011810:	2300      	movs	r3, #0
 8011812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011814:	e059      	b.n	80118ca <AvgAndPlotPoints+0xd6>
		BufferSum = 0;
 8011816:	2300      	movs	r3, #0
 8011818:	657b      	str	r3, [r7, #84]	; 0x54

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 801181a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801181c:	65bb      	str	r3, [r7, #88]	; 0x58
 801181e:	e00c      	b.n	801183a <AvgAndPlotPoints+0x46>
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011826:	005b      	lsls	r3, r3, #1
 8011828:	4413      	add	r3, r2
 801182a:	881b      	ldrh	r3, [r3, #0]
 801182c:	461a      	mov	r2, r3
 801182e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011830:	4413      	add	r3, r2
 8011832:	657b      	str	r3, [r7, #84]	; 0x54
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 8011834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011836:	3301      	adds	r3, #1
 8011838:	65bb      	str	r3, [r7, #88]	; 0x58
 801183a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	441a      	add	r2, r3
 8011840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011842:	429a      	cmp	r2, r3
 8011844:	d8ec      	bhi.n	8011820 <AvgAndPlotPoints+0x2c>
		}

		BufferAvg = BufferSum / AvgSize;
 8011846:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	fbb2 f3f3 	udiv	r3, r2, r3
 801184e:	653b      	str	r3, [r7, #80]	; 0x50

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 8011850:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011852:	f7ee fe87 	bl	8000564 <__aeabi_ui2d>
 8011856:	f04f 0200 	mov.w	r2, #0
 801185a:	4b2e      	ldr	r3, [pc, #184]	; (8011914 <AvgAndPlotPoints+0x120>)
 801185c:	f7ee fef8 	bl	8000650 <__aeabi_dmul>
 8011860:	4603      	mov	r3, r0
 8011862:	460c      	mov	r4, r1
 8011864:	4625      	mov	r5, r4
 8011866:	461c      	mov	r4, r3
 8011868:	68b8      	ldr	r0, [r7, #8]
 801186a:	f7ee fe7b 	bl	8000564 <__aeabi_ui2d>
 801186e:	4602      	mov	r2, r0
 8011870:	460b      	mov	r3, r1
 8011872:	4620      	mov	r0, r4
 8011874:	4629      	mov	r1, r5
 8011876:	f7ef f815 	bl	80008a4 <__aeabi_ddiv>
 801187a:	4603      	mov	r3, r0
 801187c:	460c      	mov	r4, r1
 801187e:	4618      	mov	r0, r3
 8011880:	4621      	mov	r1, r4
 8011882:	f7ef f9bd 	bl	8000c00 <__aeabi_d2uiz>
 8011886:	4603      	mov	r3, r0
 8011888:	64fb      	str	r3, [r7, #76]	; 0x4c
		YCoord = (272.0 * (BufferAvg / 65536.0));
 801188a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801188c:	f7ee fe6a 	bl	8000564 <__aeabi_ui2d>
 8011890:	f04f 0200 	mov.w	r2, #0
 8011894:	4b20      	ldr	r3, [pc, #128]	; (8011918 <AvgAndPlotPoints+0x124>)
 8011896:	f7ef f805 	bl	80008a4 <__aeabi_ddiv>
 801189a:	4603      	mov	r3, r0
 801189c:	460c      	mov	r4, r1
 801189e:	4618      	mov	r0, r3
 80118a0:	4621      	mov	r1, r4
 80118a2:	f04f 0200 	mov.w	r2, #0
 80118a6:	4b1d      	ldr	r3, [pc, #116]	; (801191c <AvgAndPlotPoints+0x128>)
 80118a8:	f7ee fed2 	bl	8000650 <__aeabi_dmul>
 80118ac:	4603      	mov	r3, r0
 80118ae:	460c      	mov	r4, r1
 80118b0:	4618      	mov	r0, r3
 80118b2:	4621      	mov	r1, r4
 80118b4:	f7ef f9a4 	bl	8000c00 <__aeabi_d2uiz>
 80118b8:	4603      	mov	r3, r0
 80118ba:	64bb      	str	r3, [r7, #72]	; 0x48

		PlotData(XCoord, YCoord);
 80118bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80118be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80118c0:	f7ff fe7d 	bl	80115be <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 80118c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118c6:	3301      	adds	r3, #1
 80118c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d3a1      	bcc.n	8011816 <AvgAndPlotPoints+0x22>
	}

	printf("Averaging done, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80118d6:	4812      	ldr	r0, [pc, #72]	; (8011920 <AvgAndPlotPoints+0x12c>)
 80118d8:	f003 f94c 	bl	8014b74 <iprintf>

	LCDWrite(0, "");
 80118dc:	4911      	ldr	r1, [pc, #68]	; (8011924 <AvgAndPlotPoints+0x130>)
 80118de:	2000      	movs	r0, #0
 80118e0:	f7ff fe96 	bl	8011610 <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 80118e4:	f107 0014 	add.w	r0, r7, #20
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	9300      	str	r3, [sp, #0]
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	4a0e      	ldr	r2, [pc, #56]	; (8011928 <AvgAndPlotPoints+0x134>)
 80118f0:	2132      	movs	r1, #50	; 0x32
 80118f2:	f003 f9c3 	bl	8014c7c <sniprintf>
	LCDWrite(0, MyStr);
 80118f6:	f107 0314 	add.w	r3, r7, #20
 80118fa:	4619      	mov	r1, r3
 80118fc:	2000      	movs	r0, #0
 80118fe:	f7ff fe87 	bl	8011610 <LCDWrite>
}
 8011902:	bf00      	nop
 8011904:	3760      	adds	r7, #96	; 0x60
 8011906:	46bd      	mov	sp, r7
 8011908:	bdb0      	pop	{r4, r5, r7, pc}
 801190a:	bf00      	nop
 801190c:	08017068 	.word	0x08017068
 8011910:	ffff0000 	.word	0xffff0000
 8011914:	407e0000 	.word	0x407e0000
 8011918:	40f00000 	.word	0x40f00000
 801191c:	40710000 	.word	0x40710000
 8011920:	08017080 	.word	0x08017080
 8011924:	080170ac 	.word	0x080170ac
 8011928:	080170b0 	.word	0x080170b0

0801192c <WriteData2FS>:

void WriteData2FS(Array *Data, uint32_t NoOfPoints, uint32_t MeasNo) {
 801192c:	b580      	push	{r7, lr}
 801192e:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
 8011932:	af00      	add	r7, sp, #0
 8011934:	f107 030c 	add.w	r3, r7, #12
 8011938:	6018      	str	r0, [r3, #0]
 801193a:	f107 0308 	add.w	r3, r7, #8
 801193e:	6019      	str	r1, [r3, #0]
 8011940:	1d3b      	adds	r3, r7, #4
 8011942:	601a      	str	r2, [r3, #0]

	// Create file for data, as meas#.txt

	FRESULT res; // FatFs function common result code
	uint32_t byteswritten, totalbytes; //File write counts
	char buffer[1000] = " ";
 8011944:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8011948:	2220      	movs	r2, #32
 801194a:	601a      	str	r2, [r3, #0]
 801194c:	3304      	adds	r3, #4
 801194e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011952:	2100      	movs	r1, #0
 8011954:	4618      	mov	r0, r3
 8011956:	f002 fc98 	bl	801428a <memset>

	char* fname = (char *) (sprintf("meas_%lu.txt", (char *) MeasNo));
 801195a:	1d3b      	adds	r3, r7, #4
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	4619      	mov	r1, r3
 8011960:	483b      	ldr	r0, [pc, #236]	; (8011a50 <WriteData2FS+0x124>)
 8011962:	f003 f9bf 	bl	8014ce4 <siprintf>
 8011966:	4603      	mov	r3, r0
 8011968:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
	FIL MyFile;
	uint32_t idx;

	totalbytes = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c

	if (f_open(&MyFile, fname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8011972:	f107 0314 	add.w	r3, r7, #20
 8011976:	220a      	movs	r2, #10
 8011978:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 801197c:	4618      	mov	r0, r3
 801197e:	f7f8 ffcd 	bl	800a91c <f_open>
 8011982:	4603      	mov	r3, r0
 8011984:	2b00      	cmp	r3, #0
 8011986:	d004      	beq.n	8011992 <WriteData2FS+0x66>

		// File Open for write Error
		_Error_Handler(__FILE__, __LINE__);
 8011988:	21f2      	movs	r1, #242	; 0xf2
 801198a:	4832      	ldr	r0, [pc, #200]	; (8011a54 <WriteData2FS+0x128>)
 801198c:	f000 fd52 	bl	8012434 <_Error_Handler>
		/*##-6- Close the open text file #################################*/
		f_close(&MyFile);

		printf("Closed file %s OK \r\n", fname);
	}
}
 8011990:	e059      	b.n	8011a46 <WriteData2FS+0x11a>
		printf("Opened file %s OK \r\n", fname);
 8011992:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011996:	4830      	ldr	r0, [pc, #192]	; (8011a58 <WriteData2FS+0x12c>)
 8011998:	f003 f8ec 	bl	8014b74 <iprintf>
		for (idx = 0; idx < NoOfPoints; idx++) {
 801199c:	2300      	movs	r3, #0
 801199e:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 80119a2:	e038      	b.n	8011a16 <WriteData2FS+0xea>
			sprintf(buffer, "%lu \r\n", ((uint32_t) Data->array[idx]));
 80119a4:	f107 030c 	add.w	r3, r7, #12
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 80119b0:	005b      	lsls	r3, r3, #1
 80119b2:	4413      	add	r3, r2
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	461a      	mov	r2, r3
 80119b8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80119bc:	4927      	ldr	r1, [pc, #156]	; (8011a5c <WriteData2FS+0x130>)
 80119be:	4618      	mov	r0, r3
 80119c0:	f003 f990 	bl	8014ce4 <siprintf>
			res = f_write(&MyFile, buffer, strlen(buffer),
 80119c4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7ee fc2b 	bl	8000224 <strlen>
 80119ce:	4602      	mov	r2, r0
 80119d0:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 80119d4:	f507 7111 	add.w	r1, r7, #580	; 0x244
 80119d8:	f107 0014 	add.w	r0, r7, #20
 80119dc:	f7f9 fad1 	bl	800af82 <f_write>
 80119e0:	4603      	mov	r3, r0
 80119e2:	f887 3633 	strb.w	r3, [r7, #1587]	; 0x633
			totalbytes += byteswritten;
 80119e6:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80119ea:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 80119ee:	4413      	add	r3, r2
 80119f0:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
			if ((byteswritten == 0) || (res != FR_OK)) {
 80119f4:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d003      	beq.n	8011a04 <WriteData2FS+0xd8>
 80119fc:	f897 3633 	ldrb.w	r3, [r7, #1587]	; 0x633
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d003      	beq.n	8011a0c <WriteData2FS+0xe0>
				_Error_Handler(__FILE__, __LINE__);
 8011a04:	21fe      	movs	r1, #254	; 0xfe
 8011a06:	4813      	ldr	r0, [pc, #76]	; (8011a54 <WriteData2FS+0x128>)
 8011a08:	f000 fd14 	bl	8012434 <_Error_Handler>
		for (idx = 0; idx < NoOfPoints; idx++) {
 8011a0c:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 8011a10:	3301      	adds	r3, #1
 8011a12:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 8011a16:	f107 0308 	add.w	r3, r7, #8
 8011a1a:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d3bf      	bcc.n	80119a4 <WriteData2FS+0x78>
		printf("File %s, %lu bytes written \r\n", fname, totalbytes);
 8011a24:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 8011a28:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011a2c:	480c      	ldr	r0, [pc, #48]	; (8011a60 <WriteData2FS+0x134>)
 8011a2e:	f003 f8a1 	bl	8014b74 <iprintf>
		f_close(&MyFile);
 8011a32:	f107 0314 	add.w	r3, r7, #20
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7f9 fcd0 	bl	800b3dc <f_close>
		printf("Closed file %s OK \r\n", fname);
 8011a3c:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8011a40:	4808      	ldr	r0, [pc, #32]	; (8011a64 <WriteData2FS+0x138>)
 8011a42:	f003 f897 	bl	8014b74 <iprintf>
}
 8011a46:	bf00      	nop
 8011a48:	f507 67c8 	add.w	r7, r7, #1600	; 0x640
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	080170c8 	.word	0x080170c8
 8011a54:	080170d8 	.word	0x080170d8
 8011a58:	080170ec 	.word	0x080170ec
 8011a5c:	08017104 	.word	0x08017104
 8011a60:	0801710c 	.word	0x0801710c
 8011a64:	0801712c 	.word	0x0801712c

08011a68 <DirList>:

void DirList(void) {
 8011a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6a:	f5ad 7d55 	sub.w	sp, sp, #852	; 0x354
 8011a6e:	af02      	add	r7, sp, #8
	FATFS fs;
	FRESULT res;
	char buff[256];

	// Should be mounted already
	res = f_mount(&fs, "", 1);
 8011a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a74:	2201      	movs	r2, #1
 8011a76:	493b      	ldr	r1, [pc, #236]	; (8011b64 <DirList+0xfc>)
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7f8 feeb 	bl	800a854 <f_mount>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	if (res == FR_OK) {
 8011a84:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d15e      	bne.n	8011b4a <DirList+0xe2>
		strcpy(buff, "");
 8011a8c:	4b35      	ldr	r3, [pc, #212]	; (8011b64 <DirList+0xfc>)
 8011a8e:	781a      	ldrb	r2, [r3, #0]
 8011a90:	f107 0308 	add.w	r3, r7, #8
 8011a94:	701a      	strb	r2, [r3, #0]

		// File list
		res = scan_files(buff);
 8011a96:	f107 0308 	add.w	r3, r7, #8
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7ff fe14 	bl	80116c8 <scan_files>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		// Disk free space
		DWORD fre_clust, fre_sect, tot_sect;
		FATFS *fsp;

		// Get volume information and free clusters of drive 1
		res = f_getfree(buff, &fre_clust, &fsp);
 8011aa6:	463a      	mov	r2, r7
 8011aa8:	1d39      	adds	r1, r7, #4
 8011aaa:	f107 0308 	add.w	r3, r7, #8
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7f9 fdaa 	bl	800b608 <f_getfree>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		if (res) {
 8011aba:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d007      	beq.n	8011ad2 <DirList+0x6a>
			printf("Error: Filesystem free space check failed \r\n");
 8011ac2:	4829      	ldr	r0, [pc, #164]	; (8011b68 <DirList+0x100>)
 8011ac4:	f003 f8ca 	bl	8014c5c <puts>
			_Error_Handler(__FILE__, __LINE__);
 8011ac8:	f240 1121 	movw	r1, #289	; 0x121
 8011acc:	4827      	ldr	r0, [pc, #156]	; (8011b6c <DirList+0x104>)
 8011ace:	f000 fcb1 	bl	8012434 <_Error_Handler>
		}

		// Get total sectors and free sectors
		tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 8011ad2:	463b      	mov	r3, r7
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	699b      	ldr	r3, [r3, #24]
 8011ad8:	3b02      	subs	r3, #2
 8011ada:	463a      	mov	r2, r7
 8011adc:	6812      	ldr	r2, [r2, #0]
 8011ade:	8952      	ldrh	r2, [r2, #10]
 8011ae0:	fb02 f303 	mul.w	r3, r2, r3
 8011ae4:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
		fre_sect = fre_clust * fsp->csize;
 8011ae8:	463b      	mov	r3, r7
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	895b      	ldrh	r3, [r3, #10]
 8011aee:	461a      	mov	r2, r3
 8011af0:	1d3b      	adds	r3, r7, #4
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	fb03 f302 	mul.w	r3, r3, r2
 8011af8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c

		// Print the free space (assuming 512 bytes/sector)
		printf(
 8011afc:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8011b00:	085d      	lsrs	r5, r3, #1
 8011b02:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011b06:	085e      	lsrs	r6, r3, #1
				"%10lu KiB total drive space.\n%10lu KiB available (%.2f\%%). \n",
				tot_sect / 2, fre_sect / 2,
				(((float) (fre_sect)) / ((float) (tot_sect)) * 100.0));
 8011b08:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8011b0c:	ee07 3a90 	vmov	s15, r3
 8011b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b14:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8011b18:	ee07 3a90 	vmov	s15, r3
 8011b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011b24:	ee16 0a90 	vmov	r0, s13
 8011b28:	f7ee fd3e 	bl	80005a8 <__aeabi_f2d>
		printf(
 8011b2c:	f04f 0200 	mov.w	r2, #0
 8011b30:	4b0f      	ldr	r3, [pc, #60]	; (8011b70 <DirList+0x108>)
 8011b32:	f7ee fd8d 	bl	8000650 <__aeabi_dmul>
 8011b36:	4603      	mov	r3, r0
 8011b38:	460c      	mov	r4, r1
 8011b3a:	e88d 0018 	stmia.w	sp, {r3, r4}
 8011b3e:	4632      	mov	r2, r6
 8011b40:	4629      	mov	r1, r5
 8011b42:	480c      	ldr	r0, [pc, #48]	; (8011b74 <DirList+0x10c>)
 8011b44:	f003 f816 	bl	8014b74 <iprintf>

	} else {
		printf("Error: Filesystem mount failed \r\n");
		_Error_Handler(__FILE__, __LINE__);
	}
}
 8011b48:	e007      	b.n	8011b5a <DirList+0xf2>
		printf("Error: Filesystem mount failed \r\n");
 8011b4a:	480b      	ldr	r0, [pc, #44]	; (8011b78 <DirList+0x110>)
 8011b4c:	f003 f886 	bl	8014c5c <puts>
		_Error_Handler(__FILE__, __LINE__);
 8011b50:	f44f 7198 	mov.w	r1, #304	; 0x130
 8011b54:	4805      	ldr	r0, [pc, #20]	; (8011b6c <DirList+0x104>)
 8011b56:	f000 fc6d 	bl	8012434 <_Error_Handler>
}
 8011b5a:	bf00      	nop
 8011b5c:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b64:	080170ac 	.word	0x080170ac
 8011b68:	08017144 	.word	0x08017144
 8011b6c:	080170d8 	.word	0x080170d8
 8011b70:	40590000 	.word	0x40590000
 8011b74:	08017170 	.word	0x08017170
 8011b78:	080171b0 	.word	0x080171b0

08011b7c <SCB_EnableICache>:
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011b84:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011b88:	4b09      	ldr	r3, [pc, #36]	; (8011bb0 <SCB_EnableICache+0x34>)
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011b90:	4a07      	ldr	r2, [pc, #28]	; (8011bb0 <SCB_EnableICache+0x34>)
 8011b92:	4b07      	ldr	r3, [pc, #28]	; (8011bb0 <SCB_EnableICache+0x34>)
 8011b94:	695b      	ldr	r3, [r3, #20]
 8011b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b9a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011b9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011ba0:	f3bf 8f6f 	isb	sy
}
 8011ba4:	bf00      	nop
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr
 8011bae:	bf00      	nop
 8011bb0:	e000ed00 	.word	0xe000ed00

08011bb4 <SCB_EnableDCache>:
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b085      	sub	sp, #20
 8011bb8:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8011bba:	4b1d      	ldr	r3, [pc, #116]	; (8011c30 <SCB_EnableDCache+0x7c>)
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011bc2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8011bc6:	4b1a      	ldr	r3, [pc, #104]	; (8011c30 <SCB_EnableDCache+0x7c>)
 8011bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bcc:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	0b5b      	lsrs	r3, r3, #13
 8011bd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011bd6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	08db      	lsrs	r3, r3, #3
 8011bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011be0:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011be2:	4913      	ldr	r1, [pc, #76]	; (8011c30 <SCB_EnableDCache+0x7c>)
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	015a      	lsls	r2, r3, #5
 8011be8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011bec:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	1e5a      	subs	r2, r3, #1
 8011bfc:	60ba      	str	r2, [r7, #8]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d1ef      	bne.n	8011be2 <SCB_EnableDCache+0x2e>
    } while(sets--);
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	1e5a      	subs	r2, r3, #1
 8011c06:	60fa      	str	r2, [r7, #12]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1e5      	bne.n	8011bd8 <SCB_EnableDCache+0x24>
 8011c0c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8011c10:	4a07      	ldr	r2, [pc, #28]	; (8011c30 <SCB_EnableDCache+0x7c>)
 8011c12:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <SCB_EnableDCache+0x7c>)
 8011c14:	695b      	ldr	r3, [r3, #20]
 8011c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c1a:	6153      	str	r3, [r2, #20]
 8011c1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011c20:	f3bf 8f6f 	isb	sy
}
 8011c24:	bf00      	nop
 8011c26:	3714      	adds	r7, #20
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	e000ed00 	.word	0xe000ed00
 8011c34:	00000000 	.word	0x00000000

08011c38 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8011c38:	b5b0      	push	{r4, r5, r7, lr}
 8011c3a:	b0da      	sub	sp, #360	; 0x168
 8011c3c:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 8011c3e:	4bba      	ldr	r3, [pc, #744]	; (8011f28 <main+0x2f0>)
 8011c40:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8011c44:	461d      	mov	r5, r3
 8011c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100]; /* File read buffer */

	/* USER CODE END 1 */

	/* Enable I-Cache-------------------------------------------------------------*/
	SCB_EnableICache();
 8011c52:	f7ff ff93 	bl	8011b7c <SCB_EnableICache>

	/* Enable D-Cache-------------------------------------------------------------*/
	SCB_EnableDCache();
 8011c56:	f7ff ffad 	bl	8011bb4 <SCB_EnableDCache>

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8011c5a:	f7ef ffb9 	bl	8001bd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8011c5e:	f000 fbf9 	bl	8012454 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8011c62:	f000 ffe9 	bl	8012c38 <MX_GPIO_Init>
	MX_DMA_Init();
 8011c66:	f000 ff0b 	bl	8012a80 <MX_DMA_Init>
	MX_FMC_Init();
 8011c6a:	f000 ff99 	bl	8012ba0 <MX_FMC_Init>
	MX_ADC3_Init();
 8011c6e:	f000 fc9f 	bl	80125b0 <MX_ADC3_Init>
	MX_USART1_UART_Init();
 8011c72:	f000 feb5 	bl	80129e0 <MX_USART1_UART_Init>
	MX_LTDC_Init();
 8011c76:	f000 fd99 	bl	80127ac <MX_LTDC_Init>
	MX_I2C3_Init();
 8011c7a:	f000 fd4d 	bl	8012718 <MX_I2C3_Init>
	MX_DMA2D_Init();
 8011c7e:	f000 fd11 	bl	80126a4 <MX_DMA2D_Init>
	MX_CRC_Init();
 8011c82:	f000 fce7 	bl	8012654 <MX_CRC_Init>
	MX_WWDG_Init();
 8011c86:	f000 fedf 	bl	8012a48 <MX_WWDG_Init>
	MX_TIM2_Init();
 8011c8a:	f000 fe11 	bl	80128b0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8011c8e:	f000 fe5b 	bl	8012948 <MX_TIM3_Init>

	/* USER CODE BEGIN 2 */

	// Start SDRAM
	FMC_SDRAM_CommandTypeDef hsdram1Command;
	BSP_SDRAM_Initialization_Sequence(&hsdram1, &hsdram1Command);
 8011c92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011c96:	4619      	mov	r1, r3
 8011c98:	48a4      	ldr	r0, [pc, #656]	; (8011f2c <main+0x2f4>)
 8011c9a:	f7ff fb27 	bl	80112ec <BSP_SDRAM_Initialization_Sequence>

	// Start LCD
	BSP_LCD_Init();
 8011c9e:	f7ef f9a7 	bl	8000ff0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8011ca2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	f7ef fa3a 	bl	8001120 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 8011cac:	2000      	movs	r0, #0
 8011cae:	f7ef fa97 	bl	80011e0 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8011cb2:	f7ef fd75 	bl	80017a0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8011cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011cba:	f7ef fb03 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8011cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc2:	f7ef fab5 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8011cc6:	489a      	ldr	r0, [pc, #616]	; (8011f30 <main+0x2f8>)
 8011cc8:	f7ef fa9a 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 1!");
 8011ccc:	4999      	ldr	r1, [pc, #612]	; (8011f34 <main+0x2fc>)
 8011cce:	2005      	movs	r0, #5
 8011cd0:	f7ef fc8c 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 8011cd4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011cd8:	f7ef ffb6 	bl	8001c48 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8011cdc:	4894      	ldr	r0, [pc, #592]	; (8011f30 <main+0x2f8>)
 8011cde:	f7ef faf1 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8011ce2:	4893      	ldr	r0, [pc, #588]	; (8011f30 <main+0x2f8>)
 8011ce4:	f7ef faa4 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8011ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cec:	f7ef fa88 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 2!");
 8011cf0:	4991      	ldr	r1, [pc, #580]	; (8011f38 <main+0x300>)
 8011cf2:	2005      	movs	r0, #5
 8011cf4:	f7ef fc7a 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 8011cf8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011cfc:	f7ef ffa4 	bl	8001c48 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8011d00:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011d04:	f7ef fade 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8011d08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011d0c:	f7ef fa90 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8011d10:	f04f 30ff 	mov.w	r0, #4294967295
 8011d14:	f7ef fa74 	bl	8001200 <BSP_LCD_SetTextColor>

	/*##-1- Link the SDRAM disk I/O driver ##################################*/
	if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
 8011d18:	4988      	ldr	r1, [pc, #544]	; (8011f3c <main+0x304>)
 8011d1a:	4889      	ldr	r0, [pc, #548]	; (8011f40 <main+0x308>)
 8011d1c:	f7fa f9a8 	bl	800c070 <FATFS_LinkDriver>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	f040 809c 	bne.w	8011e60 <main+0x228>
		printf("SDRAM FATFS link Success 1. \r\n");
 8011d28:	4886      	ldr	r0, [pc, #536]	; (8011f44 <main+0x30c>)
 8011d2a:	f002 ff97 	bl	8014c5c <puts>
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 8011d2e:	2200      	movs	r2, #0
 8011d30:	4982      	ldr	r1, [pc, #520]	; (8011f3c <main+0x304>)
 8011d32:	4885      	ldr	r0, [pc, #532]	; (8011f48 <main+0x310>)
 8011d34:	f7f8 fd8e 	bl	800a854 <f_mount>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d004      	beq.n	8011d48 <main+0x110>
			/* FatFs Initialization Error */
			_Error_Handler(__FILE__, __LINE__);
 8011d3e:	21f1      	movs	r1, #241	; 0xf1
 8011d40:	4882      	ldr	r0, [pc, #520]	; (8011f4c <main+0x314>)
 8011d42:	f000 fb77 	bl	8012434 <_Error_Handler>
 8011d46:	e08b      	b.n	8011e60 <main+0x228>
		} else {
			printf("SDRAM FATFS mount Success 2. \r\n");
 8011d48:	4881      	ldr	r0, [pc, #516]	; (8011f50 <main+0x318>)
 8011d4a:	f002 ff87 	bl	8014c5c <puts>
			/*##-3- Create a FAT file system (format) on the logical drive #########*/
			/* WARNING: Formatting the uSD card will delete all content on the device */
			if (f_mkfs((TCHAR const*) SDRAMPath, FM_FAT32, 0, workBuffer,
 8011d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d52:	9300      	str	r3, [sp, #0]
 8011d54:	4b7f      	ldr	r3, [pc, #508]	; (8011f54 <main+0x31c>)
 8011d56:	2200      	movs	r2, #0
 8011d58:	2102      	movs	r1, #2
 8011d5a:	4878      	ldr	r0, [pc, #480]	; (8011f3c <main+0x304>)
 8011d5c:	f7f9 fd10 	bl	800b780 <f_mkfs>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d004      	beq.n	8011d70 <main+0x138>
					sizeof(workBuffer)) != FR_OK) {
				/* FatFs Format Error */
				_Error_Handler(__FILE__, __LINE__);
 8011d66:	21f9      	movs	r1, #249	; 0xf9
 8011d68:	4878      	ldr	r0, [pc, #480]	; (8011f4c <main+0x314>)
 8011d6a:	f000 fb63 	bl	8012434 <_Error_Handler>
 8011d6e:	e077      	b.n	8011e60 <main+0x228>
			} else {
				printf("SDRAM FATFS format Success 3. \r\n");
 8011d70:	4879      	ldr	r0, [pc, #484]	; (8011f58 <main+0x320>)
 8011d72:	f002 ff73 	bl	8014c5c <puts>
				/*##-4- Create and Open a new text file object with write access #####*/
				if (f_open(&MyFile, "STM32.TXT",
 8011d76:	220a      	movs	r2, #10
 8011d78:	4978      	ldr	r1, [pc, #480]	; (8011f5c <main+0x324>)
 8011d7a:	4879      	ldr	r0, [pc, #484]	; (8011f60 <main+0x328>)
 8011d7c:	f7f8 fdce 	bl	800a91c <f_open>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d005      	beq.n	8011d92 <main+0x15a>
						FA_CREATE_ALWAYS | FA_WRITE)
						!= FR_OK) {
					/* 'STM32.TXT' file Open for write Error */
					_Error_Handler(__FILE__, __LINE__);
 8011d86:	f240 1101 	movw	r1, #257	; 0x101
 8011d8a:	4870      	ldr	r0, [pc, #448]	; (8011f4c <main+0x314>)
 8011d8c:	f000 fb52 	bl	8012434 <_Error_Handler>
 8011d90:	e066      	b.n	8011e60 <main+0x228>
				} else {
					printf("SDRAM FATFS fopen Success 4. \r\n");
 8011d92:	4874      	ldr	r0, [pc, #464]	; (8011f64 <main+0x32c>)
 8011d94:	f002 ff62 	bl	8014c5c <puts>
					/*##-5- Write data to the text file ################################*/
					res = f_write(&MyFile, wtext, sizeof(wtext),
 8011d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d9c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8011da0:	2221      	movs	r2, #33	; 0x21
 8011da2:	486f      	ldr	r0, [pc, #444]	; (8011f60 <main+0x328>)
 8011da4:	f7f9 f8ed 	bl	800af82 <f_write>
 8011da8:	4603      	mov	r3, r0
 8011daa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
							(void *) &byteswritten);

					if ((byteswritten == 0) || (res != FR_OK)) {
 8011dae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d003      	beq.n	8011dbe <main+0x186>
 8011db6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d005      	beq.n	8011dca <main+0x192>
						/* 'STM32.TXT' file Write or EOF Error */
						_Error_Handler(__FILE__, __LINE__);
 8011dbe:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8011dc2:	4862      	ldr	r0, [pc, #392]	; (8011f4c <main+0x314>)
 8011dc4:	f000 fb36 	bl	8012434 <_Error_Handler>
 8011dc8:	e04a      	b.n	8011e60 <main+0x228>
					} else {
						printf("SDRAM FATFS write Success 5. \r\n");
 8011dca:	4867      	ldr	r0, [pc, #412]	; (8011f68 <main+0x330>)
 8011dcc:	f002 ff46 	bl	8014c5c <puts>
						/*##-6- Close the open text file #################################*/
						f_close(&MyFile);
 8011dd0:	4863      	ldr	r0, [pc, #396]	; (8011f60 <main+0x328>)
 8011dd2:	f7f9 fb03 	bl	800b3dc <f_close>
						printf("SDRAM FATFS fclose Success 6. \r\n");
 8011dd6:	4865      	ldr	r0, [pc, #404]	; (8011f6c <main+0x334>)
 8011dd8:	f002 ff40 	bl	8014c5c <puts>

						/*##-7- Open the text file object with read access ###############*/
						if (f_open(&MyFile, "STM32.TXT", FA_READ)
 8011ddc:	2201      	movs	r2, #1
 8011dde:	495f      	ldr	r1, [pc, #380]	; (8011f5c <main+0x324>)
 8011de0:	485f      	ldr	r0, [pc, #380]	; (8011f60 <main+0x328>)
 8011de2:	f7f8 fd9b 	bl	800a91c <f_open>
 8011de6:	4603      	mov	r3, r0
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d005      	beq.n	8011df8 <main+0x1c0>
								!= FR_OK) {
							/* 'STM32.TXT' file Open for read Error */
							_Error_Handler(__FILE__, __LINE__);
 8011dec:	f240 1115 	movw	r1, #277	; 0x115
 8011df0:	4856      	ldr	r0, [pc, #344]	; (8011f4c <main+0x314>)
 8011df2:	f000 fb1f 	bl	8012434 <_Error_Handler>
 8011df6:	e033      	b.n	8011e60 <main+0x228>
						} else {
							printf("SDRAM FATFS fopen(read) Success 7. \r\n");
 8011df8:	485d      	ldr	r0, [pc, #372]	; (8011f70 <main+0x338>)
 8011dfa:	f002 ff2f 	bl	8014c5c <puts>
							/*##-8- Read data from the text file ###########################*/
							res = f_read(&MyFile, rtext, sizeof(rtext),
 8011dfe:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8011e02:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8011e06:	2264      	movs	r2, #100	; 0x64
 8011e08:	4855      	ldr	r0, [pc, #340]	; (8011f60 <main+0x328>)
 8011e0a:	f7f8 ff4c 	bl	800aca6 <f_read>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
									(UINT*) &bytesread);

							if ((bytesread == 0) || (res != FR_OK)) {
 8011e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d003      	beq.n	8011e24 <main+0x1ec>
 8011e1c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d005      	beq.n	8011e30 <main+0x1f8>
								/* 'STM32.TXT' file Read or EOF Error */
								_Error_Handler(__FILE__, __LINE__);
 8011e24:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8011e28:	4848      	ldr	r0, [pc, #288]	; (8011f4c <main+0x314>)
 8011e2a:	f000 fb03 	bl	8012434 <_Error_Handler>
 8011e2e:	e017      	b.n	8011e60 <main+0x228>
							} else {
								printf("SDRAM FATFS read Success 8. \r\n");
 8011e30:	4850      	ldr	r0, [pc, #320]	; (8011f74 <main+0x33c>)
 8011e32:	f002 ff13 	bl	8014c5c <puts>
								/*##-9- Close the open text file #############################*/
								f_close(&MyFile);
 8011e36:	484a      	ldr	r0, [pc, #296]	; (8011f60 <main+0x328>)
 8011e38:	f7f9 fad0 	bl	800b3dc <f_close>
								printf("SDRAM FATFS fclose Success 9. \r\n");
 8011e3c:	484e      	ldr	r0, [pc, #312]	; (8011f78 <main+0x340>)
 8011e3e:	f002 ff0d 	bl	8014c5c <puts>
								/*##-10- Compare read data with the expected data ############*/
								if ((bytesread != byteswritten)) {
 8011e42:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8011e46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d005      	beq.n	8011e5a <main+0x222>
									/* Read data is different from the expected data */
									_Error_Handler(__FILE__, __LINE__);
 8011e4e:	f240 1127 	movw	r1, #295	; 0x127
 8011e52:	483e      	ldr	r0, [pc, #248]	; (8011f4c <main+0x314>)
 8011e54:	f000 faee 	bl	8012434 <_Error_Handler>
 8011e58:	e002      	b.n	8011e60 <main+0x228>
								} else {
									/* Success of the demo: no error occurrence */
									printf("SDRAM FATFS Success 10. \r\n");
 8011e5a:	4848      	ldr	r0, [pc, #288]	; (8011f7c <main+0x344>)
 8011e5c:	f002 fefe 	bl	8014c5c <puts>
				}
			}
		}
	}

	DirList();
 8011e60:	f7ff fe02 	bl	8011a68 <DirList>

	char Arg[30];
	char Cmd[30];
	char CmdBuffer[30];

	size_t n = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	uint32_t MeasNo = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	uint32_t NoOfPoints = 19200;
 8011e70:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8011e74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	uint32_t AvgSize = 10;
 8011e78:	230a      	movs	r3, #10
 8011e7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	uint32_t Period_us = 100;
 8011e7e:	2364      	movs	r3, #100	; 0x64
 8011e80:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint32_t Count_ms = 1000;
 8011e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011e88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	// Clear screen, set it up
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 8011e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8011e90:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011e94:	f7ff fba4 	bl	80115e0 <InitScreen>

	// Initialize data storage
	// https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
	Array Data;
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 8011e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e9c:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7ff fa9b 	bl	80113dc <initArray>

	// LCDWrite(5, "Ready.");

	Cmd[0] = '\0';
 8011ea6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011eaa:	2200      	movs	r2, #0
 8011eac:	701a      	strb	r2, [r3, #0]
	Arg[0] = '\0';
 8011eae:	2300      	movs	r3, #0
 8011eb0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 8011eb4:	e1c3      	b.n	801223e <main+0x606>

		printf(
				"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
						"Sampling will take apprx %f secs \r\n", NoOfPoints,
				AvgSize, Period_us, Count_ms,
				((float) (NoOfPoints * Period_us / 1000000.0)));
 8011eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011eba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8011ebe:	fb02 f303 	mul.w	r3, r2, r3
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7ee fb4e 	bl	8000564 <__aeabi_ui2d>
 8011ec8:	a315      	add	r3, pc, #84	; (adr r3, 8011f20 <main+0x2e8>)
 8011eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ece:	f7ee fce9 	bl	80008a4 <__aeabi_ddiv>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	4621      	mov	r1, r4
 8011eda:	f7ee feb1 	bl	8000c40 <__aeabi_d2f>
 8011ede:	4603      	mov	r3, r0
		printf(
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7ee fb61 	bl	80005a8 <__aeabi_f2d>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	460c      	mov	r4, r1
 8011eea:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011eee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011ef8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011efc:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8011f00:	481f      	ldr	r0, [pc, #124]	; (8011f80 <main+0x348>)
 8011f02:	f002 fe37 	bl	8014b74 <iprintf>

		Cmd[0] = '\0';
 8011f06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	701a      	strb	r2, [r3, #0]
		Arg[0] = '\0';
 8011f0e:	2300      	movs	r3, #0
 8011f10:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		strcpy(CmdBuffer, " ");
 8011f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011f18:	2220      	movs	r2, #32
 8011f1a:	801a      	strh	r2, [r3, #0]
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8011f1c:	e037      	b.n	8011f8e <main+0x356>
 8011f1e:	bf00      	nop
 8011f20:	00000000 	.word	0x00000000
 8011f24:	412e8480 	.word	0x412e8480
 8011f28:	080174e0 	.word	0x080174e0
 8011f2c:	20004944 	.word	0x20004944
 8011f30:	ff0000ff 	.word	0xff0000ff
 8011f34:	080171d4 	.word	0x080171d4
 8011f38:	080171ec 	.word	0x080171ec
 8011f3c:	20004bbc 	.word	0x20004bbc
 8011f40:	08019fcc 	.word	0x08019fcc
 8011f44:	08017204 	.word	0x08017204
 8011f48:	20004e44 	.word	0x20004e44
 8011f4c:	08017224 	.word	0x08017224
 8011f50:	08017234 	.word	0x08017234
 8011f54:	200049bc 	.word	0x200049bc
 8011f58:	08017254 	.word	0x08017254
 8011f5c:	08017274 	.word	0x08017274
 8011f60:	20004bd4 	.word	0x20004bd4
 8011f64:	08017280 	.word	0x08017280
 8011f68:	080172a0 	.word	0x080172a0
 8011f6c:	080172c0 	.word	0x080172c0
 8011f70:	080172e0 	.word	0x080172e0
 8011f74:	08017308 	.word	0x08017308
 8011f78:	08017328 	.word	0x08017328
 8011f7c:	08017348 	.word	0x08017348
 8011f80:	08017364 	.word	0x08017364
			String_GetString((uint8_t *) CmdBuffer);
 8011f84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff f88d 	bl	80110a8 <String_GetString>
		while ((strcmp(CmdBuffer, " ") == 0) || (CmdBuffer[0] == '\0')) {
 8011f8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011f92:	49c7      	ldr	r1, [pc, #796]	; (80122b0 <main+0x678>)
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7ee f93b 	bl	8000210 <strcmp>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d0f1      	beq.n	8011f84 <main+0x34c>
 8011fa0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d0ec      	beq.n	8011f84 <main+0x34c>
		}

		printf("\r\n I got %s \r\n", CmdBuffer);
 8011faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011fae:	4619      	mov	r1, r3
 8011fb0:	48c0      	ldr	r0, [pc, #768]	; (80122b4 <main+0x67c>)
 8011fb2:	f002 fddf 	bl	8014b74 <iprintf>

		// Parse command and possible numeric arg
		char s[] = "Initial string";
 8011fb6:	1d3b      	adds	r3, r7, #4
 8011fb8:	4abf      	ldr	r2, [pc, #764]	; (80122b8 <main+0x680>)
 8011fba:	461c      	mov	r4, r3
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fc0:	c407      	stmia	r4!, {r0, r1, r2}
 8011fc2:	8023      	strh	r3, [r4, #0]
 8011fc4:	3402      	adds	r4, #2
 8011fc6:	0c1b      	lsrs	r3, r3, #16
 8011fc8:	7023      	strb	r3, [r4, #0]
		char ** word_array = NULL;
 8011fca:	463b      	mov	r3, r7
 8011fcc:	2200      	movs	r2, #0
 8011fce:	601a      	str	r2, [r3, #0]

		strcpy(s, CmdBuffer);
 8011fd0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011fd4:	1d3b      	adds	r3, r7, #4
 8011fd6:	4611      	mov	r1, r2
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f002 fea7 	bl	8014d2c <strcpy>
		n = string_parser(s, &word_array);
 8011fde:	463a      	mov	r2, r7
 8011fe0:	1d3b      	adds	r3, r7, #4
 8011fe2:	4611      	mov	r1, r2
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7ff fa43 	bl	8011470 <string_parser>
 8011fea:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

		for (size_t i = 0; i < n; i++) {
 8011fee:	2300      	movs	r3, #0
 8011ff0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8011ff4:	e02d      	b.n	8012052 <main+0x41a>
			if (i == 0) {
 8011ff6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d10c      	bne.n	8012018 <main+0x3e0>
				strcpy(Cmd, word_array[i]);
 8011ffe:	463b      	mov	r3, r7
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	4413      	add	r3, r2
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012010:	4611      	mov	r1, r2
 8012012:	4618      	mov	r0, r3
 8012014:	f002 fe8a 	bl	8014d2c <strcpy>
			}
			if (i == 1) {
 8012018:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801201c:	2b01      	cmp	r3, #1
 801201e:	d10c      	bne.n	801203a <main+0x402>
				strcpy(Arg, word_array[i]);
 8012020:	463b      	mov	r3, r7
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	4413      	add	r3, r2
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012032:	4611      	mov	r1, r2
 8012034:	4618      	mov	r0, r3
 8012036:	f002 fe79 	bl	8014d2c <strcpy>
			}
			if (i > 1) {
 801203a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801203e:	2b01      	cmp	r3, #1
 8012040:	d902      	bls.n	8012048 <main+0x410>
				printf("Wrong number of arguments \r\n");
 8012042:	489e      	ldr	r0, [pc, #632]	; (80122bc <main+0x684>)
 8012044:	f002 fe0a 	bl	8014c5c <puts>
		for (size_t i = 0; i < n; i++) {
 8012048:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801204c:	3301      	adds	r3, #1
 801204e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8012052:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012056:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801205a:	429a      	cmp	r2, r3
 801205c:	d3cb      	bcc.n	8011ff6 <main+0x3be>
			}
		}

		printf("Cmd = %s Arg = %s n = %u \r\n", Cmd, Arg, n);
 801205e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8012062:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012066:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801206a:	4895      	ldr	r0, [pc, #596]	; (80122c0 <main+0x688>)
 801206c:	f002 fd82 	bl	8014b74 <iprintf>

		for (size_t i = 0; i < n; i++)
 8012070:	2300      	movs	r3, #0
 8012072:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012076:	e00e      	b.n	8012096 <main+0x45e>
			free(word_array[i]);
 8012078:	463b      	mov	r3, r7
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	4413      	add	r3, r2
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4618      	mov	r0, r3
 8012088:	f000 f9c5 	bl	8012416 <free>
		for (size_t i = 0; i < n; i++)
 801208c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012090:	3301      	adds	r3, #1
 8012092:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012096:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801209a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801209e:	429a      	cmp	r2, r3
 80120a0:	d3ea      	bcc.n	8012078 <main+0x440>
		free(word_array);
 80120a2:	463b      	mov	r3, r7
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 f9b5 	bl	8012416 <free>

		// Branch based on command

		// meas: Sample and plot a data set
		if ((strcmp(Cmd, "meas") == 0) && (n == 1)) {
 80120ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120b0:	4984      	ldr	r1, [pc, #528]	; (80122c4 <main+0x68c>)
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7ee f8ac 	bl	8000210 <strcmp>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d128      	bne.n	8012110 <main+0x4d8>
 80120be:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d124      	bne.n	8012110 <main+0x4d8>

			// Countdown
			CountDown(Count_ms);
 80120c6:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80120ca:	f7ff fabd 	bl	8011648 <CountDown>

			MeasNo++;
 80120ce:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80120d2:	3301      	adds	r3, #1
 80120d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

			// Sample & plot data one time
			SamplePoints(&Data, NoOfPoints, Period_us);
 80120d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80120dc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80120e0:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7ff fb4f 	bl	8011788 <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 80120ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80120ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80120f2:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7ff fb7c 	bl	80117f4 <AvgAndPlotPoints>

			// Write the unaveraged (full) data to file meas#.txt
			WriteData2FS(&Data, NoOfPoints, MeasNo);
 80120fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012100:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8012104:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8012108:	4618      	mov	r0, r3
 801210a:	f7ff fc0f 	bl	801192c <WriteData2FS>
 801210e:	e096      	b.n	801223e <main+0x606>
		}

		// setpoints: Adjust sampled points
		else if ((strcmp(Cmd, "setpoints") == 0) && (n == 2)) {
 8012110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012114:	496c      	ldr	r1, [pc, #432]	; (80122c8 <main+0x690>)
 8012116:	4618      	mov	r0, r3
 8012118:	f7ee f87a 	bl	8000210 <strcmp>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d125      	bne.n	801216e <main+0x536>
 8012122:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012126:	2b02      	cmp	r3, #2
 8012128:	d121      	bne.n	801216e <main+0x536>
			// Allocate more or less data space
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 801212a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801212e:	220a      	movs	r2, #10
 8012130:	2100      	movs	r1, #0
 8012132:	4618      	mov	r0, r3
 8012134:	f002 fe98 	bl	8014e68 <strtol>
 8012138:	4603      	mov	r3, r0
 801213a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			printf("Old Data size is %u New NoOfPOints = %lu \r\n",
 801213e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012148:	4619      	mov	r1, r3
 801214a:	4860      	ldr	r0, [pc, #384]	; (80122cc <main+0x694>)
 801214c:	f002 fd12 	bl	8014b74 <iprintf>
					Data.size, NoOfPoints);

			insertArray(&Data, NoOfPoints);
 8012150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012154:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8012158:	4618      	mov	r0, r3
 801215a:	f7ff f957 	bl	801140c <insertArray>
			printf("New Array size is %u \r\n", Data.size);
 801215e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012162:	689b      	ldr	r3, [r3, #8]
 8012164:	4619      	mov	r1, r3
 8012166:	485a      	ldr	r0, [pc, #360]	; (80122d0 <main+0x698>)
 8012168:	f002 fd04 	bl	8014b74 <iprintf>
 801216c:	e067      	b.n	801223e <main+0x606>
		}

		// setavg: Adjust average amount in samples
		else if ((strcmp(Cmd, "setavg") == 0) && (n == 2)) {
 801216e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012172:	4958      	ldr	r1, [pc, #352]	; (80122d4 <main+0x69c>)
 8012174:	4618      	mov	r0, r3
 8012176:	f7ee f84b 	bl	8000210 <strcmp>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10e      	bne.n	801219e <main+0x566>
 8012180:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012184:	2b02      	cmp	r3, #2
 8012186:	d10a      	bne.n	801219e <main+0x566>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 8012188:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801218c:	220a      	movs	r2, #10
 801218e:	2100      	movs	r1, #0
 8012190:	4618      	mov	r0, r3
 8012192:	f002 fe69 	bl	8014e68 <strtol>
 8012196:	4603      	mov	r3, r0
 8012198:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801219c:	e04f      	b.n	801223e <main+0x606>
		}

		// setperiod: Adjust sample period in us
		else if ((strcmp(Cmd, "setperiod") == 0) && (n == 2)) {
 801219e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80121a2:	494d      	ldr	r1, [pc, #308]	; (80122d8 <main+0x6a0>)
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ee f833 	bl	8000210 <strcmp>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10e      	bne.n	80121ce <main+0x596>
 80121b0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80121b4:	2b02      	cmp	r3, #2
 80121b6:	d10a      	bne.n	80121ce <main+0x596>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 80121b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80121bc:	220a      	movs	r2, #10
 80121be:	2100      	movs	r1, #0
 80121c0:	4618      	mov	r0, r3
 80121c2:	f002 fe51 	bl	8014e68 <strtol>
 80121c6:	4603      	mov	r3, r0
 80121c8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80121cc:	e037      	b.n	801223e <main+0x606>
		}

		// setcount: Adjust countdown period in ms
		else if ((strcmp(Cmd, "setcount") == 0) && (n == 2)) {
 80121ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80121d2:	4942      	ldr	r1, [pc, #264]	; (80122dc <main+0x6a4>)
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7ee f81b 	bl	8000210 <strcmp>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d10e      	bne.n	80121fe <main+0x5c6>
 80121e0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d10a      	bne.n	80121fe <main+0x5c6>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 80121e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80121ec:	220a      	movs	r2, #10
 80121ee:	2100      	movs	r1, #0
 80121f0:	4618      	mov	r0, r3
 80121f2:	f002 fe39 	bl	8014e68 <strtol>
 80121f6:	4603      	mov	r3, r0
 80121f8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80121fc:	e01f      	b.n	801223e <main+0x606>
		}

		// dir: Print file listing
		else if ((strcmp(Cmd, "dir") == 0) && (n == 1)) {
 80121fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012202:	4937      	ldr	r1, [pc, #220]	; (80122e0 <main+0x6a8>)
 8012204:	4618      	mov	r0, r3
 8012206:	f7ee f803 	bl	8000210 <strcmp>
 801220a:	4603      	mov	r3, r0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d106      	bne.n	801221e <main+0x5e6>
 8012210:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012214:	2b01      	cmp	r3, #1
 8012216:	d102      	bne.n	801221e <main+0x5e6>
			DirList();
 8012218:	f7ff fc26 	bl	8011a68 <DirList>
 801221c:	e00f      	b.n	801223e <main+0x606>
		}

		// quit: Exit on next while
		else if ((strcmp(Cmd, "quit") == 0) && (n == 1)) {
 801221e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012222:	4930      	ldr	r1, [pc, #192]	; (80122e4 <main+0x6ac>)
 8012224:	4618      	mov	r0, r3
 8012226:	f7ed fff3 	bl	8000210 <strcmp>
 801222a:	4603      	mov	r3, r0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d103      	bne.n	8012238 <main+0x600>
 8012230:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012234:	2b01      	cmp	r3, #1
 8012236:	d002      	beq.n	801223e <main+0x606>
			// Do nothing yet
		} else {
			printf("Wrong command or argument \r\n");
 8012238:	482b      	ldr	r0, [pc, #172]	; (80122e8 <main+0x6b0>)
 801223a:	f002 fd0f 	bl	8014c5c <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 801223e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012242:	4928      	ldr	r1, [pc, #160]	; (80122e4 <main+0x6ac>)
 8012244:	4618      	mov	r0, r3
 8012246:	f7ed ffe3 	bl	8000210 <strcmp>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	f47f ae32 	bne.w	8011eb6 <main+0x27e>
 8012252:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012256:	2b01      	cmp	r3, #1
 8012258:	f47f ae2d 	bne.w	8011eb6 <main+0x27e>
		}
	}

	// Free memory after quit
	freeArray(&Data);
 801225c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012260:	4618      	mov	r0, r3
 8012262:	f7ff f8ee 	bl	8011442 <freeArray>

	// Unlink the SDRAM disk I/O driver
	FATFS_UnLinkDriver(SDRAMPath);
 8012266:	4821      	ldr	r0, [pc, #132]	; (80122ec <main+0x6b4>)
 8012268:	f7f9 ff4a 	bl	800c100 <FATFS_UnLinkDriver>

	// Print informative messages
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 801226c:	f04f 31ff 	mov.w	r1, #4294967295
 8012270:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8012274:	f7ff f9b4 	bl	80115e0 <InitScreen>
	LCDWrite(5, "Stop.");
 8012278:	491d      	ldr	r1, [pc, #116]	; (80122f0 <main+0x6b8>)
 801227a:	2005      	movs	r0, #5
 801227c:	f7ff f9c8 	bl	8011610 <LCDWrite>

	printf("Exit. Data freed. Stop. \r\n");
 8012280:	481c      	ldr	r0, [pc, #112]	; (80122f4 <main+0x6bc>)
 8012282:	f002 fceb 	bl	8014c5c <puts>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8012286:	f107 0314 	add.w	r3, r7, #20
 801228a:	4a1b      	ldr	r2, [pc, #108]	; (80122f8 <main+0x6c0>)
 801228c:	461c      	mov	r4, r3
 801228e:	4615      	mov	r5, r2
 8012290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012294:	682b      	ldr	r3, [r5, #0]
 8012296:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8012298:	f107 0314 	add.w	r3, r7, #20
 801229c:	2100      	movs	r1, #0
 801229e:	4618      	mov	r0, r3
 80122a0:	f7f9 ffb6 	bl	800c210 <osThreadCreate>
 80122a4:	4602      	mov	r2, r0
 80122a6:	4b15      	ldr	r3, [pc, #84]	; (80122fc <main+0x6c4>)
 80122a8:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */


	/* Start scheduler */
	osKernelStart();
 80122aa:	f7f9 ffaa 	bl	800c202 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80122ae:	e7fe      	b.n	80122ae <main+0x676>
 80122b0:	080173d0 	.word	0x080173d0
 80122b4:	080173d4 	.word	0x080173d4
 80122b8:	08017504 	.word	0x08017504
 80122bc:	080173e4 	.word	0x080173e4
 80122c0:	08017400 	.word	0x08017400
 80122c4:	0801741c 	.word	0x0801741c
 80122c8:	08017424 	.word	0x08017424
 80122cc:	08017430 	.word	0x08017430
 80122d0:	0801745c 	.word	0x0801745c
 80122d4:	08017474 	.word	0x08017474
 80122d8:	0801747c 	.word	0x0801747c
 80122dc:	08017488 	.word	0x08017488
 80122e0:	08017494 	.word	0x08017494
 80122e4:	08017498 	.word	0x08017498
 80122e8:	080174a0 	.word	0x080174a0
 80122ec:	20004bbc 	.word	0x20004bbc
 80122f0:	080174bc 	.word	0x080174bc
 80122f4:	080174c4 	.word	0x080174c4
 80122f8:	08017520 	.word	0x08017520
 80122fc:	20004978 	.word	0x20004978

08012300 <StartDefaultTask>:
	}

}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
	/* init code for FATFS */
	MX_FATFS_Init();
 8012308:	f7ff f84e 	bl	80113a8 <MX_FATFS_Init>

	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 801230c:	f001 fbd8 	bl	8013ac0 <MX_USB_HOST_Init>

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8012310:	2001      	movs	r0, #1
 8012312:	f7f9 ffa4 	bl	800c25e <osDelay>
		printf("Looping OS \r\n");
 8012316:	4802      	ldr	r0, [pc, #8]	; (8012320 <StartDefaultTask+0x20>)
 8012318:	f002 fca0 	bl	8014c5c <puts>
		osDelay(1);
 801231c:	e7f8      	b.n	8012310 <StartDefaultTask+0x10>
 801231e:	bf00      	nop
 8012320:	08017534 	.word	0x08017534

08012324 <__io_putchar>:

/* USER CODE END 2 */

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	b2db      	uxtb	r3, r3
 8012330:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8012332:	f107 010c 	add.w	r1, r7, #12
 8012336:	230a      	movs	r3, #10
 8012338:	2201      	movs	r2, #1
 801233a:	4804      	ldr	r0, [pc, #16]	; (801234c <__io_putchar+0x28>)
 801233c:	f7f4 ff45 	bl	80071ca <HAL_UART_Transmit>
	return ch;
 8012340:	687b      	ldr	r3, [r7, #4]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	20004834 	.word	0x20004834

08012350 <_write>:

int _write(int file, char *ptr, int len) {
 8012350:	b580      	push	{r7, lr}
 8012352:	b086      	sub	sp, #24
 8012354:	af00      	add	r7, sp, #0
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801235c:	2300      	movs	r3, #0
 801235e:	617b      	str	r3, [r7, #20]
 8012360:	e009      	b.n	8012376 <_write+0x26>
		__io_putchar(*ptr++);
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	1c5a      	adds	r2, r3, #1
 8012366:	60ba      	str	r2, [r7, #8]
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	4618      	mov	r0, r3
 801236c:	f7ff ffda 	bl	8012324 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	3301      	adds	r3, #1
 8012374:	617b      	str	r3, [r7, #20]
 8012376:	697a      	ldr	r2, [r7, #20]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	429a      	cmp	r2, r3
 801237c:	dbf1      	blt.n	8012362 <_write+0x12>
	}
	return len;
 801237e:	687b      	ldr	r3, [r7, #4]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3718      	adds	r7, #24
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <__io_getchar>:

int __io_getchar(void) {
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef Status = HAL_BUSY;
 801238e:	2302      	movs	r3, #2
 8012390:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	while (Status != HAL_OK)
 8012392:	e007      	b.n	80123a4 <__io_getchar+0x1c>
		Status = HAL_UART_Receive(&huart1, &Data, 1, 10);
 8012394:	1db9      	adds	r1, r7, #6
 8012396:	230a      	movs	r3, #10
 8012398:	2201      	movs	r2, #1
 801239a:	4806      	ldr	r0, [pc, #24]	; (80123b4 <__io_getchar+0x2c>)
 801239c:	f7f4 ffa0 	bl	80072e0 <HAL_UART_Receive>
 80123a0:	4603      	mov	r3, r0
 80123a2:	71fb      	strb	r3, [r7, #7]
	while (Status != HAL_OK)
 80123a4:	79fb      	ldrb	r3, [r7, #7]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d1f4      	bne.n	8012394 <__io_getchar+0xc>

	return (Data);
 80123aa:	79bb      	ldrb	r3, [r7, #6]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	20004834 	.word	0x20004834

080123b8 <_read>:

int _read(int file, char *ptr, int len) {
 80123b8:	b590      	push	{r4, r7, lr}
 80123ba:	b087      	sub	sp, #28
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80123c4:	2300      	movs	r3, #0
 80123c6:	617b      	str	r3, [r7, #20]
 80123c8:	e00a      	b.n	80123e0 <_read+0x28>
		*ptr++ = __io_getchar();
 80123ca:	68bc      	ldr	r4, [r7, #8]
 80123cc:	1c63      	adds	r3, r4, #1
 80123ce:	60bb      	str	r3, [r7, #8]
 80123d0:	f7ff ffda 	bl	8012388 <__io_getchar>
 80123d4:	4603      	mov	r3, r0
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	3301      	adds	r3, #1
 80123de:	617b      	str	r3, [r7, #20]
 80123e0:	697a      	ldr	r2, [r7, #20]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	dbf0      	blt.n	80123ca <_read+0x12>
	}
	return len;
 80123e8:	687b      	ldr	r3, [r7, #4]
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	371c      	adds	r7, #28
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd90      	pop	{r4, r7, pc}

080123f2 <malloc>:

// Testing FreeRTOS heap4 malloc
// https://embeddedartistry.com/blog/2018/1/15/implementing-malloc-with-freertos

void* malloc(size_t size) {
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b084      	sub	sp, #16
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
	void* ptr = NULL;
 80123fa:	2300      	movs	r3, #0
 80123fc:	60fb      	str	r3, [r7, #12]

	if (size > 0) {
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d003      	beq.n	801240c <malloc+0x1a>
		// We simply wrap the FreeRTOS call into a standard form
		ptr = pvPortMalloc(size);
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f7fa f8c9 	bl	800c59c <pvPortMalloc>
 801240a:	60f8      	str	r0, [r7, #12]
	} // else NULL if there was an error

	return ptr;
 801240c:	68fb      	ldr	r3, [r7, #12]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <free>:

void free(void* ptr) {
 8012416:	b580      	push	{r7, lr}
 8012418:	b082      	sub	sp, #8
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
	if (ptr) {
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d002      	beq.n	801242a <free+0x14>
		// We simply wrap the FreeRTOS call into a standard form
		vPortFree(ptr);
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f7fa f981 	bl	800c72c <vPortFree>
	}
}
 801242a:	bf00      	nop
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
	...

08012434 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	printf("\r\nError file = %s Line = %d \r\n", file, line);
 801243e:	683a      	ldr	r2, [r7, #0]
 8012440:	6879      	ldr	r1, [r7, #4]
 8012442:	4803      	ldr	r0, [pc, #12]	; (8012450 <_Error_Handler+0x1c>)
 8012444:	f002 fb96 	bl	8014b74 <iprintf>

	/* USER CODE END Error_Handler_Debug */
}
 8012448:	bf00      	nop
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	08017544 	.word	0x08017544

08012454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b0b4      	sub	sp, #208	; 0xd0
 8012458:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 801245a:	4a50      	ldr	r2, [pc, #320]	; (801259c <SystemClock_Config+0x148>)
 801245c:	4b4f      	ldr	r3, [pc, #316]	; (801259c <SystemClock_Config+0x148>)
 801245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012464:	6413      	str	r3, [r2, #64]	; 0x40
 8012466:	4b4d      	ldr	r3, [pc, #308]	; (801259c <SystemClock_Config+0x148>)
 8012468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801246e:	607b      	str	r3, [r7, #4]
 8012470:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012472:	4a4b      	ldr	r2, [pc, #300]	; (80125a0 <SystemClock_Config+0x14c>)
 8012474:	4b4a      	ldr	r3, [pc, #296]	; (80125a0 <SystemClock_Config+0x14c>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801247c:	6013      	str	r3, [r2, #0]
 801247e:	4b48      	ldr	r3, [pc, #288]	; (80125a0 <SystemClock_Config+0x14c>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012486:	603b      	str	r3, [r7, #0]
 8012488:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801248a:	2301      	movs	r3, #1
 801248c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012498:	2302      	movs	r3, #2
 801249a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801249e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80124a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80124a6:	2319      	movs	r3, #25
 80124a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80124ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80124b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80124b4:	2302      	movs	r3, #2
 80124b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80124ba:	2309      	movs	r3, #9
 80124bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80124c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f3 f8bd 	bl	8005644 <HAL_RCC_OscConfig>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d004      	beq.n	80124da <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 80124d0:	f240 2162 	movw	r1, #610	; 0x262
 80124d4:	4833      	ldr	r0, [pc, #204]	; (80125a4 <SystemClock_Config+0x150>)
 80124d6:	f7ff ffad 	bl	8012434 <_Error_Handler>
  }

    /**Activate the Over-Drive mode
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80124da:	f7f3 f863 	bl	80055a4 <HAL_PWREx_EnableOverDrive>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d004      	beq.n	80124ee <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80124e4:	f240 2169 	movw	r1, #617	; 0x269
 80124e8:	482e      	ldr	r0, [pc, #184]	; (80125a4 <SystemClock_Config+0x150>)
 80124ea:	f7ff ffa3 	bl	8012434 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80124ee:	230f      	movs	r3, #15
 80124f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80124f4:	2302      	movs	r3, #2
 80124f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80124fa:	2300      	movs	r3, #0
 80124fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012500:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801250c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8012510:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012514:	2106      	movs	r1, #6
 8012516:	4618      	mov	r0, r3
 8012518:	f7f3 fb04 	bl	8005b24 <HAL_RCC_ClockConfig>
 801251c:	4603      	mov	r3, r0
 801251e:	2b00      	cmp	r3, #0
 8012520:	d004      	beq.n	801252c <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012522:	f240 2177 	movw	r1, #631	; 0x277
 8012526:	481f      	ldr	r0, [pc, #124]	; (80125a4 <SystemClock_Config+0x150>)
 8012528:	f7ff ff84 	bl	8012434 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 801252c:	4b1e      	ldr	r3, [pc, #120]	; (80125a8 <SystemClock_Config+0x154>)
 801252e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 190;
 8012530:	23be      	movs	r3, #190	; 0xbe
 8012532:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8012534:	2305      	movs	r3, #5
 8012536:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8012538:	2302      	movs	r3, #2
 801253a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 801253c:	2300      	movs	r3, #0
 801253e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8012540:	2301      	movs	r3, #1
 8012542:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8012544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012548:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801254a:	2300      	movs	r3, #0
 801254c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801254e:	2300      	movs	r3, #0
 8012550:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012552:	f107 0308 	add.w	r3, r7, #8
 8012556:	4618      	mov	r0, r3
 8012558:	f7f3 fce8 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d004      	beq.n	801256c <SystemClock_Config+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012562:	f240 2186 	movw	r1, #646	; 0x286
 8012566:	480f      	ldr	r0, [pc, #60]	; (80125a4 <SystemClock_Config+0x150>)
 8012568:	f7ff ff64 	bl	8012434 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801256c:	f7f3 fc78 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8012570:	4602      	mov	r2, r0
 8012572:	4b0e      	ldr	r3, [pc, #56]	; (80125ac <SystemClock_Config+0x158>)
 8012574:	fba3 2302 	umull	r2, r3, r3, r2
 8012578:	099b      	lsrs	r3, r3, #6
 801257a:	4618      	mov	r0, r3
 801257c:	f7ef ffa9 	bl	80024d2 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8012580:	2004      	movs	r0, #4
 8012582:	f7ef ffb3 	bl	80024ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8012586:	2200      	movs	r2, #0
 8012588:	210f      	movs	r1, #15
 801258a:	f04f 30ff 	mov.w	r0, #4294967295
 801258e:	f7ef ff76 	bl	800247e <HAL_NVIC_SetPriority>
}
 8012592:	bf00      	nop
 8012594:	37d0      	adds	r7, #208	; 0xd0
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}
 801259a:	bf00      	nop
 801259c:	40023800 	.word	0x40023800
 80125a0:	40007000 	.word	0x40007000
 80125a4:	08017224 	.word	0x08017224
 80125a8:	00010048 	.word	0x00010048
 80125ac:	10624dd3 	.word	0x10624dd3

080125b0 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc3.Instance = ADC3;
 80125b6:	4b24      	ldr	r3, [pc, #144]	; (8012648 <MX_ADC3_Init+0x98>)
 80125b8:	4a24      	ldr	r2, [pc, #144]	; (801264c <MX_ADC3_Init+0x9c>)
 80125ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80125bc:	4b22      	ldr	r3, [pc, #136]	; (8012648 <MX_ADC3_Init+0x98>)
 80125be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80125c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80125c4:	4b20      	ldr	r3, [pc, #128]	; (8012648 <MX_ADC3_Init+0x98>)
 80125c6:	2200      	movs	r2, #0
 80125c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80125ca:	4b1f      	ldr	r3, [pc, #124]	; (8012648 <MX_ADC3_Init+0x98>)
 80125cc:	2200      	movs	r2, #0
 80125ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80125d0:	4b1d      	ldr	r3, [pc, #116]	; (8012648 <MX_ADC3_Init+0x98>)
 80125d2:	2200      	movs	r2, #0
 80125d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80125d6:	4b1c      	ldr	r3, [pc, #112]	; (8012648 <MX_ADC3_Init+0x98>)
 80125d8:	2200      	movs	r2, #0
 80125da:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80125dc:	4b1a      	ldr	r3, [pc, #104]	; (8012648 <MX_ADC3_Init+0x98>)
 80125de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80125e4:	4b18      	ldr	r3, [pc, #96]	; (8012648 <MX_ADC3_Init+0x98>)
 80125e6:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 80125ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80125ec:	4b16      	ldr	r3, [pc, #88]	; (8012648 <MX_ADC3_Init+0x98>)
 80125ee:	2200      	movs	r2, #0
 80125f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80125f2:	4b15      	ldr	r3, [pc, #84]	; (8012648 <MX_ADC3_Init+0x98>)
 80125f4:	2201      	movs	r2, #1
 80125f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80125f8:	4b13      	ldr	r3, [pc, #76]	; (8012648 <MX_ADC3_Init+0x98>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80125fe:	4b12      	ldr	r3, [pc, #72]	; (8012648 <MX_ADC3_Init+0x98>)
 8012600:	2201      	movs	r2, #1
 8012602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8012604:	4810      	ldr	r0, [pc, #64]	; (8012648 <MX_ADC3_Init+0x98>)
 8012606:	f7ef fb41 	bl	8001c8c <HAL_ADC_Init>
 801260a:	4603      	mov	r3, r0
 801260c:	2b00      	cmp	r3, #0
 801260e:	d004      	beq.n	801261a <MX_ADC3_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012610:	f240 21ab 	movw	r1, #683	; 0x2ab
 8012614:	480e      	ldr	r0, [pc, #56]	; (8012650 <MX_ADC3_Init+0xa0>)
 8012616:	f7ff ff0d 	bl	8012434 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
  sConfig.Channel = ADC_CHANNEL_0;
 801261a:	2300      	movs	r3, #0
 801261c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801261e:	2301      	movs	r3, #1
 8012620:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8012622:	2300      	movs	r3, #0
 8012624:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8012626:	463b      	mov	r3, r7
 8012628:	4619      	mov	r1, r3
 801262a:	4807      	ldr	r0, [pc, #28]	; (8012648 <MX_ADC3_Init+0x98>)
 801262c:	f7ef fc24 	bl	8001e78 <HAL_ADC_ConfigChannel>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d004      	beq.n	8012640 <MX_ADC3_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012636:	f240 21b5 	movw	r1, #693	; 0x2b5
 801263a:	4805      	ldr	r0, [pc, #20]	; (8012650 <MX_ADC3_Init+0xa0>)
 801263c:	f7ff fefa 	bl	8012434 <_Error_Handler>
  }

}
 8012640:	bf00      	nop
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	2000478c 	.word	0x2000478c
 801264c:	40012200 	.word	0x40012200
 8012650:	08017224 	.word	0x08017224

08012654 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8012658:	4b0f      	ldr	r3, [pc, #60]	; (8012698 <MX_CRC_Init+0x44>)
 801265a:	4a10      	ldr	r2, [pc, #64]	; (801269c <MX_CRC_Init+0x48>)
 801265c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 801265e:	4b0e      	ldr	r3, [pc, #56]	; (8012698 <MX_CRC_Init+0x44>)
 8012660:	2200      	movs	r2, #0
 8012662:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8012664:	4b0c      	ldr	r3, [pc, #48]	; (8012698 <MX_CRC_Init+0x44>)
 8012666:	2200      	movs	r2, #0
 8012668:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 801266a:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <MX_CRC_Init+0x44>)
 801266c:	2200      	movs	r2, #0
 801266e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8012670:	4b09      	ldr	r3, [pc, #36]	; (8012698 <MX_CRC_Init+0x44>)
 8012672:	2200      	movs	r2, #0
 8012674:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8012676:	4b08      	ldr	r3, [pc, #32]	; (8012698 <MX_CRC_Init+0x44>)
 8012678:	2201      	movs	r2, #1
 801267a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801267c:	4806      	ldr	r0, [pc, #24]	; (8012698 <MX_CRC_Init+0x44>)
 801267e:	f7ef ff51 	bl	8002524 <HAL_CRC_Init>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d004      	beq.n	8012692 <MX_CRC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012688:	f240 21c6 	movw	r1, #710	; 0x2c6
 801268c:	4804      	ldr	r0, [pc, #16]	; (80126a0 <MX_CRC_Init+0x4c>)
 801268e:	f7ff fed1 	bl	8012434 <_Error_Handler>
  }

}
 8012692:	bf00      	nop
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	20004660 	.word	0x20004660
 801269c:	40023000 	.word	0x40023000
 80126a0:	08017224 	.word	0x08017224

080126a4 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80126a8:	4b18      	ldr	r3, [pc, #96]	; (801270c <MX_DMA2D_Init+0x68>)
 80126aa:	4a19      	ldr	r2, [pc, #100]	; (8012710 <MX_DMA2D_Init+0x6c>)
 80126ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80126ae:	4b17      	ldr	r3, [pc, #92]	; (801270c <MX_DMA2D_Init+0x68>)
 80126b0:	2200      	movs	r2, #0
 80126b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80126b4:	4b15      	ldr	r3, [pc, #84]	; (801270c <MX_DMA2D_Init+0x68>)
 80126b6:	2200      	movs	r2, #0
 80126b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80126ba:	4b14      	ldr	r3, [pc, #80]	; (801270c <MX_DMA2D_Init+0x68>)
 80126bc:	2200      	movs	r2, #0
 80126be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80126c0:	4b12      	ldr	r3, [pc, #72]	; (801270c <MX_DMA2D_Init+0x68>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80126c6:	4b11      	ldr	r3, [pc, #68]	; (801270c <MX_DMA2D_Init+0x68>)
 80126c8:	2200      	movs	r2, #0
 80126ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80126cc:	4b0f      	ldr	r3, [pc, #60]	; (801270c <MX_DMA2D_Init+0x68>)
 80126ce:	2200      	movs	r2, #0
 80126d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80126d2:	4b0e      	ldr	r3, [pc, #56]	; (801270c <MX_DMA2D_Init+0x68>)
 80126d4:	2200      	movs	r2, #0
 80126d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80126d8:	480c      	ldr	r0, [pc, #48]	; (801270c <MX_DMA2D_Init+0x68>)
 80126da:	f7f0 fae9 	bl	8002cb0 <HAL_DMA2D_Init>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d004      	beq.n	80126ee <MX_DMA2D_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80126e4:	f240 21d9 	movw	r1, #729	; 0x2d9
 80126e8:	480a      	ldr	r0, [pc, #40]	; (8012714 <MX_DMA2D_Init+0x70>)
 80126ea:	f7ff fea3 	bl	8012434 <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80126ee:	2101      	movs	r1, #1
 80126f0:	4806      	ldr	r0, [pc, #24]	; (801270c <MX_DMA2D_Init+0x68>)
 80126f2:	f7f0 fc3b 	bl	8002f6c <HAL_DMA2D_ConfigLayer>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d004      	beq.n	8012706 <MX_DMA2D_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80126fc:	f240 21de 	movw	r1, #734	; 0x2de
 8012700:	4804      	ldr	r0, [pc, #16]	; (8012714 <MX_DMA2D_Init+0x70>)
 8012702:	f7ff fe97 	bl	8012434 <_Error_Handler>
  }

}
 8012706:	bf00      	nop
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	200048a4 	.word	0x200048a4
 8012710:	4002b000 	.word	0x4002b000
 8012714:	08017224 	.word	0x08017224

08012718 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 801271c:	4b1f      	ldr	r3, [pc, #124]	; (801279c <MX_I2C3_Init+0x84>)
 801271e:	4a20      	ldr	r2, [pc, #128]	; (80127a0 <MX_I2C3_Init+0x88>)
 8012720:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8012722:	4b1e      	ldr	r3, [pc, #120]	; (801279c <MX_I2C3_Init+0x84>)
 8012724:	4a1f      	ldr	r2, [pc, #124]	; (80127a4 <MX_I2C3_Init+0x8c>)
 8012726:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8012728:	4b1c      	ldr	r3, [pc, #112]	; (801279c <MX_I2C3_Init+0x84>)
 801272a:	22e0      	movs	r2, #224	; 0xe0
 801272c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801272e:	4b1b      	ldr	r3, [pc, #108]	; (801279c <MX_I2C3_Init+0x84>)
 8012730:	2201      	movs	r2, #1
 8012732:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012734:	4b19      	ldr	r3, [pc, #100]	; (801279c <MX_I2C3_Init+0x84>)
 8012736:	2200      	movs	r2, #0
 8012738:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 801273a:	4b18      	ldr	r3, [pc, #96]	; (801279c <MX_I2C3_Init+0x84>)
 801273c:	2200      	movs	r2, #0
 801273e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012740:	4b16      	ldr	r3, [pc, #88]	; (801279c <MX_I2C3_Init+0x84>)
 8012742:	2200      	movs	r2, #0
 8012744:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012746:	4b15      	ldr	r3, [pc, #84]	; (801279c <MX_I2C3_Init+0x84>)
 8012748:	2200      	movs	r2, #0
 801274a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801274c:	4b13      	ldr	r3, [pc, #76]	; (801279c <MX_I2C3_Init+0x84>)
 801274e:	2200      	movs	r2, #0
 8012750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8012752:	4812      	ldr	r0, [pc, #72]	; (801279c <MX_I2C3_Init+0x84>)
 8012754:	f7f2 fb2e 	bl	8004db4 <HAL_I2C_Init>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d004      	beq.n	8012768 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 801275e:	f240 21f2 	movw	r1, #754	; 0x2f2
 8012762:	4811      	ldr	r0, [pc, #68]	; (80127a8 <MX_I2C3_Init+0x90>)
 8012764:	f7ff fe66 	bl	8012434 <_Error_Handler>
  }

    /**Configure Analogue filter
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012768:	2100      	movs	r1, #0
 801276a:	480c      	ldr	r0, [pc, #48]	; (801279c <MX_I2C3_Init+0x84>)
 801276c:	f7f2 fbb0 	bl	8004ed0 <HAL_I2CEx_ConfigAnalogFilter>
 8012770:	4603      	mov	r3, r0
 8012772:	2b00      	cmp	r3, #0
 8012774:	d004      	beq.n	8012780 <MX_I2C3_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012776:	f240 21f9 	movw	r1, #761	; 0x2f9
 801277a:	480b      	ldr	r0, [pc, #44]	; (80127a8 <MX_I2C3_Init+0x90>)
 801277c:	f7ff fe5a 	bl	8012434 <_Error_Handler>
  }

    /**Configure Digital filter
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8012780:	2100      	movs	r1, #0
 8012782:	4806      	ldr	r0, [pc, #24]	; (801279c <MX_I2C3_Init+0x84>)
 8012784:	f7f2 fbef 	bl	8004f66 <HAL_I2CEx_ConfigDigitalFilter>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d004      	beq.n	8012798 <MX_I2C3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 801278e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8012792:	4805      	ldr	r0, [pc, #20]	; (80127a8 <MX_I2C3_Init+0x90>)
 8012794:	f7ff fe4e 	bl	8012434 <_Error_Handler>
  }

}
 8012798:	bf00      	nop
 801279a:	bd80      	pop	{r7, pc}
 801279c:	20004614 	.word	0x20004614
 80127a0:	40005c00 	.word	0x40005c00
 80127a4:	00c0eaff 	.word	0x00c0eaff
 80127a8:	08017224 	.word	0x08017224

080127ac <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b08e      	sub	sp, #56	; 0x38
 80127b0:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg;

  hltdc.Instance = LTDC;
 80127b2:	4b3c      	ldr	r3, [pc, #240]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127b4:	4a3c      	ldr	r2, [pc, #240]	; (80128a8 <MX_LTDC_Init+0xfc>)
 80127b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80127b8:	4b3a      	ldr	r3, [pc, #232]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127ba:	2200      	movs	r2, #0
 80127bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80127be:	4b39      	ldr	r3, [pc, #228]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127c0:	2200      	movs	r2, #0
 80127c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80127c4:	4b37      	ldr	r3, [pc, #220]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127c6:	2200      	movs	r2, #0
 80127c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80127ca:	4b36      	ldr	r3, [pc, #216]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127cc:	2200      	movs	r2, #0
 80127ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80127d0:	4b34      	ldr	r3, [pc, #208]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127d2:	2228      	movs	r2, #40	; 0x28
 80127d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80127d6:	4b33      	ldr	r3, [pc, #204]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127d8:	2209      	movs	r2, #9
 80127da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80127dc:	4b31      	ldr	r3, [pc, #196]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127de:	2235      	movs	r2, #53	; 0x35
 80127e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80127e2:	4b30      	ldr	r3, [pc, #192]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127e4:	220b      	movs	r2, #11
 80127e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80127e8:	4b2e      	ldr	r3, [pc, #184]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127ea:	f240 2215 	movw	r2, #533	; 0x215
 80127ee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80127f0:	4b2c      	ldr	r3, [pc, #176]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127f2:	f240 121b 	movw	r2, #283	; 0x11b
 80127f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80127f8:	4b2a      	ldr	r3, [pc, #168]	; (80128a4 <MX_LTDC_Init+0xf8>)
 80127fa:	f240 2235 	movw	r2, #565	; 0x235
 80127fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8012800:	4b28      	ldr	r3, [pc, #160]	; (80128a4 <MX_LTDC_Init+0xf8>)
 8012802:	f240 121d 	movw	r2, #285	; 0x11d
 8012806:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8012808:	4b26      	ldr	r3, [pc, #152]	; (80128a4 <MX_LTDC_Init+0xf8>)
 801280a:	2200      	movs	r2, #0
 801280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8012810:	4b24      	ldr	r3, [pc, #144]	; (80128a4 <MX_LTDC_Init+0xf8>)
 8012812:	2200      	movs	r2, #0
 8012814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8012818:	4b22      	ldr	r3, [pc, #136]	; (80128a4 <MX_LTDC_Init+0xf8>)
 801281a:	2200      	movs	r2, #0
 801281c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8012820:	4820      	ldr	r0, [pc, #128]	; (80128a4 <MX_LTDC_Init+0xf8>)
 8012822:	f7f2 fbef 	bl	8005004 <HAL_LTDC_Init>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d004      	beq.n	8012836 <MX_LTDC_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 801282c:	f240 311d 	movw	r1, #797	; 0x31d
 8012830:	481e      	ldr	r0, [pc, #120]	; (80128ac <MX_LTDC_Init+0x100>)
 8012832:	f7ff fdff 	bl	8012434 <_Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8012836:	2300      	movs	r3, #0
 8012838:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 801283a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801283e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8012840:	2300      	movs	r3, #0
 8012842:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8012844:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012848:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 801284a:	2300      	movs	r3, #0
 801284c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801284e:	23ff      	movs	r3, #255	; 0xff
 8012850:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8012856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801285a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 801285c:	2305      	movs	r3, #5
 801285e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8012860:	2300      	movs	r3, #0
 8012862:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8012864:	2300      	movs	r3, #0
 8012866:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8012868:	2300      	movs	r3, #0
 801286a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 801286c:	2300      	movs	r3, #0
 801286e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8012872:	2300      	movs	r3, #0
 8012874:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8012878:	2300      	movs	r3, #0
 801287a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801287e:	1d3b      	adds	r3, r7, #4
 8012880:	2200      	movs	r2, #0
 8012882:	4619      	mov	r1, r3
 8012884:	4807      	ldr	r0, [pc, #28]	; (80128a4 <MX_LTDC_Init+0xf8>)
 8012886:	f7f2 fc99 	bl	80051bc <HAL_LTDC_ConfigLayer>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d004      	beq.n	801289a <MX_LTDC_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012890:	f240 3131 	movw	r1, #817	; 0x331
 8012894:	4805      	ldr	r0, [pc, #20]	; (80128ac <MX_LTDC_Init+0x100>)
 8012896:	f7ff fdcd 	bl	8012434 <_Error_Handler>
  }

}
 801289a:	bf00      	nop
 801289c:	3738      	adds	r7, #56	; 0x38
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	200046e4 	.word	0x200046e4
 80128a8:	40016800 	.word	0x40016800
 80128ac:	08017224 	.word	0x08017224

080128b0 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b088      	sub	sp, #32
 80128b4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80128b6:	4b22      	ldr	r3, [pc, #136]	; (8012940 <MX_TIM2_Init+0x90>)
 80128b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80128bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80128be:	4b20      	ldr	r3, [pc, #128]	; (8012940 <MX_TIM2_Init+0x90>)
 80128c0:	2200      	movs	r2, #0
 80128c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80128c4:	4b1e      	ldr	r3, [pc, #120]	; (8012940 <MX_TIM2_Init+0x90>)
 80128c6:	2200      	movs	r2, #0
 80128c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80128ca:	4b1d      	ldr	r3, [pc, #116]	; (8012940 <MX_TIM2_Init+0x90>)
 80128cc:	2264      	movs	r2, #100	; 0x64
 80128ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80128d0:	4b1b      	ldr	r3, [pc, #108]	; (8012940 <MX_TIM2_Init+0x90>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80128d6:	4b1a      	ldr	r3, [pc, #104]	; (8012940 <MX_TIM2_Init+0x90>)
 80128d8:	2200      	movs	r2, #0
 80128da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80128dc:	4818      	ldr	r0, [pc, #96]	; (8012940 <MX_TIM2_Init+0x90>)
 80128de:	f7f3 fff4 	bl	80068ca <HAL_TIM_Base_Init>
 80128e2:	4603      	mov	r3, r0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d004      	beq.n	80128f2 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80128e8:	f240 3145 	movw	r1, #837	; 0x345
 80128ec:	4815      	ldr	r0, [pc, #84]	; (8012944 <MX_TIM2_Init+0x94>)
 80128ee:	f7ff fda1 	bl	8012434 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80128f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80128f8:	f107 0310 	add.w	r3, r7, #16
 80128fc:	4619      	mov	r1, r3
 80128fe:	4810      	ldr	r0, [pc, #64]	; (8012940 <MX_TIM2_Init+0x90>)
 8012900:	f7f4 f948 	bl	8006b94 <HAL_TIM_ConfigClockSource>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d004      	beq.n	8012914 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 801290a:	f240 314b 	movw	r1, #843	; 0x34b
 801290e:	480d      	ldr	r0, [pc, #52]	; (8012944 <MX_TIM2_Init+0x94>)
 8012910:	f7ff fd90 	bl	8012434 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8012914:	2320      	movs	r3, #32
 8012916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012918:	2300      	movs	r3, #0
 801291a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801291c:	1d3b      	adds	r3, r7, #4
 801291e:	4619      	mov	r1, r3
 8012920:	4807      	ldr	r0, [pc, #28]	; (8012940 <MX_TIM2_Init+0x90>)
 8012922:	f7f4 fb99 	bl	8007058 <HAL_TIMEx_MasterConfigSynchronization>
 8012926:	4603      	mov	r3, r0
 8012928:	2b00      	cmp	r3, #0
 801292a:	d004      	beq.n	8012936 <MX_TIM2_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 801292c:	f240 3152 	movw	r1, #850	; 0x352
 8012930:	4804      	ldr	r0, [pc, #16]	; (8012944 <MX_TIM2_Init+0x94>)
 8012932:	f7ff fd7f 	bl	8012434 <_Error_Handler>
  }

}
 8012936:	bf00      	nop
 8012938:	3720      	adds	r7, #32
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	20004e04 	.word	0x20004e04
 8012944:	08017224 	.word	0x08017224

08012948 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 801294e:	4b21      	ldr	r3, [pc, #132]	; (80129d4 <MX_TIM3_Init+0x8c>)
 8012950:	4a21      	ldr	r2, [pc, #132]	; (80129d8 <MX_TIM3_Init+0x90>)
 8012952:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012954:	4b1f      	ldr	r3, [pc, #124]	; (80129d4 <MX_TIM3_Init+0x8c>)
 8012956:	2200      	movs	r2, #0
 8012958:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801295a:	4b1e      	ldr	r3, [pc, #120]	; (80129d4 <MX_TIM3_Init+0x8c>)
 801295c:	2200      	movs	r2, #0
 801295e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8012960:	4b1c      	ldr	r3, [pc, #112]	; (80129d4 <MX_TIM3_Init+0x8c>)
 8012962:	2264      	movs	r2, #100	; 0x64
 8012964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012966:	4b1b      	ldr	r3, [pc, #108]	; (80129d4 <MX_TIM3_Init+0x8c>)
 8012968:	2200      	movs	r2, #0
 801296a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801296c:	4b19      	ldr	r3, [pc, #100]	; (80129d4 <MX_TIM3_Init+0x8c>)
 801296e:	2200      	movs	r2, #0
 8012970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8012972:	4818      	ldr	r0, [pc, #96]	; (80129d4 <MX_TIM3_Init+0x8c>)
 8012974:	f7f3 ffa9 	bl	80068ca <HAL_TIM_Base_Init>
 8012978:	4603      	mov	r3, r0
 801297a:	2b00      	cmp	r3, #0
 801297c:	d004      	beq.n	8012988 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 801297e:	f240 3166 	movw	r1, #870	; 0x366
 8012982:	4816      	ldr	r0, [pc, #88]	; (80129dc <MX_TIM3_Init+0x94>)
 8012984:	f7ff fd56 	bl	8012434 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801298c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801298e:	f107 0310 	add.w	r3, r7, #16
 8012992:	4619      	mov	r1, r3
 8012994:	480f      	ldr	r0, [pc, #60]	; (80129d4 <MX_TIM3_Init+0x8c>)
 8012996:	f7f4 f8fd 	bl	8006b94 <HAL_TIM_ConfigClockSource>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d004      	beq.n	80129aa <MX_TIM3_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80129a0:	f44f 715b 	mov.w	r1, #876	; 0x36c
 80129a4:	480d      	ldr	r0, [pc, #52]	; (80129dc <MX_TIM3_Init+0x94>)
 80129a6:	f7ff fd45 	bl	8012434 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80129aa:	2320      	movs	r3, #32
 80129ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80129ae:	2300      	movs	r3, #0
 80129b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80129b2:	1d3b      	adds	r3, r7, #4
 80129b4:	4619      	mov	r1, r3
 80129b6:	4807      	ldr	r0, [pc, #28]	; (80129d4 <MX_TIM3_Init+0x8c>)
 80129b8:	f7f4 fb4e 	bl	8007058 <HAL_TIMEx_MasterConfigSynchronization>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d004      	beq.n	80129cc <MX_TIM3_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80129c2:	f240 3173 	movw	r1, #883	; 0x373
 80129c6:	4805      	ldr	r0, [pc, #20]	; (80129dc <MX_TIM3_Init+0x94>)
 80129c8:	f7ff fd34 	bl	8012434 <_Error_Handler>
  }

}
 80129cc:	bf00      	nop
 80129ce:	3720      	adds	r7, #32
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	2000497c 	.word	0x2000497c
 80129d8:	40000400 	.word	0x40000400
 80129dc:	08017224 	.word	0x08017224

080129e0 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80129e4:	4b15      	ldr	r3, [pc, #84]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 80129e6:	4a16      	ldr	r2, [pc, #88]	; (8012a40 <MX_USART1_UART_Init+0x60>)
 80129e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80129ea:	4b14      	ldr	r3, [pc, #80]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 80129ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80129f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80129f2:	4b12      	ldr	r3, [pc, #72]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 80129f4:	2200      	movs	r2, #0
 80129f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80129f8:	4b10      	ldr	r3, [pc, #64]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 80129fa:	2200      	movs	r2, #0
 80129fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80129fe:	4b0f      	ldr	r3, [pc, #60]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 8012a00:	2200      	movs	r2, #0
 8012a02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012a04:	4b0d      	ldr	r3, [pc, #52]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 8012a06:	220c      	movs	r2, #12
 8012a08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012a0a:	4b0c      	ldr	r3, [pc, #48]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012a10:	4b0a      	ldr	r3, [pc, #40]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 8012a12:	2200      	movs	r2, #0
 8012a14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012a16:	4b09      	ldr	r3, [pc, #36]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012a1c:	4b07      	ldr	r3, [pc, #28]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 8012a1e:	2200      	movs	r2, #0
 8012a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012a22:	4806      	ldr	r0, [pc, #24]	; (8012a3c <MX_USART1_UART_Init+0x5c>)
 8012a24:	f7f4 fb80 	bl	8007128 <HAL_UART_Init>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d004      	beq.n	8012a38 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012a2e:	f44f 7162 	mov.w	r1, #904	; 0x388
 8012a32:	4804      	ldr	r0, [pc, #16]	; (8012a44 <MX_USART1_UART_Init+0x64>)
 8012a34:	f7ff fcfe 	bl	8012434 <_Error_Handler>
  }

}
 8012a38:	bf00      	nop
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	20004834 	.word	0x20004834
 8012a40:	40011000 	.word	0x40011000
 8012a44:	08017224 	.word	0x08017224

08012a48 <MX_WWDG_Init>:

/* WWDG init function */
static void MX_WWDG_Init(void)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8012a4c:	4b0a      	ldr	r3, [pc, #40]	; (8012a78 <MX_WWDG_Init+0x30>)
 8012a4e:	4a0b      	ldr	r2, [pc, #44]	; (8012a7c <MX_WWDG_Init+0x34>)
 8012a50:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8012a52:	4b09      	ldr	r3, [pc, #36]	; (8012a78 <MX_WWDG_Init+0x30>)
 8012a54:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8012a58:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8012a5a:	4b07      	ldr	r3, [pc, #28]	; (8012a78 <MX_WWDG_Init+0x30>)
 8012a5c:	2240      	movs	r2, #64	; 0x40
 8012a5e:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8012a60:	4b05      	ldr	r3, [pc, #20]	; (8012a78 <MX_WWDG_Init+0x30>)
 8012a62:	2240      	movs	r2, #64	; 0x40
 8012a64:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8012a66:	4b04      	ldr	r3, [pc, #16]	; (8012a78 <MX_WWDG_Init+0x30>)
 8012a68:	2200      	movs	r2, #0
 8012a6a:	611a      	str	r2, [r3, #16]
//  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
//  {
//    _Error_Handler(__FILE__, __LINE__);
//  }

}
 8012a6c:	bf00      	nop
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop
 8012a78:	20004bc0 	.word	0x20004bc0
 8012a7c:	40002c00 	.word	0x40002c00

08012a80 <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream2
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8012a86:	4a40      	ldr	r2, [pc, #256]	; (8012b88 <MX_DMA_Init+0x108>)
 8012a88:	4b3f      	ldr	r3, [pc, #252]	; (8012b88 <MX_DMA_Init+0x108>)
 8012a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012a90:	6313      	str	r3, [r2, #48]	; 0x30
 8012a92:	4b3d      	ldr	r3, [pc, #244]	; (8012b88 <MX_DMA_Init+0x108>)
 8012a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a9a:	607b      	str	r3, [r7, #4]
 8012a9c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8012a9e:	4b3b      	ldr	r3, [pc, #236]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012aa0:	4a3b      	ldr	r2, [pc, #236]	; (8012b90 <MX_DMA_Init+0x110>)
 8012aa2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Channel = DMA_CHANNEL_0;
 8012aa4:	4b39      	ldr	r3, [pc, #228]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8012aaa:	4b38      	ldr	r3, [pc, #224]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012aac:	2280      	movs	r2, #128	; 0x80
 8012aae:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 8012ab0:	4b36      	ldr	r3, [pc, #216]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ab6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 8012ab8:	4b34      	ldr	r3, [pc, #208]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012abe:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012ac0:	4b32      	ldr	r3, [pc, #200]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012ac6:	4b31      	ldr	r3, [pc, #196]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ac8:	2200      	movs	r2, #0
 8012aca:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8012acc:	4b2f      	ldr	r3, [pc, #188]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 8012ad2:	4b2e      	ldr	r3, [pc, #184]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8012ad8:	4b2c      	ldr	r3, [pc, #176]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ada:	2204      	movs	r2, #4
 8012adc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8012ade:	4b2b      	ldr	r3, [pc, #172]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ae0:	2203      	movs	r2, #3
 8012ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8012ae4:	4b29      	ldr	r3, [pc, #164]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8012aea:	4b28      	ldr	r3, [pc, #160]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8012af0:	4826      	ldr	r0, [pc, #152]	; (8012b8c <MX_DMA_Init+0x10c>)
 8012af2:	f7ef fdf5 	bl	80026e0 <HAL_DMA_Init>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d004      	beq.n	8012b06 <MX_DMA_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012afc:	f44f 716e 	mov.w	r1, #952	; 0x3b8
 8012b00:	4824      	ldr	r0, [pc, #144]	; (8012b94 <MX_DMA_Init+0x114>)
 8012b02:	f7ff fc97 	bl	8012434 <_Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8012b06:	4b24      	ldr	r3, [pc, #144]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b08:	4a24      	ldr	r2, [pc, #144]	; (8012b9c <MX_DMA_Init+0x11c>)
 8012b0a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8012b0c:	4b22      	ldr	r3, [pc, #136]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b0e:	2200      	movs	r2, #0
 8012b10:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8012b12:	4b21      	ldr	r3, [pc, #132]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b14:	2280      	movs	r2, #128	; 0x80
 8012b16:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8012b18:	4b1f      	ldr	r3, [pc, #124]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b1e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8012b20:	4b1d      	ldr	r3, [pc, #116]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012b26:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012b28:	4b1b      	ldr	r3, [pc, #108]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012b2e:	4b1a      	ldr	r3, [pc, #104]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b30:	2200      	movs	r2, #0
 8012b32:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8012b34:	4b18      	ldr	r3, [pc, #96]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b36:	2200      	movs	r2, #0
 8012b38:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8012b3a:	4b17      	ldr	r3, [pc, #92]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8012b40:	4b15      	ldr	r3, [pc, #84]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b42:	2204      	movs	r2, #4
 8012b44:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8012b46:	4b14      	ldr	r3, [pc, #80]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b48:	2203      	movs	r2, #3
 8012b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8012b4c:	4b12      	ldr	r3, [pc, #72]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8012b52:	4b11      	ldr	r3, [pc, #68]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b54:	2200      	movs	r2, #0
 8012b56:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8012b58:	480f      	ldr	r0, [pc, #60]	; (8012b98 <MX_DMA_Init+0x118>)
 8012b5a:	f7ef fdc1 	bl	80026e0 <HAL_DMA_Init>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d004      	beq.n	8012b6e <MX_DMA_Init+0xee>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012b64:	f240 31cb 	movw	r1, #971	; 0x3cb
 8012b68:	480a      	ldr	r0, [pc, #40]	; (8012b94 <MX_DMA_Init+0x114>)
 8012b6a:	f7ff fc63 	bl	8012434 <_Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8012b6e:	2200      	movs	r2, #0
 8012b70:	2105      	movs	r1, #5
 8012b72:	2038      	movs	r0, #56	; 0x38
 8012b74:	f7ef fc83 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8012b78:	2038      	movs	r0, #56	; 0x38
 8012b7a:	f7ef fc9c 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 8012b7e:	bf00      	nop
 8012b80:	3708      	adds	r7, #8
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	40023800 	.word	0x40023800
 8012b8c:	200048e4 	.word	0x200048e4
 8012b90:	40026440 	.word	0x40026440
 8012b94:	08017224 	.word	0x08017224
 8012b98:	200047d4 	.word	0x200047d4
 8012b9c:	40026428 	.word	0x40026428

08012ba0 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b088      	sub	sp, #32
 8012ba4:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8012ba6:	4b21      	ldr	r3, [pc, #132]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012ba8:	4a21      	ldr	r2, [pc, #132]	; (8012c30 <MX_FMC_Init+0x90>)
 8012baa:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8012bac:	4b1f      	ldr	r3, [pc, #124]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bae:	2200      	movs	r2, #0
 8012bb0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8012bb2:	4b1e      	ldr	r3, [pc, #120]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8012bb8:	4b1c      	ldr	r3, [pc, #112]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bba:	2204      	movs	r2, #4
 8012bbc:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8012bbe:	4b1b      	ldr	r3, [pc, #108]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bc0:	2210      	movs	r2, #16
 8012bc2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8012bc4:	4b19      	ldr	r3, [pc, #100]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bc6:	2240      	movs	r2, #64	; 0x40
 8012bc8:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8012bca:	4b18      	ldr	r3, [pc, #96]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bd0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8012bd2:	4b16      	ldr	r3, [pc, #88]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8012bd8:	4b14      	ldr	r3, [pc, #80]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012bde:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8012be0:	4b12      	ldr	r3, [pc, #72]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012be6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8012be8:	4b10      	ldr	r3, [pc, #64]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012bea:	2200      	movs	r2, #0
 8012bec:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8012bee:	2302      	movs	r3, #2
 8012bf0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8012bf2:	2307      	movs	r3, #7
 8012bf4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8012bf6:	2304      	movs	r3, #4
 8012bf8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8012bfa:	2306      	movs	r3, #6
 8012bfc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8012bfe:	2302      	movs	r3, #2
 8012c00:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8012c02:	2302      	movs	r3, #2
 8012c04:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8012c06:	2302      	movs	r3, #2
 8012c08:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8012c0a:	1d3b      	adds	r3, r7, #4
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	4807      	ldr	r0, [pc, #28]	; (8012c2c <MX_FMC_Init+0x8c>)
 8012c10:	f7f3 fd7a 	bl	8006708 <HAL_SDRAM_Init>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d004      	beq.n	8012c24 <MX_FMC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012c1a:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8012c1e:	4805      	ldr	r0, [pc, #20]	; (8012c34 <MX_FMC_Init+0x94>)
 8012c20:	f7ff fc08 	bl	8012434 <_Error_Handler>
  }

}
 8012c24:	bf00      	nop
 8012c26:	3720      	adds	r7, #32
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	20004944 	.word	0x20004944
 8012c30:	a0000140 	.word	0xa0000140
 8012c34:	08017224 	.word	0x08017224

08012c38 <MX_GPIO_Init>:
     PA7   ------> ETH_CRS_DV
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b090      	sub	sp, #64	; 0x40
 8012c3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012c3e:	4aae      	ldr	r2, [pc, #696]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c40:	4bad      	ldr	r3, [pc, #692]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c44:	f043 0310 	orr.w	r3, r3, #16
 8012c48:	6313      	str	r3, [r2, #48]	; 0x30
 8012c4a:	4bab      	ldr	r3, [pc, #684]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c4e:	f003 0310 	and.w	r3, r3, #16
 8012c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012c56:	4aa8      	ldr	r2, [pc, #672]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c58:	4ba7      	ldr	r3, [pc, #668]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c60:	6313      	str	r3, [r2, #48]	; 0x30
 8012c62:	4ba5      	ldr	r3, [pc, #660]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012c6e:	4aa2      	ldr	r2, [pc, #648]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c70:	4ba1      	ldr	r3, [pc, #644]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c74:	f043 0302 	orr.w	r3, r3, #2
 8012c78:	6313      	str	r3, [r2, #48]	; 0x30
 8012c7a:	4b9f      	ldr	r3, [pc, #636]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c7e:	f003 0302 	and.w	r3, r3, #2
 8012c82:	623b      	str	r3, [r7, #32]
 8012c84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012c86:	4a9c      	ldr	r2, [pc, #624]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c88:	4b9b      	ldr	r3, [pc, #620]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8c:	f043 0308 	orr.w	r3, r3, #8
 8012c90:	6313      	str	r3, [r2, #48]	; 0x30
 8012c92:	4b99      	ldr	r3, [pc, #612]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c96:	f003 0308 	and.w	r3, r3, #8
 8012c9a:	61fb      	str	r3, [r7, #28]
 8012c9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c9e:	4a96      	ldr	r2, [pc, #600]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012ca0:	4b95      	ldr	r3, [pc, #596]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca4:	f043 0304 	orr.w	r3, r3, #4
 8012ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8012caa:	4b93      	ldr	r3, [pc, #588]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cae:	f003 0304 	and.w	r3, r3, #4
 8012cb2:	61bb      	str	r3, [r7, #24]
 8012cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012cb6:	4a90      	ldr	r2, [pc, #576]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cb8:	4b8f      	ldr	r3, [pc, #572]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cbc:	f043 0301 	orr.w	r3, r3, #1
 8012cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8012cc2:	4b8d      	ldr	r3, [pc, #564]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc6:	f003 0301 	and.w	r3, r3, #1
 8012cca:	617b      	str	r3, [r7, #20]
 8012ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012cce:	4a8a      	ldr	r2, [pc, #552]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cd0:	4b89      	ldr	r3, [pc, #548]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8012cda:	4b87      	ldr	r3, [pc, #540]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ce2:	613b      	str	r3, [r7, #16]
 8012ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012ce6:	4a84      	ldr	r2, [pc, #528]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012ce8:	4b83      	ldr	r3, [pc, #524]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8012cf2:	4b81      	ldr	r3, [pc, #516]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cfa:	60fb      	str	r3, [r7, #12]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8012cfe:	4a7e      	ldr	r2, [pc, #504]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d00:	4b7d      	ldr	r3, [pc, #500]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012d08:	6313      	str	r3, [r2, #48]	; 0x30
 8012d0a:	4b7b      	ldr	r3, [pc, #492]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d12:	60bb      	str	r3, [r7, #8]
 8012d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012d16:	4a78      	ldr	r2, [pc, #480]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d18:	4b77      	ldr	r3, [pc, #476]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d1c:	f043 0320 	orr.w	r3, r3, #32
 8012d20:	6313      	str	r3, [r2, #48]	; 0x30
 8012d22:	4b75      	ldr	r3, [pc, #468]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d26:	f003 0320 	and.w	r3, r3, #32
 8012d2a:	607b      	str	r3, [r7, #4]
 8012d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012d2e:	4a72      	ldr	r2, [pc, #456]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d30:	4b71      	ldr	r3, [pc, #452]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d38:	6313      	str	r3, [r2, #48]	; 0x30
 8012d3a:	4b6f      	ldr	r3, [pc, #444]	; (8012ef8 <MX_GPIO_Init+0x2c0>)
 8012d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d42:	603b      	str	r3, [r7, #0]
 8012d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8012d46:	2201      	movs	r2, #1
 8012d48:	2120      	movs	r1, #32
 8012d4a:	486c      	ldr	r0, [pc, #432]	; (8012efc <MX_GPIO_Init+0x2c4>)
 8012d4c:	f7f0 fbf2 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8012d50:	2200      	movs	r2, #0
 8012d52:	f241 010c 	movw	r1, #4108	; 0x100c
 8012d56:	486a      	ldr	r0, [pc, #424]	; (8012f00 <MX_GPIO_Init+0x2c8>)
 8012d58:	f7f0 fbec 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	2108      	movs	r1, #8
 8012d60:	4868      	ldr	r0, [pc, #416]	; (8012f04 <MX_GPIO_Init+0x2cc>)
 8012d62:	f7f0 fbe7 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8012d66:	2200      	movs	r2, #0
 8012d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d6c:	4866      	ldr	r0, [pc, #408]	; (8012f08 <MX_GPIO_Init+0x2d0>)
 8012d6e:	f7f0 fbe1 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8012d72:	2200      	movs	r2, #0
 8012d74:	21c8      	movs	r1, #200	; 0xc8
 8012d76:	4865      	ldr	r0, [pc, #404]	; (8012f0c <MX_GPIO_Init+0x2d4>)
 8012d78:	f7f0 fbdc 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8012d7c:	2308      	movs	r3, #8
 8012d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012d80:	2300      	movs	r3, #0
 8012d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d84:	2300      	movs	r3, #0
 8012d86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8012d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	4860      	ldr	r0, [pc, #384]	; (8012f10 <MX_GPIO_Init+0x2d8>)
 8012d90:	f7f0 fa26 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8012d94:	2304      	movs	r3, #4
 8012d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d98:	2302      	movs	r3, #2
 8012d9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012da0:	2303      	movs	r3, #3
 8012da2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8012da4:	2309      	movs	r3, #9
 8012da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8012da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dac:	4619      	mov	r1, r3
 8012dae:	4858      	ldr	r0, [pc, #352]	; (8012f10 <MX_GPIO_Init+0x2d8>)
 8012db0:	f7f0 fa16 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8012db4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8012db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dba:	2302      	movs	r3, #2
 8012dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012dc2:	2303      	movs	r3, #3
 8012dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012dc6:	230b      	movs	r3, #11
 8012dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dce:	4619      	mov	r1, r3
 8012dd0:	484e      	ldr	r0, [pc, #312]	; (8012f0c <MX_GPIO_Init+0x2d4>)
 8012dd2:	f7f0 fa05 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8012dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012ddc:	2312      	movs	r3, #18
 8012dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012de0:	2301      	movs	r3, #1
 8012de2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012de4:	2300      	movs	r3, #0
 8012de6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012de8:	2304      	movs	r3, #4
 8012dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012df0:	4619      	mov	r1, r3
 8012df2:	4848      	ldr	r0, [pc, #288]	; (8012f14 <MX_GPIO_Init+0x2dc>)
 8012df4:	f7f0 f9f4 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8012df8:	2380      	movs	r3, #128	; 0x80
 8012dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dfc:	2302      	movs	r3, #2
 8012dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e00:	2300      	movs	r3, #0
 8012e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e04:	2300      	movs	r3, #0
 8012e06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8012e08:	2308      	movs	r3, #8
 8012e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8012e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e10:	4619      	mov	r1, r3
 8012e12:	483a      	ldr	r0, [pc, #232]	; (8012efc <MX_GPIO_Init+0x2c4>)
 8012e14:	f7f0 f9e4 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8012e18:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8012e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e1e:	2302      	movs	r3, #2
 8012e20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e22:	2300      	movs	r3, #0
 8012e24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e26:	2303      	movs	r3, #3
 8012e28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8012e2a:	230c      	movs	r3, #12
 8012e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e32:	4619      	mov	r1, r3
 8012e34:	4838      	ldr	r0, [pc, #224]	; (8012f18 <MX_GPIO_Init+0x2e0>)
 8012e36:	f7f0 f9d3 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8012e3a:	2360      	movs	r3, #96	; 0x60
 8012e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e3e:	2302      	movs	r3, #2
 8012e40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e42:	2300      	movs	r3, #0
 8012e44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e46:	2300      	movs	r3, #0
 8012e48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012e4a:	230d      	movs	r3, #13
 8012e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e52:	4619      	mov	r1, r3
 8012e54:	482e      	ldr	r0, [pc, #184]	; (8012f10 <MX_GPIO_Init+0x2d8>)
 8012e56:	f7f0 f9c3 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8012e5a:	2340      	movs	r3, #64	; 0x40
 8012e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e5e:	2302      	movs	r3, #2
 8012e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e62:	2300      	movs	r3, #0
 8012e64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e66:	2303      	movs	r3, #3
 8012e68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8012e6a:	230a      	movs	r3, #10
 8012e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8012e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e72:	4619      	mov	r1, r3
 8012e74:	4827      	ldr	r0, [pc, #156]	; (8012f14 <MX_GPIO_Init+0x2dc>)
 8012e76:	f7f0 f9b3 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8012e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e80:	2300      	movs	r3, #0
 8012e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e84:	2300      	movs	r3, #0
 8012e86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8012e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	4823      	ldr	r0, [pc, #140]	; (8012f1c <MX_GPIO_Init+0x2e4>)
 8012e90:	f7f0 f9a6 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8012e94:	2340      	movs	r3, #64	; 0x40
 8012e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8012e98:	4b21      	ldr	r3, [pc, #132]	; (8012f20 <MX_GPIO_Init+0x2e8>)
 8012e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8012ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	4815      	ldr	r0, [pc, #84]	; (8012efc <MX_GPIO_Init+0x2c4>)
 8012ea8:	f7f0 f99a 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8012eac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012eb2:	2302      	movs	r3, #2
 8012eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012eba:	2303      	movs	r3, #3
 8012ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012ebe:	230a      	movs	r3, #10
 8012ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	4816      	ldr	r0, [pc, #88]	; (8012f24 <MX_GPIO_Init+0x2ec>)
 8012eca:	f7f0 f989 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8012ece:	23f0      	movs	r3, #240	; 0xf0
 8012ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ed2:	2302      	movs	r3, #2
 8012ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012eda:	2300      	movs	r3, #0
 8012edc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012ede:	230a      	movs	r3, #10
 8012ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4805      	ldr	r0, [pc, #20]	; (8012f00 <MX_GPIO_Init+0x2c8>)
 8012eea:	f7f0 f979 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8012eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ef4:	e018      	b.n	8012f28 <MX_GPIO_Init+0x2f0>
 8012ef6:	bf00      	nop
 8012ef8:	40023800 	.word	0x40023800
 8012efc:	40020c00 	.word	0x40020c00
 8012f00:	40022000 	.word	0x40022000
 8012f04:	40022800 	.word	0x40022800
 8012f08:	40021c00 	.word	0x40021c00
 8012f0c:	40021800 	.word	0x40021800
 8012f10:	40021000 	.word	0x40021000
 8012f14:	40020400 	.word	0x40020400
 8012f18:	40020800 	.word	0x40020800
 8012f1c:	40022400 	.word	0x40022400
 8012f20:	10120000 	.word	0x10120000
 8012f24:	40020000 	.word	0x40020000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f28:	2302      	movs	r3, #2
 8012f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f30:	2300      	movs	r3, #0
 8012f32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8012f34:	230a      	movs	r3, #10
 8012f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8012f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	48bb      	ldr	r0, [pc, #748]	; (801322c <MX_GPIO_Init+0x5f4>)
 8012f40:	f7f0 f94e 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8012f44:	2320      	movs	r3, #32
 8012f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f50:	2300      	movs	r3, #0
 8012f52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8012f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f58:	4619      	mov	r1, r3
 8012f5a:	48b5      	ldr	r0, [pc, #724]	; (8013230 <MX_GPIO_Init+0x5f8>)
 8012f5c:	f7f0 f940 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8012f60:	2308      	movs	r3, #8
 8012f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f64:	2302      	movs	r3, #2
 8012f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012f70:	230d      	movs	r3, #13
 8012f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8012f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f78:	4619      	mov	r1, r3
 8012f7a:	48ad      	ldr	r0, [pc, #692]	; (8013230 <MX_GPIO_Init+0x5f8>)
 8012f7c:	f7f0 f930 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8012f80:	f241 030c 	movw	r3, #4108	; 0x100c
 8012f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f86:	2301      	movs	r3, #1
 8012f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f96:	4619      	mov	r1, r3
 8012f98:	48a6      	ldr	r0, [pc, #664]	; (8013234 <MX_GPIO_Init+0x5fc>)
 8012f9a:	f7f0 f921 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8012f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8012fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	48a1      	ldr	r0, [pc, #644]	; (8013238 <MX_GPIO_Init+0x600>)
 8012fb4:	f7f0 f914 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8012fb8:	2308      	movs	r3, #8
 8012fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8012fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fcc:	4619      	mov	r1, r3
 8012fce:	489b      	ldr	r0, [pc, #620]	; (801323c <MX_GPIO_Init+0x604>)
 8012fd0:	f7f0 f906 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8012fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012fda:	2302      	movs	r3, #2
 8012fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8012fe6:	230d      	movs	r3, #13
 8012fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8012fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fee:	4619      	mov	r1, r3
 8012ff0:	488e      	ldr	r0, [pc, #568]	; (801322c <MX_GPIO_Init+0x5f4>)
 8012ff2:	f7f0 f8f5 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8012ff6:	2310      	movs	r3, #16
 8012ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ffe:	2300      	movs	r3, #0
 8013000:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013006:	4619      	mov	r1, r3
 8013008:	4889      	ldr	r0, [pc, #548]	; (8013230 <MX_GPIO_Init+0x5f8>)
 801300a:	f7f0 f8e9 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 801300e:	2304      	movs	r3, #4
 8013010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013012:	2302      	movs	r3, #2
 8013014:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013016:	2300      	movs	r3, #0
 8013018:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801301a:	2303      	movs	r3, #3
 801301c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801301e:	230c      	movs	r3, #12
 8013020:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8013022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013026:	4619      	mov	r1, r3
 8013028:	4881      	ldr	r0, [pc, #516]	; (8013230 <MX_GPIO_Init+0x5f8>)
 801302a:	f7f0 f8d9 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 801302e:	f248 0304 	movw	r3, #32772	; 0x8004
 8013032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013034:	2300      	movs	r3, #0
 8013036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013038:	2300      	movs	r3, #0
 801303a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801303c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013040:	4619      	mov	r1, r3
 8013042:	487f      	ldr	r0, [pc, #508]	; (8013240 <MX_GPIO_Init+0x608>)
 8013044:	f7f0 f8cc 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8013048:	2302      	movs	r3, #2
 801304a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801304c:	2302      	movs	r3, #2
 801304e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013050:	2300      	movs	r3, #0
 8013052:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013054:	2300      	movs	r3, #0
 8013056:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013058:	2305      	movs	r3, #5
 801305a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 801305c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013060:	4619      	mov	r1, r3
 8013062:	4874      	ldr	r0, [pc, #464]	; (8013234 <MX_GPIO_Init+0x5fc>)
 8013064:	f7f0 f8bc 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8013068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801306e:	2301      	movs	r3, #1
 8013070:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013072:	2300      	movs	r3, #0
 8013074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013076:	2300      	movs	r3, #0
 8013078:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 801307a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801307e:	4619      	mov	r1, r3
 8013080:	486f      	ldr	r0, [pc, #444]	; (8013240 <MX_GPIO_Init+0x608>)
 8013082:	f7f0 f8ad 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8013086:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 801308a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801308c:	2302      	movs	r3, #2
 801308e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013090:	2300      	movs	r3, #0
 8013092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013094:	2300      	movs	r3, #0
 8013096:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8013098:	230d      	movs	r3, #13
 801309a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801309c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130a0:	4619      	mov	r1, r3
 80130a2:	4867      	ldr	r0, [pc, #412]	; (8013240 <MX_GPIO_Init+0x608>)
 80130a4:	f7f0 f89c 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 80130a8:	2301      	movs	r3, #1
 80130aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130ac:	2302      	movs	r3, #2
 80130ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130b0:	2300      	movs	r3, #0
 80130b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130b4:	2300      	movs	r3, #0
 80130b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80130b8:	2302      	movs	r3, #2
 80130ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 80130bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130c0:	4619      	mov	r1, r3
 80130c2:	485c      	ldr	r0, [pc, #368]	; (8013234 <MX_GPIO_Init+0x5fc>)
 80130c4:	f7f0 f88c 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 80130c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130ce:	2302      	movs	r3, #2
 80130d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130d2:	2300      	movs	r3, #0
 80130d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80130d6:	2300      	movs	r3, #0
 80130d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80130da:	2301      	movs	r3, #1
 80130dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 80130de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130e2:	4619      	mov	r1, r3
 80130e4:	4857      	ldr	r0, [pc, #348]	; (8013244 <MX_GPIO_Init+0x60c>)
 80130e6:	f7f0 f87b 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80130ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80130ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80130f0:	4b55      	ldr	r3, [pc, #340]	; (8013248 <MX_GPIO_Init+0x610>)
 80130f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130f4:	2300      	movs	r3, #0
 80130f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80130f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130fc:	4619      	mov	r1, r3
 80130fe:	484d      	ldr	r0, [pc, #308]	; (8013234 <MX_GPIO_Init+0x5fc>)
 8013100:	f7f0 f86e 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8013104:	23c0      	movs	r3, #192	; 0xc0
 8013106:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013108:	2302      	movs	r3, #2
 801310a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801310c:	2300      	movs	r3, #0
 801310e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013110:	2303      	movs	r3, #3
 8013112:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8013114:	2308      	movs	r3, #8
 8013116:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801311c:	4619      	mov	r1, r3
 801311e:	4846      	ldr	r0, [pc, #280]	; (8013238 <MX_GPIO_Init+0x600>)
 8013120:	f7f0 f85e 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8013124:	23c8      	movs	r3, #200	; 0xc8
 8013126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013128:	2301      	movs	r3, #1
 801312a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801312c:	2300      	movs	r3, #0
 801312e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013130:	2300      	movs	r3, #0
 8013132:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013138:	4619      	mov	r1, r3
 801313a:	483c      	ldr	r0, [pc, #240]	; (801322c <MX_GPIO_Init+0x5f4>)
 801313c:	f7f0 f850 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013140:	2332      	movs	r3, #50	; 0x32
 8013142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013144:	2302      	movs	r3, #2
 8013146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013148:	2300      	movs	r3, #0
 801314a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801314c:	2303      	movs	r3, #3
 801314e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013150:	230b      	movs	r3, #11
 8013152:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013158:	4619      	mov	r1, r3
 801315a:	4837      	ldr	r0, [pc, #220]	; (8013238 <MX_GPIO_Init+0x600>)
 801315c:	f7f0 f840 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8013160:	2304      	movs	r3, #4
 8013162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013164:	2302      	movs	r3, #2
 8013166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013168:	2300      	movs	r3, #0
 801316a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801316c:	2303      	movs	r3, #3
 801316e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8013170:	2309      	movs	r3, #9
 8013172:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013178:	4619      	mov	r1, r3
 801317a:	4834      	ldr	r0, [pc, #208]	; (801324c <MX_GPIO_Init+0x614>)
 801317c:	f7f0 f830 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8013180:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8013184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013186:	2302      	movs	r3, #2
 8013188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801318a:	2300      	movs	r3, #0
 801318c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801318e:	2303      	movs	r3, #3
 8013190:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8013192:	2309      	movs	r3, #9
 8013194:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801319a:	4619      	mov	r1, r3
 801319c:	4824      	ldr	r0, [pc, #144]	; (8013230 <MX_GPIO_Init+0x5f8>)
 801319e:	f7f0 f81f 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80131a2:	2304      	movs	r3, #4
 80131a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80131a6:	2300      	movs	r3, #0
 80131a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131aa:	2300      	movs	r3, #0
 80131ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80131ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131b2:	4619      	mov	r1, r3
 80131b4:	481d      	ldr	r0, [pc, #116]	; (801322c <MX_GPIO_Init+0x5f4>)
 80131b6:	f7f0 f813 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80131ba:	2386      	movs	r3, #134	; 0x86
 80131bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131be:	2302      	movs	r3, #2
 80131c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131c2:	2300      	movs	r3, #0
 80131c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131c6:	2303      	movs	r3, #3
 80131c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80131ca:	230b      	movs	r3, #11
 80131cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131d2:	4619      	mov	r1, r3
 80131d4:	481b      	ldr	r0, [pc, #108]	; (8013244 <MX_GPIO_Init+0x60c>)
 80131d6:	f7f0 f803 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80131da:	2350      	movs	r3, #80	; 0x50
 80131dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131de:	2302      	movs	r3, #2
 80131e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131e2:	2300      	movs	r3, #0
 80131e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131e6:	2300      	movs	r3, #0
 80131e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80131ea:	230d      	movs	r3, #13
 80131ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131f2:	4619      	mov	r1, r3
 80131f4:	4813      	ldr	r0, [pc, #76]	; (8013244 <MX_GPIO_Init+0x60c>)
 80131f6:	f7ef fff3 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80131fa:	2340      	movs	r3, #64	; 0x40
 80131fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131fe:	2302      	movs	r3, #2
 8013200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013202:	2300      	movs	r3, #0
 8013204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013206:	2300      	movs	r3, #0
 8013208:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 801320a:	2309      	movs	r3, #9
 801320c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 801320e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013212:	4619      	mov	r1, r3
 8013214:	480a      	ldr	r0, [pc, #40]	; (8013240 <MX_GPIO_Init+0x608>)
 8013216:	f7ef ffe3 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801321a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801321e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013220:	2302      	movs	r3, #2
 8013222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013224:	2300      	movs	r3, #0
 8013226:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013228:	2300      	movs	r3, #0
 801322a:	e011      	b.n	8013250 <MX_GPIO_Init+0x618>
 801322c:	40021800 	.word	0x40021800
 8013230:	40020c00 	.word	0x40020c00
 8013234:	40022000 	.word	0x40022000
 8013238:	40020800 	.word	0x40020800
 801323c:	40022800 	.word	0x40022800
 8013240:	40021c00 	.word	0x40021c00
 8013244:	40020000 	.word	0x40020000
 8013248:	10120000 	.word	0x10120000
 801324c:	40020400 	.word	0x40020400
 8013250:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013252:	2305      	movs	r3, #5
 8013254:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801325a:	4619      	mov	r1, r3
 801325c:	4803      	ldr	r0, [pc, #12]	; (801326c <MX_GPIO_Init+0x634>)
 801325e:	f7ef ffbf 	bl	80031e0 <HAL_GPIO_Init>

}
 8013262:	bf00      	nop
 8013264:	3740      	adds	r7, #64	; 0x40
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	40020400 	.word	0x40020400

08013270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4a04      	ldr	r2, [pc, #16]	; (8013290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d101      	bne.n	8013286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013282:	f7ee fcc1 	bl	8001c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013286:	bf00      	nop
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	40010000 	.word	0x40010000

08013294 <SDRAMDISK_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_initialize(BYTE lun)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	4603      	mov	r3, r0
 801329c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801329e:	4b0b      	ldr	r3, [pc, #44]	; (80132cc <SDRAMDISK_initialize+0x38>)
 80132a0:	2201      	movs	r2, #1
 80132a2:	701a      	strb	r2, [r3, #0]

  /* Configure the SDRAM device */
  if(BSP_SDRAM_Init() == SDRAM_OK)
 80132a4:	f7fd ffe2 	bl	801126c <BSP_SDRAM_Init>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d107      	bne.n	80132be <SDRAMDISK_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80132ae:	4b07      	ldr	r3, [pc, #28]	; (80132cc <SDRAMDISK_initialize+0x38>)
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	f023 0301 	bic.w	r3, r3, #1
 80132b8:	b2da      	uxtb	r2, r3
 80132ba:	4b04      	ldr	r3, [pc, #16]	; (80132cc <SDRAMDISK_initialize+0x38>)
 80132bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80132be:	4b03      	ldr	r3, [pc, #12]	; (80132cc <SDRAMDISK_initialize+0x38>)
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	b2db      	uxtb	r3, r3
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3708      	adds	r7, #8
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	20000038 	.word	0x20000038

080132d0 <SDRAMDISK_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b083      	sub	sp, #12
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	4603      	mov	r3, r0
 80132d8:	71fb      	strb	r3, [r7, #7]
  return Stat;
 80132da:	4b04      	ldr	r3, [pc, #16]	; (80132ec <SDRAMDISK_status+0x1c>)
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	b2db      	uxtb	r3, r3
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr
 80132ec:	20000038 	.word	0x20000038

080132f0 <SDRAMDISK_read>:
  * @retval DRESULT: Operation result
  */
/* USER CODE BEGIN beforeWriteSection */

//TV: Moved to user code because changes
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b088      	sub	sp, #32
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
 80132fa:	603b      	str	r3, [r7, #0]
 80132fc:	4603      	mov	r3, r0
 80132fe:	73fb      	strb	r3, [r7, #15]
	uint32_t *pSrcBuffer = (uint32_t *) &buff;
 8013300:	f107 0308 	add.w	r3, r7, #8
 8013304:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	025b      	lsls	r3, r3, #9
 801330a:	089b      	lsrs	r3, r3, #2
 801330c:	61bb      	str	r3, [r7, #24]
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	4b08      	ldr	r3, [pc, #32]	; (8013334 <SDRAMDISK_read+0x44>)
 8013312:	4413      	add	r3, r2
 8013314:	025b      	lsls	r3, r3, #9
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 8013316:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 8013318:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pSrcBuffer, BufferSize);
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 801331e:	69ba      	ldr	r2, [r7, #24]
 8013320:	4619      	mov	r1, r3
 8013322:	f7fd ffaf 	bl	8011284 <BSP_SDRAM_ReadData>
 8013326:	4603      	mov	r3, r0
 8013328:	74fb      	strb	r3, [r7, #19]

	return RES_OK;
 801332a:	7cfb      	ldrb	r3, [r7, #19]
}
 801332c:	4618      	mov	r0, r3
 801332e:	3720      	adds	r7, #32
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	00600800 	.word	0x00600800

08013338 <SDRAMDISK_write>:
  */

/* USER CODE BEGIN beforeIoctlSection */
//TV: Moved to user code because changes
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 8013338:	b580      	push	{r7, lr}
 801333a:	b088      	sub	sp, #32
 801333c:	af00      	add	r7, sp, #0
 801333e:	60b9      	str	r1, [r7, #8]
 8013340:	607a      	str	r2, [r7, #4]
 8013342:	603b      	str	r3, [r7, #0]
 8013344:	4603      	mov	r3, r0
 8013346:	73fb      	strb	r3, [r7, #15]
	uint32_t *pDstBuffer = (uint32_t *) &buff;
 8013348:	f107 0308 	add.w	r3, r7, #8
 801334c:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	025b      	lsls	r3, r3, #9
 8013352:	089b      	lsrs	r3, r3, #2
 8013354:	61bb      	str	r3, [r7, #24]
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	4b08      	ldr	r3, [pc, #32]	; (801337c <SDRAMDISK_write+0x44>)
 801335a:	4413      	add	r3, r2
 801335c:	025b      	lsls	r3, r3, #9
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 801335e:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8013360:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pDstBuffer, BufferSize);
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 8013366:	69ba      	ldr	r2, [r7, #24]
 8013368:	4619      	mov	r1, r3
 801336a:	f7fd ffa5 	bl	80112b8 <BSP_SDRAM_WriteData>
 801336e:	4603      	mov	r3, r0
 8013370:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*(__IO uint32_t *) pSramAddress++ = *pDstBuffer++;
	//}

	return RES_OK;
 8013372:	7cfb      	ldrb	r3, [r7, #19]
}
 8013374:	4618      	mov	r0, r3
 8013376:	3720      	adds	r7, #32
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	00600800 	.word	0x00600800

08013380 <SDRAMDISK_ioctl>:
  */

/* USER CODE BEGIN lastSection */
//TV: Moved to user code because changes
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
 8013380:	b480      	push	{r7}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	4603      	mov	r3, r0
 8013388:	603a      	str	r2, [r7, #0]
 801338a:	71fb      	strb	r3, [r7, #7]
 801338c:	460b      	mov	r3, r1
 801338e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 8013390:	2301      	movs	r3, #1
 8013392:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT)
 8013394:	4b1b      	ldr	r3, [pc, #108]	; (8013404 <SDRAMDISK_ioctl+0x84>)
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	b2db      	uxtb	r3, r3
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d001      	beq.n	80133a6 <SDRAMDISK_ioctl+0x26>
		return RES_NOTRDY;
 80133a2:	2303      	movs	r3, #3
 80133a4:	e027      	b.n	80133f6 <SDRAMDISK_ioctl+0x76>

	switch (cmd) {
 80133a6:	79bb      	ldrb	r3, [r7, #6]
 80133a8:	2b03      	cmp	r3, #3
 80133aa:	d821      	bhi.n	80133f0 <SDRAMDISK_ioctl+0x70>
 80133ac:	a201      	add	r2, pc, #4	; (adr r2, 80133b4 <SDRAMDISK_ioctl+0x34>)
 80133ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133b2:	bf00      	nop
 80133b4:	080133c5 	.word	0x080133c5
 80133b8:	080133cb 	.word	0x080133cb
 80133bc:	080133d7 	.word	0x080133d7
 80133c0:	080133e5 	.word	0x080133e5
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 80133c4:	2300      	movs	r3, #0
 80133c6:	73fb      	strb	r3, [r7, #15]
		break;
 80133c8:	e014      	b.n	80133f4 <SDRAMDISK_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	4a0e      	ldr	r2, [pc, #56]	; (8013408 <SDRAMDISK_ioctl+0x88>)
 80133ce:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80133d0:	2300      	movs	r3, #0
 80133d2:	73fb      	strb	r3, [r7, #15]
		break;
 80133d4:	e00e      	b.n	80133f4 <SDRAMDISK_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133dc:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 80133de:	2300      	movs	r3, #0
 80133e0:	73fb      	strb	r3, [r7, #15]
		break;
 80133e2:	e007      	b.n	80133f4 <SDRAMDISK_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	2201      	movs	r2, #1
 80133e8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 80133ea:	2300      	movs	r3, #0
 80133ec:	73fb      	strb	r3, [r7, #15]
		break;
 80133ee:	e001      	b.n	80133f4 <SDRAMDISK_ioctl+0x74>

	default:
		res = RES_PARERR;
 80133f0:	2304      	movs	r3, #4
 80133f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3714      	adds	r7, #20
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop
 8013404:	20000038 	.word	0x20000038
 8013408:	007ff800 	.word	0x007ff800

0801340c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013410:	2003      	movs	r0, #3
 8013412:	f7ef f829 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8013416:	2200      	movs	r2, #0
 8013418:	2100      	movs	r1, #0
 801341a:	f06f 000b 	mvn.w	r0, #11
 801341e:	f7ef f82e 	bl	800247e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8013422:	2200      	movs	r2, #0
 8013424:	2100      	movs	r1, #0
 8013426:	f06f 000a 	mvn.w	r0, #10
 801342a:	f7ef f828 	bl	800247e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801342e:	2200      	movs	r2, #0
 8013430:	2100      	movs	r1, #0
 8013432:	f06f 0009 	mvn.w	r0, #9
 8013436:	f7ef f822 	bl	800247e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801343a:	2200      	movs	r2, #0
 801343c:	2100      	movs	r1, #0
 801343e:	f06f 0004 	mvn.w	r0, #4
 8013442:	f7ef f81c 	bl	800247e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8013446:	2200      	movs	r2, #0
 8013448:	2100      	movs	r1, #0
 801344a:	f06f 0003 	mvn.w	r0, #3
 801344e:	f7ef f816 	bl	800247e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8013452:	2200      	movs	r2, #0
 8013454:	210f      	movs	r1, #15
 8013456:	f06f 0001 	mvn.w	r0, #1
 801345a:	f7ef f810 	bl	800247e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 801345e:	2200      	movs	r2, #0
 8013460:	210f      	movs	r1, #15
 8013462:	f04f 30ff 	mov.w	r0, #4294967295
 8013466:	f7ef f80a 	bl	800247e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801346a:	bf00      	nop
 801346c:	bd80      	pop	{r7, pc}
	...

08013470 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b088      	sub	sp, #32
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4a2f      	ldr	r2, [pc, #188]	; (801353c <HAL_ADC_MspInit+0xcc>)
 801347e:	4293      	cmp	r3, r2
 8013480:	d157      	bne.n	8013532 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8013482:	4a2f      	ldr	r2, [pc, #188]	; (8013540 <HAL_ADC_MspInit+0xd0>)
 8013484:	4b2e      	ldr	r3, [pc, #184]	; (8013540 <HAL_ADC_MspInit+0xd0>)
 8013486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801348c:	6453      	str	r3, [r2, #68]	; 0x44
 801348e:	4b2c      	ldr	r3, [pc, #176]	; (8013540 <HAL_ADC_MspInit+0xd0>)
 8013490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013496:	60bb      	str	r3, [r7, #8]
 8013498:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 801349a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801349e:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80134a0:	2303      	movs	r3, #3
 80134a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134a4:	2300      	movs	r3, #0
 80134a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80134a8:	f107 030c 	add.w	r3, r7, #12
 80134ac:	4619      	mov	r1, r3
 80134ae:	4825      	ldr	r0, [pc, #148]	; (8013544 <HAL_ADC_MspInit+0xd4>)
 80134b0:	f7ef fe96 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80134b4:	2301      	movs	r3, #1
 80134b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80134b8:	2303      	movs	r3, #3
 80134ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134bc:	2300      	movs	r3, #0
 80134be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80134c0:	f107 030c 	add.w	r3, r7, #12
 80134c4:	4619      	mov	r1, r3
 80134c6:	4820      	ldr	r0, [pc, #128]	; (8013548 <HAL_ADC_MspInit+0xd8>)
 80134c8:	f7ef fe8a 	bl	80031e0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80134cc:	4b1f      	ldr	r3, [pc, #124]	; (801354c <HAL_ADC_MspInit+0xdc>)
 80134ce:	4a20      	ldr	r2, [pc, #128]	; (8013550 <HAL_ADC_MspInit+0xe0>)
 80134d0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80134d2:	4b1e      	ldr	r3, [pc, #120]	; (801354c <HAL_ADC_MspInit+0xdc>)
 80134d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80134d8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80134da:	4b1c      	ldr	r3, [pc, #112]	; (801354c <HAL_ADC_MspInit+0xdc>)
 80134dc:	2200      	movs	r2, #0
 80134de:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80134e0:	4b1a      	ldr	r3, [pc, #104]	; (801354c <HAL_ADC_MspInit+0xdc>)
 80134e2:	2200      	movs	r2, #0
 80134e4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80134e6:	4b19      	ldr	r3, [pc, #100]	; (801354c <HAL_ADC_MspInit+0xdc>)
 80134e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80134ec:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80134ee:	4b17      	ldr	r3, [pc, #92]	; (801354c <HAL_ADC_MspInit+0xdc>)
 80134f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80134f4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80134f6:	4b15      	ldr	r3, [pc, #84]	; (801354c <HAL_ADC_MspInit+0xdc>)
 80134f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80134fc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80134fe:	4b13      	ldr	r3, [pc, #76]	; (801354c <HAL_ADC_MspInit+0xdc>)
 8013500:	2200      	movs	r2, #0
 8013502:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8013504:	4b11      	ldr	r3, [pc, #68]	; (801354c <HAL_ADC_MspInit+0xdc>)
 8013506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801350a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801350c:	4b0f      	ldr	r3, [pc, #60]	; (801354c <HAL_ADC_MspInit+0xdc>)
 801350e:	2200      	movs	r2, #0
 8013510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8013512:	480e      	ldr	r0, [pc, #56]	; (801354c <HAL_ADC_MspInit+0xdc>)
 8013514:	f7ef f8e4 	bl	80026e0 <HAL_DMA_Init>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d003      	beq.n	8013526 <HAL_ADC_MspInit+0xb6>
    {
      _Error_Handler(__FILE__, __LINE__);
 801351e:	2189      	movs	r1, #137	; 0x89
 8013520:	480c      	ldr	r0, [pc, #48]	; (8013554 <HAL_ADC_MspInit+0xe4>)
 8013522:	f7fe ff87 	bl	8012434 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	4a08      	ldr	r2, [pc, #32]	; (801354c <HAL_ADC_MspInit+0xdc>)
 801352a:	639a      	str	r2, [r3, #56]	; 0x38
 801352c:	4a07      	ldr	r2, [pc, #28]	; (801354c <HAL_ADC_MspInit+0xdc>)
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8013532:	bf00      	nop
 8013534:	3720      	adds	r7, #32
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	40012200 	.word	0x40012200
 8013540:	40023800 	.word	0x40023800
 8013544:	40021400 	.word	0x40021400
 8013548:	40020000 	.word	0x40020000
 801354c:	20004684 	.word	0x20004684
 8013550:	40026410 	.word	0x40026410
 8013554:	08017564 	.word	0x08017564

08013558 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8013558:	b480      	push	{r7}
 801355a:	b085      	sub	sp, #20
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	4a0a      	ldr	r2, [pc, #40]	; (8013590 <HAL_CRC_MspInit+0x38>)
 8013566:	4293      	cmp	r3, r2
 8013568:	d10b      	bne.n	8013582 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801356a:	4a0a      	ldr	r2, [pc, #40]	; (8013594 <HAL_CRC_MspInit+0x3c>)
 801356c:	4b09      	ldr	r3, [pc, #36]	; (8013594 <HAL_CRC_MspInit+0x3c>)
 801356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013574:	6313      	str	r3, [r2, #48]	; 0x30
 8013576:	4b07      	ldr	r3, [pc, #28]	; (8013594 <HAL_CRC_MspInit+0x3c>)
 8013578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801357a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801357e:	60fb      	str	r3, [r7, #12]
 8013580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8013582:	bf00      	nop
 8013584:	3714      	adds	r7, #20
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop
 8013590:	40023000 	.word	0x40023000
 8013594:	40023800 	.word	0x40023800

08013598 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8013598:	b480      	push	{r7}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4a0a      	ldr	r2, [pc, #40]	; (80135d0 <HAL_DMA2D_MspInit+0x38>)
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d10b      	bne.n	80135c2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80135aa:	4a0a      	ldr	r2, [pc, #40]	; (80135d4 <HAL_DMA2D_MspInit+0x3c>)
 80135ac:	4b09      	ldr	r3, [pc, #36]	; (80135d4 <HAL_DMA2D_MspInit+0x3c>)
 80135ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80135b4:	6313      	str	r3, [r2, #48]	; 0x30
 80135b6:	4b07      	ldr	r3, [pc, #28]	; (80135d4 <HAL_DMA2D_MspInit+0x3c>)
 80135b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80135be:	60fb      	str	r3, [r7, #12]
 80135c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80135c2:	bf00      	nop
 80135c4:	3714      	adds	r7, #20
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop
 80135d0:	4002b000 	.word	0x4002b000
 80135d4:	40023800 	.word	0x40023800

080135d8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b088      	sub	sp, #32
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4a11      	ldr	r2, [pc, #68]	; (801362c <HAL_I2C_MspInit+0x54>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d11c      	bne.n	8013624 <HAL_I2C_MspInit+0x4c>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80135ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80135ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80135f0:	2312      	movs	r3, #18
 80135f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80135f4:	2301      	movs	r3, #1
 80135f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80135f8:	2303      	movs	r3, #3
 80135fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80135fc:	2304      	movs	r3, #4
 80135fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013600:	f107 030c 	add.w	r3, r7, #12
 8013604:	4619      	mov	r1, r3
 8013606:	480a      	ldr	r0, [pc, #40]	; (8013630 <HAL_I2C_MspInit+0x58>)
 8013608:	f7ef fdea 	bl	80031e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 801360c:	4a09      	ldr	r2, [pc, #36]	; (8013634 <HAL_I2C_MspInit+0x5c>)
 801360e:	4b09      	ldr	r3, [pc, #36]	; (8013634 <HAL_I2C_MspInit+0x5c>)
 8013610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013616:	6413      	str	r3, [r2, #64]	; 0x40
 8013618:	4b06      	ldr	r3, [pc, #24]	; (8013634 <HAL_I2C_MspInit+0x5c>)
 801361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801361c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013620:	60bb      	str	r3, [r7, #8]
 8013622:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8013624:	bf00      	nop
 8013626:	3720      	adds	r7, #32
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	40005c00 	.word	0x40005c00
 8013630:	40021c00 	.word	0x40021c00
 8013634:	40023800 	.word	0x40023800

08013638 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b088      	sub	sp, #32
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	4a32      	ldr	r2, [pc, #200]	; (8013710 <HAL_LTDC_MspInit+0xd8>)
 8013646:	4293      	cmp	r3, r2
 8013648:	d15e      	bne.n	8013708 <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801364a:	4a32      	ldr	r2, [pc, #200]	; (8013714 <HAL_LTDC_MspInit+0xdc>)
 801364c:	4b31      	ldr	r3, [pc, #196]	; (8013714 <HAL_LTDC_MspInit+0xdc>)
 801364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013654:	6453      	str	r3, [r2, #68]	; 0x44
 8013656:	4b2f      	ldr	r3, [pc, #188]	; (8013714 <HAL_LTDC_MspInit+0xdc>)
 8013658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801365a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801365e:	60bb      	str	r3, [r7, #8]
 8013660:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8013662:	2310      	movs	r3, #16
 8013664:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013666:	2302      	movs	r3, #2
 8013668:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801366a:	2300      	movs	r3, #0
 801366c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801366e:	2300      	movs	r3, #0
 8013670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013672:	230e      	movs	r3, #14
 8013674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8013676:	f107 030c 	add.w	r3, r7, #12
 801367a:	4619      	mov	r1, r3
 801367c:	4826      	ldr	r0, [pc, #152]	; (8013718 <HAL_LTDC_MspInit+0xe0>)
 801367e:	f7ef fdaf 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8013682:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8013686:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013688:	2302      	movs	r3, #2
 801368a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801368c:	2300      	movs	r3, #0
 801368e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013690:	2300      	movs	r3, #0
 8013692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8013694:	230e      	movs	r3, #14
 8013696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8013698:	f107 030c 	add.w	r3, r7, #12
 801369c:	4619      	mov	r1, r3
 801369e:	481f      	ldr	r0, [pc, #124]	; (801371c <HAL_LTDC_MspInit+0xe4>)
 80136a0:	f7ef fd9e 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80136a4:	23f7      	movs	r3, #247	; 0xf7
 80136a6:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80136a8:	2302      	movs	r3, #2
 80136aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136ac:	2300      	movs	r3, #0
 80136ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80136b0:	2300      	movs	r3, #0
 80136b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80136b4:	230e      	movs	r3, #14
 80136b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80136b8:	f107 030c 	add.w	r3, r7, #12
 80136bc:	4619      	mov	r1, r3
 80136be:	4818      	ldr	r0, [pc, #96]	; (8013720 <HAL_LTDC_MspInit+0xe8>)
 80136c0:	f7ef fd8e 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80136c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80136ca:	2302      	movs	r3, #2
 80136cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136ce:	2300      	movs	r3, #0
 80136d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80136d2:	2300      	movs	r3, #0
 80136d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80136d6:	2309      	movs	r3, #9
 80136d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80136da:	f107 030c 	add.w	r3, r7, #12
 80136de:	4619      	mov	r1, r3
 80136e0:	4810      	ldr	r0, [pc, #64]	; (8013724 <HAL_LTDC_MspInit+0xec>)
 80136e2:	f7ef fd7d 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80136e6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80136ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80136ec:	2302      	movs	r3, #2
 80136ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136f0:	2300      	movs	r3, #0
 80136f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80136f4:	2300      	movs	r3, #0
 80136f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80136f8:	230e      	movs	r3, #14
 80136fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80136fc:	f107 030c 	add.w	r3, r7, #12
 8013700:	4619      	mov	r1, r3
 8013702:	4809      	ldr	r0, [pc, #36]	; (8013728 <HAL_LTDC_MspInit+0xf0>)
 8013704:	f7ef fd6c 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8013708:	bf00      	nop
 801370a:	3720      	adds	r7, #32
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	40016800 	.word	0x40016800
 8013714:	40023800 	.word	0x40023800
 8013718:	40021000 	.word	0x40021000
 801371c:	40022400 	.word	0x40022400
 8013720:	40022800 	.word	0x40022800
 8013724:	40021800 	.word	0x40021800
 8013728:	40022000 	.word	0x40022000

0801372c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b08a      	sub	sp, #40	; 0x28
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801373c:	d10c      	bne.n	8013758 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801373e:	4a19      	ldr	r2, [pc, #100]	; (80137a4 <HAL_TIM_Base_MspInit+0x78>)
 8013740:	4b18      	ldr	r3, [pc, #96]	; (80137a4 <HAL_TIM_Base_MspInit+0x78>)
 8013742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013744:	f043 0301 	orr.w	r3, r3, #1
 8013748:	6413      	str	r3, [r2, #64]	; 0x40
 801374a:	4b16      	ldr	r3, [pc, #88]	; (80137a4 <HAL_TIM_Base_MspInit+0x78>)
 801374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801374e:	f003 0301 	and.w	r3, r3, #1
 8013752:	613b      	str	r3, [r7, #16]
 8013754:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8013756:	e020      	b.n	801379a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	4a12      	ldr	r2, [pc, #72]	; (80137a8 <HAL_TIM_Base_MspInit+0x7c>)
 801375e:	4293      	cmp	r3, r2
 8013760:	d11b      	bne.n	801379a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013762:	4a10      	ldr	r2, [pc, #64]	; (80137a4 <HAL_TIM_Base_MspInit+0x78>)
 8013764:	4b0f      	ldr	r3, [pc, #60]	; (80137a4 <HAL_TIM_Base_MspInit+0x78>)
 8013766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013768:	f043 0302 	orr.w	r3, r3, #2
 801376c:	6413      	str	r3, [r2, #64]	; 0x40
 801376e:	4b0d      	ldr	r3, [pc, #52]	; (80137a4 <HAL_TIM_Base_MspInit+0x78>)
 8013770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013772:	f003 0302 	and.w	r3, r3, #2
 8013776:	60fb      	str	r3, [r7, #12]
 8013778:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 801377a:	2310      	movs	r3, #16
 801377c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801377e:	2302      	movs	r3, #2
 8013780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013782:	2300      	movs	r3, #0
 8013784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013786:	2300      	movs	r3, #0
 8013788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801378a:	2302      	movs	r3, #2
 801378c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 801378e:	f107 0314 	add.w	r3, r7, #20
 8013792:	4619      	mov	r1, r3
 8013794:	4805      	ldr	r0, [pc, #20]	; (80137ac <HAL_TIM_Base_MspInit+0x80>)
 8013796:	f7ef fd23 	bl	80031e0 <HAL_GPIO_Init>
}
 801379a:	bf00      	nop
 801379c:	3728      	adds	r7, #40	; 0x28
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	40023800 	.word	0x40023800
 80137a8:	40000400 	.word	0x40000400
 80137ac:	40020400 	.word	0x40020400

080137b0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b088      	sub	sp, #32
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	4a19      	ldr	r2, [pc, #100]	; (8013824 <HAL_UART_MspInit+0x74>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d12c      	bne.n	801381c <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80137c2:	4a19      	ldr	r2, [pc, #100]	; (8013828 <HAL_UART_MspInit+0x78>)
 80137c4:	4b18      	ldr	r3, [pc, #96]	; (8013828 <HAL_UART_MspInit+0x78>)
 80137c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137c8:	f043 0310 	orr.w	r3, r3, #16
 80137cc:	6453      	str	r3, [r2, #68]	; 0x44
 80137ce:	4b16      	ldr	r3, [pc, #88]	; (8013828 <HAL_UART_MspInit+0x78>)
 80137d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137d2:	f003 0310 	and.w	r3, r3, #16
 80137d6:	60bb      	str	r3, [r7, #8]
 80137d8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80137da:	2380      	movs	r3, #128	; 0x80
 80137dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80137de:	2302      	movs	r3, #2
 80137e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137e2:	2300      	movs	r3, #0
 80137e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80137e6:	2300      	movs	r3, #0
 80137e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80137ea:	2307      	movs	r3, #7
 80137ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80137ee:	f107 030c 	add.w	r3, r7, #12
 80137f2:	4619      	mov	r1, r3
 80137f4:	480d      	ldr	r0, [pc, #52]	; (801382c <HAL_UART_MspInit+0x7c>)
 80137f6:	f7ef fcf3 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80137fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013800:	2302      	movs	r3, #2
 8013802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013804:	2300      	movs	r3, #0
 8013806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013808:	2300      	movs	r3, #0
 801380a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801380c:	2307      	movs	r3, #7
 801380e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8013810:	f107 030c 	add.w	r3, r7, #12
 8013814:	4619      	mov	r1, r3
 8013816:	4806      	ldr	r0, [pc, #24]	; (8013830 <HAL_UART_MspInit+0x80>)
 8013818:	f7ef fce2 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801381c:	bf00      	nop
 801381e:	3720      	adds	r7, #32
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}
 8013824:	40011000 	.word	0x40011000
 8013828:	40023800 	.word	0x40023800
 801382c:	40020400 	.word	0x40020400
 8013830:	40020000 	.word	0x40020000

08013834 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8013834:	b580      	push	{r7, lr}
 8013836:	b086      	sub	sp, #24
 8013838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 801383a:	4b3b      	ldr	r3, [pc, #236]	; (8013928 <HAL_FMC_MspInit+0xf4>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d16d      	bne.n	801391e <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 8013842:	4b39      	ldr	r3, [pc, #228]	; (8013928 <HAL_FMC_MspInit+0xf4>)
 8013844:	2201      	movs	r2, #1
 8013846:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8013848:	4a38      	ldr	r2, [pc, #224]	; (801392c <HAL_FMC_MspInit+0xf8>)
 801384a:	4b38      	ldr	r3, [pc, #224]	; (801392c <HAL_FMC_MspInit+0xf8>)
 801384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801384e:	f043 0301 	orr.w	r3, r3, #1
 8013852:	6393      	str	r3, [r2, #56]	; 0x38
 8013854:	4b35      	ldr	r3, [pc, #212]	; (801392c <HAL_FMC_MspInit+0xf8>)
 8013856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013858:	f003 0301 	and.w	r3, r3, #1
 801385c:	603b      	str	r3, [r7, #0]
 801385e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8013860:	f64f 7383 	movw	r3, #65411	; 0xff83
 8013864:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013866:	2302      	movs	r3, #2
 8013868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801386a:	2300      	movs	r3, #0
 801386c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801386e:	2303      	movs	r3, #3
 8013870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013872:	230c      	movs	r3, #12
 8013874:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013876:	1d3b      	adds	r3, r7, #4
 8013878:	4619      	mov	r1, r3
 801387a:	482d      	ldr	r0, [pc, #180]	; (8013930 <HAL_FMC_MspInit+0xfc>)
 801387c:	f7ef fcb0 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8013880:	f248 1333 	movw	r3, #33075	; 0x8133
 8013884:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013886:	2302      	movs	r3, #2
 8013888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801388a:	2300      	movs	r3, #0
 801388c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801388e:	2303      	movs	r3, #3
 8013890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8013892:	230c      	movs	r3, #12
 8013894:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013896:	1d3b      	adds	r3, r7, #4
 8013898:	4619      	mov	r1, r3
 801389a:	4826      	ldr	r0, [pc, #152]	; (8013934 <HAL_FMC_MspInit+0x100>)
 801389c:	f7ef fca0 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80138a0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80138a4:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138a6:	2302      	movs	r3, #2
 80138a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138aa:	2300      	movs	r3, #0
 80138ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138ae:	2303      	movs	r3, #3
 80138b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80138b2:	230c      	movs	r3, #12
 80138b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80138b6:	1d3b      	adds	r3, r7, #4
 80138b8:	4619      	mov	r1, r3
 80138ba:	481f      	ldr	r0, [pc, #124]	; (8013938 <HAL_FMC_MspInit+0x104>)
 80138bc:	f7ef fc90 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80138c0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80138c4:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138c6:	2302      	movs	r3, #2
 80138c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138ca:	2300      	movs	r3, #0
 80138cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138ce:	2303      	movs	r3, #3
 80138d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80138d2:	230c      	movs	r3, #12
 80138d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80138d6:	1d3b      	adds	r3, r7, #4
 80138d8:	4619      	mov	r1, r3
 80138da:	4818      	ldr	r0, [pc, #96]	; (801393c <HAL_FMC_MspInit+0x108>)
 80138dc:	f7ef fc80 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80138e0:	2328      	movs	r3, #40	; 0x28
 80138e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138e4:	2302      	movs	r3, #2
 80138e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138e8:	2300      	movs	r3, #0
 80138ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138ec:	2303      	movs	r3, #3
 80138ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80138f0:	230c      	movs	r3, #12
 80138f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80138f4:	1d3b      	adds	r3, r7, #4
 80138f6:	4619      	mov	r1, r3
 80138f8:	4811      	ldr	r0, [pc, #68]	; (8013940 <HAL_FMC_MspInit+0x10c>)
 80138fa:	f7ef fc71 	bl	80031e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80138fe:	2308      	movs	r3, #8
 8013900:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013902:	2302      	movs	r3, #2
 8013904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013906:	2300      	movs	r3, #0
 8013908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801390a:	2303      	movs	r3, #3
 801390c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801390e:	230c      	movs	r3, #12
 8013910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8013912:	1d3b      	adds	r3, r7, #4
 8013914:	4619      	mov	r1, r3
 8013916:	480b      	ldr	r0, [pc, #44]	; (8013944 <HAL_FMC_MspInit+0x110>)
 8013918:	f7ef fc62 	bl	80031e0 <HAL_GPIO_Init>
 801391c:	e000      	b.n	8013920 <HAL_FMC_MspInit+0xec>
    return;
 801391e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8013920:	3718      	adds	r7, #24
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	200040a8 	.word	0x200040a8
 801392c:	40023800 	.word	0x40023800
 8013930:	40021000 	.word	0x40021000
 8013934:	40021800 	.word	0x40021800
 8013938:	40020c00 	.word	0x40020c00
 801393c:	40021400 	.word	0x40021400
 8013940:	40021c00 	.word	0x40021c00
 8013944:	40020800 	.word	0x40020800

08013948 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8013950:	f7ff ff70 	bl	8013834 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8013954:	bf00      	nop
 8013956:	3708      	adds	r7, #8
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b08c      	sub	sp, #48	; 0x30
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8013964:	2300      	movs	r3, #0
 8013966:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013968:	2300      	movs	r3, #0
 801396a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801396c:	2200      	movs	r2, #0
 801396e:	6879      	ldr	r1, [r7, #4]
 8013970:	2019      	movs	r0, #25
 8013972:	f7ee fd84 	bl	800247e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8013976:	2019      	movs	r0, #25
 8013978:	f7ee fd9d 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801397c:	4a1f      	ldr	r2, [pc, #124]	; (80139fc <HAL_InitTick+0xa0>)
 801397e:	4b1f      	ldr	r3, [pc, #124]	; (80139fc <HAL_InitTick+0xa0>)
 8013980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013982:	f043 0301 	orr.w	r3, r3, #1
 8013986:	6453      	str	r3, [r2, #68]	; 0x44
 8013988:	4b1c      	ldr	r3, [pc, #112]	; (80139fc <HAL_InitTick+0xa0>)
 801398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801398c:	f003 0301 	and.w	r3, r3, #1
 8013990:	60fb      	str	r3, [r7, #12]
 8013992:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013994:	f107 0210 	add.w	r2, r7, #16
 8013998:	f107 0314 	add.w	r3, r7, #20
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f2 fa92 	bl	8005ec8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80139a4:	f7f2 fa7c 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 80139a8:	4603      	mov	r3, r0
 80139aa:	005b      	lsls	r3, r3, #1
 80139ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80139ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b0:	4a13      	ldr	r2, [pc, #76]	; (8013a00 <HAL_InitTick+0xa4>)
 80139b2:	fba2 2303 	umull	r2, r3, r2, r3
 80139b6:	0c9b      	lsrs	r3, r3, #18
 80139b8:	3b01      	subs	r3, #1
 80139ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80139bc:	4b11      	ldr	r3, [pc, #68]	; (8013a04 <HAL_InitTick+0xa8>)
 80139be:	4a12      	ldr	r2, [pc, #72]	; (8013a08 <HAL_InitTick+0xac>)
 80139c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80139c2:	4b10      	ldr	r3, [pc, #64]	; (8013a04 <HAL_InitTick+0xa8>)
 80139c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80139c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80139ca:	4a0e      	ldr	r2, [pc, #56]	; (8013a04 <HAL_InitTick+0xa8>)
 80139cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80139d0:	4b0c      	ldr	r3, [pc, #48]	; (8013a04 <HAL_InitTick+0xa8>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80139d6:	4b0b      	ldr	r3, [pc, #44]	; (8013a04 <HAL_InitTick+0xa8>)
 80139d8:	2200      	movs	r2, #0
 80139da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80139dc:	4809      	ldr	r0, [pc, #36]	; (8013a04 <HAL_InitTick+0xa8>)
 80139de:	f7f2 ff74 	bl	80068ca <HAL_TIM_Base_Init>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d104      	bne.n	80139f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80139e8:	4806      	ldr	r0, [pc, #24]	; (8013a04 <HAL_InitTick+0xa8>)
 80139ea:	f7f2 ff99 	bl	8006920 <HAL_TIM_Base_Start_IT>
 80139ee:	4603      	mov	r3, r0
 80139f0:	e000      	b.n	80139f4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80139f2:	2301      	movs	r3, #1
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3730      	adds	r7, #48	; 0x30
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	40023800 	.word	0x40023800
 8013a00:	431bde83 	.word	0x431bde83
 8013a04:	20005078 	.word	0x20005078
 8013a08:	40010000 	.word	0x40010000

08013a0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8013a10:	f7f8 fdb8 	bl	800c584 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8013a14:	bf00      	nop
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013a1c:	4802      	ldr	r0, [pc, #8]	; (8013a28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8013a1e:	f7f2 ff9a 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8013a22:	bf00      	nop
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	20005078 	.word	0x20005078

08013a2c <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8013a30:	4802      	ldr	r0, [pc, #8]	; (8013a3c <DMA2_Stream0_IRQHandler+0x10>)
 8013a32:	f7ee ff03 	bl	800283c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8013a36:	bf00      	nop
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	20004684 	.word	0x20004684

08013a40 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8013a44:	4802      	ldr	r0, [pc, #8]	; (8013a50 <OTG_HS_IRQHandler+0x10>)
 8013a46:	f7ef fff5 	bl	8003a34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8013a4a:	bf00      	nop
 8013a4c:	bd80      	pop	{r7, pc}
 8013a4e:	bf00      	nop
 8013a50:	20005488 	.word	0x20005488

08013a54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013a54:	b480      	push	{r7}
 8013a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013a58:	4a15      	ldr	r2, [pc, #84]	; (8013ab0 <SystemInit+0x5c>)
 8013a5a:	4b15      	ldr	r3, [pc, #84]	; (8013ab0 <SystemInit+0x5c>)
 8013a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8013a68:	4a12      	ldr	r2, [pc, #72]	; (8013ab4 <SystemInit+0x60>)
 8013a6a:	4b12      	ldr	r3, [pc, #72]	; (8013ab4 <SystemInit+0x60>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	f043 0301 	orr.w	r3, r3, #1
 8013a72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013a74:	4b0f      	ldr	r3, [pc, #60]	; (8013ab4 <SystemInit+0x60>)
 8013a76:	2200      	movs	r2, #0
 8013a78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8013a7a:	490e      	ldr	r1, [pc, #56]	; (8013ab4 <SystemInit+0x60>)
 8013a7c:	4b0d      	ldr	r3, [pc, #52]	; (8013ab4 <SystemInit+0x60>)
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	4b0d      	ldr	r3, [pc, #52]	; (8013ab8 <SystemInit+0x64>)
 8013a82:	4013      	ands	r3, r2
 8013a84:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8013a86:	4b0b      	ldr	r3, [pc, #44]	; (8013ab4 <SystemInit+0x60>)
 8013a88:	4a0c      	ldr	r2, [pc, #48]	; (8013abc <SystemInit+0x68>)
 8013a8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8013a8c:	4a09      	ldr	r2, [pc, #36]	; (8013ab4 <SystemInit+0x60>)
 8013a8e:	4b09      	ldr	r3, [pc, #36]	; (8013ab4 <SystemInit+0x60>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013a96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8013a98:	4b06      	ldr	r3, [pc, #24]	; (8013ab4 <SystemInit+0x60>)
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8013a9e:	4b04      	ldr	r3, [pc, #16]	; (8013ab0 <SystemInit+0x5c>)
 8013aa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013aa4:	609a      	str	r2, [r3, #8]
#endif
}
 8013aa6:	bf00      	nop
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	e000ed00 	.word	0xe000ed00
 8013ab4:	40023800 	.word	0x40023800
 8013ab8:	fef6ffff 	.word	0xfef6ffff
 8013abc:	24003010 	.word	0x24003010

08013ac0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS);
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	4906      	ldr	r1, [pc, #24]	; (8013ae0 <MX_USB_HOST_Init+0x20>)
 8013ac8:	4806      	ldr	r0, [pc, #24]	; (8013ae4 <MX_USB_HOST_Init+0x24>)
 8013aca:	f7fa fecf 	bl	800e86c <USBH_Init>

  USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS);
 8013ace:	4906      	ldr	r1, [pc, #24]	; (8013ae8 <MX_USB_HOST_Init+0x28>)
 8013ad0:	4804      	ldr	r0, [pc, #16]	; (8013ae4 <MX_USB_HOST_Init+0x24>)
 8013ad2:	f7fa ff67 	bl	800e9a4 <USBH_RegisterClass>

  USBH_Start(&hUsbHostHS);
 8013ad6:	4803      	ldr	r0, [pc, #12]	; (8013ae4 <MX_USB_HOST_Init+0x24>)
 8013ad8:	f7fa fff5 	bl	800eac6 <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013adc:	bf00      	nop
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	08013aed 	.word	0x08013aed
 8013ae4:	200050b8 	.word	0x200050b8
 8013ae8:	20000018 	.word	0x20000018

08013aec <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013aec:	b480      	push	{r7}
 8013aee:	b083      	sub	sp, #12
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	460b      	mov	r3, r1
 8013af6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013af8:	78fb      	ldrb	r3, [r7, #3]
 8013afa:	3b01      	subs	r3, #1
 8013afc:	2b04      	cmp	r3, #4
 8013afe:	d819      	bhi.n	8013b34 <USBH_UserProcess+0x48>
 8013b00:	a201      	add	r2, pc, #4	; (adr r2, 8013b08 <USBH_UserProcess+0x1c>)
 8013b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b06:	bf00      	nop
 8013b08:	08013b35 	.word	0x08013b35
 8013b0c:	08013b25 	.word	0x08013b25
 8013b10:	08013b35 	.word	0x08013b35
 8013b14:	08013b2d 	.word	0x08013b2d
 8013b18:	08013b1d 	.word	0x08013b1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013b1c:	4b09      	ldr	r3, [pc, #36]	; (8013b44 <USBH_UserProcess+0x58>)
 8013b1e:	2203      	movs	r2, #3
 8013b20:	701a      	strb	r2, [r3, #0]
  break;
 8013b22:	e008      	b.n	8013b36 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013b24:	4b07      	ldr	r3, [pc, #28]	; (8013b44 <USBH_UserProcess+0x58>)
 8013b26:	2202      	movs	r2, #2
 8013b28:	701a      	strb	r2, [r3, #0]
  break;
 8013b2a:	e004      	b.n	8013b36 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013b2c:	4b05      	ldr	r3, [pc, #20]	; (8013b44 <USBH_UserProcess+0x58>)
 8013b2e:	2201      	movs	r2, #1
 8013b30:	701a      	strb	r2, [r3, #0]
  break;
 8013b32:	e000      	b.n	8013b36 <USBH_UserProcess+0x4a>

  default:
  break;
 8013b34:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013b36:	bf00      	nop
 8013b38:	370c      	adds	r7, #12
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	200040ac 	.word	0x200040ac

08013b48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b08a      	sub	sp, #40	; 0x28
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_HS)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	4a33      	ldr	r2, [pc, #204]	; (8013c24 <HAL_HCD_MspInit+0xdc>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d160      	bne.n	8013c1c <HAL_HCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8013b5a:	f643 4323 	movw	r3, #15395	; 0x3c23
 8013b5e:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b60:	2302      	movs	r3, #2
 8013b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b64:	2300      	movs	r3, #0
 8013b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b68:	2303      	movs	r3, #3
 8013b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013b6c:	230a      	movs	r3, #10
 8013b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013b70:	f107 0314 	add.w	r3, r7, #20
 8013b74:	4619      	mov	r1, r3
 8013b76:	482c      	ldr	r0, [pc, #176]	; (8013c28 <HAL_HCD_MspInit+0xe0>)
 8013b78:	f7ef fb32 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8013b7c:	2310      	movs	r3, #16
 8013b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b80:	2302      	movs	r3, #2
 8013b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b84:	2300      	movs	r3, #0
 8013b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b88:	2303      	movs	r3, #3
 8013b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013b8c:	230a      	movs	r3, #10
 8013b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8013b90:	f107 0314 	add.w	r3, r7, #20
 8013b94:	4619      	mov	r1, r3
 8013b96:	4825      	ldr	r0, [pc, #148]	; (8013c2c <HAL_HCD_MspInit+0xe4>)
 8013b98:	f7ef fb22 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8013b9c:	2305      	movs	r3, #5
 8013b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ba0:	2302      	movs	r3, #2
 8013ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ba8:	2303      	movs	r3, #3
 8013baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013bac:	230a      	movs	r3, #10
 8013bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013bb0:	f107 0314 	add.w	r3, r7, #20
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	481e      	ldr	r0, [pc, #120]	; (8013c30 <HAL_HCD_MspInit+0xe8>)
 8013bb8:	f7ef fb12 	bl	80031e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8013bbc:	2328      	movs	r3, #40	; 0x28
 8013bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bc0:	2302      	movs	r3, #2
 8013bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bc8:	2303      	movs	r3, #3
 8013bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013bcc:	230a      	movs	r3, #10
 8013bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013bd0:	f107 0314 	add.w	r3, r7, #20
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	4817      	ldr	r0, [pc, #92]	; (8013c34 <HAL_HCD_MspInit+0xec>)
 8013bd8:	f7ef fb02 	bl	80031e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013bdc:	4a16      	ldr	r2, [pc, #88]	; (8013c38 <HAL_HCD_MspInit+0xf0>)
 8013bde:	4b16      	ldr	r3, [pc, #88]	; (8013c38 <HAL_HCD_MspInit+0xf0>)
 8013be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013be2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013be6:	6313      	str	r3, [r2, #48]	; 0x30
 8013be8:	4b13      	ldr	r3, [pc, #76]	; (8013c38 <HAL_HCD_MspInit+0xf0>)
 8013bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013bf0:	613b      	str	r3, [r7, #16]
 8013bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8013bf4:	4a10      	ldr	r2, [pc, #64]	; (8013c38 <HAL_HCD_MspInit+0xf0>)
 8013bf6:	4b10      	ldr	r3, [pc, #64]	; (8013c38 <HAL_HCD_MspInit+0xf0>)
 8013bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8013c00:	4b0d      	ldr	r3, [pc, #52]	; (8013c38 <HAL_HCD_MspInit+0xf0>)
 8013c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013c08:	60fb      	str	r3, [r7, #12]
 8013c0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	2105      	movs	r1, #5
 8013c10:	204d      	movs	r0, #77	; 0x4d
 8013c12:	f7ee fc34 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013c16:	204d      	movs	r0, #77	; 0x4d
 8013c18:	f7ee fc4d 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013c1c:	bf00      	nop
 8013c1e:	3728      	adds	r7, #40	; 0x28
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	40040000 	.word	0x40040000
 8013c28:	40020400 	.word	0x40020400
 8013c2c:	40021c00 	.word	0x40021c00
 8013c30:	40020800 	.word	0x40020800
 8013c34:	40020000 	.word	0x40020000
 8013c38:	40023800 	.word	0x40023800

08013c3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7fb fa07 	bl	800f05e <USBH_LL_IncTimer>
}
 8013c50:	bf00      	nop
 8013c52:	3708      	adds	r7, #8
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7fb fa23 	bl	800f0b2 <USBH_LL_Connect>
}
 8013c6c:	bf00      	nop
 8013c6e:	3708      	adds	r7, #8
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7fb fa43 	bl	800f10e <USBH_LL_Disconnect>
}
 8013c88:	bf00      	nop
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b082      	sub	sp, #8
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	460b      	mov	r3, r1
 8013c9a:	70fb      	strb	r3, [r7, #3]
 8013c9c:	4613      	mov	r3, r2
 8013c9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7fb fa7b 	bl	800f1a2 <USBH_LL_NotifyURBChange>
#endif
}
 8013cac:	bf00      	nop
 8013cae:	3708      	adds	r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b082      	sub	sp, #8
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d132      	bne.n	8013d2c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8013cc6:	4a1c      	ldr	r2, [pc, #112]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  phost->pData = &hhcd_USB_OTG_HS;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	4a19      	ldr	r2, [pc, #100]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cd2:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013cd6:	4b18      	ldr	r3, [pc, #96]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cd8:	4a18      	ldr	r2, [pc, #96]	; (8013d3c <USBH_LL_Init+0x88>)
 8013cda:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8013cdc:	4b16      	ldr	r3, [pc, #88]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cde:	220c      	movs	r2, #12
 8013ce0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8013ce2:	4b15      	ldr	r3, [pc, #84]	; (8013d38 <USBH_LL_Init+0x84>)
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013ce8:	4b13      	ldr	r3, [pc, #76]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cea:	2200      	movs	r2, #0
 8013cec:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8013cee:	4b12      	ldr	r3, [pc, #72]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013cf4:	4b10      	ldr	r3, [pc, #64]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013cfa:	4b0f      	ldr	r3, [pc, #60]	; (8013d38 <USBH_LL_Init+0x84>)
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8013d00:	4b0d      	ldr	r3, [pc, #52]	; (8013d38 <USBH_LL_Init+0x84>)
 8013d02:	2201      	movs	r2, #1
 8013d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8013d06:	480c      	ldr	r0, [pc, #48]	; (8013d38 <USBH_LL_Init+0x84>)
 8013d08:	f7ef fc2d 	bl	8003566 <HAL_HCD_Init>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d004      	beq.n	8013d1c <USBH_LL_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8013d12:	f240 110d 	movw	r1, #269	; 0x10d
 8013d16:	480a      	ldr	r0, [pc, #40]	; (8013d40 <USBH_LL_Init+0x8c>)
 8013d18:	f7fe fb8c 	bl	8012434 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8013d1c:	4806      	ldr	r0, [pc, #24]	; (8013d38 <USBH_LL_Init+0x84>)
 8013d1e:	f7f0 f803 	bl	8003d28 <HAL_HCD_GetCurrentFrame>
 8013d22:	4603      	mov	r3, r0
 8013d24:	4619      	mov	r1, r3
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7fb f98a 	bl	800f040 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013d2c:	2300      	movs	r3, #0
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	3708      	adds	r7, #8
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	20005488 	.word	0x20005488
 8013d3c:	40040000 	.word	0x40040000
 8013d40:	08017580 	.word	0x08017580

08013d44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013d50:	2300      	movs	r3, #0
 8013d52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7ef ff6c 	bl	8003c38 <HAL_HCD_Start>
 8013d60:	4603      	mov	r3, r0
 8013d62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013d64:	7bbb      	ldrb	r3, [r7, #14]
 8013d66:	2b03      	cmp	r3, #3
 8013d68:	d816      	bhi.n	8013d98 <USBH_LL_Start+0x54>
 8013d6a:	a201      	add	r2, pc, #4	; (adr r2, 8013d70 <USBH_LL_Start+0x2c>)
 8013d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d70:	08013d81 	.word	0x08013d81
 8013d74:	08013d87 	.word	0x08013d87
 8013d78:	08013d8d 	.word	0x08013d8d
 8013d7c:	08013d93 	.word	0x08013d93
    case HAL_OK :
      usb_status = USBH_OK;
 8013d80:	2300      	movs	r3, #0
 8013d82:	73fb      	strb	r3, [r7, #15]
    break;
 8013d84:	e00b      	b.n	8013d9e <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013d86:	2302      	movs	r3, #2
 8013d88:	73fb      	strb	r3, [r7, #15]
    break;
 8013d8a:	e008      	b.n	8013d9e <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8013d90:	e005      	b.n	8013d9e <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013d92:	2302      	movs	r3, #2
 8013d94:	73fb      	strb	r3, [r7, #15]
    break;
 8013d96:	e002      	b.n	8013d9e <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 8013d98:	2302      	movs	r3, #2
 8013d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8013d9c:	bf00      	nop
  }
  return usb_status;
 8013d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3710      	adds	r7, #16
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b084      	sub	sp, #16
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013db0:	2300      	movs	r3, #0
 8013db2:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013db4:	2300      	movs	r3, #0
 8013db6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ef ff5d 	bl	8003c7e <HAL_HCD_Stop>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013dc8:	7bbb      	ldrb	r3, [r7, #14]
 8013dca:	2b03      	cmp	r3, #3
 8013dcc:	d816      	bhi.n	8013dfc <USBH_LL_Stop+0x54>
 8013dce:	a201      	add	r2, pc, #4	; (adr r2, 8013dd4 <USBH_LL_Stop+0x2c>)
 8013dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd4:	08013de5 	.word	0x08013de5
 8013dd8:	08013deb 	.word	0x08013deb
 8013ddc:	08013df1 	.word	0x08013df1
 8013de0:	08013df7 	.word	0x08013df7
    case HAL_OK :
      usb_status = USBH_OK;
 8013de4:	2300      	movs	r3, #0
 8013de6:	73fb      	strb	r3, [r7, #15]
    break;
 8013de8:	e00b      	b.n	8013e02 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013dea:	2302      	movs	r3, #2
 8013dec:	73fb      	strb	r3, [r7, #15]
    break;
 8013dee:	e008      	b.n	8013e02 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013df0:	2301      	movs	r3, #1
 8013df2:	73fb      	strb	r3, [r7, #15]
    break;
 8013df4:	e005      	b.n	8013e02 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013df6:	2302      	movs	r3, #2
 8013df8:	73fb      	strb	r3, [r7, #15]
    break;
 8013dfa:	e002      	b.n	8013e02 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 8013dfc:	2302      	movs	r3, #2
 8013dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8013e00:	bf00      	nop
  }
  return usb_status;
 8013e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b084      	sub	sp, #16
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8013e14:	2301      	movs	r3, #1
 8013e16:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7ef ff90 	bl	8003d44 <HAL_HCD_GetCurrentSpeed>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d007      	beq.n	8013e3a <USBH_LL_GetSpeed+0x2e>
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d302      	bcc.n	8013e34 <USBH_LL_GetSpeed+0x28>
 8013e2e:	2b02      	cmp	r3, #2
 8013e30:	d006      	beq.n	8013e40 <USBH_LL_GetSpeed+0x34>
 8013e32:	e008      	b.n	8013e46 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013e34:	2300      	movs	r3, #0
 8013e36:	73fb      	strb	r3, [r7, #15]
    break;
 8013e38:	e008      	b.n	8013e4c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8013e3e:	e005      	b.n	8013e4c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8013e40:	2302      	movs	r3, #2
 8013e42:	73fb      	strb	r3, [r7, #15]
    break;
 8013e44:	e002      	b.n	8013e4c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8013e46:	2301      	movs	r3, #1
 8013e48:	73fb      	strb	r3, [r7, #15]
    break;
 8013e4a:	bf00      	nop
  }
  return  speed;
 8013e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
	...

08013e58 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b084      	sub	sp, #16
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e60:	2300      	movs	r3, #0
 8013e62:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013e64:	2300      	movs	r3, #0
 8013e66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7ef ff22 	bl	8003cb8 <HAL_HCD_ResetPort>
 8013e74:	4603      	mov	r3, r0
 8013e76:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 8013e78:	7bbb      	ldrb	r3, [r7, #14]
 8013e7a:	2b03      	cmp	r3, #3
 8013e7c:	d816      	bhi.n	8013eac <USBH_LL_ResetPort+0x54>
 8013e7e:	a201      	add	r2, pc, #4	; (adr r2, 8013e84 <USBH_LL_ResetPort+0x2c>)
 8013e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e84:	08013e95 	.word	0x08013e95
 8013e88:	08013e9b 	.word	0x08013e9b
 8013e8c:	08013ea1 	.word	0x08013ea1
 8013e90:	08013ea7 	.word	0x08013ea7
    case HAL_OK :
      usb_status = USBH_OK;
 8013e94:	2300      	movs	r3, #0
 8013e96:	73fb      	strb	r3, [r7, #15]
    break;
 8013e98:	e00b      	b.n	8013eb2 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013e9a:	2302      	movs	r3, #2
 8013e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8013e9e:	e008      	b.n	8013eb2 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8013ea4:	e005      	b.n	8013eb2 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013ea6:	2302      	movs	r3, #2
 8013ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8013eaa:	e002      	b.n	8013eb2 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 8013eac:	2302      	movs	r3, #2
 8013eae:	73fb      	strb	r3, [r7, #15]
    break;
 8013eb0:	bf00      	nop
  }
  return usb_status;
 8013eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013ece:	78fa      	ldrb	r2, [r7, #3]
 8013ed0:	4611      	mov	r1, r2
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ef ff13 	bl	8003cfe <HAL_HCD_HC_GetXferCount>
 8013ed8:	4603      	mov	r3, r0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
	...

08013ee4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013ee4:	b590      	push	{r4, r7, lr}
 8013ee6:	b089      	sub	sp, #36	; 0x24
 8013ee8:	af04      	add	r7, sp, #16
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	4608      	mov	r0, r1
 8013eee:	4611      	mov	r1, r2
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	70fb      	strb	r3, [r7, #3]
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	70bb      	strb	r3, [r7, #2]
 8013efa:	4613      	mov	r3, r2
 8013efc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013efe:	2300      	movs	r3, #0
 8013f00:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f02:	2300      	movs	r3, #0
 8013f04:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 8013f0c:	787c      	ldrb	r4, [r7, #1]
 8013f0e:	78ba      	ldrb	r2, [r7, #2]
 8013f10:	78f9      	ldrb	r1, [r7, #3]
 8013f12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013f14:	9302      	str	r3, [sp, #8]
 8013f16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f1a:	9301      	str	r3, [sp, #4]
 8013f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f20:	9300      	str	r3, [sp, #0]
 8013f22:	4623      	mov	r3, r4
 8013f24:	f7ef fb6b 	bl	80035fe <HAL_HCD_HC_Init>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 8013f2c:	7bbb      	ldrb	r3, [r7, #14]
 8013f2e:	2b03      	cmp	r3, #3
 8013f30:	d816      	bhi.n	8013f60 <USBH_LL_OpenPipe+0x7c>
 8013f32:	a201      	add	r2, pc, #4	; (adr r2, 8013f38 <USBH_LL_OpenPipe+0x54>)
 8013f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f38:	08013f49 	.word	0x08013f49
 8013f3c:	08013f4f 	.word	0x08013f4f
 8013f40:	08013f55 	.word	0x08013f55
 8013f44:	08013f5b 	.word	0x08013f5b
    case HAL_OK :
      usb_status = USBH_OK;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8013f4c:	e00b      	b.n	8013f66 <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013f4e:	2302      	movs	r3, #2
 8013f50:	73fb      	strb	r3, [r7, #15]
    break;
 8013f52:	e008      	b.n	8013f66 <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013f54:	2301      	movs	r3, #1
 8013f56:	73fb      	strb	r3, [r7, #15]
    break;
 8013f58:	e005      	b.n	8013f66 <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013f5a:	2302      	movs	r3, #2
 8013f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8013f5e:	e002      	b.n	8013f66 <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 8013f60:	2302      	movs	r3, #2
 8013f62:	73fb      	strb	r3, [r7, #15]
    break;
 8013f64:	bf00      	nop
  }
  return usb_status;
 8013f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3714      	adds	r7, #20
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd90      	pop	{r4, r7, pc}

08013f70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b084      	sub	sp, #16
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	460b      	mov	r3, r1
 8013f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013f80:	2300      	movs	r3, #0
 8013f82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8013f8a:	78fa      	ldrb	r2, [r7, #3]
 8013f8c:	4611      	mov	r1, r2
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7ef fbc6 	bl	8003720 <HAL_HCD_HC_Halt>
 8013f94:	4603      	mov	r3, r0
 8013f96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013f98:	7bbb      	ldrb	r3, [r7, #14]
 8013f9a:	2b03      	cmp	r3, #3
 8013f9c:	d816      	bhi.n	8013fcc <USBH_LL_ClosePipe+0x5c>
 8013f9e:	a201      	add	r2, pc, #4	; (adr r2, 8013fa4 <USBH_LL_ClosePipe+0x34>)
 8013fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fa4:	08013fb5 	.word	0x08013fb5
 8013fa8:	08013fbb 	.word	0x08013fbb
 8013fac:	08013fc1 	.word	0x08013fc1
 8013fb0:	08013fc7 	.word	0x08013fc7
    case HAL_OK :
      usb_status = USBH_OK;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8013fb8:	e00b      	b.n	8013fd2 <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013fba:	2302      	movs	r3, #2
 8013fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8013fbe:	e008      	b.n	8013fd2 <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8013fc4:	e005      	b.n	8013fd2 <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013fc6:	2302      	movs	r3, #2
 8013fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8013fca:	e002      	b.n	8013fd2 <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 8013fcc:	2302      	movs	r3, #2
 8013fce:	73fb      	strb	r3, [r7, #15]
    break;
 8013fd0:	bf00      	nop
  }
  return usb_status;
 8013fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3710      	adds	r7, #16
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013fdc:	b590      	push	{r4, r7, lr}
 8013fde:	b089      	sub	sp, #36	; 0x24
 8013fe0:	af04      	add	r7, sp, #16
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	4608      	mov	r0, r1
 8013fe6:	4611      	mov	r1, r2
 8013fe8:	461a      	mov	r2, r3
 8013fea:	4603      	mov	r3, r0
 8013fec:	70fb      	strb	r3, [r7, #3]
 8013fee:	460b      	mov	r3, r1
 8013ff0:	70bb      	strb	r3, [r7, #2]
 8013ff2:	4613      	mov	r3, r2
 8013ff4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f8d3 03c0 	ldr.w	r0, [r3, #960]	; 0x3c0
 8014004:	787c      	ldrb	r4, [r7, #1]
 8014006:	78ba      	ldrb	r2, [r7, #2]
 8014008:	78f9      	ldrb	r1, [r7, #3]
 801400a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801400e:	9303      	str	r3, [sp, #12]
 8014010:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014012:	9302      	str	r3, [sp, #8]
 8014014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014016:	9301      	str	r3, [sp, #4]
 8014018:	f897 3020 	ldrb.w	r3, [r7, #32]
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	4623      	mov	r3, r4
 8014020:	f7ef fba2 	bl	8003768 <HAL_HCD_HC_SubmitRequest>
 8014024:	4603      	mov	r3, r0
 8014026:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8014028:	7bbb      	ldrb	r3, [r7, #14]
 801402a:	2b03      	cmp	r3, #3
 801402c:	d816      	bhi.n	801405c <USBH_LL_SubmitURB+0x80>
 801402e:	a201      	add	r2, pc, #4	; (adr r2, 8014034 <USBH_LL_SubmitURB+0x58>)
 8014030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014034:	08014045 	.word	0x08014045
 8014038:	0801404b 	.word	0x0801404b
 801403c:	08014051 	.word	0x08014051
 8014040:	08014057 	.word	0x08014057
    case HAL_OK :
      usb_status = USBH_OK;
 8014044:	2300      	movs	r3, #0
 8014046:	73fb      	strb	r3, [r7, #15]
    break;
 8014048:	e00b      	b.n	8014062 <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801404a:	2302      	movs	r3, #2
 801404c:	73fb      	strb	r3, [r7, #15]
    break;
 801404e:	e008      	b.n	8014062 <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014050:	2301      	movs	r3, #1
 8014052:	73fb      	strb	r3, [r7, #15]
    break;
 8014054:	e005      	b.n	8014062 <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014056:	2302      	movs	r3, #2
 8014058:	73fb      	strb	r3, [r7, #15]
    break;
 801405a:	e002      	b.n	8014062 <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 801405c:	2302      	movs	r3, #2
 801405e:	73fb      	strb	r3, [r7, #15]
    break;
 8014060:	bf00      	nop
  }
  return usb_status;
 8014062:	7bfb      	ldrb	r3, [r7, #15]
}
 8014064:	4618      	mov	r0, r3
 8014066:	3714      	adds	r7, #20
 8014068:	46bd      	mov	sp, r7
 801406a:	bd90      	pop	{r4, r7, pc}

0801406c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	460b      	mov	r3, r1
 8014076:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801407e:	78fa      	ldrb	r2, [r7, #3]
 8014080:	4611      	mov	r1, r2
 8014082:	4618      	mov	r0, r3
 8014084:	f7ef fe26 	bl	8003cd4 <HAL_HCD_HC_GetURBState>
 8014088:	4603      	mov	r3, r0
}
 801408a:	4618      	mov	r0, r3
 801408c:	3708      	adds	r7, #8
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}

08014092 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014092:	b580      	push	{r7, lr}
 8014094:	b082      	sub	sp, #8
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
 801409a:	460b      	mov	r3, r1
 801409c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 801409e:	20c8      	movs	r0, #200	; 0xc8
 80140a0:	f7ed fdd2 	bl	8001c48 <HAL_Delay>
  return USBH_OK;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3708      	adds	r7, #8
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}

080140ae <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80140ae:	b480      	push	{r7}
 80140b0:	b085      	sub	sp, #20
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
 80140b6:	460b      	mov	r3, r1
 80140b8:	70fb      	strb	r3, [r7, #3]
 80140ba:	4613      	mov	r3, r2
 80140bc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80140c4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80140c6:	78fa      	ldrb	r2, [r7, #3]
 80140c8:	68f9      	ldr	r1, [r7, #12]
 80140ca:	4613      	mov	r3, r2
 80140cc:	009b      	lsls	r3, r3, #2
 80140ce:	4413      	add	r3, r2
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	440b      	add	r3, r1
 80140d4:	333b      	adds	r3, #59	; 0x3b
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d00a      	beq.n	80140f2 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80140dc:	78fa      	ldrb	r2, [r7, #3]
 80140de:	68f9      	ldr	r1, [r7, #12]
 80140e0:	4613      	mov	r3, r2
 80140e2:	009b      	lsls	r3, r3, #2
 80140e4:	4413      	add	r3, r2
 80140e6:	00db      	lsls	r3, r3, #3
 80140e8:	440b      	add	r3, r1
 80140ea:	3350      	adds	r3, #80	; 0x50
 80140ec:	78ba      	ldrb	r2, [r7, #2]
 80140ee:	701a      	strb	r2, [r3, #0]
 80140f0:	e009      	b.n	8014106 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80140f2:	78fa      	ldrb	r2, [r7, #3]
 80140f4:	68f9      	ldr	r1, [r7, #12]
 80140f6:	4613      	mov	r3, r2
 80140f8:	009b      	lsls	r3, r3, #2
 80140fa:	4413      	add	r3, r2
 80140fc:	00db      	lsls	r3, r3, #3
 80140fe:	440b      	add	r3, r1
 8014100:	3351      	adds	r3, #81	; 0x51
 8014102:	78ba      	ldrb	r2, [r7, #2]
 8014104:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8014106:	2300      	movs	r3, #0
}
 8014108:	4618      	mov	r0, r3
 801410a:	3714      	adds	r7, #20
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr

08014114 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014114:	b480      	push	{r7}
 8014116:	b085      	sub	sp, #20
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	460b      	mov	r3, r1
 801411e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8014120:	2300      	movs	r3, #0
 8014122:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 801412a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801412c:	78fa      	ldrb	r2, [r7, #3]
 801412e:	68b9      	ldr	r1, [r7, #8]
 8014130:	4613      	mov	r3, r2
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	4413      	add	r3, r2
 8014136:	00db      	lsls	r3, r3, #3
 8014138:	440b      	add	r3, r1
 801413a:	333b      	adds	r3, #59	; 0x3b
 801413c:	781b      	ldrb	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d00a      	beq.n	8014158 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8014142:	78fa      	ldrb	r2, [r7, #3]
 8014144:	68b9      	ldr	r1, [r7, #8]
 8014146:	4613      	mov	r3, r2
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	4413      	add	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	440b      	add	r3, r1
 8014150:	3350      	adds	r3, #80	; 0x50
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	73fb      	strb	r3, [r7, #15]
 8014156:	e009      	b.n	801416c <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8014158:	78fa      	ldrb	r2, [r7, #3]
 801415a:	68b9      	ldr	r1, [r7, #8]
 801415c:	4613      	mov	r3, r2
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	4413      	add	r3, r2
 8014162:	00db      	lsls	r3, r3, #3
 8014164:	440b      	add	r3, r1
 8014166:	3351      	adds	r3, #81	; 0x51
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801416c:	7bfb      	ldrb	r3, [r7, #15]
}
 801416e:	4618      	mov	r0, r3
 8014170:	3714      	adds	r7, #20
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr

0801417a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801417a:	b580      	push	{r7, lr}
 801417c:	b082      	sub	sp, #8
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f7ed fd60 	bl	8001c48 <HAL_Delay>
}
 8014188:	bf00      	nop
 801418a:	3708      	adds	r7, #8
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8014190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80141c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014196:	e003      	b.n	80141a0 <LoopCopyDataInit>

08014198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014198:	4b0c      	ldr	r3, [pc, #48]	; (80141cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801419a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801419c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801419e:	3104      	adds	r1, #4

080141a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80141a0:	480b      	ldr	r0, [pc, #44]	; (80141d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80141a2:	4b0c      	ldr	r3, [pc, #48]	; (80141d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80141a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80141a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80141a8:	d3f6      	bcc.n	8014198 <CopyDataInit>
  ldr  r2, =_sbss
 80141aa:	4a0b      	ldr	r2, [pc, #44]	; (80141d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80141ac:	e002      	b.n	80141b4 <LoopFillZerobss>

080141ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80141ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80141b0:	f842 3b04 	str.w	r3, [r2], #4

080141b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80141b4:	4b09      	ldr	r3, [pc, #36]	; (80141dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80141b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80141b8:	d3f9      	bcc.n	80141ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80141ba:	f7ff fc4b 	bl	8013a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80141be:	f000 f811 	bl	80141e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80141c2:	f7fd fd39 	bl	8011c38 <main>
  bx  lr    
 80141c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80141c8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80141cc:	0801a2c8 	.word	0x0801a2c8
  ldr  r0, =_sdata
 80141d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80141d4:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80141d8:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80141dc:	20005724 	.word	0x20005724

080141e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80141e0:	e7fe      	b.n	80141e0 <ADC_IRQHandler>
	...

080141e4 <__libc_init_array>:
 80141e4:	b570      	push	{r4, r5, r6, lr}
 80141e6:	4e0d      	ldr	r6, [pc, #52]	; (801421c <__libc_init_array+0x38>)
 80141e8:	4c0d      	ldr	r4, [pc, #52]	; (8014220 <__libc_init_array+0x3c>)
 80141ea:	1ba4      	subs	r4, r4, r6
 80141ec:	10a4      	asrs	r4, r4, #2
 80141ee:	2500      	movs	r5, #0
 80141f0:	42a5      	cmp	r5, r4
 80141f2:	d109      	bne.n	8014208 <__libc_init_array+0x24>
 80141f4:	4e0b      	ldr	r6, [pc, #44]	; (8014224 <__libc_init_array+0x40>)
 80141f6:	4c0c      	ldr	r4, [pc, #48]	; (8014228 <__libc_init_array+0x44>)
 80141f8:	f002 feb2 	bl	8016f60 <_init>
 80141fc:	1ba4      	subs	r4, r4, r6
 80141fe:	10a4      	asrs	r4, r4, #2
 8014200:	2500      	movs	r5, #0
 8014202:	42a5      	cmp	r5, r4
 8014204:	d105      	bne.n	8014212 <__libc_init_array+0x2e>
 8014206:	bd70      	pop	{r4, r5, r6, pc}
 8014208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801420c:	4798      	blx	r3
 801420e:	3501      	adds	r5, #1
 8014210:	e7ee      	b.n	80141f0 <__libc_init_array+0xc>
 8014212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014216:	4798      	blx	r3
 8014218:	3501      	adds	r5, #1
 801421a:	e7f2      	b.n	8014202 <__libc_init_array+0x1e>
 801421c:	0801a2c0 	.word	0x0801a2c0
 8014220:	0801a2c0 	.word	0x0801a2c0
 8014224:	0801a2c0 	.word	0x0801a2c0
 8014228:	0801a2c4 	.word	0x0801a2c4

0801422c <__locale_ctype_ptr_l>:
 801422c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014230:	4770      	bx	lr
	...

08014234 <__locale_ctype_ptr>:
 8014234:	4b04      	ldr	r3, [pc, #16]	; (8014248 <__locale_ctype_ptr+0x14>)
 8014236:	4a05      	ldr	r2, [pc, #20]	; (801424c <__locale_ctype_ptr+0x18>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	6a1b      	ldr	r3, [r3, #32]
 801423c:	2b00      	cmp	r3, #0
 801423e:	bf08      	it	eq
 8014240:	4613      	moveq	r3, r2
 8014242:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8014246:	4770      	bx	lr
 8014248:	200001ac 	.word	0x200001ac
 801424c:	20000040 	.word	0x20000040

08014250 <__ascii_mbtowc>:
 8014250:	b082      	sub	sp, #8
 8014252:	b901      	cbnz	r1, 8014256 <__ascii_mbtowc+0x6>
 8014254:	a901      	add	r1, sp, #4
 8014256:	b142      	cbz	r2, 801426a <__ascii_mbtowc+0x1a>
 8014258:	b14b      	cbz	r3, 801426e <__ascii_mbtowc+0x1e>
 801425a:	7813      	ldrb	r3, [r2, #0]
 801425c:	600b      	str	r3, [r1, #0]
 801425e:	7812      	ldrb	r2, [r2, #0]
 8014260:	1c10      	adds	r0, r2, #0
 8014262:	bf18      	it	ne
 8014264:	2001      	movne	r0, #1
 8014266:	b002      	add	sp, #8
 8014268:	4770      	bx	lr
 801426a:	4610      	mov	r0, r2
 801426c:	e7fb      	b.n	8014266 <__ascii_mbtowc+0x16>
 801426e:	f06f 0001 	mvn.w	r0, #1
 8014272:	e7f8      	b.n	8014266 <__ascii_mbtowc+0x16>

08014274 <memcpy>:
 8014274:	b510      	push	{r4, lr}
 8014276:	1e43      	subs	r3, r0, #1
 8014278:	440a      	add	r2, r1
 801427a:	4291      	cmp	r1, r2
 801427c:	d100      	bne.n	8014280 <memcpy+0xc>
 801427e:	bd10      	pop	{r4, pc}
 8014280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014288:	e7f7      	b.n	801427a <memcpy+0x6>

0801428a <memset>:
 801428a:	4402      	add	r2, r0
 801428c:	4603      	mov	r3, r0
 801428e:	4293      	cmp	r3, r2
 8014290:	d100      	bne.n	8014294 <memset+0xa>
 8014292:	4770      	bx	lr
 8014294:	f803 1b01 	strb.w	r1, [r3], #1
 8014298:	e7f9      	b.n	801428e <memset+0x4>

0801429a <__cvt>:
 801429a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801429e:	ec55 4b10 	vmov	r4, r5, d0
 80142a2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80142a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80142a8:	2d00      	cmp	r5, #0
 80142aa:	460e      	mov	r6, r1
 80142ac:	4691      	mov	r9, r2
 80142ae:	4619      	mov	r1, r3
 80142b0:	bfb8      	it	lt
 80142b2:	4622      	movlt	r2, r4
 80142b4:	462b      	mov	r3, r5
 80142b6:	f027 0720 	bic.w	r7, r7, #32
 80142ba:	bfbb      	ittet	lt
 80142bc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80142c0:	461d      	movlt	r5, r3
 80142c2:	2300      	movge	r3, #0
 80142c4:	232d      	movlt	r3, #45	; 0x2d
 80142c6:	bfb8      	it	lt
 80142c8:	4614      	movlt	r4, r2
 80142ca:	2f46      	cmp	r7, #70	; 0x46
 80142cc:	700b      	strb	r3, [r1, #0]
 80142ce:	d004      	beq.n	80142da <__cvt+0x40>
 80142d0:	2f45      	cmp	r7, #69	; 0x45
 80142d2:	d100      	bne.n	80142d6 <__cvt+0x3c>
 80142d4:	3601      	adds	r6, #1
 80142d6:	2102      	movs	r1, #2
 80142d8:	e000      	b.n	80142dc <__cvt+0x42>
 80142da:	2103      	movs	r1, #3
 80142dc:	ab03      	add	r3, sp, #12
 80142de:	9301      	str	r3, [sp, #4]
 80142e0:	ab02      	add	r3, sp, #8
 80142e2:	9300      	str	r3, [sp, #0]
 80142e4:	4632      	mov	r2, r6
 80142e6:	4653      	mov	r3, sl
 80142e8:	ec45 4b10 	vmov	d0, r4, r5
 80142ec:	f000 ff2c 	bl	8015148 <_dtoa_r>
 80142f0:	2f47      	cmp	r7, #71	; 0x47
 80142f2:	4680      	mov	r8, r0
 80142f4:	d102      	bne.n	80142fc <__cvt+0x62>
 80142f6:	f019 0f01 	tst.w	r9, #1
 80142fa:	d026      	beq.n	801434a <__cvt+0xb0>
 80142fc:	2f46      	cmp	r7, #70	; 0x46
 80142fe:	eb08 0906 	add.w	r9, r8, r6
 8014302:	d111      	bne.n	8014328 <__cvt+0x8e>
 8014304:	f898 3000 	ldrb.w	r3, [r8]
 8014308:	2b30      	cmp	r3, #48	; 0x30
 801430a:	d10a      	bne.n	8014322 <__cvt+0x88>
 801430c:	2200      	movs	r2, #0
 801430e:	2300      	movs	r3, #0
 8014310:	4620      	mov	r0, r4
 8014312:	4629      	mov	r1, r5
 8014314:	f7ec fc04 	bl	8000b20 <__aeabi_dcmpeq>
 8014318:	b918      	cbnz	r0, 8014322 <__cvt+0x88>
 801431a:	f1c6 0601 	rsb	r6, r6, #1
 801431e:	f8ca 6000 	str.w	r6, [sl]
 8014322:	f8da 3000 	ldr.w	r3, [sl]
 8014326:	4499      	add	r9, r3
 8014328:	2200      	movs	r2, #0
 801432a:	2300      	movs	r3, #0
 801432c:	4620      	mov	r0, r4
 801432e:	4629      	mov	r1, r5
 8014330:	f7ec fbf6 	bl	8000b20 <__aeabi_dcmpeq>
 8014334:	b938      	cbnz	r0, 8014346 <__cvt+0xac>
 8014336:	2230      	movs	r2, #48	; 0x30
 8014338:	9b03      	ldr	r3, [sp, #12]
 801433a:	4599      	cmp	r9, r3
 801433c:	d905      	bls.n	801434a <__cvt+0xb0>
 801433e:	1c59      	adds	r1, r3, #1
 8014340:	9103      	str	r1, [sp, #12]
 8014342:	701a      	strb	r2, [r3, #0]
 8014344:	e7f8      	b.n	8014338 <__cvt+0x9e>
 8014346:	f8cd 900c 	str.w	r9, [sp, #12]
 801434a:	9b03      	ldr	r3, [sp, #12]
 801434c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801434e:	eba3 0308 	sub.w	r3, r3, r8
 8014352:	4640      	mov	r0, r8
 8014354:	6013      	str	r3, [r2, #0]
 8014356:	b004      	add	sp, #16
 8014358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801435c <__exponent>:
 801435c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801435e:	4603      	mov	r3, r0
 8014360:	2900      	cmp	r1, #0
 8014362:	bfb8      	it	lt
 8014364:	4249      	neglt	r1, r1
 8014366:	f803 2b02 	strb.w	r2, [r3], #2
 801436a:	bfb4      	ite	lt
 801436c:	222d      	movlt	r2, #45	; 0x2d
 801436e:	222b      	movge	r2, #43	; 0x2b
 8014370:	2909      	cmp	r1, #9
 8014372:	7042      	strb	r2, [r0, #1]
 8014374:	dd20      	ble.n	80143b8 <__exponent+0x5c>
 8014376:	f10d 0207 	add.w	r2, sp, #7
 801437a:	4617      	mov	r7, r2
 801437c:	260a      	movs	r6, #10
 801437e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014382:	fb06 1115 	mls	r1, r6, r5, r1
 8014386:	3130      	adds	r1, #48	; 0x30
 8014388:	2d09      	cmp	r5, #9
 801438a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801438e:	f102 34ff 	add.w	r4, r2, #4294967295
 8014392:	4629      	mov	r1, r5
 8014394:	dc09      	bgt.n	80143aa <__exponent+0x4e>
 8014396:	3130      	adds	r1, #48	; 0x30
 8014398:	3a02      	subs	r2, #2
 801439a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801439e:	42ba      	cmp	r2, r7
 80143a0:	461c      	mov	r4, r3
 80143a2:	d304      	bcc.n	80143ae <__exponent+0x52>
 80143a4:	1a20      	subs	r0, r4, r0
 80143a6:	b003      	add	sp, #12
 80143a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143aa:	4622      	mov	r2, r4
 80143ac:	e7e7      	b.n	801437e <__exponent+0x22>
 80143ae:	f812 1b01 	ldrb.w	r1, [r2], #1
 80143b2:	f803 1b01 	strb.w	r1, [r3], #1
 80143b6:	e7f2      	b.n	801439e <__exponent+0x42>
 80143b8:	2230      	movs	r2, #48	; 0x30
 80143ba:	461c      	mov	r4, r3
 80143bc:	4411      	add	r1, r2
 80143be:	f804 2b02 	strb.w	r2, [r4], #2
 80143c2:	7059      	strb	r1, [r3, #1]
 80143c4:	e7ee      	b.n	80143a4 <__exponent+0x48>
	...

080143c8 <_printf_float>:
 80143c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143cc:	b08d      	sub	sp, #52	; 0x34
 80143ce:	460c      	mov	r4, r1
 80143d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80143d4:	4616      	mov	r6, r2
 80143d6:	461f      	mov	r7, r3
 80143d8:	4605      	mov	r5, r0
 80143da:	f001 fdff 	bl	8015fdc <_localeconv_r>
 80143de:	6803      	ldr	r3, [r0, #0]
 80143e0:	9304      	str	r3, [sp, #16]
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7eb ff1e 	bl	8000224 <strlen>
 80143e8:	2300      	movs	r3, #0
 80143ea:	930a      	str	r3, [sp, #40]	; 0x28
 80143ec:	f8d8 3000 	ldr.w	r3, [r8]
 80143f0:	9005      	str	r0, [sp, #20]
 80143f2:	3307      	adds	r3, #7
 80143f4:	f023 0307 	bic.w	r3, r3, #7
 80143f8:	f103 0208 	add.w	r2, r3, #8
 80143fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014400:	f8d4 b000 	ldr.w	fp, [r4]
 8014404:	f8c8 2000 	str.w	r2, [r8]
 8014408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801440c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014410:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014414:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014418:	9307      	str	r3, [sp, #28]
 801441a:	f8cd 8018 	str.w	r8, [sp, #24]
 801441e:	f04f 32ff 	mov.w	r2, #4294967295
 8014422:	4ba5      	ldr	r3, [pc, #660]	; (80146b8 <_printf_float+0x2f0>)
 8014424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014428:	f7ec fbac 	bl	8000b84 <__aeabi_dcmpun>
 801442c:	2800      	cmp	r0, #0
 801442e:	f040 81fb 	bne.w	8014828 <_printf_float+0x460>
 8014432:	f04f 32ff 	mov.w	r2, #4294967295
 8014436:	4ba0      	ldr	r3, [pc, #640]	; (80146b8 <_printf_float+0x2f0>)
 8014438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801443c:	f7ec fb84 	bl	8000b48 <__aeabi_dcmple>
 8014440:	2800      	cmp	r0, #0
 8014442:	f040 81f1 	bne.w	8014828 <_printf_float+0x460>
 8014446:	2200      	movs	r2, #0
 8014448:	2300      	movs	r3, #0
 801444a:	4640      	mov	r0, r8
 801444c:	4649      	mov	r1, r9
 801444e:	f7ec fb71 	bl	8000b34 <__aeabi_dcmplt>
 8014452:	b110      	cbz	r0, 801445a <_printf_float+0x92>
 8014454:	232d      	movs	r3, #45	; 0x2d
 8014456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801445a:	4b98      	ldr	r3, [pc, #608]	; (80146bc <_printf_float+0x2f4>)
 801445c:	4a98      	ldr	r2, [pc, #608]	; (80146c0 <_printf_float+0x2f8>)
 801445e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014462:	bf8c      	ite	hi
 8014464:	4690      	movhi	r8, r2
 8014466:	4698      	movls	r8, r3
 8014468:	2303      	movs	r3, #3
 801446a:	f02b 0204 	bic.w	r2, fp, #4
 801446e:	6123      	str	r3, [r4, #16]
 8014470:	6022      	str	r2, [r4, #0]
 8014472:	f04f 0900 	mov.w	r9, #0
 8014476:	9700      	str	r7, [sp, #0]
 8014478:	4633      	mov	r3, r6
 801447a:	aa0b      	add	r2, sp, #44	; 0x2c
 801447c:	4621      	mov	r1, r4
 801447e:	4628      	mov	r0, r5
 8014480:	f000 f9e2 	bl	8014848 <_printf_common>
 8014484:	3001      	adds	r0, #1
 8014486:	f040 8093 	bne.w	80145b0 <_printf_float+0x1e8>
 801448a:	f04f 30ff 	mov.w	r0, #4294967295
 801448e:	b00d      	add	sp, #52	; 0x34
 8014490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014494:	6861      	ldr	r1, [r4, #4]
 8014496:	1c4b      	adds	r3, r1, #1
 8014498:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801449c:	d13f      	bne.n	801451e <_printf_float+0x156>
 801449e:	2306      	movs	r3, #6
 80144a0:	6063      	str	r3, [r4, #4]
 80144a2:	2300      	movs	r3, #0
 80144a4:	9303      	str	r3, [sp, #12]
 80144a6:	ab0a      	add	r3, sp, #40	; 0x28
 80144a8:	9302      	str	r3, [sp, #8]
 80144aa:	ab09      	add	r3, sp, #36	; 0x24
 80144ac:	9300      	str	r3, [sp, #0]
 80144ae:	ec49 8b10 	vmov	d0, r8, r9
 80144b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80144b6:	6022      	str	r2, [r4, #0]
 80144b8:	f8cd a004 	str.w	sl, [sp, #4]
 80144bc:	6861      	ldr	r1, [r4, #4]
 80144be:	4628      	mov	r0, r5
 80144c0:	f7ff feeb 	bl	801429a <__cvt>
 80144c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80144c8:	2b47      	cmp	r3, #71	; 0x47
 80144ca:	4680      	mov	r8, r0
 80144cc:	d109      	bne.n	80144e2 <_printf_float+0x11a>
 80144ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d0:	1cd8      	adds	r0, r3, #3
 80144d2:	db02      	blt.n	80144da <_printf_float+0x112>
 80144d4:	6862      	ldr	r2, [r4, #4]
 80144d6:	4293      	cmp	r3, r2
 80144d8:	dd57      	ble.n	801458a <_printf_float+0x1c2>
 80144da:	f1aa 0a02 	sub.w	sl, sl, #2
 80144de:	fa5f fa8a 	uxtb.w	sl, sl
 80144e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80144e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144e8:	d834      	bhi.n	8014554 <_printf_float+0x18c>
 80144ea:	3901      	subs	r1, #1
 80144ec:	4652      	mov	r2, sl
 80144ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80144f2:	9109      	str	r1, [sp, #36]	; 0x24
 80144f4:	f7ff ff32 	bl	801435c <__exponent>
 80144f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144fa:	1883      	adds	r3, r0, r2
 80144fc:	2a01      	cmp	r2, #1
 80144fe:	4681      	mov	r9, r0
 8014500:	6123      	str	r3, [r4, #16]
 8014502:	dc02      	bgt.n	801450a <_printf_float+0x142>
 8014504:	6822      	ldr	r2, [r4, #0]
 8014506:	07d1      	lsls	r1, r2, #31
 8014508:	d501      	bpl.n	801450e <_printf_float+0x146>
 801450a:	3301      	adds	r3, #1
 801450c:	6123      	str	r3, [r4, #16]
 801450e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014512:	2b00      	cmp	r3, #0
 8014514:	d0af      	beq.n	8014476 <_printf_float+0xae>
 8014516:	232d      	movs	r3, #45	; 0x2d
 8014518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801451c:	e7ab      	b.n	8014476 <_printf_float+0xae>
 801451e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014522:	d002      	beq.n	801452a <_printf_float+0x162>
 8014524:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014528:	d1bb      	bne.n	80144a2 <_printf_float+0xda>
 801452a:	b189      	cbz	r1, 8014550 <_printf_float+0x188>
 801452c:	2300      	movs	r3, #0
 801452e:	9303      	str	r3, [sp, #12]
 8014530:	ab0a      	add	r3, sp, #40	; 0x28
 8014532:	9302      	str	r3, [sp, #8]
 8014534:	ab09      	add	r3, sp, #36	; 0x24
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	ec49 8b10 	vmov	d0, r8, r9
 801453c:	6022      	str	r2, [r4, #0]
 801453e:	f8cd a004 	str.w	sl, [sp, #4]
 8014542:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014546:	4628      	mov	r0, r5
 8014548:	f7ff fea7 	bl	801429a <__cvt>
 801454c:	4680      	mov	r8, r0
 801454e:	e7be      	b.n	80144ce <_printf_float+0x106>
 8014550:	2301      	movs	r3, #1
 8014552:	e7a5      	b.n	80144a0 <_printf_float+0xd8>
 8014554:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014558:	d119      	bne.n	801458e <_printf_float+0x1c6>
 801455a:	2900      	cmp	r1, #0
 801455c:	6863      	ldr	r3, [r4, #4]
 801455e:	dd0c      	ble.n	801457a <_printf_float+0x1b2>
 8014560:	6121      	str	r1, [r4, #16]
 8014562:	b913      	cbnz	r3, 801456a <_printf_float+0x1a2>
 8014564:	6822      	ldr	r2, [r4, #0]
 8014566:	07d2      	lsls	r2, r2, #31
 8014568:	d502      	bpl.n	8014570 <_printf_float+0x1a8>
 801456a:	3301      	adds	r3, #1
 801456c:	440b      	add	r3, r1
 801456e:	6123      	str	r3, [r4, #16]
 8014570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014572:	65a3      	str	r3, [r4, #88]	; 0x58
 8014574:	f04f 0900 	mov.w	r9, #0
 8014578:	e7c9      	b.n	801450e <_printf_float+0x146>
 801457a:	b913      	cbnz	r3, 8014582 <_printf_float+0x1ba>
 801457c:	6822      	ldr	r2, [r4, #0]
 801457e:	07d0      	lsls	r0, r2, #31
 8014580:	d501      	bpl.n	8014586 <_printf_float+0x1be>
 8014582:	3302      	adds	r3, #2
 8014584:	e7f3      	b.n	801456e <_printf_float+0x1a6>
 8014586:	2301      	movs	r3, #1
 8014588:	e7f1      	b.n	801456e <_printf_float+0x1a6>
 801458a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801458e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014592:	4293      	cmp	r3, r2
 8014594:	db05      	blt.n	80145a2 <_printf_float+0x1da>
 8014596:	6822      	ldr	r2, [r4, #0]
 8014598:	6123      	str	r3, [r4, #16]
 801459a:	07d1      	lsls	r1, r2, #31
 801459c:	d5e8      	bpl.n	8014570 <_printf_float+0x1a8>
 801459e:	3301      	adds	r3, #1
 80145a0:	e7e5      	b.n	801456e <_printf_float+0x1a6>
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	bfd4      	ite	le
 80145a6:	f1c3 0302 	rsble	r3, r3, #2
 80145aa:	2301      	movgt	r3, #1
 80145ac:	4413      	add	r3, r2
 80145ae:	e7de      	b.n	801456e <_printf_float+0x1a6>
 80145b0:	6823      	ldr	r3, [r4, #0]
 80145b2:	055a      	lsls	r2, r3, #21
 80145b4:	d407      	bmi.n	80145c6 <_printf_float+0x1fe>
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	4642      	mov	r2, r8
 80145ba:	4631      	mov	r1, r6
 80145bc:	4628      	mov	r0, r5
 80145be:	47b8      	blx	r7
 80145c0:	3001      	adds	r0, #1
 80145c2:	d12b      	bne.n	801461c <_printf_float+0x254>
 80145c4:	e761      	b.n	801448a <_printf_float+0xc2>
 80145c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80145ca:	f240 80e2 	bls.w	8014792 <_printf_float+0x3ca>
 80145ce:	2200      	movs	r2, #0
 80145d0:	2300      	movs	r3, #0
 80145d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80145d6:	f7ec faa3 	bl	8000b20 <__aeabi_dcmpeq>
 80145da:	2800      	cmp	r0, #0
 80145dc:	d03c      	beq.n	8014658 <_printf_float+0x290>
 80145de:	2301      	movs	r3, #1
 80145e0:	4a38      	ldr	r2, [pc, #224]	; (80146c4 <_printf_float+0x2fc>)
 80145e2:	4631      	mov	r1, r6
 80145e4:	4628      	mov	r0, r5
 80145e6:	47b8      	blx	r7
 80145e8:	3001      	adds	r0, #1
 80145ea:	f43f af4e 	beq.w	801448a <_printf_float+0xc2>
 80145ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145f2:	429a      	cmp	r2, r3
 80145f4:	db02      	blt.n	80145fc <_printf_float+0x234>
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	07d8      	lsls	r0, r3, #31
 80145fa:	d50f      	bpl.n	801461c <_printf_float+0x254>
 80145fc:	9b05      	ldr	r3, [sp, #20]
 80145fe:	9a04      	ldr	r2, [sp, #16]
 8014600:	4631      	mov	r1, r6
 8014602:	4628      	mov	r0, r5
 8014604:	47b8      	blx	r7
 8014606:	3001      	adds	r0, #1
 8014608:	f43f af3f 	beq.w	801448a <_printf_float+0xc2>
 801460c:	f04f 0800 	mov.w	r8, #0
 8014610:	f104 091a 	add.w	r9, r4, #26
 8014614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014616:	3b01      	subs	r3, #1
 8014618:	4598      	cmp	r8, r3
 801461a:	db12      	blt.n	8014642 <_printf_float+0x27a>
 801461c:	6823      	ldr	r3, [r4, #0]
 801461e:	079b      	lsls	r3, r3, #30
 8014620:	d509      	bpl.n	8014636 <_printf_float+0x26e>
 8014622:	f04f 0800 	mov.w	r8, #0
 8014626:	f104 0919 	add.w	r9, r4, #25
 801462a:	68e3      	ldr	r3, [r4, #12]
 801462c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801462e:	1a9b      	subs	r3, r3, r2
 8014630:	4598      	cmp	r8, r3
 8014632:	f2c0 80ee 	blt.w	8014812 <_printf_float+0x44a>
 8014636:	68e0      	ldr	r0, [r4, #12]
 8014638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801463a:	4298      	cmp	r0, r3
 801463c:	bfb8      	it	lt
 801463e:	4618      	movlt	r0, r3
 8014640:	e725      	b.n	801448e <_printf_float+0xc6>
 8014642:	2301      	movs	r3, #1
 8014644:	464a      	mov	r2, r9
 8014646:	4631      	mov	r1, r6
 8014648:	4628      	mov	r0, r5
 801464a:	47b8      	blx	r7
 801464c:	3001      	adds	r0, #1
 801464e:	f43f af1c 	beq.w	801448a <_printf_float+0xc2>
 8014652:	f108 0801 	add.w	r8, r8, #1
 8014656:	e7dd      	b.n	8014614 <_printf_float+0x24c>
 8014658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801465a:	2b00      	cmp	r3, #0
 801465c:	dc34      	bgt.n	80146c8 <_printf_float+0x300>
 801465e:	2301      	movs	r3, #1
 8014660:	4a18      	ldr	r2, [pc, #96]	; (80146c4 <_printf_float+0x2fc>)
 8014662:	4631      	mov	r1, r6
 8014664:	4628      	mov	r0, r5
 8014666:	47b8      	blx	r7
 8014668:	3001      	adds	r0, #1
 801466a:	f43f af0e 	beq.w	801448a <_printf_float+0xc2>
 801466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014670:	b923      	cbnz	r3, 801467c <_printf_float+0x2b4>
 8014672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014674:	b913      	cbnz	r3, 801467c <_printf_float+0x2b4>
 8014676:	6823      	ldr	r3, [r4, #0]
 8014678:	07d9      	lsls	r1, r3, #31
 801467a:	d5cf      	bpl.n	801461c <_printf_float+0x254>
 801467c:	9b05      	ldr	r3, [sp, #20]
 801467e:	9a04      	ldr	r2, [sp, #16]
 8014680:	4631      	mov	r1, r6
 8014682:	4628      	mov	r0, r5
 8014684:	47b8      	blx	r7
 8014686:	3001      	adds	r0, #1
 8014688:	f43f aeff 	beq.w	801448a <_printf_float+0xc2>
 801468c:	f04f 0900 	mov.w	r9, #0
 8014690:	f104 0a1a 	add.w	sl, r4, #26
 8014694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014696:	425b      	negs	r3, r3
 8014698:	4599      	cmp	r9, r3
 801469a:	db01      	blt.n	80146a0 <_printf_float+0x2d8>
 801469c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801469e:	e78b      	b.n	80145b8 <_printf_float+0x1f0>
 80146a0:	2301      	movs	r3, #1
 80146a2:	4652      	mov	r2, sl
 80146a4:	4631      	mov	r1, r6
 80146a6:	4628      	mov	r0, r5
 80146a8:	47b8      	blx	r7
 80146aa:	3001      	adds	r0, #1
 80146ac:	f43f aeed 	beq.w	801448a <_printf_float+0xc2>
 80146b0:	f109 0901 	add.w	r9, r9, #1
 80146b4:	e7ee      	b.n	8014694 <_printf_float+0x2cc>
 80146b6:	bf00      	nop
 80146b8:	7fefffff 	.word	0x7fefffff
 80146bc:	0801a002 	.word	0x0801a002
 80146c0:	0801a006 	.word	0x0801a006
 80146c4:	0801a012 	.word	0x0801a012
 80146c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80146cc:	429a      	cmp	r2, r3
 80146ce:	bfa8      	it	ge
 80146d0:	461a      	movge	r2, r3
 80146d2:	2a00      	cmp	r2, #0
 80146d4:	4691      	mov	r9, r2
 80146d6:	dc38      	bgt.n	801474a <_printf_float+0x382>
 80146d8:	f104 031a 	add.w	r3, r4, #26
 80146dc:	f04f 0b00 	mov.w	fp, #0
 80146e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80146e4:	9306      	str	r3, [sp, #24]
 80146e6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80146ea:	ebaa 0309 	sub.w	r3, sl, r9
 80146ee:	459b      	cmp	fp, r3
 80146f0:	db33      	blt.n	801475a <_printf_float+0x392>
 80146f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146f6:	429a      	cmp	r2, r3
 80146f8:	db3a      	blt.n	8014770 <_printf_float+0x3a8>
 80146fa:	6823      	ldr	r3, [r4, #0]
 80146fc:	07da      	lsls	r2, r3, #31
 80146fe:	d437      	bmi.n	8014770 <_printf_float+0x3a8>
 8014700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014704:	eba3 020a 	sub.w	r2, r3, sl
 8014708:	eba3 0901 	sub.w	r9, r3, r1
 801470c:	4591      	cmp	r9, r2
 801470e:	bfa8      	it	ge
 8014710:	4691      	movge	r9, r2
 8014712:	f1b9 0f00 	cmp.w	r9, #0
 8014716:	dc33      	bgt.n	8014780 <_printf_float+0x3b8>
 8014718:	f04f 0800 	mov.w	r8, #0
 801471c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014720:	f104 0a1a 	add.w	sl, r4, #26
 8014724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014728:	1a9b      	subs	r3, r3, r2
 801472a:	eba3 0309 	sub.w	r3, r3, r9
 801472e:	4598      	cmp	r8, r3
 8014730:	f6bf af74 	bge.w	801461c <_printf_float+0x254>
 8014734:	2301      	movs	r3, #1
 8014736:	4652      	mov	r2, sl
 8014738:	4631      	mov	r1, r6
 801473a:	4628      	mov	r0, r5
 801473c:	47b8      	blx	r7
 801473e:	3001      	adds	r0, #1
 8014740:	f43f aea3 	beq.w	801448a <_printf_float+0xc2>
 8014744:	f108 0801 	add.w	r8, r8, #1
 8014748:	e7ec      	b.n	8014724 <_printf_float+0x35c>
 801474a:	4613      	mov	r3, r2
 801474c:	4631      	mov	r1, r6
 801474e:	4642      	mov	r2, r8
 8014750:	4628      	mov	r0, r5
 8014752:	47b8      	blx	r7
 8014754:	3001      	adds	r0, #1
 8014756:	d1bf      	bne.n	80146d8 <_printf_float+0x310>
 8014758:	e697      	b.n	801448a <_printf_float+0xc2>
 801475a:	2301      	movs	r3, #1
 801475c:	9a06      	ldr	r2, [sp, #24]
 801475e:	4631      	mov	r1, r6
 8014760:	4628      	mov	r0, r5
 8014762:	47b8      	blx	r7
 8014764:	3001      	adds	r0, #1
 8014766:	f43f ae90 	beq.w	801448a <_printf_float+0xc2>
 801476a:	f10b 0b01 	add.w	fp, fp, #1
 801476e:	e7ba      	b.n	80146e6 <_printf_float+0x31e>
 8014770:	9b05      	ldr	r3, [sp, #20]
 8014772:	9a04      	ldr	r2, [sp, #16]
 8014774:	4631      	mov	r1, r6
 8014776:	4628      	mov	r0, r5
 8014778:	47b8      	blx	r7
 801477a:	3001      	adds	r0, #1
 801477c:	d1c0      	bne.n	8014700 <_printf_float+0x338>
 801477e:	e684      	b.n	801448a <_printf_float+0xc2>
 8014780:	464b      	mov	r3, r9
 8014782:	eb08 020a 	add.w	r2, r8, sl
 8014786:	4631      	mov	r1, r6
 8014788:	4628      	mov	r0, r5
 801478a:	47b8      	blx	r7
 801478c:	3001      	adds	r0, #1
 801478e:	d1c3      	bne.n	8014718 <_printf_float+0x350>
 8014790:	e67b      	b.n	801448a <_printf_float+0xc2>
 8014792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014794:	2a01      	cmp	r2, #1
 8014796:	dc01      	bgt.n	801479c <_printf_float+0x3d4>
 8014798:	07db      	lsls	r3, r3, #31
 801479a:	d537      	bpl.n	801480c <_printf_float+0x444>
 801479c:	2301      	movs	r3, #1
 801479e:	4642      	mov	r2, r8
 80147a0:	4631      	mov	r1, r6
 80147a2:	4628      	mov	r0, r5
 80147a4:	47b8      	blx	r7
 80147a6:	3001      	adds	r0, #1
 80147a8:	f43f ae6f 	beq.w	801448a <_printf_float+0xc2>
 80147ac:	9b05      	ldr	r3, [sp, #20]
 80147ae:	9a04      	ldr	r2, [sp, #16]
 80147b0:	4631      	mov	r1, r6
 80147b2:	4628      	mov	r0, r5
 80147b4:	47b8      	blx	r7
 80147b6:	3001      	adds	r0, #1
 80147b8:	f43f ae67 	beq.w	801448a <_printf_float+0xc2>
 80147bc:	2200      	movs	r2, #0
 80147be:	2300      	movs	r3, #0
 80147c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80147c4:	f7ec f9ac 	bl	8000b20 <__aeabi_dcmpeq>
 80147c8:	b158      	cbz	r0, 80147e2 <_printf_float+0x41a>
 80147ca:	f04f 0800 	mov.w	r8, #0
 80147ce:	f104 0a1a 	add.w	sl, r4, #26
 80147d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147d4:	3b01      	subs	r3, #1
 80147d6:	4598      	cmp	r8, r3
 80147d8:	db0d      	blt.n	80147f6 <_printf_float+0x42e>
 80147da:	464b      	mov	r3, r9
 80147dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80147e0:	e6eb      	b.n	80145ba <_printf_float+0x1f2>
 80147e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147e4:	f108 0201 	add.w	r2, r8, #1
 80147e8:	3b01      	subs	r3, #1
 80147ea:	4631      	mov	r1, r6
 80147ec:	4628      	mov	r0, r5
 80147ee:	47b8      	blx	r7
 80147f0:	3001      	adds	r0, #1
 80147f2:	d1f2      	bne.n	80147da <_printf_float+0x412>
 80147f4:	e649      	b.n	801448a <_printf_float+0xc2>
 80147f6:	2301      	movs	r3, #1
 80147f8:	4652      	mov	r2, sl
 80147fa:	4631      	mov	r1, r6
 80147fc:	4628      	mov	r0, r5
 80147fe:	47b8      	blx	r7
 8014800:	3001      	adds	r0, #1
 8014802:	f43f ae42 	beq.w	801448a <_printf_float+0xc2>
 8014806:	f108 0801 	add.w	r8, r8, #1
 801480a:	e7e2      	b.n	80147d2 <_printf_float+0x40a>
 801480c:	2301      	movs	r3, #1
 801480e:	4642      	mov	r2, r8
 8014810:	e7eb      	b.n	80147ea <_printf_float+0x422>
 8014812:	2301      	movs	r3, #1
 8014814:	464a      	mov	r2, r9
 8014816:	4631      	mov	r1, r6
 8014818:	4628      	mov	r0, r5
 801481a:	47b8      	blx	r7
 801481c:	3001      	adds	r0, #1
 801481e:	f43f ae34 	beq.w	801448a <_printf_float+0xc2>
 8014822:	f108 0801 	add.w	r8, r8, #1
 8014826:	e700      	b.n	801462a <_printf_float+0x262>
 8014828:	4642      	mov	r2, r8
 801482a:	464b      	mov	r3, r9
 801482c:	4640      	mov	r0, r8
 801482e:	4649      	mov	r1, r9
 8014830:	f7ec f9a8 	bl	8000b84 <__aeabi_dcmpun>
 8014834:	2800      	cmp	r0, #0
 8014836:	f43f ae2d 	beq.w	8014494 <_printf_float+0xcc>
 801483a:	4b01      	ldr	r3, [pc, #4]	; (8014840 <_printf_float+0x478>)
 801483c:	4a01      	ldr	r2, [pc, #4]	; (8014844 <_printf_float+0x47c>)
 801483e:	e60e      	b.n	801445e <_printf_float+0x96>
 8014840:	0801a00a 	.word	0x0801a00a
 8014844:	0801a00e 	.word	0x0801a00e

08014848 <_printf_common>:
 8014848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801484c:	4691      	mov	r9, r2
 801484e:	461f      	mov	r7, r3
 8014850:	688a      	ldr	r2, [r1, #8]
 8014852:	690b      	ldr	r3, [r1, #16]
 8014854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014858:	4293      	cmp	r3, r2
 801485a:	bfb8      	it	lt
 801485c:	4613      	movlt	r3, r2
 801485e:	f8c9 3000 	str.w	r3, [r9]
 8014862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014866:	4606      	mov	r6, r0
 8014868:	460c      	mov	r4, r1
 801486a:	b112      	cbz	r2, 8014872 <_printf_common+0x2a>
 801486c:	3301      	adds	r3, #1
 801486e:	f8c9 3000 	str.w	r3, [r9]
 8014872:	6823      	ldr	r3, [r4, #0]
 8014874:	0699      	lsls	r1, r3, #26
 8014876:	bf42      	ittt	mi
 8014878:	f8d9 3000 	ldrmi.w	r3, [r9]
 801487c:	3302      	addmi	r3, #2
 801487e:	f8c9 3000 	strmi.w	r3, [r9]
 8014882:	6825      	ldr	r5, [r4, #0]
 8014884:	f015 0506 	ands.w	r5, r5, #6
 8014888:	d107      	bne.n	801489a <_printf_common+0x52>
 801488a:	f104 0a19 	add.w	sl, r4, #25
 801488e:	68e3      	ldr	r3, [r4, #12]
 8014890:	f8d9 2000 	ldr.w	r2, [r9]
 8014894:	1a9b      	subs	r3, r3, r2
 8014896:	429d      	cmp	r5, r3
 8014898:	db29      	blt.n	80148ee <_printf_common+0xa6>
 801489a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801489e:	6822      	ldr	r2, [r4, #0]
 80148a0:	3300      	adds	r3, #0
 80148a2:	bf18      	it	ne
 80148a4:	2301      	movne	r3, #1
 80148a6:	0692      	lsls	r2, r2, #26
 80148a8:	d42e      	bmi.n	8014908 <_printf_common+0xc0>
 80148aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148ae:	4639      	mov	r1, r7
 80148b0:	4630      	mov	r0, r6
 80148b2:	47c0      	blx	r8
 80148b4:	3001      	adds	r0, #1
 80148b6:	d021      	beq.n	80148fc <_printf_common+0xb4>
 80148b8:	6823      	ldr	r3, [r4, #0]
 80148ba:	68e5      	ldr	r5, [r4, #12]
 80148bc:	f8d9 2000 	ldr.w	r2, [r9]
 80148c0:	f003 0306 	and.w	r3, r3, #6
 80148c4:	2b04      	cmp	r3, #4
 80148c6:	bf08      	it	eq
 80148c8:	1aad      	subeq	r5, r5, r2
 80148ca:	68a3      	ldr	r3, [r4, #8]
 80148cc:	6922      	ldr	r2, [r4, #16]
 80148ce:	bf0c      	ite	eq
 80148d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80148d4:	2500      	movne	r5, #0
 80148d6:	4293      	cmp	r3, r2
 80148d8:	bfc4      	itt	gt
 80148da:	1a9b      	subgt	r3, r3, r2
 80148dc:	18ed      	addgt	r5, r5, r3
 80148de:	f04f 0900 	mov.w	r9, #0
 80148e2:	341a      	adds	r4, #26
 80148e4:	454d      	cmp	r5, r9
 80148e6:	d11b      	bne.n	8014920 <_printf_common+0xd8>
 80148e8:	2000      	movs	r0, #0
 80148ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ee:	2301      	movs	r3, #1
 80148f0:	4652      	mov	r2, sl
 80148f2:	4639      	mov	r1, r7
 80148f4:	4630      	mov	r0, r6
 80148f6:	47c0      	blx	r8
 80148f8:	3001      	adds	r0, #1
 80148fa:	d103      	bne.n	8014904 <_printf_common+0xbc>
 80148fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014904:	3501      	adds	r5, #1
 8014906:	e7c2      	b.n	801488e <_printf_common+0x46>
 8014908:	18e1      	adds	r1, r4, r3
 801490a:	1c5a      	adds	r2, r3, #1
 801490c:	2030      	movs	r0, #48	; 0x30
 801490e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014912:	4422      	add	r2, r4
 8014914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801491c:	3302      	adds	r3, #2
 801491e:	e7c4      	b.n	80148aa <_printf_common+0x62>
 8014920:	2301      	movs	r3, #1
 8014922:	4622      	mov	r2, r4
 8014924:	4639      	mov	r1, r7
 8014926:	4630      	mov	r0, r6
 8014928:	47c0      	blx	r8
 801492a:	3001      	adds	r0, #1
 801492c:	d0e6      	beq.n	80148fc <_printf_common+0xb4>
 801492e:	f109 0901 	add.w	r9, r9, #1
 8014932:	e7d7      	b.n	80148e4 <_printf_common+0x9c>

08014934 <_printf_i>:
 8014934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014938:	4617      	mov	r7, r2
 801493a:	7e0a      	ldrb	r2, [r1, #24]
 801493c:	b085      	sub	sp, #20
 801493e:	2a6e      	cmp	r2, #110	; 0x6e
 8014940:	4698      	mov	r8, r3
 8014942:	4606      	mov	r6, r0
 8014944:	460c      	mov	r4, r1
 8014946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014948:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801494c:	f000 80bc 	beq.w	8014ac8 <_printf_i+0x194>
 8014950:	d81a      	bhi.n	8014988 <_printf_i+0x54>
 8014952:	2a63      	cmp	r2, #99	; 0x63
 8014954:	d02e      	beq.n	80149b4 <_printf_i+0x80>
 8014956:	d80a      	bhi.n	801496e <_printf_i+0x3a>
 8014958:	2a00      	cmp	r2, #0
 801495a:	f000 80c8 	beq.w	8014aee <_printf_i+0x1ba>
 801495e:	2a58      	cmp	r2, #88	; 0x58
 8014960:	f000 808a 	beq.w	8014a78 <_printf_i+0x144>
 8014964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014968:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 801496c:	e02a      	b.n	80149c4 <_printf_i+0x90>
 801496e:	2a64      	cmp	r2, #100	; 0x64
 8014970:	d001      	beq.n	8014976 <_printf_i+0x42>
 8014972:	2a69      	cmp	r2, #105	; 0x69
 8014974:	d1f6      	bne.n	8014964 <_printf_i+0x30>
 8014976:	6821      	ldr	r1, [r4, #0]
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	f011 0f80 	tst.w	r1, #128	; 0x80
 801497e:	d023      	beq.n	80149c8 <_printf_i+0x94>
 8014980:	1d11      	adds	r1, r2, #4
 8014982:	6019      	str	r1, [r3, #0]
 8014984:	6813      	ldr	r3, [r2, #0]
 8014986:	e027      	b.n	80149d8 <_printf_i+0xa4>
 8014988:	2a73      	cmp	r2, #115	; 0x73
 801498a:	f000 80b4 	beq.w	8014af6 <_printf_i+0x1c2>
 801498e:	d808      	bhi.n	80149a2 <_printf_i+0x6e>
 8014990:	2a6f      	cmp	r2, #111	; 0x6f
 8014992:	d02a      	beq.n	80149ea <_printf_i+0xb6>
 8014994:	2a70      	cmp	r2, #112	; 0x70
 8014996:	d1e5      	bne.n	8014964 <_printf_i+0x30>
 8014998:	680a      	ldr	r2, [r1, #0]
 801499a:	f042 0220 	orr.w	r2, r2, #32
 801499e:	600a      	str	r2, [r1, #0]
 80149a0:	e003      	b.n	80149aa <_printf_i+0x76>
 80149a2:	2a75      	cmp	r2, #117	; 0x75
 80149a4:	d021      	beq.n	80149ea <_printf_i+0xb6>
 80149a6:	2a78      	cmp	r2, #120	; 0x78
 80149a8:	d1dc      	bne.n	8014964 <_printf_i+0x30>
 80149aa:	2278      	movs	r2, #120	; 0x78
 80149ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80149b0:	496e      	ldr	r1, [pc, #440]	; (8014b6c <_printf_i+0x238>)
 80149b2:	e064      	b.n	8014a7e <_printf_i+0x14a>
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80149ba:	1d11      	adds	r1, r2, #4
 80149bc:	6019      	str	r1, [r3, #0]
 80149be:	6813      	ldr	r3, [r2, #0]
 80149c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80149c4:	2301      	movs	r3, #1
 80149c6:	e0a3      	b.n	8014b10 <_printf_i+0x1dc>
 80149c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80149cc:	f102 0104 	add.w	r1, r2, #4
 80149d0:	6019      	str	r1, [r3, #0]
 80149d2:	d0d7      	beq.n	8014984 <_printf_i+0x50>
 80149d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	da03      	bge.n	80149e4 <_printf_i+0xb0>
 80149dc:	222d      	movs	r2, #45	; 0x2d
 80149de:	425b      	negs	r3, r3
 80149e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80149e4:	4962      	ldr	r1, [pc, #392]	; (8014b70 <_printf_i+0x23c>)
 80149e6:	220a      	movs	r2, #10
 80149e8:	e017      	b.n	8014a1a <_printf_i+0xe6>
 80149ea:	6820      	ldr	r0, [r4, #0]
 80149ec:	6819      	ldr	r1, [r3, #0]
 80149ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80149f2:	d003      	beq.n	80149fc <_printf_i+0xc8>
 80149f4:	1d08      	adds	r0, r1, #4
 80149f6:	6018      	str	r0, [r3, #0]
 80149f8:	680b      	ldr	r3, [r1, #0]
 80149fa:	e006      	b.n	8014a0a <_printf_i+0xd6>
 80149fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a00:	f101 0004 	add.w	r0, r1, #4
 8014a04:	6018      	str	r0, [r3, #0]
 8014a06:	d0f7      	beq.n	80149f8 <_printf_i+0xc4>
 8014a08:	880b      	ldrh	r3, [r1, #0]
 8014a0a:	4959      	ldr	r1, [pc, #356]	; (8014b70 <_printf_i+0x23c>)
 8014a0c:	2a6f      	cmp	r2, #111	; 0x6f
 8014a0e:	bf14      	ite	ne
 8014a10:	220a      	movne	r2, #10
 8014a12:	2208      	moveq	r2, #8
 8014a14:	2000      	movs	r0, #0
 8014a16:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8014a1a:	6865      	ldr	r5, [r4, #4]
 8014a1c:	60a5      	str	r5, [r4, #8]
 8014a1e:	2d00      	cmp	r5, #0
 8014a20:	f2c0 809c 	blt.w	8014b5c <_printf_i+0x228>
 8014a24:	6820      	ldr	r0, [r4, #0]
 8014a26:	f020 0004 	bic.w	r0, r0, #4
 8014a2a:	6020      	str	r0, [r4, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d13f      	bne.n	8014ab0 <_printf_i+0x17c>
 8014a30:	2d00      	cmp	r5, #0
 8014a32:	f040 8095 	bne.w	8014b60 <_printf_i+0x22c>
 8014a36:	4675      	mov	r5, lr
 8014a38:	2a08      	cmp	r2, #8
 8014a3a:	d10b      	bne.n	8014a54 <_printf_i+0x120>
 8014a3c:	6823      	ldr	r3, [r4, #0]
 8014a3e:	07da      	lsls	r2, r3, #31
 8014a40:	d508      	bpl.n	8014a54 <_printf_i+0x120>
 8014a42:	6923      	ldr	r3, [r4, #16]
 8014a44:	6862      	ldr	r2, [r4, #4]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	bfde      	ittt	le
 8014a4a:	2330      	movle	r3, #48	; 0x30
 8014a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014a54:	ebae 0305 	sub.w	r3, lr, r5
 8014a58:	6123      	str	r3, [r4, #16]
 8014a5a:	f8cd 8000 	str.w	r8, [sp]
 8014a5e:	463b      	mov	r3, r7
 8014a60:	aa03      	add	r2, sp, #12
 8014a62:	4621      	mov	r1, r4
 8014a64:	4630      	mov	r0, r6
 8014a66:	f7ff feef 	bl	8014848 <_printf_common>
 8014a6a:	3001      	adds	r0, #1
 8014a6c:	d155      	bne.n	8014b1a <_printf_i+0x1e6>
 8014a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a72:	b005      	add	sp, #20
 8014a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a78:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014a7c:	493c      	ldr	r1, [pc, #240]	; (8014b70 <_printf_i+0x23c>)
 8014a7e:	6822      	ldr	r2, [r4, #0]
 8014a80:	6818      	ldr	r0, [r3, #0]
 8014a82:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014a86:	f100 0504 	add.w	r5, r0, #4
 8014a8a:	601d      	str	r5, [r3, #0]
 8014a8c:	d001      	beq.n	8014a92 <_printf_i+0x15e>
 8014a8e:	6803      	ldr	r3, [r0, #0]
 8014a90:	e002      	b.n	8014a98 <_printf_i+0x164>
 8014a92:	0655      	lsls	r5, r2, #25
 8014a94:	d5fb      	bpl.n	8014a8e <_printf_i+0x15a>
 8014a96:	8803      	ldrh	r3, [r0, #0]
 8014a98:	07d0      	lsls	r0, r2, #31
 8014a9a:	bf44      	itt	mi
 8014a9c:	f042 0220 	orrmi.w	r2, r2, #32
 8014aa0:	6022      	strmi	r2, [r4, #0]
 8014aa2:	b91b      	cbnz	r3, 8014aac <_printf_i+0x178>
 8014aa4:	6822      	ldr	r2, [r4, #0]
 8014aa6:	f022 0220 	bic.w	r2, r2, #32
 8014aaa:	6022      	str	r2, [r4, #0]
 8014aac:	2210      	movs	r2, #16
 8014aae:	e7b1      	b.n	8014a14 <_printf_i+0xe0>
 8014ab0:	4675      	mov	r5, lr
 8014ab2:	fbb3 f0f2 	udiv	r0, r3, r2
 8014ab6:	fb02 3310 	mls	r3, r2, r0, r3
 8014aba:	5ccb      	ldrb	r3, [r1, r3]
 8014abc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	d1f5      	bne.n	8014ab2 <_printf_i+0x17e>
 8014ac6:	e7b7      	b.n	8014a38 <_printf_i+0x104>
 8014ac8:	6808      	ldr	r0, [r1, #0]
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	6949      	ldr	r1, [r1, #20]
 8014ace:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014ad2:	d004      	beq.n	8014ade <_printf_i+0x1aa>
 8014ad4:	1d10      	adds	r0, r2, #4
 8014ad6:	6018      	str	r0, [r3, #0]
 8014ad8:	6813      	ldr	r3, [r2, #0]
 8014ada:	6019      	str	r1, [r3, #0]
 8014adc:	e007      	b.n	8014aee <_printf_i+0x1ba>
 8014ade:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014ae2:	f102 0004 	add.w	r0, r2, #4
 8014ae6:	6018      	str	r0, [r3, #0]
 8014ae8:	6813      	ldr	r3, [r2, #0]
 8014aea:	d0f6      	beq.n	8014ada <_printf_i+0x1a6>
 8014aec:	8019      	strh	r1, [r3, #0]
 8014aee:	2300      	movs	r3, #0
 8014af0:	6123      	str	r3, [r4, #16]
 8014af2:	4675      	mov	r5, lr
 8014af4:	e7b1      	b.n	8014a5a <_printf_i+0x126>
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	1d11      	adds	r1, r2, #4
 8014afa:	6019      	str	r1, [r3, #0]
 8014afc:	6815      	ldr	r5, [r2, #0]
 8014afe:	6862      	ldr	r2, [r4, #4]
 8014b00:	2100      	movs	r1, #0
 8014b02:	4628      	mov	r0, r5
 8014b04:	f7eb fb9c 	bl	8000240 <memchr>
 8014b08:	b108      	cbz	r0, 8014b0e <_printf_i+0x1da>
 8014b0a:	1b40      	subs	r0, r0, r5
 8014b0c:	6060      	str	r0, [r4, #4]
 8014b0e:	6863      	ldr	r3, [r4, #4]
 8014b10:	6123      	str	r3, [r4, #16]
 8014b12:	2300      	movs	r3, #0
 8014b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b18:	e79f      	b.n	8014a5a <_printf_i+0x126>
 8014b1a:	6923      	ldr	r3, [r4, #16]
 8014b1c:	462a      	mov	r2, r5
 8014b1e:	4639      	mov	r1, r7
 8014b20:	4630      	mov	r0, r6
 8014b22:	47c0      	blx	r8
 8014b24:	3001      	adds	r0, #1
 8014b26:	d0a2      	beq.n	8014a6e <_printf_i+0x13a>
 8014b28:	6823      	ldr	r3, [r4, #0]
 8014b2a:	079b      	lsls	r3, r3, #30
 8014b2c:	d507      	bpl.n	8014b3e <_printf_i+0x20a>
 8014b2e:	2500      	movs	r5, #0
 8014b30:	f104 0919 	add.w	r9, r4, #25
 8014b34:	68e3      	ldr	r3, [r4, #12]
 8014b36:	9a03      	ldr	r2, [sp, #12]
 8014b38:	1a9b      	subs	r3, r3, r2
 8014b3a:	429d      	cmp	r5, r3
 8014b3c:	db05      	blt.n	8014b4a <_printf_i+0x216>
 8014b3e:	68e0      	ldr	r0, [r4, #12]
 8014b40:	9b03      	ldr	r3, [sp, #12]
 8014b42:	4298      	cmp	r0, r3
 8014b44:	bfb8      	it	lt
 8014b46:	4618      	movlt	r0, r3
 8014b48:	e793      	b.n	8014a72 <_printf_i+0x13e>
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	464a      	mov	r2, r9
 8014b4e:	4639      	mov	r1, r7
 8014b50:	4630      	mov	r0, r6
 8014b52:	47c0      	blx	r8
 8014b54:	3001      	adds	r0, #1
 8014b56:	d08a      	beq.n	8014a6e <_printf_i+0x13a>
 8014b58:	3501      	adds	r5, #1
 8014b5a:	e7eb      	b.n	8014b34 <_printf_i+0x200>
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d1a7      	bne.n	8014ab0 <_printf_i+0x17c>
 8014b60:	780b      	ldrb	r3, [r1, #0]
 8014b62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b6a:	e765      	b.n	8014a38 <_printf_i+0x104>
 8014b6c:	0801a025 	.word	0x0801a025
 8014b70:	0801a014 	.word	0x0801a014

08014b74 <iprintf>:
 8014b74:	b40f      	push	{r0, r1, r2, r3}
 8014b76:	4b0a      	ldr	r3, [pc, #40]	; (8014ba0 <iprintf+0x2c>)
 8014b78:	b513      	push	{r0, r1, r4, lr}
 8014b7a:	681c      	ldr	r4, [r3, #0]
 8014b7c:	b124      	cbz	r4, 8014b88 <iprintf+0x14>
 8014b7e:	69a3      	ldr	r3, [r4, #24]
 8014b80:	b913      	cbnz	r3, 8014b88 <iprintf+0x14>
 8014b82:	4620      	mov	r0, r4
 8014b84:	f001 f9a0 	bl	8015ec8 <__sinit>
 8014b88:	ab05      	add	r3, sp, #20
 8014b8a:	9a04      	ldr	r2, [sp, #16]
 8014b8c:	68a1      	ldr	r1, [r4, #8]
 8014b8e:	9301      	str	r3, [sp, #4]
 8014b90:	4620      	mov	r0, r4
 8014b92:	f001 ffbf 	bl	8016b14 <_vfiprintf_r>
 8014b96:	b002      	add	sp, #8
 8014b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b9c:	b004      	add	sp, #16
 8014b9e:	4770      	bx	lr
 8014ba0:	200001ac 	.word	0x200001ac

08014ba4 <_puts_r>:
 8014ba4:	b570      	push	{r4, r5, r6, lr}
 8014ba6:	460e      	mov	r6, r1
 8014ba8:	4605      	mov	r5, r0
 8014baa:	b118      	cbz	r0, 8014bb4 <_puts_r+0x10>
 8014bac:	6983      	ldr	r3, [r0, #24]
 8014bae:	b90b      	cbnz	r3, 8014bb4 <_puts_r+0x10>
 8014bb0:	f001 f98a 	bl	8015ec8 <__sinit>
 8014bb4:	69ab      	ldr	r3, [r5, #24]
 8014bb6:	68ac      	ldr	r4, [r5, #8]
 8014bb8:	b913      	cbnz	r3, 8014bc0 <_puts_r+0x1c>
 8014bba:	4628      	mov	r0, r5
 8014bbc:	f001 f984 	bl	8015ec8 <__sinit>
 8014bc0:	4b23      	ldr	r3, [pc, #140]	; (8014c50 <_puts_r+0xac>)
 8014bc2:	429c      	cmp	r4, r3
 8014bc4:	d117      	bne.n	8014bf6 <_puts_r+0x52>
 8014bc6:	686c      	ldr	r4, [r5, #4]
 8014bc8:	89a3      	ldrh	r3, [r4, #12]
 8014bca:	071b      	lsls	r3, r3, #28
 8014bcc:	d51d      	bpl.n	8014c0a <_puts_r+0x66>
 8014bce:	6923      	ldr	r3, [r4, #16]
 8014bd0:	b1db      	cbz	r3, 8014c0a <_puts_r+0x66>
 8014bd2:	3e01      	subs	r6, #1
 8014bd4:	68a3      	ldr	r3, [r4, #8]
 8014bd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	60a3      	str	r3, [r4, #8]
 8014bde:	b9e9      	cbnz	r1, 8014c1c <_puts_r+0x78>
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	da2e      	bge.n	8014c42 <_puts_r+0x9e>
 8014be4:	4622      	mov	r2, r4
 8014be6:	210a      	movs	r1, #10
 8014be8:	4628      	mov	r0, r5
 8014bea:	f000 f953 	bl	8014e94 <__swbuf_r>
 8014bee:	3001      	adds	r0, #1
 8014bf0:	d011      	beq.n	8014c16 <_puts_r+0x72>
 8014bf2:	200a      	movs	r0, #10
 8014bf4:	bd70      	pop	{r4, r5, r6, pc}
 8014bf6:	4b17      	ldr	r3, [pc, #92]	; (8014c54 <_puts_r+0xb0>)
 8014bf8:	429c      	cmp	r4, r3
 8014bfa:	d101      	bne.n	8014c00 <_puts_r+0x5c>
 8014bfc:	68ac      	ldr	r4, [r5, #8]
 8014bfe:	e7e3      	b.n	8014bc8 <_puts_r+0x24>
 8014c00:	4b15      	ldr	r3, [pc, #84]	; (8014c58 <_puts_r+0xb4>)
 8014c02:	429c      	cmp	r4, r3
 8014c04:	bf08      	it	eq
 8014c06:	68ec      	ldreq	r4, [r5, #12]
 8014c08:	e7de      	b.n	8014bc8 <_puts_r+0x24>
 8014c0a:	4621      	mov	r1, r4
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	f000 f9a1 	bl	8014f54 <__swsetup_r>
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d0dd      	beq.n	8014bd2 <_puts_r+0x2e>
 8014c16:	f04f 30ff 	mov.w	r0, #4294967295
 8014c1a:	bd70      	pop	{r4, r5, r6, pc}
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	da04      	bge.n	8014c2a <_puts_r+0x86>
 8014c20:	69a2      	ldr	r2, [r4, #24]
 8014c22:	4293      	cmp	r3, r2
 8014c24:	db06      	blt.n	8014c34 <_puts_r+0x90>
 8014c26:	290a      	cmp	r1, #10
 8014c28:	d004      	beq.n	8014c34 <_puts_r+0x90>
 8014c2a:	6823      	ldr	r3, [r4, #0]
 8014c2c:	1c5a      	adds	r2, r3, #1
 8014c2e:	6022      	str	r2, [r4, #0]
 8014c30:	7019      	strb	r1, [r3, #0]
 8014c32:	e7cf      	b.n	8014bd4 <_puts_r+0x30>
 8014c34:	4622      	mov	r2, r4
 8014c36:	4628      	mov	r0, r5
 8014c38:	f000 f92c 	bl	8014e94 <__swbuf_r>
 8014c3c:	3001      	adds	r0, #1
 8014c3e:	d1c9      	bne.n	8014bd4 <_puts_r+0x30>
 8014c40:	e7e9      	b.n	8014c16 <_puts_r+0x72>
 8014c42:	6823      	ldr	r3, [r4, #0]
 8014c44:	200a      	movs	r0, #10
 8014c46:	1c5a      	adds	r2, r3, #1
 8014c48:	6022      	str	r2, [r4, #0]
 8014c4a:	7018      	strb	r0, [r3, #0]
 8014c4c:	bd70      	pop	{r4, r5, r6, pc}
 8014c4e:	bf00      	nop
 8014c50:	0801a164 	.word	0x0801a164
 8014c54:	0801a184 	.word	0x0801a184
 8014c58:	0801a144 	.word	0x0801a144

08014c5c <puts>:
 8014c5c:	4b02      	ldr	r3, [pc, #8]	; (8014c68 <puts+0xc>)
 8014c5e:	4601      	mov	r1, r0
 8014c60:	6818      	ldr	r0, [r3, #0]
 8014c62:	f7ff bf9f 	b.w	8014ba4 <_puts_r>
 8014c66:	bf00      	nop
 8014c68:	200001ac 	.word	0x200001ac

08014c6c <realloc>:
 8014c6c:	4b02      	ldr	r3, [pc, #8]	; (8014c78 <realloc+0xc>)
 8014c6e:	460a      	mov	r2, r1
 8014c70:	4601      	mov	r1, r0
 8014c72:	6818      	ldr	r0, [r3, #0]
 8014c74:	f001 bdae 	b.w	80167d4 <_realloc_r>
 8014c78:	200001ac 	.word	0x200001ac

08014c7c <sniprintf>:
 8014c7c:	b40c      	push	{r2, r3}
 8014c7e:	b530      	push	{r4, r5, lr}
 8014c80:	4b17      	ldr	r3, [pc, #92]	; (8014ce0 <sniprintf+0x64>)
 8014c82:	1e0c      	subs	r4, r1, #0
 8014c84:	b09d      	sub	sp, #116	; 0x74
 8014c86:	681d      	ldr	r5, [r3, #0]
 8014c88:	da08      	bge.n	8014c9c <sniprintf+0x20>
 8014c8a:	238b      	movs	r3, #139	; 0x8b
 8014c8c:	602b      	str	r3, [r5, #0]
 8014c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c92:	b01d      	add	sp, #116	; 0x74
 8014c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c98:	b002      	add	sp, #8
 8014c9a:	4770      	bx	lr
 8014c9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014ca0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014ca4:	bf14      	ite	ne
 8014ca6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014caa:	4623      	moveq	r3, r4
 8014cac:	9304      	str	r3, [sp, #16]
 8014cae:	9307      	str	r3, [sp, #28]
 8014cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cb4:	9002      	str	r0, [sp, #8]
 8014cb6:	9006      	str	r0, [sp, #24]
 8014cb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014cbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014cbe:	ab21      	add	r3, sp, #132	; 0x84
 8014cc0:	a902      	add	r1, sp, #8
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	9301      	str	r3, [sp, #4]
 8014cc6:	f001 fe07 	bl	80168d8 <_svfiprintf_r>
 8014cca:	1c43      	adds	r3, r0, #1
 8014ccc:	bfbc      	itt	lt
 8014cce:	238b      	movlt	r3, #139	; 0x8b
 8014cd0:	602b      	strlt	r3, [r5, #0]
 8014cd2:	2c00      	cmp	r4, #0
 8014cd4:	d0dd      	beq.n	8014c92 <sniprintf+0x16>
 8014cd6:	9b02      	ldr	r3, [sp, #8]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	701a      	strb	r2, [r3, #0]
 8014cdc:	e7d9      	b.n	8014c92 <sniprintf+0x16>
 8014cde:	bf00      	nop
 8014ce0:	200001ac 	.word	0x200001ac

08014ce4 <siprintf>:
 8014ce4:	b40e      	push	{r1, r2, r3}
 8014ce6:	b500      	push	{lr}
 8014ce8:	b09c      	sub	sp, #112	; 0x70
 8014cea:	f44f 7102 	mov.w	r1, #520	; 0x208
 8014cee:	ab1d      	add	r3, sp, #116	; 0x74
 8014cf0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014cf4:	9002      	str	r0, [sp, #8]
 8014cf6:	9006      	str	r0, [sp, #24]
 8014cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014cfc:	480a      	ldr	r0, [pc, #40]	; (8014d28 <siprintf+0x44>)
 8014cfe:	9104      	str	r1, [sp, #16]
 8014d00:	9107      	str	r1, [sp, #28]
 8014d02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d0a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014d0e:	6800      	ldr	r0, [r0, #0]
 8014d10:	9301      	str	r3, [sp, #4]
 8014d12:	a902      	add	r1, sp, #8
 8014d14:	f001 fde0 	bl	80168d8 <_svfiprintf_r>
 8014d18:	9b02      	ldr	r3, [sp, #8]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	701a      	strb	r2, [r3, #0]
 8014d1e:	b01c      	add	sp, #112	; 0x70
 8014d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d24:	b003      	add	sp, #12
 8014d26:	4770      	bx	lr
 8014d28:	200001ac 	.word	0x200001ac

08014d2c <strcpy>:
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d32:	f803 2b01 	strb.w	r2, [r3], #1
 8014d36:	2a00      	cmp	r2, #0
 8014d38:	d1f9      	bne.n	8014d2e <strcpy+0x2>
 8014d3a:	4770      	bx	lr

08014d3c <strncpy>:
 8014d3c:	b570      	push	{r4, r5, r6, lr}
 8014d3e:	4604      	mov	r4, r0
 8014d40:	b902      	cbnz	r2, 8014d44 <strncpy+0x8>
 8014d42:	bd70      	pop	{r4, r5, r6, pc}
 8014d44:	4623      	mov	r3, r4
 8014d46:	f811 5b01 	ldrb.w	r5, [r1], #1
 8014d4a:	f803 5b01 	strb.w	r5, [r3], #1
 8014d4e:	1e56      	subs	r6, r2, #1
 8014d50:	b91d      	cbnz	r5, 8014d5a <strncpy+0x1e>
 8014d52:	4414      	add	r4, r2
 8014d54:	42a3      	cmp	r3, r4
 8014d56:	d103      	bne.n	8014d60 <strncpy+0x24>
 8014d58:	bd70      	pop	{r4, r5, r6, pc}
 8014d5a:	461c      	mov	r4, r3
 8014d5c:	4632      	mov	r2, r6
 8014d5e:	e7ef      	b.n	8014d40 <strncpy+0x4>
 8014d60:	f803 5b01 	strb.w	r5, [r3], #1
 8014d64:	e7f6      	b.n	8014d54 <strncpy+0x18>

08014d66 <_strtol_l.isra.0>:
 8014d66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6a:	4680      	mov	r8, r0
 8014d6c:	4689      	mov	r9, r1
 8014d6e:	4692      	mov	sl, r2
 8014d70:	461f      	mov	r7, r3
 8014d72:	468b      	mov	fp, r1
 8014d74:	465d      	mov	r5, fp
 8014d76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d7c:	f7ff fa56 	bl	801422c <__locale_ctype_ptr_l>
 8014d80:	4420      	add	r0, r4
 8014d82:	7846      	ldrb	r6, [r0, #1]
 8014d84:	f016 0608 	ands.w	r6, r6, #8
 8014d88:	d10b      	bne.n	8014da2 <_strtol_l.isra.0+0x3c>
 8014d8a:	2c2d      	cmp	r4, #45	; 0x2d
 8014d8c:	d10b      	bne.n	8014da6 <_strtol_l.isra.0+0x40>
 8014d8e:	782c      	ldrb	r4, [r5, #0]
 8014d90:	2601      	movs	r6, #1
 8014d92:	f10b 0502 	add.w	r5, fp, #2
 8014d96:	b167      	cbz	r7, 8014db2 <_strtol_l.isra.0+0x4c>
 8014d98:	2f10      	cmp	r7, #16
 8014d9a:	d114      	bne.n	8014dc6 <_strtol_l.isra.0+0x60>
 8014d9c:	2c30      	cmp	r4, #48	; 0x30
 8014d9e:	d00a      	beq.n	8014db6 <_strtol_l.isra.0+0x50>
 8014da0:	e011      	b.n	8014dc6 <_strtol_l.isra.0+0x60>
 8014da2:	46ab      	mov	fp, r5
 8014da4:	e7e6      	b.n	8014d74 <_strtol_l.isra.0+0xe>
 8014da6:	2c2b      	cmp	r4, #43	; 0x2b
 8014da8:	bf04      	itt	eq
 8014daa:	782c      	ldrbeq	r4, [r5, #0]
 8014dac:	f10b 0502 	addeq.w	r5, fp, #2
 8014db0:	e7f1      	b.n	8014d96 <_strtol_l.isra.0+0x30>
 8014db2:	2c30      	cmp	r4, #48	; 0x30
 8014db4:	d127      	bne.n	8014e06 <_strtol_l.isra.0+0xa0>
 8014db6:	782b      	ldrb	r3, [r5, #0]
 8014db8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014dbc:	2b58      	cmp	r3, #88	; 0x58
 8014dbe:	d14b      	bne.n	8014e58 <_strtol_l.isra.0+0xf2>
 8014dc0:	786c      	ldrb	r4, [r5, #1]
 8014dc2:	2710      	movs	r7, #16
 8014dc4:	3502      	adds	r5, #2
 8014dc6:	2e00      	cmp	r6, #0
 8014dc8:	bf0c      	ite	eq
 8014dca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014dce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	fbb1 fef7 	udiv	lr, r1, r7
 8014dd8:	4610      	mov	r0, r2
 8014dda:	fb07 1c1e 	mls	ip, r7, lr, r1
 8014dde:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014de2:	2b09      	cmp	r3, #9
 8014de4:	d811      	bhi.n	8014e0a <_strtol_l.isra.0+0xa4>
 8014de6:	461c      	mov	r4, r3
 8014de8:	42a7      	cmp	r7, r4
 8014dea:	dd1d      	ble.n	8014e28 <_strtol_l.isra.0+0xc2>
 8014dec:	1c53      	adds	r3, r2, #1
 8014dee:	d007      	beq.n	8014e00 <_strtol_l.isra.0+0x9a>
 8014df0:	4586      	cmp	lr, r0
 8014df2:	d316      	bcc.n	8014e22 <_strtol_l.isra.0+0xbc>
 8014df4:	d101      	bne.n	8014dfa <_strtol_l.isra.0+0x94>
 8014df6:	45a4      	cmp	ip, r4
 8014df8:	db13      	blt.n	8014e22 <_strtol_l.isra.0+0xbc>
 8014dfa:	fb00 4007 	mla	r0, r0, r7, r4
 8014dfe:	2201      	movs	r2, #1
 8014e00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e04:	e7eb      	b.n	8014dde <_strtol_l.isra.0+0x78>
 8014e06:	270a      	movs	r7, #10
 8014e08:	e7dd      	b.n	8014dc6 <_strtol_l.isra.0+0x60>
 8014e0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014e0e:	2b19      	cmp	r3, #25
 8014e10:	d801      	bhi.n	8014e16 <_strtol_l.isra.0+0xb0>
 8014e12:	3c37      	subs	r4, #55	; 0x37
 8014e14:	e7e8      	b.n	8014de8 <_strtol_l.isra.0+0x82>
 8014e16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014e1a:	2b19      	cmp	r3, #25
 8014e1c:	d804      	bhi.n	8014e28 <_strtol_l.isra.0+0xc2>
 8014e1e:	3c57      	subs	r4, #87	; 0x57
 8014e20:	e7e2      	b.n	8014de8 <_strtol_l.isra.0+0x82>
 8014e22:	f04f 32ff 	mov.w	r2, #4294967295
 8014e26:	e7eb      	b.n	8014e00 <_strtol_l.isra.0+0x9a>
 8014e28:	1c53      	adds	r3, r2, #1
 8014e2a:	d108      	bne.n	8014e3e <_strtol_l.isra.0+0xd8>
 8014e2c:	2322      	movs	r3, #34	; 0x22
 8014e2e:	f8c8 3000 	str.w	r3, [r8]
 8014e32:	4608      	mov	r0, r1
 8014e34:	f1ba 0f00 	cmp.w	sl, #0
 8014e38:	d107      	bne.n	8014e4a <_strtol_l.isra.0+0xe4>
 8014e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e3e:	b106      	cbz	r6, 8014e42 <_strtol_l.isra.0+0xdc>
 8014e40:	4240      	negs	r0, r0
 8014e42:	f1ba 0f00 	cmp.w	sl, #0
 8014e46:	d00c      	beq.n	8014e62 <_strtol_l.isra.0+0xfc>
 8014e48:	b122      	cbz	r2, 8014e54 <_strtol_l.isra.0+0xee>
 8014e4a:	3d01      	subs	r5, #1
 8014e4c:	f8ca 5000 	str.w	r5, [sl]
 8014e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e54:	464d      	mov	r5, r9
 8014e56:	e7f9      	b.n	8014e4c <_strtol_l.isra.0+0xe6>
 8014e58:	2430      	movs	r4, #48	; 0x30
 8014e5a:	2f00      	cmp	r7, #0
 8014e5c:	d1b3      	bne.n	8014dc6 <_strtol_l.isra.0+0x60>
 8014e5e:	2708      	movs	r7, #8
 8014e60:	e7b1      	b.n	8014dc6 <_strtol_l.isra.0+0x60>
 8014e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014e68 <strtol>:
 8014e68:	4b08      	ldr	r3, [pc, #32]	; (8014e8c <strtol+0x24>)
 8014e6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e6c:	681c      	ldr	r4, [r3, #0]
 8014e6e:	4d08      	ldr	r5, [pc, #32]	; (8014e90 <strtol+0x28>)
 8014e70:	6a23      	ldr	r3, [r4, #32]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	bf08      	it	eq
 8014e76:	462b      	moveq	r3, r5
 8014e78:	9300      	str	r3, [sp, #0]
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	460a      	mov	r2, r1
 8014e7e:	4601      	mov	r1, r0
 8014e80:	4620      	mov	r0, r4
 8014e82:	f7ff ff70 	bl	8014d66 <_strtol_l.isra.0>
 8014e86:	b003      	add	sp, #12
 8014e88:	bd30      	pop	{r4, r5, pc}
 8014e8a:	bf00      	nop
 8014e8c:	200001ac 	.word	0x200001ac
 8014e90:	20000040 	.word	0x20000040

08014e94 <__swbuf_r>:
 8014e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e96:	460e      	mov	r6, r1
 8014e98:	4614      	mov	r4, r2
 8014e9a:	4605      	mov	r5, r0
 8014e9c:	b118      	cbz	r0, 8014ea6 <__swbuf_r+0x12>
 8014e9e:	6983      	ldr	r3, [r0, #24]
 8014ea0:	b90b      	cbnz	r3, 8014ea6 <__swbuf_r+0x12>
 8014ea2:	f001 f811 	bl	8015ec8 <__sinit>
 8014ea6:	4b21      	ldr	r3, [pc, #132]	; (8014f2c <__swbuf_r+0x98>)
 8014ea8:	429c      	cmp	r4, r3
 8014eaa:	d12a      	bne.n	8014f02 <__swbuf_r+0x6e>
 8014eac:	686c      	ldr	r4, [r5, #4]
 8014eae:	69a3      	ldr	r3, [r4, #24]
 8014eb0:	60a3      	str	r3, [r4, #8]
 8014eb2:	89a3      	ldrh	r3, [r4, #12]
 8014eb4:	071a      	lsls	r2, r3, #28
 8014eb6:	d52e      	bpl.n	8014f16 <__swbuf_r+0x82>
 8014eb8:	6923      	ldr	r3, [r4, #16]
 8014eba:	b363      	cbz	r3, 8014f16 <__swbuf_r+0x82>
 8014ebc:	6923      	ldr	r3, [r4, #16]
 8014ebe:	6820      	ldr	r0, [r4, #0]
 8014ec0:	1ac0      	subs	r0, r0, r3
 8014ec2:	6963      	ldr	r3, [r4, #20]
 8014ec4:	b2f6      	uxtb	r6, r6
 8014ec6:	4298      	cmp	r0, r3
 8014ec8:	4637      	mov	r7, r6
 8014eca:	db04      	blt.n	8014ed6 <__swbuf_r+0x42>
 8014ecc:	4621      	mov	r1, r4
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f000 ff90 	bl	8015df4 <_fflush_r>
 8014ed4:	bb28      	cbnz	r0, 8014f22 <__swbuf_r+0x8e>
 8014ed6:	68a3      	ldr	r3, [r4, #8]
 8014ed8:	3b01      	subs	r3, #1
 8014eda:	60a3      	str	r3, [r4, #8]
 8014edc:	6823      	ldr	r3, [r4, #0]
 8014ede:	1c5a      	adds	r2, r3, #1
 8014ee0:	6022      	str	r2, [r4, #0]
 8014ee2:	701e      	strb	r6, [r3, #0]
 8014ee4:	6963      	ldr	r3, [r4, #20]
 8014ee6:	3001      	adds	r0, #1
 8014ee8:	4298      	cmp	r0, r3
 8014eea:	d004      	beq.n	8014ef6 <__swbuf_r+0x62>
 8014eec:	89a3      	ldrh	r3, [r4, #12]
 8014eee:	07db      	lsls	r3, r3, #31
 8014ef0:	d519      	bpl.n	8014f26 <__swbuf_r+0x92>
 8014ef2:	2e0a      	cmp	r6, #10
 8014ef4:	d117      	bne.n	8014f26 <__swbuf_r+0x92>
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f000 ff7b 	bl	8015df4 <_fflush_r>
 8014efe:	b190      	cbz	r0, 8014f26 <__swbuf_r+0x92>
 8014f00:	e00f      	b.n	8014f22 <__swbuf_r+0x8e>
 8014f02:	4b0b      	ldr	r3, [pc, #44]	; (8014f30 <__swbuf_r+0x9c>)
 8014f04:	429c      	cmp	r4, r3
 8014f06:	d101      	bne.n	8014f0c <__swbuf_r+0x78>
 8014f08:	68ac      	ldr	r4, [r5, #8]
 8014f0a:	e7d0      	b.n	8014eae <__swbuf_r+0x1a>
 8014f0c:	4b09      	ldr	r3, [pc, #36]	; (8014f34 <__swbuf_r+0xa0>)
 8014f0e:	429c      	cmp	r4, r3
 8014f10:	bf08      	it	eq
 8014f12:	68ec      	ldreq	r4, [r5, #12]
 8014f14:	e7cb      	b.n	8014eae <__swbuf_r+0x1a>
 8014f16:	4621      	mov	r1, r4
 8014f18:	4628      	mov	r0, r5
 8014f1a:	f000 f81b 	bl	8014f54 <__swsetup_r>
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	d0cc      	beq.n	8014ebc <__swbuf_r+0x28>
 8014f22:	f04f 37ff 	mov.w	r7, #4294967295
 8014f26:	4638      	mov	r0, r7
 8014f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	0801a164 	.word	0x0801a164
 8014f30:	0801a184 	.word	0x0801a184
 8014f34:	0801a144 	.word	0x0801a144

08014f38 <__ascii_wctomb>:
 8014f38:	b149      	cbz	r1, 8014f4e <__ascii_wctomb+0x16>
 8014f3a:	2aff      	cmp	r2, #255	; 0xff
 8014f3c:	bf85      	ittet	hi
 8014f3e:	238a      	movhi	r3, #138	; 0x8a
 8014f40:	6003      	strhi	r3, [r0, #0]
 8014f42:	700a      	strbls	r2, [r1, #0]
 8014f44:	f04f 30ff 	movhi.w	r0, #4294967295
 8014f48:	bf98      	it	ls
 8014f4a:	2001      	movls	r0, #1
 8014f4c:	4770      	bx	lr
 8014f4e:	4608      	mov	r0, r1
 8014f50:	4770      	bx	lr
	...

08014f54 <__swsetup_r>:
 8014f54:	4b32      	ldr	r3, [pc, #200]	; (8015020 <__swsetup_r+0xcc>)
 8014f56:	b570      	push	{r4, r5, r6, lr}
 8014f58:	681d      	ldr	r5, [r3, #0]
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	460c      	mov	r4, r1
 8014f5e:	b125      	cbz	r5, 8014f6a <__swsetup_r+0x16>
 8014f60:	69ab      	ldr	r3, [r5, #24]
 8014f62:	b913      	cbnz	r3, 8014f6a <__swsetup_r+0x16>
 8014f64:	4628      	mov	r0, r5
 8014f66:	f000 ffaf 	bl	8015ec8 <__sinit>
 8014f6a:	4b2e      	ldr	r3, [pc, #184]	; (8015024 <__swsetup_r+0xd0>)
 8014f6c:	429c      	cmp	r4, r3
 8014f6e:	d10f      	bne.n	8014f90 <__swsetup_r+0x3c>
 8014f70:	686c      	ldr	r4, [r5, #4]
 8014f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	0715      	lsls	r5, r2, #28
 8014f7a:	d42c      	bmi.n	8014fd6 <__swsetup_r+0x82>
 8014f7c:	06d0      	lsls	r0, r2, #27
 8014f7e:	d411      	bmi.n	8014fa4 <__swsetup_r+0x50>
 8014f80:	2209      	movs	r2, #9
 8014f82:	6032      	str	r2, [r6, #0]
 8014f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f88:	81a3      	strh	r3, [r4, #12]
 8014f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f8e:	bd70      	pop	{r4, r5, r6, pc}
 8014f90:	4b25      	ldr	r3, [pc, #148]	; (8015028 <__swsetup_r+0xd4>)
 8014f92:	429c      	cmp	r4, r3
 8014f94:	d101      	bne.n	8014f9a <__swsetup_r+0x46>
 8014f96:	68ac      	ldr	r4, [r5, #8]
 8014f98:	e7eb      	b.n	8014f72 <__swsetup_r+0x1e>
 8014f9a:	4b24      	ldr	r3, [pc, #144]	; (801502c <__swsetup_r+0xd8>)
 8014f9c:	429c      	cmp	r4, r3
 8014f9e:	bf08      	it	eq
 8014fa0:	68ec      	ldreq	r4, [r5, #12]
 8014fa2:	e7e6      	b.n	8014f72 <__swsetup_r+0x1e>
 8014fa4:	0751      	lsls	r1, r2, #29
 8014fa6:	d512      	bpl.n	8014fce <__swsetup_r+0x7a>
 8014fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014faa:	b141      	cbz	r1, 8014fbe <__swsetup_r+0x6a>
 8014fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fb0:	4299      	cmp	r1, r3
 8014fb2:	d002      	beq.n	8014fba <__swsetup_r+0x66>
 8014fb4:	4630      	mov	r0, r6
 8014fb6:	f001 fb61 	bl	801667c <_free_r>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8014fbe:	89a3      	ldrh	r3, [r4, #12]
 8014fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014fc4:	81a3      	strh	r3, [r4, #12]
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	6063      	str	r3, [r4, #4]
 8014fca:	6923      	ldr	r3, [r4, #16]
 8014fcc:	6023      	str	r3, [r4, #0]
 8014fce:	89a3      	ldrh	r3, [r4, #12]
 8014fd0:	f043 0308 	orr.w	r3, r3, #8
 8014fd4:	81a3      	strh	r3, [r4, #12]
 8014fd6:	6923      	ldr	r3, [r4, #16]
 8014fd8:	b94b      	cbnz	r3, 8014fee <__swsetup_r+0x9a>
 8014fda:	89a3      	ldrh	r3, [r4, #12]
 8014fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fe4:	d003      	beq.n	8014fee <__swsetup_r+0x9a>
 8014fe6:	4621      	mov	r1, r4
 8014fe8:	4630      	mov	r0, r6
 8014fea:	f001 f829 	bl	8016040 <__smakebuf_r>
 8014fee:	89a2      	ldrh	r2, [r4, #12]
 8014ff0:	f012 0301 	ands.w	r3, r2, #1
 8014ff4:	d00c      	beq.n	8015010 <__swsetup_r+0xbc>
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	60a3      	str	r3, [r4, #8]
 8014ffa:	6963      	ldr	r3, [r4, #20]
 8014ffc:	425b      	negs	r3, r3
 8014ffe:	61a3      	str	r3, [r4, #24]
 8015000:	6923      	ldr	r3, [r4, #16]
 8015002:	b953      	cbnz	r3, 801501a <__swsetup_r+0xc6>
 8015004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015008:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801500c:	d1ba      	bne.n	8014f84 <__swsetup_r+0x30>
 801500e:	bd70      	pop	{r4, r5, r6, pc}
 8015010:	0792      	lsls	r2, r2, #30
 8015012:	bf58      	it	pl
 8015014:	6963      	ldrpl	r3, [r4, #20]
 8015016:	60a3      	str	r3, [r4, #8]
 8015018:	e7f2      	b.n	8015000 <__swsetup_r+0xac>
 801501a:	2000      	movs	r0, #0
 801501c:	e7f7      	b.n	801500e <__swsetup_r+0xba>
 801501e:	bf00      	nop
 8015020:	200001ac 	.word	0x200001ac
 8015024:	0801a164 	.word	0x0801a164
 8015028:	0801a184 	.word	0x0801a184
 801502c:	0801a144 	.word	0x0801a144

08015030 <quorem>:
 8015030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015034:	6903      	ldr	r3, [r0, #16]
 8015036:	690c      	ldr	r4, [r1, #16]
 8015038:	429c      	cmp	r4, r3
 801503a:	4680      	mov	r8, r0
 801503c:	f300 8082 	bgt.w	8015144 <quorem+0x114>
 8015040:	3c01      	subs	r4, #1
 8015042:	f101 0714 	add.w	r7, r1, #20
 8015046:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801504a:	f100 0614 	add.w	r6, r0, #20
 801504e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015052:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015056:	eb06 030e 	add.w	r3, r6, lr
 801505a:	3501      	adds	r5, #1
 801505c:	eb07 090e 	add.w	r9, r7, lr
 8015060:	9301      	str	r3, [sp, #4]
 8015062:	fbb0 f5f5 	udiv	r5, r0, r5
 8015066:	b395      	cbz	r5, 80150ce <quorem+0x9e>
 8015068:	f04f 0a00 	mov.w	sl, #0
 801506c:	4638      	mov	r0, r7
 801506e:	46b4      	mov	ip, r6
 8015070:	46d3      	mov	fp, sl
 8015072:	f850 2b04 	ldr.w	r2, [r0], #4
 8015076:	b293      	uxth	r3, r2
 8015078:	fb05 a303 	mla	r3, r5, r3, sl
 801507c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015080:	b29b      	uxth	r3, r3
 8015082:	ebab 0303 	sub.w	r3, fp, r3
 8015086:	0c12      	lsrs	r2, r2, #16
 8015088:	f8bc b000 	ldrh.w	fp, [ip]
 801508c:	fb05 a202 	mla	r2, r5, r2, sl
 8015090:	fa13 f38b 	uxtah	r3, r3, fp
 8015094:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015098:	fa1f fb82 	uxth.w	fp, r2
 801509c:	f8dc 2000 	ldr.w	r2, [ip]
 80150a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80150a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150ae:	4581      	cmp	r9, r0
 80150b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80150b4:	f84c 3b04 	str.w	r3, [ip], #4
 80150b8:	d2db      	bcs.n	8015072 <quorem+0x42>
 80150ba:	f856 300e 	ldr.w	r3, [r6, lr]
 80150be:	b933      	cbnz	r3, 80150ce <quorem+0x9e>
 80150c0:	9b01      	ldr	r3, [sp, #4]
 80150c2:	3b04      	subs	r3, #4
 80150c4:	429e      	cmp	r6, r3
 80150c6:	461a      	mov	r2, r3
 80150c8:	d330      	bcc.n	801512c <quorem+0xfc>
 80150ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80150ce:	4640      	mov	r0, r8
 80150d0:	f001 f9ff 	bl	80164d2 <__mcmp>
 80150d4:	2800      	cmp	r0, #0
 80150d6:	db25      	blt.n	8015124 <quorem+0xf4>
 80150d8:	3501      	adds	r5, #1
 80150da:	4630      	mov	r0, r6
 80150dc:	f04f 0e00 	mov.w	lr, #0
 80150e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80150e4:	f8d0 c000 	ldr.w	ip, [r0]
 80150e8:	b293      	uxth	r3, r2
 80150ea:	ebae 0303 	sub.w	r3, lr, r3
 80150ee:	0c12      	lsrs	r2, r2, #16
 80150f0:	fa13 f38c 	uxtah	r3, r3, ip
 80150f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80150f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015102:	45b9      	cmp	r9, r7
 8015104:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015108:	f840 3b04 	str.w	r3, [r0], #4
 801510c:	d2e8      	bcs.n	80150e0 <quorem+0xb0>
 801510e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015112:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015116:	b92a      	cbnz	r2, 8015124 <quorem+0xf4>
 8015118:	3b04      	subs	r3, #4
 801511a:	429e      	cmp	r6, r3
 801511c:	461a      	mov	r2, r3
 801511e:	d30b      	bcc.n	8015138 <quorem+0x108>
 8015120:	f8c8 4010 	str.w	r4, [r8, #16]
 8015124:	4628      	mov	r0, r5
 8015126:	b003      	add	sp, #12
 8015128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801512c:	6812      	ldr	r2, [r2, #0]
 801512e:	3b04      	subs	r3, #4
 8015130:	2a00      	cmp	r2, #0
 8015132:	d1ca      	bne.n	80150ca <quorem+0x9a>
 8015134:	3c01      	subs	r4, #1
 8015136:	e7c5      	b.n	80150c4 <quorem+0x94>
 8015138:	6812      	ldr	r2, [r2, #0]
 801513a:	3b04      	subs	r3, #4
 801513c:	2a00      	cmp	r2, #0
 801513e:	d1ef      	bne.n	8015120 <quorem+0xf0>
 8015140:	3c01      	subs	r4, #1
 8015142:	e7ea      	b.n	801511a <quorem+0xea>
 8015144:	2000      	movs	r0, #0
 8015146:	e7ee      	b.n	8015126 <quorem+0xf6>

08015148 <_dtoa_r>:
 8015148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514c:	ec57 6b10 	vmov	r6, r7, d0
 8015150:	b097      	sub	sp, #92	; 0x5c
 8015152:	e9cd 6700 	strd	r6, r7, [sp]
 8015156:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015158:	9107      	str	r1, [sp, #28]
 801515a:	4604      	mov	r4, r0
 801515c:	920a      	str	r2, [sp, #40]	; 0x28
 801515e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015160:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015162:	b93e      	cbnz	r6, 8015174 <_dtoa_r+0x2c>
 8015164:	2010      	movs	r0, #16
 8015166:	f7fd f944 	bl	80123f2 <malloc>
 801516a:	6260      	str	r0, [r4, #36]	; 0x24
 801516c:	6046      	str	r6, [r0, #4]
 801516e:	6086      	str	r6, [r0, #8]
 8015170:	6006      	str	r6, [r0, #0]
 8015172:	60c6      	str	r6, [r0, #12]
 8015174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015176:	6819      	ldr	r1, [r3, #0]
 8015178:	b151      	cbz	r1, 8015190 <_dtoa_r+0x48>
 801517a:	685a      	ldr	r2, [r3, #4]
 801517c:	604a      	str	r2, [r1, #4]
 801517e:	2301      	movs	r3, #1
 8015180:	4093      	lsls	r3, r2
 8015182:	608b      	str	r3, [r1, #8]
 8015184:	4620      	mov	r0, r4
 8015186:	f000 ffcf 	bl	8016128 <_Bfree>
 801518a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801518c:	2200      	movs	r2, #0
 801518e:	601a      	str	r2, [r3, #0]
 8015190:	9b01      	ldr	r3, [sp, #4]
 8015192:	2b00      	cmp	r3, #0
 8015194:	bfbf      	itttt	lt
 8015196:	2301      	movlt	r3, #1
 8015198:	602b      	strlt	r3, [r5, #0]
 801519a:	9b01      	ldrlt	r3, [sp, #4]
 801519c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80151a0:	bfb2      	itee	lt
 80151a2:	9301      	strlt	r3, [sp, #4]
 80151a4:	2300      	movge	r3, #0
 80151a6:	602b      	strge	r3, [r5, #0]
 80151a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151ac:	4ba8      	ldr	r3, [pc, #672]	; (8015450 <_dtoa_r+0x308>)
 80151ae:	ea33 0308 	bics.w	r3, r3, r8
 80151b2:	d11b      	bne.n	80151ec <_dtoa_r+0xa4>
 80151b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80151ba:	6013      	str	r3, [r2, #0]
 80151bc:	9b00      	ldr	r3, [sp, #0]
 80151be:	b923      	cbnz	r3, 80151ca <_dtoa_r+0x82>
 80151c0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80151c4:	2800      	cmp	r0, #0
 80151c6:	f000 8578 	beq.w	8015cba <_dtoa_r+0xb72>
 80151ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151cc:	b953      	cbnz	r3, 80151e4 <_dtoa_r+0x9c>
 80151ce:	4ba1      	ldr	r3, [pc, #644]	; (8015454 <_dtoa_r+0x30c>)
 80151d0:	e021      	b.n	8015216 <_dtoa_r+0xce>
 80151d2:	4ba1      	ldr	r3, [pc, #644]	; (8015458 <_dtoa_r+0x310>)
 80151d4:	9302      	str	r3, [sp, #8]
 80151d6:	3308      	adds	r3, #8
 80151d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80151da:	6013      	str	r3, [r2, #0]
 80151dc:	9802      	ldr	r0, [sp, #8]
 80151de:	b017      	add	sp, #92	; 0x5c
 80151e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e4:	4b9b      	ldr	r3, [pc, #620]	; (8015454 <_dtoa_r+0x30c>)
 80151e6:	9302      	str	r3, [sp, #8]
 80151e8:	3303      	adds	r3, #3
 80151ea:	e7f5      	b.n	80151d8 <_dtoa_r+0x90>
 80151ec:	e9dd 6700 	ldrd	r6, r7, [sp]
 80151f0:	2200      	movs	r2, #0
 80151f2:	2300      	movs	r3, #0
 80151f4:	4630      	mov	r0, r6
 80151f6:	4639      	mov	r1, r7
 80151f8:	f7eb fc92 	bl	8000b20 <__aeabi_dcmpeq>
 80151fc:	4681      	mov	r9, r0
 80151fe:	b160      	cbz	r0, 801521a <_dtoa_r+0xd2>
 8015200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015202:	2301      	movs	r3, #1
 8015204:	6013      	str	r3, [r2, #0]
 8015206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015208:	2b00      	cmp	r3, #0
 801520a:	f000 8553 	beq.w	8015cb4 <_dtoa_r+0xb6c>
 801520e:	4b93      	ldr	r3, [pc, #588]	; (801545c <_dtoa_r+0x314>)
 8015210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015212:	6013      	str	r3, [r2, #0]
 8015214:	3b01      	subs	r3, #1
 8015216:	9302      	str	r3, [sp, #8]
 8015218:	e7e0      	b.n	80151dc <_dtoa_r+0x94>
 801521a:	aa14      	add	r2, sp, #80	; 0x50
 801521c:	a915      	add	r1, sp, #84	; 0x54
 801521e:	ec47 6b10 	vmov	d0, r6, r7
 8015222:	4620      	mov	r0, r4
 8015224:	f001 f9cd 	bl	80165c2 <__d2b>
 8015228:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801522c:	4682      	mov	sl, r0
 801522e:	2d00      	cmp	r5, #0
 8015230:	d07e      	beq.n	8015330 <_dtoa_r+0x1e8>
 8015232:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015236:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801523a:	4630      	mov	r0, r6
 801523c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015240:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015244:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8015248:	2200      	movs	r2, #0
 801524a:	4b85      	ldr	r3, [pc, #532]	; (8015460 <_dtoa_r+0x318>)
 801524c:	f7eb f84c 	bl	80002e8 <__aeabi_dsub>
 8015250:	a379      	add	r3, pc, #484	; (adr r3, 8015438 <_dtoa_r+0x2f0>)
 8015252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015256:	f7eb f9fb 	bl	8000650 <__aeabi_dmul>
 801525a:	a379      	add	r3, pc, #484	; (adr r3, 8015440 <_dtoa_r+0x2f8>)
 801525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015260:	f7eb f844 	bl	80002ec <__adddf3>
 8015264:	4606      	mov	r6, r0
 8015266:	4628      	mov	r0, r5
 8015268:	460f      	mov	r7, r1
 801526a:	f7eb f98b 	bl	8000584 <__aeabi_i2d>
 801526e:	a376      	add	r3, pc, #472	; (adr r3, 8015448 <_dtoa_r+0x300>)
 8015270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015274:	f7eb f9ec 	bl	8000650 <__aeabi_dmul>
 8015278:	4602      	mov	r2, r0
 801527a:	460b      	mov	r3, r1
 801527c:	4630      	mov	r0, r6
 801527e:	4639      	mov	r1, r7
 8015280:	f7eb f834 	bl	80002ec <__adddf3>
 8015284:	4606      	mov	r6, r0
 8015286:	460f      	mov	r7, r1
 8015288:	f7eb fc92 	bl	8000bb0 <__aeabi_d2iz>
 801528c:	2200      	movs	r2, #0
 801528e:	4683      	mov	fp, r0
 8015290:	2300      	movs	r3, #0
 8015292:	4630      	mov	r0, r6
 8015294:	4639      	mov	r1, r7
 8015296:	f7eb fc4d 	bl	8000b34 <__aeabi_dcmplt>
 801529a:	b158      	cbz	r0, 80152b4 <_dtoa_r+0x16c>
 801529c:	4658      	mov	r0, fp
 801529e:	f7eb f971 	bl	8000584 <__aeabi_i2d>
 80152a2:	4602      	mov	r2, r0
 80152a4:	460b      	mov	r3, r1
 80152a6:	4630      	mov	r0, r6
 80152a8:	4639      	mov	r1, r7
 80152aa:	f7eb fc39 	bl	8000b20 <__aeabi_dcmpeq>
 80152ae:	b908      	cbnz	r0, 80152b4 <_dtoa_r+0x16c>
 80152b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80152b4:	f1bb 0f16 	cmp.w	fp, #22
 80152b8:	d859      	bhi.n	801536e <_dtoa_r+0x226>
 80152ba:	496a      	ldr	r1, [pc, #424]	; (8015464 <_dtoa_r+0x31c>)
 80152bc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80152c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152c8:	f7eb fc52 	bl	8000b70 <__aeabi_dcmpgt>
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d050      	beq.n	8015372 <_dtoa_r+0x22a>
 80152d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80152d4:	2300      	movs	r3, #0
 80152d6:	930e      	str	r3, [sp, #56]	; 0x38
 80152d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152da:	1b5d      	subs	r5, r3, r5
 80152dc:	1e6b      	subs	r3, r5, #1
 80152de:	9306      	str	r3, [sp, #24]
 80152e0:	bf45      	ittet	mi
 80152e2:	f1c5 0301 	rsbmi	r3, r5, #1
 80152e6:	9305      	strmi	r3, [sp, #20]
 80152e8:	2300      	movpl	r3, #0
 80152ea:	2300      	movmi	r3, #0
 80152ec:	bf4c      	ite	mi
 80152ee:	9306      	strmi	r3, [sp, #24]
 80152f0:	9305      	strpl	r3, [sp, #20]
 80152f2:	f1bb 0f00 	cmp.w	fp, #0
 80152f6:	db3e      	blt.n	8015376 <_dtoa_r+0x22e>
 80152f8:	9b06      	ldr	r3, [sp, #24]
 80152fa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80152fe:	445b      	add	r3, fp
 8015300:	9306      	str	r3, [sp, #24]
 8015302:	2300      	movs	r3, #0
 8015304:	9308      	str	r3, [sp, #32]
 8015306:	9b07      	ldr	r3, [sp, #28]
 8015308:	2b09      	cmp	r3, #9
 801530a:	f200 80af 	bhi.w	801546c <_dtoa_r+0x324>
 801530e:	2b05      	cmp	r3, #5
 8015310:	bfc4      	itt	gt
 8015312:	3b04      	subgt	r3, #4
 8015314:	9307      	strgt	r3, [sp, #28]
 8015316:	9b07      	ldr	r3, [sp, #28]
 8015318:	f1a3 0302 	sub.w	r3, r3, #2
 801531c:	bfcc      	ite	gt
 801531e:	2600      	movgt	r6, #0
 8015320:	2601      	movle	r6, #1
 8015322:	2b03      	cmp	r3, #3
 8015324:	f200 80ae 	bhi.w	8015484 <_dtoa_r+0x33c>
 8015328:	e8df f003 	tbb	[pc, r3]
 801532c:	772f8482 	.word	0x772f8482
 8015330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015332:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015334:	441d      	add	r5, r3
 8015336:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801533a:	2b20      	cmp	r3, #32
 801533c:	dd11      	ble.n	8015362 <_dtoa_r+0x21a>
 801533e:	9a00      	ldr	r2, [sp, #0]
 8015340:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015344:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8015348:	fa22 f000 	lsr.w	r0, r2, r0
 801534c:	fa08 f303 	lsl.w	r3, r8, r3
 8015350:	4318      	orrs	r0, r3
 8015352:	f7eb f907 	bl	8000564 <__aeabi_ui2d>
 8015356:	2301      	movs	r3, #1
 8015358:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801535c:	3d01      	subs	r5, #1
 801535e:	9312      	str	r3, [sp, #72]	; 0x48
 8015360:	e772      	b.n	8015248 <_dtoa_r+0x100>
 8015362:	f1c3 0020 	rsb	r0, r3, #32
 8015366:	9b00      	ldr	r3, [sp, #0]
 8015368:	fa03 f000 	lsl.w	r0, r3, r0
 801536c:	e7f1      	b.n	8015352 <_dtoa_r+0x20a>
 801536e:	2301      	movs	r3, #1
 8015370:	e7b1      	b.n	80152d6 <_dtoa_r+0x18e>
 8015372:	900e      	str	r0, [sp, #56]	; 0x38
 8015374:	e7b0      	b.n	80152d8 <_dtoa_r+0x190>
 8015376:	9b05      	ldr	r3, [sp, #20]
 8015378:	eba3 030b 	sub.w	r3, r3, fp
 801537c:	9305      	str	r3, [sp, #20]
 801537e:	f1cb 0300 	rsb	r3, fp, #0
 8015382:	9308      	str	r3, [sp, #32]
 8015384:	2300      	movs	r3, #0
 8015386:	930b      	str	r3, [sp, #44]	; 0x2c
 8015388:	e7bd      	b.n	8015306 <_dtoa_r+0x1be>
 801538a:	2301      	movs	r3, #1
 801538c:	9309      	str	r3, [sp, #36]	; 0x24
 801538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015390:	2b00      	cmp	r3, #0
 8015392:	dd7a      	ble.n	801548a <_dtoa_r+0x342>
 8015394:	9304      	str	r3, [sp, #16]
 8015396:	9303      	str	r3, [sp, #12]
 8015398:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801539a:	2200      	movs	r2, #0
 801539c:	606a      	str	r2, [r5, #4]
 801539e:	2104      	movs	r1, #4
 80153a0:	f101 0214 	add.w	r2, r1, #20
 80153a4:	429a      	cmp	r2, r3
 80153a6:	d975      	bls.n	8015494 <_dtoa_r+0x34c>
 80153a8:	6869      	ldr	r1, [r5, #4]
 80153aa:	4620      	mov	r0, r4
 80153ac:	f000 fe88 	bl	80160c0 <_Balloc>
 80153b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153b2:	6028      	str	r0, [r5, #0]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	9302      	str	r3, [sp, #8]
 80153b8:	9b03      	ldr	r3, [sp, #12]
 80153ba:	2b0e      	cmp	r3, #14
 80153bc:	f200 80e5 	bhi.w	801558a <_dtoa_r+0x442>
 80153c0:	2e00      	cmp	r6, #0
 80153c2:	f000 80e2 	beq.w	801558a <_dtoa_r+0x442>
 80153c6:	ed9d 7b00 	vldr	d7, [sp]
 80153ca:	f1bb 0f00 	cmp.w	fp, #0
 80153ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80153d2:	dd74      	ble.n	80154be <_dtoa_r+0x376>
 80153d4:	4a23      	ldr	r2, [pc, #140]	; (8015464 <_dtoa_r+0x31c>)
 80153d6:	f00b 030f 	and.w	r3, fp, #15
 80153da:	ea4f 162b 	mov.w	r6, fp, asr #4
 80153de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80153e2:	06f0      	lsls	r0, r6, #27
 80153e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80153e8:	d559      	bpl.n	801549e <_dtoa_r+0x356>
 80153ea:	4b1f      	ldr	r3, [pc, #124]	; (8015468 <_dtoa_r+0x320>)
 80153ec:	ec51 0b17 	vmov	r0, r1, d7
 80153f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80153f4:	f7eb fa56 	bl	80008a4 <__aeabi_ddiv>
 80153f8:	e9cd 0100 	strd	r0, r1, [sp]
 80153fc:	f006 060f 	and.w	r6, r6, #15
 8015400:	2503      	movs	r5, #3
 8015402:	4f19      	ldr	r7, [pc, #100]	; (8015468 <_dtoa_r+0x320>)
 8015404:	2e00      	cmp	r6, #0
 8015406:	d14c      	bne.n	80154a2 <_dtoa_r+0x35a>
 8015408:	4642      	mov	r2, r8
 801540a:	464b      	mov	r3, r9
 801540c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015410:	f7eb fa48 	bl	80008a4 <__aeabi_ddiv>
 8015414:	e9cd 0100 	strd	r0, r1, [sp]
 8015418:	e06a      	b.n	80154f0 <_dtoa_r+0x3a8>
 801541a:	2301      	movs	r3, #1
 801541c:	9309      	str	r3, [sp, #36]	; 0x24
 801541e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015420:	445b      	add	r3, fp
 8015422:	9304      	str	r3, [sp, #16]
 8015424:	3301      	adds	r3, #1
 8015426:	2b01      	cmp	r3, #1
 8015428:	9303      	str	r3, [sp, #12]
 801542a:	bfb8      	it	lt
 801542c:	2301      	movlt	r3, #1
 801542e:	e7b3      	b.n	8015398 <_dtoa_r+0x250>
 8015430:	2300      	movs	r3, #0
 8015432:	e7ab      	b.n	801538c <_dtoa_r+0x244>
 8015434:	2300      	movs	r3, #0
 8015436:	e7f1      	b.n	801541c <_dtoa_r+0x2d4>
 8015438:	636f4361 	.word	0x636f4361
 801543c:	3fd287a7 	.word	0x3fd287a7
 8015440:	8b60c8b3 	.word	0x8b60c8b3
 8015444:	3fc68a28 	.word	0x3fc68a28
 8015448:	509f79fb 	.word	0x509f79fb
 801544c:	3fd34413 	.word	0x3fd34413
 8015450:	7ff00000 	.word	0x7ff00000
 8015454:	0801a140 	.word	0x0801a140
 8015458:	0801a137 	.word	0x0801a137
 801545c:	0801a013 	.word	0x0801a013
 8015460:	3ff80000 	.word	0x3ff80000
 8015464:	0801a1d0 	.word	0x0801a1d0
 8015468:	0801a1a8 	.word	0x0801a1a8
 801546c:	2601      	movs	r6, #1
 801546e:	2300      	movs	r3, #0
 8015470:	9307      	str	r3, [sp, #28]
 8015472:	9609      	str	r6, [sp, #36]	; 0x24
 8015474:	f04f 33ff 	mov.w	r3, #4294967295
 8015478:	9304      	str	r3, [sp, #16]
 801547a:	9303      	str	r3, [sp, #12]
 801547c:	2200      	movs	r2, #0
 801547e:	2312      	movs	r3, #18
 8015480:	920a      	str	r2, [sp, #40]	; 0x28
 8015482:	e789      	b.n	8015398 <_dtoa_r+0x250>
 8015484:	2301      	movs	r3, #1
 8015486:	9309      	str	r3, [sp, #36]	; 0x24
 8015488:	e7f4      	b.n	8015474 <_dtoa_r+0x32c>
 801548a:	2301      	movs	r3, #1
 801548c:	9304      	str	r3, [sp, #16]
 801548e:	9303      	str	r3, [sp, #12]
 8015490:	461a      	mov	r2, r3
 8015492:	e7f5      	b.n	8015480 <_dtoa_r+0x338>
 8015494:	686a      	ldr	r2, [r5, #4]
 8015496:	3201      	adds	r2, #1
 8015498:	606a      	str	r2, [r5, #4]
 801549a:	0049      	lsls	r1, r1, #1
 801549c:	e780      	b.n	80153a0 <_dtoa_r+0x258>
 801549e:	2502      	movs	r5, #2
 80154a0:	e7af      	b.n	8015402 <_dtoa_r+0x2ba>
 80154a2:	07f1      	lsls	r1, r6, #31
 80154a4:	d508      	bpl.n	80154b8 <_dtoa_r+0x370>
 80154a6:	4640      	mov	r0, r8
 80154a8:	4649      	mov	r1, r9
 80154aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80154ae:	f7eb f8cf 	bl	8000650 <__aeabi_dmul>
 80154b2:	3501      	adds	r5, #1
 80154b4:	4680      	mov	r8, r0
 80154b6:	4689      	mov	r9, r1
 80154b8:	1076      	asrs	r6, r6, #1
 80154ba:	3708      	adds	r7, #8
 80154bc:	e7a2      	b.n	8015404 <_dtoa_r+0x2bc>
 80154be:	f000 809d 	beq.w	80155fc <_dtoa_r+0x4b4>
 80154c2:	f1cb 0600 	rsb	r6, fp, #0
 80154c6:	4b9f      	ldr	r3, [pc, #636]	; (8015744 <_dtoa_r+0x5fc>)
 80154c8:	4f9f      	ldr	r7, [pc, #636]	; (8015748 <_dtoa_r+0x600>)
 80154ca:	f006 020f 	and.w	r2, r6, #15
 80154ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80154da:	f7eb f8b9 	bl	8000650 <__aeabi_dmul>
 80154de:	e9cd 0100 	strd	r0, r1, [sp]
 80154e2:	1136      	asrs	r6, r6, #4
 80154e4:	2300      	movs	r3, #0
 80154e6:	2502      	movs	r5, #2
 80154e8:	2e00      	cmp	r6, #0
 80154ea:	d17c      	bne.n	80155e6 <_dtoa_r+0x49e>
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d191      	bne.n	8015414 <_dtoa_r+0x2cc>
 80154f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	f000 8084 	beq.w	8015600 <_dtoa_r+0x4b8>
 80154f8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80154fc:	2200      	movs	r2, #0
 80154fe:	4b93      	ldr	r3, [pc, #588]	; (801574c <_dtoa_r+0x604>)
 8015500:	4640      	mov	r0, r8
 8015502:	4649      	mov	r1, r9
 8015504:	f7eb fb16 	bl	8000b34 <__aeabi_dcmplt>
 8015508:	2800      	cmp	r0, #0
 801550a:	d079      	beq.n	8015600 <_dtoa_r+0x4b8>
 801550c:	9b03      	ldr	r3, [sp, #12]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d076      	beq.n	8015600 <_dtoa_r+0x4b8>
 8015512:	9b04      	ldr	r3, [sp, #16]
 8015514:	2b00      	cmp	r3, #0
 8015516:	dd34      	ble.n	8015582 <_dtoa_r+0x43a>
 8015518:	2200      	movs	r2, #0
 801551a:	4b8d      	ldr	r3, [pc, #564]	; (8015750 <_dtoa_r+0x608>)
 801551c:	4640      	mov	r0, r8
 801551e:	4649      	mov	r1, r9
 8015520:	f7eb f896 	bl	8000650 <__aeabi_dmul>
 8015524:	e9cd 0100 	strd	r0, r1, [sp]
 8015528:	9e04      	ldr	r6, [sp, #16]
 801552a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801552e:	3501      	adds	r5, #1
 8015530:	4628      	mov	r0, r5
 8015532:	f7eb f827 	bl	8000584 <__aeabi_i2d>
 8015536:	e9dd 2300 	ldrd	r2, r3, [sp]
 801553a:	f7eb f889 	bl	8000650 <__aeabi_dmul>
 801553e:	2200      	movs	r2, #0
 8015540:	4b84      	ldr	r3, [pc, #528]	; (8015754 <_dtoa_r+0x60c>)
 8015542:	f7ea fed3 	bl	80002ec <__adddf3>
 8015546:	4680      	mov	r8, r0
 8015548:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801554c:	2e00      	cmp	r6, #0
 801554e:	d15a      	bne.n	8015606 <_dtoa_r+0x4be>
 8015550:	2200      	movs	r2, #0
 8015552:	4b81      	ldr	r3, [pc, #516]	; (8015758 <_dtoa_r+0x610>)
 8015554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015558:	f7ea fec6 	bl	80002e8 <__aeabi_dsub>
 801555c:	4642      	mov	r2, r8
 801555e:	464b      	mov	r3, r9
 8015560:	e9cd 0100 	strd	r0, r1, [sp]
 8015564:	f7eb fb04 	bl	8000b70 <__aeabi_dcmpgt>
 8015568:	2800      	cmp	r0, #0
 801556a:	f040 829b 	bne.w	8015aa4 <_dtoa_r+0x95c>
 801556e:	4642      	mov	r2, r8
 8015570:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015578:	f7eb fadc 	bl	8000b34 <__aeabi_dcmplt>
 801557c:	2800      	cmp	r0, #0
 801557e:	f040 828f 	bne.w	8015aa0 <_dtoa_r+0x958>
 8015582:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015586:	e9cd 2300 	strd	r2, r3, [sp]
 801558a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801558c:	2b00      	cmp	r3, #0
 801558e:	f2c0 8150 	blt.w	8015832 <_dtoa_r+0x6ea>
 8015592:	f1bb 0f0e 	cmp.w	fp, #14
 8015596:	f300 814c 	bgt.w	8015832 <_dtoa_r+0x6ea>
 801559a:	4b6a      	ldr	r3, [pc, #424]	; (8015744 <_dtoa_r+0x5fc>)
 801559c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80155a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80155a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	f280 80da 	bge.w	8015760 <_dtoa_r+0x618>
 80155ac:	9b03      	ldr	r3, [sp, #12]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	f300 80d6 	bgt.w	8015760 <_dtoa_r+0x618>
 80155b4:	f040 8273 	bne.w	8015a9e <_dtoa_r+0x956>
 80155b8:	2200      	movs	r2, #0
 80155ba:	4b67      	ldr	r3, [pc, #412]	; (8015758 <_dtoa_r+0x610>)
 80155bc:	4640      	mov	r0, r8
 80155be:	4649      	mov	r1, r9
 80155c0:	f7eb f846 	bl	8000650 <__aeabi_dmul>
 80155c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155c8:	f7eb fac8 	bl	8000b5c <__aeabi_dcmpge>
 80155cc:	9e03      	ldr	r6, [sp, #12]
 80155ce:	4637      	mov	r7, r6
 80155d0:	2800      	cmp	r0, #0
 80155d2:	f040 824a 	bne.w	8015a6a <_dtoa_r+0x922>
 80155d6:	9b02      	ldr	r3, [sp, #8]
 80155d8:	9a02      	ldr	r2, [sp, #8]
 80155da:	1c5d      	adds	r5, r3, #1
 80155dc:	2331      	movs	r3, #49	; 0x31
 80155de:	7013      	strb	r3, [r2, #0]
 80155e0:	f10b 0b01 	add.w	fp, fp, #1
 80155e4:	e245      	b.n	8015a72 <_dtoa_r+0x92a>
 80155e6:	07f2      	lsls	r2, r6, #31
 80155e8:	d505      	bpl.n	80155f6 <_dtoa_r+0x4ae>
 80155ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155ee:	f7eb f82f 	bl	8000650 <__aeabi_dmul>
 80155f2:	3501      	adds	r5, #1
 80155f4:	2301      	movs	r3, #1
 80155f6:	1076      	asrs	r6, r6, #1
 80155f8:	3708      	adds	r7, #8
 80155fa:	e775      	b.n	80154e8 <_dtoa_r+0x3a0>
 80155fc:	2502      	movs	r5, #2
 80155fe:	e777      	b.n	80154f0 <_dtoa_r+0x3a8>
 8015600:	465f      	mov	r7, fp
 8015602:	9e03      	ldr	r6, [sp, #12]
 8015604:	e794      	b.n	8015530 <_dtoa_r+0x3e8>
 8015606:	9a02      	ldr	r2, [sp, #8]
 8015608:	4b4e      	ldr	r3, [pc, #312]	; (8015744 <_dtoa_r+0x5fc>)
 801560a:	4432      	add	r2, r6
 801560c:	9213      	str	r2, [sp, #76]	; 0x4c
 801560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015610:	1e71      	subs	r1, r6, #1
 8015612:	2a00      	cmp	r2, #0
 8015614:	d048      	beq.n	80156a8 <_dtoa_r+0x560>
 8015616:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561e:	2000      	movs	r0, #0
 8015620:	494e      	ldr	r1, [pc, #312]	; (801575c <_dtoa_r+0x614>)
 8015622:	f7eb f93f 	bl	80008a4 <__aeabi_ddiv>
 8015626:	4642      	mov	r2, r8
 8015628:	464b      	mov	r3, r9
 801562a:	f7ea fe5d 	bl	80002e8 <__aeabi_dsub>
 801562e:	9d02      	ldr	r5, [sp, #8]
 8015630:	4680      	mov	r8, r0
 8015632:	4689      	mov	r9, r1
 8015634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015638:	f7eb faba 	bl	8000bb0 <__aeabi_d2iz>
 801563c:	4606      	mov	r6, r0
 801563e:	f7ea ffa1 	bl	8000584 <__aeabi_i2d>
 8015642:	4602      	mov	r2, r0
 8015644:	460b      	mov	r3, r1
 8015646:	e9dd 0100 	ldrd	r0, r1, [sp]
 801564a:	f7ea fe4d 	bl	80002e8 <__aeabi_dsub>
 801564e:	3630      	adds	r6, #48	; 0x30
 8015650:	f805 6b01 	strb.w	r6, [r5], #1
 8015654:	4642      	mov	r2, r8
 8015656:	464b      	mov	r3, r9
 8015658:	e9cd 0100 	strd	r0, r1, [sp]
 801565c:	f7eb fa6a 	bl	8000b34 <__aeabi_dcmplt>
 8015660:	2800      	cmp	r0, #0
 8015662:	d165      	bne.n	8015730 <_dtoa_r+0x5e8>
 8015664:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015668:	2000      	movs	r0, #0
 801566a:	4938      	ldr	r1, [pc, #224]	; (801574c <_dtoa_r+0x604>)
 801566c:	f7ea fe3c 	bl	80002e8 <__aeabi_dsub>
 8015670:	4642      	mov	r2, r8
 8015672:	464b      	mov	r3, r9
 8015674:	f7eb fa5e 	bl	8000b34 <__aeabi_dcmplt>
 8015678:	2800      	cmp	r0, #0
 801567a:	f040 80ba 	bne.w	80157f2 <_dtoa_r+0x6aa>
 801567e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015680:	429d      	cmp	r5, r3
 8015682:	f43f af7e 	beq.w	8015582 <_dtoa_r+0x43a>
 8015686:	2200      	movs	r2, #0
 8015688:	4b31      	ldr	r3, [pc, #196]	; (8015750 <_dtoa_r+0x608>)
 801568a:	4640      	mov	r0, r8
 801568c:	4649      	mov	r1, r9
 801568e:	f7ea ffdf 	bl	8000650 <__aeabi_dmul>
 8015692:	2200      	movs	r2, #0
 8015694:	4680      	mov	r8, r0
 8015696:	4689      	mov	r9, r1
 8015698:	4b2d      	ldr	r3, [pc, #180]	; (8015750 <_dtoa_r+0x608>)
 801569a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801569e:	f7ea ffd7 	bl	8000650 <__aeabi_dmul>
 80156a2:	e9cd 0100 	strd	r0, r1, [sp]
 80156a6:	e7c5      	b.n	8015634 <_dtoa_r+0x4ec>
 80156a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80156ac:	4642      	mov	r2, r8
 80156ae:	464b      	mov	r3, r9
 80156b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156b4:	f7ea ffcc 	bl	8000650 <__aeabi_dmul>
 80156b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80156bc:	9d02      	ldr	r5, [sp, #8]
 80156be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156c2:	f7eb fa75 	bl	8000bb0 <__aeabi_d2iz>
 80156c6:	4606      	mov	r6, r0
 80156c8:	f7ea ff5c 	bl	8000584 <__aeabi_i2d>
 80156cc:	3630      	adds	r6, #48	; 0x30
 80156ce:	4602      	mov	r2, r0
 80156d0:	460b      	mov	r3, r1
 80156d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156d6:	f7ea fe07 	bl	80002e8 <__aeabi_dsub>
 80156da:	f805 6b01 	strb.w	r6, [r5], #1
 80156de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80156e0:	42ab      	cmp	r3, r5
 80156e2:	4680      	mov	r8, r0
 80156e4:	4689      	mov	r9, r1
 80156e6:	f04f 0200 	mov.w	r2, #0
 80156ea:	d125      	bne.n	8015738 <_dtoa_r+0x5f0>
 80156ec:	4b1b      	ldr	r3, [pc, #108]	; (801575c <_dtoa_r+0x614>)
 80156ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80156f2:	f7ea fdfb 	bl	80002ec <__adddf3>
 80156f6:	4602      	mov	r2, r0
 80156f8:	460b      	mov	r3, r1
 80156fa:	4640      	mov	r0, r8
 80156fc:	4649      	mov	r1, r9
 80156fe:	f7eb fa37 	bl	8000b70 <__aeabi_dcmpgt>
 8015702:	2800      	cmp	r0, #0
 8015704:	d175      	bne.n	80157f2 <_dtoa_r+0x6aa>
 8015706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801570a:	2000      	movs	r0, #0
 801570c:	4913      	ldr	r1, [pc, #76]	; (801575c <_dtoa_r+0x614>)
 801570e:	f7ea fdeb 	bl	80002e8 <__aeabi_dsub>
 8015712:	4602      	mov	r2, r0
 8015714:	460b      	mov	r3, r1
 8015716:	4640      	mov	r0, r8
 8015718:	4649      	mov	r1, r9
 801571a:	f7eb fa0b 	bl	8000b34 <__aeabi_dcmplt>
 801571e:	2800      	cmp	r0, #0
 8015720:	f43f af2f 	beq.w	8015582 <_dtoa_r+0x43a>
 8015724:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015728:	2b30      	cmp	r3, #48	; 0x30
 801572a:	f105 32ff 	add.w	r2, r5, #4294967295
 801572e:	d001      	beq.n	8015734 <_dtoa_r+0x5ec>
 8015730:	46bb      	mov	fp, r7
 8015732:	e04d      	b.n	80157d0 <_dtoa_r+0x688>
 8015734:	4615      	mov	r5, r2
 8015736:	e7f5      	b.n	8015724 <_dtoa_r+0x5dc>
 8015738:	4b05      	ldr	r3, [pc, #20]	; (8015750 <_dtoa_r+0x608>)
 801573a:	f7ea ff89 	bl	8000650 <__aeabi_dmul>
 801573e:	e9cd 0100 	strd	r0, r1, [sp]
 8015742:	e7bc      	b.n	80156be <_dtoa_r+0x576>
 8015744:	0801a1d0 	.word	0x0801a1d0
 8015748:	0801a1a8 	.word	0x0801a1a8
 801574c:	3ff00000 	.word	0x3ff00000
 8015750:	40240000 	.word	0x40240000
 8015754:	401c0000 	.word	0x401c0000
 8015758:	40140000 	.word	0x40140000
 801575c:	3fe00000 	.word	0x3fe00000
 8015760:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015764:	9d02      	ldr	r5, [sp, #8]
 8015766:	4642      	mov	r2, r8
 8015768:	464b      	mov	r3, r9
 801576a:	4630      	mov	r0, r6
 801576c:	4639      	mov	r1, r7
 801576e:	f7eb f899 	bl	80008a4 <__aeabi_ddiv>
 8015772:	f7eb fa1d 	bl	8000bb0 <__aeabi_d2iz>
 8015776:	9000      	str	r0, [sp, #0]
 8015778:	f7ea ff04 	bl	8000584 <__aeabi_i2d>
 801577c:	4642      	mov	r2, r8
 801577e:	464b      	mov	r3, r9
 8015780:	f7ea ff66 	bl	8000650 <__aeabi_dmul>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
 8015788:	4630      	mov	r0, r6
 801578a:	4639      	mov	r1, r7
 801578c:	f7ea fdac 	bl	80002e8 <__aeabi_dsub>
 8015790:	9e00      	ldr	r6, [sp, #0]
 8015792:	9f03      	ldr	r7, [sp, #12]
 8015794:	3630      	adds	r6, #48	; 0x30
 8015796:	f805 6b01 	strb.w	r6, [r5], #1
 801579a:	9e02      	ldr	r6, [sp, #8]
 801579c:	1bae      	subs	r6, r5, r6
 801579e:	42b7      	cmp	r7, r6
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	d138      	bne.n	8015818 <_dtoa_r+0x6d0>
 80157a6:	f7ea fda1 	bl	80002ec <__adddf3>
 80157aa:	4606      	mov	r6, r0
 80157ac:	460f      	mov	r7, r1
 80157ae:	4602      	mov	r2, r0
 80157b0:	460b      	mov	r3, r1
 80157b2:	4640      	mov	r0, r8
 80157b4:	4649      	mov	r1, r9
 80157b6:	f7eb f9bd 	bl	8000b34 <__aeabi_dcmplt>
 80157ba:	b9c8      	cbnz	r0, 80157f0 <_dtoa_r+0x6a8>
 80157bc:	4632      	mov	r2, r6
 80157be:	463b      	mov	r3, r7
 80157c0:	4640      	mov	r0, r8
 80157c2:	4649      	mov	r1, r9
 80157c4:	f7eb f9ac 	bl	8000b20 <__aeabi_dcmpeq>
 80157c8:	b110      	cbz	r0, 80157d0 <_dtoa_r+0x688>
 80157ca:	9b00      	ldr	r3, [sp, #0]
 80157cc:	07db      	lsls	r3, r3, #31
 80157ce:	d40f      	bmi.n	80157f0 <_dtoa_r+0x6a8>
 80157d0:	4651      	mov	r1, sl
 80157d2:	4620      	mov	r0, r4
 80157d4:	f000 fca8 	bl	8016128 <_Bfree>
 80157d8:	2300      	movs	r3, #0
 80157da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80157dc:	702b      	strb	r3, [r5, #0]
 80157de:	f10b 0301 	add.w	r3, fp, #1
 80157e2:	6013      	str	r3, [r2, #0]
 80157e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	f43f acf8 	beq.w	80151dc <_dtoa_r+0x94>
 80157ec:	601d      	str	r5, [r3, #0]
 80157ee:	e4f5      	b.n	80151dc <_dtoa_r+0x94>
 80157f0:	465f      	mov	r7, fp
 80157f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80157f6:	2a39      	cmp	r2, #57	; 0x39
 80157f8:	f105 33ff 	add.w	r3, r5, #4294967295
 80157fc:	d106      	bne.n	801580c <_dtoa_r+0x6c4>
 80157fe:	9a02      	ldr	r2, [sp, #8]
 8015800:	429a      	cmp	r2, r3
 8015802:	d107      	bne.n	8015814 <_dtoa_r+0x6cc>
 8015804:	2330      	movs	r3, #48	; 0x30
 8015806:	7013      	strb	r3, [r2, #0]
 8015808:	3701      	adds	r7, #1
 801580a:	4613      	mov	r3, r2
 801580c:	781a      	ldrb	r2, [r3, #0]
 801580e:	3201      	adds	r2, #1
 8015810:	701a      	strb	r2, [r3, #0]
 8015812:	e78d      	b.n	8015730 <_dtoa_r+0x5e8>
 8015814:	461d      	mov	r5, r3
 8015816:	e7ec      	b.n	80157f2 <_dtoa_r+0x6aa>
 8015818:	2200      	movs	r2, #0
 801581a:	4ba4      	ldr	r3, [pc, #656]	; (8015aac <_dtoa_r+0x964>)
 801581c:	f7ea ff18 	bl	8000650 <__aeabi_dmul>
 8015820:	2200      	movs	r2, #0
 8015822:	2300      	movs	r3, #0
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	f7eb f97a 	bl	8000b20 <__aeabi_dcmpeq>
 801582c:	2800      	cmp	r0, #0
 801582e:	d09a      	beq.n	8015766 <_dtoa_r+0x61e>
 8015830:	e7ce      	b.n	80157d0 <_dtoa_r+0x688>
 8015832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015834:	2a00      	cmp	r2, #0
 8015836:	f000 80cd 	beq.w	80159d4 <_dtoa_r+0x88c>
 801583a:	9a07      	ldr	r2, [sp, #28]
 801583c:	2a01      	cmp	r2, #1
 801583e:	f300 80af 	bgt.w	80159a0 <_dtoa_r+0x858>
 8015842:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015844:	2a00      	cmp	r2, #0
 8015846:	f000 80a7 	beq.w	8015998 <_dtoa_r+0x850>
 801584a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801584e:	9e08      	ldr	r6, [sp, #32]
 8015850:	9d05      	ldr	r5, [sp, #20]
 8015852:	9a05      	ldr	r2, [sp, #20]
 8015854:	441a      	add	r2, r3
 8015856:	9205      	str	r2, [sp, #20]
 8015858:	9a06      	ldr	r2, [sp, #24]
 801585a:	2101      	movs	r1, #1
 801585c:	441a      	add	r2, r3
 801585e:	4620      	mov	r0, r4
 8015860:	9206      	str	r2, [sp, #24]
 8015862:	f000 fd01 	bl	8016268 <__i2b>
 8015866:	4607      	mov	r7, r0
 8015868:	2d00      	cmp	r5, #0
 801586a:	dd0c      	ble.n	8015886 <_dtoa_r+0x73e>
 801586c:	9b06      	ldr	r3, [sp, #24]
 801586e:	2b00      	cmp	r3, #0
 8015870:	dd09      	ble.n	8015886 <_dtoa_r+0x73e>
 8015872:	42ab      	cmp	r3, r5
 8015874:	9a05      	ldr	r2, [sp, #20]
 8015876:	bfa8      	it	ge
 8015878:	462b      	movge	r3, r5
 801587a:	1ad2      	subs	r2, r2, r3
 801587c:	9205      	str	r2, [sp, #20]
 801587e:	9a06      	ldr	r2, [sp, #24]
 8015880:	1aed      	subs	r5, r5, r3
 8015882:	1ad3      	subs	r3, r2, r3
 8015884:	9306      	str	r3, [sp, #24]
 8015886:	9b08      	ldr	r3, [sp, #32]
 8015888:	b1f3      	cbz	r3, 80158c8 <_dtoa_r+0x780>
 801588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801588c:	2b00      	cmp	r3, #0
 801588e:	f000 80a5 	beq.w	80159dc <_dtoa_r+0x894>
 8015892:	2e00      	cmp	r6, #0
 8015894:	dd10      	ble.n	80158b8 <_dtoa_r+0x770>
 8015896:	4639      	mov	r1, r7
 8015898:	4632      	mov	r2, r6
 801589a:	4620      	mov	r0, r4
 801589c:	f000 fd7a 	bl	8016394 <__pow5mult>
 80158a0:	4652      	mov	r2, sl
 80158a2:	4601      	mov	r1, r0
 80158a4:	4607      	mov	r7, r0
 80158a6:	4620      	mov	r0, r4
 80158a8:	f000 fce7 	bl	801627a <__multiply>
 80158ac:	4651      	mov	r1, sl
 80158ae:	4680      	mov	r8, r0
 80158b0:	4620      	mov	r0, r4
 80158b2:	f000 fc39 	bl	8016128 <_Bfree>
 80158b6:	46c2      	mov	sl, r8
 80158b8:	9b08      	ldr	r3, [sp, #32]
 80158ba:	1b9a      	subs	r2, r3, r6
 80158bc:	d004      	beq.n	80158c8 <_dtoa_r+0x780>
 80158be:	4651      	mov	r1, sl
 80158c0:	4620      	mov	r0, r4
 80158c2:	f000 fd67 	bl	8016394 <__pow5mult>
 80158c6:	4682      	mov	sl, r0
 80158c8:	2101      	movs	r1, #1
 80158ca:	4620      	mov	r0, r4
 80158cc:	f000 fccc 	bl	8016268 <__i2b>
 80158d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	4606      	mov	r6, r0
 80158d6:	f340 8083 	ble.w	80159e0 <_dtoa_r+0x898>
 80158da:	461a      	mov	r2, r3
 80158dc:	4601      	mov	r1, r0
 80158de:	4620      	mov	r0, r4
 80158e0:	f000 fd58 	bl	8016394 <__pow5mult>
 80158e4:	9b07      	ldr	r3, [sp, #28]
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	4606      	mov	r6, r0
 80158ea:	dd7c      	ble.n	80159e6 <_dtoa_r+0x89e>
 80158ec:	f04f 0800 	mov.w	r8, #0
 80158f0:	6933      	ldr	r3, [r6, #16]
 80158f2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80158f6:	6918      	ldr	r0, [r3, #16]
 80158f8:	f000 fc68 	bl	80161cc <__hi0bits>
 80158fc:	f1c0 0020 	rsb	r0, r0, #32
 8015900:	9b06      	ldr	r3, [sp, #24]
 8015902:	4418      	add	r0, r3
 8015904:	f010 001f 	ands.w	r0, r0, #31
 8015908:	f000 8096 	beq.w	8015a38 <_dtoa_r+0x8f0>
 801590c:	f1c0 0320 	rsb	r3, r0, #32
 8015910:	2b04      	cmp	r3, #4
 8015912:	f340 8087 	ble.w	8015a24 <_dtoa_r+0x8dc>
 8015916:	9b05      	ldr	r3, [sp, #20]
 8015918:	f1c0 001c 	rsb	r0, r0, #28
 801591c:	4403      	add	r3, r0
 801591e:	9305      	str	r3, [sp, #20]
 8015920:	9b06      	ldr	r3, [sp, #24]
 8015922:	4405      	add	r5, r0
 8015924:	4403      	add	r3, r0
 8015926:	9306      	str	r3, [sp, #24]
 8015928:	9b05      	ldr	r3, [sp, #20]
 801592a:	2b00      	cmp	r3, #0
 801592c:	dd05      	ble.n	801593a <_dtoa_r+0x7f2>
 801592e:	4651      	mov	r1, sl
 8015930:	461a      	mov	r2, r3
 8015932:	4620      	mov	r0, r4
 8015934:	f000 fd7c 	bl	8016430 <__lshift>
 8015938:	4682      	mov	sl, r0
 801593a:	9b06      	ldr	r3, [sp, #24]
 801593c:	2b00      	cmp	r3, #0
 801593e:	dd05      	ble.n	801594c <_dtoa_r+0x804>
 8015940:	4631      	mov	r1, r6
 8015942:	461a      	mov	r2, r3
 8015944:	4620      	mov	r0, r4
 8015946:	f000 fd73 	bl	8016430 <__lshift>
 801594a:	4606      	mov	r6, r0
 801594c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801594e:	2b00      	cmp	r3, #0
 8015950:	d074      	beq.n	8015a3c <_dtoa_r+0x8f4>
 8015952:	4631      	mov	r1, r6
 8015954:	4650      	mov	r0, sl
 8015956:	f000 fdbc 	bl	80164d2 <__mcmp>
 801595a:	2800      	cmp	r0, #0
 801595c:	da6e      	bge.n	8015a3c <_dtoa_r+0x8f4>
 801595e:	2300      	movs	r3, #0
 8015960:	4651      	mov	r1, sl
 8015962:	220a      	movs	r2, #10
 8015964:	4620      	mov	r0, r4
 8015966:	f000 fbf6 	bl	8016156 <__multadd>
 801596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015970:	4682      	mov	sl, r0
 8015972:	2b00      	cmp	r3, #0
 8015974:	f000 81a8 	beq.w	8015cc8 <_dtoa_r+0xb80>
 8015978:	2300      	movs	r3, #0
 801597a:	4639      	mov	r1, r7
 801597c:	220a      	movs	r2, #10
 801597e:	4620      	mov	r0, r4
 8015980:	f000 fbe9 	bl	8016156 <__multadd>
 8015984:	9b04      	ldr	r3, [sp, #16]
 8015986:	2b00      	cmp	r3, #0
 8015988:	4607      	mov	r7, r0
 801598a:	f300 80c8 	bgt.w	8015b1e <_dtoa_r+0x9d6>
 801598e:	9b07      	ldr	r3, [sp, #28]
 8015990:	2b02      	cmp	r3, #2
 8015992:	f340 80c4 	ble.w	8015b1e <_dtoa_r+0x9d6>
 8015996:	e059      	b.n	8015a4c <_dtoa_r+0x904>
 8015998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801599a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801599e:	e756      	b.n	801584e <_dtoa_r+0x706>
 80159a0:	9b03      	ldr	r3, [sp, #12]
 80159a2:	1e5e      	subs	r6, r3, #1
 80159a4:	9b08      	ldr	r3, [sp, #32]
 80159a6:	42b3      	cmp	r3, r6
 80159a8:	bfbf      	itttt	lt
 80159aa:	9b08      	ldrlt	r3, [sp, #32]
 80159ac:	9608      	strlt	r6, [sp, #32]
 80159ae:	1af2      	sublt	r2, r6, r3
 80159b0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80159b2:	bfb6      	itet	lt
 80159b4:	189b      	addlt	r3, r3, r2
 80159b6:	1b9e      	subge	r6, r3, r6
 80159b8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80159ba:	9b03      	ldr	r3, [sp, #12]
 80159bc:	bfb8      	it	lt
 80159be:	2600      	movlt	r6, #0
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	bfb9      	ittee	lt
 80159c4:	9b05      	ldrlt	r3, [sp, #20]
 80159c6:	9a03      	ldrlt	r2, [sp, #12]
 80159c8:	9d05      	ldrge	r5, [sp, #20]
 80159ca:	9b03      	ldrge	r3, [sp, #12]
 80159cc:	bfbc      	itt	lt
 80159ce:	1a9d      	sublt	r5, r3, r2
 80159d0:	2300      	movlt	r3, #0
 80159d2:	e73e      	b.n	8015852 <_dtoa_r+0x70a>
 80159d4:	9e08      	ldr	r6, [sp, #32]
 80159d6:	9d05      	ldr	r5, [sp, #20]
 80159d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80159da:	e745      	b.n	8015868 <_dtoa_r+0x720>
 80159dc:	9a08      	ldr	r2, [sp, #32]
 80159de:	e76e      	b.n	80158be <_dtoa_r+0x776>
 80159e0:	9b07      	ldr	r3, [sp, #28]
 80159e2:	2b01      	cmp	r3, #1
 80159e4:	dc19      	bgt.n	8015a1a <_dtoa_r+0x8d2>
 80159e6:	9b00      	ldr	r3, [sp, #0]
 80159e8:	b9bb      	cbnz	r3, 8015a1a <_dtoa_r+0x8d2>
 80159ea:	9b01      	ldr	r3, [sp, #4]
 80159ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159f0:	b99b      	cbnz	r3, 8015a1a <_dtoa_r+0x8d2>
 80159f2:	9b01      	ldr	r3, [sp, #4]
 80159f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80159f8:	0d1b      	lsrs	r3, r3, #20
 80159fa:	051b      	lsls	r3, r3, #20
 80159fc:	b183      	cbz	r3, 8015a20 <_dtoa_r+0x8d8>
 80159fe:	9b05      	ldr	r3, [sp, #20]
 8015a00:	3301      	adds	r3, #1
 8015a02:	9305      	str	r3, [sp, #20]
 8015a04:	9b06      	ldr	r3, [sp, #24]
 8015a06:	3301      	adds	r3, #1
 8015a08:	9306      	str	r3, [sp, #24]
 8015a0a:	f04f 0801 	mov.w	r8, #1
 8015a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	f47f af6d 	bne.w	80158f0 <_dtoa_r+0x7a8>
 8015a16:	2001      	movs	r0, #1
 8015a18:	e772      	b.n	8015900 <_dtoa_r+0x7b8>
 8015a1a:	f04f 0800 	mov.w	r8, #0
 8015a1e:	e7f6      	b.n	8015a0e <_dtoa_r+0x8c6>
 8015a20:	4698      	mov	r8, r3
 8015a22:	e7f4      	b.n	8015a0e <_dtoa_r+0x8c6>
 8015a24:	d080      	beq.n	8015928 <_dtoa_r+0x7e0>
 8015a26:	9a05      	ldr	r2, [sp, #20]
 8015a28:	331c      	adds	r3, #28
 8015a2a:	441a      	add	r2, r3
 8015a2c:	9205      	str	r2, [sp, #20]
 8015a2e:	9a06      	ldr	r2, [sp, #24]
 8015a30:	441a      	add	r2, r3
 8015a32:	441d      	add	r5, r3
 8015a34:	4613      	mov	r3, r2
 8015a36:	e776      	b.n	8015926 <_dtoa_r+0x7de>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	e7f4      	b.n	8015a26 <_dtoa_r+0x8de>
 8015a3c:	9b03      	ldr	r3, [sp, #12]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	dc36      	bgt.n	8015ab0 <_dtoa_r+0x968>
 8015a42:	9b07      	ldr	r3, [sp, #28]
 8015a44:	2b02      	cmp	r3, #2
 8015a46:	dd33      	ble.n	8015ab0 <_dtoa_r+0x968>
 8015a48:	9b03      	ldr	r3, [sp, #12]
 8015a4a:	9304      	str	r3, [sp, #16]
 8015a4c:	9b04      	ldr	r3, [sp, #16]
 8015a4e:	b963      	cbnz	r3, 8015a6a <_dtoa_r+0x922>
 8015a50:	4631      	mov	r1, r6
 8015a52:	2205      	movs	r2, #5
 8015a54:	4620      	mov	r0, r4
 8015a56:	f000 fb7e 	bl	8016156 <__multadd>
 8015a5a:	4601      	mov	r1, r0
 8015a5c:	4606      	mov	r6, r0
 8015a5e:	4650      	mov	r0, sl
 8015a60:	f000 fd37 	bl	80164d2 <__mcmp>
 8015a64:	2800      	cmp	r0, #0
 8015a66:	f73f adb6 	bgt.w	80155d6 <_dtoa_r+0x48e>
 8015a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a6c:	9d02      	ldr	r5, [sp, #8]
 8015a6e:	ea6f 0b03 	mvn.w	fp, r3
 8015a72:	2300      	movs	r3, #0
 8015a74:	9303      	str	r3, [sp, #12]
 8015a76:	4631      	mov	r1, r6
 8015a78:	4620      	mov	r0, r4
 8015a7a:	f000 fb55 	bl	8016128 <_Bfree>
 8015a7e:	2f00      	cmp	r7, #0
 8015a80:	f43f aea6 	beq.w	80157d0 <_dtoa_r+0x688>
 8015a84:	9b03      	ldr	r3, [sp, #12]
 8015a86:	b12b      	cbz	r3, 8015a94 <_dtoa_r+0x94c>
 8015a88:	42bb      	cmp	r3, r7
 8015a8a:	d003      	beq.n	8015a94 <_dtoa_r+0x94c>
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	4620      	mov	r0, r4
 8015a90:	f000 fb4a 	bl	8016128 <_Bfree>
 8015a94:	4639      	mov	r1, r7
 8015a96:	4620      	mov	r0, r4
 8015a98:	f000 fb46 	bl	8016128 <_Bfree>
 8015a9c:	e698      	b.n	80157d0 <_dtoa_r+0x688>
 8015a9e:	2600      	movs	r6, #0
 8015aa0:	4637      	mov	r7, r6
 8015aa2:	e7e2      	b.n	8015a6a <_dtoa_r+0x922>
 8015aa4:	46bb      	mov	fp, r7
 8015aa6:	4637      	mov	r7, r6
 8015aa8:	e595      	b.n	80155d6 <_dtoa_r+0x48e>
 8015aaa:	bf00      	nop
 8015aac:	40240000 	.word	0x40240000
 8015ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ab2:	bb93      	cbnz	r3, 8015b1a <_dtoa_r+0x9d2>
 8015ab4:	9b03      	ldr	r3, [sp, #12]
 8015ab6:	9304      	str	r3, [sp, #16]
 8015ab8:	9d02      	ldr	r5, [sp, #8]
 8015aba:	4631      	mov	r1, r6
 8015abc:	4650      	mov	r0, sl
 8015abe:	f7ff fab7 	bl	8015030 <quorem>
 8015ac2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015ac6:	f805 9b01 	strb.w	r9, [r5], #1
 8015aca:	9b02      	ldr	r3, [sp, #8]
 8015acc:	9a04      	ldr	r2, [sp, #16]
 8015ace:	1aeb      	subs	r3, r5, r3
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	f300 80dc 	bgt.w	8015c8e <_dtoa_r+0xb46>
 8015ad6:	9b02      	ldr	r3, [sp, #8]
 8015ad8:	2a01      	cmp	r2, #1
 8015ada:	bfac      	ite	ge
 8015adc:	189b      	addge	r3, r3, r2
 8015ade:	3301      	addlt	r3, #1
 8015ae0:	4698      	mov	r8, r3
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	9303      	str	r3, [sp, #12]
 8015ae6:	4651      	mov	r1, sl
 8015ae8:	2201      	movs	r2, #1
 8015aea:	4620      	mov	r0, r4
 8015aec:	f000 fca0 	bl	8016430 <__lshift>
 8015af0:	4631      	mov	r1, r6
 8015af2:	4682      	mov	sl, r0
 8015af4:	f000 fced 	bl	80164d2 <__mcmp>
 8015af8:	2800      	cmp	r0, #0
 8015afa:	f300 808d 	bgt.w	8015c18 <_dtoa_r+0xad0>
 8015afe:	d103      	bne.n	8015b08 <_dtoa_r+0x9c0>
 8015b00:	f019 0f01 	tst.w	r9, #1
 8015b04:	f040 8088 	bne.w	8015c18 <_dtoa_r+0xad0>
 8015b08:	4645      	mov	r5, r8
 8015b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b0e:	2b30      	cmp	r3, #48	; 0x30
 8015b10:	f105 32ff 	add.w	r2, r5, #4294967295
 8015b14:	d1af      	bne.n	8015a76 <_dtoa_r+0x92e>
 8015b16:	4615      	mov	r5, r2
 8015b18:	e7f7      	b.n	8015b0a <_dtoa_r+0x9c2>
 8015b1a:	9b03      	ldr	r3, [sp, #12]
 8015b1c:	9304      	str	r3, [sp, #16]
 8015b1e:	2d00      	cmp	r5, #0
 8015b20:	dd05      	ble.n	8015b2e <_dtoa_r+0x9e6>
 8015b22:	4639      	mov	r1, r7
 8015b24:	462a      	mov	r2, r5
 8015b26:	4620      	mov	r0, r4
 8015b28:	f000 fc82 	bl	8016430 <__lshift>
 8015b2c:	4607      	mov	r7, r0
 8015b2e:	f1b8 0f00 	cmp.w	r8, #0
 8015b32:	d04c      	beq.n	8015bce <_dtoa_r+0xa86>
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	4620      	mov	r0, r4
 8015b38:	f000 fac2 	bl	80160c0 <_Balloc>
 8015b3c:	693a      	ldr	r2, [r7, #16]
 8015b3e:	3202      	adds	r2, #2
 8015b40:	4605      	mov	r5, r0
 8015b42:	0092      	lsls	r2, r2, #2
 8015b44:	f107 010c 	add.w	r1, r7, #12
 8015b48:	300c      	adds	r0, #12
 8015b4a:	f7fe fb93 	bl	8014274 <memcpy>
 8015b4e:	2201      	movs	r2, #1
 8015b50:	4629      	mov	r1, r5
 8015b52:	4620      	mov	r0, r4
 8015b54:	f000 fc6c 	bl	8016430 <__lshift>
 8015b58:	9b00      	ldr	r3, [sp, #0]
 8015b5a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015b5e:	9703      	str	r7, [sp, #12]
 8015b60:	f003 0301 	and.w	r3, r3, #1
 8015b64:	4607      	mov	r7, r0
 8015b66:	9305      	str	r3, [sp, #20]
 8015b68:	4631      	mov	r1, r6
 8015b6a:	4650      	mov	r0, sl
 8015b6c:	f7ff fa60 	bl	8015030 <quorem>
 8015b70:	9903      	ldr	r1, [sp, #12]
 8015b72:	4605      	mov	r5, r0
 8015b74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015b78:	4650      	mov	r0, sl
 8015b7a:	f000 fcaa 	bl	80164d2 <__mcmp>
 8015b7e:	463a      	mov	r2, r7
 8015b80:	9000      	str	r0, [sp, #0]
 8015b82:	4631      	mov	r1, r6
 8015b84:	4620      	mov	r0, r4
 8015b86:	f000 fcbe 	bl	8016506 <__mdiff>
 8015b8a:	68c3      	ldr	r3, [r0, #12]
 8015b8c:	4602      	mov	r2, r0
 8015b8e:	bb03      	cbnz	r3, 8015bd2 <_dtoa_r+0xa8a>
 8015b90:	4601      	mov	r1, r0
 8015b92:	9006      	str	r0, [sp, #24]
 8015b94:	4650      	mov	r0, sl
 8015b96:	f000 fc9c 	bl	80164d2 <__mcmp>
 8015b9a:	9a06      	ldr	r2, [sp, #24]
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	4611      	mov	r1, r2
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	9306      	str	r3, [sp, #24]
 8015ba4:	f000 fac0 	bl	8016128 <_Bfree>
 8015ba8:	9b06      	ldr	r3, [sp, #24]
 8015baa:	b9a3      	cbnz	r3, 8015bd6 <_dtoa_r+0xa8e>
 8015bac:	9a07      	ldr	r2, [sp, #28]
 8015bae:	b992      	cbnz	r2, 8015bd6 <_dtoa_r+0xa8e>
 8015bb0:	9a05      	ldr	r2, [sp, #20]
 8015bb2:	b982      	cbnz	r2, 8015bd6 <_dtoa_r+0xa8e>
 8015bb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015bb8:	d029      	beq.n	8015c0e <_dtoa_r+0xac6>
 8015bba:	9b00      	ldr	r3, [sp, #0]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	dd01      	ble.n	8015bc4 <_dtoa_r+0xa7c>
 8015bc0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8015bc4:	f108 0501 	add.w	r5, r8, #1
 8015bc8:	f888 9000 	strb.w	r9, [r8]
 8015bcc:	e753      	b.n	8015a76 <_dtoa_r+0x92e>
 8015bce:	4638      	mov	r0, r7
 8015bd0:	e7c2      	b.n	8015b58 <_dtoa_r+0xa10>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	e7e3      	b.n	8015b9e <_dtoa_r+0xa56>
 8015bd6:	9a00      	ldr	r2, [sp, #0]
 8015bd8:	2a00      	cmp	r2, #0
 8015bda:	db04      	blt.n	8015be6 <_dtoa_r+0xa9e>
 8015bdc:	d125      	bne.n	8015c2a <_dtoa_r+0xae2>
 8015bde:	9a07      	ldr	r2, [sp, #28]
 8015be0:	bb1a      	cbnz	r2, 8015c2a <_dtoa_r+0xae2>
 8015be2:	9a05      	ldr	r2, [sp, #20]
 8015be4:	bb0a      	cbnz	r2, 8015c2a <_dtoa_r+0xae2>
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	ddec      	ble.n	8015bc4 <_dtoa_r+0xa7c>
 8015bea:	4651      	mov	r1, sl
 8015bec:	2201      	movs	r2, #1
 8015bee:	4620      	mov	r0, r4
 8015bf0:	f000 fc1e 	bl	8016430 <__lshift>
 8015bf4:	4631      	mov	r1, r6
 8015bf6:	4682      	mov	sl, r0
 8015bf8:	f000 fc6b 	bl	80164d2 <__mcmp>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	dc03      	bgt.n	8015c08 <_dtoa_r+0xac0>
 8015c00:	d1e0      	bne.n	8015bc4 <_dtoa_r+0xa7c>
 8015c02:	f019 0f01 	tst.w	r9, #1
 8015c06:	d0dd      	beq.n	8015bc4 <_dtoa_r+0xa7c>
 8015c08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015c0c:	d1d8      	bne.n	8015bc0 <_dtoa_r+0xa78>
 8015c0e:	2339      	movs	r3, #57	; 0x39
 8015c10:	f888 3000 	strb.w	r3, [r8]
 8015c14:	f108 0801 	add.w	r8, r8, #1
 8015c18:	4645      	mov	r5, r8
 8015c1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c1e:	2b39      	cmp	r3, #57	; 0x39
 8015c20:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c24:	d03b      	beq.n	8015c9e <_dtoa_r+0xb56>
 8015c26:	3301      	adds	r3, #1
 8015c28:	e040      	b.n	8015cac <_dtoa_r+0xb64>
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	f108 0501 	add.w	r5, r8, #1
 8015c30:	dd05      	ble.n	8015c3e <_dtoa_r+0xaf6>
 8015c32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015c36:	d0ea      	beq.n	8015c0e <_dtoa_r+0xac6>
 8015c38:	f109 0901 	add.w	r9, r9, #1
 8015c3c:	e7c4      	b.n	8015bc8 <_dtoa_r+0xa80>
 8015c3e:	9b02      	ldr	r3, [sp, #8]
 8015c40:	9a04      	ldr	r2, [sp, #16]
 8015c42:	f805 9c01 	strb.w	r9, [r5, #-1]
 8015c46:	1aeb      	subs	r3, r5, r3
 8015c48:	4293      	cmp	r3, r2
 8015c4a:	46a8      	mov	r8, r5
 8015c4c:	f43f af4b 	beq.w	8015ae6 <_dtoa_r+0x99e>
 8015c50:	4651      	mov	r1, sl
 8015c52:	2300      	movs	r3, #0
 8015c54:	220a      	movs	r2, #10
 8015c56:	4620      	mov	r0, r4
 8015c58:	f000 fa7d 	bl	8016156 <__multadd>
 8015c5c:	9b03      	ldr	r3, [sp, #12]
 8015c5e:	9903      	ldr	r1, [sp, #12]
 8015c60:	42bb      	cmp	r3, r7
 8015c62:	4682      	mov	sl, r0
 8015c64:	f04f 0300 	mov.w	r3, #0
 8015c68:	f04f 020a 	mov.w	r2, #10
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	d104      	bne.n	8015c7a <_dtoa_r+0xb32>
 8015c70:	f000 fa71 	bl	8016156 <__multadd>
 8015c74:	9003      	str	r0, [sp, #12]
 8015c76:	4607      	mov	r7, r0
 8015c78:	e776      	b.n	8015b68 <_dtoa_r+0xa20>
 8015c7a:	f000 fa6c 	bl	8016156 <__multadd>
 8015c7e:	2300      	movs	r3, #0
 8015c80:	9003      	str	r0, [sp, #12]
 8015c82:	220a      	movs	r2, #10
 8015c84:	4639      	mov	r1, r7
 8015c86:	4620      	mov	r0, r4
 8015c88:	f000 fa65 	bl	8016156 <__multadd>
 8015c8c:	e7f3      	b.n	8015c76 <_dtoa_r+0xb2e>
 8015c8e:	4651      	mov	r1, sl
 8015c90:	2300      	movs	r3, #0
 8015c92:	220a      	movs	r2, #10
 8015c94:	4620      	mov	r0, r4
 8015c96:	f000 fa5e 	bl	8016156 <__multadd>
 8015c9a:	4682      	mov	sl, r0
 8015c9c:	e70d      	b.n	8015aba <_dtoa_r+0x972>
 8015c9e:	9b02      	ldr	r3, [sp, #8]
 8015ca0:	4293      	cmp	r3, r2
 8015ca2:	d105      	bne.n	8015cb0 <_dtoa_r+0xb68>
 8015ca4:	9a02      	ldr	r2, [sp, #8]
 8015ca6:	f10b 0b01 	add.w	fp, fp, #1
 8015caa:	2331      	movs	r3, #49	; 0x31
 8015cac:	7013      	strb	r3, [r2, #0]
 8015cae:	e6e2      	b.n	8015a76 <_dtoa_r+0x92e>
 8015cb0:	4615      	mov	r5, r2
 8015cb2:	e7b2      	b.n	8015c1a <_dtoa_r+0xad2>
 8015cb4:	4b09      	ldr	r3, [pc, #36]	; (8015cdc <_dtoa_r+0xb94>)
 8015cb6:	f7ff baae 	b.w	8015216 <_dtoa_r+0xce>
 8015cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	f47f aa88 	bne.w	80151d2 <_dtoa_r+0x8a>
 8015cc2:	4b07      	ldr	r3, [pc, #28]	; (8015ce0 <_dtoa_r+0xb98>)
 8015cc4:	f7ff baa7 	b.w	8015216 <_dtoa_r+0xce>
 8015cc8:	9b04      	ldr	r3, [sp, #16]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	f73f aef4 	bgt.w	8015ab8 <_dtoa_r+0x970>
 8015cd0:	9b07      	ldr	r3, [sp, #28]
 8015cd2:	2b02      	cmp	r3, #2
 8015cd4:	f77f aef0 	ble.w	8015ab8 <_dtoa_r+0x970>
 8015cd8:	e6b8      	b.n	8015a4c <_dtoa_r+0x904>
 8015cda:	bf00      	nop
 8015cdc:	0801a012 	.word	0x0801a012
 8015ce0:	0801a137 	.word	0x0801a137

08015ce4 <__sflush_r>:
 8015ce4:	898a      	ldrh	r2, [r1, #12]
 8015ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	4605      	mov	r5, r0
 8015cec:	0710      	lsls	r0, r2, #28
 8015cee:	460c      	mov	r4, r1
 8015cf0:	d45a      	bmi.n	8015da8 <__sflush_r+0xc4>
 8015cf2:	684b      	ldr	r3, [r1, #4]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	dc05      	bgt.n	8015d04 <__sflush_r+0x20>
 8015cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	dc02      	bgt.n	8015d04 <__sflush_r+0x20>
 8015cfe:	2000      	movs	r0, #0
 8015d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d06:	2e00      	cmp	r6, #0
 8015d08:	d0f9      	beq.n	8015cfe <__sflush_r+0x1a>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d10:	682f      	ldr	r7, [r5, #0]
 8015d12:	602b      	str	r3, [r5, #0]
 8015d14:	d033      	beq.n	8015d7e <__sflush_r+0x9a>
 8015d16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d18:	89a3      	ldrh	r3, [r4, #12]
 8015d1a:	075a      	lsls	r2, r3, #29
 8015d1c:	d505      	bpl.n	8015d2a <__sflush_r+0x46>
 8015d1e:	6863      	ldr	r3, [r4, #4]
 8015d20:	1ac0      	subs	r0, r0, r3
 8015d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d24:	b10b      	cbz	r3, 8015d2a <__sflush_r+0x46>
 8015d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d28:	1ac0      	subs	r0, r0, r3
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d30:	6a21      	ldr	r1, [r4, #32]
 8015d32:	4628      	mov	r0, r5
 8015d34:	47b0      	blx	r6
 8015d36:	1c43      	adds	r3, r0, #1
 8015d38:	89a3      	ldrh	r3, [r4, #12]
 8015d3a:	d106      	bne.n	8015d4a <__sflush_r+0x66>
 8015d3c:	6829      	ldr	r1, [r5, #0]
 8015d3e:	291d      	cmp	r1, #29
 8015d40:	d84b      	bhi.n	8015dda <__sflush_r+0xf6>
 8015d42:	4a2b      	ldr	r2, [pc, #172]	; (8015df0 <__sflush_r+0x10c>)
 8015d44:	40ca      	lsrs	r2, r1
 8015d46:	07d6      	lsls	r6, r2, #31
 8015d48:	d547      	bpl.n	8015dda <__sflush_r+0xf6>
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	6062      	str	r2, [r4, #4]
 8015d4e:	04d9      	lsls	r1, r3, #19
 8015d50:	6922      	ldr	r2, [r4, #16]
 8015d52:	6022      	str	r2, [r4, #0]
 8015d54:	d504      	bpl.n	8015d60 <__sflush_r+0x7c>
 8015d56:	1c42      	adds	r2, r0, #1
 8015d58:	d101      	bne.n	8015d5e <__sflush_r+0x7a>
 8015d5a:	682b      	ldr	r3, [r5, #0]
 8015d5c:	b903      	cbnz	r3, 8015d60 <__sflush_r+0x7c>
 8015d5e:	6560      	str	r0, [r4, #84]	; 0x54
 8015d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d62:	602f      	str	r7, [r5, #0]
 8015d64:	2900      	cmp	r1, #0
 8015d66:	d0ca      	beq.n	8015cfe <__sflush_r+0x1a>
 8015d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d6c:	4299      	cmp	r1, r3
 8015d6e:	d002      	beq.n	8015d76 <__sflush_r+0x92>
 8015d70:	4628      	mov	r0, r5
 8015d72:	f000 fc83 	bl	801667c <_free_r>
 8015d76:	2000      	movs	r0, #0
 8015d78:	6360      	str	r0, [r4, #52]	; 0x34
 8015d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d7e:	6a21      	ldr	r1, [r4, #32]
 8015d80:	2301      	movs	r3, #1
 8015d82:	4628      	mov	r0, r5
 8015d84:	47b0      	blx	r6
 8015d86:	1c41      	adds	r1, r0, #1
 8015d88:	d1c6      	bne.n	8015d18 <__sflush_r+0x34>
 8015d8a:	682b      	ldr	r3, [r5, #0]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d0c3      	beq.n	8015d18 <__sflush_r+0x34>
 8015d90:	2b1d      	cmp	r3, #29
 8015d92:	d001      	beq.n	8015d98 <__sflush_r+0xb4>
 8015d94:	2b16      	cmp	r3, #22
 8015d96:	d101      	bne.n	8015d9c <__sflush_r+0xb8>
 8015d98:	602f      	str	r7, [r5, #0]
 8015d9a:	e7b0      	b.n	8015cfe <__sflush_r+0x1a>
 8015d9c:	89a3      	ldrh	r3, [r4, #12]
 8015d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015da2:	81a3      	strh	r3, [r4, #12]
 8015da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015da8:	690f      	ldr	r7, [r1, #16]
 8015daa:	2f00      	cmp	r7, #0
 8015dac:	d0a7      	beq.n	8015cfe <__sflush_r+0x1a>
 8015dae:	0793      	lsls	r3, r2, #30
 8015db0:	680e      	ldr	r6, [r1, #0]
 8015db2:	bf08      	it	eq
 8015db4:	694b      	ldreq	r3, [r1, #20]
 8015db6:	600f      	str	r7, [r1, #0]
 8015db8:	bf18      	it	ne
 8015dba:	2300      	movne	r3, #0
 8015dbc:	eba6 0807 	sub.w	r8, r6, r7
 8015dc0:	608b      	str	r3, [r1, #8]
 8015dc2:	f1b8 0f00 	cmp.w	r8, #0
 8015dc6:	dd9a      	ble.n	8015cfe <__sflush_r+0x1a>
 8015dc8:	4643      	mov	r3, r8
 8015dca:	463a      	mov	r2, r7
 8015dcc:	6a21      	ldr	r1, [r4, #32]
 8015dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015dd0:	4628      	mov	r0, r5
 8015dd2:	47b0      	blx	r6
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	dc07      	bgt.n	8015de8 <__sflush_r+0x104>
 8015dd8:	89a3      	ldrh	r3, [r4, #12]
 8015dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dde:	81a3      	strh	r3, [r4, #12]
 8015de0:	f04f 30ff 	mov.w	r0, #4294967295
 8015de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de8:	4407      	add	r7, r0
 8015dea:	eba8 0800 	sub.w	r8, r8, r0
 8015dee:	e7e8      	b.n	8015dc2 <__sflush_r+0xde>
 8015df0:	20400001 	.word	0x20400001

08015df4 <_fflush_r>:
 8015df4:	b538      	push	{r3, r4, r5, lr}
 8015df6:	690b      	ldr	r3, [r1, #16]
 8015df8:	4605      	mov	r5, r0
 8015dfa:	460c      	mov	r4, r1
 8015dfc:	b1db      	cbz	r3, 8015e36 <_fflush_r+0x42>
 8015dfe:	b118      	cbz	r0, 8015e08 <_fflush_r+0x14>
 8015e00:	6983      	ldr	r3, [r0, #24]
 8015e02:	b90b      	cbnz	r3, 8015e08 <_fflush_r+0x14>
 8015e04:	f000 f860 	bl	8015ec8 <__sinit>
 8015e08:	4b0c      	ldr	r3, [pc, #48]	; (8015e3c <_fflush_r+0x48>)
 8015e0a:	429c      	cmp	r4, r3
 8015e0c:	d109      	bne.n	8015e22 <_fflush_r+0x2e>
 8015e0e:	686c      	ldr	r4, [r5, #4]
 8015e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e14:	b17b      	cbz	r3, 8015e36 <_fflush_r+0x42>
 8015e16:	4621      	mov	r1, r4
 8015e18:	4628      	mov	r0, r5
 8015e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e1e:	f7ff bf61 	b.w	8015ce4 <__sflush_r>
 8015e22:	4b07      	ldr	r3, [pc, #28]	; (8015e40 <_fflush_r+0x4c>)
 8015e24:	429c      	cmp	r4, r3
 8015e26:	d101      	bne.n	8015e2c <_fflush_r+0x38>
 8015e28:	68ac      	ldr	r4, [r5, #8]
 8015e2a:	e7f1      	b.n	8015e10 <_fflush_r+0x1c>
 8015e2c:	4b05      	ldr	r3, [pc, #20]	; (8015e44 <_fflush_r+0x50>)
 8015e2e:	429c      	cmp	r4, r3
 8015e30:	bf08      	it	eq
 8015e32:	68ec      	ldreq	r4, [r5, #12]
 8015e34:	e7ec      	b.n	8015e10 <_fflush_r+0x1c>
 8015e36:	2000      	movs	r0, #0
 8015e38:	bd38      	pop	{r3, r4, r5, pc}
 8015e3a:	bf00      	nop
 8015e3c:	0801a164 	.word	0x0801a164
 8015e40:	0801a184 	.word	0x0801a184
 8015e44:	0801a144 	.word	0x0801a144

08015e48 <_cleanup_r>:
 8015e48:	4901      	ldr	r1, [pc, #4]	; (8015e50 <_cleanup_r+0x8>)
 8015e4a:	f000 b8a9 	b.w	8015fa0 <_fwalk_reent>
 8015e4e:	bf00      	nop
 8015e50:	08015df5 	.word	0x08015df5

08015e54 <std.isra.0>:
 8015e54:	2300      	movs	r3, #0
 8015e56:	b510      	push	{r4, lr}
 8015e58:	4604      	mov	r4, r0
 8015e5a:	6003      	str	r3, [r0, #0]
 8015e5c:	6043      	str	r3, [r0, #4]
 8015e5e:	6083      	str	r3, [r0, #8]
 8015e60:	8181      	strh	r1, [r0, #12]
 8015e62:	6643      	str	r3, [r0, #100]	; 0x64
 8015e64:	81c2      	strh	r2, [r0, #14]
 8015e66:	6103      	str	r3, [r0, #16]
 8015e68:	6143      	str	r3, [r0, #20]
 8015e6a:	6183      	str	r3, [r0, #24]
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	2208      	movs	r2, #8
 8015e70:	305c      	adds	r0, #92	; 0x5c
 8015e72:	f7fe fa0a 	bl	801428a <memset>
 8015e76:	4b05      	ldr	r3, [pc, #20]	; (8015e8c <std.isra.0+0x38>)
 8015e78:	6263      	str	r3, [r4, #36]	; 0x24
 8015e7a:	4b05      	ldr	r3, [pc, #20]	; (8015e90 <std.isra.0+0x3c>)
 8015e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e7e:	4b05      	ldr	r3, [pc, #20]	; (8015e94 <std.isra.0+0x40>)
 8015e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015e82:	4b05      	ldr	r3, [pc, #20]	; (8015e98 <std.isra.0+0x44>)
 8015e84:	6224      	str	r4, [r4, #32]
 8015e86:	6323      	str	r3, [r4, #48]	; 0x30
 8015e88:	bd10      	pop	{r4, pc}
 8015e8a:	bf00      	nop
 8015e8c:	08016d61 	.word	0x08016d61
 8015e90:	08016d83 	.word	0x08016d83
 8015e94:	08016dbb 	.word	0x08016dbb
 8015e98:	08016ddf 	.word	0x08016ddf

08015e9c <__sfmoreglue>:
 8015e9c:	b570      	push	{r4, r5, r6, lr}
 8015e9e:	1e4a      	subs	r2, r1, #1
 8015ea0:	2568      	movs	r5, #104	; 0x68
 8015ea2:	4355      	muls	r5, r2
 8015ea4:	460e      	mov	r6, r1
 8015ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015eaa:	f000 fc35 	bl	8016718 <_malloc_r>
 8015eae:	4604      	mov	r4, r0
 8015eb0:	b140      	cbz	r0, 8015ec4 <__sfmoreglue+0x28>
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	e880 0042 	stmia.w	r0, {r1, r6}
 8015eb8:	300c      	adds	r0, #12
 8015eba:	60a0      	str	r0, [r4, #8]
 8015ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ec0:	f7fe f9e3 	bl	801428a <memset>
 8015ec4:	4620      	mov	r0, r4
 8015ec6:	bd70      	pop	{r4, r5, r6, pc}

08015ec8 <__sinit>:
 8015ec8:	6983      	ldr	r3, [r0, #24]
 8015eca:	b510      	push	{r4, lr}
 8015ecc:	4604      	mov	r4, r0
 8015ece:	bb33      	cbnz	r3, 8015f1e <__sinit+0x56>
 8015ed0:	6483      	str	r3, [r0, #72]	; 0x48
 8015ed2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8015ed4:	6503      	str	r3, [r0, #80]	; 0x50
 8015ed6:	4b12      	ldr	r3, [pc, #72]	; (8015f20 <__sinit+0x58>)
 8015ed8:	4a12      	ldr	r2, [pc, #72]	; (8015f24 <__sinit+0x5c>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	6282      	str	r2, [r0, #40]	; 0x28
 8015ede:	4298      	cmp	r0, r3
 8015ee0:	bf04      	itt	eq
 8015ee2:	2301      	moveq	r3, #1
 8015ee4:	6183      	streq	r3, [r0, #24]
 8015ee6:	f000 f81f 	bl	8015f28 <__sfp>
 8015eea:	6060      	str	r0, [r4, #4]
 8015eec:	4620      	mov	r0, r4
 8015eee:	f000 f81b 	bl	8015f28 <__sfp>
 8015ef2:	60a0      	str	r0, [r4, #8]
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f000 f817 	bl	8015f28 <__sfp>
 8015efa:	2200      	movs	r2, #0
 8015efc:	60e0      	str	r0, [r4, #12]
 8015efe:	2104      	movs	r1, #4
 8015f00:	6860      	ldr	r0, [r4, #4]
 8015f02:	f7ff ffa7 	bl	8015e54 <std.isra.0>
 8015f06:	2201      	movs	r2, #1
 8015f08:	2109      	movs	r1, #9
 8015f0a:	68a0      	ldr	r0, [r4, #8]
 8015f0c:	f7ff ffa2 	bl	8015e54 <std.isra.0>
 8015f10:	2202      	movs	r2, #2
 8015f12:	2112      	movs	r1, #18
 8015f14:	68e0      	ldr	r0, [r4, #12]
 8015f16:	f7ff ff9d 	bl	8015e54 <std.isra.0>
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	61a3      	str	r3, [r4, #24]
 8015f1e:	bd10      	pop	{r4, pc}
 8015f20:	0801a1a4 	.word	0x0801a1a4
 8015f24:	08015e49 	.word	0x08015e49

08015f28 <__sfp>:
 8015f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f2a:	4b1c      	ldr	r3, [pc, #112]	; (8015f9c <__sfp+0x74>)
 8015f2c:	681e      	ldr	r6, [r3, #0]
 8015f2e:	69b3      	ldr	r3, [r6, #24]
 8015f30:	4607      	mov	r7, r0
 8015f32:	b913      	cbnz	r3, 8015f3a <__sfp+0x12>
 8015f34:	4630      	mov	r0, r6
 8015f36:	f7ff ffc7 	bl	8015ec8 <__sinit>
 8015f3a:	3648      	adds	r6, #72	; 0x48
 8015f3c:	68b4      	ldr	r4, [r6, #8]
 8015f3e:	6873      	ldr	r3, [r6, #4]
 8015f40:	3b01      	subs	r3, #1
 8015f42:	d503      	bpl.n	8015f4c <__sfp+0x24>
 8015f44:	6833      	ldr	r3, [r6, #0]
 8015f46:	b133      	cbz	r3, 8015f56 <__sfp+0x2e>
 8015f48:	6836      	ldr	r6, [r6, #0]
 8015f4a:	e7f7      	b.n	8015f3c <__sfp+0x14>
 8015f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015f50:	b16d      	cbz	r5, 8015f6e <__sfp+0x46>
 8015f52:	3468      	adds	r4, #104	; 0x68
 8015f54:	e7f4      	b.n	8015f40 <__sfp+0x18>
 8015f56:	2104      	movs	r1, #4
 8015f58:	4638      	mov	r0, r7
 8015f5a:	f7ff ff9f 	bl	8015e9c <__sfmoreglue>
 8015f5e:	6030      	str	r0, [r6, #0]
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d1f1      	bne.n	8015f48 <__sfp+0x20>
 8015f64:	230c      	movs	r3, #12
 8015f66:	603b      	str	r3, [r7, #0]
 8015f68:	4604      	mov	r4, r0
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f72:	81e3      	strh	r3, [r4, #14]
 8015f74:	2301      	movs	r3, #1
 8015f76:	81a3      	strh	r3, [r4, #12]
 8015f78:	6665      	str	r5, [r4, #100]	; 0x64
 8015f7a:	6025      	str	r5, [r4, #0]
 8015f7c:	60a5      	str	r5, [r4, #8]
 8015f7e:	6065      	str	r5, [r4, #4]
 8015f80:	6125      	str	r5, [r4, #16]
 8015f82:	6165      	str	r5, [r4, #20]
 8015f84:	61a5      	str	r5, [r4, #24]
 8015f86:	2208      	movs	r2, #8
 8015f88:	4629      	mov	r1, r5
 8015f8a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015f8e:	f7fe f97c 	bl	801428a <memset>
 8015f92:	6365      	str	r5, [r4, #52]	; 0x34
 8015f94:	63a5      	str	r5, [r4, #56]	; 0x38
 8015f96:	64a5      	str	r5, [r4, #72]	; 0x48
 8015f98:	64e5      	str	r5, [r4, #76]	; 0x4c
 8015f9a:	e7e6      	b.n	8015f6a <__sfp+0x42>
 8015f9c:	0801a1a4 	.word	0x0801a1a4

08015fa0 <_fwalk_reent>:
 8015fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fa4:	4680      	mov	r8, r0
 8015fa6:	4689      	mov	r9, r1
 8015fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015fac:	2600      	movs	r6, #0
 8015fae:	b914      	cbnz	r4, 8015fb6 <_fwalk_reent+0x16>
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fb6:	68a5      	ldr	r5, [r4, #8]
 8015fb8:	6867      	ldr	r7, [r4, #4]
 8015fba:	3f01      	subs	r7, #1
 8015fbc:	d501      	bpl.n	8015fc2 <_fwalk_reent+0x22>
 8015fbe:	6824      	ldr	r4, [r4, #0]
 8015fc0:	e7f5      	b.n	8015fae <_fwalk_reent+0xe>
 8015fc2:	89ab      	ldrh	r3, [r5, #12]
 8015fc4:	2b01      	cmp	r3, #1
 8015fc6:	d907      	bls.n	8015fd8 <_fwalk_reent+0x38>
 8015fc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	d003      	beq.n	8015fd8 <_fwalk_reent+0x38>
 8015fd0:	4629      	mov	r1, r5
 8015fd2:	4640      	mov	r0, r8
 8015fd4:	47c8      	blx	r9
 8015fd6:	4306      	orrs	r6, r0
 8015fd8:	3568      	adds	r5, #104	; 0x68
 8015fda:	e7ee      	b.n	8015fba <_fwalk_reent+0x1a>

08015fdc <_localeconv_r>:
 8015fdc:	4b04      	ldr	r3, [pc, #16]	; (8015ff0 <_localeconv_r+0x14>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	6a18      	ldr	r0, [r3, #32]
 8015fe2:	4b04      	ldr	r3, [pc, #16]	; (8015ff4 <_localeconv_r+0x18>)
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	bf08      	it	eq
 8015fe8:	4618      	moveq	r0, r3
 8015fea:	30f0      	adds	r0, #240	; 0xf0
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	200001ac 	.word	0x200001ac
 8015ff4:	20000040 	.word	0x20000040

08015ff8 <__swhatbuf_r>:
 8015ff8:	b570      	push	{r4, r5, r6, lr}
 8015ffa:	460e      	mov	r6, r1
 8015ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016000:	2900      	cmp	r1, #0
 8016002:	b090      	sub	sp, #64	; 0x40
 8016004:	4614      	mov	r4, r2
 8016006:	461d      	mov	r5, r3
 8016008:	da07      	bge.n	801601a <__swhatbuf_r+0x22>
 801600a:	2300      	movs	r3, #0
 801600c:	602b      	str	r3, [r5, #0]
 801600e:	89b3      	ldrh	r3, [r6, #12]
 8016010:	061a      	lsls	r2, r3, #24
 8016012:	d410      	bmi.n	8016036 <__swhatbuf_r+0x3e>
 8016014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016018:	e00e      	b.n	8016038 <__swhatbuf_r+0x40>
 801601a:	aa01      	add	r2, sp, #4
 801601c:	f000 ff06 	bl	8016e2c <_fstat_r>
 8016020:	2800      	cmp	r0, #0
 8016022:	dbf2      	blt.n	801600a <__swhatbuf_r+0x12>
 8016024:	9a02      	ldr	r2, [sp, #8]
 8016026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801602a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801602e:	425a      	negs	r2, r3
 8016030:	415a      	adcs	r2, r3
 8016032:	602a      	str	r2, [r5, #0]
 8016034:	e7ee      	b.n	8016014 <__swhatbuf_r+0x1c>
 8016036:	2340      	movs	r3, #64	; 0x40
 8016038:	2000      	movs	r0, #0
 801603a:	6023      	str	r3, [r4, #0]
 801603c:	b010      	add	sp, #64	; 0x40
 801603e:	bd70      	pop	{r4, r5, r6, pc}

08016040 <__smakebuf_r>:
 8016040:	898b      	ldrh	r3, [r1, #12]
 8016042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016044:	079d      	lsls	r5, r3, #30
 8016046:	4606      	mov	r6, r0
 8016048:	460c      	mov	r4, r1
 801604a:	d507      	bpl.n	801605c <__smakebuf_r+0x1c>
 801604c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016050:	6023      	str	r3, [r4, #0]
 8016052:	6123      	str	r3, [r4, #16]
 8016054:	2301      	movs	r3, #1
 8016056:	6163      	str	r3, [r4, #20]
 8016058:	b002      	add	sp, #8
 801605a:	bd70      	pop	{r4, r5, r6, pc}
 801605c:	ab01      	add	r3, sp, #4
 801605e:	466a      	mov	r2, sp
 8016060:	f7ff ffca 	bl	8015ff8 <__swhatbuf_r>
 8016064:	9900      	ldr	r1, [sp, #0]
 8016066:	4605      	mov	r5, r0
 8016068:	4630      	mov	r0, r6
 801606a:	f000 fb55 	bl	8016718 <_malloc_r>
 801606e:	b948      	cbnz	r0, 8016084 <__smakebuf_r+0x44>
 8016070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016074:	059a      	lsls	r2, r3, #22
 8016076:	d4ef      	bmi.n	8016058 <__smakebuf_r+0x18>
 8016078:	f023 0303 	bic.w	r3, r3, #3
 801607c:	f043 0302 	orr.w	r3, r3, #2
 8016080:	81a3      	strh	r3, [r4, #12]
 8016082:	e7e3      	b.n	801604c <__smakebuf_r+0xc>
 8016084:	4b0d      	ldr	r3, [pc, #52]	; (80160bc <__smakebuf_r+0x7c>)
 8016086:	62b3      	str	r3, [r6, #40]	; 0x28
 8016088:	89a3      	ldrh	r3, [r4, #12]
 801608a:	6020      	str	r0, [r4, #0]
 801608c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016090:	81a3      	strh	r3, [r4, #12]
 8016092:	9b00      	ldr	r3, [sp, #0]
 8016094:	6163      	str	r3, [r4, #20]
 8016096:	9b01      	ldr	r3, [sp, #4]
 8016098:	6120      	str	r0, [r4, #16]
 801609a:	b15b      	cbz	r3, 80160b4 <__smakebuf_r+0x74>
 801609c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160a0:	4630      	mov	r0, r6
 80160a2:	f000 fed5 	bl	8016e50 <_isatty_r>
 80160a6:	b128      	cbz	r0, 80160b4 <__smakebuf_r+0x74>
 80160a8:	89a3      	ldrh	r3, [r4, #12]
 80160aa:	f023 0303 	bic.w	r3, r3, #3
 80160ae:	f043 0301 	orr.w	r3, r3, #1
 80160b2:	81a3      	strh	r3, [r4, #12]
 80160b4:	89a3      	ldrh	r3, [r4, #12]
 80160b6:	431d      	orrs	r5, r3
 80160b8:	81a5      	strh	r5, [r4, #12]
 80160ba:	e7cd      	b.n	8016058 <__smakebuf_r+0x18>
 80160bc:	08015e49 	.word	0x08015e49

080160c0 <_Balloc>:
 80160c0:	b570      	push	{r4, r5, r6, lr}
 80160c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80160c4:	4604      	mov	r4, r0
 80160c6:	460e      	mov	r6, r1
 80160c8:	b93d      	cbnz	r5, 80160da <_Balloc+0x1a>
 80160ca:	2010      	movs	r0, #16
 80160cc:	f7fc f991 	bl	80123f2 <malloc>
 80160d0:	6260      	str	r0, [r4, #36]	; 0x24
 80160d2:	6045      	str	r5, [r0, #4]
 80160d4:	6085      	str	r5, [r0, #8]
 80160d6:	6005      	str	r5, [r0, #0]
 80160d8:	60c5      	str	r5, [r0, #12]
 80160da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80160dc:	68eb      	ldr	r3, [r5, #12]
 80160de:	b183      	cbz	r3, 8016102 <_Balloc+0x42>
 80160e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80160e8:	b9b8      	cbnz	r0, 801611a <_Balloc+0x5a>
 80160ea:	2101      	movs	r1, #1
 80160ec:	fa01 f506 	lsl.w	r5, r1, r6
 80160f0:	1d6a      	adds	r2, r5, #5
 80160f2:	0092      	lsls	r2, r2, #2
 80160f4:	4620      	mov	r0, r4
 80160f6:	f000 fab3 	bl	8016660 <_calloc_r>
 80160fa:	b160      	cbz	r0, 8016116 <_Balloc+0x56>
 80160fc:	6046      	str	r6, [r0, #4]
 80160fe:	6085      	str	r5, [r0, #8]
 8016100:	e00e      	b.n	8016120 <_Balloc+0x60>
 8016102:	2221      	movs	r2, #33	; 0x21
 8016104:	2104      	movs	r1, #4
 8016106:	4620      	mov	r0, r4
 8016108:	f000 faaa 	bl	8016660 <_calloc_r>
 801610c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801610e:	60e8      	str	r0, [r5, #12]
 8016110:	68db      	ldr	r3, [r3, #12]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d1e4      	bne.n	80160e0 <_Balloc+0x20>
 8016116:	2000      	movs	r0, #0
 8016118:	bd70      	pop	{r4, r5, r6, pc}
 801611a:	6802      	ldr	r2, [r0, #0]
 801611c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016120:	2300      	movs	r3, #0
 8016122:	6103      	str	r3, [r0, #16]
 8016124:	60c3      	str	r3, [r0, #12]
 8016126:	bd70      	pop	{r4, r5, r6, pc}

08016128 <_Bfree>:
 8016128:	b570      	push	{r4, r5, r6, lr}
 801612a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801612c:	4606      	mov	r6, r0
 801612e:	460d      	mov	r5, r1
 8016130:	b93c      	cbnz	r4, 8016142 <_Bfree+0x1a>
 8016132:	2010      	movs	r0, #16
 8016134:	f7fc f95d 	bl	80123f2 <malloc>
 8016138:	6270      	str	r0, [r6, #36]	; 0x24
 801613a:	6044      	str	r4, [r0, #4]
 801613c:	6084      	str	r4, [r0, #8]
 801613e:	6004      	str	r4, [r0, #0]
 8016140:	60c4      	str	r4, [r0, #12]
 8016142:	b13d      	cbz	r5, 8016154 <_Bfree+0x2c>
 8016144:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016146:	686a      	ldr	r2, [r5, #4]
 8016148:	68db      	ldr	r3, [r3, #12]
 801614a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801614e:	6029      	str	r1, [r5, #0]
 8016150:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016154:	bd70      	pop	{r4, r5, r6, pc}

08016156 <__multadd>:
 8016156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801615a:	690d      	ldr	r5, [r1, #16]
 801615c:	461f      	mov	r7, r3
 801615e:	4606      	mov	r6, r0
 8016160:	460c      	mov	r4, r1
 8016162:	f101 0e14 	add.w	lr, r1, #20
 8016166:	2300      	movs	r3, #0
 8016168:	f8de 0000 	ldr.w	r0, [lr]
 801616c:	b281      	uxth	r1, r0
 801616e:	fb02 7101 	mla	r1, r2, r1, r7
 8016172:	0c0f      	lsrs	r7, r1, #16
 8016174:	0c00      	lsrs	r0, r0, #16
 8016176:	fb02 7000 	mla	r0, r2, r0, r7
 801617a:	b289      	uxth	r1, r1
 801617c:	3301      	adds	r3, #1
 801617e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016182:	429d      	cmp	r5, r3
 8016184:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016188:	f84e 1b04 	str.w	r1, [lr], #4
 801618c:	dcec      	bgt.n	8016168 <__multadd+0x12>
 801618e:	b1d7      	cbz	r7, 80161c6 <__multadd+0x70>
 8016190:	68a3      	ldr	r3, [r4, #8]
 8016192:	429d      	cmp	r5, r3
 8016194:	db12      	blt.n	80161bc <__multadd+0x66>
 8016196:	6861      	ldr	r1, [r4, #4]
 8016198:	4630      	mov	r0, r6
 801619a:	3101      	adds	r1, #1
 801619c:	f7ff ff90 	bl	80160c0 <_Balloc>
 80161a0:	6922      	ldr	r2, [r4, #16]
 80161a2:	3202      	adds	r2, #2
 80161a4:	f104 010c 	add.w	r1, r4, #12
 80161a8:	4680      	mov	r8, r0
 80161aa:	0092      	lsls	r2, r2, #2
 80161ac:	300c      	adds	r0, #12
 80161ae:	f7fe f861 	bl	8014274 <memcpy>
 80161b2:	4621      	mov	r1, r4
 80161b4:	4630      	mov	r0, r6
 80161b6:	f7ff ffb7 	bl	8016128 <_Bfree>
 80161ba:	4644      	mov	r4, r8
 80161bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80161c0:	3501      	adds	r5, #1
 80161c2:	615f      	str	r7, [r3, #20]
 80161c4:	6125      	str	r5, [r4, #16]
 80161c6:	4620      	mov	r0, r4
 80161c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161cc <__hi0bits>:
 80161cc:	0c02      	lsrs	r2, r0, #16
 80161ce:	0412      	lsls	r2, r2, #16
 80161d0:	4603      	mov	r3, r0
 80161d2:	b9b2      	cbnz	r2, 8016202 <__hi0bits+0x36>
 80161d4:	0403      	lsls	r3, r0, #16
 80161d6:	2010      	movs	r0, #16
 80161d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80161dc:	bf04      	itt	eq
 80161de:	021b      	lsleq	r3, r3, #8
 80161e0:	3008      	addeq	r0, #8
 80161e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80161e6:	bf04      	itt	eq
 80161e8:	011b      	lsleq	r3, r3, #4
 80161ea:	3004      	addeq	r0, #4
 80161ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80161f0:	bf04      	itt	eq
 80161f2:	009b      	lsleq	r3, r3, #2
 80161f4:	3002      	addeq	r0, #2
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	db06      	blt.n	8016208 <__hi0bits+0x3c>
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	d503      	bpl.n	8016206 <__hi0bits+0x3a>
 80161fe:	3001      	adds	r0, #1
 8016200:	4770      	bx	lr
 8016202:	2000      	movs	r0, #0
 8016204:	e7e8      	b.n	80161d8 <__hi0bits+0xc>
 8016206:	2020      	movs	r0, #32
 8016208:	4770      	bx	lr

0801620a <__lo0bits>:
 801620a:	6803      	ldr	r3, [r0, #0]
 801620c:	f013 0207 	ands.w	r2, r3, #7
 8016210:	4601      	mov	r1, r0
 8016212:	d00b      	beq.n	801622c <__lo0bits+0x22>
 8016214:	07da      	lsls	r2, r3, #31
 8016216:	d423      	bmi.n	8016260 <__lo0bits+0x56>
 8016218:	0798      	lsls	r0, r3, #30
 801621a:	bf49      	itett	mi
 801621c:	085b      	lsrmi	r3, r3, #1
 801621e:	089b      	lsrpl	r3, r3, #2
 8016220:	2001      	movmi	r0, #1
 8016222:	600b      	strmi	r3, [r1, #0]
 8016224:	bf5c      	itt	pl
 8016226:	600b      	strpl	r3, [r1, #0]
 8016228:	2002      	movpl	r0, #2
 801622a:	4770      	bx	lr
 801622c:	b298      	uxth	r0, r3
 801622e:	b9a8      	cbnz	r0, 801625c <__lo0bits+0x52>
 8016230:	0c1b      	lsrs	r3, r3, #16
 8016232:	2010      	movs	r0, #16
 8016234:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016238:	bf04      	itt	eq
 801623a:	0a1b      	lsreq	r3, r3, #8
 801623c:	3008      	addeq	r0, #8
 801623e:	071a      	lsls	r2, r3, #28
 8016240:	bf04      	itt	eq
 8016242:	091b      	lsreq	r3, r3, #4
 8016244:	3004      	addeq	r0, #4
 8016246:	079a      	lsls	r2, r3, #30
 8016248:	bf04      	itt	eq
 801624a:	089b      	lsreq	r3, r3, #2
 801624c:	3002      	addeq	r0, #2
 801624e:	07da      	lsls	r2, r3, #31
 8016250:	d402      	bmi.n	8016258 <__lo0bits+0x4e>
 8016252:	085b      	lsrs	r3, r3, #1
 8016254:	d006      	beq.n	8016264 <__lo0bits+0x5a>
 8016256:	3001      	adds	r0, #1
 8016258:	600b      	str	r3, [r1, #0]
 801625a:	4770      	bx	lr
 801625c:	4610      	mov	r0, r2
 801625e:	e7e9      	b.n	8016234 <__lo0bits+0x2a>
 8016260:	2000      	movs	r0, #0
 8016262:	4770      	bx	lr
 8016264:	2020      	movs	r0, #32
 8016266:	4770      	bx	lr

08016268 <__i2b>:
 8016268:	b510      	push	{r4, lr}
 801626a:	460c      	mov	r4, r1
 801626c:	2101      	movs	r1, #1
 801626e:	f7ff ff27 	bl	80160c0 <_Balloc>
 8016272:	2201      	movs	r2, #1
 8016274:	6144      	str	r4, [r0, #20]
 8016276:	6102      	str	r2, [r0, #16]
 8016278:	bd10      	pop	{r4, pc}

0801627a <__multiply>:
 801627a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801627e:	4614      	mov	r4, r2
 8016280:	690a      	ldr	r2, [r1, #16]
 8016282:	6923      	ldr	r3, [r4, #16]
 8016284:	429a      	cmp	r2, r3
 8016286:	bfb8      	it	lt
 8016288:	460b      	movlt	r3, r1
 801628a:	4689      	mov	r9, r1
 801628c:	bfbc      	itt	lt
 801628e:	46a1      	movlt	r9, r4
 8016290:	461c      	movlt	r4, r3
 8016292:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016296:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801629a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801629e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80162a2:	eb07 060a 	add.w	r6, r7, sl
 80162a6:	429e      	cmp	r6, r3
 80162a8:	bfc8      	it	gt
 80162aa:	3101      	addgt	r1, #1
 80162ac:	f7ff ff08 	bl	80160c0 <_Balloc>
 80162b0:	f100 0514 	add.w	r5, r0, #20
 80162b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80162b8:	462b      	mov	r3, r5
 80162ba:	2200      	movs	r2, #0
 80162bc:	4543      	cmp	r3, r8
 80162be:	d316      	bcc.n	80162ee <__multiply+0x74>
 80162c0:	f104 0214 	add.w	r2, r4, #20
 80162c4:	f109 0114 	add.w	r1, r9, #20
 80162c8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80162cc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80162d0:	9301      	str	r3, [sp, #4]
 80162d2:	9c01      	ldr	r4, [sp, #4]
 80162d4:	4294      	cmp	r4, r2
 80162d6:	4613      	mov	r3, r2
 80162d8:	d80c      	bhi.n	80162f4 <__multiply+0x7a>
 80162da:	2e00      	cmp	r6, #0
 80162dc:	dd03      	ble.n	80162e6 <__multiply+0x6c>
 80162de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d054      	beq.n	8016390 <__multiply+0x116>
 80162e6:	6106      	str	r6, [r0, #16]
 80162e8:	b003      	add	sp, #12
 80162ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ee:	f843 2b04 	str.w	r2, [r3], #4
 80162f2:	e7e3      	b.n	80162bc <__multiply+0x42>
 80162f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80162f8:	3204      	adds	r2, #4
 80162fa:	f1ba 0f00 	cmp.w	sl, #0
 80162fe:	d020      	beq.n	8016342 <__multiply+0xc8>
 8016300:	46ae      	mov	lr, r5
 8016302:	4689      	mov	r9, r1
 8016304:	f04f 0c00 	mov.w	ip, #0
 8016308:	f859 4b04 	ldr.w	r4, [r9], #4
 801630c:	f8be b000 	ldrh.w	fp, [lr]
 8016310:	b2a3      	uxth	r3, r4
 8016312:	fb0a b303 	mla	r3, sl, r3, fp
 8016316:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801631a:	f8de 4000 	ldr.w	r4, [lr]
 801631e:	4463      	add	r3, ip
 8016320:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8016324:	fb0a c40b 	mla	r4, sl, fp, ip
 8016328:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801632c:	b29b      	uxth	r3, r3
 801632e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016332:	454f      	cmp	r7, r9
 8016334:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8016338:	f84e 3b04 	str.w	r3, [lr], #4
 801633c:	d8e4      	bhi.n	8016308 <__multiply+0x8e>
 801633e:	f8ce c000 	str.w	ip, [lr]
 8016342:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8016346:	f1b9 0f00 	cmp.w	r9, #0
 801634a:	d01f      	beq.n	801638c <__multiply+0x112>
 801634c:	682b      	ldr	r3, [r5, #0]
 801634e:	46ae      	mov	lr, r5
 8016350:	468c      	mov	ip, r1
 8016352:	f04f 0a00 	mov.w	sl, #0
 8016356:	f8bc 4000 	ldrh.w	r4, [ip]
 801635a:	f8be b002 	ldrh.w	fp, [lr, #2]
 801635e:	fb09 b404 	mla	r4, r9, r4, fp
 8016362:	44a2      	add	sl, r4
 8016364:	b29b      	uxth	r3, r3
 8016366:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801636a:	f84e 3b04 	str.w	r3, [lr], #4
 801636e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016372:	f8be 4000 	ldrh.w	r4, [lr]
 8016376:	0c1b      	lsrs	r3, r3, #16
 8016378:	fb09 4303 	mla	r3, r9, r3, r4
 801637c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8016380:	4567      	cmp	r7, ip
 8016382:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016386:	d8e6      	bhi.n	8016356 <__multiply+0xdc>
 8016388:	f8ce 3000 	str.w	r3, [lr]
 801638c:	3504      	adds	r5, #4
 801638e:	e7a0      	b.n	80162d2 <__multiply+0x58>
 8016390:	3e01      	subs	r6, #1
 8016392:	e7a2      	b.n	80162da <__multiply+0x60>

08016394 <__pow5mult>:
 8016394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016398:	4615      	mov	r5, r2
 801639a:	f012 0203 	ands.w	r2, r2, #3
 801639e:	4606      	mov	r6, r0
 80163a0:	460f      	mov	r7, r1
 80163a2:	d007      	beq.n	80163b4 <__pow5mult+0x20>
 80163a4:	3a01      	subs	r2, #1
 80163a6:	4c21      	ldr	r4, [pc, #132]	; (801642c <__pow5mult+0x98>)
 80163a8:	2300      	movs	r3, #0
 80163aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80163ae:	f7ff fed2 	bl	8016156 <__multadd>
 80163b2:	4607      	mov	r7, r0
 80163b4:	10ad      	asrs	r5, r5, #2
 80163b6:	d035      	beq.n	8016424 <__pow5mult+0x90>
 80163b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80163ba:	b93c      	cbnz	r4, 80163cc <__pow5mult+0x38>
 80163bc:	2010      	movs	r0, #16
 80163be:	f7fc f818 	bl	80123f2 <malloc>
 80163c2:	6270      	str	r0, [r6, #36]	; 0x24
 80163c4:	6044      	str	r4, [r0, #4]
 80163c6:	6084      	str	r4, [r0, #8]
 80163c8:	6004      	str	r4, [r0, #0]
 80163ca:	60c4      	str	r4, [r0, #12]
 80163cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80163d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80163d4:	b94c      	cbnz	r4, 80163ea <__pow5mult+0x56>
 80163d6:	f240 2171 	movw	r1, #625	; 0x271
 80163da:	4630      	mov	r0, r6
 80163dc:	f7ff ff44 	bl	8016268 <__i2b>
 80163e0:	2300      	movs	r3, #0
 80163e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80163e6:	4604      	mov	r4, r0
 80163e8:	6003      	str	r3, [r0, #0]
 80163ea:	f04f 0800 	mov.w	r8, #0
 80163ee:	07eb      	lsls	r3, r5, #31
 80163f0:	d50a      	bpl.n	8016408 <__pow5mult+0x74>
 80163f2:	4639      	mov	r1, r7
 80163f4:	4622      	mov	r2, r4
 80163f6:	4630      	mov	r0, r6
 80163f8:	f7ff ff3f 	bl	801627a <__multiply>
 80163fc:	4639      	mov	r1, r7
 80163fe:	4681      	mov	r9, r0
 8016400:	4630      	mov	r0, r6
 8016402:	f7ff fe91 	bl	8016128 <_Bfree>
 8016406:	464f      	mov	r7, r9
 8016408:	106d      	asrs	r5, r5, #1
 801640a:	d00b      	beq.n	8016424 <__pow5mult+0x90>
 801640c:	6820      	ldr	r0, [r4, #0]
 801640e:	b938      	cbnz	r0, 8016420 <__pow5mult+0x8c>
 8016410:	4622      	mov	r2, r4
 8016412:	4621      	mov	r1, r4
 8016414:	4630      	mov	r0, r6
 8016416:	f7ff ff30 	bl	801627a <__multiply>
 801641a:	6020      	str	r0, [r4, #0]
 801641c:	f8c0 8000 	str.w	r8, [r0]
 8016420:	4604      	mov	r4, r0
 8016422:	e7e4      	b.n	80163ee <__pow5mult+0x5a>
 8016424:	4638      	mov	r0, r7
 8016426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801642a:	bf00      	nop
 801642c:	0801a298 	.word	0x0801a298

08016430 <__lshift>:
 8016430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016434:	460c      	mov	r4, r1
 8016436:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801643a:	6923      	ldr	r3, [r4, #16]
 801643c:	6849      	ldr	r1, [r1, #4]
 801643e:	eb0a 0903 	add.w	r9, sl, r3
 8016442:	68a3      	ldr	r3, [r4, #8]
 8016444:	4607      	mov	r7, r0
 8016446:	4616      	mov	r6, r2
 8016448:	f109 0501 	add.w	r5, r9, #1
 801644c:	42ab      	cmp	r3, r5
 801644e:	db31      	blt.n	80164b4 <__lshift+0x84>
 8016450:	4638      	mov	r0, r7
 8016452:	f7ff fe35 	bl	80160c0 <_Balloc>
 8016456:	2200      	movs	r2, #0
 8016458:	4680      	mov	r8, r0
 801645a:	f100 0314 	add.w	r3, r0, #20
 801645e:	4611      	mov	r1, r2
 8016460:	4552      	cmp	r2, sl
 8016462:	db2a      	blt.n	80164ba <__lshift+0x8a>
 8016464:	6920      	ldr	r0, [r4, #16]
 8016466:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801646a:	f104 0114 	add.w	r1, r4, #20
 801646e:	f016 021f 	ands.w	r2, r6, #31
 8016472:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016476:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801647a:	d022      	beq.n	80164c2 <__lshift+0x92>
 801647c:	f1c2 0c20 	rsb	ip, r2, #32
 8016480:	2000      	movs	r0, #0
 8016482:	680e      	ldr	r6, [r1, #0]
 8016484:	4096      	lsls	r6, r2
 8016486:	4330      	orrs	r0, r6
 8016488:	f843 0b04 	str.w	r0, [r3], #4
 801648c:	f851 0b04 	ldr.w	r0, [r1], #4
 8016490:	458e      	cmp	lr, r1
 8016492:	fa20 f00c 	lsr.w	r0, r0, ip
 8016496:	d8f4      	bhi.n	8016482 <__lshift+0x52>
 8016498:	6018      	str	r0, [r3, #0]
 801649a:	b108      	cbz	r0, 80164a0 <__lshift+0x70>
 801649c:	f109 0502 	add.w	r5, r9, #2
 80164a0:	3d01      	subs	r5, #1
 80164a2:	4638      	mov	r0, r7
 80164a4:	f8c8 5010 	str.w	r5, [r8, #16]
 80164a8:	4621      	mov	r1, r4
 80164aa:	f7ff fe3d 	bl	8016128 <_Bfree>
 80164ae:	4640      	mov	r0, r8
 80164b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164b4:	3101      	adds	r1, #1
 80164b6:	005b      	lsls	r3, r3, #1
 80164b8:	e7c8      	b.n	801644c <__lshift+0x1c>
 80164ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80164be:	3201      	adds	r2, #1
 80164c0:	e7ce      	b.n	8016460 <__lshift+0x30>
 80164c2:	3b04      	subs	r3, #4
 80164c4:	f851 2b04 	ldr.w	r2, [r1], #4
 80164c8:	f843 2f04 	str.w	r2, [r3, #4]!
 80164cc:	458e      	cmp	lr, r1
 80164ce:	d8f9      	bhi.n	80164c4 <__lshift+0x94>
 80164d0:	e7e6      	b.n	80164a0 <__lshift+0x70>

080164d2 <__mcmp>:
 80164d2:	6903      	ldr	r3, [r0, #16]
 80164d4:	690a      	ldr	r2, [r1, #16]
 80164d6:	1a9b      	subs	r3, r3, r2
 80164d8:	b530      	push	{r4, r5, lr}
 80164da:	d10c      	bne.n	80164f6 <__mcmp+0x24>
 80164dc:	0092      	lsls	r2, r2, #2
 80164de:	3014      	adds	r0, #20
 80164e0:	3114      	adds	r1, #20
 80164e2:	1884      	adds	r4, r0, r2
 80164e4:	4411      	add	r1, r2
 80164e6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80164ea:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80164ee:	4295      	cmp	r5, r2
 80164f0:	d003      	beq.n	80164fa <__mcmp+0x28>
 80164f2:	d305      	bcc.n	8016500 <__mcmp+0x2e>
 80164f4:	2301      	movs	r3, #1
 80164f6:	4618      	mov	r0, r3
 80164f8:	bd30      	pop	{r4, r5, pc}
 80164fa:	42a0      	cmp	r0, r4
 80164fc:	d3f3      	bcc.n	80164e6 <__mcmp+0x14>
 80164fe:	e7fa      	b.n	80164f6 <__mcmp+0x24>
 8016500:	f04f 33ff 	mov.w	r3, #4294967295
 8016504:	e7f7      	b.n	80164f6 <__mcmp+0x24>

08016506 <__mdiff>:
 8016506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801650a:	460d      	mov	r5, r1
 801650c:	4607      	mov	r7, r0
 801650e:	4611      	mov	r1, r2
 8016510:	4628      	mov	r0, r5
 8016512:	4614      	mov	r4, r2
 8016514:	f7ff ffdd 	bl	80164d2 <__mcmp>
 8016518:	1e06      	subs	r6, r0, #0
 801651a:	d108      	bne.n	801652e <__mdiff+0x28>
 801651c:	4631      	mov	r1, r6
 801651e:	4638      	mov	r0, r7
 8016520:	f7ff fdce 	bl	80160c0 <_Balloc>
 8016524:	2301      	movs	r3, #1
 8016526:	6103      	str	r3, [r0, #16]
 8016528:	6146      	str	r6, [r0, #20]
 801652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801652e:	bfa4      	itt	ge
 8016530:	4623      	movge	r3, r4
 8016532:	462c      	movge	r4, r5
 8016534:	4638      	mov	r0, r7
 8016536:	6861      	ldr	r1, [r4, #4]
 8016538:	bfa6      	itte	ge
 801653a:	461d      	movge	r5, r3
 801653c:	2600      	movge	r6, #0
 801653e:	2601      	movlt	r6, #1
 8016540:	f7ff fdbe 	bl	80160c0 <_Balloc>
 8016544:	692b      	ldr	r3, [r5, #16]
 8016546:	60c6      	str	r6, [r0, #12]
 8016548:	6926      	ldr	r6, [r4, #16]
 801654a:	f105 0914 	add.w	r9, r5, #20
 801654e:	f104 0214 	add.w	r2, r4, #20
 8016552:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016556:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801655a:	f100 0514 	add.w	r5, r0, #20
 801655e:	f04f 0c00 	mov.w	ip, #0
 8016562:	f852 ab04 	ldr.w	sl, [r2], #4
 8016566:	f859 4b04 	ldr.w	r4, [r9], #4
 801656a:	fa1c f18a 	uxtah	r1, ip, sl
 801656e:	b2a3      	uxth	r3, r4
 8016570:	1ac9      	subs	r1, r1, r3
 8016572:	0c23      	lsrs	r3, r4, #16
 8016574:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016578:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801657c:	b289      	uxth	r1, r1
 801657e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8016582:	45c8      	cmp	r8, r9
 8016584:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016588:	4696      	mov	lr, r2
 801658a:	f845 3b04 	str.w	r3, [r5], #4
 801658e:	d8e8      	bhi.n	8016562 <__mdiff+0x5c>
 8016590:	45be      	cmp	lr, r7
 8016592:	d305      	bcc.n	80165a0 <__mdiff+0x9a>
 8016594:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016598:	b18b      	cbz	r3, 80165be <__mdiff+0xb8>
 801659a:	6106      	str	r6, [r0, #16]
 801659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165a0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80165a4:	fa1c f381 	uxtah	r3, ip, r1
 80165a8:	141a      	asrs	r2, r3, #16
 80165aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80165b8:	f845 3b04 	str.w	r3, [r5], #4
 80165bc:	e7e8      	b.n	8016590 <__mdiff+0x8a>
 80165be:	3e01      	subs	r6, #1
 80165c0:	e7e8      	b.n	8016594 <__mdiff+0x8e>

080165c2 <__d2b>:
 80165c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80165c6:	460e      	mov	r6, r1
 80165c8:	2101      	movs	r1, #1
 80165ca:	ec59 8b10 	vmov	r8, r9, d0
 80165ce:	4615      	mov	r5, r2
 80165d0:	f7ff fd76 	bl	80160c0 <_Balloc>
 80165d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80165d8:	4607      	mov	r7, r0
 80165da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165de:	bb34      	cbnz	r4, 801662e <__d2b+0x6c>
 80165e0:	9301      	str	r3, [sp, #4]
 80165e2:	f1b8 0f00 	cmp.w	r8, #0
 80165e6:	d027      	beq.n	8016638 <__d2b+0x76>
 80165e8:	a802      	add	r0, sp, #8
 80165ea:	f840 8d08 	str.w	r8, [r0, #-8]!
 80165ee:	f7ff fe0c 	bl	801620a <__lo0bits>
 80165f2:	9900      	ldr	r1, [sp, #0]
 80165f4:	b1f0      	cbz	r0, 8016634 <__d2b+0x72>
 80165f6:	9a01      	ldr	r2, [sp, #4]
 80165f8:	f1c0 0320 	rsb	r3, r0, #32
 80165fc:	fa02 f303 	lsl.w	r3, r2, r3
 8016600:	430b      	orrs	r3, r1
 8016602:	40c2      	lsrs	r2, r0
 8016604:	617b      	str	r3, [r7, #20]
 8016606:	9201      	str	r2, [sp, #4]
 8016608:	9b01      	ldr	r3, [sp, #4]
 801660a:	61bb      	str	r3, [r7, #24]
 801660c:	2b00      	cmp	r3, #0
 801660e:	bf14      	ite	ne
 8016610:	2102      	movne	r1, #2
 8016612:	2101      	moveq	r1, #1
 8016614:	6139      	str	r1, [r7, #16]
 8016616:	b1c4      	cbz	r4, 801664a <__d2b+0x88>
 8016618:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801661c:	4404      	add	r4, r0
 801661e:	6034      	str	r4, [r6, #0]
 8016620:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016624:	6028      	str	r0, [r5, #0]
 8016626:	4638      	mov	r0, r7
 8016628:	b003      	add	sp, #12
 801662a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801662e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016632:	e7d5      	b.n	80165e0 <__d2b+0x1e>
 8016634:	6179      	str	r1, [r7, #20]
 8016636:	e7e7      	b.n	8016608 <__d2b+0x46>
 8016638:	a801      	add	r0, sp, #4
 801663a:	f7ff fde6 	bl	801620a <__lo0bits>
 801663e:	9b01      	ldr	r3, [sp, #4]
 8016640:	617b      	str	r3, [r7, #20]
 8016642:	2101      	movs	r1, #1
 8016644:	6139      	str	r1, [r7, #16]
 8016646:	3020      	adds	r0, #32
 8016648:	e7e5      	b.n	8016616 <__d2b+0x54>
 801664a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801664e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016652:	6030      	str	r0, [r6, #0]
 8016654:	6918      	ldr	r0, [r3, #16]
 8016656:	f7ff fdb9 	bl	80161cc <__hi0bits>
 801665a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801665e:	e7e1      	b.n	8016624 <__d2b+0x62>

08016660 <_calloc_r>:
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	fb02 f401 	mul.w	r4, r2, r1
 8016666:	4621      	mov	r1, r4
 8016668:	f000 f856 	bl	8016718 <_malloc_r>
 801666c:	4605      	mov	r5, r0
 801666e:	b118      	cbz	r0, 8016678 <_calloc_r+0x18>
 8016670:	4622      	mov	r2, r4
 8016672:	2100      	movs	r1, #0
 8016674:	f7fd fe09 	bl	801428a <memset>
 8016678:	4628      	mov	r0, r5
 801667a:	bd38      	pop	{r3, r4, r5, pc}

0801667c <_free_r>:
 801667c:	b538      	push	{r3, r4, r5, lr}
 801667e:	4605      	mov	r5, r0
 8016680:	2900      	cmp	r1, #0
 8016682:	d045      	beq.n	8016710 <_free_r+0x94>
 8016684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016688:	1f0c      	subs	r4, r1, #4
 801668a:	2b00      	cmp	r3, #0
 801668c:	bfb8      	it	lt
 801668e:	18e4      	addlt	r4, r4, r3
 8016690:	f000 fc1a 	bl	8016ec8 <__malloc_lock>
 8016694:	4a1f      	ldr	r2, [pc, #124]	; (8016714 <_free_r+0x98>)
 8016696:	6813      	ldr	r3, [r2, #0]
 8016698:	4610      	mov	r0, r2
 801669a:	b933      	cbnz	r3, 80166aa <_free_r+0x2e>
 801669c:	6063      	str	r3, [r4, #4]
 801669e:	6014      	str	r4, [r2, #0]
 80166a0:	4628      	mov	r0, r5
 80166a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166a6:	f000 bc10 	b.w	8016eca <__malloc_unlock>
 80166aa:	42a3      	cmp	r3, r4
 80166ac:	d90c      	bls.n	80166c8 <_free_r+0x4c>
 80166ae:	6821      	ldr	r1, [r4, #0]
 80166b0:	1862      	adds	r2, r4, r1
 80166b2:	4293      	cmp	r3, r2
 80166b4:	bf04      	itt	eq
 80166b6:	681a      	ldreq	r2, [r3, #0]
 80166b8:	685b      	ldreq	r3, [r3, #4]
 80166ba:	6063      	str	r3, [r4, #4]
 80166bc:	bf04      	itt	eq
 80166be:	1852      	addeq	r2, r2, r1
 80166c0:	6022      	streq	r2, [r4, #0]
 80166c2:	6004      	str	r4, [r0, #0]
 80166c4:	e7ec      	b.n	80166a0 <_free_r+0x24>
 80166c6:	4613      	mov	r3, r2
 80166c8:	685a      	ldr	r2, [r3, #4]
 80166ca:	b10a      	cbz	r2, 80166d0 <_free_r+0x54>
 80166cc:	42a2      	cmp	r2, r4
 80166ce:	d9fa      	bls.n	80166c6 <_free_r+0x4a>
 80166d0:	6819      	ldr	r1, [r3, #0]
 80166d2:	1858      	adds	r0, r3, r1
 80166d4:	42a0      	cmp	r0, r4
 80166d6:	d10b      	bne.n	80166f0 <_free_r+0x74>
 80166d8:	6820      	ldr	r0, [r4, #0]
 80166da:	4401      	add	r1, r0
 80166dc:	1858      	adds	r0, r3, r1
 80166de:	4282      	cmp	r2, r0
 80166e0:	6019      	str	r1, [r3, #0]
 80166e2:	d1dd      	bne.n	80166a0 <_free_r+0x24>
 80166e4:	6810      	ldr	r0, [r2, #0]
 80166e6:	6852      	ldr	r2, [r2, #4]
 80166e8:	605a      	str	r2, [r3, #4]
 80166ea:	4401      	add	r1, r0
 80166ec:	6019      	str	r1, [r3, #0]
 80166ee:	e7d7      	b.n	80166a0 <_free_r+0x24>
 80166f0:	d902      	bls.n	80166f8 <_free_r+0x7c>
 80166f2:	230c      	movs	r3, #12
 80166f4:	602b      	str	r3, [r5, #0]
 80166f6:	e7d3      	b.n	80166a0 <_free_r+0x24>
 80166f8:	6820      	ldr	r0, [r4, #0]
 80166fa:	1821      	adds	r1, r4, r0
 80166fc:	428a      	cmp	r2, r1
 80166fe:	bf04      	itt	eq
 8016700:	6811      	ldreq	r1, [r2, #0]
 8016702:	6852      	ldreq	r2, [r2, #4]
 8016704:	6062      	str	r2, [r4, #4]
 8016706:	bf04      	itt	eq
 8016708:	1809      	addeq	r1, r1, r0
 801670a:	6021      	streq	r1, [r4, #0]
 801670c:	605c      	str	r4, [r3, #4]
 801670e:	e7c7      	b.n	80166a0 <_free_r+0x24>
 8016710:	bd38      	pop	{r3, r4, r5, pc}
 8016712:	bf00      	nop
 8016714:	200040b0 	.word	0x200040b0

08016718 <_malloc_r>:
 8016718:	b570      	push	{r4, r5, r6, lr}
 801671a:	1ccd      	adds	r5, r1, #3
 801671c:	f025 0503 	bic.w	r5, r5, #3
 8016720:	3508      	adds	r5, #8
 8016722:	2d0c      	cmp	r5, #12
 8016724:	bf38      	it	cc
 8016726:	250c      	movcc	r5, #12
 8016728:	2d00      	cmp	r5, #0
 801672a:	4606      	mov	r6, r0
 801672c:	db01      	blt.n	8016732 <_malloc_r+0x1a>
 801672e:	42a9      	cmp	r1, r5
 8016730:	d903      	bls.n	801673a <_malloc_r+0x22>
 8016732:	230c      	movs	r3, #12
 8016734:	6033      	str	r3, [r6, #0]
 8016736:	2000      	movs	r0, #0
 8016738:	bd70      	pop	{r4, r5, r6, pc}
 801673a:	f000 fbc5 	bl	8016ec8 <__malloc_lock>
 801673e:	4a23      	ldr	r2, [pc, #140]	; (80167cc <_malloc_r+0xb4>)
 8016740:	6814      	ldr	r4, [r2, #0]
 8016742:	4621      	mov	r1, r4
 8016744:	b991      	cbnz	r1, 801676c <_malloc_r+0x54>
 8016746:	4c22      	ldr	r4, [pc, #136]	; (80167d0 <_malloc_r+0xb8>)
 8016748:	6823      	ldr	r3, [r4, #0]
 801674a:	b91b      	cbnz	r3, 8016754 <_malloc_r+0x3c>
 801674c:	4630      	mov	r0, r6
 801674e:	f000 faf7 	bl	8016d40 <_sbrk_r>
 8016752:	6020      	str	r0, [r4, #0]
 8016754:	4629      	mov	r1, r5
 8016756:	4630      	mov	r0, r6
 8016758:	f000 faf2 	bl	8016d40 <_sbrk_r>
 801675c:	1c43      	adds	r3, r0, #1
 801675e:	d126      	bne.n	80167ae <_malloc_r+0x96>
 8016760:	230c      	movs	r3, #12
 8016762:	6033      	str	r3, [r6, #0]
 8016764:	4630      	mov	r0, r6
 8016766:	f000 fbb0 	bl	8016eca <__malloc_unlock>
 801676a:	e7e4      	b.n	8016736 <_malloc_r+0x1e>
 801676c:	680b      	ldr	r3, [r1, #0]
 801676e:	1b5b      	subs	r3, r3, r5
 8016770:	d41a      	bmi.n	80167a8 <_malloc_r+0x90>
 8016772:	2b0b      	cmp	r3, #11
 8016774:	d90f      	bls.n	8016796 <_malloc_r+0x7e>
 8016776:	600b      	str	r3, [r1, #0]
 8016778:	50cd      	str	r5, [r1, r3]
 801677a:	18cc      	adds	r4, r1, r3
 801677c:	4630      	mov	r0, r6
 801677e:	f000 fba4 	bl	8016eca <__malloc_unlock>
 8016782:	f104 000b 	add.w	r0, r4, #11
 8016786:	1d23      	adds	r3, r4, #4
 8016788:	f020 0007 	bic.w	r0, r0, #7
 801678c:	1ac3      	subs	r3, r0, r3
 801678e:	d01b      	beq.n	80167c8 <_malloc_r+0xb0>
 8016790:	425a      	negs	r2, r3
 8016792:	50e2      	str	r2, [r4, r3]
 8016794:	bd70      	pop	{r4, r5, r6, pc}
 8016796:	428c      	cmp	r4, r1
 8016798:	bf0d      	iteet	eq
 801679a:	6863      	ldreq	r3, [r4, #4]
 801679c:	684b      	ldrne	r3, [r1, #4]
 801679e:	6063      	strne	r3, [r4, #4]
 80167a0:	6013      	streq	r3, [r2, #0]
 80167a2:	bf18      	it	ne
 80167a4:	460c      	movne	r4, r1
 80167a6:	e7e9      	b.n	801677c <_malloc_r+0x64>
 80167a8:	460c      	mov	r4, r1
 80167aa:	6849      	ldr	r1, [r1, #4]
 80167ac:	e7ca      	b.n	8016744 <_malloc_r+0x2c>
 80167ae:	1cc4      	adds	r4, r0, #3
 80167b0:	f024 0403 	bic.w	r4, r4, #3
 80167b4:	42a0      	cmp	r0, r4
 80167b6:	d005      	beq.n	80167c4 <_malloc_r+0xac>
 80167b8:	1a21      	subs	r1, r4, r0
 80167ba:	4630      	mov	r0, r6
 80167bc:	f000 fac0 	bl	8016d40 <_sbrk_r>
 80167c0:	3001      	adds	r0, #1
 80167c2:	d0cd      	beq.n	8016760 <_malloc_r+0x48>
 80167c4:	6025      	str	r5, [r4, #0]
 80167c6:	e7d9      	b.n	801677c <_malloc_r+0x64>
 80167c8:	bd70      	pop	{r4, r5, r6, pc}
 80167ca:	bf00      	nop
 80167cc:	200040b0 	.word	0x200040b0
 80167d0:	200040b4 	.word	0x200040b4

080167d4 <_realloc_r>:
 80167d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167d6:	4607      	mov	r7, r0
 80167d8:	4614      	mov	r4, r2
 80167da:	460e      	mov	r6, r1
 80167dc:	b921      	cbnz	r1, 80167e8 <_realloc_r+0x14>
 80167de:	4611      	mov	r1, r2
 80167e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80167e4:	f7ff bf98 	b.w	8016718 <_malloc_r>
 80167e8:	b922      	cbnz	r2, 80167f4 <_realloc_r+0x20>
 80167ea:	f7ff ff47 	bl	801667c <_free_r>
 80167ee:	4625      	mov	r5, r4
 80167f0:	4628      	mov	r0, r5
 80167f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167f4:	f000 fb6a 	bl	8016ecc <_malloc_usable_size_r>
 80167f8:	4284      	cmp	r4, r0
 80167fa:	d90f      	bls.n	801681c <_realloc_r+0x48>
 80167fc:	4621      	mov	r1, r4
 80167fe:	4638      	mov	r0, r7
 8016800:	f7ff ff8a 	bl	8016718 <_malloc_r>
 8016804:	4605      	mov	r5, r0
 8016806:	2800      	cmp	r0, #0
 8016808:	d0f2      	beq.n	80167f0 <_realloc_r+0x1c>
 801680a:	4631      	mov	r1, r6
 801680c:	4622      	mov	r2, r4
 801680e:	f7fd fd31 	bl	8014274 <memcpy>
 8016812:	4631      	mov	r1, r6
 8016814:	4638      	mov	r0, r7
 8016816:	f7ff ff31 	bl	801667c <_free_r>
 801681a:	e7e9      	b.n	80167f0 <_realloc_r+0x1c>
 801681c:	4635      	mov	r5, r6
 801681e:	e7e7      	b.n	80167f0 <_realloc_r+0x1c>

08016820 <__ssputs_r>:
 8016820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016824:	688e      	ldr	r6, [r1, #8]
 8016826:	429e      	cmp	r6, r3
 8016828:	4682      	mov	sl, r0
 801682a:	460c      	mov	r4, r1
 801682c:	4691      	mov	r9, r2
 801682e:	4698      	mov	r8, r3
 8016830:	d835      	bhi.n	801689e <__ssputs_r+0x7e>
 8016832:	898a      	ldrh	r2, [r1, #12]
 8016834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016838:	d031      	beq.n	801689e <__ssputs_r+0x7e>
 801683a:	6825      	ldr	r5, [r4, #0]
 801683c:	6909      	ldr	r1, [r1, #16]
 801683e:	1a6f      	subs	r7, r5, r1
 8016840:	6965      	ldr	r5, [r4, #20]
 8016842:	2302      	movs	r3, #2
 8016844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016848:	fb95 f5f3 	sdiv	r5, r5, r3
 801684c:	f108 0301 	add.w	r3, r8, #1
 8016850:	443b      	add	r3, r7
 8016852:	429d      	cmp	r5, r3
 8016854:	bf38      	it	cc
 8016856:	461d      	movcc	r5, r3
 8016858:	0553      	lsls	r3, r2, #21
 801685a:	d531      	bpl.n	80168c0 <__ssputs_r+0xa0>
 801685c:	4629      	mov	r1, r5
 801685e:	f7ff ff5b 	bl	8016718 <_malloc_r>
 8016862:	4606      	mov	r6, r0
 8016864:	b950      	cbnz	r0, 801687c <__ssputs_r+0x5c>
 8016866:	230c      	movs	r3, #12
 8016868:	f8ca 3000 	str.w	r3, [sl]
 801686c:	89a3      	ldrh	r3, [r4, #12]
 801686e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016872:	81a3      	strh	r3, [r4, #12]
 8016874:	f04f 30ff 	mov.w	r0, #4294967295
 8016878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801687c:	463a      	mov	r2, r7
 801687e:	6921      	ldr	r1, [r4, #16]
 8016880:	f7fd fcf8 	bl	8014274 <memcpy>
 8016884:	89a3      	ldrh	r3, [r4, #12]
 8016886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801688e:	81a3      	strh	r3, [r4, #12]
 8016890:	6126      	str	r6, [r4, #16]
 8016892:	6165      	str	r5, [r4, #20]
 8016894:	443e      	add	r6, r7
 8016896:	1bed      	subs	r5, r5, r7
 8016898:	6026      	str	r6, [r4, #0]
 801689a:	60a5      	str	r5, [r4, #8]
 801689c:	4646      	mov	r6, r8
 801689e:	4546      	cmp	r6, r8
 80168a0:	bf28      	it	cs
 80168a2:	4646      	movcs	r6, r8
 80168a4:	4632      	mov	r2, r6
 80168a6:	4649      	mov	r1, r9
 80168a8:	6820      	ldr	r0, [r4, #0]
 80168aa:	f000 faf3 	bl	8016e94 <memmove>
 80168ae:	68a3      	ldr	r3, [r4, #8]
 80168b0:	1b9b      	subs	r3, r3, r6
 80168b2:	60a3      	str	r3, [r4, #8]
 80168b4:	6823      	ldr	r3, [r4, #0]
 80168b6:	441e      	add	r6, r3
 80168b8:	6026      	str	r6, [r4, #0]
 80168ba:	2000      	movs	r0, #0
 80168bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168c0:	462a      	mov	r2, r5
 80168c2:	f7ff ff87 	bl	80167d4 <_realloc_r>
 80168c6:	4606      	mov	r6, r0
 80168c8:	2800      	cmp	r0, #0
 80168ca:	d1e1      	bne.n	8016890 <__ssputs_r+0x70>
 80168cc:	6921      	ldr	r1, [r4, #16]
 80168ce:	4650      	mov	r0, sl
 80168d0:	f7ff fed4 	bl	801667c <_free_r>
 80168d4:	e7c7      	b.n	8016866 <__ssputs_r+0x46>
	...

080168d8 <_svfiprintf_r>:
 80168d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168dc:	b09d      	sub	sp, #116	; 0x74
 80168de:	4680      	mov	r8, r0
 80168e0:	9303      	str	r3, [sp, #12]
 80168e2:	898b      	ldrh	r3, [r1, #12]
 80168e4:	061c      	lsls	r4, r3, #24
 80168e6:	460d      	mov	r5, r1
 80168e8:	4616      	mov	r6, r2
 80168ea:	d50f      	bpl.n	801690c <_svfiprintf_r+0x34>
 80168ec:	690b      	ldr	r3, [r1, #16]
 80168ee:	b96b      	cbnz	r3, 801690c <_svfiprintf_r+0x34>
 80168f0:	2140      	movs	r1, #64	; 0x40
 80168f2:	f7ff ff11 	bl	8016718 <_malloc_r>
 80168f6:	6028      	str	r0, [r5, #0]
 80168f8:	6128      	str	r0, [r5, #16]
 80168fa:	b928      	cbnz	r0, 8016908 <_svfiprintf_r+0x30>
 80168fc:	230c      	movs	r3, #12
 80168fe:	f8c8 3000 	str.w	r3, [r8]
 8016902:	f04f 30ff 	mov.w	r0, #4294967295
 8016906:	e0c5      	b.n	8016a94 <_svfiprintf_r+0x1bc>
 8016908:	2340      	movs	r3, #64	; 0x40
 801690a:	616b      	str	r3, [r5, #20]
 801690c:	2300      	movs	r3, #0
 801690e:	9309      	str	r3, [sp, #36]	; 0x24
 8016910:	2320      	movs	r3, #32
 8016912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016916:	2330      	movs	r3, #48	; 0x30
 8016918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801691c:	f04f 0b01 	mov.w	fp, #1
 8016920:	4637      	mov	r7, r6
 8016922:	463c      	mov	r4, r7
 8016924:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016928:	2b00      	cmp	r3, #0
 801692a:	d13c      	bne.n	80169a6 <_svfiprintf_r+0xce>
 801692c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016930:	d00b      	beq.n	801694a <_svfiprintf_r+0x72>
 8016932:	4653      	mov	r3, sl
 8016934:	4632      	mov	r2, r6
 8016936:	4629      	mov	r1, r5
 8016938:	4640      	mov	r0, r8
 801693a:	f7ff ff71 	bl	8016820 <__ssputs_r>
 801693e:	3001      	adds	r0, #1
 8016940:	f000 80a3 	beq.w	8016a8a <_svfiprintf_r+0x1b2>
 8016944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016946:	4453      	add	r3, sl
 8016948:	9309      	str	r3, [sp, #36]	; 0x24
 801694a:	783b      	ldrb	r3, [r7, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	f000 809c 	beq.w	8016a8a <_svfiprintf_r+0x1b2>
 8016952:	2300      	movs	r3, #0
 8016954:	f04f 32ff 	mov.w	r2, #4294967295
 8016958:	9304      	str	r3, [sp, #16]
 801695a:	9307      	str	r3, [sp, #28]
 801695c:	9205      	str	r2, [sp, #20]
 801695e:	9306      	str	r3, [sp, #24]
 8016960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016964:	931a      	str	r3, [sp, #104]	; 0x68
 8016966:	2205      	movs	r2, #5
 8016968:	7821      	ldrb	r1, [r4, #0]
 801696a:	4850      	ldr	r0, [pc, #320]	; (8016aac <_svfiprintf_r+0x1d4>)
 801696c:	f7e9 fc68 	bl	8000240 <memchr>
 8016970:	1c67      	adds	r7, r4, #1
 8016972:	9b04      	ldr	r3, [sp, #16]
 8016974:	b9d8      	cbnz	r0, 80169ae <_svfiprintf_r+0xd6>
 8016976:	06d9      	lsls	r1, r3, #27
 8016978:	bf44      	itt	mi
 801697a:	2220      	movmi	r2, #32
 801697c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016980:	071a      	lsls	r2, r3, #28
 8016982:	bf44      	itt	mi
 8016984:	222b      	movmi	r2, #43	; 0x2b
 8016986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801698a:	7822      	ldrb	r2, [r4, #0]
 801698c:	2a2a      	cmp	r2, #42	; 0x2a
 801698e:	d016      	beq.n	80169be <_svfiprintf_r+0xe6>
 8016990:	9a07      	ldr	r2, [sp, #28]
 8016992:	2100      	movs	r1, #0
 8016994:	200a      	movs	r0, #10
 8016996:	4627      	mov	r7, r4
 8016998:	3401      	adds	r4, #1
 801699a:	783b      	ldrb	r3, [r7, #0]
 801699c:	3b30      	subs	r3, #48	; 0x30
 801699e:	2b09      	cmp	r3, #9
 80169a0:	d951      	bls.n	8016a46 <_svfiprintf_r+0x16e>
 80169a2:	b1c9      	cbz	r1, 80169d8 <_svfiprintf_r+0x100>
 80169a4:	e011      	b.n	80169ca <_svfiprintf_r+0xf2>
 80169a6:	2b25      	cmp	r3, #37	; 0x25
 80169a8:	d0c0      	beq.n	801692c <_svfiprintf_r+0x54>
 80169aa:	4627      	mov	r7, r4
 80169ac:	e7b9      	b.n	8016922 <_svfiprintf_r+0x4a>
 80169ae:	4a3f      	ldr	r2, [pc, #252]	; (8016aac <_svfiprintf_r+0x1d4>)
 80169b0:	1a80      	subs	r0, r0, r2
 80169b2:	fa0b f000 	lsl.w	r0, fp, r0
 80169b6:	4318      	orrs	r0, r3
 80169b8:	9004      	str	r0, [sp, #16]
 80169ba:	463c      	mov	r4, r7
 80169bc:	e7d3      	b.n	8016966 <_svfiprintf_r+0x8e>
 80169be:	9a03      	ldr	r2, [sp, #12]
 80169c0:	1d11      	adds	r1, r2, #4
 80169c2:	6812      	ldr	r2, [r2, #0]
 80169c4:	9103      	str	r1, [sp, #12]
 80169c6:	2a00      	cmp	r2, #0
 80169c8:	db01      	blt.n	80169ce <_svfiprintf_r+0xf6>
 80169ca:	9207      	str	r2, [sp, #28]
 80169cc:	e004      	b.n	80169d8 <_svfiprintf_r+0x100>
 80169ce:	4252      	negs	r2, r2
 80169d0:	f043 0302 	orr.w	r3, r3, #2
 80169d4:	9207      	str	r2, [sp, #28]
 80169d6:	9304      	str	r3, [sp, #16]
 80169d8:	783b      	ldrb	r3, [r7, #0]
 80169da:	2b2e      	cmp	r3, #46	; 0x2e
 80169dc:	d10e      	bne.n	80169fc <_svfiprintf_r+0x124>
 80169de:	787b      	ldrb	r3, [r7, #1]
 80169e0:	2b2a      	cmp	r3, #42	; 0x2a
 80169e2:	f107 0101 	add.w	r1, r7, #1
 80169e6:	d132      	bne.n	8016a4e <_svfiprintf_r+0x176>
 80169e8:	9b03      	ldr	r3, [sp, #12]
 80169ea:	1d1a      	adds	r2, r3, #4
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	9203      	str	r2, [sp, #12]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	bfb8      	it	lt
 80169f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80169f8:	3702      	adds	r7, #2
 80169fa:	9305      	str	r3, [sp, #20]
 80169fc:	4c2c      	ldr	r4, [pc, #176]	; (8016ab0 <_svfiprintf_r+0x1d8>)
 80169fe:	7839      	ldrb	r1, [r7, #0]
 8016a00:	2203      	movs	r2, #3
 8016a02:	4620      	mov	r0, r4
 8016a04:	f7e9 fc1c 	bl	8000240 <memchr>
 8016a08:	b138      	cbz	r0, 8016a1a <_svfiprintf_r+0x142>
 8016a0a:	2340      	movs	r3, #64	; 0x40
 8016a0c:	1b00      	subs	r0, r0, r4
 8016a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8016a12:	9b04      	ldr	r3, [sp, #16]
 8016a14:	4303      	orrs	r3, r0
 8016a16:	9304      	str	r3, [sp, #16]
 8016a18:	3701      	adds	r7, #1
 8016a1a:	7839      	ldrb	r1, [r7, #0]
 8016a1c:	4825      	ldr	r0, [pc, #148]	; (8016ab4 <_svfiprintf_r+0x1dc>)
 8016a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a22:	2206      	movs	r2, #6
 8016a24:	1c7e      	adds	r6, r7, #1
 8016a26:	f7e9 fc0b 	bl	8000240 <memchr>
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	d035      	beq.n	8016a9a <_svfiprintf_r+0x1c2>
 8016a2e:	4b22      	ldr	r3, [pc, #136]	; (8016ab8 <_svfiprintf_r+0x1e0>)
 8016a30:	b9fb      	cbnz	r3, 8016a72 <_svfiprintf_r+0x19a>
 8016a32:	9b03      	ldr	r3, [sp, #12]
 8016a34:	3307      	adds	r3, #7
 8016a36:	f023 0307 	bic.w	r3, r3, #7
 8016a3a:	3308      	adds	r3, #8
 8016a3c:	9303      	str	r3, [sp, #12]
 8016a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a40:	444b      	add	r3, r9
 8016a42:	9309      	str	r3, [sp, #36]	; 0x24
 8016a44:	e76c      	b.n	8016920 <_svfiprintf_r+0x48>
 8016a46:	fb00 3202 	mla	r2, r0, r2, r3
 8016a4a:	2101      	movs	r1, #1
 8016a4c:	e7a3      	b.n	8016996 <_svfiprintf_r+0xbe>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	9305      	str	r3, [sp, #20]
 8016a52:	4618      	mov	r0, r3
 8016a54:	240a      	movs	r4, #10
 8016a56:	460f      	mov	r7, r1
 8016a58:	3101      	adds	r1, #1
 8016a5a:	783a      	ldrb	r2, [r7, #0]
 8016a5c:	3a30      	subs	r2, #48	; 0x30
 8016a5e:	2a09      	cmp	r2, #9
 8016a60:	d903      	bls.n	8016a6a <_svfiprintf_r+0x192>
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d0ca      	beq.n	80169fc <_svfiprintf_r+0x124>
 8016a66:	9005      	str	r0, [sp, #20]
 8016a68:	e7c8      	b.n	80169fc <_svfiprintf_r+0x124>
 8016a6a:	fb04 2000 	mla	r0, r4, r0, r2
 8016a6e:	2301      	movs	r3, #1
 8016a70:	e7f1      	b.n	8016a56 <_svfiprintf_r+0x17e>
 8016a72:	ab03      	add	r3, sp, #12
 8016a74:	9300      	str	r3, [sp, #0]
 8016a76:	462a      	mov	r2, r5
 8016a78:	4b10      	ldr	r3, [pc, #64]	; (8016abc <_svfiprintf_r+0x1e4>)
 8016a7a:	a904      	add	r1, sp, #16
 8016a7c:	4640      	mov	r0, r8
 8016a7e:	f7fd fca3 	bl	80143c8 <_printf_float>
 8016a82:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016a86:	4681      	mov	r9, r0
 8016a88:	d1d9      	bne.n	8016a3e <_svfiprintf_r+0x166>
 8016a8a:	89ab      	ldrh	r3, [r5, #12]
 8016a8c:	065b      	lsls	r3, r3, #25
 8016a8e:	f53f af38 	bmi.w	8016902 <_svfiprintf_r+0x2a>
 8016a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a94:	b01d      	add	sp, #116	; 0x74
 8016a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a9a:	ab03      	add	r3, sp, #12
 8016a9c:	9300      	str	r3, [sp, #0]
 8016a9e:	462a      	mov	r2, r5
 8016aa0:	4b06      	ldr	r3, [pc, #24]	; (8016abc <_svfiprintf_r+0x1e4>)
 8016aa2:	a904      	add	r1, sp, #16
 8016aa4:	4640      	mov	r0, r8
 8016aa6:	f7fd ff45 	bl	8014934 <_printf_i>
 8016aaa:	e7ea      	b.n	8016a82 <_svfiprintf_r+0x1aa>
 8016aac:	0801a2a4 	.word	0x0801a2a4
 8016ab0:	0801a2aa 	.word	0x0801a2aa
 8016ab4:	0801a2ae 	.word	0x0801a2ae
 8016ab8:	080143c9 	.word	0x080143c9
 8016abc:	08016821 	.word	0x08016821

08016ac0 <__sfputc_r>:
 8016ac0:	6893      	ldr	r3, [r2, #8]
 8016ac2:	3b01      	subs	r3, #1
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	b410      	push	{r4}
 8016ac8:	6093      	str	r3, [r2, #8]
 8016aca:	da09      	bge.n	8016ae0 <__sfputc_r+0x20>
 8016acc:	6994      	ldr	r4, [r2, #24]
 8016ace:	42a3      	cmp	r3, r4
 8016ad0:	db02      	blt.n	8016ad8 <__sfputc_r+0x18>
 8016ad2:	b2cb      	uxtb	r3, r1
 8016ad4:	2b0a      	cmp	r3, #10
 8016ad6:	d103      	bne.n	8016ae0 <__sfputc_r+0x20>
 8016ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016adc:	f7fe b9da 	b.w	8014e94 <__swbuf_r>
 8016ae0:	6813      	ldr	r3, [r2, #0]
 8016ae2:	1c58      	adds	r0, r3, #1
 8016ae4:	6010      	str	r0, [r2, #0]
 8016ae6:	7019      	strb	r1, [r3, #0]
 8016ae8:	b2c8      	uxtb	r0, r1
 8016aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016aee:	4770      	bx	lr

08016af0 <__sfputs_r>:
 8016af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af2:	4606      	mov	r6, r0
 8016af4:	460f      	mov	r7, r1
 8016af6:	4614      	mov	r4, r2
 8016af8:	18d5      	adds	r5, r2, r3
 8016afa:	42ac      	cmp	r4, r5
 8016afc:	d101      	bne.n	8016b02 <__sfputs_r+0x12>
 8016afe:	2000      	movs	r0, #0
 8016b00:	e007      	b.n	8016b12 <__sfputs_r+0x22>
 8016b02:	463a      	mov	r2, r7
 8016b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f7ff ffd9 	bl	8016ac0 <__sfputc_r>
 8016b0e:	1c43      	adds	r3, r0, #1
 8016b10:	d1f3      	bne.n	8016afa <__sfputs_r+0xa>
 8016b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b14 <_vfiprintf_r>:
 8016b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b18:	b09d      	sub	sp, #116	; 0x74
 8016b1a:	460c      	mov	r4, r1
 8016b1c:	4617      	mov	r7, r2
 8016b1e:	9303      	str	r3, [sp, #12]
 8016b20:	4606      	mov	r6, r0
 8016b22:	b118      	cbz	r0, 8016b2c <_vfiprintf_r+0x18>
 8016b24:	6983      	ldr	r3, [r0, #24]
 8016b26:	b90b      	cbnz	r3, 8016b2c <_vfiprintf_r+0x18>
 8016b28:	f7ff f9ce 	bl	8015ec8 <__sinit>
 8016b2c:	4b7c      	ldr	r3, [pc, #496]	; (8016d20 <_vfiprintf_r+0x20c>)
 8016b2e:	429c      	cmp	r4, r3
 8016b30:	d157      	bne.n	8016be2 <_vfiprintf_r+0xce>
 8016b32:	6874      	ldr	r4, [r6, #4]
 8016b34:	89a3      	ldrh	r3, [r4, #12]
 8016b36:	0718      	lsls	r0, r3, #28
 8016b38:	d55d      	bpl.n	8016bf6 <_vfiprintf_r+0xe2>
 8016b3a:	6923      	ldr	r3, [r4, #16]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d05a      	beq.n	8016bf6 <_vfiprintf_r+0xe2>
 8016b40:	2300      	movs	r3, #0
 8016b42:	9309      	str	r3, [sp, #36]	; 0x24
 8016b44:	2320      	movs	r3, #32
 8016b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b4a:	2330      	movs	r3, #48	; 0x30
 8016b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b50:	f04f 0b01 	mov.w	fp, #1
 8016b54:	46b8      	mov	r8, r7
 8016b56:	4645      	mov	r5, r8
 8016b58:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d155      	bne.n	8016c0c <_vfiprintf_r+0xf8>
 8016b60:	ebb8 0a07 	subs.w	sl, r8, r7
 8016b64:	d00b      	beq.n	8016b7e <_vfiprintf_r+0x6a>
 8016b66:	4653      	mov	r3, sl
 8016b68:	463a      	mov	r2, r7
 8016b6a:	4621      	mov	r1, r4
 8016b6c:	4630      	mov	r0, r6
 8016b6e:	f7ff ffbf 	bl	8016af0 <__sfputs_r>
 8016b72:	3001      	adds	r0, #1
 8016b74:	f000 80c4 	beq.w	8016d00 <_vfiprintf_r+0x1ec>
 8016b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b7a:	4453      	add	r3, sl
 8016b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b7e:	f898 3000 	ldrb.w	r3, [r8]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	f000 80bc 	beq.w	8016d00 <_vfiprintf_r+0x1ec>
 8016b88:	2300      	movs	r3, #0
 8016b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8016b8e:	9304      	str	r3, [sp, #16]
 8016b90:	9307      	str	r3, [sp, #28]
 8016b92:	9205      	str	r2, [sp, #20]
 8016b94:	9306      	str	r3, [sp, #24]
 8016b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8016b9c:	2205      	movs	r2, #5
 8016b9e:	7829      	ldrb	r1, [r5, #0]
 8016ba0:	4860      	ldr	r0, [pc, #384]	; (8016d24 <_vfiprintf_r+0x210>)
 8016ba2:	f7e9 fb4d 	bl	8000240 <memchr>
 8016ba6:	f105 0801 	add.w	r8, r5, #1
 8016baa:	9b04      	ldr	r3, [sp, #16]
 8016bac:	2800      	cmp	r0, #0
 8016bae:	d131      	bne.n	8016c14 <_vfiprintf_r+0x100>
 8016bb0:	06d9      	lsls	r1, r3, #27
 8016bb2:	bf44      	itt	mi
 8016bb4:	2220      	movmi	r2, #32
 8016bb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016bba:	071a      	lsls	r2, r3, #28
 8016bbc:	bf44      	itt	mi
 8016bbe:	222b      	movmi	r2, #43	; 0x2b
 8016bc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016bc4:	782a      	ldrb	r2, [r5, #0]
 8016bc6:	2a2a      	cmp	r2, #42	; 0x2a
 8016bc8:	d02c      	beq.n	8016c24 <_vfiprintf_r+0x110>
 8016bca:	9a07      	ldr	r2, [sp, #28]
 8016bcc:	2100      	movs	r1, #0
 8016bce:	200a      	movs	r0, #10
 8016bd0:	46a8      	mov	r8, r5
 8016bd2:	3501      	adds	r5, #1
 8016bd4:	f898 3000 	ldrb.w	r3, [r8]
 8016bd8:	3b30      	subs	r3, #48	; 0x30
 8016bda:	2b09      	cmp	r3, #9
 8016bdc:	d96d      	bls.n	8016cba <_vfiprintf_r+0x1a6>
 8016bde:	b371      	cbz	r1, 8016c3e <_vfiprintf_r+0x12a>
 8016be0:	e026      	b.n	8016c30 <_vfiprintf_r+0x11c>
 8016be2:	4b51      	ldr	r3, [pc, #324]	; (8016d28 <_vfiprintf_r+0x214>)
 8016be4:	429c      	cmp	r4, r3
 8016be6:	d101      	bne.n	8016bec <_vfiprintf_r+0xd8>
 8016be8:	68b4      	ldr	r4, [r6, #8]
 8016bea:	e7a3      	b.n	8016b34 <_vfiprintf_r+0x20>
 8016bec:	4b4f      	ldr	r3, [pc, #316]	; (8016d2c <_vfiprintf_r+0x218>)
 8016bee:	429c      	cmp	r4, r3
 8016bf0:	bf08      	it	eq
 8016bf2:	68f4      	ldreq	r4, [r6, #12]
 8016bf4:	e79e      	b.n	8016b34 <_vfiprintf_r+0x20>
 8016bf6:	4621      	mov	r1, r4
 8016bf8:	4630      	mov	r0, r6
 8016bfa:	f7fe f9ab 	bl	8014f54 <__swsetup_r>
 8016bfe:	2800      	cmp	r0, #0
 8016c00:	d09e      	beq.n	8016b40 <_vfiprintf_r+0x2c>
 8016c02:	f04f 30ff 	mov.w	r0, #4294967295
 8016c06:	b01d      	add	sp, #116	; 0x74
 8016c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c0c:	2b25      	cmp	r3, #37	; 0x25
 8016c0e:	d0a7      	beq.n	8016b60 <_vfiprintf_r+0x4c>
 8016c10:	46a8      	mov	r8, r5
 8016c12:	e7a0      	b.n	8016b56 <_vfiprintf_r+0x42>
 8016c14:	4a43      	ldr	r2, [pc, #268]	; (8016d24 <_vfiprintf_r+0x210>)
 8016c16:	1a80      	subs	r0, r0, r2
 8016c18:	fa0b f000 	lsl.w	r0, fp, r0
 8016c1c:	4318      	orrs	r0, r3
 8016c1e:	9004      	str	r0, [sp, #16]
 8016c20:	4645      	mov	r5, r8
 8016c22:	e7bb      	b.n	8016b9c <_vfiprintf_r+0x88>
 8016c24:	9a03      	ldr	r2, [sp, #12]
 8016c26:	1d11      	adds	r1, r2, #4
 8016c28:	6812      	ldr	r2, [r2, #0]
 8016c2a:	9103      	str	r1, [sp, #12]
 8016c2c:	2a00      	cmp	r2, #0
 8016c2e:	db01      	blt.n	8016c34 <_vfiprintf_r+0x120>
 8016c30:	9207      	str	r2, [sp, #28]
 8016c32:	e004      	b.n	8016c3e <_vfiprintf_r+0x12a>
 8016c34:	4252      	negs	r2, r2
 8016c36:	f043 0302 	orr.w	r3, r3, #2
 8016c3a:	9207      	str	r2, [sp, #28]
 8016c3c:	9304      	str	r3, [sp, #16]
 8016c3e:	f898 3000 	ldrb.w	r3, [r8]
 8016c42:	2b2e      	cmp	r3, #46	; 0x2e
 8016c44:	d110      	bne.n	8016c68 <_vfiprintf_r+0x154>
 8016c46:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8016c4c:	f108 0101 	add.w	r1, r8, #1
 8016c50:	d137      	bne.n	8016cc2 <_vfiprintf_r+0x1ae>
 8016c52:	9b03      	ldr	r3, [sp, #12]
 8016c54:	1d1a      	adds	r2, r3, #4
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	9203      	str	r2, [sp, #12]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	bfb8      	it	lt
 8016c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c62:	f108 0802 	add.w	r8, r8, #2
 8016c66:	9305      	str	r3, [sp, #20]
 8016c68:	4d31      	ldr	r5, [pc, #196]	; (8016d30 <_vfiprintf_r+0x21c>)
 8016c6a:	f898 1000 	ldrb.w	r1, [r8]
 8016c6e:	2203      	movs	r2, #3
 8016c70:	4628      	mov	r0, r5
 8016c72:	f7e9 fae5 	bl	8000240 <memchr>
 8016c76:	b140      	cbz	r0, 8016c8a <_vfiprintf_r+0x176>
 8016c78:	2340      	movs	r3, #64	; 0x40
 8016c7a:	1b40      	subs	r0, r0, r5
 8016c7c:	fa03 f000 	lsl.w	r0, r3, r0
 8016c80:	9b04      	ldr	r3, [sp, #16]
 8016c82:	4303      	orrs	r3, r0
 8016c84:	9304      	str	r3, [sp, #16]
 8016c86:	f108 0801 	add.w	r8, r8, #1
 8016c8a:	f898 1000 	ldrb.w	r1, [r8]
 8016c8e:	4829      	ldr	r0, [pc, #164]	; (8016d34 <_vfiprintf_r+0x220>)
 8016c90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c94:	2206      	movs	r2, #6
 8016c96:	f108 0701 	add.w	r7, r8, #1
 8016c9a:	f7e9 fad1 	bl	8000240 <memchr>
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	d034      	beq.n	8016d0c <_vfiprintf_r+0x1f8>
 8016ca2:	4b25      	ldr	r3, [pc, #148]	; (8016d38 <_vfiprintf_r+0x224>)
 8016ca4:	bb03      	cbnz	r3, 8016ce8 <_vfiprintf_r+0x1d4>
 8016ca6:	9b03      	ldr	r3, [sp, #12]
 8016ca8:	3307      	adds	r3, #7
 8016caa:	f023 0307 	bic.w	r3, r3, #7
 8016cae:	3308      	adds	r3, #8
 8016cb0:	9303      	str	r3, [sp, #12]
 8016cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cb4:	444b      	add	r3, r9
 8016cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8016cb8:	e74c      	b.n	8016b54 <_vfiprintf_r+0x40>
 8016cba:	fb00 3202 	mla	r2, r0, r2, r3
 8016cbe:	2101      	movs	r1, #1
 8016cc0:	e786      	b.n	8016bd0 <_vfiprintf_r+0xbc>
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	9305      	str	r3, [sp, #20]
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	250a      	movs	r5, #10
 8016cca:	4688      	mov	r8, r1
 8016ccc:	3101      	adds	r1, #1
 8016cce:	f898 2000 	ldrb.w	r2, [r8]
 8016cd2:	3a30      	subs	r2, #48	; 0x30
 8016cd4:	2a09      	cmp	r2, #9
 8016cd6:	d903      	bls.n	8016ce0 <_vfiprintf_r+0x1cc>
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d0c5      	beq.n	8016c68 <_vfiprintf_r+0x154>
 8016cdc:	9005      	str	r0, [sp, #20]
 8016cde:	e7c3      	b.n	8016c68 <_vfiprintf_r+0x154>
 8016ce0:	fb05 2000 	mla	r0, r5, r0, r2
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	e7f0      	b.n	8016cca <_vfiprintf_r+0x1b6>
 8016ce8:	ab03      	add	r3, sp, #12
 8016cea:	9300      	str	r3, [sp, #0]
 8016cec:	4622      	mov	r2, r4
 8016cee:	4b13      	ldr	r3, [pc, #76]	; (8016d3c <_vfiprintf_r+0x228>)
 8016cf0:	a904      	add	r1, sp, #16
 8016cf2:	4630      	mov	r0, r6
 8016cf4:	f7fd fb68 	bl	80143c8 <_printf_float>
 8016cf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016cfc:	4681      	mov	r9, r0
 8016cfe:	d1d8      	bne.n	8016cb2 <_vfiprintf_r+0x19e>
 8016d00:	89a3      	ldrh	r3, [r4, #12]
 8016d02:	065b      	lsls	r3, r3, #25
 8016d04:	f53f af7d 	bmi.w	8016c02 <_vfiprintf_r+0xee>
 8016d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d0a:	e77c      	b.n	8016c06 <_vfiprintf_r+0xf2>
 8016d0c:	ab03      	add	r3, sp, #12
 8016d0e:	9300      	str	r3, [sp, #0]
 8016d10:	4622      	mov	r2, r4
 8016d12:	4b0a      	ldr	r3, [pc, #40]	; (8016d3c <_vfiprintf_r+0x228>)
 8016d14:	a904      	add	r1, sp, #16
 8016d16:	4630      	mov	r0, r6
 8016d18:	f7fd fe0c 	bl	8014934 <_printf_i>
 8016d1c:	e7ec      	b.n	8016cf8 <_vfiprintf_r+0x1e4>
 8016d1e:	bf00      	nop
 8016d20:	0801a164 	.word	0x0801a164
 8016d24:	0801a2a4 	.word	0x0801a2a4
 8016d28:	0801a184 	.word	0x0801a184
 8016d2c:	0801a144 	.word	0x0801a144
 8016d30:	0801a2aa 	.word	0x0801a2aa
 8016d34:	0801a2ae 	.word	0x0801a2ae
 8016d38:	080143c9 	.word	0x080143c9
 8016d3c:	08016af1 	.word	0x08016af1

08016d40 <_sbrk_r>:
 8016d40:	b538      	push	{r3, r4, r5, lr}
 8016d42:	4c06      	ldr	r4, [pc, #24]	; (8016d5c <_sbrk_r+0x1c>)
 8016d44:	2300      	movs	r3, #0
 8016d46:	4605      	mov	r5, r0
 8016d48:	4608      	mov	r0, r1
 8016d4a:	6023      	str	r3, [r4, #0]
 8016d4c:	f000 f8fa 	bl	8016f44 <_sbrk>
 8016d50:	1c43      	adds	r3, r0, #1
 8016d52:	d102      	bne.n	8016d5a <_sbrk_r+0x1a>
 8016d54:	6823      	ldr	r3, [r4, #0]
 8016d56:	b103      	cbz	r3, 8016d5a <_sbrk_r+0x1a>
 8016d58:	602b      	str	r3, [r5, #0]
 8016d5a:	bd38      	pop	{r3, r4, r5, pc}
 8016d5c:	20005720 	.word	0x20005720

08016d60 <__sread>:
 8016d60:	b510      	push	{r4, lr}
 8016d62:	460c      	mov	r4, r1
 8016d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d68:	f000 f8ba 	bl	8016ee0 <_read_r>
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	bfab      	itete	ge
 8016d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016d72:	89a3      	ldrhlt	r3, [r4, #12]
 8016d74:	181b      	addge	r3, r3, r0
 8016d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016d7a:	bfac      	ite	ge
 8016d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8016d7e:	81a3      	strhlt	r3, [r4, #12]
 8016d80:	bd10      	pop	{r4, pc}

08016d82 <__swrite>:
 8016d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d86:	461f      	mov	r7, r3
 8016d88:	898b      	ldrh	r3, [r1, #12]
 8016d8a:	05db      	lsls	r3, r3, #23
 8016d8c:	4605      	mov	r5, r0
 8016d8e:	460c      	mov	r4, r1
 8016d90:	4616      	mov	r6, r2
 8016d92:	d505      	bpl.n	8016da0 <__swrite+0x1e>
 8016d94:	2302      	movs	r3, #2
 8016d96:	2200      	movs	r2, #0
 8016d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d9c:	f000 f868 	bl	8016e70 <_lseek_r>
 8016da0:	89a3      	ldrh	r3, [r4, #12]
 8016da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016daa:	81a3      	strh	r3, [r4, #12]
 8016dac:	4632      	mov	r2, r6
 8016dae:	463b      	mov	r3, r7
 8016db0:	4628      	mov	r0, r5
 8016db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016db6:	f000 b817 	b.w	8016de8 <_write_r>

08016dba <__sseek>:
 8016dba:	b510      	push	{r4, lr}
 8016dbc:	460c      	mov	r4, r1
 8016dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dc2:	f000 f855 	bl	8016e70 <_lseek_r>
 8016dc6:	1c43      	adds	r3, r0, #1
 8016dc8:	89a3      	ldrh	r3, [r4, #12]
 8016dca:	bf15      	itete	ne
 8016dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8016dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016dd6:	81a3      	strheq	r3, [r4, #12]
 8016dd8:	bf18      	it	ne
 8016dda:	81a3      	strhne	r3, [r4, #12]
 8016ddc:	bd10      	pop	{r4, pc}

08016dde <__sclose>:
 8016dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016de2:	f000 b813 	b.w	8016e0c <_close_r>
	...

08016de8 <_write_r>:
 8016de8:	b538      	push	{r3, r4, r5, lr}
 8016dea:	4c07      	ldr	r4, [pc, #28]	; (8016e08 <_write_r+0x20>)
 8016dec:	4605      	mov	r5, r0
 8016dee:	4608      	mov	r0, r1
 8016df0:	4611      	mov	r1, r2
 8016df2:	2200      	movs	r2, #0
 8016df4:	6022      	str	r2, [r4, #0]
 8016df6:	461a      	mov	r2, r3
 8016df8:	f7fb faaa 	bl	8012350 <_write>
 8016dfc:	1c43      	adds	r3, r0, #1
 8016dfe:	d102      	bne.n	8016e06 <_write_r+0x1e>
 8016e00:	6823      	ldr	r3, [r4, #0]
 8016e02:	b103      	cbz	r3, 8016e06 <_write_r+0x1e>
 8016e04:	602b      	str	r3, [r5, #0]
 8016e06:	bd38      	pop	{r3, r4, r5, pc}
 8016e08:	20005720 	.word	0x20005720

08016e0c <_close_r>:
 8016e0c:	b538      	push	{r3, r4, r5, lr}
 8016e0e:	4c06      	ldr	r4, [pc, #24]	; (8016e28 <_close_r+0x1c>)
 8016e10:	2300      	movs	r3, #0
 8016e12:	4605      	mov	r5, r0
 8016e14:	4608      	mov	r0, r1
 8016e16:	6023      	str	r3, [r4, #0]
 8016e18:	f000 f874 	bl	8016f04 <_close>
 8016e1c:	1c43      	adds	r3, r0, #1
 8016e1e:	d102      	bne.n	8016e26 <_close_r+0x1a>
 8016e20:	6823      	ldr	r3, [r4, #0]
 8016e22:	b103      	cbz	r3, 8016e26 <_close_r+0x1a>
 8016e24:	602b      	str	r3, [r5, #0]
 8016e26:	bd38      	pop	{r3, r4, r5, pc}
 8016e28:	20005720 	.word	0x20005720

08016e2c <_fstat_r>:
 8016e2c:	b538      	push	{r3, r4, r5, lr}
 8016e2e:	4c07      	ldr	r4, [pc, #28]	; (8016e4c <_fstat_r+0x20>)
 8016e30:	2300      	movs	r3, #0
 8016e32:	4605      	mov	r5, r0
 8016e34:	4608      	mov	r0, r1
 8016e36:	4611      	mov	r1, r2
 8016e38:	6023      	str	r3, [r4, #0]
 8016e3a:	f000 f86b 	bl	8016f14 <_fstat>
 8016e3e:	1c43      	adds	r3, r0, #1
 8016e40:	d102      	bne.n	8016e48 <_fstat_r+0x1c>
 8016e42:	6823      	ldr	r3, [r4, #0]
 8016e44:	b103      	cbz	r3, 8016e48 <_fstat_r+0x1c>
 8016e46:	602b      	str	r3, [r5, #0]
 8016e48:	bd38      	pop	{r3, r4, r5, pc}
 8016e4a:	bf00      	nop
 8016e4c:	20005720 	.word	0x20005720

08016e50 <_isatty_r>:
 8016e50:	b538      	push	{r3, r4, r5, lr}
 8016e52:	4c06      	ldr	r4, [pc, #24]	; (8016e6c <_isatty_r+0x1c>)
 8016e54:	2300      	movs	r3, #0
 8016e56:	4605      	mov	r5, r0
 8016e58:	4608      	mov	r0, r1
 8016e5a:	6023      	str	r3, [r4, #0]
 8016e5c:	f000 f862 	bl	8016f24 <_isatty>
 8016e60:	1c43      	adds	r3, r0, #1
 8016e62:	d102      	bne.n	8016e6a <_isatty_r+0x1a>
 8016e64:	6823      	ldr	r3, [r4, #0]
 8016e66:	b103      	cbz	r3, 8016e6a <_isatty_r+0x1a>
 8016e68:	602b      	str	r3, [r5, #0]
 8016e6a:	bd38      	pop	{r3, r4, r5, pc}
 8016e6c:	20005720 	.word	0x20005720

08016e70 <_lseek_r>:
 8016e70:	b538      	push	{r3, r4, r5, lr}
 8016e72:	4c07      	ldr	r4, [pc, #28]	; (8016e90 <_lseek_r+0x20>)
 8016e74:	4605      	mov	r5, r0
 8016e76:	4608      	mov	r0, r1
 8016e78:	4611      	mov	r1, r2
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	6022      	str	r2, [r4, #0]
 8016e7e:	461a      	mov	r2, r3
 8016e80:	f000 f858 	bl	8016f34 <_lseek>
 8016e84:	1c43      	adds	r3, r0, #1
 8016e86:	d102      	bne.n	8016e8e <_lseek_r+0x1e>
 8016e88:	6823      	ldr	r3, [r4, #0]
 8016e8a:	b103      	cbz	r3, 8016e8e <_lseek_r+0x1e>
 8016e8c:	602b      	str	r3, [r5, #0]
 8016e8e:	bd38      	pop	{r3, r4, r5, pc}
 8016e90:	20005720 	.word	0x20005720

08016e94 <memmove>:
 8016e94:	4288      	cmp	r0, r1
 8016e96:	b510      	push	{r4, lr}
 8016e98:	eb01 0302 	add.w	r3, r1, r2
 8016e9c:	d803      	bhi.n	8016ea6 <memmove+0x12>
 8016e9e:	1e42      	subs	r2, r0, #1
 8016ea0:	4299      	cmp	r1, r3
 8016ea2:	d10c      	bne.n	8016ebe <memmove+0x2a>
 8016ea4:	bd10      	pop	{r4, pc}
 8016ea6:	4298      	cmp	r0, r3
 8016ea8:	d2f9      	bcs.n	8016e9e <memmove+0xa>
 8016eaa:	1881      	adds	r1, r0, r2
 8016eac:	1ad2      	subs	r2, r2, r3
 8016eae:	42d3      	cmn	r3, r2
 8016eb0:	d100      	bne.n	8016eb4 <memmove+0x20>
 8016eb2:	bd10      	pop	{r4, pc}
 8016eb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016eb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016ebc:	e7f7      	b.n	8016eae <memmove+0x1a>
 8016ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ec2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016ec6:	e7eb      	b.n	8016ea0 <memmove+0xc>

08016ec8 <__malloc_lock>:
 8016ec8:	4770      	bx	lr

08016eca <__malloc_unlock>:
 8016eca:	4770      	bx	lr

08016ecc <_malloc_usable_size_r>:
 8016ecc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	f1a0 0004 	sub.w	r0, r0, #4
 8016ed6:	bfbc      	itt	lt
 8016ed8:	580b      	ldrlt	r3, [r1, r0]
 8016eda:	18c0      	addlt	r0, r0, r3
 8016edc:	4770      	bx	lr
	...

08016ee0 <_read_r>:
 8016ee0:	b538      	push	{r3, r4, r5, lr}
 8016ee2:	4c07      	ldr	r4, [pc, #28]	; (8016f00 <_read_r+0x20>)
 8016ee4:	4605      	mov	r5, r0
 8016ee6:	4608      	mov	r0, r1
 8016ee8:	4611      	mov	r1, r2
 8016eea:	2200      	movs	r2, #0
 8016eec:	6022      	str	r2, [r4, #0]
 8016eee:	461a      	mov	r2, r3
 8016ef0:	f7fb fa62 	bl	80123b8 <_read>
 8016ef4:	1c43      	adds	r3, r0, #1
 8016ef6:	d102      	bne.n	8016efe <_read_r+0x1e>
 8016ef8:	6823      	ldr	r3, [r4, #0]
 8016efa:	b103      	cbz	r3, 8016efe <_read_r+0x1e>
 8016efc:	602b      	str	r3, [r5, #0]
 8016efe:	bd38      	pop	{r3, r4, r5, pc}
 8016f00:	20005720 	.word	0x20005720

08016f04 <_close>:
 8016f04:	4b02      	ldr	r3, [pc, #8]	; (8016f10 <_close+0xc>)
 8016f06:	2258      	movs	r2, #88	; 0x58
 8016f08:	601a      	str	r2, [r3, #0]
 8016f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f0e:	4770      	bx	lr
 8016f10:	20005720 	.word	0x20005720

08016f14 <_fstat>:
 8016f14:	4b02      	ldr	r3, [pc, #8]	; (8016f20 <_fstat+0xc>)
 8016f16:	2258      	movs	r2, #88	; 0x58
 8016f18:	601a      	str	r2, [r3, #0]
 8016f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f1e:	4770      	bx	lr
 8016f20:	20005720 	.word	0x20005720

08016f24 <_isatty>:
 8016f24:	4b02      	ldr	r3, [pc, #8]	; (8016f30 <_isatty+0xc>)
 8016f26:	2258      	movs	r2, #88	; 0x58
 8016f28:	601a      	str	r2, [r3, #0]
 8016f2a:	2000      	movs	r0, #0
 8016f2c:	4770      	bx	lr
 8016f2e:	bf00      	nop
 8016f30:	20005720 	.word	0x20005720

08016f34 <_lseek>:
 8016f34:	4b02      	ldr	r3, [pc, #8]	; (8016f40 <_lseek+0xc>)
 8016f36:	2258      	movs	r2, #88	; 0x58
 8016f38:	601a      	str	r2, [r3, #0]
 8016f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f3e:	4770      	bx	lr
 8016f40:	20005720 	.word	0x20005720

08016f44 <_sbrk>:
 8016f44:	4b04      	ldr	r3, [pc, #16]	; (8016f58 <_sbrk+0x14>)
 8016f46:	6819      	ldr	r1, [r3, #0]
 8016f48:	4602      	mov	r2, r0
 8016f4a:	b909      	cbnz	r1, 8016f50 <_sbrk+0xc>
 8016f4c:	4903      	ldr	r1, [pc, #12]	; (8016f5c <_sbrk+0x18>)
 8016f4e:	6019      	str	r1, [r3, #0]
 8016f50:	6818      	ldr	r0, [r3, #0]
 8016f52:	4402      	add	r2, r0
 8016f54:	601a      	str	r2, [r3, #0]
 8016f56:	4770      	bx	lr
 8016f58:	200040b8 	.word	0x200040b8
 8016f5c:	20005724 	.word	0x20005724

08016f60 <_init>:
 8016f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f62:	bf00      	nop
 8016f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f66:	bc08      	pop	{r3}
 8016f68:	469e      	mov	lr, r3
 8016f6a:	4770      	bx	lr

08016f6c <_fini>:
 8016f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f6e:	bf00      	nop
 8016f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f72:	bc08      	pop	{r3}
 8016f74:	469e      	mov	lr, r3
 8016f76:	4770      	bx	lr
