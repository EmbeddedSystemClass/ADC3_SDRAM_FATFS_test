
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c4c  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d9b0  0800d9b0  0001d9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000000  0800d9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021fc  200001d8  0800db90  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200023d4  0800db90  000223d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003793f  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005f4d  00000000  00000000  00057b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001e40  00000000  00000000  0005da98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bb8  00000000  00000000  0005f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011e5d  00000000  00000000  00061490  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000989c  00000000  00000000  000732ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007cb89  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008664  00000000  00000000  0007cc08  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  0008526c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  00085308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bd44 	.word	0x0800bd44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800bd44 	.word	0x0800bd44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <BSP_LCD_Init+0xcc>)
 80005c6:	2228      	movs	r2, #40	; 0x28
 80005c8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80005ca:	4b30      	ldr	r3, [pc, #192]	; (800068c <BSP_LCD_Init+0xcc>)
 80005cc:	2209      	movs	r2, #9
 80005ce:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <BSP_LCD_Init+0xcc>)
 80005d2:	2235      	movs	r2, #53	; 0x35
 80005d4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005d6:	4b2d      	ldr	r3, [pc, #180]	; (800068c <BSP_LCD_Init+0xcc>)
 80005d8:	220b      	movs	r2, #11
 80005da:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <BSP_LCD_Init+0xcc>)
 80005de:	f240 121b 	movw	r2, #283	; 0x11b
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <BSP_LCD_Init+0xcc>)
 80005e6:	f240 2215 	movw	r2, #533	; 0x215
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <BSP_LCD_Init+0xcc>)
 80005ee:	f240 121d 	movw	r2, #285	; 0x11d
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <BSP_LCD_Init+0xcc>)
 80005f6:	f240 2235 	movw	r2, #565	; 0x235
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4823      	ldr	r0, [pc, #140]	; (800068c <BSP_LCD_Init+0xcc>)
 8000600:	f000 fbb6 	bl	8000d70 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <BSP_LCD_Init+0xcc>)
 8000606:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800060a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <BSP_LCD_Init+0xcc>)
 800060e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000612:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <BSP_LCD_Init+0xcc>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <BSP_LCD_Init+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <BSP_LCD_Init+0xcc>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <BSP_LCD_Init+0xcc>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <BSP_LCD_Init+0xcc>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <BSP_LCD_Init+0xcc>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <BSP_LCD_Init+0xcc>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <BSP_LCD_Init+0xcc>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <BSP_LCD_Init+0xd0>)
 8000648:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <BSP_LCD_Init+0xcc>)
 800064c:	f002 fb1a 	bl	8002c84 <HAL_LTDC_GetState>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d103      	bne.n	800065e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000656:	2100      	movs	r1, #0
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <BSP_LCD_Init+0xcc>)
 800065a:	f000 faaf 	bl	8000bbc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <BSP_LCD_Init+0xcc>)
 8000660:	f002 f9f6 	bl	8002a50 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <BSP_LCD_Init+0xd4>)
 800066c:	f002 f8ae 	bl	80027cc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2108      	movs	r1, #8
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <BSP_LCD_Init+0xd8>)
 8000676:	f002 f8a9 	bl	80027cc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800067a:	f008 fa79 	bl	8008b70 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <BSP_LCD_Init+0xdc>)
 8000680:	f000 f8be 	bl	8000800 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200002f4 	.word	0x200002f4
 8000690:	40016800 	.word	0x40016800
 8000694:	40022000 	.word	0x40022000
 8000698:	40022800 	.word	0x40022800
 800069c:	20000000 	.word	0x20000000

080006a0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <BSP_LCD_GetXSize+0x20>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <BSP_LCD_GetXSize+0x24>)
 80006aa:	2134      	movs	r1, #52	; 0x34
 80006ac:	fb01 f303 	mul.w	r3, r1, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	3360      	adds	r3, #96	; 0x60
 80006b4:	681b      	ldr	r3, [r3, #0]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	20000234 	.word	0x20000234
 80006c4:	200002f4 	.word	0x200002f4

080006c8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <BSP_LCD_GetYSize+0x20>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <BSP_LCD_GetYSize+0x24>)
 80006d2:	2134      	movs	r1, #52	; 0x34
 80006d4:	fb01 f303 	mul.w	r3, r1, r3
 80006d8:	4413      	add	r3, r2
 80006da:	3364      	adds	r3, #100	; 0x64
 80006dc:	681b      	ldr	r3, [r3, #0]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20000234 	.word	0x20000234
 80006ec:	200002f4 	.word	0x200002f4

080006f0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b090      	sub	sp, #64	; 0x40
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000700:	f7ff ffce 	bl	80006a0 <BSP_LCD_GetXSize>
 8000704:	4603      	mov	r3, r0
 8000706:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800070c:	f7ff ffdc 	bl	80006c8 <BSP_LCD_GetYSize>
 8000710:	4603      	mov	r3, r0
 8000712:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800071c:	23ff      	movs	r3, #255	; 0xff
 800071e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000736:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800073c:	2307      	movs	r3, #7
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000740:	f7ff ffae 	bl	80006a0 <BSP_LCD_GetXSize>
 8000744:	4603      	mov	r3, r0
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000748:	f7ff ffbe 	bl	80006c8 <BSP_LCD_GetYSize>
 800074c:	4603      	mov	r3, r0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000750:	88fa      	ldrh	r2, [r7, #6]
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800075a:	f002 fa55 	bl	8002c08 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	4911      	ldr	r1, [pc, #68]	; (80007a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	440b      	add	r3, r1
 800076c:	3304      	adds	r3, #4
 800076e:	f04f 32ff 	mov.w	r2, #4294967295
 8000772:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	490c      	ldr	r1, [pc, #48]	; (80007a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000778:	4613      	mov	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	4413      	add	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	3308      	adds	r3, #8
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <BSP_LCD_LayerDefaultInit+0xbc>)
 8000786:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000788:	88fa      	ldrh	r2, [r7, #6]
 800078a:	4907      	ldr	r1, [pc, #28]	; (80007a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 800078c:	4613      	mov	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	440b      	add	r3, r1
 8000796:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	3740      	adds	r7, #64	; 0x40
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200002f4 	.word	0x200002f4
 80007a8:	20000238 	.word	0x20000238
 80007ac:	20000000 	.word	0x20000000

080007b0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <BSP_LCD_SelectLayer+0x1c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
} 
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000234 	.word	0x20000234

080007d0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <BSP_LCD_SetTextColor+0x28>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4907      	ldr	r1, [pc, #28]	; (80007fc <BSP_LCD_SetTextColor+0x2c>)
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	20000234 	.word	0x20000234
 80007fc:	20000238 	.word	0x20000238

08000800 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <BSP_LCD_SetFont+0x2c>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4908      	ldr	r1, [pc, #32]	; (8000830 <BSP_LCD_SetFont+0x30>)
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	3308      	adds	r3, #8
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000234 	.word	0x20000234
 8000830:	20000238 	.word	0x20000238

08000834 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <BSP_LCD_GetFont+0x24>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4907      	ldr	r1, [pc, #28]	; (800085c <BSP_LCD_GetFont+0x28>)
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	440b      	add	r3, r1
 8000848:	3308      	adds	r3, #8
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000234 	.word	0x20000234
 800085c:	20000238 	.word	0x20000238

08000860 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af02      	add	r7, sp, #8
 8000866:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <BSP_LCD_Clear+0x48>)
 800086a:	681c      	ldr	r4, [r3, #0]
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <BSP_LCD_Clear+0x48>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <BSP_LCD_Clear+0x4c>)
 8000872:	2134      	movs	r1, #52	; 0x34
 8000874:	fb01 f303 	mul.w	r3, r1, r3
 8000878:	4413      	add	r3, r2
 800087a:	335c      	adds	r3, #92	; 0x5c
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	461d      	mov	r5, r3
 8000880:	f7ff ff0e 	bl	80006a0 <BSP_LCD_GetXSize>
 8000884:	4606      	mov	r6, r0
 8000886:	f7ff ff1f 	bl	80006c8 <BSP_LCD_GetYSize>
 800088a:	4602      	mov	r2, r0
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	2300      	movs	r3, #0
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	4613      	mov	r3, r2
 8000896:	4632      	mov	r2, r6
 8000898:	4629      	mov	r1, r5
 800089a:	4620      	mov	r0, r4
 800089c:	f000 fb3c 	bl	8000f18 <LL_FillBuffer>
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	20000234 	.word	0x20000234
 80008ac:	200002f4 	.word	0x200002f4

080008b0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	80fb      	strh	r3, [r7, #6]
 80008ba:	460b      	mov	r3, r1
 80008bc:	80bb      	strh	r3, [r7, #4]
 80008be:	4613      	mov	r3, r2
 80008c0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <BSP_LCD_DisplayChar+0x80>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	491b      	ldr	r1, [pc, #108]	; (8000934 <BSP_LCD_DisplayChar+0x84>)
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	3308      	adds	r3, #8
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6819      	ldr	r1, [r3, #0]
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <BSP_LCD_DisplayChar+0x80>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4c14      	ldr	r4, [pc, #80]	; (8000934 <BSP_LCD_DisplayChar+0x84>)
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4423      	add	r3, r4
 80008ee:	3308      	adds	r3, #8
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008f4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <BSP_LCD_DisplayChar+0x80>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <BSP_LCD_DisplayChar+0x84>)
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4423      	add	r3, r4
 8000908:	3308      	adds	r3, #8
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	889b      	ldrh	r3, [r3, #4]
 800090e:	3307      	adds	r3, #7
 8000910:	2b00      	cmp	r3, #0
 8000912:	da00      	bge.n	8000916 <BSP_LCD_DisplayChar+0x66>
 8000914:	3307      	adds	r3, #7
 8000916:	10db      	asrs	r3, r3, #3
 8000918:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800091c:	18ca      	adds	r2, r1, r3
 800091e:	88b9      	ldrh	r1, [r7, #4]
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fa40 	bl	8000da8 <DrawChar>
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	20000234 	.word	0x20000234
 8000934:	20000238 	.word	0x20000238

08000938 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	60ba      	str	r2, [r7, #8]
 8000940:	461a      	mov	r2, r3
 8000942:	4603      	mov	r3, r0
 8000944:	81fb      	strh	r3, [r7, #14]
 8000946:	460b      	mov	r3, r1
 8000948:	81bb      	strh	r3, [r7, #12]
 800094a:	4613      	mov	r3, r2
 800094c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800094e:	2301      	movs	r3, #1
 8000950:	83fb      	strh	r3, [r7, #30]
 8000952:	2300      	movs	r3, #0
 8000954:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8000962:	e002      	b.n	800096a <BSP_LCD_DisplayStringAt+0x32>
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	3301      	adds	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	617a      	str	r2, [r7, #20]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f6      	bne.n	8000964 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000976:	f7ff fe93 	bl	80006a0 <BSP_LCD_GetXSize>
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <BSP_LCD_DisplayStringAt+0x180>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	494f      	ldr	r1, [pc, #316]	; (8000abc <BSP_LCD_DisplayStringAt+0x184>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3308      	adds	r3, #8
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	889b      	ldrh	r3, [r3, #4]
 8000990:	fbb0 f3f3 	udiv	r3, r0, r3
 8000994:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d01c      	beq.n	80009d6 <BSP_LCD_DisplayStringAt+0x9e>
 800099c:	2b03      	cmp	r3, #3
 800099e:	d017      	beq.n	80009d0 <BSP_LCD_DisplayStringAt+0x98>
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d12e      	bne.n	8000a02 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	1ad1      	subs	r1, r2, r3
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <BSP_LCD_DisplayStringAt+0x180>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4843      	ldr	r0, [pc, #268]	; (8000abc <BSP_LCD_DisplayStringAt+0x184>)
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4403      	add	r3, r0
 80009ba:	3308      	adds	r3, #8
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	889b      	ldrh	r3, [r3, #4]
 80009c0:	fb03 f301 	mul.w	r3, r3, r1
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	89fb      	ldrh	r3, [r7, #14]
 80009ca:	4413      	add	r3, r2
 80009cc:	83fb      	strh	r3, [r7, #30]
      break;
 80009ce:	e01b      	b.n	8000a08 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	83fb      	strh	r3, [r7, #30]
      break;
 80009d4:	e018      	b.n	8000a08 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	b299      	uxth	r1, r3
 80009de:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <BSP_LCD_DisplayStringAt+0x180>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4836      	ldr	r0, [pc, #216]	; (8000abc <BSP_LCD_DisplayStringAt+0x184>)
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4403      	add	r3, r0
 80009ee:	3308      	adds	r3, #8
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	889b      	ldrh	r3, [r3, #4]
 80009f4:	fb11 f303 	smulbb	r3, r1, r3
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	89fb      	ldrh	r3, [r7, #14]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	83fb      	strh	r3, [r7, #30]
      break;
 8000a00:	e002      	b.n	8000a08 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	83fb      	strh	r3, [r7, #30]
      break;
 8000a06:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000a08:	8bfb      	ldrh	r3, [r7, #30]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <BSP_LCD_DisplayStringAt+0xde>
 8000a0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	da1d      	bge.n	8000a52 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000a1a:	e01a      	b.n	8000a52 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	89b9      	ldrh	r1, [r7, #12]
 8000a22:	8bfb      	ldrh	r3, [r7, #30]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff43 	bl	80008b0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <BSP_LCD_DisplayStringAt+0x180>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4923      	ldr	r1, [pc, #140]	; (8000abc <BSP_LCD_DisplayStringAt+0x184>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	440b      	add	r3, r1
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	889a      	ldrh	r2, [r3, #4]
 8000a40:	8bfb      	ldrh	r3, [r7, #30]
 8000a42:	4413      	add	r3, r2
 8000a44:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
    i++;
 8000a4c:	8bbb      	ldrh	r3, [r7, #28]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	bf14      	ite	ne
 8000a5a:	2301      	movne	r3, #1
 8000a5c:	2300      	moveq	r3, #0
 8000a5e:	b2dc      	uxtb	r4, r3
 8000a60:	f7ff fe1e 	bl	80006a0 <BSP_LCD_GetXSize>
 8000a64:	4605      	mov	r5, r0
 8000a66:	8bb9      	ldrh	r1, [r7, #28]
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <BSP_LCD_DisplayStringAt+0x180>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <BSP_LCD_DisplayStringAt+0x184>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4403      	add	r3, r0
 8000a78:	3308      	adds	r3, #8
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	889b      	ldrh	r3, [r3, #4]
 8000a7e:	fb03 f301 	mul.w	r3, r3, r1
 8000a82:	1aeb      	subs	r3, r5, r3
 8000a84:	b299      	uxth	r1, r3
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <BSP_LCD_DisplayStringAt+0x180>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <BSP_LCD_DisplayStringAt+0x184>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4403      	add	r3, r0
 8000a96:	3308      	adds	r3, #8
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	889b      	ldrh	r3, [r3, #4]
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	bf2c      	ite	cs
 8000aa0:	2301      	movcs	r3, #1
 8000aa2:	2300      	movcc	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4023      	ands	r3, r4
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1b6      	bne.n	8000a1c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000234 	.word	0x20000234
 8000abc:	20000238 	.word	0x20000238

08000ac0 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000acc:	f7ff feb2 	bl	8000834 <BSP_LCD_GetFont>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	88db      	ldrh	r3, [r3, #6]
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	fb12 f303 	smulbb	r3, r2, r3
 8000ada:	b299      	uxth	r1, r3
 8000adc:	2303      	movs	r3, #3
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ff29 	bl	8000938 <BSP_LCD_DisplayStringAt>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	603a      	str	r2, [r7, #0]
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	460b      	mov	r3, r1
 8000afe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <BSP_LCD_DrawPixel+0x88>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <BSP_LCD_DrawPixel+0x8c>)
 8000b06:	2134      	movs	r1, #52	; 0x34
 8000b08:	fb01 f303 	mul.w	r3, r1, r3
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3348      	adds	r3, #72	; 0x48
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d116      	bne.n	8000b44 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <BSP_LCD_DrawPixel+0x88>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <BSP_LCD_DrawPixel+0x8c>)
 8000b1c:	2134      	movs	r1, #52	; 0x34
 8000b1e:	fb01 f303 	mul.w	r3, r1, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	335c      	adds	r3, #92	; 0x5c
 8000b26:	681c      	ldr	r4, [r3, #0]
 8000b28:	88bd      	ldrh	r5, [r7, #4]
 8000b2a:	f7ff fdb9 	bl	80006a0 <BSP_LCD_GetXSize>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	fb03 f205 	mul.w	r2, r3, r5
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4423      	add	r3, r4
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	b292      	uxth	r2, r2
 8000b40:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000b42:	e015      	b.n	8000b70 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <BSP_LCD_DrawPixel+0x88>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <BSP_LCD_DrawPixel+0x8c>)
 8000b4a:	2134      	movs	r1, #52	; 0x34
 8000b4c:	fb01 f303 	mul.w	r3, r1, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	335c      	adds	r3, #92	; 0x5c
 8000b54:	681c      	ldr	r4, [r3, #0]
 8000b56:	88bd      	ldrh	r5, [r7, #4]
 8000b58:	f7ff fda2 	bl	80006a0 <BSP_LCD_GetXSize>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	fb03 f205 	mul.w	r2, r3, r5
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4423      	add	r3, r4
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bdb0      	pop	{r4, r5, r7, pc}
 8000b78:	20000234 	.word	0x20000234
 8000b7c:	200002f4 	.word	0x200002f4

08000b80 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <BSP_LCD_DisplayOn+0x30>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <BSP_LCD_DisplayOn+0x30>)
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	6992      	ldr	r2, [r2, #24]
 8000b8e:	f042 0201 	orr.w	r2, r2, #1
 8000b92:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <BSP_LCD_DisplayOn+0x34>)
 8000b9c:	f001 fe16 	bl	80027cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <BSP_LCD_DisplayOn+0x38>)
 8000ba6:	f001 fe11 	bl	80027cc <HAL_GPIO_WritePin>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200002f4 	.word	0x200002f4
 8000bb4:	40022000 	.word	0x40022000
 8000bb8:	40022800 	.word	0x40022800

08000bbc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b090      	sub	sp, #64	; 0x40
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000bc6:	4a64      	ldr	r2, [pc, #400]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000bc8:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b61      	ldr	r3, [pc, #388]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bde:	4a5e      	ldr	r2, [pc, #376]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000be0:	4b5d      	ldr	r3, [pc, #372]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b5b      	ldr	r3, [pc, #364]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	4a58      	ldr	r2, [pc, #352]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000bf8:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b55      	ldr	r3, [pc, #340]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	623b      	str	r3, [r7, #32]
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0e:	4a52      	ldr	r2, [pc, #328]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c10:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c26:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c28:	4b4b      	ldr	r3, [pc, #300]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b49      	ldr	r3, [pc, #292]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c3e:	4a46      	ldr	r2, [pc, #280]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c40:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c56:	4a40      	ldr	r2, [pc, #256]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c58:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000c6e:	4a3a      	ldr	r2, [pc, #232]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c70:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000c86:	4a34      	ldr	r2, [pc, #208]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <BSP_LCD_MspInit+0x19c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000caa:	2302      	movs	r3, #2
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000cae:	230e      	movs	r3, #14
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4828      	ldr	r0, [pc, #160]	; (8000d5c <BSP_LCD_MspInit+0x1a0>)
 8000cba:	f001 fbdd 	bl	8002478 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <BSP_LCD_MspInit+0x1a4>)
 8000cd4:	f001 fbd0 	bl	8002478 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000cd8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000ce2:	230e      	movs	r3, #14
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	481d      	ldr	r0, [pc, #116]	; (8000d64 <BSP_LCD_MspInit+0x1a8>)
 8000cee:	f001 fbc3 	bl	8002478 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000cf2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <BSP_LCD_MspInit+0x1ac>)
 8000d08:	f001 fbb6 	bl	8002478 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000d0c:	23f7      	movs	r3, #247	; 0xf7
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000d14:	230e      	movs	r3, #14
 8000d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4813      	ldr	r0, [pc, #76]	; (8000d6c <BSP_LCD_MspInit+0x1b0>)
 8000d20:	f001 fbaa 	bl	8002478 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <BSP_LCD_MspInit+0x1a8>)
 8000d36:	f001 fb9f 	bl	8002478 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <BSP_LCD_MspInit+0x1b0>)
 8000d4a:	f001 fb95 	bl	8002478 <HAL_GPIO_Init>
}
 8000d4e:	bf00      	nop
 8000d50:	3740      	adds	r7, #64	; 0x40
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40021800 	.word	0x40021800
 8000d64:	40022000 	.word	0x40022000
 8000d68:	40022400 	.word	0x40022400
 8000d6c:	40022800 	.word	0x40022800

08000d70 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <BSP_LCD_ClockConfig+0x34>)
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <BSP_LCD_ClockConfig+0x34>)
 8000d82:	22c0      	movs	r2, #192	; 0xc0
 8000d84:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <BSP_LCD_ClockConfig+0x34>)
 8000d88:	2205      	movs	r2, #5
 8000d8a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <BSP_LCD_ClockConfig+0x34>)
 8000d8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <BSP_LCD_ClockConfig+0x34>)
 8000d96:	f003 ff63 	bl	8004c60 <HAL_RCCEx_PeriphCLKConfig>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000250 	.word	0x20000250

08000da8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	603a      	str	r2, [r7, #0]
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	460b      	mov	r3, r1
 8000db6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000dc0:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <DrawChar+0x168>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4953      	ldr	r1, [pc, #332]	; (8000f14 <DrawChar+0x16c>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	88db      	ldrh	r3, [r3, #6]
 8000dd6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <DrawChar+0x168>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	494d      	ldr	r1, [pc, #308]	; (8000f14 <DrawChar+0x16c>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	3308      	adds	r3, #8
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	889b      	ldrh	r3, [r3, #4]
 8000dee:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000df0:	8a3b      	ldrh	r3, [r7, #16]
 8000df2:	3307      	adds	r3, #7
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da00      	bge.n	8000dfa <DrawChar+0x52>
 8000df8:	3307      	adds	r3, #7
 8000dfa:	10db      	asrs	r3, r3, #3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	8a3b      	ldrh	r3, [r7, #16]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e076      	b.n	8000efe <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000e10:	8a3b      	ldrh	r3, [r7, #16]
 8000e12:	3307      	adds	r3, #7
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	da00      	bge.n	8000e1a <DrawChar+0x72>
 8000e18:	3307      	adds	r3, #7
 8000e1a:	10db      	asrs	r3, r3, #3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fb03 f302 	mul.w	r3, r3, r2
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000e2a:	8a3b      	ldrh	r3, [r7, #16]
 8000e2c:	3307      	adds	r3, #7
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da00      	bge.n	8000e34 <DrawChar+0x8c>
 8000e32:	3307      	adds	r3, #7
 8000e34:	10db      	asrs	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d002      	beq.n	8000e40 <DrawChar+0x98>
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d004      	beq.n	8000e48 <DrawChar+0xa0>
 8000e3e:	e00c      	b.n	8000e5a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	617b      	str	r3, [r7, #20]
      break;
 8000e46:	e016      	b.n	8000e76 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	3201      	adds	r2, #1
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
      break;
 8000e58:	e00d      	b.n	8000e76 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	041a      	lsls	r2, r3, #16
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	3301      	adds	r3, #1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	3202      	adds	r2, #2
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
      break;
 8000e74:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e036      	b.n	8000eea <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000e7c:	8a3a      	ldrh	r2, [r7, #16]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4413      	add	r3, r2
 8000e86:	3b01      	subs	r3, #1
 8000e88:	2201      	movs	r2, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d012      	beq.n	8000ebe <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <DrawChar+0x168>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	491b      	ldr	r1, [pc, #108]	; (8000f14 <DrawChar+0x16c>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fe1a 	bl	8000af0 <BSP_LCD_DrawPixel>
 8000ebc:	e012      	b.n	8000ee4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b298      	uxth	r0, r3
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <DrawChar+0x168>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4911      	ldr	r1, [pc, #68]	; (8000f14 <DrawChar+0x16c>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3304      	adds	r3, #4
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fe06 	bl	8000af0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	8a3a      	ldrh	r2, [r7, #16]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d8c4      	bhi.n	8000e7c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	8a7a      	ldrh	r2, [r7, #18]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d884      	bhi.n	8000e10 <DrawChar+0x68>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000234 	.word	0x20000234
 8000f14:	20000238 	.word	0x20000238

08000f18 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f2c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <LL_FillBuffer+0x8c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <LL_FillBuffer+0x90>)
 8000f34:	2134      	movs	r1, #52	; 0x34
 8000f36:	fb01 f303 	mul.w	r3, r1, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3348      	adds	r3, #72	; 0x48
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d103      	bne.n	8000f4c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	e002      	b.n	8000f52 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <LL_FillBuffer+0x94>)
 8000f5c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f60:	f000 fff2 	bl	8001f48 <HAL_DMA2D_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d115      	bne.n	8000f96 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000f6a:	68f9      	ldr	r1, [r7, #12]
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f6e:	f001 f949 	bl	8002204 <HAL_DMA2D_ConfigLayer>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10e      	bne.n	8000f96 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69f9      	ldr	r1, [r7, #28]
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f84:	f001 f82a 	bl	8001fdc <HAL_DMA2D_Start>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000f8e:	210a      	movs	r1, #10
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <LL_FillBuffer+0x88>)
 8000f92:	f001 f84e 	bl	8002032 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001f4 	.word	0x200001f4
 8000fa4:	20000234 	.word	0x20000234
 8000fa8:	200002f4 	.word	0x200002f4
 8000fac:	4002b000 	.word	0x4002b000

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x34>)
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x34>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_Init+0x34>)
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x34>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 fb89 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f009 f8d2 	bl	800a17c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f008 fe38 	bl	8009c4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	2000039c 	.word	0x2000039c

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000039c 	.word	0x2000039c

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_Delay+0x40>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad2      	subs	r2, r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f7      	bcc.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000008 	.word	0x20000008

0800106c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e031      	b.n	80010e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f008 fe09 	bl	8009cb0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_ADC_Init+0x84>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	f043 0202 	orr.w	r2, r3, #2
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f950 	bl	8001360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f023 0303 	bic.w	r3, r3, #3
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
 80010d6:	e001      	b.n	80010dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	ffffeefd 	.word	0xffffeefd

080010f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f4:	b490      	push	{r4, r7}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1c>
 800110c:	2302      	movs	r3, #2
 800110e:	e117      	b.n	8001340 <HAL_ADC_ConfigChannel+0x24c>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b09      	cmp	r3, #9
 800111e:	d936      	bls.n	800118e <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68d9      	ldr	r1, [r3, #12]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	4603      	mov	r3, r0
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4403      	add	r3, r0
 8001138:	3b1e      	subs	r3, #30
 800113a:	2007      	movs	r0, #7
 800113c:	fa00 f303 	lsl.w	r3, r0, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	400b      	ands	r3, r1
 8001144:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a80      	ldr	r2, [pc, #512]	; (800134c <HAL_ADC_ConfigChannel+0x258>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d10a      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	68d1      	ldr	r1, [r2, #12]
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	6892      	ldr	r2, [r2, #8]
 800115e:	0612      	lsls	r2, r2, #24
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	e037      	b.n	80011d6 <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68d9      	ldr	r1, [r3, #12]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b29b      	uxth	r3, r3
 800117a:	461c      	mov	r4, r3
 800117c:	4623      	mov	r3, r4
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4423      	add	r3, r4
 8001182:	3b1e      	subs	r3, #30
 8001184:	fa00 f303 	lsl.w	r3, r0, r3
 8001188:	430b      	orrs	r3, r1
 800118a:	60d3      	str	r3, [r2, #12]
 800118c:	e023      	b.n	80011d6 <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6919      	ldr	r1, [r3, #16]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	4603      	mov	r3, r0
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4403      	add	r3, r0
 80011a6:	2007      	movs	r0, #7
 80011a8:	fa00 f303 	lsl.w	r3, r0, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	400b      	ands	r3, r1
 80011b0:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6919      	ldr	r1, [r3, #16]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	461c      	mov	r4, r3
 80011c8:	4623      	mov	r3, r4
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4423      	add	r3, r4
 80011ce:	fa00 f303 	lsl.w	r3, r0, r3
 80011d2:	430b      	orrs	r3, r1
 80011d4:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d824      	bhi.n	8001228 <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	3b05      	subs	r3, #5
 80011f4:	221f      	movs	r2, #31
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4003      	ands	r3, r0
 80011fe:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	461c      	mov	r4, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b05      	subs	r3, #5
 800121e:	fa04 f303 	lsl.w	r3, r4, r3
 8001222:	4303      	orrs	r3, r0
 8001224:	634b      	str	r3, [r1, #52]	; 0x34
 8001226:	e04c      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d824      	bhi.n	800127a <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b23      	subs	r3, #35	; 0x23
 8001246:	221f      	movs	r2, #31
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	4003      	ands	r3, r0
 8001250:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6819      	ldr	r1, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	461c      	mov	r4, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b23      	subs	r3, #35	; 0x23
 8001270:	fa04 f303 	lsl.w	r3, r4, r3
 8001274:	4303      	orrs	r3, r0
 8001276:	630b      	str	r3, [r1, #48]	; 0x30
 8001278:	e023      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b41      	subs	r3, #65	; 0x41
 8001290:	221f      	movs	r2, #31
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	4003      	ands	r3, r0
 800129a:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6819      	ldr	r1, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	461c      	mov	r4, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b41      	subs	r3, #65	; 0x41
 80012ba:	fa04 f303 	lsl.w	r3, r4, r3
 80012be:	4303      	orrs	r3, r0
 80012c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <HAL_ADC_ConfigChannel+0x25c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d109      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1ec>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_ADC_ConfigChannel+0x260>)
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_ADC_ConfigChannel+0x260>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012de:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <HAL_ADC_ConfigChannel+0x25c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d125      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x242>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_ADC_ConfigChannel+0x258>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_ADC_ConfigChannel+0x208>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b11      	cmp	r3, #17
 80012fa:	d11c      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_ADC_ConfigChannel+0x260>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_ConfigChannel+0x260>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001306:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_ADC_ConfigChannel+0x258>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d111      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_ADC_ConfigChannel+0x264>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_ADC_ConfigChannel+0x268>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	0c9a      	lsrs	r2, r3, #18
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001328:	e002      	b.n	8001330 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3b01      	subs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f9      	bne.n	800132a <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bc90      	pop	{r4, r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	10000012 	.word	0x10000012
 8001350:	40012000 	.word	0x40012000
 8001354:	40012300 	.word	0x40012300
 8001358:	2000011c 	.word	0x2000011c
 800135c:	431bde83 	.word	0x431bde83

08001360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001368:	4a77      	ldr	r2, [pc, #476]	; (8001548 <ADC_Init+0x1e8>)
 800136a:	4b77      	ldr	r3, [pc, #476]	; (8001548 <ADC_Init+0x1e8>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001372:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001374:	4974      	ldr	r1, [pc, #464]	; (8001548 <ADC_Init+0x1e8>)
 8001376:	4b74      	ldr	r3, [pc, #464]	; (8001548 <ADC_Init+0x1e8>)
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	6852      	ldr	r2, [r2, #4]
 800138c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	6851      	ldr	r1, [r2, #4]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6912      	ldr	r2, [r2, #16]
 80013a0:	0212      	lsls	r2, r2, #8
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	6852      	ldr	r2, [r2, #4]
 80013b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	6851      	ldr	r1, [r2, #4]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6892      	ldr	r2, [r2, #8]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	6892      	ldr	r2, [r2, #8]
 80013d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	6891      	ldr	r1, [r2, #8]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68d2      	ldr	r2, [r2, #12]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	4a57      	ldr	r2, [pc, #348]	; (800154c <ADC_Init+0x1ec>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d022      	beq.n	800143a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	6892      	ldr	r2, [r2, #8]
 80013fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001402:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	6891      	ldr	r1, [r2, #8]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001412:	430a      	orrs	r2, r1
 8001414:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	6892      	ldr	r2, [r2, #8]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	6891      	ldr	r1, [r2, #8]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001434:	430a      	orrs	r2, r1
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	e00f      	b.n	800145a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	6892      	ldr	r2, [r2, #8]
 8001444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	6892      	ldr	r2, [r2, #8]
 8001454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001458:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	6892      	ldr	r2, [r2, #8]
 8001464:	f022 0202 	bic.w	r2, r2, #2
 8001468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	6891      	ldr	r1, [r2, #8]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6992      	ldr	r2, [r2, #24]
 8001478:	0052      	lsls	r2, r2, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01b      	beq.n	80014be <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	6852      	ldr	r2, [r2, #4]
 8001490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001494:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	6852      	ldr	r2, [r2, #4]
 80014a0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014a4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	6851      	ldr	r1, [r2, #4]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014b4:	3a01      	subs	r2, #1
 80014b6:	0352      	lsls	r2, r2, #13
 80014b8:	430a      	orrs	r2, r1
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	e007      	b.n	80014ce <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	6852      	ldr	r2, [r2, #4]
 80014c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014cc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	69d2      	ldr	r2, [r2, #28]
 80014ec:	3a01      	subs	r2, #1
 80014ee:	0512      	lsls	r2, r2, #20
 80014f0:	430a      	orrs	r2, r1
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	6892      	ldr	r2, [r2, #8]
 80014fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	6891      	ldr	r1, [r2, #8]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001512:	0252      	lsls	r2, r2, #9
 8001514:	430a      	orrs	r2, r1
 8001516:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	6892      	ldr	r2, [r2, #8]
 8001522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	6891      	ldr	r1, [r2, #8]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6952      	ldr	r2, [r2, #20]
 8001536:	0292      	lsls	r2, r2, #10
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40012300 	.word	0x40012300
 800154c:	0f000001 	.word	0x0f000001

08001550 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <NVIC_SetPriorityGrouping+0x40>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <NVIC_SetPriorityGrouping+0x44>)
 800157a:	4313      	orrs	r3, r2
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <NVIC_SetPriorityGrouping+0x40>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	05fa0000 	.word	0x05fa0000

08001598 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015be:	4909      	ldr	r1, [pc, #36]	; (80015e4 <NVIC_EnableIRQ+0x30>)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	095b      	lsrs	r3, r3, #5
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	f002 021f 	and.w	r2, r2, #31
 80015cc:	2001      	movs	r0, #1
 80015ce:	fa00 f202 	lsl.w	r2, r0, r2
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da0b      	bge.n	8001614 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	490d      	ldr	r1, [pc, #52]	; (8001634 <NVIC_SetPriority+0x4c>)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	3b04      	subs	r3, #4
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001612:	e009      	b.n	8001628 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	4908      	ldr	r1, [pc, #32]	; (8001638 <NVIC_SetPriority+0x50>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	e000e100 	.word	0xe000e100

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	2201      	movs	r2, #1
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	401a      	ands	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001682:	2101      	movs	r1, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	1e59      	subs	r1, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff2f 	bl	8001550 <NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff44 	bl	8001598 <NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff37 	bl	80015b4 <NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b04      	cmp	r3, #4
 8001774:	d106      	bne.n	8001784 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001782:	e005      	b.n	8001790 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80017a4:	f000 f802 	bl	80017ac <HAL_SYSTICK_Callback>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e054      	b.n	8001878 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7f5b      	ldrb	r3, [r3, #29]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f008 faa0 	bl	8009d24 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a22      	ldr	r2, [pc, #136]	; (8001880 <HAL_CRC_Init+0xc4>)
 80017f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6892      	ldr	r2, [r2, #8]
 8001804:	f022 0218 	bic.w	r2, r2, #24
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	e00c      	b.n	8001826 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	461a      	mov	r2, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f834 	bl	8001884 <HAL_CRCEx_Polynomial_Set>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e028      	b.n	8001878 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	795b      	ldrb	r3, [r3, #5]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f04f 32ff 	mov.w	r2, #4294967295
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	e004      	b.n	8001844 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6912      	ldr	r2, [r2, #16]
 8001842:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	6892      	ldr	r2, [r2, #8]
 800184e:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6952      	ldr	r2, [r2, #20]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	6892      	ldr	r2, [r2, #8]
 8001864:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6992      	ldr	r2, [r2, #24]
 800186c:	430a      	orrs	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	04c11db7 	.word	0x04c11db7

08001884 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001890:	231f      	movs	r3, #31
 8001892:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8001894:	bf00      	nop
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa22 f303 	lsr.w	r3, r2, r3
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d104      	bne.n	80018b0 <HAL_CRCEx_Polynomial_Set+0x2c>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	1e5a      	subs	r2, r3, #1
 80018aa:	617a      	str	r2, [r7, #20]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f2      	bne.n	8001896 <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b18      	cmp	r3, #24
 80018b4:	d843      	bhi.n	800193e <HAL_CRCEx_Polynomial_Set+0xba>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <HAL_CRCEx_Polynomial_Set+0x38>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	0800193f 	.word	0x0800193f
 80018c0:	0800193f 	.word	0x0800193f
 80018c4:	0800193f 	.word	0x0800193f
 80018c8:	0800193f 	.word	0x0800193f
 80018cc:	0800193f 	.word	0x0800193f
 80018d0:	0800193f 	.word	0x0800193f
 80018d4:	0800193f 	.word	0x0800193f
 80018d8:	0800193f 	.word	0x0800193f
 80018dc:	08001935 	.word	0x08001935
 80018e0:	0800193f 	.word	0x0800193f
 80018e4:	0800193f 	.word	0x0800193f
 80018e8:	0800193f 	.word	0x0800193f
 80018ec:	0800193f 	.word	0x0800193f
 80018f0:	0800193f 	.word	0x0800193f
 80018f4:	0800193f 	.word	0x0800193f
 80018f8:	0800193f 	.word	0x0800193f
 80018fc:	0800192b 	.word	0x0800192b
 8001900:	0800193f 	.word	0x0800193f
 8001904:	0800193f 	.word	0x0800193f
 8001908:	0800193f 	.word	0x0800193f
 800190c:	0800193f 	.word	0x0800193f
 8001910:	0800193f 	.word	0x0800193f
 8001914:	0800193f 	.word	0x0800193f
 8001918:	0800193f 	.word	0x0800193f
 800191c:	08001921 	.word	0x08001921
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d90d      	bls.n	8001942 <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e01f      	b.n	800196a <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b07      	cmp	r3, #7
 800192e:	d90a      	bls.n	8001946 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e01a      	b.n	800196a <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d907      	bls.n	800194a <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e015      	b.n	800196a <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 800193e:	bf00      	nop
 8001940:	e004      	b.n	800194c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8001942:	bf00      	nop
 8001944:	e002      	b.n	800194c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8001946:	bf00      	nop
 8001948:	e000      	b.n	800194c <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800194a:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	6892      	ldr	r2, [r2, #8]
 800195e:	f022 0118 	bic.w	r1, r2, #24
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	430a      	orrs	r2, r1
 8001966:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fb44 	bl	8001010 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e099      	b.n	8001ac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b4:	e00f      	b.n	80019d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b6:	f7ff fb2b 	bl	8001010 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d908      	bls.n	80019d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2203      	movs	r2, #3
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e078      	b.n	8001ac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e8      	bne.n	80019b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_DMA_Init+0x158>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d107      	bne.n	8001a40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f023 0307 	bic.w	r3, r3, #7
 8001a56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d117      	bne.n	8001a9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f9e9 	bl	8001e54 <DMA_CheckFifoParam>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a96:	2301      	movs	r3, #1
 8001a98:	e016      	b.n	8001ac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f9a0 	bl	8001de8 <DMA_CalcBaseAndBitshift>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab0:	223f      	movs	r2, #63	; 0x3f
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	f010803f 	.word	0xf010803f

08001ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ae0:	4b92      	ldr	r3, [pc, #584]	; (8001d2c <HAL_DMA_IRQHandler+0x258>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a92      	ldr	r2, [pc, #584]	; (8001d30 <HAL_DMA_IRQHandler+0x25c>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	2208      	movs	r2, #8
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f022 0204 	bic.w	r2, r2, #4
 8001b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2201      	movs	r2, #1
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	2201      	movs	r2, #1
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f043 0202 	orr.w	r2, r3, #2
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	2204      	movs	r2, #4
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f043 0204 	orr.w	r2, r3, #4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d043      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03c      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bce:	2210      	movs	r2, #16
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d024      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4798      	blx	r3
 8001c02:	e01f      	b.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01b      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e016      	b.n	8001c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	f022 0208 	bic.w	r2, r2, #8
 8001c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2220      	movs	r2, #32
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 808e 	beq.w	8001d72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8086 	beq.w	8001d72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d136      	bne.n	8001cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	f022 0216 	bic.w	r2, r2, #22
 8001c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	6952      	ldr	r2, [r2, #20]
 8001c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <HAL_DMA_IRQHandler+0x1da>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	f022 0208 	bic.w	r2, r2, #8
 8001cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	223f      	movs	r2, #63	; 0x3f
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d07d      	beq.n	8001dde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
        }
        return;
 8001cea:	e078      	b.n	8001dde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d108      	bne.n	8001d1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d030      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4798      	blx	r3
 8001d18:	e02b      	b.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
 8001d2a:	e022      	b.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
 8001d2c:	2000011c 	.word	0x2000011c
 8001d30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	f022 0210 	bic.w	r2, r2, #16
 8001d50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d032      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d022      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d807      	bhi.n	8001dba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f2      	bne.n	8001d9e <HAL_DMA_IRQHandler+0x2ca>
 8001db8:	e000      	b.n	8001dbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e000      	b.n	8001de0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dde:	bf00      	nop
    }
  }
}
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop

08001de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3b10      	subs	r3, #16
 8001df8:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <DMA_CalcBaseAndBitshift+0x60>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <DMA_CalcBaseAndBitshift+0x64>)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d908      	bls.n	8001e28 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <DMA_CalcBaseAndBitshift+0x68>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	1d1a      	adds	r2, r3, #4
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	659a      	str	r2, [r3, #88]	; 0x58
 8001e26:	e006      	b.n	8001e36 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <DMA_CalcBaseAndBitshift+0x68>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	aaaaaaab 	.word	0xaaaaaaab
 8001e4c:	0800d8dc 	.word	0x0800d8dc
 8001e50:	fffffc00 	.word	0xfffffc00

08001e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11f      	bne.n	8001eae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d855      	bhi.n	8001f20 <DMA_CheckFifoParam+0xcc>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <DMA_CheckFifoParam+0x28>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001e9f 	.word	0x08001e9f
 8001e84:	08001e8d 	.word	0x08001e8d
 8001e88:	08001f21 	.word	0x08001f21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d045      	beq.n	8001f24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9c:	e042      	b.n	8001f24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ea6:	d13f      	bne.n	8001f28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eac:	e03c      	b.n	8001f28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb6:	d121      	bne.n	8001efc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d836      	bhi.n	8001f2c <DMA_CheckFifoParam+0xd8>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <DMA_CheckFifoParam+0x70>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001edb 	.word	0x08001edb
 8001ecc:	08001ed5 	.word	0x08001ed5
 8001ed0:	08001eed 	.word	0x08001eed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed8:	e02f      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d024      	beq.n	8001f30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eea:	e021      	b.n	8001f30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ef4:	d11e      	bne.n	8001f34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001efa:	e01b      	b.n	8001f34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d902      	bls.n	8001f08 <DMA_CheckFifoParam+0xb4>
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d003      	beq.n	8001f0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f06:	e018      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f0c:	e015      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00e      	beq.n	8001f38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1e:	e00b      	b.n	8001f38 <DMA_CheckFifoParam+0xe4>
      break;
 8001f20:	bf00      	nop
 8001f22:	e00a      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      break;
 8001f24:	bf00      	nop
 8001f26:	e008      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      break;
 8001f28:	bf00      	nop
 8001f2a:	e006      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      break;
 8001f2c:	bf00      	nop
 8001f2e:	e004      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      break;
 8001f30:	bf00      	nop
 8001f32:	e002      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      break;   
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      break;
 8001f38:	bf00      	nop
    }
  } 
  
  return status; 
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e039      	b.n	8001fce <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f007 fef8 	bl	8009d64 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6852      	ldr	r2, [r2, #4]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f9c:	f022 0107 	bic.w	r1, r2, #7
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6892      	ldr	r2, [r2, #8]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_DMA2D_Init+0x90>)
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68c9      	ldr	r1, [r1, #12]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	ffffc000 	.word	0xffffc000

08001fdc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_DMA2D_Start+0x1c>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e018      	b.n	800202a <HAL_DMA2D_Start+0x4e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f98a 	bl	800232c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d056      	beq.n	8002100 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002052:	f7fe ffdd 	bl	8001010 <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002058:	e04b      	b.n	80020f2 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002068:	2b00      	cmp	r3, #0
 800206a:	d023      	beq.n	80020b4 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2221      	movs	r2, #33	; 0x21
 800209e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2204      	movs	r2, #4
 80020a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0a2      	b.n	80021fa <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d01a      	beq.n	80020f2 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA2D_PollForTransfer+0xa0>
 80020c2:	f7fe ffa5 	bl	8001010 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1ad2      	subs	r2, r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d90f      	bls.n	80020f2 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2203      	movs	r2, #3
 80020e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e083      	b.n	80021fa <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0ac      	beq.n	800205a <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002118:	2b00      	cmp	r3, #0
 800211a:	d061      	beq.n	80021e0 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800211c:	f7fe ff78 	bl	8001010 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002122:	e056      	b.n	80021d2 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002132:	2b00      	cmp	r3, #0
 8002134:	d02e      	beq.n	8002194 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2229      	movs	r2, #41	; 0x29
 800217e:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2204      	movs	r2, #4
 8002184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d01a      	beq.n	80021d2 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_DMA2D_PollForTransfer+0x180>
 80021a2:	f7fe ff35 	bl	8001010 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d90f      	bls.n	80021d2 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2203      	movs	r2, #3
 80021c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e013      	b.n	80021fa <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0a1      	beq.n	8002124 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2212      	movs	r2, #18
 80021e6:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	3318      	adds	r3, #24
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_DMA2D_ConfigLayer+0x34>
 8002234:	2302      	movs	r3, #2
 8002236:	e071      	b.n	800231c <HAL_DMA2D_ConfigLayer+0x118>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_DMA2D_ConfigLayer+0x124>)
 8002258:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b0a      	cmp	r3, #10
 8002260:	d003      	beq.n	800226a <HAL_DMA2D_ConfigLayer+0x66>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d107      	bne.n	800227a <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e005      	b.n	8002286 <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11f      	bne.n	80022cc <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	43d2      	mvns	r2, r2
 800229a:	4011      	ands	r1, r2
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	430a      	orrs	r2, r1
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b0a      	cmp	r3, #10
 80022b2:	d003      	beq.n	80022bc <HAL_DMA2D_ConfigLayer+0xb8>
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d126      	bne.n	800230a <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68d2      	ldr	r2, [r2, #12]
 80022c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
 80022ca:	e01e      	b.n	800230a <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	69d1      	ldr	r1, [r2, #28]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	43d2      	mvns	r2, r2
 80022da:	4011      	ands	r1, r2
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	430a      	orrs	r2, r1
 80022e0:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b0a      	cmp	r3, #10
 80022f2:	d003      	beq.n	80022fc <HAL_DMA2D_ConfigLayer+0xf8>
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b09      	cmp	r3, #9
 80022fa:	d106      	bne.n	800230a <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68d2      	ldr	r2, [r2, #12]
 8002304:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002308:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	ff03000f 	.word	0xff03000f

0800232c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 800232c:	b480      	push	{r7}
 800232e:	b08b      	sub	sp, #44	; 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002358:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	0410      	lsls	r0, r2, #16
 8002360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002362:	4302      	orrs	r2, r0
 8002364:	430a      	orrs	r2, r1
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002378:	d174      	bne.n	8002464 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002380:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002388:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002390:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	e053      	b.n	800245a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d106      	bne.n	80023c8 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	431a      	orrs	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	e048      	b.n	800245a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d111      	bne.n	80023f4 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	0cdb      	lsrs	r3, r3, #19
 80023d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	0a9b      	lsrs	r3, r3, #10
 80023da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	02db      	lsls	r3, r3, #11
 80023ea:	431a      	orrs	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	e032      	b.n	800245a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d117      	bne.n	800242c <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	0fdb      	lsrs	r3, r3, #31
 8002400:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	0cdb      	lsrs	r3, r3, #19
 8002406:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	0adb      	lsrs	r3, r3, #11
 800240c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	431a      	orrs	r2, r3
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	03db      	lsls	r3, r3, #15
 8002422:	431a      	orrs	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	e016      	b.n	800245a <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	0f1b      	lsrs	r3, r3, #28
 8002430:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	0d1b      	lsrs	r3, r3, #20
 8002436:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	0b1b      	lsrs	r3, r3, #12
 800243c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	011a      	lsls	r2, r3, #4
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	431a      	orrs	r2, r3
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	031b      	lsls	r3, r3, #12
 8002452:	431a      	orrs	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002462:	e003      	b.n	800246c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	60da      	str	r2, [r3, #12]
}
 800246c:	bf00      	nop
 800246e:	372c      	adds	r7, #44	; 0x2c
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e175      	b.n	8002784 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8164 	bne.w	800277e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x4e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d123      	bne.n	800250e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	69b9      	ldr	r1, [r7, #24]
 800250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d00b      	beq.n	8002562 <HAL_GPIO_Init+0xea>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002556:	2b11      	cmp	r3, #17
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b12      	cmp	r3, #18
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80be 	beq.w	800277e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_GPIO_Init+0x320>)
 8002604:	4b64      	ldr	r3, [pc, #400]	; (8002798 <HAL_GPIO_Init+0x320>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_GPIO_Init+0x320>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800261a:	4a60      	ldr	r2, [pc, #384]	; (800279c <HAL_GPIO_Init+0x324>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_GPIO_Init+0x328>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d037      	beq.n	80026b6 <HAL_GPIO_Init+0x23e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a56      	ldr	r2, [pc, #344]	; (80027a4 <HAL_GPIO_Init+0x32c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_GPIO_Init+0x23a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a55      	ldr	r2, [pc, #340]	; (80027a8 <HAL_GPIO_Init+0x330>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x236>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a54      	ldr	r2, [pc, #336]	; (80027ac <HAL_GPIO_Init+0x334>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x232>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a53      	ldr	r2, [pc, #332]	; (80027b0 <HAL_GPIO_Init+0x338>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x22e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_GPIO_Init+0x33c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x22a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a51      	ldr	r2, [pc, #324]	; (80027b8 <HAL_GPIO_Init+0x340>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x226>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_GPIO_Init+0x344>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x222>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4f      	ldr	r2, [pc, #316]	; (80027c0 <HAL_GPIO_Init+0x348>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x21e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4e      	ldr	r2, [pc, #312]	; (80027c4 <HAL_GPIO_Init+0x34c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x21a>
 800268e:	2309      	movs	r3, #9
 8002690:	e012      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 8002692:	230a      	movs	r3, #10
 8002694:	e010      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 8002696:	2308      	movs	r3, #8
 8002698:	e00e      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 800269a:	2307      	movs	r3, #7
 800269c:	e00c      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00a      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026c8:	4934      	ldr	r1, [pc, #208]	; (800279c <HAL_GPIO_Init+0x324>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d6:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <HAL_GPIO_Init+0x350>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026fa:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <HAL_GPIO_Init+0x350>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002724:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_GPIO_Init+0x350>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_GPIO_Init+0x350>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <HAL_GPIO_Init+0x350>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f ae86 	bls.w	8002498 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	3724      	adds	r7, #36	; 0x24
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40021c00 	.word	0x40021c00
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40022400 	.word	0x40022400
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07e      	b.n	8002910 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f007 fabc 	bl	8009da4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6852      	ldr	r2, [r2, #4]
 800284c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	6892      	ldr	r2, [r2, #8]
 800285c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d107      	bne.n	800287a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6892      	ldr	r2, [r2, #8]
 8002872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	e006      	b.n	8002888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6892      	ldr	r2, [r2, #8]
 8002882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d104      	bne.n	800289a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_I2C_Init+0x118>)
 80028a6:	430b      	orrs	r3, r1
 80028a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	68d2      	ldr	r2, [r2, #12]
 80028b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6911      	ldr	r1, [r2, #16]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6952      	ldr	r2, [r2, #20]
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6992      	ldr	r2, [r2, #24]
 80028cc:	0212      	lsls	r2, r2, #8
 80028ce:	430a      	orrs	r2, r1
 80028d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	69d1      	ldr	r1, [r2, #28]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6a12      	ldr	r2, [r2, #32]
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	02008000 	.word	0x02008000

0800291c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b20      	cmp	r3, #32
 8002930:	d138      	bne.n	80029a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800293c:	2302      	movs	r3, #2
 800293e:	e032      	b.n	80029a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	; 0x24
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800296e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	6811      	ldr	r1, [r2, #0]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d139      	bne.n	8002a40 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e033      	b.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2224      	movs	r2, #36	; 0x24
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0c7      	b.n	8002bfa <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f007 fa2c 	bl	8009edc <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	6992      	ldr	r2, [r2, #24]
 8002a96:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002a9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	6991      	ldr	r1, [r2, #24]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6850      	ldr	r0, [r2, #4]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6892      	ldr	r2, [r2, #8]
 8002aae:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ab4:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6912      	ldr	r2, [r2, #16]
 8002aba:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002abc:	430a      	orrs	r2, r1
 8002abe:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <HAL_LTDC_Init+0x1b4>)
 8002acc:	400b      	ands	r3, r1
 8002ace:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	6891      	ldr	r1, [r2, #8]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6990      	ldr	r0, [r2, #24]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4302      	orrs	r2, r0
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68d9      	ldr	r1, [r3, #12]
 8002af8:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <HAL_LTDC_Init+0x1b4>)
 8002afa:	400b      	ands	r3, r1
 8002afc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	68d1      	ldr	r1, [r2, #12]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6a10      	ldr	r0, [r2, #32]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4302      	orrs	r2, r0
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_LTDC_Init+0x1b4>)
 8002b28:	400b      	ands	r3, r1
 8002b2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	6911      	ldr	r1, [r2, #16]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4302      	orrs	r2, r0
 8002b46:	430a      	orrs	r2, r1
 8002b48:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6959      	ldr	r1, [r3, #20]
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_LTDC_Init+0x1b4>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	6951      	ldr	r1, [r2, #20]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4302      	orrs	r2, r0
 8002b74:	430a      	orrs	r2, r1
 8002b76:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002b88:	041b      	lsls	r3, r3, #16
 8002b8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b96:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ba6:	68b8      	ldr	r0, [r7, #8]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4302      	orrs	r2, r0
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002bb2:	4302      	orrs	r2, r0
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc2:	f042 0204 	orr.w	r2, r2, #4
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bd2:	f042 0202 	orr.w	r2, r2, #2
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	6992      	ldr	r2, [r2, #24]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	f000f800 	.word	0xf000f800

08002c08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_LTDC_ConfigLayer+0x1a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e02c      	b.n	8002c7c <HAL_LTDC_ConfigLayer+0x74>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2134      	movs	r1, #52	; 0x34
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f81f 	bl	8002ca0 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2201      	movs	r2, #1
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdb0      	pop	{r4, r5, r7, pc}

08002c84 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002c92:	b2db      	uxtb	r3, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	4413      	add	r3, r2
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	01db      	lsls	r3, r3, #7
 8002cd8:	4413      	add	r3, r2
 8002cda:	3384      	adds	r3, #132	; 0x84
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	440b      	add	r3, r1
 8002cea:	3384      	adds	r3, #132	; 0x84
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002cf2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	01db      	lsls	r3, r3, #7
 8002cfe:	4413      	add	r3, r2
 8002d00:	3384      	adds	r3, #132	; 0x84
 8002d02:	4619      	mov	r1, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	4413      	add	r3, r2
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2c:	4413      	add	r3, r2
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	01db      	lsls	r3, r3, #7
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3384      	adds	r3, #132	; 0x84
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	01db      	lsls	r3, r3, #7
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3384      	adds	r3, #132	; 0x84
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d56:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	01db      	lsls	r3, r3, #7
 8002d62:	4413      	add	r3, r2
 8002d64:	3384      	adds	r3, #132	; 0x84
 8002d66:	4619      	mov	r1, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d76:	4413      	add	r3, r2
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	01db      	lsls	r3, r3, #7
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3384      	adds	r3, #132	; 0x84
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	01db      	lsls	r3, r3, #7
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3384      	adds	r3, #132	; 0x84
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f023 0307 	bic.w	r3, r3, #7
 8002da4:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	01db      	lsls	r3, r3, #7
 8002db0:	4413      	add	r3, r2
 8002db2:	3384      	adds	r3, #132	; 0x84
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	01db      	lsls	r3, r3, #7
 8002de2:	4413      	add	r3, r2
 8002de4:	3384      	adds	r3, #132	; 0x84
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	01db      	lsls	r3, r3, #7
 8002df2:	4413      	add	r3, r2
 8002df4:	3384      	adds	r3, #132	; 0x84
 8002df6:	461a      	mov	r2, r3
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	01db      	lsls	r3, r3, #7
 8002e06:	4413      	add	r3, r2
 8002e08:	3384      	adds	r3, #132	; 0x84
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e12:	461a      	mov	r2, r3
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	01db      	lsls	r3, r3, #7
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3384      	adds	r3, #132	; 0x84
 8002e30:	461a      	mov	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	01db      	lsls	r3, r3, #7
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3384      	adds	r3, #132	; 0x84
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	01db      	lsls	r3, r3, #7
 8002e52:	4413      	add	r3, r2
 8002e54:	3384      	adds	r3, #132	; 0x84
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	01db      	lsls	r3, r3, #7
 8002e68:	4413      	add	r3, r2
 8002e6a:	3384      	adds	r3, #132	; 0x84
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	01db      	lsls	r3, r3, #7
 8002e78:	4413      	add	r3, r2
 8002e7a:	3384      	adds	r3, #132	; 0x84
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <LTDC_SetConfig+0x348>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	01db      	lsls	r3, r3, #7
 8002e8e:	4413      	add	r3, r2
 8002e90:	3384      	adds	r3, #132	; 0x84
 8002e92:	4619      	mov	r1, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	01db      	lsls	r3, r3, #7
 8002eaa:	4413      	add	r3, r2
 8002eac:	3384      	adds	r3, #132	; 0x84
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	01db      	lsls	r3, r3, #7
 8002eba:	4413      	add	r3, r2
 8002ebc:	3384      	adds	r3, #132	; 0x84
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	3384      	adds	r3, #132	; 0x84
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e01b      	b.n	8002f20 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d102      	bne.n	8002ef6 <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e014      	b.n	8002f20 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d00b      	beq.n	8002f16 <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d007      	beq.n	8002f16 <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d003      	beq.n	8002f16 <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f12:	2b07      	cmp	r3, #7
 8002f14:	d102      	bne.n	8002f1c <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e001      	b.n	8002f20 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	01db      	lsls	r3, r3, #7
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3384      	adds	r3, #132	; 0x84
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	01db      	lsls	r3, r3, #7
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3384      	adds	r3, #132	; 0x84
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002f44:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	01db      	lsls	r3, r3, #7
 8002f50:	4413      	add	r3, r2
 8002f52:	3384      	adds	r3, #132	; 0x84
 8002f54:	4618      	mov	r0, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	041a      	lsls	r2, r3, #16
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1acb      	subs	r3, r1, r3
 8002f6c:	69f9      	ldr	r1, [r7, #28]
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	3303      	adds	r3, #3
 8002f74:	4313      	orrs	r3, r2
 8002f76:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	01db      	lsls	r3, r3, #7
 8002f82:	4413      	add	r3, r2
 8002f84:	3384      	adds	r3, #132	; 0x84
 8002f86:	4619      	mov	r1, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	01db      	lsls	r3, r3, #7
 8002f92:	4413      	add	r3, r2
 8002f94:	3384      	adds	r3, #132	; 0x84
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <LTDC_SetConfig+0x34c>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	4413      	add	r3, r2
 8002faa:	3384      	adds	r3, #132	; 0x84
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	01db      	lsls	r3, r3, #7
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3384      	adds	r3, #132	; 0x84
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	01db      	lsls	r3, r3, #7
 8002fce:	440b      	add	r3, r1
 8002fd0:	3384      	adds	r3, #132	; 0x84
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	fffff8f8 	.word	0xfffff8f8
 8002fec:	fffff800 	.word	0xfffff800

08002ff0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	b08f      	sub	sp, #60	; 0x3c
 8002ff4:	af0a      	add	r7, sp, #40	; 0x28
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0fe      	b.n	8003204 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2203      	movs	r2, #3
 800300a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f007 fa28 	bl	800a464 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fa20 	bl	800645e <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	687e      	ldr	r6, [r7, #4]
 8003026:	466d      	mov	r5, sp
 8003028:	f106 0410 	add.w	r4, r6, #16
 800302c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003038:	e885 0003 	stmia.w	r5, {r0, r1}
 800303c:	1d33      	adds	r3, r6, #4
 800303e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f003 f9a9 	bl	8006398 <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fa17 	bl	8006480 <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e04c      	b.n	80030f2 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3339      	adds	r3, #57	; 0x39
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b2d8      	uxtb	r0, r3
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3338      	adds	r3, #56	; 0x38
 8003080:	4602      	mov	r2, r0
 8003082:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	b298      	uxth	r0, r3
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	333e      	adds	r3, #62	; 0x3e
 8003098:	4602      	mov	r2, r0
 800309a:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	333b      	adds	r3, #59	; 0x3b
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3340      	adds	r3, #64	; 0x40
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3344      	adds	r3, #68	; 0x44
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	334c      	adds	r3, #76	; 0x4c
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b0e      	cmp	r3, #14
 80030f6:	d9af      	bls.n	8003058 <HAL_PCD_Init+0x68>
 }

 for (i = 0; i < 15 ; i++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e05a      	b.n	80031b4 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	b2d8      	uxtb	r0, r3
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800312a:	4602      	mov	r2, r0
 800312c:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	b298      	uxth	r0, r3
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	333e      	adds	r3, #62	; 0x3e
 8003142:	4602      	mov	r2, r0
 8003144:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3340      	adds	r3, #64	; 0x40
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b0e      	cmp	r3, #14
 80031b8:	d9a1      	bls.n	80030fe <HAL_PCD_Init+0x10e>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	687e      	ldr	r6, [r7, #4]
 80031c2:	466d      	mov	r5, sp
 80031c4:	f106 0410 	add.w	r4, r6, #16
 80031c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80031d8:	1d33      	adds	r3, r6, #4
 80031da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031dc:	6838      	ldr	r0, [r7, #0]
 80031de:	f003 f977 	bl	80064d0 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f001 f84c 	bl	8004290 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 f96c 	bl	80074da <USB_DevDisconnect>
 return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800320c <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_PCD_Start+0x16>
 800321e:	2302      	movs	r3, #2
 8003220:	e012      	b.n	8003248 <HAL_PCD_Start+0x3c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f004 f93c 	bl	80074ac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 f8ff 	bl	800643c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08c      	sub	sp, #48	; 0x30
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003262:	2300      	movs	r3, #0
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 800327a:	4b98      	ldr	r3, [pc, #608]	; (80034dc <HAL_PCD_IRQHandler+0x28c>)
 800327c:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 f9cb 	bl	800761e <USB_GetMode>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 84e1 	bne.w	8003c52 <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f004 f937 	bl	8007508 <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 84d7 	beq.w	8003c50 <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f92e 	bl	8007508 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 f920 	bl	8007508 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032d2:	f040 80ed 	bne.w	80034b0 <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 f927 	bl	8007532 <USB_ReadDevAllOutEpInterrupt>
 80032e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 80032e6:	e0df      	b.n	80034a8 <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80d4 	beq.w	800349c <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 f947 	bl	8007592 <USB_ReadDevOutEPInterrupt>
 8003304:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8082 	beq.w	8003416 <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331e:	461a      	mov	r2, r3
 8003320:	2301      	movs	r3, #1
 8003322:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d111      	bne.n	8003350 <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003348:	461a      	mov	r2, r3
 800334a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334e:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d13c      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	0159      	lsls	r1, r3, #5
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	440b      	add	r3, r1
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	1ad1      	subs	r1, r2, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4403      	add	r3, r0
 800338e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003392:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4403      	add	r3, r0
 80033b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4419      	add	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4403      	add	r3, r0
 80033cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033d0:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f007 f8cf 	bl	800a57c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d117      	bne.n	8003416 <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d114      	bne.n	8003416 <HAL_PCD_IRQHandler+0x1c6>
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800340e:	461a      	mov	r2, r3
 8003410:	2101      	movs	r1, #1
 8003412:	f004 f949 	bl	80076a8 <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d021      	beq.n	8003464 <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d111      	bne.n	800344c <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003444:	461a      	mov	r2, r3
 8003446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344a:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f007 f883 	bl	800a558 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345e:	461a      	mov	r2, r3
 8003460:	2308      	movs	r3, #8
 8003462:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347a:	461a      	mov	r2, r3
 800347c:	2310      	movs	r3, #16
 800347e:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003496:	461a      	mov	r2, r3
 8003498:	2320      	movs	r3, #32
 800349a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	3301      	adds	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f47f af1c 	bne.w	80032e8 <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f004 f827 	bl	8007508 <USB_ReadInterrupts>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034c4:	f040 80c6 	bne.w	8003654 <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 f848 	bl	8007562 <USB_ReadDevAllInEpInterrupt>
 80034d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 80034d8:	e0b8      	b.n	800364c <HAL_PCD_IRQHandler+0x3fc>
 80034da:	bf00      	nop
 80034dc:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80aa 	beq.w	8003640 <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 f867 	bl	80075ca <USB_ReadDevInEPInterrupt>
 80034fc:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05a      	beq.n	80035be <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 8003508:	2201      	movs	r2, #1
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	4619      	mov	r1, r3
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	43db      	mvns	r3, r3
 8003526:	4013      	ands	r3, r2
 8003528:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003536:	461a      	mov	r2, r3
 8003538:	2301      	movs	r3, #1
 800353a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d11b      	bne.n	800357c <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3344      	adds	r3, #68	; 0x44
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4403      	add	r3, r0
 8003564:	3340      	adds	r3, #64	; 0x40
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4419      	add	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4403      	add	r3, r0
 8003578:	3344      	adds	r3, #68	; 0x44
 800357a:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f007 f815 	bl	800a5b2 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d116      	bne.n	80035be <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	2b00      	cmp	r3, #0
 8003594:	d113      	bne.n	80035be <HAL_PCD_IRQHandler+0x36e>
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334c      	adds	r3, #76	; 0x4c
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80035b6:	461a      	mov	r2, r3
 80035b8:	2101      	movs	r1, #1
 80035ba:	f004 f875 	bl	80076a8 <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2308      	movs	r3, #8
 80035d8:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f0:	461a      	mov	r2, r3
 80035f2:	2310      	movs	r3, #16
 80035f4:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	2340      	movs	r3, #64	; 0x40
 8003610:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003628:	461a      	mov	r2, r3
 800362a:	2302      	movs	r3, #2
 800362c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8003638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fd43 	bl	80040c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	3301      	adds	r3, #1
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	2b00      	cmp	r3, #0
 8003650:	f47f af46 	bne.w	80034e0 <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f003 ff55 	bl	8007508 <USB_ReadInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003668:	d120      	bne.n	80036ac <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003670:	461a      	mov	r2, r3
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8003686:	2b01      	cmp	r3, #1
 8003688:	d108      	bne.n	800369c <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003692:	2100      	movs	r1, #0
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f007 faa7 	bl	800abe8 <HAL_PCDEx_LPM_Callback>
 800369a:	e002      	b.n	80036a2 <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f007 f801 	bl	800a6a4 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 ff29 	bl	8007508 <USB_ReadInterrupts>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c0:	d10f      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f006 ffbe 	bl	800a654 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 ff0e 	bl	8007508 <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f6:	d11e      	bne.n	8003736 <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003700:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8003708:	2b00      	cmp	r3, #0
 800370a:	d111      	bne.n	8003730 <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003726:	2101      	movs	r1, #1
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f007 fa5d 	bl	800abe8 <HAL_PCDEx_LPM_Callback>
 800372e:	e002      	b.n	8003736 <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f006 ff8f 	bl	800a654 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f003 fee4 	bl	8007508 <USB_ReadInterrupts>
 8003740:	4603      	mov	r3, r0
 8003742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	f040 80b0 	bne.w	80038ae <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003754:	461a      	mov	r2, r3
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2110      	movs	r1, #16
 800376a:	4618      	mov	r0, r3
 800376c:	f002 fffe 	bl	800676c <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003774:	e036      	b.n	80037e4 <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	461a      	mov	r2, r3
 8003784:	23ff      	movs	r3, #255	; 0xff
 8003786:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	4619      	mov	r1, r3
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037a8:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	461a      	mov	r2, r3
 80037b8:	23ff      	movs	r3, #255	; 0xff
 80037ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c8:	4619      	mov	r1, r3
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037dc:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	3301      	adds	r3, #1
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d8c3      	bhi.n	8003776 <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f4:	461a      	mov	r2, r3
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003802:	461a      	mov	r2, r3
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003810:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	2b00      	cmp	r3, #0
 8003818:	d018      	beq.n	800384c <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003820:	461a      	mov	r2, r3
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382c:	f043 030b 	orr.w	r3, r3, #11
 8003830:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	461a      	mov	r2, r3
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f043 030b 	orr.w	r3, r3, #11
 8003848:	6453      	str	r3, [r2, #68]	; 0x44
 800384a:	e015      	b.n	8003878 <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	461a      	mov	r2, r3
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003860:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	461a      	mov	r2, r3
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f043 030b 	orr.w	r3, r3, #11
 8003876:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	461a      	mov	r2, r3
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800388c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	b2d9      	uxtb	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800389e:	461a      	mov	r2, r3
 80038a0:	f003 ff02 	bl	80076a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 fe28 	bl	8007508 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c2:	f040 80d7 	bne.w	8003a74 <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 feb6 	bl	800763c <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80038de:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 ffa1 	bl	800682c <USB_GetDevSpeed>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10f      	bne.n	8003910 <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fc:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	68d2      	ldr	r2, [r2, #12]
 8003908:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	e0a9      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2203      	movs	r2, #3
 8003914:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800391c:	f001 f93a 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8003920:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a79      	ldr	r2, [pc, #484]	; (8003b0c <HAL_PCD_IRQHandler+0x8bc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d90c      	bls.n	8003944 <HAL_PCD_IRQHandler+0x6f4>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a78      	ldr	r2, [pc, #480]	; (8003b10 <HAL_PCD_IRQHandler+0x8c0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d808      	bhi.n	8003944 <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	68d2      	ldr	r2, [r2, #12]
 800393c:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	e08f      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a72      	ldr	r2, [pc, #456]	; (8003b10 <HAL_PCD_IRQHandler+0x8c0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d90c      	bls.n	8003966 <HAL_PCD_IRQHandler+0x716>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a71      	ldr	r2, [pc, #452]	; (8003b14 <HAL_PCD_IRQHandler+0x8c4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d808      	bhi.n	8003966 <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	e07e      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_PCD_IRQHandler+0x8c4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d90c      	bls.n	8003988 <HAL_PCD_IRQHandler+0x738>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a69      	ldr	r2, [pc, #420]	; (8003b18 <HAL_PCD_IRQHandler+0x8c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d808      	bhi.n	8003988 <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	68d2      	ldr	r2, [r2, #12]
 8003980:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	e06d      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a63      	ldr	r2, [pc, #396]	; (8003b18 <HAL_PCD_IRQHandler+0x8c8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d90c      	bls.n	80039aa <HAL_PCD_IRQHandler+0x75a>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a62      	ldr	r2, [pc, #392]	; (8003b1c <HAL_PCD_IRQHandler+0x8cc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d808      	bhi.n	80039aa <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	e05c      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a5b      	ldr	r2, [pc, #364]	; (8003b1c <HAL_PCD_IRQHandler+0x8cc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d90c      	bls.n	80039cc <HAL_PCD_IRQHandler+0x77c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a5a      	ldr	r2, [pc, #360]	; (8003b20 <HAL_PCD_IRQHandler+0x8d0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d808      	bhi.n	80039cc <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	68d2      	ldr	r2, [r2, #12]
 80039c4:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e04b      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a54      	ldr	r2, [pc, #336]	; (8003b20 <HAL_PCD_IRQHandler+0x8d0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d90c      	bls.n	80039ee <HAL_PCD_IRQHandler+0x79e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a53      	ldr	r2, [pc, #332]	; (8003b24 <HAL_PCD_IRQHandler+0x8d4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d808      	bhi.n	80039ee <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	68d2      	ldr	r2, [r2, #12]
 80039e6:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	e03a      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <HAL_PCD_IRQHandler+0x8d4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d90c      	bls.n	8003a10 <HAL_PCD_IRQHandler+0x7c0>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_PCD_IRQHandler+0x8d8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d808      	bhi.n	8003a10 <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	68d2      	ldr	r2, [r2, #12]
 8003a08:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	e029      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a45      	ldr	r2, [pc, #276]	; (8003b28 <HAL_PCD_IRQHandler+0x8d8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d90c      	bls.n	8003a32 <HAL_PCD_IRQHandler+0x7e2>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a44      	ldr	r2, [pc, #272]	; (8003b2c <HAL_PCD_IRQHandler+0x8dc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d808      	bhi.n	8003a32 <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	e018      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a3d      	ldr	r2, [pc, #244]	; (8003b2c <HAL_PCD_IRQHandler+0x8dc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d90c      	bls.n	8003a54 <HAL_PCD_IRQHandler+0x804>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a3c      	ldr	r2, [pc, #240]	; (8003b30 <HAL_PCD_IRQHandler+0x8e0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d808      	bhi.n	8003a54 <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	68d2      	ldr	r2, [r2, #12]
 8003a4c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	e007      	b.n	8003a64 <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8003a62:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f006 fdcc 	bl	800a602 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 fd45 	bl	8007508 <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d174      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	6992      	ldr	r2, [r2, #24]
 8003a92:	f022 0210 	bic.w	r2, r2, #16
 8003a96:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 020f 	and.w	r2, r3, #15
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	0c5b      	lsrs	r3, r3, #17
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d138      	bne.n	8003b34 <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d049      	beq.n	8003b62 <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	68d9      	ldr	r1, [r3, #12]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6a38      	ldr	r0, [r7, #32]
 8003ae2:	f003 fbb5 	bl	8007250 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af2:	441a      	add	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b04:	441a      	add	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	619a      	str	r2, [r3, #24]
 8003b0a:	e02a      	b.n	8003b62 <HAL_PCD_IRQHandler+0x912>
 8003b0c:	00d8acbf 	.word	0x00d8acbf
 8003b10:	00e4e1bf 	.word	0x00e4e1bf
 8003b14:	00f423ff 	.word	0x00f423ff
 8003b18:	0106737f 	.word	0x0106737f
 8003b1c:	011a499f 	.word	0x011a499f
 8003b20:	01312cff 	.word	0x01312cff
 8003b24:	014ca43f 	.word	0x014ca43f
 8003b28:	016e35ff 	.word	0x016e35ff
 8003b2c:	01a6ab1f 	.word	0x01a6ab1f
 8003b30:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	0c5b      	lsrs	r3, r3, #17
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d110      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8003b46:	2208      	movs	r2, #8
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6a38      	ldr	r0, [r7, #32]
 8003b4c:	f003 fb80 	bl	8007250 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5c:	441a      	add	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6992      	ldr	r2, [r2, #24]
 8003b6c:	f042 0210 	orr.w	r2, r2, #16
 8003b70:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f003 fcc6 	bl	8007508 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d106      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f006 fd2d 	bl	800a5e6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2208      	movs	r2, #8
 8003b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fcb5 	bl	8007508 <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f006 fd97 	bl	800a6e4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f003 fc9f 	bl	8007508 <USB_ReadInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd4:	d10a      	bne.n	8003bec <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f006 fd6f 	bl	800a6c0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fc89 	bl	8007508 <USB_ReadInterrupts>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d107      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f006 fd80 	bl	800a708 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f003 fc76 	bl	8007508 <USB_ReadInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d115      	bne.n	8003c52 <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f006 fd73 	bl	800a724 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6851      	ldr	r1, [r2, #4]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e000      	b.n	8003c52 <HAL_PCD_IRQHandler+0xa02>
      return;
 8003c50:	bf00      	nop
    }
  }
}
 8003c52:	3730      	adds	r7, #48	; 0x30
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_PCD_SetAddress+0x1a>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e00f      	b.n	8003c92 <HAL_PCD_SetAddress+0x3a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f003 fbec 	bl	8007460 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4603      	mov	r3, r0
 8003caa:	70fb      	strb	r3, [r7, #3]
 8003cac:	460b      	mov	r3, r1
 8003cae:	803b      	strh	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8003cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da0b      	bge.n	8003cd8 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3338      	adds	r3, #56	; 0x38
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8003cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	09db      	lsrs	r3, r3, #7
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8003d0c:	883a      	ldrh	r2, [r7, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	78ba      	ldrb	r2, [r7, #2]
 8003d16:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8003d2a:	78bb      	ldrb	r3, [r7, #2]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d102      	bne.n	8003d36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_PCD_EP_Open+0xaa>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e00e      	b.n	8003d62 <HAL_PCD_EP_Open+0xc8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f002 fda0 	bl	8006898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8003d60:	7afb      	ldrb	r3, [r7, #11]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8003d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da0b      	bge.n	8003d96 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d84:	4613      	mov	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	3338      	adds	r3, #56	; 0x38
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e00b      	b.n	8003dae <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8003dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	09db      	lsrs	r3, r3, #7
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_PCD_EP_Close+0x6e>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e00e      	b.n	8003df6 <HAL_PCD_EP_Close+0x8c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fdde 	bl	80069a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
 8003e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d102      	bne.n	8003e58 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8003e58:	7afb      	ldrb	r3, [r7, #11]
 8003e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	f003 f85a 	bl	8006f28 <USB_EP0StartXfer>
 8003e74:	e008      	b.n	8003e88 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	f002 fe0c 	bl	8006aa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 020f 	and.w	r2, r3, #15
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	3338      	adds	r3, #56	; 0x38
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2201      	movs	r2, #1
 8003f00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8003f02:	7afb      	ldrb	r3, [r7, #11]
 8003f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8003f1c:	7afb      	ldrb	r3, [r7, #11]
 8003f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	6979      	ldr	r1, [r7, #20]
 8003f34:	f002 fff8 	bl	8006f28 <USB_EP0StartXfer>
 8003f38:	e008      	b.n	8003f4c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6979      	ldr	r1, [r7, #20]
 8003f48:	f002 fdaa 	bl	8006aa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d901      	bls.n	8003f74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e050      	b.n	8004016 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8003f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da0b      	bge.n	8003f94 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	3338      	adds	r3, #56	; 0x38
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e009      	b.n	8003fa8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	09db      	lsrs	r3, r3, #7
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_PCD_EP_SetStall+0x82>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e01e      	b.n	8004016 <HAL_PCD_EP_SetStall+0xc0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f003 f95c 	bl	80072a4 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	b2d9      	uxtb	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004006:	461a      	mov	r2, r3
 8004008:	f003 fb4e 	bl	80076a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	429a      	cmp	r2, r3
 8004036:	d901      	bls.n	800403c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e040      	b.n	80040be <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 800403c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004040:	2b00      	cmp	r3, #0
 8004042:	da0b      	bge.n	800405c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	3338      	adds	r3, #56	; 0x38
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e009      	b.n	8004070 <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	09db      	lsrs	r3, r3, #7
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_PCD_EP_ClrStall+0x82>
 800409c:	2302      	movs	r3, #2
 800409e:	e00e      	b.n	80040be <HAL_PCD_EP_ClrStall+0xa0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f003 f969 	bl	8007386 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b08a      	sub	sp, #40	; 0x28
 80040ca:	af02      	add	r7, sp, #8
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3338      	adds	r3, #56	; 0x38
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	429a      	cmp	r2, r3
 8004104:	d202      	bcs.n	800410c <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3303      	adds	r3, #3
 8004110:	2b00      	cmp	r3, #0
 8004112:	da00      	bge.n	8004116 <PCD_WriteEmptyTxFifo+0x50>
 8004114:	3303      	adds	r3, #3
 8004116:	109b      	asrs	r3, r3, #2
 8004118:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800411a:	e02e      	b.n	800417a <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	429a      	cmp	r2, r3
 8004130:	d202      	bcs.n	8004138 <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3303      	adds	r3, #3
 800413c:	2b00      	cmp	r3, #0
 800413e:	da00      	bge.n	8004142 <PCD_WriteEmptyTxFifo+0x7c>
 8004140:	3303      	adds	r3, #3
 8004142:	109b      	asrs	r3, r3, #2
 8004144:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68d9      	ldr	r1, [r3, #12]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	b298      	uxth	r0, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4603      	mov	r3, r0
 800415c:	6978      	ldr	r0, [r7, #20]
 800415e:	f003 f83f 	bl	80071e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	441a      	add	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	b29a      	uxth	r2, r3
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	429a      	cmp	r2, r3
 800418e:	d909      	bls.n	80041a4 <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004198:	429a      	cmp	r2, r3
 800419a:	d203      	bcs.n	80041a4 <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1bb      	bne.n	800411c <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	dc10      	bgt.n	80041cc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 80041aa:	2201      	movs	r2, #1
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	4619      	mov	r1, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	4013      	ands	r3, r2
 80041ca:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	460b      	mov	r3, r1
 80041e0:	70fb      	strb	r3, [r7, #3]
 80041e2:	4613      	mov	r3, r2
 80041e4:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	883a      	ldrh	r2, [r7, #0]
 8004202:	0411      	lsls	r1, r2, #16
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	430a      	orrs	r2, r1
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
 800420a:	e028      	b.n	800425e <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4413      	add	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	e00d      	b.n	800423c <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	3340      	adds	r3, #64	; 0x40
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	4413      	add	r3, r2
 8004234:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	3301      	adds	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	3b01      	subs	r3, #1
 8004242:	429a      	cmp	r2, r3
 8004244:	dbec      	blt.n	8004220 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	3b01      	subs	r3, #1
 800424e:	883a      	ldrh	r2, [r7, #0]
 8004250:	0410      	lsls	r0, r2, #16
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4302      	orrs	r2, r0
 8004256:	3340      	adds	r3, #64	; 0x40
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	887a      	ldrh	r2, [r7, #2]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	10000003 	.word	0x10000003

080042d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6413      	str	r3, [r2, #64]	; 0x40
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004306:	f7fc fe83 	bl	8001010 <HAL_GetTick>
 800430a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800430c:	e009      	b.n	8004322 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800430e:	f7fc fe7f 	bl	8001010 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800431c:	d901      	bls.n	8004322 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e022      	b.n	8004368 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432e:	d1ee      	bne.n	800430e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004330:	4a10      	ldr	r2, [pc, #64]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800433c:	f7fc fe68 	bl	8001010 <HAL_GetTick>
 8004340:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004342:	e009      	b.n	8004358 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004344:	f7fc fe64 	bl	8001010 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004352:	d901      	bls.n	8004358 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e007      	b.n	8004368 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_PWREx_EnableOverDrive+0x9c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004364:	d1ee      	bne.n	8004344 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	40007000 	.word	0x40007000

08004378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e25c      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8087 	beq.w	80044aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800439c:	4b96      	ldr	r3, [pc, #600]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d00c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a8:	4b93      	ldr	r3, [pc, #588]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d112      	bne.n	80043da <HAL_RCC_OscConfig+0x62>
 80043b4:	4b90      	ldr	r3, [pc, #576]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c0:	d10b      	bne.n	80043da <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c2:	4b8d      	ldr	r3, [pc, #564]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d06c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x130>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d168      	bne.n	80044a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e236      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x7a>
 80043e4:	4a84      	ldr	r2, [pc, #528]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043e6:	4b84      	ldr	r3, [pc, #528]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e02e      	b.n	8004450 <HAL_RCC_OscConfig+0xd8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x9c>
 80043fa:	4a7f      	ldr	r2, [pc, #508]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043fc:	4b7e      	ldr	r3, [pc, #504]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4a7c      	ldr	r2, [pc, #496]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004408:	4b7b      	ldr	r3, [pc, #492]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0xd8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0xc0>
 800441e:	4a76      	ldr	r2, [pc, #472]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004420:	4b75      	ldr	r3, [pc, #468]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4a73      	ldr	r2, [pc, #460]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800442c:	4b72      	ldr	r3, [pc, #456]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0xd8>
 8004438:	4a6f      	ldr	r2, [pc, #444]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800443a:	4b6f      	ldr	r3, [pc, #444]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4a6c      	ldr	r2, [pc, #432]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004446:	4b6c      	ldr	r3, [pc, #432]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fc fdda 	bl	8001010 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004460:	f7fc fdd6 	bl	8001010 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1ea      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0xe8>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fc fdc6 	bl	8001010 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004488:	f7fc fdc2 	bl	8001010 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1d6      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x110>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d069      	beq.n	800458a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b6:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b4d      	ldr	r3, [pc, #308]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d11c      	bne.n	8004508 <HAL_RCC_OscConfig+0x190>
 80044ce:	4b4a      	ldr	r3, [pc, #296]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d116      	bne.n	8004508 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e1aa      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f2:	4941      	ldr	r1, [pc, #260]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044f4:	4b40      	ldr	r3, [pc, #256]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	e040      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d023      	beq.n	8004558 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004510:	4a39      	ldr	r2, [pc, #228]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004512:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fc fd78 	bl	8001010 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004524:	f7fc fd74 	bl	8001010 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e188      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	492d      	ldr	r1, [pc, #180]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004544:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
 8004556:	e018      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800455a:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fc fd54 	bl	8001010 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456c:	f7fc fd50 	bl	8001010 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e164      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d038      	beq.n	8004608 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d019      	beq.n	80045d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459e:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fc fd31 	bl	8001010 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fc fd2d 	bl	8001010 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e141      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x23a>
 80045d0:	e01a      	b.n	8004608 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045d4:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80045d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fc fd17 	bl	8001010 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e6:	f7fc fd13 	bl	8001010 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d903      	bls.n	80045fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e127      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
 80045f8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	4b94      	ldr	r3, [pc, #592]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80045fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a4 	beq.w	800475e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004616:	4b8e      	ldr	r3, [pc, #568]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10d      	bne.n	800463e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	4a8b      	ldr	r2, [pc, #556]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004624:	4b8a      	ldr	r3, [pc, #552]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	; 0x40
 800462e:	4b88      	ldr	r3, [pc, #544]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463e:	4b85      	ldr	r3, [pc, #532]	; (8004854 <HAL_RCC_OscConfig+0x4dc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800464a:	4a82      	ldr	r2, [pc, #520]	; (8004854 <HAL_RCC_OscConfig+0x4dc>)
 800464c:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCC_OscConfig+0x4dc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fc fcdb 	bl	8001010 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fc fcd7 	bl	8001010 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b64      	cmp	r3, #100	; 0x64
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0eb      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004670:	4b78      	ldr	r3, [pc, #480]	; (8004854 <HAL_RCC_OscConfig+0x4dc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x31a>
 8004684:	4a72      	ldr	r2, [pc, #456]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	; 0x70
 8004690:	e02d      	b.n	80046ee <HAL_RCC_OscConfig+0x376>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x33c>
 800469a:	4a6d      	ldr	r2, [pc, #436]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800469c:	4b6c      	ldr	r3, [pc, #432]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	4a6a      	ldr	r2, [pc, #424]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046a8:	4b69      	ldr	r3, [pc, #420]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	f023 0304 	bic.w	r3, r3, #4
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	e01c      	b.n	80046ee <HAL_RCC_OscConfig+0x376>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x35e>
 80046bc:	4a64      	ldr	r2, [pc, #400]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046be:	4b64      	ldr	r3, [pc, #400]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f043 0304 	orr.w	r3, r3, #4
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
 80046c8:	4a61      	ldr	r2, [pc, #388]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046ca:	4b61      	ldr	r3, [pc, #388]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70
 80046d4:	e00b      	b.n	80046ee <HAL_RCC_OscConfig+0x376>
 80046d6:	4a5e      	ldr	r2, [pc, #376]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046d8:	4b5d      	ldr	r3, [pc, #372]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4a5b      	ldr	r2, [pc, #364]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046e4:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d015      	beq.n	8004722 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7fc fc8b 	bl	8001010 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fc fc87 	bl	8001010 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e099      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	4b4e      	ldr	r3, [pc, #312]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0ee      	beq.n	80046fe <HAL_RCC_OscConfig+0x386>
 8004720:	e014      	b.n	800474c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fc fc75 	bl	8001010 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fc fc71 	bl	8001010 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e083      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ee      	bne.n	800472a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004752:	4a3f      	ldr	r2, [pc, #252]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004754:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06f      	beq.n	8004846 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004766:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b08      	cmp	r3, #8
 8004770:	d067      	beq.n	8004842 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d149      	bne.n	800480e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477a:	4a35      	ldr	r2, [pc, #212]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fc fc43 	bl	8001010 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478e:	f7fc fc3f 	bl	8001010 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e053      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a0:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ac:	4928      	ldr	r1, [pc, #160]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	3b01      	subs	r3, #1
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047d8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047da:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80047dc:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fc fc13 	bl	8001010 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fc fc0f 	bl	8001010 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e023      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x476>
 800480c:	e01b      	b.n	8004846 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4a10      	ldr	r2, [pc, #64]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fc fbf9 	bl	8001010 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004822:	f7fc fbf5 	bl	8001010 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e009      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f0      	bne.n	8004822 <HAL_RCC_OscConfig+0x4aa>
 8004840:	e001      	b.n	8004846 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40023800 	.word	0x40023800
 8004854:	40007000 	.word	0x40007000

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0ce      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b69      	ldr	r3, [pc, #420]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d210      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4966      	ldr	r1, [pc, #408]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	4b65      	ldr	r3, [pc, #404]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f023 020f 	bic.w	r2, r3, #15
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b62      	ldr	r3, [pc, #392]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0b6      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d020      	beq.n	80048ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b8:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	4b58      	ldr	r3, [pc, #352]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d0:	4a52      	ldr	r2, [pc, #328]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	4b52      	ldr	r3, [pc, #328]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048dc:	494f      	ldr	r1, [pc, #316]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	4b4f      	ldr	r3, [pc, #316]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d040      	beq.n	800497c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d115      	bne.n	800493a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07d      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	4b40      	ldr	r3, [pc, #256]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e071      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492a:	4b3c      	ldr	r3, [pc, #240]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e069      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493a:	4938      	ldr	r1, [pc, #224]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	4b37      	ldr	r3, [pc, #220]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 0203 	bic.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fc fb60 	bl	8001010 <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fc fb5c 	bl	8001010 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e051      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 020c 	and.w	r2, r3, #12
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	429a      	cmp	r2, r3
 800497a:	d1eb      	bne.n	8004954 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 020f 	and.w	r2, r3, #15
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d910      	bls.n	80049ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4923      	ldr	r1, [pc, #140]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 020f 	bic.w	r2, r3, #15
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e030      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b8:	4918      	ldr	r1, [pc, #96]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049d6:	4911      	ldr	r1, [pc, #68]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ea:	f000 f81d 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049ee:	4601      	mov	r1, r0
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <HAL_RCC_ClockConfig+0x1cc>)
 8004a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a06:	2000      	movs	r0, #0
 8004a08:	f005 fbb8 	bl	800a17c <HAL_InitTick>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	0800d8f8 	.word	0x0800d8f8
 8004a24:	2000011c 	.word	0x2000011c

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	b087      	sub	sp, #28
 8004a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a30:	2200      	movs	r2, #0
 8004a32:	60fa      	str	r2, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	617a      	str	r2, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a40:	4a51      	ldr	r2, [pc, #324]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a42:	6892      	ldr	r2, [r2, #8]
 8004a44:	f002 020c 	and.w	r2, r2, #12
 8004a48:	2a04      	cmp	r2, #4
 8004a4a:	d007      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x34>
 8004a4c:	2a08      	cmp	r2, #8
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a50:	2a00      	cmp	r2, #0
 8004a52:	f040 8090 	bne.w	8004b76 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a56:	4b4d      	ldr	r3, [pc, #308]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8004a58:	613b      	str	r3, [r7, #16]
       break;
 8004a5a:	e08f      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5c:	4b4c      	ldr	r3, [pc, #304]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a5e:	613b      	str	r3, [r7, #16]
      break;
 8004a60:	e08c      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a62:	4a49      	ldr	r2, [pc, #292]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a64:	6852      	ldr	r2, [r2, #4]
 8004a66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004a6a:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a6c:	4a46      	ldr	r2, [pc, #280]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a6e:	6852      	ldr	r2, [r2, #4]
 8004a70:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004a74:	2a00      	cmp	r2, #0
 8004a76:	d023      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a78:	4b43      	ldr	r3, [pc, #268]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	099b      	lsrs	r3, r3, #6
 8004a7e:	f04f 0400 	mov.w	r4, #0
 8004a82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	ea03 0301 	and.w	r3, r3, r1
 8004a8e:	ea04 0402 	and.w	r4, r4, r2
 8004a92:	4a3f      	ldr	r2, [pc, #252]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a94:	fb02 f104 	mul.w	r1, r2, r4
 8004a98:	2200      	movs	r2, #0
 8004a9a:	fb02 f203 	mul.w	r2, r2, r3
 8004a9e:	440a      	add	r2, r1
 8004aa0:	493b      	ldr	r1, [pc, #236]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8004aa2:	fba3 0101 	umull	r0, r1, r3, r1
 8004aa6:	1853      	adds	r3, r2, r1
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	f7fb fbfc 	bl	80002b0 <__aeabi_uldivmod>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e04c      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac0:	4a31      	ldr	r2, [pc, #196]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ac2:	6852      	ldr	r2, [r2, #4]
 8004ac4:	0992      	lsrs	r2, r2, #6
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f240 15ff 	movw	r5, #511	; 0x1ff
 8004ad0:	f04f 0600 	mov.w	r6, #0
 8004ad4:	ea05 0501 	and.w	r5, r5, r1
 8004ad8:	ea06 0602 	and.w	r6, r6, r2
 8004adc:	4629      	mov	r1, r5
 8004ade:	4632      	mov	r2, r6
 8004ae0:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8004ae4:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8004ae8:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8004aec:	4651      	mov	r1, sl
 8004aee:	465a      	mov	r2, fp
 8004af0:	46aa      	mov	sl, r5
 8004af2:	46b3      	mov	fp, r6
 8004af4:	4655      	mov	r5, sl
 8004af6:	465e      	mov	r6, fp
 8004af8:	1b4d      	subs	r5, r1, r5
 8004afa:	eb62 0606 	sbc.w	r6, r2, r6
 8004afe:	4629      	mov	r1, r5
 8004b00:	4632      	mov	r2, r6
 8004b02:	0194      	lsls	r4, r2, #6
 8004b04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b08:	018b      	lsls	r3, r1, #6
 8004b0a:	1a5b      	subs	r3, r3, r1
 8004b0c:	eb64 0402 	sbc.w	r4, r4, r2
 8004b10:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8004b14:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8004b18:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	464c      	mov	r4, r9
 8004b20:	4655      	mov	r5, sl
 8004b22:	465e      	mov	r6, fp
 8004b24:	18ed      	adds	r5, r5, r3
 8004b26:	eb46 0604 	adc.w	r6, r6, r4
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	4634      	mov	r4, r6
 8004b2e:	02a2      	lsls	r2, r4, #10
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	029b      	lsls	r3, r3, #10
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004b42:	4618      	mov	r0, r3
 8004b44:	4621      	mov	r1, r4
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f04f 0400 	mov.w	r4, #0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4623      	mov	r3, r4
 8004b50:	f7fb fbae 	bl	80002b0 <__aeabi_uldivmod>
 8004b54:	4603      	mov	r3, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	3301      	adds	r3, #1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	613b      	str	r3, [r7, #16]
      break;
 8004b74:	e002      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8004b78:	613b      	str	r3, [r7, #16]
      break;
 8004b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7c:	693b      	ldr	r3, [r7, #16]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	017d7840 	.word	0x017d7840

08004b94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	2000011c 	.word	0x2000011c

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0a9b      	lsrs	r3, r3, #10
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
 8004bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800d908 	.word	0x0800d908

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd8:	f7ff ffdc 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bdc:	4601      	mov	r1, r0
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0b5b      	lsrs	r3, r3, #13
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4a03      	ldr	r2, [pc, #12]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	0800d908 	.word	0x0800d908

08004bfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	220f      	movs	r2, #15
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c0c:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0203 	and.w	r2, r3, #3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <HAL_RCC_GetClockConfig+0x5c>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <HAL_RCC_GetClockConfig+0x5c>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_RCC_GetClockConfig+0x5c>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	08db      	lsrs	r3, r3, #3
 8004c36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_RCC_GetClockConfig+0x60>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40023c00 	.word	0x40023c00

08004c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d012      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c88:	4a69      	ldr	r2, [pc, #420]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	4b69      	ldr	r3, [pc, #420]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	4966      	ldr	r1, [pc, #408]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c96:	4b66      	ldr	r3, [pc, #408]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8004caa:	2301      	movs	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d017      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cba:	495d      	ldr	r1, [pc, #372]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbc:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd8:	d101      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d017      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cf6:	494e      	ldr	r1, [pc, #312]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	4b4d      	ldr	r3, [pc, #308]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d14:	d101      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8004d16:	2301      	movs	r3, #1
 8004d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8004d22:	2301      	movs	r3, #1
 8004d24:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8004d32:	2301      	movs	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 808b 	beq.w	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d44:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d46:	4b3a      	ldr	r3, [pc, #232]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d50:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d5c:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d5e:	4b35      	ldr	r3, [pc, #212]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d66:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d68:	f7fc f952 	bl	8001010 <HAL_GetTick>
 8004d6c:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d70:	f7fc f94e 	bl	8001010 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e355      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d82:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d8e:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d035      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d02e      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004db6:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dce:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d014      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fc f916 	bl	8001010 <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fc f912 	bl	8001010 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e317      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ee      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e16:	d111      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e18:	4805      	ldr	r0, [pc, #20]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1a:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e26:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e28:	400b      	ands	r3, r1
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	6083      	str	r3, [r0, #8]
 8004e2e:	e00b      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40007000 	.word	0x40007000
 8004e38:	0ffffcff 	.word	0x0ffffcff
 8004e3c:	4ab0      	ldr	r2, [pc, #704]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e3e:	4bb0      	ldr	r3, [pc, #704]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e46:	6093      	str	r3, [r2, #8]
 8004e48:	49ad      	ldr	r1, [pc, #692]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e4a:	4bad      	ldr	r3, [pc, #692]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e56:	4313      	orrs	r3, r2
 8004e58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e66:	4aa6      	ldr	r2, [pc, #664]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e68:	4ba5      	ldr	r3, [pc, #660]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e76:	49a2      	ldr	r1, [pc, #648]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e78:	4ba1      	ldr	r3, [pc, #644]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e7a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e94:	499a      	ldr	r1, [pc, #616]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e96:	4b9a      	ldr	r3, [pc, #616]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eb6:	4992      	ldr	r1, [pc, #584]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eb8:	4b91      	ldr	r3, [pc, #580]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed8:	4989      	ldr	r1, [pc, #548]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eda:	4b89      	ldr	r3, [pc, #548]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004efa:	4981      	ldr	r1, [pc, #516]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004efc:	4b80      	ldr	r3, [pc, #512]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f1c:	4978      	ldr	r1, [pc, #480]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f1e:	4b78      	ldr	r3, [pc, #480]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f023 0203 	bic.w	r2, r3, #3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f3e:	4970      	ldr	r1, [pc, #448]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f40:	4b6f      	ldr	r3, [pc, #444]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f023 020c 	bic.w	r2, r3, #12
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f60:	4967      	ldr	r1, [pc, #412]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f62:	4b67      	ldr	r3, [pc, #412]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f82:	495f      	ldr	r1, [pc, #380]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f84:	4b5e      	ldr	r3, [pc, #376]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fa4:	4956      	ldr	r1, [pc, #344]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fa6:	4b56      	ldr	r3, [pc, #344]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fc6:	494e      	ldr	r1, [pc, #312]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fc8:	4b4d      	ldr	r3, [pc, #308]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fe8:	4945      	ldr	r1, [pc, #276]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800500a:	493d      	ldr	r1, [pc, #244]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800500c:	4b3c      	ldr	r3, [pc, #240]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800502c:	4934      	ldr	r1, [pc, #208]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800502e:	4b34      	ldr	r3, [pc, #208]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d011      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800504e:	492c      	ldr	r1, [pc, #176]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005050:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800506c:	d101      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 800506e:	2301      	movs	r3, #1
 8005070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 800507e:	2301      	movs	r3, #1
 8005080:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800508e:	491c      	ldr	r1, [pc, #112]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050b0:	4913      	ldr	r1, [pc, #76]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d005      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d6:	f040 80d8 	bne.w	800528a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050dc:	4b08      	ldr	r3, [pc, #32]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050e4:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e6:	f7fb ff93 	bl	8001010 <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050ec:	e00a      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050ee:	f7fb ff8f 	bl	8001010 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b64      	cmp	r3, #100	; 0x64
 80050fa:	d903      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e196      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005100:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005104:	4b6c      	ldr	r3, [pc, #432]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ee      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d021      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	2b00      	cmp	r3, #0
 8005122:	d11d      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005124:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005132:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	0e1b      	lsrs	r3, r3, #24
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005140:	495d      	ldr	r1, [pc, #372]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	019a      	lsls	r2, r3, #6
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	431a      	orrs	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800517e:	2b00      	cmp	r3, #0
 8005180:	d02e      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800518a:	d129      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800518c:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800519a:	4b47      	ldr	r3, [pc, #284]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800519c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a0:	0f1b      	lsrs	r3, r3, #28
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051a8:	4943      	ldr	r1, [pc, #268]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	019a      	lsls	r2, r3, #6
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	061b      	lsls	r3, r3, #24
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	071b      	lsls	r3, r3, #28
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80051c8:	493b      	ldr	r1, [pc, #236]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051ca:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d0:	f023 021f 	bic.w	r2, r3, #31
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	3b01      	subs	r3, #1
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051ec:	4b32      	ldr	r3, [pc, #200]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f2:	0e1b      	lsrs	r3, r3, #24
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051fa:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80051fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005200:	0f1b      	lsrs	r3, r3, #28
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005208:	492b      	ldr	r1, [pc, #172]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	019a      	lsls	r2, r3, #6
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	431a      	orrs	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	061b      	lsls	r3, r3, #24
 800521c:	431a      	orrs	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	071b      	lsls	r3, r3, #28
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d011      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005234:	4920      	ldr	r1, [pc, #128]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	019a      	lsls	r2, r3, #6
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005258:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800525a:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005262:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005264:	f7fb fed4 	bl	8001010 <HAL_GetTick>
 8005268:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800526a:	e008      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800526c:	f7fb fed0 	bl	8001010 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	; 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0d7      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800527e:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b01      	cmp	r3, #1
 800528e:	f040 80cd 	bne.w	800542c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529e:	f7fb feb7 	bl	8001010 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052a4:	e00a      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052a6:	f7fb feb3 	bl	8001010 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b64      	cmp	r3, #100	; 0x64
 80052b2:	d903      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0ba      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80052b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052bc:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c8:	d0ed      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d02e      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d12a      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052f2:	4b51      	ldr	r3, [pc, #324]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	0c1b      	lsrs	r3, r3, #16
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005300:	4b4d      	ldr	r3, [pc, #308]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	0f1b      	lsrs	r3, r3, #28
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800530e:	494a      	ldr	r1, [pc, #296]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	019a      	lsls	r2, r3, #6
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	061b      	lsls	r3, r3, #24
 8005322:	431a      	orrs	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	071b      	lsls	r3, r3, #28
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800532e:	4942      	ldr	r1, [pc, #264]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005330:	4b41      	ldr	r3, [pc, #260]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005336:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	3b01      	subs	r3, #1
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d022      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535c:	d11d      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800535e:	4b36      	ldr	r3, [pc, #216]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800536c:	4b32      	ldr	r3, [pc, #200]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	0f1b      	lsrs	r3, r3, #28
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800537a:	492f      	ldr	r1, [pc, #188]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	019a      	lsls	r2, r3, #6
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	431a      	orrs	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	061b      	lsls	r3, r3, #24
 800538e:	431a      	orrs	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	071b      	lsls	r3, r3, #28
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d028      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053a6:	4b24      	ldr	r3, [pc, #144]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	0e1b      	lsrs	r3, r3, #24
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053b4:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053c2:	491d      	ldr	r1, [pc, #116]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	019a      	lsls	r2, r3, #6
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	431a      	orrs	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	061b      	lsls	r3, r3, #24
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	071b      	lsls	r3, r3, #28
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053e2:	4915      	ldr	r1, [pc, #84]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053e4:	4b14      	ldr	r3, [pc, #80]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053f8:	4a0f      	ldr	r2, [pc, #60]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053fa:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005402:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005404:	f7fb fe04 	bl	8001010 <HAL_GetTick>
 8005408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800540c:	f7fb fe00 	bl	8001010 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e007      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800541e:	4b06      	ldr	r3, [pc, #24]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542a:	d1ef      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023800 	.word	0x40023800

0800543c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e025      	b.n	800549c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f004 fe7f 	bl	800a168 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f000 fe77 	bl	8006170 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	461a      	mov	r2, r3
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	f000 fee1 	bl	8006254 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d101      	bne.n	80054c0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
 80054be:	e018      	b.n	80054f2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 ff3f 	bl	8006354 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d104      	bne.n	80054e8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2205      	movs	r2, #5
 80054e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80054e6:	e003      	b.n	80054f0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e01d      	b.n	8005548 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f815 	bl	8005550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 f975 	bl	8005828 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	68d2      	ldr	r2, [r2, #12]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d122      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d11b      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f06f 0202 	mvn.w	r2, #2
 80055c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f905 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 80055e2:	e005      	b.n	80055f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f8f7 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f908 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d122      	bne.n	800564a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b04      	cmp	r3, #4
 8005610:	d11b      	bne.n	800564a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0204 	mvn.w	r2, #4
 800561a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8db 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005636:	e005      	b.n	8005644 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f8cd 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8de 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b08      	cmp	r3, #8
 8005656:	d122      	bne.n	800569e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b08      	cmp	r3, #8
 8005664:	d11b      	bne.n	800569e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0208 	mvn.w	r2, #8
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2204      	movs	r2, #4
 8005674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f8b1 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 800568a:	e005      	b.n	8005698 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f8a3 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8b4 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d122      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d11b      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0210 	mvn.w	r2, #16
 80056c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2208      	movs	r2, #8
 80056c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f887 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 80056de:	e005      	b.n	80056ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f879 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f88a 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0201 	mvn.w	r2, #1
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f004 f9b3 	bl	8009a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b80      	cmp	r3, #128	; 0x80
 800572a:	d10e      	bne.n	800574a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d107      	bne.n	800574a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f929 	bl	800599c <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005758:	d10e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d107      	bne.n	8005778 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f912 	bl	800599c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d10e      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d107      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f838 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d10e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0220 	mvn.w	r2, #32
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8dc 	bl	8005988 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a47      	ldr	r2, [pc, #284]	; (800595c <TIM_Base_SetConfig+0x134>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d013      	beq.n	800586c <TIM_Base_SetConfig+0x44>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d00f      	beq.n	800586c <TIM_Base_SetConfig+0x44>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a44      	ldr	r2, [pc, #272]	; (8005960 <TIM_Base_SetConfig+0x138>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00b      	beq.n	800586c <TIM_Base_SetConfig+0x44>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a43      	ldr	r2, [pc, #268]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_Base_SetConfig+0x44>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a42      	ldr	r2, [pc, #264]	; (8005968 <TIM_Base_SetConfig+0x140>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_Base_SetConfig+0x44>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a41      	ldr	r2, [pc, #260]	; (800596c <TIM_Base_SetConfig+0x144>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d101      	bne.n	8005870 <TIM_Base_SetConfig+0x48>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <TIM_Base_SetConfig+0x4a>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a34      	ldr	r2, [pc, #208]	; (800595c <TIM_Base_SetConfig+0x134>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02b      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d027      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a31      	ldr	r2, [pc, #196]	; (8005960 <TIM_Base_SetConfig+0x138>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d023      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a30      	ldr	r2, [pc, #192]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d01f      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <TIM_Base_SetConfig+0x140>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d01b      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a2e      	ldr	r2, [pc, #184]	; (800596c <TIM_Base_SetConfig+0x144>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d017      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a2d      	ldr	r2, [pc, #180]	; (8005970 <TIM_Base_SetConfig+0x148>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a2c      	ldr	r2, [pc, #176]	; (8005974 <TIM_Base_SetConfig+0x14c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a2b      	ldr	r2, [pc, #172]	; (8005978 <TIM_Base_SetConfig+0x150>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2a      	ldr	r2, [pc, #168]	; (800597c <TIM_Base_SetConfig+0x154>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a29      	ldr	r2, [pc, #164]	; (8005980 <TIM_Base_SetConfig+0x158>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0xc0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a28      	ldr	r2, [pc, #160]	; (8005984 <TIM_Base_SetConfig+0x15c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <TIM_Base_SetConfig+0xc4>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <TIM_Base_SetConfig+0xc6>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a0c      	ldr	r2, [pc, #48]	; (800595c <TIM_Base_SetConfig+0x134>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_Base_SetConfig+0x110>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a0e      	ldr	r2, [pc, #56]	; (800596c <TIM_Base_SetConfig+0x144>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d101      	bne.n	800593c <TIM_Base_SetConfig+0x114>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <TIM_Base_SetConfig+0x116>
 800593c:	2300      	movs	r3, #0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	615a      	str	r2, [r3, #20]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40010000 	.word	0x40010000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40010400 	.word	0x40010400
 8005970:	40014000 	.word	0x40014000
 8005974:	40014400 	.word	0x40014400
 8005978:	40014800 	.word	0x40014800
 800597c:	40001800 	.word	0x40001800
 8005980:	40001c00 	.word	0x40001c00
 8005984:	40002000 	.word	0x40002000

08005988 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e043      	b.n	8005a4a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f004 fafa 	bl	8009fd0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2224      	movs	r2, #36	; 0x24
 80059e0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f877 	bl	8005ae8 <UART_SetConfig>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e022      	b.n	8005a4a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fad9 	bl	8005fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	6852      	ldr	r2, [r2, #4]
 8005a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	6892      	ldr	r2, [r2, #8]
 8005a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a30:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fb60 	bl	8006108 <UART_CheckIdleState>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a62:	e02c      	b.n	8005abe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d028      	beq.n	8005abe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a72:	f7fb facd 	bl	8001010 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d31d      	bcc.n	8005abe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	6892      	ldr	r2, [r2, #8]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e00f      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d0c3      	beq.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005af4:	2310      	movs	r3, #16
 8005af6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	4baa      	ldr	r3, [pc, #680]	; (8005dd0 <UART_SetConfig+0x2e8>)
 8005b28:	400b      	ands	r3, r1
 8005b2a:	68f9      	ldr	r1, [r7, #12]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	6852      	ldr	r2, [r2, #4]
 8005b3a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68d2      	ldr	r2, [r2, #12]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	6892      	ldr	r2, [r2, #8]
 8005b5c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a9a      	ldr	r2, [pc, #616]	; (8005dd4 <UART_SetConfig+0x2ec>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d11f      	bne.n	8005bb0 <UART_SetConfig+0xc8>
 8005b70:	4b99      	ldr	r3, [pc, #612]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	f200 813e 	bhi.w	8005dfc <UART_SetConfig+0x314>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0xa0>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005b9f 	.word	0x08005b9f
 8005b94:	08005bab 	.word	0x08005bab
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
 8005b9c:	e12e      	b.n	8005dfc <UART_SetConfig+0x314>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	75fb      	strb	r3, [r7, #23]
 8005ba2:	e12b      	b.n	8005dfc <UART_SetConfig+0x314>
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	75fb      	strb	r3, [r7, #23]
 8005ba8:	e128      	b.n	8005dfc <UART_SetConfig+0x314>
 8005baa:	2308      	movs	r3, #8
 8005bac:	75fb      	strb	r3, [r7, #23]
 8005bae:	e125      	b.n	8005dfc <UART_SetConfig+0x314>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a89      	ldr	r2, [pc, #548]	; (8005ddc <UART_SetConfig+0x2f4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d130      	bne.n	8005c1c <UART_SetConfig+0x134>
 8005bba:	4b87      	ldr	r3, [pc, #540]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc0:	f003 030c 	and.w	r3, r3, #12
 8005bc4:	2b0c      	cmp	r3, #12
 8005bc6:	f200 8119 	bhi.w	8005dfc <UART_SetConfig+0x314>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0xe8>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005c05 	.word	0x08005c05
 8005bd4:	08005dfd 	.word	0x08005dfd
 8005bd8:	08005dfd 	.word	0x08005dfd
 8005bdc:	08005dfd 	.word	0x08005dfd
 8005be0:	08005c11 	.word	0x08005c11
 8005be4:	08005dfd 	.word	0x08005dfd
 8005be8:	08005dfd 	.word	0x08005dfd
 8005bec:	08005dfd 	.word	0x08005dfd
 8005bf0:	08005c0b 	.word	0x08005c0b
 8005bf4:	08005dfd 	.word	0x08005dfd
 8005bf8:	08005dfd 	.word	0x08005dfd
 8005bfc:	08005dfd 	.word	0x08005dfd
 8005c00:	08005c17 	.word	0x08005c17
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]
 8005c08:	e0f8      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	75fb      	strb	r3, [r7, #23]
 8005c0e:	e0f5      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c10:	2304      	movs	r3, #4
 8005c12:	75fb      	strb	r3, [r7, #23]
 8005c14:	e0f2      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c16:	2308      	movs	r3, #8
 8005c18:	75fb      	strb	r3, [r7, #23]
 8005c1a:	e0ef      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a6f      	ldr	r2, [pc, #444]	; (8005de0 <UART_SetConfig+0x2f8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d11c      	bne.n	8005c60 <UART_SetConfig+0x178>
 8005c26:	4b6c      	ldr	r3, [pc, #432]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d00f      	beq.n	8005c54 <UART_SetConfig+0x16c>
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d802      	bhi.n	8005c3e <UART_SetConfig+0x156>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <UART_SetConfig+0x160>
 8005c3c:	e0de      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d005      	beq.n	8005c4e <UART_SetConfig+0x166>
 8005c42:	2b30      	cmp	r3, #48	; 0x30
 8005c44:	d009      	beq.n	8005c5a <UART_SetConfig+0x172>
 8005c46:	e0d9      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75fb      	strb	r3, [r7, #23]
 8005c4c:	e0d6      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	75fb      	strb	r3, [r7, #23]
 8005c52:	e0d3      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c54:	2304      	movs	r3, #4
 8005c56:	75fb      	strb	r3, [r7, #23]
 8005c58:	e0d0      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	75fb      	strb	r3, [r7, #23]
 8005c5e:	e0cd      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a5f      	ldr	r2, [pc, #380]	; (8005de4 <UART_SetConfig+0x2fc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d11c      	bne.n	8005ca4 <UART_SetConfig+0x1bc>
 8005c6a:	4b5b      	ldr	r3, [pc, #364]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d00f      	beq.n	8005c98 <UART_SetConfig+0x1b0>
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d802      	bhi.n	8005c82 <UART_SetConfig+0x19a>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <UART_SetConfig+0x1a4>
 8005c80:	e0bc      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d005      	beq.n	8005c92 <UART_SetConfig+0x1aa>
 8005c86:	2bc0      	cmp	r3, #192	; 0xc0
 8005c88:	d009      	beq.n	8005c9e <UART_SetConfig+0x1b6>
 8005c8a:	e0b7      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	75fb      	strb	r3, [r7, #23]
 8005c90:	e0b4      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c92:	2302      	movs	r3, #2
 8005c94:	75fb      	strb	r3, [r7, #23]
 8005c96:	e0b1      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	75fb      	strb	r3, [r7, #23]
 8005c9c:	e0ae      	b.n	8005dfc <UART_SetConfig+0x314>
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	75fb      	strb	r3, [r7, #23]
 8005ca2:	e0ab      	b.n	8005dfc <UART_SetConfig+0x314>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a4f      	ldr	r2, [pc, #316]	; (8005de8 <UART_SetConfig+0x300>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d120      	bne.n	8005cf0 <UART_SetConfig+0x208>
 8005cae:	4b4a      	ldr	r3, [pc, #296]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbc:	d012      	beq.n	8005ce4 <UART_SetConfig+0x1fc>
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d802      	bhi.n	8005cca <UART_SetConfig+0x1e2>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <UART_SetConfig+0x1f0>
 8005cc8:	e098      	b.n	8005dfc <UART_SetConfig+0x314>
 8005cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cce:	d006      	beq.n	8005cde <UART_SetConfig+0x1f6>
 8005cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd4:	d009      	beq.n	8005cea <UART_SetConfig+0x202>
 8005cd6:	e091      	b.n	8005dfc <UART_SetConfig+0x314>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
 8005cdc:	e08e      	b.n	8005dfc <UART_SetConfig+0x314>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	75fb      	strb	r3, [r7, #23]
 8005ce2:	e08b      	b.n	8005dfc <UART_SetConfig+0x314>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	75fb      	strb	r3, [r7, #23]
 8005ce8:	e088      	b.n	8005dfc <UART_SetConfig+0x314>
 8005cea:	2308      	movs	r3, #8
 8005cec:	75fb      	strb	r3, [r7, #23]
 8005cee:	e085      	b.n	8005dfc <UART_SetConfig+0x314>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a3d      	ldr	r2, [pc, #244]	; (8005dec <UART_SetConfig+0x304>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d120      	bne.n	8005d3c <UART_SetConfig+0x254>
 8005cfa:	4b37      	ldr	r3, [pc, #220]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d08:	d012      	beq.n	8005d30 <UART_SetConfig+0x248>
 8005d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0e:	d802      	bhi.n	8005d16 <UART_SetConfig+0x22e>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <UART_SetConfig+0x23c>
 8005d14:	e072      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1a:	d006      	beq.n	8005d2a <UART_SetConfig+0x242>
 8005d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d20:	d009      	beq.n	8005d36 <UART_SetConfig+0x24e>
 8005d22:	e06b      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d24:	2301      	movs	r3, #1
 8005d26:	75fb      	strb	r3, [r7, #23]
 8005d28:	e068      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	75fb      	strb	r3, [r7, #23]
 8005d2e:	e065      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d30:	2304      	movs	r3, #4
 8005d32:	75fb      	strb	r3, [r7, #23]
 8005d34:	e062      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d36:	2308      	movs	r3, #8
 8005d38:	75fb      	strb	r3, [r7, #23]
 8005d3a:	e05f      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <UART_SetConfig+0x308>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d120      	bne.n	8005d88 <UART_SetConfig+0x2a0>
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d012      	beq.n	8005d7c <UART_SetConfig+0x294>
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	d802      	bhi.n	8005d62 <UART_SetConfig+0x27a>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <UART_SetConfig+0x288>
 8005d60:	e04c      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d66:	d006      	beq.n	8005d76 <UART_SetConfig+0x28e>
 8005d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d6c:	d009      	beq.n	8005d82 <UART_SetConfig+0x29a>
 8005d6e:	e045      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d70:	2300      	movs	r3, #0
 8005d72:	75fb      	strb	r3, [r7, #23]
 8005d74:	e042      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d76:	2302      	movs	r3, #2
 8005d78:	75fb      	strb	r3, [r7, #23]
 8005d7a:	e03f      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	75fb      	strb	r3, [r7, #23]
 8005d80:	e03c      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d82:	2308      	movs	r3, #8
 8005d84:	75fb      	strb	r3, [r7, #23]
 8005d86:	e039      	b.n	8005dfc <UART_SetConfig+0x314>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a19      	ldr	r2, [pc, #100]	; (8005df4 <UART_SetConfig+0x30c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d135      	bne.n	8005dfe <UART_SetConfig+0x316>
 8005d92:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <UART_SetConfig+0x2f0>)
 8005d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005da0:	d012      	beq.n	8005dc8 <UART_SetConfig+0x2e0>
 8005da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005da6:	d802      	bhi.n	8005dae <UART_SetConfig+0x2c6>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <UART_SetConfig+0x2d4>
 8005dac:	e026      	b.n	8005dfc <UART_SetConfig+0x314>
 8005dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db2:	d006      	beq.n	8005dc2 <UART_SetConfig+0x2da>
 8005db4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005db8:	d01e      	beq.n	8005df8 <UART_SetConfig+0x310>
 8005dba:	e01f      	b.n	8005dfc <UART_SetConfig+0x314>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	75fb      	strb	r3, [r7, #23]
 8005dc0:	e01c      	b.n	8005dfc <UART_SetConfig+0x314>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	75fb      	strb	r3, [r7, #23]
 8005dc6:	e019      	b.n	8005dfc <UART_SetConfig+0x314>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	75fb      	strb	r3, [r7, #23]
 8005dcc:	e016      	b.n	8005dfc <UART_SetConfig+0x314>
 8005dce:	bf00      	nop
 8005dd0:	efff69f3 	.word	0xefff69f3
 8005dd4:	40011000 	.word	0x40011000
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40004400 	.word	0x40004400
 8005de0:	40004800 	.word	0x40004800
 8005de4:	40004c00 	.word	0x40004c00
 8005de8:	40005000 	.word	0x40005000
 8005dec:	40011400 	.word	0x40011400
 8005df0:	40007800 	.word	0x40007800
 8005df4:	40007c00 	.word	0x40007c00
 8005df8:	2308      	movs	r3, #8
 8005dfa:	75fb      	strb	r3, [r7, #23]
 8005dfc:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e06:	d16c      	bne.n	8005ee2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d854      	bhi.n	8005eb8 <UART_SetConfig+0x3d0>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0x32c>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e55 	.word	0x08005e55
 8005e1c:	08005e71 	.word	0x08005e71
 8005e20:	08005eb9 	.word	0x08005eb9
 8005e24:	08005e87 	.word	0x08005e87
 8005e28:	08005eb9 	.word	0x08005eb9
 8005e2c:	08005eb9 	.word	0x08005eb9
 8005e30:	08005eb9 	.word	0x08005eb9
 8005e34:	08005ea3 	.word	0x08005ea3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005e38:	f7fe feb8 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	005a      	lsls	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	441a      	add	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	82bb      	strh	r3, [r7, #20]
      break;
 8005e52:	e034      	b.n	8005ebe <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005e54:	f7fe febe 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	005a      	lsls	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	441a      	add	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	82bb      	strh	r3, [r7, #20]
      break;
 8005e6e:	e026      	b.n	8005ebe <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	085a      	lsrs	r2, r3, #1
 8005e76:	4b51      	ldr	r3, [pc, #324]	; (8005fbc <UART_SetConfig+0x4d4>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6852      	ldr	r2, [r2, #4]
 8005e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e82:	82bb      	strh	r3, [r7, #20]
      break;
 8005e84:	e01b      	b.n	8005ebe <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005e86:	f7fe fdcf 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	005a      	lsls	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	82bb      	strh	r3, [r7, #20]
      break;
 8005ea0:	e00d      	b.n	8005ebe <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	82bb      	strh	r3, [r7, #20]
      break;
 8005eb6:	e002      	b.n	8005ebe <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	74fb      	strb	r3, [r7, #19]
      break;
 8005ebc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005ebe:	8abb      	ldrh	r3, [r7, #20]
 8005ec0:	f023 030f 	bic.w	r3, r3, #15
 8005ec4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec6:	8abb      	ldrh	r3, [r7, #20]
 8005ec8:	105b      	asrs	r3, r3, #1
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	897a      	ldrh	r2, [r7, #10]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e067      	b.n	8005fb2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d861      	bhi.n	8005fac <UART_SetConfig+0x4c4>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x408>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f55 	.word	0x08005f55
 8005efc:	08005fad 	.word	0x08005fad
 8005f00:	08005f71 	.word	0x08005f71
 8005f04:	08005fad 	.word	0x08005fad
 8005f08:	08005fad 	.word	0x08005fad
 8005f0c:	08005fad 	.word	0x08005fad
 8005f10:	08005f91 	.word	0x08005f91
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681c      	ldr	r4, [r3, #0]
 8005f18:	f7fe fe48 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	60e3      	str	r3, [r4, #12]
      break;
 8005f32:	e03e      	b.n	8005fb2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681c      	ldr	r4, [r3, #0]
 8005f38:	f7fe fe4c 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	60e3      	str	r3, [r4, #12]
      break;
 8005f52:	e02e      	b.n	8005fb2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	0859      	lsrs	r1, r3, #1
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <UART_SetConfig+0x4d8>)
 8005f60:	440b      	add	r3, r1
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	6849      	ldr	r1, [r1, #4]
 8005f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	60d3      	str	r3, [r2, #12]
      break;
 8005f6e:	e020      	b.n	8005fb2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681c      	ldr	r4, [r3, #0]
 8005f74:	f7fe fd58 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	441a      	add	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	60e3      	str	r3, [r4, #12]
      break;
 8005f8e:	e010      	b.n	8005fb2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6852      	ldr	r2, [r2, #4]
 8005f98:	0852      	lsrs	r2, r2, #1
 8005f9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6852      	ldr	r2, [r2, #4]
 8005fa2:	fbb1 f2f2 	udiv	r2, r1, r2
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	60da      	str	r2, [r3, #12]
      break;
 8005faa:	e002      	b.n	8005fb2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	74fb      	strb	r3, [r7, #19]
      break;
 8005fb0:	bf00      	nop
    }
  }

  return ret;
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]

}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}
 8005fbc:	01e84800 	.word	0x01e84800
 8005fc0:	00f42400 	.word	0x00f42400

08005fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	6852      	ldr	r2, [r2, #4]
 8005fe2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	6852      	ldr	r2, [r2, #4]
 8006026:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	6852      	ldr	r2, [r2, #4]
 8006048:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	6892      	ldr	r2, [r2, #8]
 800606a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006072:	430a      	orrs	r2, r1
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	6892      	ldr	r2, [r2, #8]
 800608c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	6852      	ldr	r2, [r2, #4]
 80060ae:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c2:	d10a      	bne.n	80060da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	6852      	ldr	r2, [r2, #4]
 80060ce:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	6852      	ldr	r2, [r2, #4]
 80060f0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800611a:	f7fa ff79 	bl	8001010 <HAL_GetTick>
 800611e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b08      	cmp	r3, #8
 800612c:	d10e      	bne.n	800614c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fc88 	bl	8005a52 <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e00c      	b.n	8006166 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d027      	beq.n	80061da <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4b2f      	ldr	r3, [pc, #188]	; (8006250 <FMC_SDRAM_Init+0xe0>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061a0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80061a6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80061ac:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80061b2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80061b8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80061be:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80061c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80061ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e032      	b.n	8006240 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80061f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	4b12      	ldr	r3, [pc, #72]	; (8006250 <FMC_SDRAM_Init+0xe0>)
 8006208:	4013      	ands	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006214:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800621a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006220:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006226:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800622c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	4313      	orrs	r3, r2
 8006232:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	ffff8000 	.word	0xffff8000

08006254 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d02e      	beq.n	80062cc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800627a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800628a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	3b01      	subs	r3, #1
 8006292:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006294:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	3b01      	subs	r3, #1
 800629c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800629e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80062a8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80062b2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80062bc:	4313      	orrs	r3, r2
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	609a      	str	r2, [r3, #8]
 80062ca:	e039      	b.n	8006340 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <FMC_SDRAM_Timing_Init+0xfc>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	3b01      	subs	r3, #1
 80062e0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062fe:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	3b01      	subs	r3, #1
 800630c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800630e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	3b01      	subs	r3, #1
 8006316:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006318:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006322:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	3b01      	subs	r3, #1
 800632a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800632c:	4313      	orrs	r3, r2
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	ff0f0fff 	.word	0xff0f0fff

08006354 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800636c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	3b01      	subs	r3, #1
 8006374:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006376:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006398:	b084      	sub	sp, #16
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	f107 0014 	add.w	r0, r7, #20
 80063a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d11e      	bne.n	80063ee <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	4b1d      	ldr	r3, [pc, #116]	; (8006438 <USB_CoreInit+0xa0>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 80063d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d105      	bne.n	80063e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 f9a4 	bl	8007734 <USB_CoreReset>
 80063ec:	e00c      	b.n	8006408 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f99a 	bl	8007734 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d10b      	bne.n	8006426 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f043 0206 	orr.w	r2, r3, #6
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f043 0220 	orr.w	r2, r3, #32
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006432:	b004      	add	sp, #16
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	ffbdffbf 	.word	0xffbdffbf

0800643c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f043 0201 	orr.w	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d106      	bne.n	80064ac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]
 80064aa:	e008      	b.n	80064be <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 80064be:	2032      	movs	r0, #50	; 0x32
 80064c0:	f7fa fdb2 	bl	8001028 <HAL_Delay>

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d0:	b084      	sub	sp, #16
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	f107 001c 	add.w	r0, r7, #28
 80064de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 80064f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d111      	bne.n	800651c <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006522:	461a      	mov	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	2b01      	cmp	r3, #1
 800653e:	d10c      	bne.n	800655a <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8006546:	2100      	movs	r1, #0
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f957 	bl	80067fc <USB_SetDevSpeed>
 800654e:	e018      	b.n	8006582 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8006550:	2101      	movs	r1, #1
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f952 	bl	80067fc <USB_SetDevSpeed>
 8006558:	e013      	b.n	8006582 <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2b03      	cmp	r3, #3
 800655e:	d10c      	bne.n	800657a <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8006566:	2100      	movs	r1, #0
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f947 	bl	80067fc <USB_SetDevSpeed>
 800656e:	e008      	b.n	8006582 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8006570:	2101      	movs	r1, #1
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f942 	bl	80067fc <USB_SetDevSpeed>
 8006578:	e003      	b.n	8006582 <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800657a:	2103      	movs	r1, #3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f93d 	bl	80067fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8006582:	2110      	movs	r1, #16
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f8f1 	bl	800676c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f914 	bl	80067b8 <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	461a      	mov	r2, r3
 8006598:	2300      	movs	r3, #0
 800659a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	461a      	mov	r2, r3
 80065a4:	2300      	movs	r3, #0
 80065a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	461a      	mov	r2, r3
 80065b0:	f04f 33ff 	mov.w	r3, #4294967295
 80065b4:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065bc:	461a      	mov	r2, r3
 80065be:	2300      	movs	r3, #0
 80065c0:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e034      	b.n	8006632 <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065de:	d10a      	bne.n	80065f6 <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	461a      	mov	r2, r3
 80065ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	e008      	b.n	8006608 <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	461a      	mov	r2, r3
 8006604:	2300      	movs	r3, #0
 8006606:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	461a      	mov	r2, r3
 8006616:	2300      	movs	r3, #0
 8006618:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	461a      	mov	r2, r3
 8006628:	23ff      	movs	r3, #255	; 0xff
 800662a:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	429a      	cmp	r2, r3
 8006638:	d8c6      	bhi.n	80065c8 <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	e034      	b.n	80066aa <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006656:	d10a      	bne.n	800666e <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	e008      	b.n	8006680 <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	461a      	mov	r2, r3
 800667c:	2300      	movs	r3, #0
 800667e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668c:	461a      	mov	r2, r3
 800668e:	2300      	movs	r3, #0
 8006690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	461a      	mov	r2, r3
 80066a0:	23ff      	movs	r3, #255	; 0xff
 80066a2:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d8c6      	bhi.n	8006640 <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b8:	461a      	mov	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d115      	bne.n	80066fa <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	461a      	mov	r2, r3
 80066d6:	4b21      	ldr	r3, [pc, #132]	; (800675c <USB_DevInit+0x28c>)
 80066d8:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	4619      	mov	r1, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ea:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <USB_DevInit+0x290>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006706:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f043 0210 	orr.w	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	4b11      	ldr	r3, [pc, #68]	; (8006764 <USB_DevInit+0x294>)
 8006720:	4313      	orrs	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8006726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f043 0208 	orr.w	r2, r3, #8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8006738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673a:	2b01      	cmp	r3, #1
 800673c:	d105      	bne.n	800674a <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <USB_DevInit+0x298>)
 8006744:	4313      	orrs	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006756:	b004      	add	sp, #16
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	00800100 	.word	0x00800100
 8006760:	00010003 	.word	0x00010003
 8006764:	803c3800 	.word	0x803c3800
 8006768:	40000004 	.word	0x40000004

0800676c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <USB_FlushTxFifo+0x48>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e006      	b.n	80067a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d0f0      	beq.n	8006786 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	00030d40 	.word	0x00030d40

080067b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2210      	movs	r2, #16
 80067c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3301      	adds	r3, #1
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <USB_FlushRxFifo+0x40>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d901      	bls.n	80067dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e006      	b.n	80067ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d0f0      	beq.n	80067ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	00030d40 	.word	0x00030d40

080067fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	4619      	mov	r1, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0306 	and.w	r3, r3, #6
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
 800684c:	e01c      	b.n	8006888 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 0306 	and.w	r3, r3, #6
 800685a:	2b02      	cmp	r3, #2
 800685c:	d007      	beq.n	800686e <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800686a:	2b06      	cmp	r3, #6
 800686c:	d102      	bne.n	8006874 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 800686e:	2303      	movs	r3, #3
 8006870:	73fb      	strb	r3, [r7, #15]
 8006872:	e009      	b.n	8006888 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0306 	and.w	r3, r3, #6
 8006880:	2b04      	cmp	r3, #4
 8006882:	d101      	bne.n	8006888 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8006884:	2302      	movs	r3, #2
 8006886:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d13c      	bne.n	8006924 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b0:	4619      	mov	r1, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	69da      	ldr	r2, [r3, #28]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	2301      	movs	r3, #1
 80068c2:	4083      	lsls	r3, r0
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d158      	bne.n	8006994 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	4618      	mov	r0, r3
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	78c9      	ldrb	r1, [r1, #3]
 800690e:	0489      	lsls	r1, r1, #18
 8006910:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	7809      	ldrb	r1, [r1, #0]
 8006916:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8006918:	430b      	orrs	r3, r1
 800691a:	431a      	orrs	r2, r3
 800691c:	4b21      	ldr	r3, [pc, #132]	; (80069a4 <USB_ActivateEndpoint+0x10c>)
 800691e:	4313      	orrs	r3, r2
 8006920:	6003      	str	r3, [r0, #0]
 8006922:	e037      	b.n	8006994 <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	4619      	mov	r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	7812      	ldrb	r2, [r2, #0]
 8006938:	4610      	mov	r0, r2
 800693a:	2201      	movs	r2, #1
 800693c:	4082      	lsls	r2, r0
 800693e:	0412      	lsls	r2, r2, #16
 8006940:	4313      	orrs	r3, r2
 8006942:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11b      	bne.n	8006994 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	4618      	mov	r0, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	78c9      	ldrb	r1, [r1, #3]
 8006988:	0489      	lsls	r1, r1, #18
 800698a:	430b      	orrs	r3, r1
 800698c:	431a      	orrs	r2, r3
 800698e:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <USB_ActivateEndpoint+0x10c>)
 8006990:	4313      	orrs	r3, r2
 8006992:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	10008000 	.word	0x10008000

080069a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d135      	bne.n	8006a26 <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c0:	4619      	mov	r1, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	2301      	movs	r3, #1
 80069d2:	4083      	lsls	r3, r0
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	43db      	mvns	r3, r3
 80069d8:	4013      	ands	r3, r2
 80069da:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	4619      	mov	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	2301      	movs	r3, #1
 80069f4:	4083      	lsls	r3, r0
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	43db      	mvns	r3, r3
 80069fa:	4013      	ands	r3, r2
 80069fc:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a22:	600b      	str	r3, [r1, #0]
 8006a24:	e034      	b.n	8006a90 <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4083      	lsls	r3, r0
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	43db      	mvns	r3, r3
 8006a44:	4013      	ands	r3, r2
 8006a46:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4e:	4619      	mov	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4083      	lsls	r3, r0
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	43db      	mvns	r3, r3
 8006a66:	4013      	ands	r3, r2
 8006a68:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	4619      	mov	r1, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a8e:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
	...

08006aa0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	f040 8148 	bne.w	8006d4c <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d139      	bne.n	8006b38 <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	4b96      	ldr	r3, [pc, #600]	; (8006d40 <USB_EPStartXfer+0x2a0>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	4619      	mov	r1, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1e:	4619      	mov	r1, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	4b84      	ldr	r3, [pc, #528]	; (8006d44 <USB_EPStartXfer+0x2a4>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	610b      	str	r3, [r1, #16]
 8006b36:	e084      	b.n	8006c42 <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	4619      	mov	r1, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	4b7a      	ldr	r3, [pc, #488]	; (8006d44 <USB_EPStartXfer+0x2a4>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	4b70      	ldr	r3, [pc, #448]	; (8006d40 <USB_EPStartXfer+0x2a0>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b92:	4618      	mov	r0, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	6959      	ldr	r1, [r3, #20]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	440b      	add	r3, r1
 8006bae:	1e59      	subs	r1, r3, #1
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bb8:	04d9      	lsls	r1, r3, #19
 8006bba:	4b63      	ldr	r3, [pc, #396]	; (8006d48 <USB_EPStartXfer+0x2a8>)
 8006bbc:	400b      	ands	r3, r1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bea:	4313      	orrs	r3, r2
 8006bec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	78db      	ldrb	r3, [r3, #3]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d125      	bne.n	8006c42 <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	4619      	mov	r1, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c1a:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c40:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10b      	bne.n	8006c60 <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c56:	461a      	mov	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	6153      	str	r3, [r2, #20]
 8006c5e:	e016      	b.n	8006c8e <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	78db      	ldrb	r3, [r3, #3]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d012      	beq.n	8006c8e <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	4619      	mov	r1, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	4610      	mov	r0, r2
 8006c86:	2201      	movs	r2, #1
 8006c88:	4082      	lsls	r2, r0
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	78db      	ldrb	r3, [r3, #3]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d12e      	bne.n	8006cf4 <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d113      	bne.n	8006cce <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cca:	600b      	str	r3, [r1, #0]
 8006ccc:	e012      	b.n	8006cf4 <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf2:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	4619      	mov	r1, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d18:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	78db      	ldrb	r3, [r3, #3]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	f040 80f7 	bne.w	8006f12 <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	68d9      	ldr	r1, [r3, #12]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	b298      	uxth	r0, r3
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	4603      	mov	r3, r0
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 fa51 	bl	80071e0 <USB_WritePacket>
 8006d3e:	e0e8      	b.n	8006f12 <USB_EPStartXfer+0x472>
 8006d40:	e007ffff 	.word	0xe007ffff
 8006d44:	fff80000 	.word	0xfff80000
 8006d48:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	4b6b      	ldr	r3, [pc, #428]	; (8006f1c <USB_EPStartXfer+0x47c>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	4619      	mov	r1, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	4b63      	ldr	r3, [pc, #396]	; (8006f20 <USB_EPStartXfer+0x480>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d129      	bne.n	8006df4 <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	4619      	mov	r1, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	4619      	mov	r1, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006df0:	610b      	str	r3, [r1, #16]
 8006df2:	e03a      	b.n	8006e6a <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	695a      	ldr	r2, [r3, #20]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	1e5a      	subs	r2, r3, #1
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	4619      	mov	r1, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	8afb      	ldrh	r3, [r7, #22]
 8006e2c:	04db      	lsls	r3, r3, #19
 8006e2e:	4618      	mov	r0, r3
 8006e30:	4b3c      	ldr	r3, [pc, #240]	; (8006f24 <USB_EPStartXfer+0x484>)
 8006e32:	4003      	ands	r3, r0
 8006e34:	4313      	orrs	r3, r2
 8006e36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	4618      	mov	r0, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	8af9      	ldrh	r1, [r7, #22]
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e66:	4313      	orrs	r3, r2
 8006e68:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d10a      	bne.n	8006e86 <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	78db      	ldrb	r3, [r3, #3]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d12e      	bne.n	8006eec <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d113      	bne.n	8006ec6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	4619      	mov	r1, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ec2:	600b      	str	r3, [r1, #0]
 8006ec4:	e012      	b.n	8006eec <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eea:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	4619      	mov	r1, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f10:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	fff80000 	.word	0xfff80000
 8006f20:	e007ffff 	.word	0xe007ffff
 8006f24:	1ff80000 	.word	0x1ff80000

08006f28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	f040 80cd 	bne.w	80070da <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d139      	bne.n	8006fbc <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f56:	4619      	mov	r1, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	4b9b      	ldr	r3, [pc, #620]	; (80071d8 <USB_EP0StartXfer+0x2b0>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f92:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	4b89      	ldr	r3, [pc, #548]	; (80071dc <USB_EP0StartXfer+0x2b4>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	610b      	str	r3, [r1, #16]
 8006fba:	e058      	b.n	800706e <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	4b7f      	ldr	r3, [pc, #508]	; (80071dc <USB_EP0StartXfer+0x2b4>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	691a      	ldr	r2, [r3, #16]
 8007002:	4b75      	ldr	r3, [pc, #468]	; (80071d8 <USB_EP0StartXfer+0x2b0>)
 8007004:	4013      	ands	r3, r2
 8007006:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d903      	bls.n	800701c <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702a:	4619      	mov	r1, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007040:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	4619      	mov	r1, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706a:	4313      	orrs	r3, r2
 800706c:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10b      	bne.n	800708c <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	461a      	mov	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	6153      	str	r3, [r2, #20]
 800708a:	e012      	b.n	80070b2 <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	4619      	mov	r1, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	2301      	movs	r3, #1
 80070ac:	4083      	lsls	r3, r0
 80070ae:	4313      	orrs	r3, r2
 80070b0:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	4619      	mov	r1, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070d6:	600b      	str	r3, [r1, #0]
 80070d8:	e077      	b.n	80071ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e8:	4619      	mov	r1, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	4b38      	ldr	r3, [pc, #224]	; (80071dc <USB_EP0StartXfer+0x2b4>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710e:	4619      	mov	r1, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	4b2d      	ldr	r3, [pc, #180]	; (80071d8 <USB_EP0StartXfer+0x2b0>)
 8007122:	4013      	ands	r3, r2
 8007124:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	4619      	mov	r1, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800715a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	4619      	mov	r1, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007184:	4313      	orrs	r3, r2
 8007186:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d10a      	bne.n	80071a4 <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	461a      	mov	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b2:	4619      	mov	r1, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071c8:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	e007ffff 	.word	0xe007ffff
 80071dc:	fff80000 	.word	0xfff80000

080071e0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4611      	mov	r1, r2
 80071ec:	461a      	mov	r2, r3
 80071ee:	460b      	mov	r3, r1
 80071f0:	71fb      	strb	r3, [r7, #7]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 80071fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d11d      	bne.n	8007242 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 8007206:	88bb      	ldrh	r3, [r7, #4]
 8007208:	3303      	adds	r3, #3
 800720a:	2b00      	cmp	r3, #0
 800720c:	da00      	bge.n	8007210 <USB_WritePacket+0x30>
 800720e:	3303      	adds	r3, #3
 8007210:	109b      	asrs	r3, r3, #2
 8007212:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	e00f      	b.n	800723a <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	031a      	lsls	r2, r3, #12
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4413      	add	r3, r2
 8007222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007226:	461a      	mov	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	3301      	adds	r3, #1
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	3304      	adds	r3, #4
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	d3eb      	bcc.n	800721a <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	3303      	adds	r3, #3
 8007266:	2b00      	cmp	r3, #0
 8007268:	da00      	bge.n	800726c <USB_ReadPacket+0x1c>
 800726a:	3303      	adds	r3, #3
 800726c:	109b      	asrs	r3, r3, #2
 800726e:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e00b      	b.n	800728e <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3304      	adds	r3, #4
 800728c:	60bb      	str	r3, [r7, #8]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	429a      	cmp	r2, r3
 8007294:	d3ef      	bcc.n	8007276 <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 8007296:	68bb      	ldr	r3, [r7, #8]
}
 8007298:	4618      	mov	r0, r3
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d130      	bne.n	8007318 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	db12      	blt.n	80072f0 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d8:	4619      	mov	r1, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ee:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	4619      	mov	r1, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007314:	600b      	str	r3, [r1, #0]
 8007316:	e02f      	b.n	8007378 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	db12      	blt.n	8007352 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	4619      	mov	r1, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007350:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	4619      	mov	r1, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007376:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d12e      	bne.n	80073f6 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a6:	4619      	mov	r1, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073bc:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	78db      	ldrb	r3, [r3, #3]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d003      	beq.n	80073ce <USB_EPClearStall+0x48>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	78db      	ldrb	r3, [r3, #3]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d141      	bne.n	8007452 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	4619      	mov	r1, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f2:	600b      	str	r3, [r1, #0]
 80073f4:	e02d      	b.n	8007452 <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007404:	4619      	mov	r1, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800741a:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	78db      	ldrb	r3, [r3, #3]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d003      	beq.n	800742c <USB_EPClearStall+0xa6>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	78db      	ldrb	r3, [r3, #3]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d112      	bne.n	8007452 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743a:	4619      	mov	r1, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007450:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007480:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007488:	4619      	mov	r1, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800749a:	4313      	orrs	r3, r2
 800749c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	461a      	mov	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f023 0302 	bic.w	r3, r3, #2
 80074c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 80074ca:	2003      	movs	r0, #3
 80074cc:	f7f9 fdac 	bl	8001028 <HAL_Delay>

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f043 0302 	orr.w	r3, r3, #2
 80074f6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 80074f8:	2003      	movs	r0, #3
 80074fa:	f7f9 fd95 	bl	8001028 <HAL_Delay>

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4013      	ands	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  return v;
 8007524:	68fb      	ldr	r3, [r7, #12]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8007532:	b480      	push	{r7}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4013      	ands	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	0c1b      	lsrs	r3, r3, #16
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4013      	ands	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	b29b      	uxth	r3, r3
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8007592:	b480      	push	{r7}
 8007594:	b085      	sub	sp, #20
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4013      	ands	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
  return v;
 80075bc:	68fb      	ldr	r3, [r7, #12]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b087      	sub	sp, #28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	fa22 f303 	lsr.w	r3, r2, r3
 80075f2:	01db      	lsls	r3, r3, #7
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	4013      	ands	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  return v;
 8007610:	68fb      	ldr	r3, [r7, #12]
}
 8007612:	4618      	mov	r0, r3
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f003 0301 	and.w	r3, r3, #1
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764a:	4619      	mov	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <USB_ActivateSetup+0x68>)
 8007656:	4013      	ands	r3, r2
 8007658:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0306 	and.w	r3, r3, #6
 8007666:	2b04      	cmp	r3, #4
 8007668:	d10a      	bne.n	8007680 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	461a      	mov	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f043 0303 	orr.w	r3, r3, #3
 800767e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007686:	461a      	mov	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	fffff800 	.word	0xfffff800

080076a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	460b      	mov	r3, r1
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	461a      	mov	r2, r3
 80076be:	2300      	movs	r3, #0
 80076c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	461a      	mov	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076d6:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f043 0318 	orr.w	r3, r3, #24
 80076ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	461a      	mov	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007702:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 8007704:	7afb      	ldrb	r3, [r7, #11]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d10c      	bne.n	8007724 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	461a      	mov	r2, r3
 800771e:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8007722:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a13      	ldr	r2, [pc, #76]	; (8007798 <USB_CoreReset+0x64>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d901      	bls.n	8007752 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e01b      	b.n	800778a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	daf2      	bge.n	8007740 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f043 0201 	orr.w	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a09      	ldr	r2, [pc, #36]	; (8007798 <USB_CoreReset+0x64>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d901      	bls.n	800777c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e006      	b.n	800778a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b01      	cmp	r3, #1
 8007786:	d0f0      	beq.n	800776a <USB_CoreReset+0x36>

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	00030d40 	.word	0x00030d40

0800779c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80077b2:	4b1f      	ldr	r3, [pc, #124]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077b4:	7a5b      	ldrb	r3, [r3, #9]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d131      	bne.n	8007820 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077bc:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077be:	7a5b      	ldrb	r3, [r3, #9]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	461a      	mov	r2, r3
 80077c4:	4b1a      	ldr	r3, [pc, #104]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077c6:	2100      	movs	r1, #0
 80077c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80077ca:	4b19      	ldr	r3, [pc, #100]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077cc:	7a5b      	ldrb	r3, [r3, #9]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	4a17      	ldr	r2, [pc, #92]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80077da:	4b15      	ldr	r3, [pc, #84]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077dc:	7a5b      	ldrb	r3, [r3, #9]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	461a      	mov	r2, r3
 80077e2:	4b13      	ldr	r3, [pc, #76]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077e4:	4413      	add	r3, r2
 80077e6:	79fa      	ldrb	r2, [r7, #7]
 80077e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80077ea:	4b11      	ldr	r3, [pc, #68]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077ec:	7a5b      	ldrb	r3, [r3, #9]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	b2d1      	uxtb	r1, r2
 80077f4:	4a0e      	ldr	r2, [pc, #56]	; (8007830 <FATFS_LinkDriverEx+0x94>)
 80077f6:	7251      	strb	r1, [r2, #9]
 80077f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	3330      	adds	r3, #48	; 0x30
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	3301      	adds	r3, #1
 8007808:	223a      	movs	r2, #58	; 0x3a
 800780a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	3302      	adds	r3, #2
 8007810:	222f      	movs	r2, #47	; 0x2f
 8007812:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3303      	adds	r3, #3
 8007818:	2200      	movs	r2, #0
 800781a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007820:	7dfb      	ldrb	r3, [r7, #23]
}
 8007822:	4618      	mov	r0, r3
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	200002d4 	.word	0x200002d4

08007834 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800783e:	2200      	movs	r2, #0
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff ffaa 	bl	800779c <FATFS_LinkDriverEx>
 8007848:	4603      	mov	r3, r0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	460b      	mov	r3, r1
 800785c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c1b      	ldrb	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10e      	bne.n	8007888 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800786a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786e:	2202      	movs	r2, #2
 8007870:	2181      	movs	r1, #129	; 0x81
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f002 ffee 	bl	800a854 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8007878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800787c:	2202      	movs	r2, #2
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 ffe7 	bl	800a854 <USBD_LL_OpenEP>
 8007886:	e00b      	b.n	80078a0 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8007888:	2340      	movs	r3, #64	; 0x40
 800788a:	2202      	movs	r2, #2
 800788c:	2181      	movs	r1, #129	; 0x81
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 ffe0 	bl	800a854 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8007894:	2340      	movs	r3, #64	; 0x40
 8007896:	2202      	movs	r2, #2
 8007898:	2101      	movs	r1, #1
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f002 ffda 	bl	800a854 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80078a0:	2308      	movs	r3, #8
 80078a2:	2203      	movs	r2, #3
 80078a4:	2182      	movs	r1, #130	; 0x82
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f002 ffd4 	bl	800a854 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80078ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078b0:	f003 fafa 	bl	800aea8 <malloc>
 80078b4:	4603      	mov	r3, r0
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
 80078cc:	e026      	b.n	800791c <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80078d4:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7c1b      	ldrb	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d109      	bne.n	800790c <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007902:	2101      	movs	r1, #1
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f003 f921 	bl	800ab4c <USBD_LL_PrepareReceive>
 800790a:	e007      	b.n	800791c <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007912:	2340      	movs	r3, #64	; 0x40
 8007914:	2101      	movs	r1, #1
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f003 f918 	bl	800ab4c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8007936:	2181      	movs	r1, #129	; 0x81
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f002 ffc9 	bl	800a8d0 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800793e:	2101      	movs	r1, #1
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f002 ffc5 	bl	800a8d0 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8007946:	2182      	movs	r1, #130	; 0x82
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f002 ffc1 	bl	800a8d0 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007968:	4618      	mov	r0, r3
 800796a:	f003 faa5 	bl	800aeb8 <free>
    pdev->pClassData = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007990:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800799a:	2b00      	cmp	r3, #0
 800799c:	d03a      	beq.n	8007a14 <USBD_CDC_Setup+0x94>
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d000      	beq.n	80079a4 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 80079a2:	e043      	b.n	8007a2c <USBD_CDC_Setup+0xac>
    if (req->wLength)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	88db      	ldrh	r3, [r3, #6]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d029      	beq.n	8007a00 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b25b      	sxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da11      	bge.n	80079da <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80079c2:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	88d2      	ldrh	r2, [r2, #6]
 80079c8:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 80079ca:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	88db      	ldrh	r3, [r3, #6]
 80079d0:	461a      	mov	r2, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f848 	bl	8008a68 <USBD_CtlSendData>
    break;
 80079d8:	e029      	b.n	8007a2e <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785a      	ldrb	r2, [r3, #1]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	88db      	ldrh	r3, [r3, #6]
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 80079f0:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f863 	bl	8008ac4 <USBD_CtlPrepareRx>
    break;
 80079fe:	e016      	b.n	8007a2e <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	7850      	ldrb	r0, [r2, #1]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	4798      	blx	r3
    break;
 8007a12:	e00c      	b.n	8007a2e <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b0a      	cmp	r3, #10
 8007a1a:	d001      	beq.n	8007a20 <USBD_CDC_Setup+0xa0>
 8007a1c:	2b0b      	cmp	r3, #11
      break;
 8007a1e:	e005      	b.n	8007a2c <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8007a20:	2201      	movs	r2, #1
 8007a22:	4905      	ldr	r1, [pc, #20]	; (8007a38 <USBD_CDC_Setup+0xb8>)
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f81f 	bl	8008a68 <USBD_CtlSendData>
      break;
 8007a2a:	bf00      	nop
    break;
 8007a2c:	bf00      	nop
  }
  return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200002e0 	.word	0x200002e0

08007a3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a4e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	e000      	b.n	8007a68 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8007a66:	2302      	movs	r3, #2
  }
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a86:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f003 f897 	bl	800abc0 <USBD_LL_GetRxDataSize>
 8007a92:	4602      	mov	r2, r0
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4798      	blx	r3

    return USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e000      	b.n	8007ac2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ad8:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d015      	beq.n	8007b10 <USBD_CDC_EP0_RxReady+0x46>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007aea:	2bff      	cmp	r3, #255	; 0xff
 8007aec:	d010      	beq.n	8007b10 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007afc:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b04:	b292      	uxth	r2, r2
 8007b06:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	22ff      	movs	r2, #255	; 0xff
 8007b0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2243      	movs	r2, #67	; 0x43
 8007b28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007b2a:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20000094 	.word	0x20000094

08007b3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2243      	movs	r2, #67	; 0x43
 8007b48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b4a:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000050 	.word	0x20000050

08007b5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2243      	movs	r2, #67	; 0x43
 8007b68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007b6a:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	200000d8 	.word	0x200000d8

08007b7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	220a      	movs	r2, #10
 8007b88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007b8a:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	2000000c 	.word	0x2000000c

08007b9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007bde:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c0e:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c34:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d017      	beq.n	8007c70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7c1b      	ldrb	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d109      	bne.n	8007c5c <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c52:	2101      	movs	r1, #1
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f002 ff79 	bl	800ab4c <USBD_LL_PrepareReceive>
 8007c5a:	e007      	b.n	8007c6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c62:	2340      	movs	r3, #64	; 0x40
 8007c64:	2101      	movs	r1, #1
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f002 ff70 	bl	800ab4c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e000      	b.n	8007c72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007c70:	2302      	movs	r3, #2
  }
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	4613      	mov	r3, r2
 8007c86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e01a      	b.n	8007cc8 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	79fa      	ldrb	r2, [r7, #7]
 8007cbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f002 fd3d 	bl	800a740 <USBD_LL_Init>
  
  return USBD_OK; 
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
 8007cf0:	e001      	b.n	8007cf6 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f002 fd6f 	bl	800a7f0 <USBD_LL_Start>
  
  return USBD_OK;  
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00c      	beq.n	8007d66 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	4611      	mov	r1, r2
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	4611      	mov	r1, r2
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fdb4 	bl	8008916 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007dca:	f003 031f 	and.w	r3, r3, #31
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d00b      	beq.n	8007dea <USBD_LL_SetupStage+0x54>
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d011      	beq.n	8007dfa <USBD_LL_SetupStage+0x64>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d117      	bne.n	8007e0a <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9c6 	bl	8008174 <USBD_StdDevReq>
    break;
 8007de8:	e01a      	b.n	8007e20 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa0e 	bl	8008214 <USBD_StdItfReq>
    break;
 8007df8:	e012      	b.n	8007e20 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa39 	bl	800827a <USBD_StdEPReq>
    break;
 8007e08:	e00a      	b.n	8007e20 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007e10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f002 fd8f 	bl	800a93c <USBD_LL_StallEP>
    break;
 8007e1e:	bf00      	nop
  }  
  return USBD_OK;  
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	460b      	mov	r3, r1
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d138      	bne.n	8007eb0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8007e44:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d142      	bne.n	8007ed6 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d914      	bls.n	8007e86 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	1ad2      	subs	r2, r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	4293      	cmp	r3, r2
 8007e74:	bf28      	it	cs
 8007e76:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fe3e 	bl	8008b00 <USBD_CtlContinueRx>
 8007e84:	e027      	b.n	8007ed6 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d105      	bne.n	8007ea8 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fe3b 	bl	8008b24 <USBD_CtlSendStatus>
 8007eae:	e012      	b.n	8007ed6 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00c      	beq.n	8007ed6 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d107      	bne.n	8007ed6 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	7afa      	ldrb	r2, [r7, #11]
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	4798      	blx	r3
  }  
  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d16c      	bne.n	8007fce <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d157      	bne.n	8007fb4 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d915      	bls.n	8007f3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	1ad2      	subs	r2, r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fdb9 	bl	8008aa0 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2200      	movs	r2, #0
 8007f32:	2100      	movs	r1, #0
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f002 fe09 	bl	800ab4c <USBD_LL_PrepareReceive>
 8007f3a:	e03b      	b.n	8007fb4 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	68d2      	ldr	r2, [r2, #12]
 8007f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f48:	fb02 f201 	mul.w	r2, r2, r1
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d11c      	bne.n	8007f8c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d316      	bcc.n	8007f8c <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d20f      	bcs.n	8007f8c <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fd95 	bl	8008aa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2200      	movs	r2, #0
 8007f82:	2100      	movs	r1, #0
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f002 fde1 	bl	800ab4c <USBD_LL_PrepareReceive>
 8007f8a:	e013      	b.n	8007fb4 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d105      	bne.n	8007fae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fdcb 	bl	8008b4a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d11a      	bne.n	8007ff4 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff feac 	bl	8007d1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8007fcc:	e012      	b.n	8007ff4 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d107      	bne.n	8007ff4 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	7afa      	ldrb	r2, [r7, #11]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	4798      	blx	r3
  }  
  return USBD_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008006:	2340      	movs	r3, #64	; 0x40
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f002 fc21 	bl	800a854 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2240      	movs	r2, #64	; 0x40
 8008016:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800801a:	2340      	movs	r3, #64	; 0x40
 800801c:	2200      	movs	r2, #0
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f002 fc17 	bl	800a854 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2240      	movs	r2, #64	; 0x40
 800802a:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6852      	ldr	r2, [r2, #4]
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	4611      	mov	r1, r2
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
 
  
  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2204      	movs	r2, #4
 8008094:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d10b      	bne.n	80080f2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6852      	ldr	r2, [r2, #4]
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	4611      	mov	r1, r2
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
   
  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b09      	cmp	r3, #9
 8008188:	d839      	bhi.n	80081fe <USBD_StdDevReq+0x8a>
 800818a:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <USBD_StdDevReq+0x1c>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081e1 	.word	0x080081e1
 8008194:	080081f5 	.word	0x080081f5
 8008198:	080081ff 	.word	0x080081ff
 800819c:	080081eb 	.word	0x080081eb
 80081a0:	080081ff 	.word	0x080081ff
 80081a4:	080081c3 	.word	0x080081c3
 80081a8:	080081b9 	.word	0x080081b9
 80081ac:	080081ff 	.word	0x080081ff
 80081b0:	080081d7 	.word	0x080081d7
 80081b4:	080081cd 	.word	0x080081cd
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f936 	bl	800842c <USBD_GetDescriptor>
    break;
 80081c0:	e022      	b.n	8008208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa41 	bl	800864c <USBD_SetAddress>
    break;
 80081ca:	e01d      	b.n	8008208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa7a 	bl	80086c8 <USBD_SetConfig>
    break;
 80081d4:	e018      	b.n	8008208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fafd 	bl	80087d8 <USBD_GetConfig>
    break;
 80081de:	e013      	b.n	8008208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fb2a 	bl	800883c <USBD_GetStatus>
    break;
 80081e8:	e00e      	b.n	8008208 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb4f 	bl	8008890 <USBD_SetFeature>
    break;
 80081f2:	e009      	b.n	8008208 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb65 	bl	80088c6 <USBD_ClrFeature>
    break;
 80081fc:	e004      	b.n	8008208 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fbc5 	bl	8008990 <USBD_CtlError>
    break;
 8008206:	bf00      	nop
  }
  
  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop

08008214 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008228:	2b03      	cmp	r3, #3
 800822a:	d11b      	bne.n	8008264 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	889b      	ldrh	r3, [r3, #4]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	d811      	bhi.n	800825a <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	88db      	ldrh	r3, [r3, #6]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d110      	bne.n	800826e <USBD_StdItfReq+0x5a>
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10d      	bne.n	800826e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fc66 	bl	8008b24 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8008258:	e009      	b.n	800826e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fb97 	bl	8008990 <USBD_CtlError>
    break;
 8008262:	e004      	b.n	800826e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fb92 	bl	8008990 <USBD_CtlError>
    break;
 800826c:	e000      	b.n	8008270 <USBD_StdItfReq+0x5c>
    break;
 800826e:	bf00      	nop
  }
  return USBD_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	889b      	ldrh	r3, [r3, #4]
 800828c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008296:	2b20      	cmp	r3, #32
 8008298:	d108      	bne.n	80082ac <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
    
    return USBD_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e0ba      	b.n	8008422 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d039      	beq.n	8008328 <USBD_StdEPReq+0xae>
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d002      	beq.n	80082be <USBD_StdEPReq+0x44>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d06b      	beq.n	8008394 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80082bc:	e0b0      	b.n	8008420 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d002      	beq.n	80082ce <USBD_StdEPReq+0x54>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d00c      	beq.n	80082e6 <USBD_StdEPReq+0x6c>
 80082cc:	e025      	b.n	800831a <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d027      	beq.n	8008324 <USBD_StdEPReq+0xaa>
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b80      	cmp	r3, #128	; 0x80
 80082d8:	d024      	beq.n	8008324 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f002 fb2c 	bl	800a93c <USBD_LL_StallEP>
      break;	
 80082e4:	e01e      	b.n	8008324 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	885b      	ldrh	r3, [r3, #2]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <USBD_StdEPReq+0x8a>
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	2b80      	cmp	r3, #128	; 0x80
 80082f8:	d004      	beq.n	8008304 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f002 fb1c 	bl	800a93c <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fc06 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 8008318:	e005      	b.n	8008326 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb37 	bl	8008990 <USBD_CtlError>
      break;    
 8008322:	e000      	b.n	8008326 <USBD_StdEPReq+0xac>
      break;	
 8008324:	bf00      	nop
    break;
 8008326:	e07b      	b.n	8008420 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800832e:	2b02      	cmp	r3, #2
 8008330:	d002      	beq.n	8008338 <USBD_StdEPReq+0xbe>
 8008332:	2b03      	cmp	r3, #3
 8008334:	d00c      	beq.n	8008350 <USBD_StdEPReq+0xd6>
 8008336:	e024      	b.n	8008382 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d026      	beq.n	800838c <USBD_StdEPReq+0x112>
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b80      	cmp	r3, #128	; 0x80
 8008342:	d023      	beq.n	800838c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f002 faf7 	bl	800a93c <USBD_LL_StallEP>
      break;	
 800834e:	e01d      	b.n	800838c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	885b      	ldrh	r3, [r3, #2]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11b      	bne.n	8008390 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f002 fb1e 	bl	800a9a8 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fbd2 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 8008380:	e006      	b.n	8008390 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fb03 	bl	8008990 <USBD_CtlError>
      break;    
 800838a:	e002      	b.n	8008392 <USBD_StdEPReq+0x118>
      break;	
 800838c:	bf00      	nop
 800838e:	e047      	b.n	8008420 <USBD_StdEPReq+0x1a6>
      break;
 8008390:	bf00      	nop
    break;
 8008392:	e045      	b.n	8008420 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800839a:	2b02      	cmp	r3, #2
 800839c:	d002      	beq.n	80083a4 <USBD_StdEPReq+0x12a>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d00b      	beq.n	80083ba <USBD_StdEPReq+0x140>
 80083a2:	e036      	b.n	8008412 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d036      	beq.n	800841c <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f002 fac2 	bl	800a93c <USBD_LL_StallEP>
      break;	
 80083b8:	e030      	b.n	800841c <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80083ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	da08      	bge.n	80083d4 <USBD_StdEPReq+0x15a>
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c8:	3301      	adds	r3, #1
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4413      	add	r3, r2
 80083d0:	3304      	adds	r3, #4
 80083d2:	e007      	b.n	80083e4 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80083da:	3310      	adds	r3, #16
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	3304      	adds	r3, #4
 80083e4:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f002 fb12 	bl	800aa14 <USBD_LL_IsStallEP>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2201      	movs	r2, #1
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	e002      	b.n	8008404 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8008404:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8008406:	2202      	movs	r2, #2
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fb2c 	bl	8008a68 <USBD_CtlSendData>
      break;
 8008410:	e005      	b.n	800841e <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fabb 	bl	8008990 <USBD_CtlError>
      break;
 800841a:	e000      	b.n	800841e <USBD_StdEPReq+0x1a4>
      break;	
 800841c:	bf00      	nop
    break;
 800841e:	bf00      	nop
  }
  return ret;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	885b      	ldrh	r3, [r3, #2]
 800843a:	0a1b      	lsrs	r3, r3, #8
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	2b0e      	cmp	r3, #14
 8008442:	f200 80e5 	bhi.w	8008610 <USBD_GetDescriptor+0x1e4>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <USBD_GetDescriptor+0x20>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	080084a1 	.word	0x080084a1
 8008450:	080084b9 	.word	0x080084b9
 8008454:	080084f9 	.word	0x080084f9
 8008458:	08008611 	.word	0x08008611
 800845c:	08008611 	.word	0x08008611
 8008460:	080085bd 	.word	0x080085bd
 8008464:	080085e3 	.word	0x080085e3
 8008468:	08008611 	.word	0x08008611
 800846c:	08008611 	.word	0x08008611
 8008470:	08008611 	.word	0x08008611
 8008474:	08008611 	.word	0x08008611
 8008478:	08008611 	.word	0x08008611
 800847c:	08008611 	.word	0x08008611
 8008480:	08008611 	.word	0x08008611
 8008484:	08008489 	.word	0x08008489
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	7c12      	ldrb	r2, [r2, #16]
 8008494:	f107 010a 	add.w	r1, r7, #10
 8008498:	4610      	mov	r0, r2
 800849a:	4798      	blx	r3
 800849c:	60f8      	str	r0, [r7, #12]
    break;
 800849e:	e0bc      	b.n	800861a <USBD_GetDescriptor+0x1ee>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7c12      	ldrb	r2, [r2, #16]
 80084ac:	f107 010a 	add.w	r1, r7, #10
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	60f8      	str	r0, [r7, #12]
    break;
 80084b6:	e0b0      	b.n	800861a <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	7c1b      	ldrb	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10d      	bne.n	80084dc <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c8:	f107 020a 	add.w	r2, r7, #10
 80084cc:	4610      	mov	r0, r2
 80084ce:	4798      	blx	r3
 80084d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3301      	adds	r3, #1
 80084d6:	2202      	movs	r2, #2
 80084d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80084da:	e09e      	b.n	800861a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	f107 020a 	add.w	r2, r7, #10
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3301      	adds	r3, #1
 80084f2:	2202      	movs	r2, #2
 80084f4:	701a      	strb	r2, [r3, #0]
    break;
 80084f6:	e090      	b.n	800861a <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	885b      	ldrh	r3, [r3, #2]
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d856      	bhi.n	80085b0 <USBD_GetDescriptor+0x184>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <USBD_GetDescriptor+0xdc>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008521 	.word	0x08008521
 800850c:	08008539 	.word	0x08008539
 8008510:	08008551 	.word	0x08008551
 8008514:	08008569 	.word	0x08008569
 8008518:	08008581 	.word	0x08008581
 800851c:	08008599 	.word	0x08008599
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	7c12      	ldrb	r2, [r2, #16]
 800852c:	f107 010a 	add.w	r1, r7, #10
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
      break;
 8008536:	e040      	b.n	80085ba <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	7c12      	ldrb	r2, [r2, #16]
 8008544:	f107 010a 	add.w	r1, r7, #10
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
      break;
 800854e:	e034      	b.n	80085ba <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	7c12      	ldrb	r2, [r2, #16]
 800855c:	f107 010a 	add.w	r1, r7, #10
 8008560:	4610      	mov	r0, r2
 8008562:	4798      	blx	r3
 8008564:	60f8      	str	r0, [r7, #12]
      break;
 8008566:	e028      	b.n	80085ba <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	7c12      	ldrb	r2, [r2, #16]
 8008574:	f107 010a 	add.w	r1, r7, #10
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
      break;
 800857e:	e01c      	b.n	80085ba <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008586:	695b      	ldr	r3, [r3, #20]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 010a 	add.w	r1, r7, #10
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
      break;
 8008596:	e010      	b.n	80085ba <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	7c12      	ldrb	r2, [r2, #16]
 80085a4:	f107 010a 	add.w	r1, r7, #10
 80085a8:	4610      	mov	r0, r2
 80085aa:	4798      	blx	r3
 80085ac:	60f8      	str	r0, [r7, #12]
      break;
 80085ae:	e004      	b.n	80085ba <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f9ec 	bl	8008990 <USBD_CtlError>
      return;
 80085b8:	e044      	b.n	8008644 <USBD_GetDescriptor+0x218>
#endif   
    }
    break;
 80085ba:	e02e      	b.n	800861a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	7c1b      	ldrb	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d109      	bne.n	80085d8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085cc:	f107 020a 	add.w	r2, r7, #10
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
 80085d4:	60f8      	str	r0, [r7, #12]
      break;
 80085d6:	e020      	b.n	800861a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f9d8 	bl	8008990 <USBD_CtlError>
      return;
 80085e0:	e030      	b.n	8008644 <USBD_GetDescriptor+0x218>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	7c1b      	ldrb	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10d      	bne.n	8008606 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	f107 020a 	add.w	r2, r7, #10
 80085f6:	4610      	mov	r0, r2
 80085f8:	4798      	blx	r3
 80085fa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	2207      	movs	r2, #7
 8008602:	701a      	strb	r2, [r3, #0]
      break; 
 8008604:	e009      	b.n	800861a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f9c1 	bl	8008990 <USBD_CtlError>
      return;
 800860e:	e019      	b.n	8008644 <USBD_GetDescriptor+0x218>
    }

  default: 
     USBD_CtlError(pdev , req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f9bc 	bl	8008990 <USBD_CtlError>
    return;
 8008618:	e014      	b.n	8008644 <USBD_GetDescriptor+0x218>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800861a:	897b      	ldrh	r3, [r7, #10]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d011      	beq.n	8008644 <USBD_GetDescriptor+0x218>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	88db      	ldrh	r3, [r3, #6]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00d      	beq.n	8008644 <USBD_GetDescriptor+0x218>
  {
    
    len = MIN(len , req->wLength);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	88da      	ldrh	r2, [r3, #6]
 800862c:	897b      	ldrh	r3, [r7, #10]
 800862e:	4293      	cmp	r3, r2
 8008630:	bf28      	it	cs
 8008632:	4613      	movcs	r3, r2
 8008634:	b29b      	uxth	r3, r3
 8008636:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8008638:	897b      	ldrh	r3, [r7, #10]
 800863a:	461a      	mov	r2, r3
 800863c:	68f9      	ldr	r1, [r7, #12]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa12 	bl	8008a68 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop

0800864c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	889b      	ldrh	r3, [r3, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d12c      	bne.n	80086b8 <USBD_SetAddress+0x6c>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	88db      	ldrh	r3, [r3, #6]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d128      	bne.n	80086b8 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008670:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008678:	2b03      	cmp	r3, #3
 800867a:	d104      	bne.n	8008686 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f986 	bl	8008990 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008684:	e01c      	b.n	80086c0 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7bfa      	ldrb	r2, [r7, #15]
 800868a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f002 f9ea 	bl	800aa6c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fa43 	bl	8008b24 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80086ac:	e008      	b.n	80086c0 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80086b6:	e003      	b.n	80086c0 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f968 	bl	8008990 <USBD_CtlError>
  } 
}
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	885b      	ldrh	r3, [r3, #2]
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	4b3e      	ldr	r3, [pc, #248]	; (80087d4 <USBD_SetConfig+0x10c>)
 80086da:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80086dc:	4b3d      	ldr	r3, [pc, #244]	; (80087d4 <USBD_SetConfig+0x10c>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d904      	bls.n	80086ee <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f952 	bl	8008990 <USBD_CtlError>
 80086ec:	e06f      	b.n	80087ce <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d002      	beq.n	80086fe <USBD_SetConfig+0x36>
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d023      	beq.n	8008744 <USBD_SetConfig+0x7c>
 80086fc:	e062      	b.n	80087c4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80086fe:	4b35      	ldr	r3, [pc, #212]	; (80087d4 <USBD_SetConfig+0x10c>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01a      	beq.n	800873c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8008706:	4b33      	ldr	r3, [pc, #204]	; (80087d4 <USBD_SetConfig+0x10c>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2203      	movs	r2, #3
 8008714:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8008718:	4b2e      	ldr	r3, [pc, #184]	; (80087d4 <USBD_SetConfig+0x10c>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff fb07 	bl	8007d32 <USBD_SetClassConfig>
 8008724:	4603      	mov	r3, r0
 8008726:	2b02      	cmp	r3, #2
 8008728:	d104      	bne.n	8008734 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f92f 	bl	8008990 <USBD_CtlError>
          return;
 8008732:	e04c      	b.n	80087ce <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9f5 	bl	8008b24 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800873a:	e048      	b.n	80087ce <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9f1 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 8008742:	e044      	b.n	80087ce <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8008744:	4b23      	ldr	r3, [pc, #140]	; (80087d4 <USBD_SetConfig+0x10c>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d112      	bne.n	8008772 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8008754:	4b1f      	ldr	r3, [pc, #124]	; (80087d4 <USBD_SetConfig+0x10c>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800875e:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <USBD_SetConfig+0x10c>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff fb03 	bl	8007d70 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f9da 	bl	8008b24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008770:	e02d      	b.n	80087ce <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8008772:	4b18      	ldr	r3, [pc, #96]	; (80087d4 <USBD_SetConfig+0x10c>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d01d      	beq.n	80087bc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff faf1 	bl	8007d70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <USBD_SetConfig+0x10c>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <USBD_SetConfig+0x10c>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff fac7 	bl	8007d32 <USBD_SetClassConfig>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d104      	bne.n	80087b4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f8ef 	bl	8008990 <USBD_CtlError>
          return;
 80087b2:	e00c      	b.n	80087ce <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9b5 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 80087ba:	e008      	b.n	80087ce <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f9b1 	bl	8008b24 <USBD_CtlSendStatus>
      break;
 80087c2:	e004      	b.n	80087ce <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f8e2 	bl	8008990 <USBD_CtlError>
      break;
 80087cc:	bf00      	nop
    }
  }
}
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200002e1 	.word	0x200002e1

080087d8 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	88db      	ldrh	r3, [r3, #6]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d004      	beq.n	80087f4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f8cf 	bl	8008990 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80087f2:	e01f      	b.n	8008834 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d002      	beq.n	8008804 <USBD_GetConfig+0x2c>
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d00b      	beq.n	800881a <USBD_GetConfig+0x42>
 8008802:	e012      	b.n	800882a <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800880e:	2201      	movs	r2, #1
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f928 	bl	8008a68 <USBD_CtlSendData>
      break;
 8008818:	e00c      	b.n	8008834 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800881e:	2201      	movs	r2, #1
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f920 	bl	8008a68 <USBD_CtlSendData>
      break;
 8008828:	e004      	b.n	8008834 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f8af 	bl	8008990 <USBD_CtlError>
      break;
 8008832:	bf00      	nop
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800884c:	3b02      	subs	r3, #2
 800884e:	2b01      	cmp	r3, #1
 8008850:	d815      	bhi.n	800887e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f043 0202 	orr.w	r2, r3, #2
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8008872:	2202      	movs	r2, #2
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f8f6 	bl	8008a68 <USBD_CtlSendData>
                      2);
    break;
 800887c:	e004      	b.n	8008888 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f885 	bl	8008990 <USBD_CtlError>
    break;
 8008886:	bf00      	nop
  }
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d10d      	bne.n	80088be <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f933 	bl	8008b24 <USBD_CtlSendStatus>
  }

}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80088d6:	3b02      	subs	r3, #2
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d812      	bhi.n	8008902 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	885b      	ldrh	r3, [r3, #2]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d113      	bne.n	800890c <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f912 	bl	8008b24 <USBD_CtlSendStatus>
    }
    break;
 8008900:	e004      	b.n	800890c <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f843 	bl	8008990 <USBD_CtlError>
    break;
 800890a:	e000      	b.n	800890e <USBD_ClrFeature+0x48>
    break;
 800890c:	bf00      	nop
  }
}
 800890e:	bf00      	nop
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	785a      	ldrb	r2, [r3, #1]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	3302      	adds	r3, #2
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	b29a      	uxth	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	3303      	adds	r3, #3
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	b29b      	uxth	r3, r3
 8008944:	4413      	add	r3, r2
 8008946:	b29a      	uxth	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	3304      	adds	r3, #4
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b29a      	uxth	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	3305      	adds	r3, #5
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	b29b      	uxth	r3, r3
 8008960:	4413      	add	r3, r2
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3306      	adds	r3, #6
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	b29a      	uxth	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	3307      	adds	r3, #7
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	4413      	add	r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	80da      	strh	r2, [r3, #6]

}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800899a:	2180      	movs	r1, #128	; 0x80
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 ffcd 	bl	800a93c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 ffc9 	bl	800a93c <USBD_LL_StallEP>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d033      	beq.n	8008a30 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f835 	bl	8008a38 <USBD_GetLen>
 80089ce:	4603      	mov	r3, r0
 80089d0:	3301      	adds	r3, #1
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	75fa      	strb	r2, [r7, #23]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4413      	add	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	8812      	ldrh	r2, [r2, #0]
 80089ec:	b2d2      	uxtb	r2, r2
 80089ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	75fa      	strb	r2, [r7, #23]
 80089f6:	461a      	mov	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4413      	add	r3, r2
 80089fc:	2203      	movs	r2, #3
 80089fe:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8008a00:	e012      	b.n	8008a28 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	75fa      	strb	r2, [r7, #23]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	441a      	add	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1c59      	adds	r1, r3, #1
 8008a12:	60f9      	str	r1, [r7, #12]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	75fa      	strb	r2, [r7, #23]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4413      	add	r3, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e8      	bne.n	8008a02 <USBD_GetString+0x50>
    }
  } 
}
 8008a30:	bf00      	nop
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8008a44:	e005      	b.n	8008a52 <USBD_GetLen+0x1a>
    {
        len++;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f5      	bne.n	8008a46 <USBD_GetLen+0xe>
    }

    return len;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	2100      	movs	r1, #0
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f002 f821 	bl	800aad8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f002 f80f 	bl	800aad8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8008ada:	88fa      	ldrh	r2, [r7, #6]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8008ae2:	88fa      	ldrh	r2, [r7, #6]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	2100      	movs	r1, #0
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f002 f82b 	bl	800ab4c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f002 f819 	bl	800ab4c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2204      	movs	r2, #4
 8008b30:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 ffcc 	bl	800aad8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b082      	sub	sp, #8
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2205      	movs	r2, #5
 8008b56:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 fff3 	bl	800ab4c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device 
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
  uint8_t sdramstatus = SDRAM_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	71fb      	strb	r3, [r7, #7]
  
  /* place for custom code */
  
  return sdramstatus;
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2210      	movs	r2, #16
 8008ba0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2200      	movs	r2, #0
 8008bac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8008bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fc fc75 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8008bba:	2001      	movs	r0, #1
 8008bbc:	f7f8 fa34 	bl	8001028 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2210      	movs	r2, #16
 8008bca:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8008bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7fc fc60 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2203      	movs	r2, #3
 8008be8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2210      	movs	r2, #16
 8008bee:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2208      	movs	r2, #8
 8008bf4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8008bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7fc fc4e 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8008c08:	f44f 7308 	mov.w	r3, #544	; 0x220
 8008c0c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2204      	movs	r2, #4
 8008c12:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2210      	movs	r2, #16
 8008c18:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8008c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7fc fc39 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f240 6203 	movw	r2, #1539	; 0x603
 8008c3a:	615a      	str	r2, [r3, #20]

}
 8008c3c:	bf00      	nop
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 8008c48:	4904      	ldr	r1, [pc, #16]	; (8008c5c <MX_FATFS_Init+0x18>)
 8008c4a:	4805      	ldr	r0, [pc, #20]	; (8008c60 <MX_FATFS_Init+0x1c>)
 8008c4c:	f7fe fdf2 	bl	8007834 <FATFS_LinkDriver>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	4b03      	ldr	r3, [pc, #12]	; (8008c64 <MX_FATFS_Init+0x20>)
 8008c56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008c58:	bf00      	nop
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	200003a0 	.word	0x200003a0
 8008c60:	0800d8e4 	.word	0x0800d8e4
 8008c64:	20000804 	.word	0x20000804

08008c68 <SCB_EnableICache>:
{
 8008c68:	b480      	push	{r7}
 8008c6a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008c6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008c70:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008c74:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <SCB_EnableICache+0x34>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008c7c:	4a07      	ldr	r2, [pc, #28]	; (8008c9c <SCB_EnableICache+0x34>)
 8008c7e:	4b07      	ldr	r3, [pc, #28]	; (8008c9c <SCB_EnableICache+0x34>)
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008c8c:	f3bf 8f6f 	isb	sy
}
 8008c90:	bf00      	nop
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	e000ed00 	.word	0xe000ed00

08008ca0 <SCB_EnableDCache>:
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8008ca6:	4b1d      	ldr	r3, [pc, #116]	; (8008d1c <SCB_EnableDCache+0x7c>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008cae:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <SCB_EnableDCache+0x7c>)
 8008cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb8:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	0b5b      	lsrs	r3, r3, #13
 8008cbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008cc2:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	08db      	lsrs	r3, r3, #3
 8008cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ccc:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008cce:	4913      	ldr	r1, [pc, #76]	; (8008d1c <SCB_EnableDCache+0x7c>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008cd8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	1e5a      	subs	r2, r3, #1
 8008ce8:	60ba      	str	r2, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1ef      	bne.n	8008cce <SCB_EnableDCache+0x2e>
    } while(sets--);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1e5a      	subs	r2, r3, #1
 8008cf2:	60fa      	str	r2, [r7, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e5      	bne.n	8008cc4 <SCB_EnableDCache+0x24>
 8008cf8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008cfc:	4a07      	ldr	r2, [pc, #28]	; (8008d1c <SCB_EnableDCache+0x7c>)
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <SCB_EnableDCache+0x7c>)
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d06:	6153      	str	r3, [r2, #20]
 8008d08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008d0c:	f3bf 8f6f 	isb	sy
}
 8008d10:	bf00      	nop
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	e000ed00 	.word	0xe000ed00

08008d20 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b0a4      	sub	sp, #144	; 0x90
 8008d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache-------------------------------------------------------------*/
  SCB_EnableICache();
 8008d26:	f7ff ff9f 	bl	8008c68 <SCB_EnableICache>

  /* Enable D-Cache-------------------------------------------------------------*/
  SCB_EnableDCache();
 8008d2a:	f7ff ffb9 	bl	8008ca0 <SCB_EnableDCache>

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008d2e:	f7f8 f93f 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008d32:	f000 f84d 	bl	8008dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008d36:	f000 fb65 	bl	8009404 <MX_GPIO_Init>
  MX_DMA_Init();
 8008d3a:	f000 faab 	bl	8009294 <MX_DMA_Init>
  MX_FMC_Init();
 8008d3e:	f000 fb15 	bl	800936c <MX_FMC_Init>
  MX_ADC3_Init();
 8008d42:	f000 f8f3 	bl	8008f2c <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8008d46:	f000 fa71 	bl	800922c <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8008d4a:	f000 f9ed 	bl	8009128 <MX_LTDC_Init>
  MX_FATFS_Init();
 8008d4e:	f7ff ff79 	bl	8008c44 <MX_FATFS_Init>
  MX_I2C3_Init();
 8008d52:	f000 f99f 	bl	8009094 <MX_I2C3_Init>
  MX_DMA2D_Init();
 8008d56:	f000 f963 	bl	8009020 <MX_DMA2D_Init>
  MX_CRC_Init();
 8008d5a:	f000 f939 	bl	8008fd0 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8008d5e:	f001 fad7 	bl	800a310 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  FMC_SDRAM_CommandTypeDef hsdram1Command;
  BSP_SDRAM_Initialization_Sequence(&hsdram1,&hsdram1Command);
 8008d62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008d66:	4619      	mov	r1, r3
 8008d68:	4816      	ldr	r0, [pc, #88]	; (8008dc4 <main+0xa4>)
 8008d6a:	f7ff ff0d 	bl	8008b88 <BSP_SDRAM_Initialization_Sequence>

  while (1) {
  BSP_LCD_Init();
 8008d6e:	f7f7 fc27 	bl	80005c0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 8008d72:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8008d76:	2000      	movs	r0, #0
 8008d78:	f7f7 fcba 	bl	80006f0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	f7f7 fd17 	bl	80007b0 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8008d82:	f7f7 fefd 	bl	8000b80 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	f7f7 fd69 	bl	8000860 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008d8e:	480e      	ldr	r0, [pc, #56]	; (8008dc8 <main+0xa8>)
 8008d90:	f7f7 fd1e 	bl	80007d0 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Hello to everyone!");
 8008d94:	490d      	ldr	r1, [pc, #52]	; (8008dcc <main+0xac>)
 8008d96:	2005      	movs	r0, #5
 8008d98:	f7f7 fe92 	bl	8000ac0 <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(3000);
 8008d9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008da0:	f7f8 f942 	bl	8001028 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8008da4:	4808      	ldr	r0, [pc, #32]	; (8008dc8 <main+0xa8>)
 8008da6:	f7f7 fd5b 	bl	8000860 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	f7f7 fd0f 	bl	80007d0 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Hello to everyone!");
 8008db2:	4906      	ldr	r1, [pc, #24]	; (8008dcc <main+0xac>)
 8008db4:	2005      	movs	r0, #5
 8008db6:	f7f7 fe83 	bl	8000ac0 <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(3000);
 8008dba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008dbe:	f7f8 f933 	bl	8001028 <HAL_Delay>
  BSP_LCD_Init();
 8008dc2:	e7d4      	b.n	8008d6e <main+0x4e>
 8008dc4:	20000b38 	.word	0x20000b38
 8008dc8:	ff0000ff 	.word	0xff0000ff
 8008dcc:	0800bd5c 	.word	0x0800bd5c

08008dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b0b4      	sub	sp, #208	; 0xd0
 8008dd4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008dd6:	4a50      	ldr	r2, [pc, #320]	; (8008f18 <SystemClock_Config+0x148>)
 8008dd8:	4b4f      	ldr	r3, [pc, #316]	; (8008f18 <SystemClock_Config+0x148>)
 8008dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de0:	6413      	str	r3, [r2, #64]	; 0x40
 8008de2:	4b4d      	ldr	r3, [pc, #308]	; (8008f18 <SystemClock_Config+0x148>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008dee:	4a4b      	ldr	r2, [pc, #300]	; (8008f1c <SystemClock_Config+0x14c>)
 8008df0:	4b4a      	ldr	r3, [pc, #296]	; (8008f1c <SystemClock_Config+0x14c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	4b48      	ldr	r3, [pc, #288]	; (8008f1c <SystemClock_Config+0x14c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e14:	2302      	movs	r3, #2
 8008e16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008e22:	2319      	movs	r3, #25
 8008e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8008e28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008e30:	2302      	movs	r3, #2
 8008e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8008e36:	2309      	movs	r3, #9
 8008e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e3c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fb fa99 	bl	8004378 <HAL_RCC_OscConfig>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008e4c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008e50:	4833      	ldr	r0, [pc, #204]	; (8008f20 <SystemClock_Config+0x150>)
 8008e52:	f000 fe29 	bl	8009aa8 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008e56:	f7fb fa3f 	bl	80042d8 <HAL_PWREx_EnableOverDrive>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d004      	beq.n	8008e6a <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008e60:	f240 1151 	movw	r1, #337	; 0x151
 8008e64:	482e      	ldr	r0, [pc, #184]	; (8008f20 <SystemClock_Config+0x150>)
 8008e66:	f000 fe1f 	bl	8009aa8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e6a:	230f      	movs	r3, #15
 8008e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e70:	2302      	movs	r3, #2
 8008e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008e76:	2300      	movs	r3, #0
 8008e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008e7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8008e8c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008e90:	2106      	movs	r1, #6
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fb fce0 	bl	8004858 <HAL_RCC_ClockConfig>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008e9e:	f240 115f 	movw	r1, #351	; 0x15f
 8008ea2:	481f      	ldr	r0, [pc, #124]	; (8008f20 <SystemClock_Config+0x150>)
 8008ea4:	f000 fe00 	bl	8009aa8 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8008ea8:	4b1e      	ldr	r3, [pc, #120]	; (8008f24 <SystemClock_Config+0x154>)
 8008eaa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8008eac:	23c0      	movs	r3, #192	; 0xc0
 8008eae:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8008eb0:	2305      	movs	r3, #5
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ece:	f107 0308 	add.w	r3, r7, #8
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fb fec4 	bl	8004c60 <HAL_RCCEx_PeriphCLKConfig>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <SystemClock_Config+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008ede:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8008ee2:	480f      	ldr	r0, [pc, #60]	; (8008f20 <SystemClock_Config+0x150>)
 8008ee4:	f000 fde0 	bl	8009aa8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008ee8:	f7fb fe54 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8008eec:	4602      	mov	r2, r0
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <SystemClock_Config+0x158>)
 8008ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ef4:	099b      	lsrs	r3, r3, #6
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f8 fc29 	bl	800174e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008efc:	2004      	movs	r0, #4
 8008efe:	f7f8 fc33 	bl	8001768 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008f02:	2200      	movs	r2, #0
 8008f04:	2100      	movs	r1, #0
 8008f06:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0a:	f7f8 fbf6 	bl	80016fa <HAL_NVIC_SetPriority>
}
 8008f0e:	bf00      	nop
 8008f10:	37d0      	adds	r7, #208	; 0xd0
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	40007000 	.word	0x40007000
 8008f20:	0800bd70 	.word	0x0800bd70
 8008f24:	00010048 	.word	0x00010048
 8008f28:	10624dd3 	.word	0x10624dd3

08008f2c <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 8008f32:	4b23      	ldr	r3, [pc, #140]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f34:	4a23      	ldr	r2, [pc, #140]	; (8008fc4 <MX_ADC3_Init+0x98>)
 8008f36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008f38:	4b21      	ldr	r3, [pc, #132]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008f3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8008f40:	4b1f      	ldr	r3, [pc, #124]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8008f46:	4b1e      	ldr	r3, [pc, #120]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008f4c:	4b1c      	ldr	r3, [pc, #112]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8008f52:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008f58:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008f5e:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f60:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <MX_ADC3_Init+0x9c>)
 8008f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008f64:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8008f6a:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8008f70:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008f7c:	4810      	ldr	r0, [pc, #64]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008f7e:	f7f8 f875 	bl	800106c <HAL_ADC_Init>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <MX_ADC3_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008f88:	f240 1193 	movw	r1, #403	; 0x193
 8008f8c:	480f      	ldr	r0, [pc, #60]	; (8008fcc <MX_ADC3_Init+0xa0>)
 8008f8e:	f000 fd8b 	bl	8009aa8 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008f96:	2301      	movs	r3, #1
 8008f98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4807      	ldr	r0, [pc, #28]	; (8008fc0 <MX_ADC3_Init+0x94>)
 8008fa4:	f7f8 f8a6 	bl	80010f4 <HAL_ADC_ConfigChannel>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d004      	beq.n	8008fb8 <MX_ADC3_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008fae:	f240 119d 	movw	r1, #413	; 0x19d
 8008fb2:	4806      	ldr	r0, [pc, #24]	; (8008fcc <MX_ADC3_Init+0xa0>)
 8008fb4:	f000 fd78 	bl	8009aa8 <_Error_Handler>
  }

}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000a40 	.word	0x20000a40
 8008fc4:	40012200 	.word	0x40012200
 8008fc8:	0f000001 	.word	0x0f000001
 8008fcc:	0800bd70 	.word	0x0800bd70

08008fd0 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8008fd4:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <MX_CRC_Init+0x44>)
 8008fd6:	4a10      	ldr	r2, [pc, #64]	; (8009018 <MX_CRC_Init+0x48>)
 8008fd8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008fda:	4b0e      	ldr	r3, [pc, #56]	; (8009014 <MX_CRC_Init+0x44>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008fe0:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <MX_CRC_Init+0x44>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <MX_CRC_Init+0x44>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008fec:	4b09      	ldr	r3, [pc, #36]	; (8009014 <MX_CRC_Init+0x44>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <MX_CRC_Init+0x44>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008ff8:	4806      	ldr	r0, [pc, #24]	; (8009014 <MX_CRC_Init+0x44>)
 8008ffa:	f7f8 fbdf 	bl	80017bc <HAL_CRC_Init>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d004      	beq.n	800900e <MX_CRC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009004:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009008:	4804      	ldr	r0, [pc, #16]	; (800901c <MX_CRC_Init+0x4c>)
 800900a:	f000 fd4d 	bl	8009aa8 <_Error_Handler>
  }

}
 800900e:	bf00      	nop
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000974 	.word	0x20000974
 8009018:	40023000 	.word	0x40023000
 800901c:	0800bd70 	.word	0x0800bd70

08009020 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8009024:	4b18      	ldr	r3, [pc, #96]	; (8009088 <MX_DMA2D_Init+0x68>)
 8009026:	4a19      	ldr	r2, [pc, #100]	; (800908c <MX_DMA2D_Init+0x6c>)
 8009028:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800902a:	4b17      	ldr	r3, [pc, #92]	; (8009088 <MX_DMA2D_Init+0x68>)
 800902c:	2200      	movs	r2, #0
 800902e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009030:	4b15      	ldr	r3, [pc, #84]	; (8009088 <MX_DMA2D_Init+0x68>)
 8009032:	2200      	movs	r2, #0
 8009034:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <MX_DMA2D_Init+0x68>)
 8009038:	2200      	movs	r2, #0
 800903a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800903c:	4b12      	ldr	r3, [pc, #72]	; (8009088 <MX_DMA2D_Init+0x68>)
 800903e:	2200      	movs	r2, #0
 8009040:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009042:	4b11      	ldr	r3, [pc, #68]	; (8009088 <MX_DMA2D_Init+0x68>)
 8009044:	2200      	movs	r2, #0
 8009046:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009048:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <MX_DMA2D_Init+0x68>)
 800904a:	2200      	movs	r2, #0
 800904c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800904e:	4b0e      	ldr	r3, [pc, #56]	; (8009088 <MX_DMA2D_Init+0x68>)
 8009050:	2200      	movs	r2, #0
 8009052:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009054:	480c      	ldr	r0, [pc, #48]	; (8009088 <MX_DMA2D_Init+0x68>)
 8009056:	f7f8 ff77 	bl	8001f48 <HAL_DMA2D_Init>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <MX_DMA2D_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009060:	f240 11c1 	movw	r1, #449	; 0x1c1
 8009064:	480a      	ldr	r0, [pc, #40]	; (8009090 <MX_DMA2D_Init+0x70>)
 8009066:	f000 fd1f 	bl	8009aa8 <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800906a:	2101      	movs	r1, #1
 800906c:	4806      	ldr	r0, [pc, #24]	; (8009088 <MX_DMA2D_Init+0x68>)
 800906e:	f7f9 f8c9 	bl	8002204 <HAL_DMA2D_ConfigLayer>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <MX_DMA2D_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009078:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800907c:	4804      	ldr	r0, [pc, #16]	; (8009090 <MX_DMA2D_Init+0x70>)
 800907e:	f000 fd13 	bl	8009aa8 <_Error_Handler>
  }

}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000af8 	.word	0x20000af8
 800908c:	4002b000 	.word	0x4002b000
 8009090:	0800bd70 	.word	0x0800bd70

08009094 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8009098:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <MX_I2C3_Init+0x84>)
 800909a:	4a20      	ldr	r2, [pc, #128]	; (800911c <MX_I2C3_Init+0x88>)
 800909c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800909e:	4b1e      	ldr	r3, [pc, #120]	; (8009118 <MX_I2C3_Init+0x84>)
 80090a0:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <MX_I2C3_Init+0x8c>)
 80090a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 80090a4:	4b1c      	ldr	r3, [pc, #112]	; (8009118 <MX_I2C3_Init+0x84>)
 80090a6:	22e0      	movs	r2, #224	; 0xe0
 80090a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80090aa:	4b1b      	ldr	r3, [pc, #108]	; (8009118 <MX_I2C3_Init+0x84>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80090b0:	4b19      	ldr	r3, [pc, #100]	; (8009118 <MX_I2C3_Init+0x84>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80090b6:	4b18      	ldr	r3, [pc, #96]	; (8009118 <MX_I2C3_Init+0x84>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80090bc:	4b16      	ldr	r3, [pc, #88]	; (8009118 <MX_I2C3_Init+0x84>)
 80090be:	2200      	movs	r2, #0
 80090c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80090c2:	4b15      	ldr	r3, [pc, #84]	; (8009118 <MX_I2C3_Init+0x84>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80090c8:	4b13      	ldr	r3, [pc, #76]	; (8009118 <MX_I2C3_Init+0x84>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80090ce:	4812      	ldr	r0, [pc, #72]	; (8009118 <MX_I2C3_Init+0x84>)
 80090d0:	f7f9 fb96 	bl	8002800 <HAL_I2C_Init>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d004      	beq.n	80090e4 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 80090da:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80090de:	4811      	ldr	r0, [pc, #68]	; (8009124 <MX_I2C3_Init+0x90>)
 80090e0:	f000 fce2 	bl	8009aa8 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80090e4:	2100      	movs	r1, #0
 80090e6:	480c      	ldr	r0, [pc, #48]	; (8009118 <MX_I2C3_Init+0x84>)
 80090e8:	f7f9 fc18 	bl	800291c <HAL_I2CEx_ConfigAnalogFilter>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d004      	beq.n	80090fc <MX_I2C3_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80090f2:	f240 11e1 	movw	r1, #481	; 0x1e1
 80090f6:	480b      	ldr	r0, [pc, #44]	; (8009124 <MX_I2C3_Init+0x90>)
 80090f8:	f000 fcd6 	bl	8009aa8 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80090fc:	2100      	movs	r1, #0
 80090fe:	4806      	ldr	r0, [pc, #24]	; (8009118 <MX_I2C3_Init+0x84>)
 8009100:	f7f9 fc57 	bl	80029b2 <HAL_I2CEx_ConfigDigitalFilter>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d004      	beq.n	8009114 <MX_I2C3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 800910a:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800910e:	4805      	ldr	r0, [pc, #20]	; (8009124 <MX_I2C3_Init+0x90>)
 8009110:	f000 fcca 	bl	8009aa8 <_Error_Handler>
  }

}
 8009114:	bf00      	nop
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000868 	.word	0x20000868
 800911c:	40005c00 	.word	0x40005c00
 8009120:	00c0eaff 	.word	0x00c0eaff
 8009124:	0800bd70 	.word	0x0800bd70

08009128 <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08e      	sub	sp, #56	; 0x38
 800912c:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg;

  hltdc.Instance = LTDC;
 800912e:	4b3c      	ldr	r3, [pc, #240]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009130:	4a3c      	ldr	r2, [pc, #240]	; (8009224 <MX_LTDC_Init+0xfc>)
 8009132:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009134:	4b3a      	ldr	r3, [pc, #232]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800913a:	4b39      	ldr	r3, [pc, #228]	; (8009220 <MX_LTDC_Init+0xf8>)
 800913c:	2200      	movs	r2, #0
 800913e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009140:	4b37      	ldr	r3, [pc, #220]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009142:	2200      	movs	r2, #0
 8009144:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009146:	4b36      	ldr	r3, [pc, #216]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009148:	2200      	movs	r2, #0
 800914a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800914c:	4b34      	ldr	r3, [pc, #208]	; (8009220 <MX_LTDC_Init+0xf8>)
 800914e:	2228      	movs	r2, #40	; 0x28
 8009150:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8009152:	4b33      	ldr	r3, [pc, #204]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009154:	2209      	movs	r2, #9
 8009156:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8009158:	4b31      	ldr	r3, [pc, #196]	; (8009220 <MX_LTDC_Init+0xf8>)
 800915a:	2235      	movs	r2, #53	; 0x35
 800915c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800915e:	4b30      	ldr	r3, [pc, #192]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009160:	220b      	movs	r2, #11
 8009162:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8009164:	4b2e      	ldr	r3, [pc, #184]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009166:	f240 2215 	movw	r2, #533	; 0x215
 800916a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800916c:	4b2c      	ldr	r3, [pc, #176]	; (8009220 <MX_LTDC_Init+0xf8>)
 800916e:	f240 121b 	movw	r2, #283	; 0x11b
 8009172:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8009174:	4b2a      	ldr	r3, [pc, #168]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009176:	f240 2235 	movw	r2, #565	; 0x235
 800917a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800917c:	4b28      	ldr	r3, [pc, #160]	; (8009220 <MX_LTDC_Init+0xf8>)
 800917e:	f240 121d 	movw	r2, #285	; 0x11d
 8009182:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8009184:	4b26      	ldr	r3, [pc, #152]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800918c:	4b24      	ldr	r3, [pc, #144]	; (8009220 <MX_LTDC_Init+0xf8>)
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8009194:	4b22      	ldr	r3, [pc, #136]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800919c:	4820      	ldr	r0, [pc, #128]	; (8009220 <MX_LTDC_Init+0xf8>)
 800919e:	f7f9 fc57 	bl	8002a50 <HAL_LTDC_Init>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <MX_LTDC_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80091a8:	f240 2105 	movw	r1, #517	; 0x205
 80091ac:	481e      	ldr	r0, [pc, #120]	; (8009228 <MX_LTDC_Init+0x100>)
 80091ae:	f000 fc7b 	bl	8009aa8 <_Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80091b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80091ba:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80091c0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091c4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80091ca:	23ff      	movs	r3, #255	; 0xff
 80091cc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80091d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80091d8:	2305      	movs	r3, #5
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = LCD_FB_START_ADDRESS;
 80091dc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80091e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80091fc:	1d3b      	adds	r3, r7, #4
 80091fe:	2200      	movs	r2, #0
 8009200:	4619      	mov	r1, r3
 8009202:	4807      	ldr	r0, [pc, #28]	; (8009220 <MX_LTDC_Init+0xf8>)
 8009204:	f7f9 fd00 	bl	8002c08 <HAL_LTDC_ConfigLayer>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <MX_LTDC_Init+0xf0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800920e:	f240 2119 	movw	r1, #537	; 0x219
 8009212:	4805      	ldr	r0, [pc, #20]	; (8009228 <MX_LTDC_Init+0x100>)
 8009214:	f000 fc48 	bl	8009aa8 <_Error_Handler>
  }

}
 8009218:	bf00      	nop
 800921a:	3738      	adds	r7, #56	; 0x38
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20000998 	.word	0x20000998
 8009224:	40016800 	.word	0x40016800
 8009228:	0800bd70 	.word	0x0800bd70

0800922c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009230:	4b15      	ldr	r3, [pc, #84]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009232:	4a16      	ldr	r2, [pc, #88]	; (800928c <MX_USART1_UART_Init+0x60>)
 8009234:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009236:	4b14      	ldr	r3, [pc, #80]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800923c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800923e:	4b12      	ldr	r3, [pc, #72]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009240:	2200      	movs	r2, #0
 8009242:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009244:	4b10      	ldr	r3, [pc, #64]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009246:	2200      	movs	r2, #0
 8009248:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800924a:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 800924c:	2200      	movs	r2, #0
 800924e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009250:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009252:	220c      	movs	r2, #12
 8009254:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009258:	2200      	movs	r2, #0
 800925a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 800925e:	2200      	movs	r2, #0
 8009260:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009264:	2200      	movs	r2, #0
 8009266:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009268:	4b07      	ldr	r3, [pc, #28]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 800926a:	2200      	movs	r2, #0
 800926c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800926e:	4806      	ldr	r0, [pc, #24]	; (8009288 <MX_USART1_UART_Init+0x5c>)
 8009270:	f7fc fb9e 	bl	80059b0 <HAL_UART_Init>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800927a:	f240 212e 	movw	r1, #558	; 0x22e
 800927e:	4804      	ldr	r0, [pc, #16]	; (8009290 <MX_USART1_UART_Init+0x64>)
 8009280:	f000 fc12 	bl	8009aa8 <_Error_Handler>
  }

}
 8009284:	bf00      	nop
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000a88 	.word	0x20000a88
 800928c:	40011000 	.word	0x40011000
 8009290:	0800bd70 	.word	0x0800bd70

08009294 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void) 
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800929a:	4a30      	ldr	r2, [pc, #192]	; (800935c <MX_DMA_Init+0xc8>)
 800929c:	4b2f      	ldr	r3, [pc, #188]	; (800935c <MX_DMA_Init+0xc8>)
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092a4:	6313      	str	r3, [r2, #48]	; 0x30
 80092a6:	4b2d      	ldr	r3, [pc, #180]	; (800935c <MX_DMA_Init+0xc8>)
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80092b2:	4a2a      	ldr	r2, [pc, #168]	; (800935c <MX_DMA_Init+0xc8>)
 80092b4:	4b29      	ldr	r3, [pc, #164]	; (800935c <MX_DMA_Init+0xc8>)
 80092b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092bc:	6313      	str	r3, [r2, #48]	; 0x30
 80092be:	4b27      	ldr	r3, [pc, #156]	; (800935c <MX_DMA_Init+0xc8>)
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80092ca:	4b25      	ldr	r3, [pc, #148]	; (8009360 <MX_DMA_Init+0xcc>)
 80092cc:	4a25      	ldr	r2, [pc, #148]	; (8009364 <MX_DMA_Init+0xd0>)
 80092ce:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80092d0:	4b23      	ldr	r3, [pc, #140]	; (8009360 <MX_DMA_Init+0xcc>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80092d6:	4b22      	ldr	r3, [pc, #136]	; (8009360 <MX_DMA_Init+0xcc>)
 80092d8:	2280      	movs	r2, #128	; 0x80
 80092da:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80092dc:	4b20      	ldr	r3, [pc, #128]	; (8009360 <MX_DMA_Init+0xcc>)
 80092de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092e2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80092e4:	4b1e      	ldr	r3, [pc, #120]	; (8009360 <MX_DMA_Init+0xcc>)
 80092e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092ea:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80092ec:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <MX_DMA_Init+0xcc>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80092f2:	4b1b      	ldr	r3, [pc, #108]	; (8009360 <MX_DMA_Init+0xcc>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80092f8:	4b19      	ldr	r3, [pc, #100]	; (8009360 <MX_DMA_Init+0xcc>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80092fe:	4b18      	ldr	r3, [pc, #96]	; (8009360 <MX_DMA_Init+0xcc>)
 8009300:	2200      	movs	r2, #0
 8009302:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8009304:	4b16      	ldr	r3, [pc, #88]	; (8009360 <MX_DMA_Init+0xcc>)
 8009306:	2204      	movs	r2, #4
 8009308:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800930a:	4b15      	ldr	r3, [pc, #84]	; (8009360 <MX_DMA_Init+0xcc>)
 800930c:	2203      	movs	r2, #3
 800930e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8009310:	4b13      	ldr	r3, [pc, #76]	; (8009360 <MX_DMA_Init+0xcc>)
 8009312:	2200      	movs	r2, #0
 8009314:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8009316:	4b12      	ldr	r3, [pc, #72]	; (8009360 <MX_DMA_Init+0xcc>)
 8009318:	2200      	movs	r2, #0
 800931a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800931c:	4810      	ldr	r0, [pc, #64]	; (8009360 <MX_DMA_Init+0xcc>)
 800931e:	f7f8 fb2b 	bl	8001978 <HAL_DMA_Init>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <MX_DMA_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009328:	f240 214e 	movw	r1, #590	; 0x24e
 800932c:	480e      	ldr	r0, [pc, #56]	; (8009368 <MX_DMA_Init+0xd4>)
 800932e:	f000 fbbb 	bl	8009aa8 <_Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8009332:	2200      	movs	r2, #0
 8009334:	2100      	movs	r1, #0
 8009336:	200c      	movs	r0, #12
 8009338:	f7f8 f9df 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800933c:	200c      	movs	r0, #12
 800933e:	f7f8 f9f8 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8009342:	2200      	movs	r2, #0
 8009344:	2100      	movs	r1, #0
 8009346:	200f      	movs	r0, #15
 8009348:	f7f8 f9d7 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800934c:	200f      	movs	r0, #15
 800934e:	f7f8 f9f0 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	20000914 	.word	0x20000914
 8009364:	40026410 	.word	0x40026410
 8009368:	0800bd70 	.word	0x0800bd70

0800936c <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009372:	4b21      	ldr	r3, [pc, #132]	; (80093f8 <MX_FMC_Init+0x8c>)
 8009374:	4a21      	ldr	r2, [pc, #132]	; (80093fc <MX_FMC_Init+0x90>)
 8009376:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8009378:	4b1f      	ldr	r3, [pc, #124]	; (80093f8 <MX_FMC_Init+0x8c>)
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800937e:	4b1e      	ldr	r3, [pc, #120]	; (80093f8 <MX_FMC_Init+0x8c>)
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8009384:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <MX_FMC_Init+0x8c>)
 8009386:	2204      	movs	r2, #4
 8009388:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800938a:	4b1b      	ldr	r3, [pc, #108]	; (80093f8 <MX_FMC_Init+0x8c>)
 800938c:	2210      	movs	r2, #16
 800938e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009390:	4b19      	ldr	r3, [pc, #100]	; (80093f8 <MX_FMC_Init+0x8c>)
 8009392:	2240      	movs	r2, #64	; 0x40
 8009394:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8009396:	4b18      	ldr	r3, [pc, #96]	; (80093f8 <MX_FMC_Init+0x8c>)
 8009398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800939c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800939e:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <MX_FMC_Init+0x8c>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80093a4:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <MX_FMC_Init+0x8c>)
 80093a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093aa:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80093ac:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <MX_FMC_Init+0x8c>)
 80093ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80093b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80093b4:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <MX_FMC_Init+0x8c>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80093ba:	2302      	movs	r3, #2
 80093bc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80093be:	2307      	movs	r3, #7
 80093c0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80093c2:	2304      	movs	r3, #4
 80093c4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80093c6:	2306      	movs	r3, #6
 80093c8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80093ca:	2302      	movs	r3, #2
 80093cc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80093ce:	2302      	movs	r3, #2
 80093d0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80093d2:	2302      	movs	r3, #2
 80093d4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	4619      	mov	r1, r3
 80093da:	4807      	ldr	r0, [pc, #28]	; (80093f8 <MX_FMC_Init+0x8c>)
 80093dc:	f7fc f82e 	bl	800543c <HAL_SDRAM_Init>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d004      	beq.n	80093f0 <MX_FMC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80093e6:	f44f 711e 	mov.w	r1, #632	; 0x278
 80093ea:	4805      	ldr	r0, [pc, #20]	; (8009400 <MX_FMC_Init+0x94>)
 80093ec:	f000 fb5c 	bl	8009aa8 <_Error_Handler>
  }

}
 80093f0:	bf00      	nop
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000b38 	.word	0x20000b38
 80093fc:	a0000140 	.word	0xa0000140
 8009400:	0800bd70 	.word	0x0800bd70

08009404 <MX_GPIO_Init>:
     PA7   ------> ETH_CRS_DV
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b090      	sub	sp, #64	; 0x40
 8009408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800940a:	4aae      	ldr	r2, [pc, #696]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800940c:	4bad      	ldr	r3, [pc, #692]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	f043 0310 	orr.w	r3, r3, #16
 8009414:	6313      	str	r3, [r2, #48]	; 0x30
 8009416:	4bab      	ldr	r3, [pc, #684]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009422:	4aa8      	ldr	r2, [pc, #672]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009424:	4ba7      	ldr	r3, [pc, #668]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800942c:	6313      	str	r3, [r2, #48]	; 0x30
 800942e:	4ba5      	ldr	r3, [pc, #660]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	627b      	str	r3, [r7, #36]	; 0x24
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800943a:	4aa2      	ldr	r2, [pc, #648]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800943c:	4ba1      	ldr	r3, [pc, #644]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800943e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009440:	f043 0302 	orr.w	r3, r3, #2
 8009444:	6313      	str	r3, [r2, #48]	; 0x30
 8009446:	4b9f      	ldr	r3, [pc, #636]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	623b      	str	r3, [r7, #32]
 8009450:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009452:	4a9c      	ldr	r2, [pc, #624]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009454:	4b9b      	ldr	r3, [pc, #620]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009458:	f043 0308 	orr.w	r3, r3, #8
 800945c:	6313      	str	r3, [r2, #48]	; 0x30
 800945e:	4b99      	ldr	r3, [pc, #612]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800946a:	4a96      	ldr	r2, [pc, #600]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800946c:	4b95      	ldr	r3, [pc, #596]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800946e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009470:	f043 0304 	orr.w	r3, r3, #4
 8009474:	6313      	str	r3, [r2, #48]	; 0x30
 8009476:	4b93      	ldr	r3, [pc, #588]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	f003 0304 	and.w	r3, r3, #4
 800947e:	61bb      	str	r3, [r7, #24]
 8009480:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009482:	4a90      	ldr	r2, [pc, #576]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009484:	4b8f      	ldr	r3, [pc, #572]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	6313      	str	r3, [r2, #48]	; 0x30
 800948e:	4b8d      	ldr	r3, [pc, #564]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800949a:	4a8a      	ldr	r2, [pc, #552]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800949c:	4b89      	ldr	r3, [pc, #548]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094a4:	6313      	str	r3, [r2, #48]	; 0x30
 80094a6:	4b87      	ldr	r3, [pc, #540]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094ae:	613b      	str	r3, [r7, #16]
 80094b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80094b2:	4a84      	ldr	r2, [pc, #528]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094b4:	4b83      	ldr	r3, [pc, #524]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094bc:	6313      	str	r3, [r2, #48]	; 0x30
 80094be:	4b81      	ldr	r3, [pc, #516]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80094ca:	4a7e      	ldr	r2, [pc, #504]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094cc:	4b7d      	ldr	r3, [pc, #500]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094d4:	6313      	str	r3, [r2, #48]	; 0x30
 80094d6:	4b7b      	ldr	r3, [pc, #492]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094de:	60bb      	str	r3, [r7, #8]
 80094e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80094e2:	4a78      	ldr	r2, [pc, #480]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094e4:	4b77      	ldr	r3, [pc, #476]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e8:	f043 0320 	orr.w	r3, r3, #32
 80094ec:	6313      	str	r3, [r2, #48]	; 0x30
 80094ee:	4b75      	ldr	r3, [pc, #468]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	f003 0320 	and.w	r3, r3, #32
 80094f6:	607b      	str	r3, [r7, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80094fa:	4a72      	ldr	r2, [pc, #456]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094fc:	4b71      	ldr	r3, [pc, #452]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009504:	6313      	str	r3, [r2, #48]	; 0x30
 8009506:	4b6f      	ldr	r3, [pc, #444]	; (80096c4 <MX_GPIO_Init+0x2c0>)
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8009512:	2201      	movs	r2, #1
 8009514:	2120      	movs	r1, #32
 8009516:	486c      	ldr	r0, [pc, #432]	; (80096c8 <MX_GPIO_Init+0x2c4>)
 8009518:	f7f9 f958 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800951c:	2200      	movs	r2, #0
 800951e:	f241 010c 	movw	r1, #4108	; 0x100c
 8009522:	486a      	ldr	r0, [pc, #424]	; (80096cc <MX_GPIO_Init+0x2c8>)
 8009524:	f7f9 f952 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8009528:	2200      	movs	r2, #0
 800952a:	2108      	movs	r1, #8
 800952c:	4868      	ldr	r0, [pc, #416]	; (80096d0 <MX_GPIO_Init+0x2cc>)
 800952e:	f7f9 f94d 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8009532:	2200      	movs	r2, #0
 8009534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009538:	4866      	ldr	r0, [pc, #408]	; (80096d4 <MX_GPIO_Init+0x2d0>)
 800953a:	f7f9 f947 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800953e:	2200      	movs	r2, #0
 8009540:	21c8      	movs	r1, #200	; 0xc8
 8009542:	4865      	ldr	r0, [pc, #404]	; (80096d8 <MX_GPIO_Init+0x2d4>)
 8009544:	f7f9 f942 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8009548:	2308      	movs	r3, #8
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800954c:	2300      	movs	r3, #0
 800954e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009550:	2300      	movs	r3, #0
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009558:	4619      	mov	r1, r3
 800955a:	4860      	ldr	r0, [pc, #384]	; (80096dc <MX_GPIO_Init+0x2d8>)
 800955c:	f7f8 ff8c 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8009560:	2304      	movs	r3, #4
 8009562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009564:	2302      	movs	r3, #2
 8009566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009568:	2300      	movs	r3, #0
 800956a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800956c:	2303      	movs	r3, #3
 800956e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009570:	2309      	movs	r3, #9
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8009574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009578:	4619      	mov	r1, r3
 800957a:	4858      	ldr	r0, [pc, #352]	; (80096dc <MX_GPIO_Init+0x2d8>)
 800957c:	f7f8 ff7c 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8009580:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009586:	2302      	movs	r3, #2
 8009588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800958a:	2300      	movs	r3, #0
 800958c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800958e:	2303      	movs	r3, #3
 8009590:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009592:	230b      	movs	r3, #11
 8009594:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800959a:	4619      	mov	r1, r3
 800959c:	484e      	ldr	r0, [pc, #312]	; (80096d8 <MX_GPIO_Init+0x2d4>)
 800959e:	f7f8 ff6b 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80095a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80095a8:	2312      	movs	r3, #18
 80095aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80095ac:	2301      	movs	r3, #1
 80095ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095b0:	2300      	movs	r3, #0
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80095b4:	2304      	movs	r3, #4
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095bc:	4619      	mov	r1, r3
 80095be:	4848      	ldr	r0, [pc, #288]	; (80096e0 <MX_GPIO_Init+0x2dc>)
 80095c0:	f7f8 ff5a 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80095c4:	2310      	movs	r3, #16
 80095c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c8:	2302      	movs	r3, #2
 80095ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095cc:	2300      	movs	r3, #0
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095d0:	2300      	movs	r3, #0
 80095d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80095d4:	2302      	movs	r3, #2
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80095d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095dc:	4619      	mov	r1, r3
 80095de:	4840      	ldr	r0, [pc, #256]	; (80096e0 <MX_GPIO_Init+0x2dc>)
 80095e0:	f7f8 ff4a 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80095e4:	2380      	movs	r3, #128	; 0x80
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095e8:	2302      	movs	r3, #2
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ec:	2300      	movs	r3, #0
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095f0:	2300      	movs	r3, #0
 80095f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80095f4:	2308      	movs	r3, #8
 80095f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80095f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095fc:	4619      	mov	r1, r3
 80095fe:	4832      	ldr	r0, [pc, #200]	; (80096c8 <MX_GPIO_Init+0x2c4>)
 8009600:	f7f8 ff3a 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8009604:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8009608:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800960a:	2302      	movs	r3, #2
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960e:	2300      	movs	r3, #0
 8009610:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009612:	2303      	movs	r3, #3
 8009614:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009616:	230c      	movs	r3, #12
 8009618:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800961a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800961e:	4619      	mov	r1, r3
 8009620:	4830      	ldr	r0, [pc, #192]	; (80096e4 <MX_GPIO_Init+0x2e0>)
 8009622:	f7f8 ff29 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8009626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800962a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800962c:	2302      	movs	r3, #2
 800962e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009630:	2300      	movs	r3, #0
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009634:	2300      	movs	r3, #0
 8009636:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009638:	2301      	movs	r3, #1
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800963c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009640:	4619      	mov	r1, r3
 8009642:	4829      	ldr	r0, [pc, #164]	; (80096e8 <MX_GPIO_Init+0x2e4>)
 8009644:	f7f8 ff18 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8009648:	2360      	movs	r3, #96	; 0x60
 800964a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800964c:	2302      	movs	r3, #2
 800964e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009650:	2300      	movs	r3, #0
 8009652:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009654:	2300      	movs	r3, #0
 8009656:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009658:	230d      	movs	r3, #13
 800965a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800965c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009660:	4619      	mov	r1, r3
 8009662:	481e      	ldr	r0, [pc, #120]	; (80096dc <MX_GPIO_Init+0x2d8>)
 8009664:	f7f8 ff08 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8009668:	2340      	movs	r3, #64	; 0x40
 800966a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800966c:	2302      	movs	r3, #2
 800966e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009670:	2300      	movs	r3, #0
 8009672:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009674:	2303      	movs	r3, #3
 8009676:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8009678:	230a      	movs	r3, #10
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800967c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009680:	4619      	mov	r1, r3
 8009682:	4817      	ldr	r0, [pc, #92]	; (80096e0 <MX_GPIO_Init+0x2dc>)
 8009684:	f7f8 fef8 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8009688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800968e:	2300      	movs	r3, #0
 8009690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009692:	2300      	movs	r3, #0
 8009694:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800969a:	4619      	mov	r1, r3
 800969c:	4813      	ldr	r0, [pc, #76]	; (80096ec <MX_GPIO_Init+0x2e8>)
 800969e:	f7f8 feeb 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80096a2:	2340      	movs	r3, #64	; 0x40
 80096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80096a6:	4b12      	ldr	r3, [pc, #72]	; (80096f0 <MX_GPIO_Init+0x2ec>)
 80096a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80096ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096b2:	4619      	mov	r1, r3
 80096b4:	4804      	ldr	r0, [pc, #16]	; (80096c8 <MX_GPIO_Init+0x2c4>)
 80096b6:	f7f8 fedf 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80096ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80096be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096c0:	e018      	b.n	80096f4 <MX_GPIO_Init+0x2f0>
 80096c2:	bf00      	nop
 80096c4:	40023800 	.word	0x40023800
 80096c8:	40020c00 	.word	0x40020c00
 80096cc:	40022000 	.word	0x40022000
 80096d0:	40022800 	.word	0x40022800
 80096d4:	40021c00 	.word	0x40021c00
 80096d8:	40021800 	.word	0x40021800
 80096dc:	40021000 	.word	0x40021000
 80096e0:	40020400 	.word	0x40020400
 80096e4:	40020800 	.word	0x40020800
 80096e8:	40020000 	.word	0x40020000
 80096ec:	40022400 	.word	0x40022400
 80096f0:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f4:	2302      	movs	r3, #2
 80096f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f8:	2300      	movs	r3, #0
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096fc:	2303      	movs	r3, #3
 80096fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009700:	230a      	movs	r3, #10
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009708:	4619      	mov	r1, r3
 800970a:	48bb      	ldr	r0, [pc, #748]	; (80099f8 <MX_GPIO_Init+0x5f4>)
 800970c:	f7f8 feb4 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8009710:	23f0      	movs	r3, #240	; 0xf0
 8009712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009714:	2302      	movs	r3, #2
 8009716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009718:	2300      	movs	r3, #0
 800971a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800971c:	2300      	movs	r3, #0
 800971e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009720:	230a      	movs	r3, #10
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009728:	4619      	mov	r1, r3
 800972a:	48b4      	ldr	r0, [pc, #720]	; (80099fc <MX_GPIO_Init+0x5f8>)
 800972c:	f7f8 fea4 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8009730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009736:	2302      	movs	r3, #2
 8009738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973a:	2300      	movs	r3, #0
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800973e:	2300      	movs	r3, #0
 8009740:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009742:	230a      	movs	r3, #10
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8009746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800974a:	4619      	mov	r1, r3
 800974c:	48ac      	ldr	r0, [pc, #688]	; (8009a00 <MX_GPIO_Init+0x5fc>)
 800974e:	f7f8 fe93 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8009752:	2320      	movs	r3, #32
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009756:	2301      	movs	r3, #1
 8009758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800975a:	2300      	movs	r3, #0
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800975e:	2300      	movs	r3, #0
 8009760:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009766:	4619      	mov	r1, r3
 8009768:	48a6      	ldr	r0, [pc, #664]	; (8009a04 <MX_GPIO_Init+0x600>)
 800976a:	f7f8 fe85 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800976e:	2308      	movs	r3, #8
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009772:	2302      	movs	r3, #2
 8009774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009776:	2300      	movs	r3, #0
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800977a:	2300      	movs	r3, #0
 800977c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800977e:	230d      	movs	r3, #13
 8009780:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8009782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009786:	4619      	mov	r1, r3
 8009788:	489e      	ldr	r0, [pc, #632]	; (8009a04 <MX_GPIO_Init+0x600>)
 800978a:	f7f8 fe75 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800978e:	f241 030c 	movw	r3, #4108	; 0x100c
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009794:	2301      	movs	r3, #1
 8009796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009798:	2300      	movs	r3, #0
 800979a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800979c:	2300      	movs	r3, #0
 800979e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80097a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097a4:	4619      	mov	r1, r3
 80097a6:	4895      	ldr	r0, [pc, #596]	; (80099fc <MX_GPIO_Init+0x5f8>)
 80097a8:	f7f8 fe66 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80097ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097b2:	2300      	movs	r3, #0
 80097b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80097ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097be:	4619      	mov	r1, r3
 80097c0:	4891      	ldr	r0, [pc, #580]	; (8009a08 <MX_GPIO_Init+0x604>)
 80097c2:	f7f8 fe59 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80097c6:	2308      	movs	r3, #8
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097ca:	2301      	movs	r3, #1
 80097cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097d2:	2300      	movs	r3, #0
 80097d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80097d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097da:	4619      	mov	r1, r3
 80097dc:	488b      	ldr	r0, [pc, #556]	; (8009a0c <MX_GPIO_Init+0x608>)
 80097de:	f7f8 fe4b 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80097e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e8:	2302      	movs	r3, #2
 80097ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097f0:	2300      	movs	r3, #0
 80097f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80097f4:	230d      	movs	r3, #13
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80097f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097fc:	4619      	mov	r1, r3
 80097fe:	4880      	ldr	r0, [pc, #512]	; (8009a00 <MX_GPIO_Init+0x5fc>)
 8009800:	f7f8 fe3a 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8009804:	2310      	movs	r3, #16
 8009806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009808:	2300      	movs	r3, #0
 800980a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800980c:	2300      	movs	r3, #0
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009814:	4619      	mov	r1, r3
 8009816:	487b      	ldr	r0, [pc, #492]	; (8009a04 <MX_GPIO_Init+0x600>)
 8009818:	f7f8 fe2e 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800981c:	2304      	movs	r3, #4
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009820:	2302      	movs	r3, #2
 8009822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009824:	2300      	movs	r3, #0
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009828:	2303      	movs	r3, #3
 800982a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800982c:	230c      	movs	r3, #12
 800982e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8009830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009834:	4619      	mov	r1, r3
 8009836:	4873      	ldr	r0, [pc, #460]	; (8009a04 <MX_GPIO_Init+0x600>)
 8009838:	f7f8 fe1e 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800983c:	f248 0304 	movw	r3, #32772	; 0x8004
 8009840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009842:	2300      	movs	r3, #0
 8009844:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009846:	2300      	movs	r3, #0
 8009848:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800984a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800984e:	4619      	mov	r1, r3
 8009850:	486f      	ldr	r0, [pc, #444]	; (8009a10 <MX_GPIO_Init+0x60c>)
 8009852:	f7f8 fe11 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8009856:	2302      	movs	r3, #2
 8009858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800985a:	2302      	movs	r3, #2
 800985c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985e:	2300      	movs	r3, #0
 8009860:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009862:	2300      	movs	r3, #0
 8009864:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009866:	2305      	movs	r3, #5
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800986a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800986e:	4619      	mov	r1, r3
 8009870:	4862      	ldr	r0, [pc, #392]	; (80099fc <MX_GPIO_Init+0x5f8>)
 8009872:	f7f8 fe01 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8009876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800987a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800987c:	2301      	movs	r3, #1
 800987e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009880:	2300      	movs	r3, #0
 8009882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009884:	2300      	movs	r3, #0
 8009886:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800988c:	4619      	mov	r1, r3
 800988e:	4860      	ldr	r0, [pc, #384]	; (8009a10 <MX_GPIO_Init+0x60c>)
 8009890:	f7f8 fdf2 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8009894:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800989a:	2302      	movs	r3, #2
 800989c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098a2:	2300      	movs	r3, #0
 80098a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80098a6:	230d      	movs	r3, #13
 80098a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80098aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098ae:	4619      	mov	r1, r3
 80098b0:	4857      	ldr	r0, [pc, #348]	; (8009a10 <MX_GPIO_Init+0x60c>)
 80098b2:	f7f8 fde1 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 80098b6:	2301      	movs	r3, #1
 80098b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ba:	2302      	movs	r3, #2
 80098bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80098c6:	2302      	movs	r3, #2
 80098c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 80098ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098ce:	4619      	mov	r1, r3
 80098d0:	484a      	ldr	r0, [pc, #296]	; (80099fc <MX_GPIO_Init+0x5f8>)
 80098d2:	f7f8 fdd1 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 80098d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098dc:	2302      	movs	r3, #2
 80098de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098e4:	2300      	movs	r3, #0
 80098e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80098e8:	2301      	movs	r3, #1
 80098ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 80098ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098f0:	4619      	mov	r1, r3
 80098f2:	4841      	ldr	r0, [pc, #260]	; (80099f8 <MX_GPIO_Init+0x5f4>)
 80098f4:	f7f8 fdc0 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80098f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80098fe:	4b45      	ldr	r3, [pc, #276]	; (8009a14 <MX_GPIO_Init+0x610>)
 8009900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009902:	2300      	movs	r3, #0
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8009906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800990a:	4619      	mov	r1, r3
 800990c:	483b      	ldr	r0, [pc, #236]	; (80099fc <MX_GPIO_Init+0x5f8>)
 800990e:	f7f8 fdb3 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8009912:	23c0      	movs	r3, #192	; 0xc0
 8009914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009916:	2302      	movs	r3, #2
 8009918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800991a:	2300      	movs	r3, #0
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800991e:	2303      	movs	r3, #3
 8009920:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009922:	2308      	movs	r3, #8
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800992a:	4619      	mov	r1, r3
 800992c:	4836      	ldr	r0, [pc, #216]	; (8009a08 <MX_GPIO_Init+0x604>)
 800992e:	f7f8 fda3 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8009932:	23c8      	movs	r3, #200	; 0xc8
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009936:	2301      	movs	r3, #1
 8009938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800993a:	2300      	movs	r3, #0
 800993c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800993e:	2300      	movs	r3, #0
 8009940:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009946:	4619      	mov	r1, r3
 8009948:	482d      	ldr	r0, [pc, #180]	; (8009a00 <MX_GPIO_Init+0x5fc>)
 800994a:	f7f8 fd95 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800994e:	2332      	movs	r3, #50	; 0x32
 8009950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009952:	2302      	movs	r3, #2
 8009954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009956:	2300      	movs	r3, #0
 8009958:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800995a:	2303      	movs	r3, #3
 800995c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800995e:	230b      	movs	r3, #11
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009966:	4619      	mov	r1, r3
 8009968:	4827      	ldr	r0, [pc, #156]	; (8009a08 <MX_GPIO_Init+0x604>)
 800996a:	f7f8 fd85 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800996e:	2304      	movs	r3, #4
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009972:	2302      	movs	r3, #2
 8009974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009976:	2300      	movs	r3, #0
 8009978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800997a:	2303      	movs	r3, #3
 800997c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800997e:	2309      	movs	r3, #9
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009986:	4619      	mov	r1, r3
 8009988:	4823      	ldr	r0, [pc, #140]	; (8009a18 <MX_GPIO_Init+0x614>)
 800998a:	f7f8 fd75 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800998e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009994:	2302      	movs	r3, #2
 8009996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009998:	2300      	movs	r3, #0
 800999a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800999c:	2303      	movs	r3, #3
 800999e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80099a0:	2309      	movs	r3, #9
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80099a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099a8:	4619      	mov	r1, r3
 80099aa:	4816      	ldr	r0, [pc, #88]	; (8009a04 <MX_GPIO_Init+0x600>)
 80099ac:	f7f8 fd64 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80099b0:	2304      	movs	r3, #4
 80099b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80099b4:	2300      	movs	r3, #0
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b8:	2300      	movs	r3, #0
 80099ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80099bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099c0:	4619      	mov	r1, r3
 80099c2:	480f      	ldr	r0, [pc, #60]	; (8009a00 <MX_GPIO_Init+0x5fc>)
 80099c4:	f7f8 fd58 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80099c8:	2386      	movs	r3, #134	; 0x86
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099cc:	2302      	movs	r3, #2
 80099ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099d4:	2303      	movs	r3, #3
 80099d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099d8:	230b      	movs	r3, #11
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099e0:	4619      	mov	r1, r3
 80099e2:	4805      	ldr	r0, [pc, #20]	; (80099f8 <MX_GPIO_Init+0x5f4>)
 80099e4:	f7f8 fd48 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80099e8:	2350      	movs	r3, #80	; 0x50
 80099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ec:	2302      	movs	r3, #2
 80099ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099f4:	2300      	movs	r3, #0
 80099f6:	e011      	b.n	8009a1c <MX_GPIO_Init+0x618>
 80099f8:	40020000 	.word	0x40020000
 80099fc:	40022000 	.word	0x40022000
 8009a00:	40021800 	.word	0x40021800
 8009a04:	40020c00 	.word	0x40020c00
 8009a08:	40020800 	.word	0x40020800
 8009a0c:	40022800 	.word	0x40022800
 8009a10:	40021c00 	.word	0x40021c00
 8009a14:	10120000 	.word	0x10120000
 8009a18:	40020400 	.word	0x40020400
 8009a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009a1e:	230d      	movs	r3, #13
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a26:	4619      	mov	r1, r3
 8009a28:	4813      	ldr	r0, [pc, #76]	; (8009a78 <MX_GPIO_Init+0x674>)
 8009a2a:	f7f8 fd25 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8009a2e:	2340      	movs	r3, #64	; 0x40
 8009a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a32:	2302      	movs	r3, #2
 8009a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a36:	2300      	movs	r3, #0
 8009a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8009a3e:	2309      	movs	r3, #9
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8009a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a46:	4619      	mov	r1, r3
 8009a48:	480c      	ldr	r0, [pc, #48]	; (8009a7c <MX_GPIO_Init+0x678>)
 8009a4a:	f7f8 fd15 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8009a4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a54:	2302      	movs	r3, #2
 8009a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009a60:	2305      	movs	r3, #5
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4805      	ldr	r0, [pc, #20]	; (8009a80 <MX_GPIO_Init+0x67c>)
 8009a6c:	f7f8 fd04 	bl	8002478 <HAL_GPIO_Init>

}
 8009a70:	bf00      	nop
 8009a72:	3740      	adds	r7, #64	; 0x40
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	40020000 	.word	0x40020000
 8009a7c:	40021c00 	.word	0x40021c00
 8009a80:	40020400 	.word	0x40020400

08009a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a04      	ldr	r2, [pc, #16]	; (8009aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d101      	bne.n	8009a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009a96:	f7f7 faa7 	bl	8000fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	40010000 	.word	0x40010000

08009aa8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  printf("Error file = %s Line = %d ", file,line);
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	4802      	ldr	r0, [pc, #8]	; (8009ac0 <_Error_Handler+0x18>)
 8009ab8:	f001 fab2 	bl	800b020 <iprintf>

  while(1)
 8009abc:	e7fe      	b.n	8009abc <_Error_Handler+0x14>
 8009abe:	bf00      	nop
 8009ac0:	0800bd80 	.word	0x0800bd80

08009ac4 <SDRAMDISK_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_initialize(BYTE lun)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009ace:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <SDRAMDISK_initialize+0x38>)
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	701a      	strb	r2, [r3, #0]

  /* Configure the SDRAM device */
  if(BSP_SDRAM_Init() == SDRAM_OK)
 8009ad4:	f7ff f84c 	bl	8008b70 <BSP_SDRAM_Init>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d107      	bne.n	8009aee <SDRAMDISK_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009ade:	4b07      	ldr	r3, [pc, #28]	; (8009afc <SDRAMDISK_initialize+0x38>)
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f023 0301 	bic.w	r3, r3, #1
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	4b04      	ldr	r3, [pc, #16]	; (8009afc <SDRAMDISK_initialize+0x38>)
 8009aec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009aee:	4b03      	ldr	r3, [pc, #12]	; (8009afc <SDRAMDISK_initialize+0x38>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b2db      	uxtb	r3, r3
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	2000011b 	.word	0x2000011b

08009b00 <SDRAMDISK_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	71fb      	strb	r3, [r7, #7]
  return Stat;
 8009b0a:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <SDRAMDISK_status+0x1c>)
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	b2db      	uxtb	r3, r3
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	2000011b 	.word	0x2000011b

08009b20 <SDRAMDISK_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b089      	sub	sp, #36	; 0x24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t *pSrcBuffer = (uint32_t *)buff;
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	61fb      	str	r3, [r7, #28]
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	025b      	lsls	r3, r3, #9
 8009b38:	089b      	lsrs	r3, r3, #2
 8009b3a:	61bb      	str	r3, [r7, #24]
  uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8009b42:	025b      	lsls	r3, r3, #9
 8009b44:	617b      	str	r3, [r7, #20]

  for(; BufferSize != 0; BufferSize--)
 8009b46:	e00a      	b.n	8009b5e <SDRAMDISK_read+0x3e>
  {
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	1d1a      	adds	r2, r3, #4
 8009b4c:	61fa      	str	r2, [r7, #28]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	1d11      	adds	r1, r2, #4
 8009b52:	6179      	str	r1, [r7, #20]
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	601a      	str	r2, [r3, #0]
  for(; BufferSize != 0; BufferSize--)
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	61bb      	str	r3, [r7, #24]
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1f1      	bne.n	8009b48 <SDRAMDISK_read+0x28>
  }

  return RES_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3724      	adds	r7, #36	; 0x24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <SDRAMDISK_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b089      	sub	sp, #36	; 0x24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]
  uint32_t *pDstBuffer = (uint32_t *)buff;
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	61fb      	str	r3, [r7, #28]
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	025b      	lsls	r3, r3, #9
 8009b8a:	089b      	lsrs	r3, r3, #2
 8009b8c:	61bb      	str	r3, [r7, #24]
  uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8009b94:	025b      	lsls	r3, r3, #9
 8009b96:	617b      	str	r3, [r7, #20]

  for(; BufferSize != 0; BufferSize--)
 8009b98:	e00a      	b.n	8009bb0 <SDRAMDISK_write+0x3e>
  {
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	1d1a      	adds	r2, r3, #4
 8009b9e:	617a      	str	r2, [r7, #20]
 8009ba0:	69fa      	ldr	r2, [r7, #28]
 8009ba2:	1d11      	adds	r1, r2, #4
 8009ba4:	61f9      	str	r1, [r7, #28]
 8009ba6:	6812      	ldr	r2, [r2, #0]
 8009ba8:	601a      	str	r2, [r3, #0]
  for(; BufferSize != 0; BufferSize--)
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	61bb      	str	r3, [r7, #24]
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f1      	bne.n	8009b9a <SDRAMDISK_write+0x28>
  }

  return RES_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3724      	adds	r7, #36	; 0x24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <SDRAMDISK_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	603a      	str	r2, [r7, #0]
 8009bce:	71fb      	strb	r3, [r7, #7]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	73fb      	strb	r3, [r7, #15]

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bd8:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <SDRAMDISK_ioctl+0x84>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <SDRAMDISK_ioctl+0x26>
 8009be6:	2303      	movs	r3, #3
 8009be8:	e028      	b.n	8009c3c <SDRAMDISK_ioctl+0x78>

  switch (cmd)
 8009bea:	79bb      	ldrb	r3, [r7, #6]
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d822      	bhi.n	8009c36 <SDRAMDISK_ioctl+0x72>
 8009bf0:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <SDRAMDISK_ioctl+0x34>)
 8009bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf6:	bf00      	nop
 8009bf8:	08009c09 	.word	0x08009c09
 8009bfc:	08009c0f 	.word	0x08009c0f
 8009c00:	08009c1d 	.word	0x08009c1d
 8009c04:	08009c2b 	.word	0x08009c2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c0c:	e015      	b.n	8009c3a <SDRAMDISK_ioctl+0x76>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c14:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1a:	e00e      	b.n	8009c3a <SDRAMDISK_ioctl+0x76>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c22:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
    break;
 8009c28:	e007      	b.n	8009c3a <SDRAMDISK_ioctl+0x76>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = 1;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
    break;
 8009c34:	e001      	b.n	8009c3a <SDRAMDISK_ioctl+0x76>

  default:
    res = RES_PARERR;
 8009c36:	2304      	movs	r3, #4
 8009c38:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	2000011b 	.word	0x2000011b

08009c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c50:	2003      	movs	r0, #3
 8009c52:	f7f7 fd47 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009c56:	2200      	movs	r2, #0
 8009c58:	2100      	movs	r1, #0
 8009c5a:	f06f 000b 	mvn.w	r0, #11
 8009c5e:	f7f7 fd4c 	bl	80016fa <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009c62:	2200      	movs	r2, #0
 8009c64:	2100      	movs	r1, #0
 8009c66:	f06f 000a 	mvn.w	r0, #10
 8009c6a:	f7f7 fd46 	bl	80016fa <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2100      	movs	r1, #0
 8009c72:	f06f 0009 	mvn.w	r0, #9
 8009c76:	f7f7 fd40 	bl	80016fa <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	f06f 0004 	mvn.w	r0, #4
 8009c82:	f7f7 fd3a 	bl	80016fa <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8009c86:	2200      	movs	r2, #0
 8009c88:	2100      	movs	r1, #0
 8009c8a:	f06f 0003 	mvn.w	r0, #3
 8009c8e:	f7f7 fd34 	bl	80016fa <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8009c92:	2200      	movs	r2, #0
 8009c94:	2100      	movs	r1, #0
 8009c96:	f06f 0001 	mvn.w	r0, #1
 8009c9a:	f7f7 fd2e 	bl	80016fa <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca6:	f7f7 fd28 	bl	80016fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009caa:	bf00      	nop
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a15      	ldr	r2, [pc, #84]	; (8009d14 <HAL_ADC_MspInit+0x64>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d124      	bne.n	8009d0c <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <HAL_ADC_MspInit+0x68>)
 8009cc4:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <HAL_ADC_MspInit+0x68>)
 8009cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <HAL_ADC_MspInit+0x68>)
 8009cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd6:	60bb      	str	r3, [r7, #8]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8009cda:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8009cde:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009ce8:	f107 030c 	add.w	r3, r7, #12
 8009cec:	4619      	mov	r1, r3
 8009cee:	480b      	ldr	r0, [pc, #44]	; (8009d1c <HAL_ADC_MspInit+0x6c>)
 8009cf0:	f7f8 fbc2 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8009d00:	f107 030c 	add.w	r3, r7, #12
 8009d04:	4619      	mov	r1, r3
 8009d06:	4806      	ldr	r0, [pc, #24]	; (8009d20 <HAL_ADC_MspInit+0x70>)
 8009d08:	f7f8 fbb6 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8009d0c:	bf00      	nop
 8009d0e:	3720      	adds	r7, #32
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	40012200 	.word	0x40012200
 8009d18:	40023800 	.word	0x40023800
 8009d1c:	40021400 	.word	0x40021400
 8009d20:	40020000 	.word	0x40020000

08009d24 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <HAL_CRC_MspInit+0x38>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d10b      	bne.n	8009d4e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009d36:	4a0a      	ldr	r2, [pc, #40]	; (8009d60 <HAL_CRC_MspInit+0x3c>)
 8009d38:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <HAL_CRC_MspInit+0x3c>)
 8009d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d40:	6313      	str	r3, [r2, #48]	; 0x30
 8009d42:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <HAL_CRC_MspInit+0x3c>)
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009d4e:	bf00      	nop
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	40023000 	.word	0x40023000
 8009d60:	40023800 	.word	0x40023800

08009d64 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <HAL_DMA2D_MspInit+0x38>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d10b      	bne.n	8009d8e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009d76:	4a0a      	ldr	r2, [pc, #40]	; (8009da0 <HAL_DMA2D_MspInit+0x3c>)
 8009d78:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <HAL_DMA2D_MspInit+0x3c>)
 8009d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d80:	6313      	str	r3, [r2, #48]	; 0x30
 8009d82:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <HAL_DMA2D_MspInit+0x3c>)
 8009d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	4002b000 	.word	0x4002b000
 8009da0:	40023800 	.word	0x40023800

08009da4 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b088      	sub	sp, #32
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a42      	ldr	r2, [pc, #264]	; (8009ebc <HAL_I2C_MspInit+0x118>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d17d      	bne.n	8009eb2 <HAL_I2C_MspInit+0x10e>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8009db6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009dba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009dbc:	2312      	movs	r3, #18
 8009dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009dc8:	2304      	movs	r3, #4
 8009dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009dcc:	f107 030c 	add.w	r3, r7, #12
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	483b      	ldr	r0, [pc, #236]	; (8009ec0 <HAL_I2C_MspInit+0x11c>)
 8009dd4:	f7f8 fb50 	bl	8002478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009dd8:	4a3a      	ldr	r2, [pc, #232]	; (8009ec4 <HAL_I2C_MspInit+0x120>)
 8009dda:	4b3a      	ldr	r3, [pc, #232]	; (8009ec4 <HAL_I2C_MspInit+0x120>)
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009de2:	6413      	str	r3, [r2, #64]	; 0x40
 8009de4:	4b37      	ldr	r3, [pc, #220]	; (8009ec4 <HAL_I2C_MspInit+0x120>)
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dec:	60bb      	str	r3, [r7, #8]
 8009dee:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8009df0:	4b35      	ldr	r3, [pc, #212]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009df2:	4a36      	ldr	r2, [pc, #216]	; (8009ecc <HAL_I2C_MspInit+0x128>)
 8009df4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8009df6:	4b34      	ldr	r3, [pc, #208]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dfc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009dfe:	4b32      	ldr	r3, [pc, #200]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e04:	4b30      	ldr	r3, [pc, #192]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e10:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e12:	4b2d      	ldr	r3, [pc, #180]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e18:	4b2b      	ldr	r3, [pc, #172]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8009e1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009e24:	4b28      	ldr	r3, [pc, #160]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e2a:	4b27      	ldr	r3, [pc, #156]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8009e30:	4825      	ldr	r0, [pc, #148]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e32:	f7f7 fda1 	bl	8001978 <HAL_DMA_Init>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d004      	beq.n	8009e46 <HAL_I2C_MspInit+0xa2>
    {
      _Error_Handler(__FILE__, __LINE__);
 8009e3c:	f240 110d 	movw	r1, #269	; 0x10d
 8009e40:	4823      	ldr	r0, [pc, #140]	; (8009ed0 <HAL_I2C_MspInit+0x12c>)
 8009e42:	f7ff fe31 	bl	8009aa8 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a1f      	ldr	r2, [pc, #124]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e4c:	4a1e      	ldr	r2, [pc, #120]	; (8009ec8 <HAL_I2C_MspInit+0x124>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8009e52:	4b20      	ldr	r3, [pc, #128]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e54:	4a20      	ldr	r2, [pc, #128]	; (8009ed8 <HAL_I2C_MspInit+0x134>)
 8009e56:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8009e58:	4b1e      	ldr	r3, [pc, #120]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009e5e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e60:	4b1c      	ldr	r3, [pc, #112]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e62:	2240      	movs	r2, #64	; 0x40
 8009e64:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e66:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 8009e6c:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009e72:	4b18      	ldr	r3, [pc, #96]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009e78:	4b16      	ldr	r3, [pc, #88]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8009e7e:	4b15      	ldr	r3, [pc, #84]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009e84:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8009e90:	4810      	ldr	r0, [pc, #64]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009e92:	f7f7 fd71 	bl	8001978 <HAL_DMA_Init>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d004      	beq.n	8009ea6 <HAL_I2C_MspInit+0x102>
    {
      _Error_Handler(__FILE__, __LINE__);
 8009e9c:	f240 111f 	movw	r1, #287	; 0x11f
 8009ea0:	480b      	ldr	r0, [pc, #44]	; (8009ed0 <HAL_I2C_MspInit+0x12c>)
 8009ea2:	f7ff fe01 	bl	8009aa8 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a0a      	ldr	r2, [pc, #40]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8009eac:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <HAL_I2C_MspInit+0x130>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009eb2:	bf00      	nop
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	40005c00 	.word	0x40005c00
 8009ec0:	40021c00 	.word	0x40021c00
 8009ec4:	40023800 	.word	0x40023800
 8009ec8:	200008b4 	.word	0x200008b4
 8009ecc:	40026028 	.word	0x40026028
 8009ed0:	0800bd9c 	.word	0x0800bd9c
 8009ed4:	20000808 	.word	0x20000808
 8009ed8:	40026070 	.word	0x40026070

08009edc <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a32      	ldr	r2, [pc, #200]	; (8009fb4 <HAL_LTDC_MspInit+0xd8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d15e      	bne.n	8009fac <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009eee:	4a32      	ldr	r2, [pc, #200]	; (8009fb8 <HAL_LTDC_MspInit+0xdc>)
 8009ef0:	4b31      	ldr	r3, [pc, #196]	; (8009fb8 <HAL_LTDC_MspInit+0xdc>)
 8009ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8009efa:	4b2f      	ldr	r3, [pc, #188]	; (8009fb8 <HAL_LTDC_MspInit+0xdc>)
 8009efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f02:	60bb      	str	r3, [r7, #8]
 8009f04:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8009f06:	2310      	movs	r3, #16
 8009f08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009f16:	230e      	movs	r3, #14
 8009f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8009f1a:	f107 030c 	add.w	r3, r7, #12
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4826      	ldr	r0, [pc, #152]	; (8009fbc <HAL_LTDC_MspInit+0xe0>)
 8009f22:	f7f8 faa9 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8009f26:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009f2a:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f30:	2300      	movs	r3, #0
 8009f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f34:	2300      	movs	r3, #0
 8009f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009f38:	230e      	movs	r3, #14
 8009f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009f3c:	f107 030c 	add.w	r3, r7, #12
 8009f40:	4619      	mov	r1, r3
 8009f42:	481f      	ldr	r0, [pc, #124]	; (8009fc0 <HAL_LTDC_MspInit+0xe4>)
 8009f44:	f7f8 fa98 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8009f48:	23f7      	movs	r3, #247	; 0xf7
 8009f4a:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f54:	2300      	movs	r3, #0
 8009f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009f58:	230e      	movs	r3, #14
 8009f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8009f5c:	f107 030c 	add.w	r3, r7, #12
 8009f60:	4619      	mov	r1, r3
 8009f62:	4818      	ldr	r0, [pc, #96]	; (8009fc4 <HAL_LTDC_MspInit+0xe8>)
 8009f64:	f7f8 fa88 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8009f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f76:	2300      	movs	r3, #0
 8009f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009f7a:	2309      	movs	r3, #9
 8009f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8009f7e:	f107 030c 	add.w	r3, r7, #12
 8009f82:	4619      	mov	r1, r3
 8009f84:	4810      	ldr	r0, [pc, #64]	; (8009fc8 <HAL_LTDC_MspInit+0xec>)
 8009f86:	f7f8 fa77 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8009f8a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8009f8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f90:	2302      	movs	r3, #2
 8009f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f94:	2300      	movs	r3, #0
 8009f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009f9c:	230e      	movs	r3, #14
 8009f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009fa0:	f107 030c 	add.w	r3, r7, #12
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4809      	ldr	r0, [pc, #36]	; (8009fcc <HAL_LTDC_MspInit+0xf0>)
 8009fa8:	f7f8 fa66 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8009fac:	bf00      	nop
 8009fae:	3720      	adds	r7, #32
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	40016800 	.word	0x40016800
 8009fb8:	40023800 	.word	0x40023800
 8009fbc:	40021000 	.word	0x40021000
 8009fc0:	40022400 	.word	0x40022400
 8009fc4:	40022800 	.word	0x40022800
 8009fc8:	40021800 	.word	0x40021800
 8009fcc:	40022000 	.word	0x40022000

08009fd0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a19      	ldr	r2, [pc, #100]	; (800a044 <HAL_UART_MspInit+0x74>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d12c      	bne.n	800a03c <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009fe2:	4a19      	ldr	r2, [pc, #100]	; (800a048 <HAL_UART_MspInit+0x78>)
 8009fe4:	4b18      	ldr	r3, [pc, #96]	; (800a048 <HAL_UART_MspInit+0x78>)
 8009fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe8:	f043 0310 	orr.w	r3, r3, #16
 8009fec:	6453      	str	r3, [r2, #68]	; 0x44
 8009fee:	4b16      	ldr	r3, [pc, #88]	; (800a048 <HAL_UART_MspInit+0x78>)
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff2:	f003 0310 	and.w	r3, r3, #16
 8009ff6:	60bb      	str	r3, [r7, #8]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8009ffa:	2380      	movs	r3, #128	; 0x80
 8009ffc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ffe:	2302      	movs	r3, #2
 800a000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a006:	2300      	movs	r3, #0
 800a008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a00a:	2307      	movs	r3, #7
 800a00c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800a00e:	f107 030c 	add.w	r3, r7, #12
 800a012:	4619      	mov	r1, r3
 800a014:	480d      	ldr	r0, [pc, #52]	; (800a04c <HAL_UART_MspInit+0x7c>)
 800a016:	f7f8 fa2f 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800a01a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a01e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a020:	2302      	movs	r3, #2
 800a022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a028:	2300      	movs	r3, #0
 800a02a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a02c:	2307      	movs	r3, #7
 800a02e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800a030:	f107 030c 	add.w	r3, r7, #12
 800a034:	4619      	mov	r1, r3
 800a036:	4806      	ldr	r0, [pc, #24]	; (800a050 <HAL_UART_MspInit+0x80>)
 800a038:	f7f8 fa1e 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a03c:	bf00      	nop
 800a03e:	3720      	adds	r7, #32
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	40011000 	.word	0x40011000
 800a048:	40023800 	.word	0x40023800
 800a04c:	40020400 	.word	0x40020400
 800a050:	40020000 	.word	0x40020000

0800a054 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800a05a:	4b3b      	ldr	r3, [pc, #236]	; (800a148 <HAL_FMC_MspInit+0xf4>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d16d      	bne.n	800a13e <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800a062:	4b39      	ldr	r3, [pc, #228]	; (800a148 <HAL_FMC_MspInit+0xf4>)
 800a064:	2201      	movs	r2, #1
 800a066:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a068:	4a38      	ldr	r2, [pc, #224]	; (800a14c <HAL_FMC_MspInit+0xf8>)
 800a06a:	4b38      	ldr	r3, [pc, #224]	; (800a14c <HAL_FMC_MspInit+0xf8>)
 800a06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06e:	f043 0301 	orr.w	r3, r3, #1
 800a072:	6393      	str	r3, [r2, #56]	; 0x38
 800a074:	4b35      	ldr	r3, [pc, #212]	; (800a14c <HAL_FMC_MspInit+0xf8>)
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	603b      	str	r3, [r7, #0]
 800a07e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800a080:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a084:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a086:	2302      	movs	r3, #2
 800a088:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a08e:	2303      	movs	r3, #3
 800a090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a092:	230c      	movs	r3, #12
 800a094:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	4619      	mov	r1, r3
 800a09a:	482d      	ldr	r0, [pc, #180]	; (800a150 <HAL_FMC_MspInit+0xfc>)
 800a09c:	f7f8 f9ec 	bl	8002478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800a0a0:	f248 1333 	movw	r3, #33075	; 0x8133
 800a0a4:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a0b6:	1d3b      	adds	r3, r7, #4
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4826      	ldr	r0, [pc, #152]	; (800a154 <HAL_FMC_MspInit+0x100>)
 800a0bc:	f7f8 f9dc 	bl	8002478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800a0c0:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a0c4:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a0d2:	230c      	movs	r3, #12
 800a0d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a0d6:	1d3b      	adds	r3, r7, #4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	481f      	ldr	r0, [pc, #124]	; (800a158 <HAL_FMC_MspInit+0x104>)
 800a0dc:	f7f8 f9cc 	bl	8002478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800a0e0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a0e4:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a0f6:	1d3b      	adds	r3, r7, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4818      	ldr	r0, [pc, #96]	; (800a15c <HAL_FMC_MspInit+0x108>)
 800a0fc:	f7f8 f9bc 	bl	8002478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800a100:	2328      	movs	r3, #40	; 0x28
 800a102:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a104:	2302      	movs	r3, #2
 800a106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a108:	2300      	movs	r3, #0
 800a10a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a10c:	2303      	movs	r3, #3
 800a10e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a110:	230c      	movs	r3, #12
 800a112:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a114:	1d3b      	adds	r3, r7, #4
 800a116:	4619      	mov	r1, r3
 800a118:	4811      	ldr	r0, [pc, #68]	; (800a160 <HAL_FMC_MspInit+0x10c>)
 800a11a:	f7f8 f9ad 	bl	8002478 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800a11e:	2308      	movs	r3, #8
 800a120:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a122:	2302      	movs	r3, #2
 800a124:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a126:	2300      	movs	r3, #0
 800a128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a12a:	2303      	movs	r3, #3
 800a12c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a12e:	230c      	movs	r3, #12
 800a130:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800a132:	1d3b      	adds	r3, r7, #4
 800a134:	4619      	mov	r1, r3
 800a136:	480b      	ldr	r0, [pc, #44]	; (800a164 <HAL_FMC_MspInit+0x110>)
 800a138:	f7f8 f99e 	bl	8002478 <HAL_GPIO_Init>
 800a13c:	e000      	b.n	800a140 <HAL_FMC_MspInit+0xec>
    return;
 800a13e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	200002e4 	.word	0x200002e4
 800a14c:	40023800 	.word	0x40023800
 800a150:	40021000 	.word	0x40021000
 800a154:	40021800 	.word	0x40021800
 800a158:	40020c00 	.word	0x40020c00
 800a15c:	40021400 	.word	0x40021400
 800a160:	40021c00 	.word	0x40021c00
 800a164:	40020800 	.word	0x40020800

0800a168 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a170:	f7ff ff70 	bl	800a054 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08c      	sub	sp, #48	; 0x30
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800a18c:	2200      	movs	r2, #0
 800a18e:	6879      	ldr	r1, [r7, #4]
 800a190:	2019      	movs	r0, #25
 800a192:	f7f7 fab2 	bl	80016fa <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800a196:	2019      	movs	r0, #25
 800a198:	f7f7 facb 	bl	8001732 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a19c:	4a1f      	ldr	r2, [pc, #124]	; (800a21c <HAL_InitTick+0xa0>)
 800a19e:	4b1f      	ldr	r3, [pc, #124]	; (800a21c <HAL_InitTick+0xa0>)
 800a1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	6453      	str	r3, [r2, #68]	; 0x44
 800a1a8:	4b1c      	ldr	r3, [pc, #112]	; (800a21c <HAL_InitTick+0xa0>)
 800a1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a1b4:	f107 0210 	add.w	r2, r7, #16
 800a1b8:	f107 0314 	add.w	r3, r7, #20
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fa fd1c 	bl	8004bfc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a1c4:	f7fa fd06 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	4a13      	ldr	r2, [pc, #76]	; (800a220 <HAL_InitTick+0xa4>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	0c9b      	lsrs	r3, r3, #18
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a1dc:	4b11      	ldr	r3, [pc, #68]	; (800a224 <HAL_InitTick+0xa8>)
 800a1de:	4a12      	ldr	r2, [pc, #72]	; (800a228 <HAL_InitTick+0xac>)
 800a1e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800a1e2:	4b10      	ldr	r3, [pc, #64]	; (800a224 <HAL_InitTick+0xa8>)
 800a1e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a1e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a1ea:	4a0e      	ldr	r2, [pc, #56]	; (800a224 <HAL_InitTick+0xa8>)
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a1f0:	4b0c      	ldr	r3, [pc, #48]	; (800a224 <HAL_InitTick+0xa8>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <HAL_InitTick+0xa8>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a1fc:	4809      	ldr	r0, [pc, #36]	; (800a224 <HAL_InitTick+0xa8>)
 800a1fe:	f7fb f97c 	bl	80054fa <HAL_TIM_Base_Init>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d104      	bne.n	800a212 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a208:	4806      	ldr	r0, [pc, #24]	; (800a224 <HAL_InitTick+0xa8>)
 800a20a:	f7fb f9ab 	bl	8005564 <HAL_TIM_Base_Start_IT>
 800a20e:	4603      	mov	r3, r0
 800a210:	e000      	b.n	800a214 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
}
 800a214:	4618      	mov	r0, r3
 800a216:	3730      	adds	r7, #48	; 0x30
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	40023800 	.word	0x40023800
 800a220:	431bde83 	.word	0x431bde83
 800a224:	20000b6c 	.word	0x20000b6c
 800a228:	40010000 	.word	0x40010000

0800a22c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a230:	bf00      	nop
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800a23a:	b480      	push	{r7}
 800a23c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a23e:	bf00      	nop
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800a24c:	f7f7 faa8 	bl	80017a0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a250:	bf00      	nop
 800a252:	bd80      	pop	{r7, pc}

0800a254 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800a258:	4802      	ldr	r0, [pc, #8]	; (800a264 <DMA1_Stream1_IRQHandler+0x10>)
 800a25a:	f7f7 fc3b 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a25e:	bf00      	nop
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200008b4 	.word	0x200008b4

0800a268 <DMA1_Stream4_IRQHandler>:

/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800a26c:	4802      	ldr	r0, [pc, #8]	; (800a278 <DMA1_Stream4_IRQHandler+0x10>)
 800a26e:	f7f7 fc31 	bl	8001ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a272:	bf00      	nop
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000808 	.word	0x20000808

0800a27c <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a280:	4802      	ldr	r0, [pc, #8]	; (800a28c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a282:	f7fb f98a 	bl	800559a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a286:	bf00      	nop
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000b6c 	.word	0x20000b6c

0800a290 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800a294:	4802      	ldr	r0, [pc, #8]	; (800a2a0 <OTG_HS_IRQHandler+0x10>)
 800a296:	f7f8 ffdb 	bl	8003250 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800a29a:	bf00      	nop
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20001dd0 	.word	0x20001dd0

0800a2a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a2a8:	4a15      	ldr	r2, [pc, #84]	; (800a300 <SystemInit+0x5c>)
 800a2aa:	4b15      	ldr	r3, [pc, #84]	; (800a300 <SystemInit+0x5c>)
 800a2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a2b8:	4a12      	ldr	r2, [pc, #72]	; (800a304 <SystemInit+0x60>)
 800a2ba:	4b12      	ldr	r3, [pc, #72]	; (800a304 <SystemInit+0x60>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f043 0301 	orr.w	r3, r3, #1
 800a2c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a2c4:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <SystemInit+0x60>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a2ca:	490e      	ldr	r1, [pc, #56]	; (800a304 <SystemInit+0x60>)
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <SystemInit+0x60>)
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	4b0d      	ldr	r3, [pc, #52]	; (800a308 <SystemInit+0x64>)
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <SystemInit+0x60>)
 800a2d8:	4a0c      	ldr	r2, [pc, #48]	; (800a30c <SystemInit+0x68>)
 800a2da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a2dc:	4a09      	ldr	r2, [pc, #36]	; (800a304 <SystemInit+0x60>)
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <SystemInit+0x60>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a2e8:	4b06      	ldr	r3, [pc, #24]	; (800a304 <SystemInit+0x60>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a2ee:	4b04      	ldr	r3, [pc, #16]	; (800a300 <SystemInit+0x5c>)
 800a2f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2f4:	609a      	str	r2, [r3, #8]
#endif
}
 800a2f6:	bf00      	nop
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	e000ed00 	.word	0xe000ed00
 800a304:	40023800 	.word	0x40023800
 800a308:	fef6ffff 	.word	0xfef6ffff
 800a30c:	24003010 	.word	0x24003010

0800a310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 800a314:	2201      	movs	r2, #1
 800a316:	4908      	ldr	r1, [pc, #32]	; (800a338 <MX_USB_DEVICE_Init+0x28>)
 800a318:	4808      	ldr	r0, [pc, #32]	; (800a33c <MX_USB_DEVICE_Init+0x2c>)
 800a31a:	f7fd fcae 	bl	8007c7a <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC);
 800a31e:	4908      	ldr	r1, [pc, #32]	; (800a340 <MX_USB_DEVICE_Init+0x30>)
 800a320:	4806      	ldr	r0, [pc, #24]	; (800a33c <MX_USB_DEVICE_Init+0x2c>)
 800a322:	f7fd fcd5 	bl	8007cd0 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS);
 800a326:	4907      	ldr	r1, [pc, #28]	; (800a344 <MX_USB_DEVICE_Init+0x34>)
 800a328:	4804      	ldr	r0, [pc, #16]	; (800a33c <MX_USB_DEVICE_Init+0x2c>)
 800a32a:	f7fd fc37 	bl	8007b9c <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 800a32e:	4803      	ldr	r0, [pc, #12]	; (800a33c <MX_USB_DEVICE_Init+0x2c>)
 800a330:	f7fd fce8 	bl	8007d04 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a334:	bf00      	nop
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20000130 	.word	0x20000130
 800a33c:	20000bac 	.word	0x20000bac
 800a340:	20000018 	.word	0x20000018
 800a344:	20000120 	.word	0x20000120

0800a348 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a34c:	2200      	movs	r2, #0
 800a34e:	4905      	ldr	r1, [pc, #20]	; (800a364 <CDC_Init_HS+0x1c>)
 800a350:	4805      	ldr	r0, [pc, #20]	; (800a368 <CDC_Init_HS+0x20>)
 800a352:	f7fd fc3a 	bl	8007bca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a356:	4905      	ldr	r1, [pc, #20]	; (800a36c <CDC_Init_HS+0x24>)
 800a358:	4803      	ldr	r0, [pc, #12]	; (800a368 <CDC_Init_HS+0x20>)
 800a35a:	f7fd fc50 	bl	8007bfe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a35e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a360:	4618      	mov	r0, r3
 800a362:	bd80      	pop	{r7, pc}
 800a364:	200015d0 	.word	0x200015d0
 800a368:	20000bac 	.word	0x20000bac
 800a36c:	20000dd0 	.word	0x20000dd0

0800a370 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a374:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a376:	4618      	mov	r0, r3
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
 800a38c:	4613      	mov	r3, r2
 800a38e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	2b23      	cmp	r3, #35	; 0x23
 800a394:	d84a      	bhi.n	800a42c <CDC_Control_HS+0xac>
 800a396:	a201      	add	r2, pc, #4	; (adr r2, 800a39c <CDC_Control_HS+0x1c>)
 800a398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39c:	0800a42d 	.word	0x0800a42d
 800a3a0:	0800a42d 	.word	0x0800a42d
 800a3a4:	0800a42d 	.word	0x0800a42d
 800a3a8:	0800a42d 	.word	0x0800a42d
 800a3ac:	0800a42d 	.word	0x0800a42d
 800a3b0:	0800a42d 	.word	0x0800a42d
 800a3b4:	0800a42d 	.word	0x0800a42d
 800a3b8:	0800a42d 	.word	0x0800a42d
 800a3bc:	0800a42d 	.word	0x0800a42d
 800a3c0:	0800a42d 	.word	0x0800a42d
 800a3c4:	0800a42d 	.word	0x0800a42d
 800a3c8:	0800a42d 	.word	0x0800a42d
 800a3cc:	0800a42d 	.word	0x0800a42d
 800a3d0:	0800a42d 	.word	0x0800a42d
 800a3d4:	0800a42d 	.word	0x0800a42d
 800a3d8:	0800a42d 	.word	0x0800a42d
 800a3dc:	0800a42d 	.word	0x0800a42d
 800a3e0:	0800a42d 	.word	0x0800a42d
 800a3e4:	0800a42d 	.word	0x0800a42d
 800a3e8:	0800a42d 	.word	0x0800a42d
 800a3ec:	0800a42d 	.word	0x0800a42d
 800a3f0:	0800a42d 	.word	0x0800a42d
 800a3f4:	0800a42d 	.word	0x0800a42d
 800a3f8:	0800a42d 	.word	0x0800a42d
 800a3fc:	0800a42d 	.word	0x0800a42d
 800a400:	0800a42d 	.word	0x0800a42d
 800a404:	0800a42d 	.word	0x0800a42d
 800a408:	0800a42d 	.word	0x0800a42d
 800a40c:	0800a42d 	.word	0x0800a42d
 800a410:	0800a42d 	.word	0x0800a42d
 800a414:	0800a42d 	.word	0x0800a42d
 800a418:	0800a42d 	.word	0x0800a42d
 800a41c:	0800a42d 	.word	0x0800a42d
 800a420:	0800a42d 	.word	0x0800a42d
 800a424:	0800a42d 	.word	0x0800a42d
 800a428:	0800a42d 	.word	0x0800a42d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a42c:	bf00      	nop
  }

  return (USBD_OK);
 800a42e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	4805      	ldr	r0, [pc, #20]	; (800a460 <CDC_Receive_HS+0x24>)
 800a44a:	f7fd fbd8 	bl	8007bfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a44e:	4804      	ldr	r0, [pc, #16]	; (800a460 <CDC_Receive_HS+0x24>)
 800a450:	f7fd fbe9 	bl	8007c26 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a454:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20000bac 	.word	0x20000bac

0800a464 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08a      	sub	sp, #40	; 0x28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a33      	ldr	r2, [pc, #204]	; (800a540 <HAL_PCD_MspInit+0xdc>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d160      	bne.n	800a538 <HAL_PCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800a476:	f643 4323 	movw	r3, #15395	; 0x3c23
 800a47a:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a47c:	2302      	movs	r3, #2
 800a47e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a480:	2300      	movs	r3, #0
 800a482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a484:	2303      	movs	r3, #3
 800a486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a488:	230a      	movs	r3, #10
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a48c:	f107 0314 	add.w	r3, r7, #20
 800a490:	4619      	mov	r1, r3
 800a492:	482c      	ldr	r0, [pc, #176]	; (800a544 <HAL_PCD_MspInit+0xe0>)
 800a494:	f7f7 fff0 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800a498:	2310      	movs	r3, #16
 800a49a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a49c:	2302      	movs	r3, #2
 800a49e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a4a8:	230a      	movs	r3, #10
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800a4ac:	f107 0314 	add.w	r3, r7, #20
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4825      	ldr	r0, [pc, #148]	; (800a548 <HAL_PCD_MspInit+0xe4>)
 800a4b4:	f7f7 ffe0 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800a4b8:	2305      	movs	r3, #5
 800a4ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a4c8:	230a      	movs	r3, #10
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4cc:	f107 0314 	add.w	r3, r7, #20
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	481e      	ldr	r0, [pc, #120]	; (800a54c <HAL_PCD_MspInit+0xe8>)
 800a4d4:	f7f7 ffd0 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a4d8:	2328      	movs	r3, #40	; 0x28
 800a4da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4dc:	2302      	movs	r3, #2
 800a4de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a4e8:	230a      	movs	r3, #10
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4ec:	f107 0314 	add.w	r3, r7, #20
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4817      	ldr	r0, [pc, #92]	; (800a550 <HAL_PCD_MspInit+0xec>)
 800a4f4:	f7f7 ffc0 	bl	8002478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a4f8:	4a16      	ldr	r2, [pc, #88]	; (800a554 <HAL_PCD_MspInit+0xf0>)
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <HAL_PCD_MspInit+0xf0>)
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a502:	6313      	str	r3, [r2, #48]	; 0x30
 800a504:	4b13      	ldr	r3, [pc, #76]	; (800a554 <HAL_PCD_MspInit+0xf0>)
 800a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a50c:	613b      	str	r3, [r7, #16]
 800a50e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a510:	4a10      	ldr	r2, [pc, #64]	; (800a554 <HAL_PCD_MspInit+0xf0>)
 800a512:	4b10      	ldr	r3, [pc, #64]	; (800a554 <HAL_PCD_MspInit+0xf0>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a51a:	6313      	str	r3, [r2, #48]	; 0x30
 800a51c:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <HAL_PCD_MspInit+0xf0>)
 800a51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a528:	2200      	movs	r2, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	204d      	movs	r0, #77	; 0x4d
 800a52e:	f7f7 f8e4 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a532:	204d      	movs	r0, #77	; 0x4d
 800a534:	f7f7 f8fd 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a538:	bf00      	nop
 800a53a:	3728      	adds	r7, #40	; 0x28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	40040000 	.word	0x40040000
 800a544:	40020400 	.word	0x40020400
 800a548:	40021c00 	.word	0x40021c00
 800a54c:	40020800 	.word	0x40020800
 800a550:	40020000 	.word	0x40020000
 800a554:	40023800 	.word	0x40023800

0800a558 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7fd fc11 	bl	8007d96 <USBD_LL_SetupStage>
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	6879      	ldr	r1, [r7, #4]
 800a592:	4613      	mov	r3, r2
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	1a9b      	subs	r3, r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	440b      	add	r3, r1
 800a59c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	f7fd fc40 	bl	8007e2a <USBD_LL_DataOutStage>
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800a5c4:	78fa      	ldrb	r2, [r7, #3]
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	1a9b      	subs	r3, r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	440b      	add	r3, r1
 800a5d2:	3344      	adds	r3, #68	; 0x44
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	78fb      	ldrb	r3, [r7, #3]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	f7fd fc81 	bl	8007ee0 <USBD_LL_DataInStage>
}
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fd fd67 	bl	80080c8 <USBD_LL_SOF>
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a60a:	2301      	movs	r3, #1
 800a60c:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <HAL_PCD_ResetCallback+0x1a>
 800a616:	2b02      	cmp	r3, #2
 800a618:	d003      	beq.n	800a622 <HAL_PCD_ResetCallback+0x20>
 800a61a:	e005      	b.n	800a628 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]
    break;
 800a620:	e005      	b.n	800a62e <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800a622:	2301      	movs	r3, #1
 800a624:	73fb      	strb	r3, [r7, #15]
    break;
 800a626:	e002      	b.n	800a62e <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800a628:	2301      	movs	r3, #1
 800a62a:	73fb      	strb	r3, [r7, #15]
    break;    
 800a62c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a634:	7bfa      	ldrb	r2, [r7, #15]
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fd fd0f 	bl	800805c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a644:	4618      	mov	r0, r3
 800a646:	f7fd fcda 	bl	8007ffe <USBD_LL_Reset>
}
 800a64a:	bf00      	nop
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a662:	4618      	mov	r0, r3
 800a664:	f7fd fd0a 	bl	800807c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a670:	461a      	mov	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f043 0301 	orr.w	r3, r3, #1
 800a680:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d005      	beq.n	800a696 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a68a:	4a05      	ldr	r2, [pc, #20]	; (800a6a0 <HAL_PCD_SuspendCallback+0x4c>)
 800a68c:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <HAL_PCD_SuspendCallback+0x4c>)
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f043 0306 	orr.w	r3, r3, #6
 800a694:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	e000ed00 	.word	0xe000ed00

0800a6a4 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fd fcf7 	bl	80080a6 <USBD_LL_Resume>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a6d2:	78fa      	ldrb	r2, [r7, #3]
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fd fd1d 	bl	8008116 <USBD_LL_IsoOUTIncomplete>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fd fcfe 	bl	80080fc <USBD_LL_IsoINIncomplete>
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a716:	4618      	mov	r0, r3
 800a718:	f7fd fd0a 	bl	8008130 <USBD_LL_DevConnected>
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800a732:	4618      	mov	r0, r3
 800a734:	f7fd fd07 	bl	8008146 <USBD_LL_DevDisconnected>
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d143      	bne.n	800a7d8 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a750:	4a24      	ldr	r2, [pc, #144]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_HS;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a22      	ldr	r2, [pc, #136]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a75c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a760:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a762:	4a21      	ldr	r2, [pc, #132]	; (800a7e8 <USBD_LL_Init+0xa8>)
 800a764:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800a766:	4b1f      	ldr	r3, [pc, #124]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a768:	2208      	movs	r2, #8
 800a76a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a76e:	2200      	movs	r2, #0
 800a770:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800a772:	4b1c      	ldr	r3, [pc, #112]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a774:	2200      	movs	r2, #0
 800a776:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800a778:	4b1a      	ldr	r3, [pc, #104]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a77e:	4b19      	ldr	r3, [pc, #100]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a780:	2200      	movs	r2, #0
 800a782:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a784:	4b17      	ldr	r3, [pc, #92]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a786:	2200      	movs	r2, #0
 800a788:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a78a:	4b16      	ldr	r3, [pc, #88]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a790:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a792:	2200      	movs	r2, #0
 800a794:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a798:	2200      	movs	r2, #0
 800a79a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a79c:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a7a2:	4810      	ldr	r0, [pc, #64]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a7a4:	f7f8 fc24 	bl	8002ff0 <HAL_PCD_Init>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d004      	beq.n	800a7b8 <USBD_LL_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a7ae:	f240 117f 	movw	r1, #383	; 0x17f
 800a7b2:	480e      	ldr	r0, [pc, #56]	; (800a7ec <USBD_LL_Init+0xac>)
 800a7b4:	f7ff f978 	bl	8009aa8 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a7b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7bc:	4809      	ldr	r0, [pc, #36]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a7be:	f7f9 fd55 	bl	800426c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a7c2:	2280      	movs	r2, #128	; 0x80
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	4807      	ldr	r0, [pc, #28]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a7c8:	f7f9 fd05 	bl	80041d6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a7cc:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <USBD_LL_Init+0xa4>)
 800a7d4:	f7f9 fcff 	bl	80041d6 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20001dd0 	.word	0x20001dd0
 800a7e8:	40040000 	.word	0x40040000
 800a7ec:	0800bdb8 	.word	0x0800bdb8

0800a7f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a806:	4618      	mov	r0, r3
 800a808:	f7f8 fd00 	bl	800320c <HAL_PCD_Start>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b03      	cmp	r3, #3
 800a814:	d816      	bhi.n	800a844 <USBD_LL_Start+0x54>
 800a816:	a201      	add	r2, pc, #4	; (adr r2, 800a81c <USBD_LL_Start+0x2c>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a82d 	.word	0x0800a82d
 800a820:	0800a833 	.word	0x0800a833
 800a824:	0800a839 	.word	0x0800a839
 800a828:	0800a83f 	.word	0x0800a83f
    case HAL_OK :
      usb_status = USBD_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	73fb      	strb	r3, [r7, #15]
    break;
 800a830:	e00b      	b.n	800a84a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a832:	2302      	movs	r3, #2
 800a834:	73fb      	strb	r3, [r7, #15]
    break;
 800a836:	e008      	b.n	800a84a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a838:	2301      	movs	r3, #1
 800a83a:	73fb      	strb	r3, [r7, #15]
    break;
 800a83c:	e005      	b.n	800a84a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a83e:	2302      	movs	r3, #2
 800a840:	73fb      	strb	r3, [r7, #15]
    break;
 800a842:	e002      	b.n	800a84a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a844:	2302      	movs	r3, #2
 800a846:	73fb      	strb	r3, [r7, #15]
    break;
 800a848:	bf00      	nop
  }
  return usb_status;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	4608      	mov	r0, r1
 800a85e:	4611      	mov	r1, r2
 800a860:	461a      	mov	r2, r3
 800a862:	4603      	mov	r3, r0
 800a864:	70fb      	strb	r3, [r7, #3]
 800a866:	460b      	mov	r3, r1
 800a868:	70bb      	strb	r3, [r7, #2]
 800a86a:	4613      	mov	r3, r2
 800a86c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a87c:	78bb      	ldrb	r3, [r7, #2]
 800a87e:	883a      	ldrh	r2, [r7, #0]
 800a880:	78f9      	ldrb	r1, [r7, #3]
 800a882:	f7f9 fa0a 	bl	8003c9a <HAL_PCD_EP_Open>
 800a886:	4603      	mov	r3, r0
 800a888:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d817      	bhi.n	800a8c0 <USBD_LL_OpenEP+0x6c>
 800a890:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <USBD_LL_OpenEP+0x44>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a8a9 	.word	0x0800a8a9
 800a89c:	0800a8af 	.word	0x0800a8af
 800a8a0:	0800a8b5 	.word	0x0800a8b5
 800a8a4:	0800a8bb 	.word	0x0800a8bb
    case HAL_OK :
      usb_status = USBD_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ac:	e00b      	b.n	800a8c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b2:	e008      	b.n	800a8c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b8:	e005      	b.n	800a8c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8be:	e002      	b.n	800a8c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c4:	bf00      	nop
  }
  return usb_status;
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a8ea:	78fa      	ldrb	r2, [r7, #3]
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f9 fa3b 	bl	8003d6a <HAL_PCD_EP_Close>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d816      	bhi.n	800a92c <USBD_LL_CloseEP+0x5c>
 800a8fe:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <USBD_LL_CloseEP+0x34>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a91b 	.word	0x0800a91b
 800a90c:	0800a921 	.word	0x0800a921
 800a910:	0800a927 	.word	0x0800a927
    case HAL_OK :
      usb_status = USBD_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
    break;
 800a918:	e00b      	b.n	800a932 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a91a:	2302      	movs	r3, #2
 800a91c:	73fb      	strb	r3, [r7, #15]
    break;
 800a91e:	e008      	b.n	800a932 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
    break;
 800a924:	e005      	b.n	800a932 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a926:	2302      	movs	r3, #2
 800a928:	73fb      	strb	r3, [r7, #15]
    break;
 800a92a:	e002      	b.n	800a932 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a92c:	2302      	movs	r3, #2
 800a92e:	73fb      	strb	r3, [r7, #15]
    break;
 800a930:	bf00      	nop
  }
  return usb_status;  
 800a932:	7bfb      	ldrb	r3, [r7, #15]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a956:	78fa      	ldrb	r2, [r7, #3]
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7f9 fafb 	bl	8003f56 <HAL_PCD_EP_SetStall>
 800a960:	4603      	mov	r3, r0
 800a962:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d816      	bhi.n	800a998 <USBD_LL_StallEP+0x5c>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <USBD_LL_StallEP+0x34>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a981 	.word	0x0800a981
 800a974:	0800a987 	.word	0x0800a987
 800a978:	0800a98d 	.word	0x0800a98d
 800a97c:	0800a993 	.word	0x0800a993
    case HAL_OK :
      usb_status = USBD_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73fb      	strb	r3, [r7, #15]
    break;
 800a984:	e00b      	b.n	800a99e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a986:	2302      	movs	r3, #2
 800a988:	73fb      	strb	r3, [r7, #15]
    break;
 800a98a:	e008      	b.n	800a99e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a98c:	2301      	movs	r3, #1
 800a98e:	73fb      	strb	r3, [r7, #15]
    break;
 800a990:	e005      	b.n	800a99e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a992:	2302      	movs	r3, #2
 800a994:	73fb      	strb	r3, [r7, #15]
    break;
 800a996:	e002      	b.n	800a99e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a998:	2302      	movs	r3, #2
 800a99a:	73fb      	strb	r3, [r7, #15]
    break;
 800a99c:	bf00      	nop
  }
  return usb_status;  
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a9c2:	78fa      	ldrb	r2, [r7, #3]
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7f9 fb29 	bl	800401e <HAL_PCD_EP_ClrStall>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a9d0:	7bbb      	ldrb	r3, [r7, #14]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d816      	bhi.n	800aa04 <USBD_LL_ClearStallEP+0x5c>
 800a9d6:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <USBD_LL_ClearStallEP+0x34>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800a9ed 	.word	0x0800a9ed
 800a9e0:	0800a9f3 	.word	0x0800a9f3
 800a9e4:	0800a9f9 	.word	0x0800a9f9
 800a9e8:	0800a9ff 	.word	0x0800a9ff
    case HAL_OK :
      usb_status = USBD_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f0:	e00b      	b.n	800aa0a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f6:	e008      	b.n	800aa0a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9fc:	e005      	b.n	800aa0a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9fe:	2302      	movs	r3, #2
 800aa00:	73fb      	strb	r3, [r7, #15]
    break;
 800aa02:	e002      	b.n	800aa0a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aa04:	2302      	movs	r3, #2
 800aa06:	73fb      	strb	r3, [r7, #15]
    break;
 800aa08:	bf00      	nop
  }
  return usb_status; 
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800aa26:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800aa28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	da0b      	bge.n	800aa48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa36:	68f9      	ldr	r1, [r7, #12]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	1a9b      	subs	r3, r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	440b      	add	r3, r1
 800aa42:	333a      	adds	r3, #58	; 0x3a
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	e00b      	b.n	800aa60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa4e:	68f9      	ldr	r1, [r7, #12]
 800aa50:	4613      	mov	r3, r2
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	1a9b      	subs	r3, r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	440b      	add	r3, r1
 800aa5a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800aa5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800aa86:	78fa      	ldrb	r2, [r7, #3]
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7f9 f8e4 	bl	8003c58 <HAL_PCD_SetAddress>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d816      	bhi.n	800aac8 <USBD_LL_SetUSBAddress+0x5c>
 800aa9a:	a201      	add	r2, pc, #4	; (adr r2, 800aaa0 <USBD_LL_SetUSBAddress+0x34>)
 800aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa0:	0800aab1 	.word	0x0800aab1
 800aaa4:	0800aab7 	.word	0x0800aab7
 800aaa8:	0800aabd 	.word	0x0800aabd
 800aaac:	0800aac3 	.word	0x0800aac3
    case HAL_OK :
      usb_status = USBD_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
    break;
 800aab4:	e00b      	b.n	800aace <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aab6:	2302      	movs	r3, #2
 800aab8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaba:	e008      	b.n	800aace <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aabc:	2301      	movs	r3, #1
 800aabe:	73fb      	strb	r3, [r7, #15]
    break;
 800aac0:	e005      	b.n	800aace <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aac2:	2302      	movs	r3, #2
 800aac4:	73fb      	strb	r3, [r7, #15]
    break;
 800aac6:	e002      	b.n	800aace <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800aac8:	2302      	movs	r3, #2
 800aaca:	73fb      	strb	r3, [r7, #15]
    break;
 800aacc:	bf00      	nop
  }
  return usb_status;  
 800aace:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	461a      	mov	r2, r3
 800aae4:	460b      	mov	r3, r1
 800aae6:	72fb      	strb	r3, [r7, #11]
 800aae8:	4613      	mov	r3, r2
 800aaea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800aafa:	893b      	ldrh	r3, [r7, #8]
 800aafc:	7af9      	ldrb	r1, [r7, #11]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	f7f9 f9e0 	bl	8003ec4 <HAL_PCD_EP_Transmit>
 800ab04:	4603      	mov	r3, r0
 800ab06:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ab08:	7dbb      	ldrb	r3, [r7, #22]
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d816      	bhi.n	800ab3c <USBD_LL_Transmit+0x64>
 800ab0e:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <USBD_LL_Transmit+0x3c>)
 800ab10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab14:	0800ab25 	.word	0x0800ab25
 800ab18:	0800ab2b 	.word	0x0800ab2b
 800ab1c:	0800ab31 	.word	0x0800ab31
 800ab20:	0800ab37 	.word	0x0800ab37
    case HAL_OK :
      usb_status = USBD_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	75fb      	strb	r3, [r7, #23]
    break;
 800ab28:	e00b      	b.n	800ab42 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	75fb      	strb	r3, [r7, #23]
    break;
 800ab2e:	e008      	b.n	800ab42 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab30:	2301      	movs	r3, #1
 800ab32:	75fb      	strb	r3, [r7, #23]
    break;
 800ab34:	e005      	b.n	800ab42 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab36:	2302      	movs	r3, #2
 800ab38:	75fb      	strb	r3, [r7, #23]
    break;
 800ab3a:	e002      	b.n	800ab42 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	75fb      	strb	r3, [r7, #23]
    break;
 800ab40:	bf00      	nop
  }
  return usb_status;    
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	607a      	str	r2, [r7, #4]
 800ab56:	461a      	mov	r2, r3
 800ab58:	460b      	mov	r3, r1
 800ab5a:	72fb      	strb	r3, [r7, #11]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800ab6e:	893b      	ldrh	r3, [r7, #8]
 800ab70:	7af9      	ldrb	r1, [r7, #11]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	f7f9 f943 	bl	8003dfe <HAL_PCD_EP_Receive>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800ab7c:	7dbb      	ldrb	r3, [r7, #22]
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d816      	bhi.n	800abb0 <USBD_LL_PrepareReceive+0x64>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <USBD_LL_PrepareReceive+0x3c>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800ab99 	.word	0x0800ab99
 800ab8c:	0800ab9f 	.word	0x0800ab9f
 800ab90:	0800aba5 	.word	0x0800aba5
 800ab94:	0800abab 	.word	0x0800abab
    case HAL_OK :
      usb_status = USBD_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	75fb      	strb	r3, [r7, #23]
    break;
 800ab9c:	e00b      	b.n	800abb6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab9e:	2302      	movs	r3, #2
 800aba0:	75fb      	strb	r3, [r7, #23]
    break;
 800aba2:	e008      	b.n	800abb6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aba4:	2301      	movs	r3, #1
 800aba6:	75fb      	strb	r3, [r7, #23]
    break;
 800aba8:	e005      	b.n	800abb6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abaa:	2302      	movs	r3, #2
 800abac:	75fb      	strb	r3, [r7, #23]
    break;
 800abae:	e002      	b.n	800abb6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800abb0:	2302      	movs	r3, #2
 800abb2:	75fb      	strb	r3, [r7, #23]
    break;
 800abb4:	bf00      	nop
  }
  return usb_status; 
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800abd2:	78fa      	ldrb	r2, [r7, #3]
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f9 f95b 	bl	8003e92 <HAL_PCD_EP_GetRxCount>
 800abdc:	4603      	mov	r3, r0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d002      	beq.n	800ac00 <HAL_PCDEx_LPM_Callback+0x18>
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d020      	beq.n	800ac40 <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800abfe:	e03d      	b.n	800ac7c <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d007      	beq.n	800ac18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800ac08:	f7fe f8e2 	bl	8008dd0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <HAL_PCDEx_LPM_Callback+0x9c>)
 800ac0e:	4b1d      	ldr	r3, [pc, #116]	; (800ac84 <HAL_PCDEx_LPM_Callback+0x9c>)
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f023 0306 	bic.w	r3, r3, #6
 800ac16:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac20:	461a      	mov	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f023 0301 	bic.w	r3, r3, #1
 800ac30:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fd fa34 	bl	80080a6 <USBD_LL_Resume>
    break;
 800ac3e:	e01d      	b.n	800ac7c <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac48:	461a      	mov	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f043 0301 	orr.w	r3, r3, #1
 800ac58:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fd fa0b 	bl	800807c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d005      	beq.n	800ac7a <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac6e:	4a05      	ldr	r2, [pc, #20]	; (800ac84 <HAL_PCDEx_LPM_Callback+0x9c>)
 800ac70:	4b04      	ldr	r3, [pc, #16]	; (800ac84 <HAL_PCDEx_LPM_Callback+0x9c>)
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	f043 0306 	orr.w	r3, r3, #6
 800ac78:	6113      	str	r3, [r2, #16]
    break;   
 800ac7a:	bf00      	nop
}
 800ac7c:	bf00      	nop
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	e000ed00 	.word	0xe000ed00

0800ac88 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_DeviceDesc);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2212      	movs	r2, #18
 800ac98:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ac9a:	4b03      	ldr	r3, [pc, #12]	; (800aca8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	20000150 	.word	0x20000150

0800acac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	6039      	str	r1, [r7, #0]
 800acb6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2204      	movs	r2, #4
 800acbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800acbe:	4b03      	ldr	r3, [pc, #12]	; (800accc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	20000170 	.word	0x20000170

0800acd0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	6039      	str	r1, [r7, #0]
 800acda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d105      	bne.n	800acee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	4907      	ldr	r1, [pc, #28]	; (800ad04 <USBD_HS_ProductStrDescriptor+0x34>)
 800ace6:	4808      	ldr	r0, [pc, #32]	; (800ad08 <USBD_HS_ProductStrDescriptor+0x38>)
 800ace8:	f7fd fe63 	bl	80089b2 <USBD_GetString>
 800acec:	e004      	b.n	800acf8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	4904      	ldr	r1, [pc, #16]	; (800ad04 <USBD_HS_ProductStrDescriptor+0x34>)
 800acf2:	4805      	ldr	r0, [pc, #20]	; (800ad08 <USBD_HS_ProductStrDescriptor+0x38>)
 800acf4:	f7fd fe5d 	bl	80089b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acf8:	4b02      	ldr	r3, [pc, #8]	; (800ad04 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	200021d0 	.word	0x200021d0
 800ad08:	0800bdcc 	.word	0x0800bdcc

0800ad0c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	4603      	mov	r3, r0
 800ad14:	6039      	str	r1, [r7, #0]
 800ad16:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	4904      	ldr	r1, [pc, #16]	; (800ad2c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ad1c:	4804      	ldr	r0, [pc, #16]	; (800ad30 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ad1e:	f7fd fe48 	bl	80089b2 <USBD_GetString>
  return USBD_StrDesc;
 800ad22:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	200021d0 	.word	0x200021d0
 800ad30:	0800bde4 	.word	0x0800bde4

0800ad34 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <USBD_HS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	4907      	ldr	r1, [pc, #28]	; (800ad68 <USBD_HS_SerialStrDescriptor+0x34>)
 800ad4a:	4808      	ldr	r0, [pc, #32]	; (800ad6c <USBD_HS_SerialStrDescriptor+0x38>)
 800ad4c:	f7fd fe31 	bl	80089b2 <USBD_GetString>
 800ad50:	e004      	b.n	800ad5c <USBD_HS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4904      	ldr	r1, [pc, #16]	; (800ad68 <USBD_HS_SerialStrDescriptor+0x34>)
 800ad56:	4805      	ldr	r0, [pc, #20]	; (800ad6c <USBD_HS_SerialStrDescriptor+0x38>)
 800ad58:	f7fd fe2b 	bl	80089b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad5c:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <USBD_HS_SerialStrDescriptor+0x34>)
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	200021d0 	.word	0x200021d0
 800ad6c:	0800bdf8 	.word	0x0800bdf8

0800ad70 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	6039      	str	r1, [r7, #0]
 800ad7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4907      	ldr	r1, [pc, #28]	; (800ada4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ad86:	4808      	ldr	r0, [pc, #32]	; (800ada8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ad88:	f7fd fe13 	bl	80089b2 <USBD_GetString>
 800ad8c:	e004      	b.n	800ad98 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	4904      	ldr	r1, [pc, #16]	; (800ada4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ad92:	4805      	ldr	r0, [pc, #20]	; (800ada8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ad94:	f7fd fe0d 	bl	80089b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200021d0 	.word	0x200021d0
 800ada8:	0800be08 	.word	0x0800be08

0800adac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	6039      	str	r1, [r7, #0]
 800adb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adb8:	79fb      	ldrb	r3, [r7, #7]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d105      	bne.n	800adca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	4907      	ldr	r1, [pc, #28]	; (800ade0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800adc2:	4808      	ldr	r0, [pc, #32]	; (800ade4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800adc4:	f7fd fdf5 	bl	80089b2 <USBD_GetString>
 800adc8:	e004      	b.n	800add4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	4904      	ldr	r1, [pc, #16]	; (800ade0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800adce:	4805      	ldr	r0, [pc, #20]	; (800ade4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800add0:	f7fd fdef 	bl	80089b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800add4:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	200021d0 	.word	0x200021d0
 800ade4:	0800be14 	.word	0x0800be14

0800ade8 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	6039      	str	r1, [r7, #0]
 800adf2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_BOSDesc);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	220c      	movs	r2, #12
 800adf8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800adfa:	4b03      	ldr	r3, [pc, #12]	; (800ae08 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	20000164 	.word	0x20000164

0800ae0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ae0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ae44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ae10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ae12:	e003      	b.n	800ae1c <LoopCopyDataInit>

0800ae14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ae14:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ae16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ae18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ae1a:	3104      	adds	r1, #4

0800ae1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ae1c:	480b      	ldr	r0, [pc, #44]	; (800ae4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ae1e:	4b0c      	ldr	r3, [pc, #48]	; (800ae50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ae20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ae22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ae24:	d3f6      	bcc.n	800ae14 <CopyDataInit>
  ldr  r2, =_sbss
 800ae26:	4a0b      	ldr	r2, [pc, #44]	; (800ae54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ae28:	e002      	b.n	800ae30 <LoopFillZerobss>

0800ae2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ae2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ae2c:	f842 3b04 	str.w	r3, [r2], #4

0800ae30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ae30:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ae32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ae34:	d3f9      	bcc.n	800ae2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ae36:	f7ff fa35 	bl	800a2a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ae3a:	f000 f811 	bl	800ae60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ae3e:	f7fd ff6f 	bl	8008d20 <main>
  bx  lr    
 800ae42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ae44:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800ae48:	0800d9b8 	.word	0x0800d9b8
  ldr  r0, =_sdata
 800ae4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ae50:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 800ae54:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 800ae58:	200023d4 	.word	0x200023d4

0800ae5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ae5c:	e7fe      	b.n	800ae5c <ADC_IRQHandler>
	...

0800ae60 <__libc_init_array>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	4e0d      	ldr	r6, [pc, #52]	; (800ae98 <__libc_init_array+0x38>)
 800ae64:	4c0d      	ldr	r4, [pc, #52]	; (800ae9c <__libc_init_array+0x3c>)
 800ae66:	1ba4      	subs	r4, r4, r6
 800ae68:	10a4      	asrs	r4, r4, #2
 800ae6a:	2500      	movs	r5, #0
 800ae6c:	42a5      	cmp	r5, r4
 800ae6e:	d109      	bne.n	800ae84 <__libc_init_array+0x24>
 800ae70:	4e0b      	ldr	r6, [pc, #44]	; (800aea0 <__libc_init_array+0x40>)
 800ae72:	4c0c      	ldr	r4, [pc, #48]	; (800aea4 <__libc_init_array+0x44>)
 800ae74:	f000 ff66 	bl	800bd44 <_init>
 800ae78:	1ba4      	subs	r4, r4, r6
 800ae7a:	10a4      	asrs	r4, r4, #2
 800ae7c:	2500      	movs	r5, #0
 800ae7e:	42a5      	cmp	r5, r4
 800ae80:	d105      	bne.n	800ae8e <__libc_init_array+0x2e>
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae88:	4798      	blx	r3
 800ae8a:	3501      	adds	r5, #1
 800ae8c:	e7ee      	b.n	800ae6c <__libc_init_array+0xc>
 800ae8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae92:	4798      	blx	r3
 800ae94:	3501      	adds	r5, #1
 800ae96:	e7f2      	b.n	800ae7e <__libc_init_array+0x1e>
 800ae98:	0800d9b0 	.word	0x0800d9b0
 800ae9c:	0800d9b0 	.word	0x0800d9b0
 800aea0:	0800d9b0 	.word	0x0800d9b0
 800aea4:	0800d9b4 	.word	0x0800d9b4

0800aea8 <malloc>:
 800aea8:	4b02      	ldr	r3, [pc, #8]	; (800aeb4 <malloc+0xc>)
 800aeaa:	4601      	mov	r1, r0
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	f000 b859 	b.w	800af64 <_malloc_r>
 800aeb2:	bf00      	nop
 800aeb4:	20000174 	.word	0x20000174

0800aeb8 <free>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	; (800aec4 <free+0xc>)
 800aeba:	4601      	mov	r1, r0
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	f000 b803 	b.w	800aec8 <_free_r>
 800aec2:	bf00      	nop
 800aec4:	20000174 	.word	0x20000174

0800aec8 <_free_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4605      	mov	r5, r0
 800aecc:	2900      	cmp	r1, #0
 800aece:	d045      	beq.n	800af5c <_free_r+0x94>
 800aed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed4:	1f0c      	subs	r4, r1, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfb8      	it	lt
 800aeda:	18e4      	addlt	r4, r4, r3
 800aedc:	f000 fb70 	bl	800b5c0 <__malloc_lock>
 800aee0:	4a1f      	ldr	r2, [pc, #124]	; (800af60 <_free_r+0x98>)
 800aee2:	6813      	ldr	r3, [r2, #0]
 800aee4:	4610      	mov	r0, r2
 800aee6:	b933      	cbnz	r3, 800aef6 <_free_r+0x2e>
 800aee8:	6063      	str	r3, [r4, #4]
 800aeea:	6014      	str	r4, [r2, #0]
 800aeec:	4628      	mov	r0, r5
 800aeee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aef2:	f000 bb66 	b.w	800b5c2 <__malloc_unlock>
 800aef6:	42a3      	cmp	r3, r4
 800aef8:	d90c      	bls.n	800af14 <_free_r+0x4c>
 800aefa:	6821      	ldr	r1, [r4, #0]
 800aefc:	1862      	adds	r2, r4, r1
 800aefe:	4293      	cmp	r3, r2
 800af00:	bf04      	itt	eq
 800af02:	681a      	ldreq	r2, [r3, #0]
 800af04:	685b      	ldreq	r3, [r3, #4]
 800af06:	6063      	str	r3, [r4, #4]
 800af08:	bf04      	itt	eq
 800af0a:	1852      	addeq	r2, r2, r1
 800af0c:	6022      	streq	r2, [r4, #0]
 800af0e:	6004      	str	r4, [r0, #0]
 800af10:	e7ec      	b.n	800aeec <_free_r+0x24>
 800af12:	4613      	mov	r3, r2
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	b10a      	cbz	r2, 800af1c <_free_r+0x54>
 800af18:	42a2      	cmp	r2, r4
 800af1a:	d9fa      	bls.n	800af12 <_free_r+0x4a>
 800af1c:	6819      	ldr	r1, [r3, #0]
 800af1e:	1858      	adds	r0, r3, r1
 800af20:	42a0      	cmp	r0, r4
 800af22:	d10b      	bne.n	800af3c <_free_r+0x74>
 800af24:	6820      	ldr	r0, [r4, #0]
 800af26:	4401      	add	r1, r0
 800af28:	1858      	adds	r0, r3, r1
 800af2a:	4282      	cmp	r2, r0
 800af2c:	6019      	str	r1, [r3, #0]
 800af2e:	d1dd      	bne.n	800aeec <_free_r+0x24>
 800af30:	6810      	ldr	r0, [r2, #0]
 800af32:	6852      	ldr	r2, [r2, #4]
 800af34:	605a      	str	r2, [r3, #4]
 800af36:	4401      	add	r1, r0
 800af38:	6019      	str	r1, [r3, #0]
 800af3a:	e7d7      	b.n	800aeec <_free_r+0x24>
 800af3c:	d902      	bls.n	800af44 <_free_r+0x7c>
 800af3e:	230c      	movs	r3, #12
 800af40:	602b      	str	r3, [r5, #0]
 800af42:	e7d3      	b.n	800aeec <_free_r+0x24>
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	1821      	adds	r1, r4, r0
 800af48:	428a      	cmp	r2, r1
 800af4a:	bf04      	itt	eq
 800af4c:	6811      	ldreq	r1, [r2, #0]
 800af4e:	6852      	ldreq	r2, [r2, #4]
 800af50:	6062      	str	r2, [r4, #4]
 800af52:	bf04      	itt	eq
 800af54:	1809      	addeq	r1, r1, r0
 800af56:	6021      	streq	r1, [r4, #0]
 800af58:	605c      	str	r4, [r3, #4]
 800af5a:	e7c7      	b.n	800aeec <_free_r+0x24>
 800af5c:	bd38      	pop	{r3, r4, r5, pc}
 800af5e:	bf00      	nop
 800af60:	200002e8 	.word	0x200002e8

0800af64 <_malloc_r>:
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	1ccd      	adds	r5, r1, #3
 800af68:	f025 0503 	bic.w	r5, r5, #3
 800af6c:	3508      	adds	r5, #8
 800af6e:	2d0c      	cmp	r5, #12
 800af70:	bf38      	it	cc
 800af72:	250c      	movcc	r5, #12
 800af74:	2d00      	cmp	r5, #0
 800af76:	4606      	mov	r6, r0
 800af78:	db01      	blt.n	800af7e <_malloc_r+0x1a>
 800af7a:	42a9      	cmp	r1, r5
 800af7c:	d903      	bls.n	800af86 <_malloc_r+0x22>
 800af7e:	230c      	movs	r3, #12
 800af80:	6033      	str	r3, [r6, #0]
 800af82:	2000      	movs	r0, #0
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	f000 fb1b 	bl	800b5c0 <__malloc_lock>
 800af8a:	4a23      	ldr	r2, [pc, #140]	; (800b018 <_malloc_r+0xb4>)
 800af8c:	6814      	ldr	r4, [r2, #0]
 800af8e:	4621      	mov	r1, r4
 800af90:	b991      	cbnz	r1, 800afb8 <_malloc_r+0x54>
 800af92:	4c22      	ldr	r4, [pc, #136]	; (800b01c <_malloc_r+0xb8>)
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	b91b      	cbnz	r3, 800afa0 <_malloc_r+0x3c>
 800af98:	4630      	mov	r0, r6
 800af9a:	f000 f859 	bl	800b050 <_sbrk_r>
 800af9e:	6020      	str	r0, [r4, #0]
 800afa0:	4629      	mov	r1, r5
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 f854 	bl	800b050 <_sbrk_r>
 800afa8:	1c43      	adds	r3, r0, #1
 800afaa:	d126      	bne.n	800affa <_malloc_r+0x96>
 800afac:	230c      	movs	r3, #12
 800afae:	6033      	str	r3, [r6, #0]
 800afb0:	4630      	mov	r0, r6
 800afb2:	f000 fb06 	bl	800b5c2 <__malloc_unlock>
 800afb6:	e7e4      	b.n	800af82 <_malloc_r+0x1e>
 800afb8:	680b      	ldr	r3, [r1, #0]
 800afba:	1b5b      	subs	r3, r3, r5
 800afbc:	d41a      	bmi.n	800aff4 <_malloc_r+0x90>
 800afbe:	2b0b      	cmp	r3, #11
 800afc0:	d90f      	bls.n	800afe2 <_malloc_r+0x7e>
 800afc2:	600b      	str	r3, [r1, #0]
 800afc4:	50cd      	str	r5, [r1, r3]
 800afc6:	18cc      	adds	r4, r1, r3
 800afc8:	4630      	mov	r0, r6
 800afca:	f000 fafa 	bl	800b5c2 <__malloc_unlock>
 800afce:	f104 000b 	add.w	r0, r4, #11
 800afd2:	1d23      	adds	r3, r4, #4
 800afd4:	f020 0007 	bic.w	r0, r0, #7
 800afd8:	1ac3      	subs	r3, r0, r3
 800afda:	d01b      	beq.n	800b014 <_malloc_r+0xb0>
 800afdc:	425a      	negs	r2, r3
 800afde:	50e2      	str	r2, [r4, r3]
 800afe0:	bd70      	pop	{r4, r5, r6, pc}
 800afe2:	428c      	cmp	r4, r1
 800afe4:	bf0d      	iteet	eq
 800afe6:	6863      	ldreq	r3, [r4, #4]
 800afe8:	684b      	ldrne	r3, [r1, #4]
 800afea:	6063      	strne	r3, [r4, #4]
 800afec:	6013      	streq	r3, [r2, #0]
 800afee:	bf18      	it	ne
 800aff0:	460c      	movne	r4, r1
 800aff2:	e7e9      	b.n	800afc8 <_malloc_r+0x64>
 800aff4:	460c      	mov	r4, r1
 800aff6:	6849      	ldr	r1, [r1, #4]
 800aff8:	e7ca      	b.n	800af90 <_malloc_r+0x2c>
 800affa:	1cc4      	adds	r4, r0, #3
 800affc:	f024 0403 	bic.w	r4, r4, #3
 800b000:	42a0      	cmp	r0, r4
 800b002:	d005      	beq.n	800b010 <_malloc_r+0xac>
 800b004:	1a21      	subs	r1, r4, r0
 800b006:	4630      	mov	r0, r6
 800b008:	f000 f822 	bl	800b050 <_sbrk_r>
 800b00c:	3001      	adds	r0, #1
 800b00e:	d0cd      	beq.n	800afac <_malloc_r+0x48>
 800b010:	6025      	str	r5, [r4, #0]
 800b012:	e7d9      	b.n	800afc8 <_malloc_r+0x64>
 800b014:	bd70      	pop	{r4, r5, r6, pc}
 800b016:	bf00      	nop
 800b018:	200002e8 	.word	0x200002e8
 800b01c:	200002ec 	.word	0x200002ec

0800b020 <iprintf>:
 800b020:	b40f      	push	{r0, r1, r2, r3}
 800b022:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <iprintf+0x2c>)
 800b024:	b513      	push	{r0, r1, r4, lr}
 800b026:	681c      	ldr	r4, [r3, #0]
 800b028:	b124      	cbz	r4, 800b034 <iprintf+0x14>
 800b02a:	69a3      	ldr	r3, [r4, #24]
 800b02c:	b913      	cbnz	r3, 800b034 <iprintf+0x14>
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 f9d0 	bl	800b3d4 <__sinit>
 800b034:	ab05      	add	r3, sp, #20
 800b036:	9a04      	ldr	r2, [sp, #16]
 800b038:	68a1      	ldr	r1, [r4, #8]
 800b03a:	9301      	str	r3, [sp, #4]
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 faeb 	bl	800b618 <_vfiprintf_r>
 800b042:	b002      	add	sp, #8
 800b044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b048:	b004      	add	sp, #16
 800b04a:	4770      	bx	lr
 800b04c:	20000174 	.word	0x20000174

0800b050 <_sbrk_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4c06      	ldr	r4, [pc, #24]	; (800b06c <_sbrk_r+0x1c>)
 800b054:	2300      	movs	r3, #0
 800b056:	4605      	mov	r5, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	f000 fe5c 	bl	800bd18 <_sbrk>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_sbrk_r+0x1a>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	b103      	cbz	r3, 800b06a <_sbrk_r+0x1a>
 800b068:	602b      	str	r3, [r5, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	200023d0 	.word	0x200023d0

0800b070 <__swbuf_r>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	460e      	mov	r6, r1
 800b074:	4614      	mov	r4, r2
 800b076:	4605      	mov	r5, r0
 800b078:	b118      	cbz	r0, 800b082 <__swbuf_r+0x12>
 800b07a:	6983      	ldr	r3, [r0, #24]
 800b07c:	b90b      	cbnz	r3, 800b082 <__swbuf_r+0x12>
 800b07e:	f000 f9a9 	bl	800b3d4 <__sinit>
 800b082:	4b21      	ldr	r3, [pc, #132]	; (800b108 <__swbuf_r+0x98>)
 800b084:	429c      	cmp	r4, r3
 800b086:	d12a      	bne.n	800b0de <__swbuf_r+0x6e>
 800b088:	686c      	ldr	r4, [r5, #4]
 800b08a:	69a3      	ldr	r3, [r4, #24]
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	071a      	lsls	r2, r3, #28
 800b092:	d52e      	bpl.n	800b0f2 <__swbuf_r+0x82>
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	b363      	cbz	r3, 800b0f2 <__swbuf_r+0x82>
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	6820      	ldr	r0, [r4, #0]
 800b09c:	1ac0      	subs	r0, r0, r3
 800b09e:	6963      	ldr	r3, [r4, #20]
 800b0a0:	b2f6      	uxtb	r6, r6
 800b0a2:	4298      	cmp	r0, r3
 800b0a4:	4637      	mov	r7, r6
 800b0a6:	db04      	blt.n	800b0b2 <__swbuf_r+0x42>
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f000 f928 	bl	800b300 <_fflush_r>
 800b0b0:	bb28      	cbnz	r0, 800b0fe <__swbuf_r+0x8e>
 800b0b2:	68a3      	ldr	r3, [r4, #8]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	60a3      	str	r3, [r4, #8]
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	6022      	str	r2, [r4, #0]
 800b0be:	701e      	strb	r6, [r3, #0]
 800b0c0:	6963      	ldr	r3, [r4, #20]
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	4298      	cmp	r0, r3
 800b0c6:	d004      	beq.n	800b0d2 <__swbuf_r+0x62>
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	07db      	lsls	r3, r3, #31
 800b0cc:	d519      	bpl.n	800b102 <__swbuf_r+0x92>
 800b0ce:	2e0a      	cmp	r6, #10
 800b0d0:	d117      	bne.n	800b102 <__swbuf_r+0x92>
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f000 f913 	bl	800b300 <_fflush_r>
 800b0da:	b190      	cbz	r0, 800b102 <__swbuf_r+0x92>
 800b0dc:	e00f      	b.n	800b0fe <__swbuf_r+0x8e>
 800b0de:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <__swbuf_r+0x9c>)
 800b0e0:	429c      	cmp	r4, r3
 800b0e2:	d101      	bne.n	800b0e8 <__swbuf_r+0x78>
 800b0e4:	68ac      	ldr	r4, [r5, #8]
 800b0e6:	e7d0      	b.n	800b08a <__swbuf_r+0x1a>
 800b0e8:	4b09      	ldr	r3, [pc, #36]	; (800b110 <__swbuf_r+0xa0>)
 800b0ea:	429c      	cmp	r4, r3
 800b0ec:	bf08      	it	eq
 800b0ee:	68ec      	ldreq	r4, [r5, #12]
 800b0f0:	e7cb      	b.n	800b08a <__swbuf_r+0x1a>
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f000 f80d 	bl	800b114 <__swsetup_r>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d0cc      	beq.n	800b098 <__swbuf_r+0x28>
 800b0fe:	f04f 37ff 	mov.w	r7, #4294967295
 800b102:	4638      	mov	r0, r7
 800b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b106:	bf00      	nop
 800b108:	0800d930 	.word	0x0800d930
 800b10c:	0800d950 	.word	0x0800d950
 800b110:	0800d910 	.word	0x0800d910

0800b114 <__swsetup_r>:
 800b114:	4b32      	ldr	r3, [pc, #200]	; (800b1e0 <__swsetup_r+0xcc>)
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	681d      	ldr	r5, [r3, #0]
 800b11a:	4606      	mov	r6, r0
 800b11c:	460c      	mov	r4, r1
 800b11e:	b125      	cbz	r5, 800b12a <__swsetup_r+0x16>
 800b120:	69ab      	ldr	r3, [r5, #24]
 800b122:	b913      	cbnz	r3, 800b12a <__swsetup_r+0x16>
 800b124:	4628      	mov	r0, r5
 800b126:	f000 f955 	bl	800b3d4 <__sinit>
 800b12a:	4b2e      	ldr	r3, [pc, #184]	; (800b1e4 <__swsetup_r+0xd0>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	d10f      	bne.n	800b150 <__swsetup_r+0x3c>
 800b130:	686c      	ldr	r4, [r5, #4]
 800b132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b136:	b29a      	uxth	r2, r3
 800b138:	0715      	lsls	r5, r2, #28
 800b13a:	d42c      	bmi.n	800b196 <__swsetup_r+0x82>
 800b13c:	06d0      	lsls	r0, r2, #27
 800b13e:	d411      	bmi.n	800b164 <__swsetup_r+0x50>
 800b140:	2209      	movs	r2, #9
 800b142:	6032      	str	r2, [r6, #0]
 800b144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	f04f 30ff 	mov.w	r0, #4294967295
 800b14e:	bd70      	pop	{r4, r5, r6, pc}
 800b150:	4b25      	ldr	r3, [pc, #148]	; (800b1e8 <__swsetup_r+0xd4>)
 800b152:	429c      	cmp	r4, r3
 800b154:	d101      	bne.n	800b15a <__swsetup_r+0x46>
 800b156:	68ac      	ldr	r4, [r5, #8]
 800b158:	e7eb      	b.n	800b132 <__swsetup_r+0x1e>
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <__swsetup_r+0xd8>)
 800b15c:	429c      	cmp	r4, r3
 800b15e:	bf08      	it	eq
 800b160:	68ec      	ldreq	r4, [r5, #12]
 800b162:	e7e6      	b.n	800b132 <__swsetup_r+0x1e>
 800b164:	0751      	lsls	r1, r2, #29
 800b166:	d512      	bpl.n	800b18e <__swsetup_r+0x7a>
 800b168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b16a:	b141      	cbz	r1, 800b17e <__swsetup_r+0x6a>
 800b16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b170:	4299      	cmp	r1, r3
 800b172:	d002      	beq.n	800b17a <__swsetup_r+0x66>
 800b174:	4630      	mov	r0, r6
 800b176:	f7ff fea7 	bl	800aec8 <_free_r>
 800b17a:	2300      	movs	r3, #0
 800b17c:	6363      	str	r3, [r4, #52]	; 0x34
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b184:	81a3      	strh	r3, [r4, #12]
 800b186:	2300      	movs	r3, #0
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f043 0308 	orr.w	r3, r3, #8
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	6923      	ldr	r3, [r4, #16]
 800b198:	b94b      	cbnz	r3, 800b1ae <__swsetup_r+0x9a>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1a4:	d003      	beq.n	800b1ae <__swsetup_r+0x9a>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f000 f9c1 	bl	800b530 <__smakebuf_r>
 800b1ae:	89a2      	ldrh	r2, [r4, #12]
 800b1b0:	f012 0301 	ands.w	r3, r2, #1
 800b1b4:	d00c      	beq.n	800b1d0 <__swsetup_r+0xbc>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60a3      	str	r3, [r4, #8]
 800b1ba:	6963      	ldr	r3, [r4, #20]
 800b1bc:	425b      	negs	r3, r3
 800b1be:	61a3      	str	r3, [r4, #24]
 800b1c0:	6923      	ldr	r3, [r4, #16]
 800b1c2:	b953      	cbnz	r3, 800b1da <__swsetup_r+0xc6>
 800b1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b1cc:	d1ba      	bne.n	800b144 <__swsetup_r+0x30>
 800b1ce:	bd70      	pop	{r4, r5, r6, pc}
 800b1d0:	0792      	lsls	r2, r2, #30
 800b1d2:	bf58      	it	pl
 800b1d4:	6963      	ldrpl	r3, [r4, #20]
 800b1d6:	60a3      	str	r3, [r4, #8]
 800b1d8:	e7f2      	b.n	800b1c0 <__swsetup_r+0xac>
 800b1da:	2000      	movs	r0, #0
 800b1dc:	e7f7      	b.n	800b1ce <__swsetup_r+0xba>
 800b1de:	bf00      	nop
 800b1e0:	20000174 	.word	0x20000174
 800b1e4:	0800d930 	.word	0x0800d930
 800b1e8:	0800d950 	.word	0x0800d950
 800b1ec:	0800d910 	.word	0x0800d910

0800b1f0 <__sflush_r>:
 800b1f0:	898a      	ldrh	r2, [r1, #12]
 800b1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	0710      	lsls	r0, r2, #28
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	d45a      	bmi.n	800b2b4 <__sflush_r+0xc4>
 800b1fe:	684b      	ldr	r3, [r1, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	dc05      	bgt.n	800b210 <__sflush_r+0x20>
 800b204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	dc02      	bgt.n	800b210 <__sflush_r+0x20>
 800b20a:	2000      	movs	r0, #0
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b212:	2e00      	cmp	r6, #0
 800b214:	d0f9      	beq.n	800b20a <__sflush_r+0x1a>
 800b216:	2300      	movs	r3, #0
 800b218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b21c:	682f      	ldr	r7, [r5, #0]
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	d033      	beq.n	800b28a <__sflush_r+0x9a>
 800b222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	075a      	lsls	r2, r3, #29
 800b228:	d505      	bpl.n	800b236 <__sflush_r+0x46>
 800b22a:	6863      	ldr	r3, [r4, #4]
 800b22c:	1ac0      	subs	r0, r0, r3
 800b22e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b230:	b10b      	cbz	r3, 800b236 <__sflush_r+0x46>
 800b232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b234:	1ac0      	subs	r0, r0, r3
 800b236:	2300      	movs	r3, #0
 800b238:	4602      	mov	r2, r0
 800b23a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b23c:	6a21      	ldr	r1, [r4, #32]
 800b23e:	4628      	mov	r0, r5
 800b240:	47b0      	blx	r6
 800b242:	1c43      	adds	r3, r0, #1
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	d106      	bne.n	800b256 <__sflush_r+0x66>
 800b248:	6829      	ldr	r1, [r5, #0]
 800b24a:	291d      	cmp	r1, #29
 800b24c:	d84b      	bhi.n	800b2e6 <__sflush_r+0xf6>
 800b24e:	4a2b      	ldr	r2, [pc, #172]	; (800b2fc <__sflush_r+0x10c>)
 800b250:	40ca      	lsrs	r2, r1
 800b252:	07d6      	lsls	r6, r2, #31
 800b254:	d547      	bpl.n	800b2e6 <__sflush_r+0xf6>
 800b256:	2200      	movs	r2, #0
 800b258:	6062      	str	r2, [r4, #4]
 800b25a:	04d9      	lsls	r1, r3, #19
 800b25c:	6922      	ldr	r2, [r4, #16]
 800b25e:	6022      	str	r2, [r4, #0]
 800b260:	d504      	bpl.n	800b26c <__sflush_r+0x7c>
 800b262:	1c42      	adds	r2, r0, #1
 800b264:	d101      	bne.n	800b26a <__sflush_r+0x7a>
 800b266:	682b      	ldr	r3, [r5, #0]
 800b268:	b903      	cbnz	r3, 800b26c <__sflush_r+0x7c>
 800b26a:	6560      	str	r0, [r4, #84]	; 0x54
 800b26c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b26e:	602f      	str	r7, [r5, #0]
 800b270:	2900      	cmp	r1, #0
 800b272:	d0ca      	beq.n	800b20a <__sflush_r+0x1a>
 800b274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b278:	4299      	cmp	r1, r3
 800b27a:	d002      	beq.n	800b282 <__sflush_r+0x92>
 800b27c:	4628      	mov	r0, r5
 800b27e:	f7ff fe23 	bl	800aec8 <_free_r>
 800b282:	2000      	movs	r0, #0
 800b284:	6360      	str	r0, [r4, #52]	; 0x34
 800b286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b28a:	6a21      	ldr	r1, [r4, #32]
 800b28c:	2301      	movs	r3, #1
 800b28e:	4628      	mov	r0, r5
 800b290:	47b0      	blx	r6
 800b292:	1c41      	adds	r1, r0, #1
 800b294:	d1c6      	bne.n	800b224 <__sflush_r+0x34>
 800b296:	682b      	ldr	r3, [r5, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d0c3      	beq.n	800b224 <__sflush_r+0x34>
 800b29c:	2b1d      	cmp	r3, #29
 800b29e:	d001      	beq.n	800b2a4 <__sflush_r+0xb4>
 800b2a0:	2b16      	cmp	r3, #22
 800b2a2:	d101      	bne.n	800b2a8 <__sflush_r+0xb8>
 800b2a4:	602f      	str	r7, [r5, #0]
 800b2a6:	e7b0      	b.n	800b20a <__sflush_r+0x1a>
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ae:	81a3      	strh	r3, [r4, #12]
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b4:	690f      	ldr	r7, [r1, #16]
 800b2b6:	2f00      	cmp	r7, #0
 800b2b8:	d0a7      	beq.n	800b20a <__sflush_r+0x1a>
 800b2ba:	0793      	lsls	r3, r2, #30
 800b2bc:	680e      	ldr	r6, [r1, #0]
 800b2be:	bf08      	it	eq
 800b2c0:	694b      	ldreq	r3, [r1, #20]
 800b2c2:	600f      	str	r7, [r1, #0]
 800b2c4:	bf18      	it	ne
 800b2c6:	2300      	movne	r3, #0
 800b2c8:	eba6 0807 	sub.w	r8, r6, r7
 800b2cc:	608b      	str	r3, [r1, #8]
 800b2ce:	f1b8 0f00 	cmp.w	r8, #0
 800b2d2:	dd9a      	ble.n	800b20a <__sflush_r+0x1a>
 800b2d4:	4643      	mov	r3, r8
 800b2d6:	463a      	mov	r2, r7
 800b2d8:	6a21      	ldr	r1, [r4, #32]
 800b2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b0      	blx	r6
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	dc07      	bgt.n	800b2f4 <__sflush_r+0x104>
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ea:	81a3      	strh	r3, [r4, #12]
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f4:	4407      	add	r7, r0
 800b2f6:	eba8 0800 	sub.w	r8, r8, r0
 800b2fa:	e7e8      	b.n	800b2ce <__sflush_r+0xde>
 800b2fc:	20400001 	.word	0x20400001

0800b300 <_fflush_r>:
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	690b      	ldr	r3, [r1, #16]
 800b304:	4605      	mov	r5, r0
 800b306:	460c      	mov	r4, r1
 800b308:	b1db      	cbz	r3, 800b342 <_fflush_r+0x42>
 800b30a:	b118      	cbz	r0, 800b314 <_fflush_r+0x14>
 800b30c:	6983      	ldr	r3, [r0, #24]
 800b30e:	b90b      	cbnz	r3, 800b314 <_fflush_r+0x14>
 800b310:	f000 f860 	bl	800b3d4 <__sinit>
 800b314:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <_fflush_r+0x48>)
 800b316:	429c      	cmp	r4, r3
 800b318:	d109      	bne.n	800b32e <_fflush_r+0x2e>
 800b31a:	686c      	ldr	r4, [r5, #4]
 800b31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b320:	b17b      	cbz	r3, 800b342 <_fflush_r+0x42>
 800b322:	4621      	mov	r1, r4
 800b324:	4628      	mov	r0, r5
 800b326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b32a:	f7ff bf61 	b.w	800b1f0 <__sflush_r>
 800b32e:	4b07      	ldr	r3, [pc, #28]	; (800b34c <_fflush_r+0x4c>)
 800b330:	429c      	cmp	r4, r3
 800b332:	d101      	bne.n	800b338 <_fflush_r+0x38>
 800b334:	68ac      	ldr	r4, [r5, #8]
 800b336:	e7f1      	b.n	800b31c <_fflush_r+0x1c>
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <_fflush_r+0x50>)
 800b33a:	429c      	cmp	r4, r3
 800b33c:	bf08      	it	eq
 800b33e:	68ec      	ldreq	r4, [r5, #12]
 800b340:	e7ec      	b.n	800b31c <_fflush_r+0x1c>
 800b342:	2000      	movs	r0, #0
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	0800d930 	.word	0x0800d930
 800b34c:	0800d950 	.word	0x0800d950
 800b350:	0800d910 	.word	0x0800d910

0800b354 <_cleanup_r>:
 800b354:	4901      	ldr	r1, [pc, #4]	; (800b35c <_cleanup_r+0x8>)
 800b356:	f000 b8a9 	b.w	800b4ac <_fwalk_reent>
 800b35a:	bf00      	nop
 800b35c:	0800b301 	.word	0x0800b301

0800b360 <std.isra.0>:
 800b360:	2300      	movs	r3, #0
 800b362:	b510      	push	{r4, lr}
 800b364:	4604      	mov	r4, r0
 800b366:	6003      	str	r3, [r0, #0]
 800b368:	6043      	str	r3, [r0, #4]
 800b36a:	6083      	str	r3, [r0, #8]
 800b36c:	8181      	strh	r1, [r0, #12]
 800b36e:	6643      	str	r3, [r0, #100]	; 0x64
 800b370:	81c2      	strh	r2, [r0, #14]
 800b372:	6103      	str	r3, [r0, #16]
 800b374:	6143      	str	r3, [r0, #20]
 800b376:	6183      	str	r3, [r0, #24]
 800b378:	4619      	mov	r1, r3
 800b37a:	2208      	movs	r2, #8
 800b37c:	305c      	adds	r0, #92	; 0x5c
 800b37e:	f000 f917 	bl	800b5b0 <memset>
 800b382:	4b05      	ldr	r3, [pc, #20]	; (800b398 <std.isra.0+0x38>)
 800b384:	6263      	str	r3, [r4, #36]	; 0x24
 800b386:	4b05      	ldr	r3, [pc, #20]	; (800b39c <std.isra.0+0x3c>)
 800b388:	62a3      	str	r3, [r4, #40]	; 0x28
 800b38a:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <std.isra.0+0x40>)
 800b38c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b38e:	4b05      	ldr	r3, [pc, #20]	; (800b3a4 <std.isra.0+0x44>)
 800b390:	6224      	str	r4, [r4, #32]
 800b392:	6323      	str	r3, [r4, #48]	; 0x30
 800b394:	bd10      	pop	{r4, pc}
 800b396:	bf00      	nop
 800b398:	0800bb71 	.word	0x0800bb71
 800b39c:	0800bb93 	.word	0x0800bb93
 800b3a0:	0800bbcb 	.word	0x0800bbcb
 800b3a4:	0800bbef 	.word	0x0800bbef

0800b3a8 <__sfmoreglue>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	1e4a      	subs	r2, r1, #1
 800b3ac:	2568      	movs	r5, #104	; 0x68
 800b3ae:	4355      	muls	r5, r2
 800b3b0:	460e      	mov	r6, r1
 800b3b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3b6:	f7ff fdd5 	bl	800af64 <_malloc_r>
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	b140      	cbz	r0, 800b3d0 <__sfmoreglue+0x28>
 800b3be:	2100      	movs	r1, #0
 800b3c0:	e880 0042 	stmia.w	r0, {r1, r6}
 800b3c4:	300c      	adds	r0, #12
 800b3c6:	60a0      	str	r0, [r4, #8]
 800b3c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3cc:	f000 f8f0 	bl	800b5b0 <memset>
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}

0800b3d4 <__sinit>:
 800b3d4:	6983      	ldr	r3, [r0, #24]
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	4604      	mov	r4, r0
 800b3da:	bb33      	cbnz	r3, 800b42a <__sinit+0x56>
 800b3dc:	6483      	str	r3, [r0, #72]	; 0x48
 800b3de:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b3e0:	6503      	str	r3, [r0, #80]	; 0x50
 800b3e2:	4b12      	ldr	r3, [pc, #72]	; (800b42c <__sinit+0x58>)
 800b3e4:	4a12      	ldr	r2, [pc, #72]	; (800b430 <__sinit+0x5c>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6282      	str	r2, [r0, #40]	; 0x28
 800b3ea:	4298      	cmp	r0, r3
 800b3ec:	bf04      	itt	eq
 800b3ee:	2301      	moveq	r3, #1
 800b3f0:	6183      	streq	r3, [r0, #24]
 800b3f2:	f000 f81f 	bl	800b434 <__sfp>
 800b3f6:	6060      	str	r0, [r4, #4]
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 f81b 	bl	800b434 <__sfp>
 800b3fe:	60a0      	str	r0, [r4, #8]
 800b400:	4620      	mov	r0, r4
 800b402:	f000 f817 	bl	800b434 <__sfp>
 800b406:	2200      	movs	r2, #0
 800b408:	60e0      	str	r0, [r4, #12]
 800b40a:	2104      	movs	r1, #4
 800b40c:	6860      	ldr	r0, [r4, #4]
 800b40e:	f7ff ffa7 	bl	800b360 <std.isra.0>
 800b412:	2201      	movs	r2, #1
 800b414:	2109      	movs	r1, #9
 800b416:	68a0      	ldr	r0, [r4, #8]
 800b418:	f7ff ffa2 	bl	800b360 <std.isra.0>
 800b41c:	2202      	movs	r2, #2
 800b41e:	2112      	movs	r1, #18
 800b420:	68e0      	ldr	r0, [r4, #12]
 800b422:	f7ff ff9d 	bl	800b360 <std.isra.0>
 800b426:	2301      	movs	r3, #1
 800b428:	61a3      	str	r3, [r4, #24]
 800b42a:	bd10      	pop	{r4, pc}
 800b42c:	0800d970 	.word	0x0800d970
 800b430:	0800b355 	.word	0x0800b355

0800b434 <__sfp>:
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	4b1c      	ldr	r3, [pc, #112]	; (800b4a8 <__sfp+0x74>)
 800b438:	681e      	ldr	r6, [r3, #0]
 800b43a:	69b3      	ldr	r3, [r6, #24]
 800b43c:	4607      	mov	r7, r0
 800b43e:	b913      	cbnz	r3, 800b446 <__sfp+0x12>
 800b440:	4630      	mov	r0, r6
 800b442:	f7ff ffc7 	bl	800b3d4 <__sinit>
 800b446:	3648      	adds	r6, #72	; 0x48
 800b448:	68b4      	ldr	r4, [r6, #8]
 800b44a:	6873      	ldr	r3, [r6, #4]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	d503      	bpl.n	800b458 <__sfp+0x24>
 800b450:	6833      	ldr	r3, [r6, #0]
 800b452:	b133      	cbz	r3, 800b462 <__sfp+0x2e>
 800b454:	6836      	ldr	r6, [r6, #0]
 800b456:	e7f7      	b.n	800b448 <__sfp+0x14>
 800b458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b45c:	b16d      	cbz	r5, 800b47a <__sfp+0x46>
 800b45e:	3468      	adds	r4, #104	; 0x68
 800b460:	e7f4      	b.n	800b44c <__sfp+0x18>
 800b462:	2104      	movs	r1, #4
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff ff9f 	bl	800b3a8 <__sfmoreglue>
 800b46a:	6030      	str	r0, [r6, #0]
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d1f1      	bne.n	800b454 <__sfp+0x20>
 800b470:	230c      	movs	r3, #12
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	4604      	mov	r4, r0
 800b476:	4620      	mov	r0, r4
 800b478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b47a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b47e:	81e3      	strh	r3, [r4, #14]
 800b480:	2301      	movs	r3, #1
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	6665      	str	r5, [r4, #100]	; 0x64
 800b486:	6025      	str	r5, [r4, #0]
 800b488:	60a5      	str	r5, [r4, #8]
 800b48a:	6065      	str	r5, [r4, #4]
 800b48c:	6125      	str	r5, [r4, #16]
 800b48e:	6165      	str	r5, [r4, #20]
 800b490:	61a5      	str	r5, [r4, #24]
 800b492:	2208      	movs	r2, #8
 800b494:	4629      	mov	r1, r5
 800b496:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b49a:	f000 f889 	bl	800b5b0 <memset>
 800b49e:	6365      	str	r5, [r4, #52]	; 0x34
 800b4a0:	63a5      	str	r5, [r4, #56]	; 0x38
 800b4a2:	64a5      	str	r5, [r4, #72]	; 0x48
 800b4a4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b4a6:	e7e6      	b.n	800b476 <__sfp+0x42>
 800b4a8:	0800d970 	.word	0x0800d970

0800b4ac <_fwalk_reent>:
 800b4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	4689      	mov	r9, r1
 800b4b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4b8:	2600      	movs	r6, #0
 800b4ba:	b914      	cbnz	r4, 800b4c2 <_fwalk_reent+0x16>
 800b4bc:	4630      	mov	r0, r6
 800b4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4c2:	68a5      	ldr	r5, [r4, #8]
 800b4c4:	6867      	ldr	r7, [r4, #4]
 800b4c6:	3f01      	subs	r7, #1
 800b4c8:	d501      	bpl.n	800b4ce <_fwalk_reent+0x22>
 800b4ca:	6824      	ldr	r4, [r4, #0]
 800b4cc:	e7f5      	b.n	800b4ba <_fwalk_reent+0xe>
 800b4ce:	89ab      	ldrh	r3, [r5, #12]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d907      	bls.n	800b4e4 <_fwalk_reent+0x38>
 800b4d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	d003      	beq.n	800b4e4 <_fwalk_reent+0x38>
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4640      	mov	r0, r8
 800b4e0:	47c8      	blx	r9
 800b4e2:	4306      	orrs	r6, r0
 800b4e4:	3568      	adds	r5, #104	; 0x68
 800b4e6:	e7ee      	b.n	800b4c6 <_fwalk_reent+0x1a>

0800b4e8 <__swhatbuf_r>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	460e      	mov	r6, r1
 800b4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f0:	2900      	cmp	r1, #0
 800b4f2:	b090      	sub	sp, #64	; 0x40
 800b4f4:	4614      	mov	r4, r2
 800b4f6:	461d      	mov	r5, r3
 800b4f8:	da07      	bge.n	800b50a <__swhatbuf_r+0x22>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	89b3      	ldrh	r3, [r6, #12]
 800b500:	061a      	lsls	r2, r3, #24
 800b502:	d410      	bmi.n	800b526 <__swhatbuf_r+0x3e>
 800b504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b508:	e00e      	b.n	800b528 <__swhatbuf_r+0x40>
 800b50a:	aa01      	add	r2, sp, #4
 800b50c:	f000 fb96 	bl	800bc3c <_fstat_r>
 800b510:	2800      	cmp	r0, #0
 800b512:	dbf2      	blt.n	800b4fa <__swhatbuf_r+0x12>
 800b514:	9a02      	ldr	r2, [sp, #8]
 800b516:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b51a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b51e:	425a      	negs	r2, r3
 800b520:	415a      	adcs	r2, r3
 800b522:	602a      	str	r2, [r5, #0]
 800b524:	e7ee      	b.n	800b504 <__swhatbuf_r+0x1c>
 800b526:	2340      	movs	r3, #64	; 0x40
 800b528:	2000      	movs	r0, #0
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	b010      	add	sp, #64	; 0x40
 800b52e:	bd70      	pop	{r4, r5, r6, pc}

0800b530 <__smakebuf_r>:
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b534:	079d      	lsls	r5, r3, #30
 800b536:	4606      	mov	r6, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d507      	bpl.n	800b54c <__smakebuf_r+0x1c>
 800b53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2301      	movs	r3, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	b002      	add	sp, #8
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	ab01      	add	r3, sp, #4
 800b54e:	466a      	mov	r2, sp
 800b550:	f7ff ffca 	bl	800b4e8 <__swhatbuf_r>
 800b554:	9900      	ldr	r1, [sp, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff fd03 	bl	800af64 <_malloc_r>
 800b55e:	b948      	cbnz	r0, 800b574 <__smakebuf_r+0x44>
 800b560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b564:	059a      	lsls	r2, r3, #22
 800b566:	d4ef      	bmi.n	800b548 <__smakebuf_r+0x18>
 800b568:	f023 0303 	bic.w	r3, r3, #3
 800b56c:	f043 0302 	orr.w	r3, r3, #2
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	e7e3      	b.n	800b53c <__smakebuf_r+0xc>
 800b574:	4b0d      	ldr	r3, [pc, #52]	; (800b5ac <__smakebuf_r+0x7c>)
 800b576:	62b3      	str	r3, [r6, #40]	; 0x28
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	6020      	str	r0, [r4, #0]
 800b57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	9b00      	ldr	r3, [sp, #0]
 800b584:	6163      	str	r3, [r4, #20]
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	6120      	str	r0, [r4, #16]
 800b58a:	b15b      	cbz	r3, 800b5a4 <__smakebuf_r+0x74>
 800b58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b590:	4630      	mov	r0, r6
 800b592:	f000 fb65 	bl	800bc60 <_isatty_r>
 800b596:	b128      	cbz	r0, 800b5a4 <__smakebuf_r+0x74>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	f043 0301 	orr.w	r3, r3, #1
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	431d      	orrs	r5, r3
 800b5a8:	81a5      	strh	r5, [r4, #12]
 800b5aa:	e7cd      	b.n	800b548 <__smakebuf_r+0x18>
 800b5ac:	0800b355 	.word	0x0800b355

0800b5b0 <memset>:
 800b5b0:	4402      	add	r2, r0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d100      	bne.n	800b5ba <memset+0xa>
 800b5b8:	4770      	bx	lr
 800b5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b5be:	e7f9      	b.n	800b5b4 <memset+0x4>

0800b5c0 <__malloc_lock>:
 800b5c0:	4770      	bx	lr

0800b5c2 <__malloc_unlock>:
 800b5c2:	4770      	bx	lr

0800b5c4 <__sfputc_r>:
 800b5c4:	6893      	ldr	r3, [r2, #8]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	b410      	push	{r4}
 800b5cc:	6093      	str	r3, [r2, #8]
 800b5ce:	da09      	bge.n	800b5e4 <__sfputc_r+0x20>
 800b5d0:	6994      	ldr	r4, [r2, #24]
 800b5d2:	42a3      	cmp	r3, r4
 800b5d4:	db02      	blt.n	800b5dc <__sfputc_r+0x18>
 800b5d6:	b2cb      	uxtb	r3, r1
 800b5d8:	2b0a      	cmp	r3, #10
 800b5da:	d103      	bne.n	800b5e4 <__sfputc_r+0x20>
 800b5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e0:	f7ff bd46 	b.w	800b070 <__swbuf_r>
 800b5e4:	6813      	ldr	r3, [r2, #0]
 800b5e6:	1c58      	adds	r0, r3, #1
 800b5e8:	6010      	str	r0, [r2, #0]
 800b5ea:	7019      	strb	r1, [r3, #0]
 800b5ec:	b2c8      	uxtb	r0, r1
 800b5ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <__sfputs_r>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	4614      	mov	r4, r2
 800b5fc:	18d5      	adds	r5, r2, r3
 800b5fe:	42ac      	cmp	r4, r5
 800b600:	d101      	bne.n	800b606 <__sfputs_r+0x12>
 800b602:	2000      	movs	r0, #0
 800b604:	e007      	b.n	800b616 <__sfputs_r+0x22>
 800b606:	463a      	mov	r2, r7
 800b608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff ffd9 	bl	800b5c4 <__sfputc_r>
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	d1f3      	bne.n	800b5fe <__sfputs_r+0xa>
 800b616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b618 <_vfiprintf_r>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	b09d      	sub	sp, #116	; 0x74
 800b61e:	460c      	mov	r4, r1
 800b620:	4617      	mov	r7, r2
 800b622:	9303      	str	r3, [sp, #12]
 800b624:	4606      	mov	r6, r0
 800b626:	b118      	cbz	r0, 800b630 <_vfiprintf_r+0x18>
 800b628:	6983      	ldr	r3, [r0, #24]
 800b62a:	b90b      	cbnz	r3, 800b630 <_vfiprintf_r+0x18>
 800b62c:	f7ff fed2 	bl	800b3d4 <__sinit>
 800b630:	4b7c      	ldr	r3, [pc, #496]	; (800b824 <_vfiprintf_r+0x20c>)
 800b632:	429c      	cmp	r4, r3
 800b634:	d157      	bne.n	800b6e6 <_vfiprintf_r+0xce>
 800b636:	6874      	ldr	r4, [r6, #4]
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	0718      	lsls	r0, r3, #28
 800b63c:	d55d      	bpl.n	800b6fa <_vfiprintf_r+0xe2>
 800b63e:	6923      	ldr	r3, [r4, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d05a      	beq.n	800b6fa <_vfiprintf_r+0xe2>
 800b644:	2300      	movs	r3, #0
 800b646:	9309      	str	r3, [sp, #36]	; 0x24
 800b648:	2320      	movs	r3, #32
 800b64a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b64e:	2330      	movs	r3, #48	; 0x30
 800b650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b654:	f04f 0b01 	mov.w	fp, #1
 800b658:	46b8      	mov	r8, r7
 800b65a:	4645      	mov	r5, r8
 800b65c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b660:	2b00      	cmp	r3, #0
 800b662:	d155      	bne.n	800b710 <_vfiprintf_r+0xf8>
 800b664:	ebb8 0a07 	subs.w	sl, r8, r7
 800b668:	d00b      	beq.n	800b682 <_vfiprintf_r+0x6a>
 800b66a:	4653      	mov	r3, sl
 800b66c:	463a      	mov	r2, r7
 800b66e:	4621      	mov	r1, r4
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff ffbf 	bl	800b5f4 <__sfputs_r>
 800b676:	3001      	adds	r0, #1
 800b678:	f000 80c4 	beq.w	800b804 <_vfiprintf_r+0x1ec>
 800b67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67e:	4453      	add	r3, sl
 800b680:	9309      	str	r3, [sp, #36]	; 0x24
 800b682:	f898 3000 	ldrb.w	r3, [r8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 80bc 	beq.w	800b804 <_vfiprintf_r+0x1ec>
 800b68c:	2300      	movs	r3, #0
 800b68e:	f04f 32ff 	mov.w	r2, #4294967295
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	9307      	str	r3, [sp, #28]
 800b696:	9205      	str	r2, [sp, #20]
 800b698:	9306      	str	r3, [sp, #24]
 800b69a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b69e:	931a      	str	r3, [sp, #104]	; 0x68
 800b6a0:	2205      	movs	r2, #5
 800b6a2:	7829      	ldrb	r1, [r5, #0]
 800b6a4:	4860      	ldr	r0, [pc, #384]	; (800b828 <_vfiprintf_r+0x210>)
 800b6a6:	f7f4 fdb3 	bl	8000210 <memchr>
 800b6aa:	f105 0801 	add.w	r8, r5, #1
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d131      	bne.n	800b718 <_vfiprintf_r+0x100>
 800b6b4:	06d9      	lsls	r1, r3, #27
 800b6b6:	bf44      	itt	mi
 800b6b8:	2220      	movmi	r2, #32
 800b6ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6be:	071a      	lsls	r2, r3, #28
 800b6c0:	bf44      	itt	mi
 800b6c2:	222b      	movmi	r2, #43	; 0x2b
 800b6c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6c8:	782a      	ldrb	r2, [r5, #0]
 800b6ca:	2a2a      	cmp	r2, #42	; 0x2a
 800b6cc:	d02c      	beq.n	800b728 <_vfiprintf_r+0x110>
 800b6ce:	9a07      	ldr	r2, [sp, #28]
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	200a      	movs	r0, #10
 800b6d4:	46a8      	mov	r8, r5
 800b6d6:	3501      	adds	r5, #1
 800b6d8:	f898 3000 	ldrb.w	r3, [r8]
 800b6dc:	3b30      	subs	r3, #48	; 0x30
 800b6de:	2b09      	cmp	r3, #9
 800b6e0:	d96d      	bls.n	800b7be <_vfiprintf_r+0x1a6>
 800b6e2:	b371      	cbz	r1, 800b742 <_vfiprintf_r+0x12a>
 800b6e4:	e026      	b.n	800b734 <_vfiprintf_r+0x11c>
 800b6e6:	4b51      	ldr	r3, [pc, #324]	; (800b82c <_vfiprintf_r+0x214>)
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	d101      	bne.n	800b6f0 <_vfiprintf_r+0xd8>
 800b6ec:	68b4      	ldr	r4, [r6, #8]
 800b6ee:	e7a3      	b.n	800b638 <_vfiprintf_r+0x20>
 800b6f0:	4b4f      	ldr	r3, [pc, #316]	; (800b830 <_vfiprintf_r+0x218>)
 800b6f2:	429c      	cmp	r4, r3
 800b6f4:	bf08      	it	eq
 800b6f6:	68f4      	ldreq	r4, [r6, #12]
 800b6f8:	e79e      	b.n	800b638 <_vfiprintf_r+0x20>
 800b6fa:	4621      	mov	r1, r4
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff fd09 	bl	800b114 <__swsetup_r>
 800b702:	2800      	cmp	r0, #0
 800b704:	d09e      	beq.n	800b644 <_vfiprintf_r+0x2c>
 800b706:	f04f 30ff 	mov.w	r0, #4294967295
 800b70a:	b01d      	add	sp, #116	; 0x74
 800b70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	2b25      	cmp	r3, #37	; 0x25
 800b712:	d0a7      	beq.n	800b664 <_vfiprintf_r+0x4c>
 800b714:	46a8      	mov	r8, r5
 800b716:	e7a0      	b.n	800b65a <_vfiprintf_r+0x42>
 800b718:	4a43      	ldr	r2, [pc, #268]	; (800b828 <_vfiprintf_r+0x210>)
 800b71a:	1a80      	subs	r0, r0, r2
 800b71c:	fa0b f000 	lsl.w	r0, fp, r0
 800b720:	4318      	orrs	r0, r3
 800b722:	9004      	str	r0, [sp, #16]
 800b724:	4645      	mov	r5, r8
 800b726:	e7bb      	b.n	800b6a0 <_vfiprintf_r+0x88>
 800b728:	9a03      	ldr	r2, [sp, #12]
 800b72a:	1d11      	adds	r1, r2, #4
 800b72c:	6812      	ldr	r2, [r2, #0]
 800b72e:	9103      	str	r1, [sp, #12]
 800b730:	2a00      	cmp	r2, #0
 800b732:	db01      	blt.n	800b738 <_vfiprintf_r+0x120>
 800b734:	9207      	str	r2, [sp, #28]
 800b736:	e004      	b.n	800b742 <_vfiprintf_r+0x12a>
 800b738:	4252      	negs	r2, r2
 800b73a:	f043 0302 	orr.w	r3, r3, #2
 800b73e:	9207      	str	r2, [sp, #28]
 800b740:	9304      	str	r3, [sp, #16]
 800b742:	f898 3000 	ldrb.w	r3, [r8]
 800b746:	2b2e      	cmp	r3, #46	; 0x2e
 800b748:	d110      	bne.n	800b76c <_vfiprintf_r+0x154>
 800b74a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b74e:	2b2a      	cmp	r3, #42	; 0x2a
 800b750:	f108 0101 	add.w	r1, r8, #1
 800b754:	d137      	bne.n	800b7c6 <_vfiprintf_r+0x1ae>
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	1d1a      	adds	r2, r3, #4
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	9203      	str	r2, [sp, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	bfb8      	it	lt
 800b762:	f04f 33ff 	movlt.w	r3, #4294967295
 800b766:	f108 0802 	add.w	r8, r8, #2
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	4d31      	ldr	r5, [pc, #196]	; (800b834 <_vfiprintf_r+0x21c>)
 800b76e:	f898 1000 	ldrb.w	r1, [r8]
 800b772:	2203      	movs	r2, #3
 800b774:	4628      	mov	r0, r5
 800b776:	f7f4 fd4b 	bl	8000210 <memchr>
 800b77a:	b140      	cbz	r0, 800b78e <_vfiprintf_r+0x176>
 800b77c:	2340      	movs	r3, #64	; 0x40
 800b77e:	1b40      	subs	r0, r0, r5
 800b780:	fa03 f000 	lsl.w	r0, r3, r0
 800b784:	9b04      	ldr	r3, [sp, #16]
 800b786:	4303      	orrs	r3, r0
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	f108 0801 	add.w	r8, r8, #1
 800b78e:	f898 1000 	ldrb.w	r1, [r8]
 800b792:	4829      	ldr	r0, [pc, #164]	; (800b838 <_vfiprintf_r+0x220>)
 800b794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b798:	2206      	movs	r2, #6
 800b79a:	f108 0701 	add.w	r7, r8, #1
 800b79e:	f7f4 fd37 	bl	8000210 <memchr>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d034      	beq.n	800b810 <_vfiprintf_r+0x1f8>
 800b7a6:	4b25      	ldr	r3, [pc, #148]	; (800b83c <_vfiprintf_r+0x224>)
 800b7a8:	bb03      	cbnz	r3, 800b7ec <_vfiprintf_r+0x1d4>
 800b7aa:	9b03      	ldr	r3, [sp, #12]
 800b7ac:	3307      	adds	r3, #7
 800b7ae:	f023 0307 	bic.w	r3, r3, #7
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	9303      	str	r3, [sp, #12]
 800b7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b8:	444b      	add	r3, r9
 800b7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b7bc:	e74c      	b.n	800b658 <_vfiprintf_r+0x40>
 800b7be:	fb00 3202 	mla	r2, r0, r2, r3
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	e786      	b.n	800b6d4 <_vfiprintf_r+0xbc>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9305      	str	r3, [sp, #20]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	250a      	movs	r5, #10
 800b7ce:	4688      	mov	r8, r1
 800b7d0:	3101      	adds	r1, #1
 800b7d2:	f898 2000 	ldrb.w	r2, [r8]
 800b7d6:	3a30      	subs	r2, #48	; 0x30
 800b7d8:	2a09      	cmp	r2, #9
 800b7da:	d903      	bls.n	800b7e4 <_vfiprintf_r+0x1cc>
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0c5      	beq.n	800b76c <_vfiprintf_r+0x154>
 800b7e0:	9005      	str	r0, [sp, #20]
 800b7e2:	e7c3      	b.n	800b76c <_vfiprintf_r+0x154>
 800b7e4:	fb05 2000 	mla	r0, r5, r0, r2
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e7f0      	b.n	800b7ce <_vfiprintf_r+0x1b6>
 800b7ec:	ab03      	add	r3, sp, #12
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	4b13      	ldr	r3, [pc, #76]	; (800b840 <_vfiprintf_r+0x228>)
 800b7f4:	a904      	add	r1, sp, #16
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f3af 8000 	nop.w
 800b7fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b800:	4681      	mov	r9, r0
 800b802:	d1d8      	bne.n	800b7b6 <_vfiprintf_r+0x19e>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	065b      	lsls	r3, r3, #25
 800b808:	f53f af7d 	bmi.w	800b706 <_vfiprintf_r+0xee>
 800b80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b80e:	e77c      	b.n	800b70a <_vfiprintf_r+0xf2>
 800b810:	ab03      	add	r3, sp, #12
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	4622      	mov	r2, r4
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <_vfiprintf_r+0x228>)
 800b818:	a904      	add	r1, sp, #16
 800b81a:	4630      	mov	r0, r6
 800b81c:	f000 f888 	bl	800b930 <_printf_i>
 800b820:	e7ec      	b.n	800b7fc <_vfiprintf_r+0x1e4>
 800b822:	bf00      	nop
 800b824:	0800d930 	.word	0x0800d930
 800b828:	0800d974 	.word	0x0800d974
 800b82c:	0800d950 	.word	0x0800d950
 800b830:	0800d910 	.word	0x0800d910
 800b834:	0800d97a 	.word	0x0800d97a
 800b838:	0800d97e 	.word	0x0800d97e
 800b83c:	00000000 	.word	0x00000000
 800b840:	0800b5f5 	.word	0x0800b5f5

0800b844 <_printf_common>:
 800b844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b848:	4691      	mov	r9, r2
 800b84a:	461f      	mov	r7, r3
 800b84c:	688a      	ldr	r2, [r1, #8]
 800b84e:	690b      	ldr	r3, [r1, #16]
 800b850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b854:	4293      	cmp	r3, r2
 800b856:	bfb8      	it	lt
 800b858:	4613      	movlt	r3, r2
 800b85a:	f8c9 3000 	str.w	r3, [r9]
 800b85e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b862:	4606      	mov	r6, r0
 800b864:	460c      	mov	r4, r1
 800b866:	b112      	cbz	r2, 800b86e <_printf_common+0x2a>
 800b868:	3301      	adds	r3, #1
 800b86a:	f8c9 3000 	str.w	r3, [r9]
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	0699      	lsls	r1, r3, #26
 800b872:	bf42      	ittt	mi
 800b874:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b878:	3302      	addmi	r3, #2
 800b87a:	f8c9 3000 	strmi.w	r3, [r9]
 800b87e:	6825      	ldr	r5, [r4, #0]
 800b880:	f015 0506 	ands.w	r5, r5, #6
 800b884:	d107      	bne.n	800b896 <_printf_common+0x52>
 800b886:	f104 0a19 	add.w	sl, r4, #25
 800b88a:	68e3      	ldr	r3, [r4, #12]
 800b88c:	f8d9 2000 	ldr.w	r2, [r9]
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	429d      	cmp	r5, r3
 800b894:	db29      	blt.n	800b8ea <_printf_common+0xa6>
 800b896:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	3300      	adds	r3, #0
 800b89e:	bf18      	it	ne
 800b8a0:	2301      	movne	r3, #1
 800b8a2:	0692      	lsls	r2, r2, #26
 800b8a4:	d42e      	bmi.n	800b904 <_printf_common+0xc0>
 800b8a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	47c0      	blx	r8
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d021      	beq.n	800b8f8 <_printf_common+0xb4>
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	68e5      	ldr	r5, [r4, #12]
 800b8b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b8bc:	f003 0306 	and.w	r3, r3, #6
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	bf08      	it	eq
 800b8c4:	1aad      	subeq	r5, r5, r2
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	6922      	ldr	r2, [r4, #16]
 800b8ca:	bf0c      	ite	eq
 800b8cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8d0:	2500      	movne	r5, #0
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	bfc4      	itt	gt
 800b8d6:	1a9b      	subgt	r3, r3, r2
 800b8d8:	18ed      	addgt	r5, r5, r3
 800b8da:	f04f 0900 	mov.w	r9, #0
 800b8de:	341a      	adds	r4, #26
 800b8e0:	454d      	cmp	r5, r9
 800b8e2:	d11b      	bne.n	800b91c <_printf_common+0xd8>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4652      	mov	r2, sl
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	47c0      	blx	r8
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d103      	bne.n	800b900 <_printf_common+0xbc>
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b900:	3501      	adds	r5, #1
 800b902:	e7c2      	b.n	800b88a <_printf_common+0x46>
 800b904:	18e1      	adds	r1, r4, r3
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	2030      	movs	r0, #48	; 0x30
 800b90a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b90e:	4422      	add	r2, r4
 800b910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b918:	3302      	adds	r3, #2
 800b91a:	e7c4      	b.n	800b8a6 <_printf_common+0x62>
 800b91c:	2301      	movs	r3, #1
 800b91e:	4622      	mov	r2, r4
 800b920:	4639      	mov	r1, r7
 800b922:	4630      	mov	r0, r6
 800b924:	47c0      	blx	r8
 800b926:	3001      	adds	r0, #1
 800b928:	d0e6      	beq.n	800b8f8 <_printf_common+0xb4>
 800b92a:	f109 0901 	add.w	r9, r9, #1
 800b92e:	e7d7      	b.n	800b8e0 <_printf_common+0x9c>

0800b930 <_printf_i>:
 800b930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b934:	4617      	mov	r7, r2
 800b936:	7e0a      	ldrb	r2, [r1, #24]
 800b938:	b085      	sub	sp, #20
 800b93a:	2a6e      	cmp	r2, #110	; 0x6e
 800b93c:	4698      	mov	r8, r3
 800b93e:	4606      	mov	r6, r0
 800b940:	460c      	mov	r4, r1
 800b942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b944:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800b948:	f000 80bc 	beq.w	800bac4 <_printf_i+0x194>
 800b94c:	d81a      	bhi.n	800b984 <_printf_i+0x54>
 800b94e:	2a63      	cmp	r2, #99	; 0x63
 800b950:	d02e      	beq.n	800b9b0 <_printf_i+0x80>
 800b952:	d80a      	bhi.n	800b96a <_printf_i+0x3a>
 800b954:	2a00      	cmp	r2, #0
 800b956:	f000 80c8 	beq.w	800baea <_printf_i+0x1ba>
 800b95a:	2a58      	cmp	r2, #88	; 0x58
 800b95c:	f000 808a 	beq.w	800ba74 <_printf_i+0x144>
 800b960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b964:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800b968:	e02a      	b.n	800b9c0 <_printf_i+0x90>
 800b96a:	2a64      	cmp	r2, #100	; 0x64
 800b96c:	d001      	beq.n	800b972 <_printf_i+0x42>
 800b96e:	2a69      	cmp	r2, #105	; 0x69
 800b970:	d1f6      	bne.n	800b960 <_printf_i+0x30>
 800b972:	6821      	ldr	r1, [r4, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b97a:	d023      	beq.n	800b9c4 <_printf_i+0x94>
 800b97c:	1d11      	adds	r1, r2, #4
 800b97e:	6019      	str	r1, [r3, #0]
 800b980:	6813      	ldr	r3, [r2, #0]
 800b982:	e027      	b.n	800b9d4 <_printf_i+0xa4>
 800b984:	2a73      	cmp	r2, #115	; 0x73
 800b986:	f000 80b4 	beq.w	800baf2 <_printf_i+0x1c2>
 800b98a:	d808      	bhi.n	800b99e <_printf_i+0x6e>
 800b98c:	2a6f      	cmp	r2, #111	; 0x6f
 800b98e:	d02a      	beq.n	800b9e6 <_printf_i+0xb6>
 800b990:	2a70      	cmp	r2, #112	; 0x70
 800b992:	d1e5      	bne.n	800b960 <_printf_i+0x30>
 800b994:	680a      	ldr	r2, [r1, #0]
 800b996:	f042 0220 	orr.w	r2, r2, #32
 800b99a:	600a      	str	r2, [r1, #0]
 800b99c:	e003      	b.n	800b9a6 <_printf_i+0x76>
 800b99e:	2a75      	cmp	r2, #117	; 0x75
 800b9a0:	d021      	beq.n	800b9e6 <_printf_i+0xb6>
 800b9a2:	2a78      	cmp	r2, #120	; 0x78
 800b9a4:	d1dc      	bne.n	800b960 <_printf_i+0x30>
 800b9a6:	2278      	movs	r2, #120	; 0x78
 800b9a8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b9ac:	496e      	ldr	r1, [pc, #440]	; (800bb68 <_printf_i+0x238>)
 800b9ae:	e064      	b.n	800ba7a <_printf_i+0x14a>
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800b9b6:	1d11      	adds	r1, r2, #4
 800b9b8:	6019      	str	r1, [r3, #0]
 800b9ba:	6813      	ldr	r3, [r2, #0]
 800b9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e0a3      	b.n	800bb0c <_printf_i+0x1dc>
 800b9c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b9c8:	f102 0104 	add.w	r1, r2, #4
 800b9cc:	6019      	str	r1, [r3, #0]
 800b9ce:	d0d7      	beq.n	800b980 <_printf_i+0x50>
 800b9d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da03      	bge.n	800b9e0 <_printf_i+0xb0>
 800b9d8:	222d      	movs	r2, #45	; 0x2d
 800b9da:	425b      	negs	r3, r3
 800b9dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b9e0:	4962      	ldr	r1, [pc, #392]	; (800bb6c <_printf_i+0x23c>)
 800b9e2:	220a      	movs	r2, #10
 800b9e4:	e017      	b.n	800ba16 <_printf_i+0xe6>
 800b9e6:	6820      	ldr	r0, [r4, #0]
 800b9e8:	6819      	ldr	r1, [r3, #0]
 800b9ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b9ee:	d003      	beq.n	800b9f8 <_printf_i+0xc8>
 800b9f0:	1d08      	adds	r0, r1, #4
 800b9f2:	6018      	str	r0, [r3, #0]
 800b9f4:	680b      	ldr	r3, [r1, #0]
 800b9f6:	e006      	b.n	800ba06 <_printf_i+0xd6>
 800b9f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9fc:	f101 0004 	add.w	r0, r1, #4
 800ba00:	6018      	str	r0, [r3, #0]
 800ba02:	d0f7      	beq.n	800b9f4 <_printf_i+0xc4>
 800ba04:	880b      	ldrh	r3, [r1, #0]
 800ba06:	4959      	ldr	r1, [pc, #356]	; (800bb6c <_printf_i+0x23c>)
 800ba08:	2a6f      	cmp	r2, #111	; 0x6f
 800ba0a:	bf14      	ite	ne
 800ba0c:	220a      	movne	r2, #10
 800ba0e:	2208      	moveq	r2, #8
 800ba10:	2000      	movs	r0, #0
 800ba12:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800ba16:	6865      	ldr	r5, [r4, #4]
 800ba18:	60a5      	str	r5, [r4, #8]
 800ba1a:	2d00      	cmp	r5, #0
 800ba1c:	f2c0 809c 	blt.w	800bb58 <_printf_i+0x228>
 800ba20:	6820      	ldr	r0, [r4, #0]
 800ba22:	f020 0004 	bic.w	r0, r0, #4
 800ba26:	6020      	str	r0, [r4, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d13f      	bne.n	800baac <_printf_i+0x17c>
 800ba2c:	2d00      	cmp	r5, #0
 800ba2e:	f040 8095 	bne.w	800bb5c <_printf_i+0x22c>
 800ba32:	4675      	mov	r5, lr
 800ba34:	2a08      	cmp	r2, #8
 800ba36:	d10b      	bne.n	800ba50 <_printf_i+0x120>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	07da      	lsls	r2, r3, #31
 800ba3c:	d508      	bpl.n	800ba50 <_printf_i+0x120>
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	6862      	ldr	r2, [r4, #4]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	bfde      	ittt	le
 800ba46:	2330      	movle	r3, #48	; 0x30
 800ba48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba50:	ebae 0305 	sub.w	r3, lr, r5
 800ba54:	6123      	str	r3, [r4, #16]
 800ba56:	f8cd 8000 	str.w	r8, [sp]
 800ba5a:	463b      	mov	r3, r7
 800ba5c:	aa03      	add	r2, sp, #12
 800ba5e:	4621      	mov	r1, r4
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7ff feef 	bl	800b844 <_printf_common>
 800ba66:	3001      	adds	r0, #1
 800ba68:	d155      	bne.n	800bb16 <_printf_i+0x1e6>
 800ba6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6e:	b005      	add	sp, #20
 800ba70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba74:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800ba78:	493c      	ldr	r1, [pc, #240]	; (800bb6c <_printf_i+0x23c>)
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	6818      	ldr	r0, [r3, #0]
 800ba7e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ba82:	f100 0504 	add.w	r5, r0, #4
 800ba86:	601d      	str	r5, [r3, #0]
 800ba88:	d001      	beq.n	800ba8e <_printf_i+0x15e>
 800ba8a:	6803      	ldr	r3, [r0, #0]
 800ba8c:	e002      	b.n	800ba94 <_printf_i+0x164>
 800ba8e:	0655      	lsls	r5, r2, #25
 800ba90:	d5fb      	bpl.n	800ba8a <_printf_i+0x15a>
 800ba92:	8803      	ldrh	r3, [r0, #0]
 800ba94:	07d0      	lsls	r0, r2, #31
 800ba96:	bf44      	itt	mi
 800ba98:	f042 0220 	orrmi.w	r2, r2, #32
 800ba9c:	6022      	strmi	r2, [r4, #0]
 800ba9e:	b91b      	cbnz	r3, 800baa8 <_printf_i+0x178>
 800baa0:	6822      	ldr	r2, [r4, #0]
 800baa2:	f022 0220 	bic.w	r2, r2, #32
 800baa6:	6022      	str	r2, [r4, #0]
 800baa8:	2210      	movs	r2, #16
 800baaa:	e7b1      	b.n	800ba10 <_printf_i+0xe0>
 800baac:	4675      	mov	r5, lr
 800baae:	fbb3 f0f2 	udiv	r0, r3, r2
 800bab2:	fb02 3310 	mls	r3, r2, r0, r3
 800bab6:	5ccb      	ldrb	r3, [r1, r3]
 800bab8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800babc:	4603      	mov	r3, r0
 800babe:	2800      	cmp	r0, #0
 800bac0:	d1f5      	bne.n	800baae <_printf_i+0x17e>
 800bac2:	e7b7      	b.n	800ba34 <_printf_i+0x104>
 800bac4:	6808      	ldr	r0, [r1, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	6949      	ldr	r1, [r1, #20]
 800baca:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bace:	d004      	beq.n	800bada <_printf_i+0x1aa>
 800bad0:	1d10      	adds	r0, r2, #4
 800bad2:	6018      	str	r0, [r3, #0]
 800bad4:	6813      	ldr	r3, [r2, #0]
 800bad6:	6019      	str	r1, [r3, #0]
 800bad8:	e007      	b.n	800baea <_printf_i+0x1ba>
 800bada:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bade:	f102 0004 	add.w	r0, r2, #4
 800bae2:	6018      	str	r0, [r3, #0]
 800bae4:	6813      	ldr	r3, [r2, #0]
 800bae6:	d0f6      	beq.n	800bad6 <_printf_i+0x1a6>
 800bae8:	8019      	strh	r1, [r3, #0]
 800baea:	2300      	movs	r3, #0
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	4675      	mov	r5, lr
 800baf0:	e7b1      	b.n	800ba56 <_printf_i+0x126>
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	1d11      	adds	r1, r2, #4
 800baf6:	6019      	str	r1, [r3, #0]
 800baf8:	6815      	ldr	r5, [r2, #0]
 800bafa:	6862      	ldr	r2, [r4, #4]
 800bafc:	2100      	movs	r1, #0
 800bafe:	4628      	mov	r0, r5
 800bb00:	f7f4 fb86 	bl	8000210 <memchr>
 800bb04:	b108      	cbz	r0, 800bb0a <_printf_i+0x1da>
 800bb06:	1b40      	subs	r0, r0, r5
 800bb08:	6060      	str	r0, [r4, #4]
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb14:	e79f      	b.n	800ba56 <_printf_i+0x126>
 800bb16:	6923      	ldr	r3, [r4, #16]
 800bb18:	462a      	mov	r2, r5
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	47c0      	blx	r8
 800bb20:	3001      	adds	r0, #1
 800bb22:	d0a2      	beq.n	800ba6a <_printf_i+0x13a>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	079b      	lsls	r3, r3, #30
 800bb28:	d507      	bpl.n	800bb3a <_printf_i+0x20a>
 800bb2a:	2500      	movs	r5, #0
 800bb2c:	f104 0919 	add.w	r9, r4, #25
 800bb30:	68e3      	ldr	r3, [r4, #12]
 800bb32:	9a03      	ldr	r2, [sp, #12]
 800bb34:	1a9b      	subs	r3, r3, r2
 800bb36:	429d      	cmp	r5, r3
 800bb38:	db05      	blt.n	800bb46 <_printf_i+0x216>
 800bb3a:	68e0      	ldr	r0, [r4, #12]
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	4298      	cmp	r0, r3
 800bb40:	bfb8      	it	lt
 800bb42:	4618      	movlt	r0, r3
 800bb44:	e793      	b.n	800ba6e <_printf_i+0x13e>
 800bb46:	2301      	movs	r3, #1
 800bb48:	464a      	mov	r2, r9
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	47c0      	blx	r8
 800bb50:	3001      	adds	r0, #1
 800bb52:	d08a      	beq.n	800ba6a <_printf_i+0x13a>
 800bb54:	3501      	adds	r5, #1
 800bb56:	e7eb      	b.n	800bb30 <_printf_i+0x200>
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1a7      	bne.n	800baac <_printf_i+0x17c>
 800bb5c:	780b      	ldrb	r3, [r1, #0]
 800bb5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb66:	e765      	b.n	800ba34 <_printf_i+0x104>
 800bb68:	0800d996 	.word	0x0800d996
 800bb6c:	0800d985 	.word	0x0800d985

0800bb70 <__sread>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	460c      	mov	r4, r1
 800bb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb78:	f000 f894 	bl	800bca4 <_read_r>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	bfab      	itete	ge
 800bb80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb82:	89a3      	ldrhlt	r3, [r4, #12]
 800bb84:	181b      	addge	r3, r3, r0
 800bb86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb8a:	bfac      	ite	ge
 800bb8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb8e:	81a3      	strhlt	r3, [r4, #12]
 800bb90:	bd10      	pop	{r4, pc}

0800bb92 <__swrite>:
 800bb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb96:	461f      	mov	r7, r3
 800bb98:	898b      	ldrh	r3, [r1, #12]
 800bb9a:	05db      	lsls	r3, r3, #23
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	4616      	mov	r6, r2
 800bba2:	d505      	bpl.n	800bbb0 <__swrite+0x1e>
 800bba4:	2302      	movs	r3, #2
 800bba6:	2200      	movs	r2, #0
 800bba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbac:	f000 f868 	bl	800bc80 <_lseek_r>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	463b      	mov	r3, r7
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc6:	f000 b817 	b.w	800bbf8 <_write_r>

0800bbca <__sseek>:
 800bbca:	b510      	push	{r4, lr}
 800bbcc:	460c      	mov	r4, r1
 800bbce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd2:	f000 f855 	bl	800bc80 <_lseek_r>
 800bbd6:	1c43      	adds	r3, r0, #1
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	bf15      	itete	ne
 800bbdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbe6:	81a3      	strheq	r3, [r4, #12]
 800bbe8:	bf18      	it	ne
 800bbea:	81a3      	strhne	r3, [r4, #12]
 800bbec:	bd10      	pop	{r4, pc}

0800bbee <__sclose>:
 800bbee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf2:	f000 b813 	b.w	800bc1c <_close_r>
	...

0800bbf8 <_write_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4c07      	ldr	r4, [pc, #28]	; (800bc18 <_write_r+0x20>)
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	4608      	mov	r0, r1
 800bc00:	4611      	mov	r1, r2
 800bc02:	2200      	movs	r2, #0
 800bc04:	6022      	str	r2, [r4, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	f000 f894 	bl	800bd34 <_write>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_write_r+0x1e>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_write_r+0x1e>
 800bc14:	602b      	str	r3, [r5, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	200023d0 	.word	0x200023d0

0800bc1c <_close_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4c06      	ldr	r4, [pc, #24]	; (800bc38 <_close_r+0x1c>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4605      	mov	r5, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	6023      	str	r3, [r4, #0]
 800bc28:	f000 f84e 	bl	800bcc8 <_close>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_close_r+0x1a>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_close_r+0x1a>
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	200023d0 	.word	0x200023d0

0800bc3c <_fstat_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4c07      	ldr	r4, [pc, #28]	; (800bc5c <_fstat_r+0x20>)
 800bc40:	2300      	movs	r3, #0
 800bc42:	4605      	mov	r5, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	4611      	mov	r1, r2
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	f000 f845 	bl	800bcd8 <_fstat>
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	d102      	bne.n	800bc58 <_fstat_r+0x1c>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	b103      	cbz	r3, 800bc58 <_fstat_r+0x1c>
 800bc56:	602b      	str	r3, [r5, #0]
 800bc58:	bd38      	pop	{r3, r4, r5, pc}
 800bc5a:	bf00      	nop
 800bc5c:	200023d0 	.word	0x200023d0

0800bc60 <_isatty_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4c06      	ldr	r4, [pc, #24]	; (800bc7c <_isatty_r+0x1c>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4605      	mov	r5, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	f000 f83c 	bl	800bce8 <_isatty>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_isatty_r+0x1a>
 800bc74:	6823      	ldr	r3, [r4, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_isatty_r+0x1a>
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	200023d0 	.word	0x200023d0

0800bc80 <_lseek_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4c07      	ldr	r4, [pc, #28]	; (800bca0 <_lseek_r+0x20>)
 800bc84:	4605      	mov	r5, r0
 800bc86:	4608      	mov	r0, r1
 800bc88:	4611      	mov	r1, r2
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	6022      	str	r2, [r4, #0]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f000 f832 	bl	800bcf8 <_lseek>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_lseek_r+0x1e>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_lseek_r+0x1e>
 800bc9c:	602b      	str	r3, [r5, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	200023d0 	.word	0x200023d0

0800bca4 <_read_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4c07      	ldr	r4, [pc, #28]	; (800bcc4 <_read_r+0x20>)
 800bca8:	4605      	mov	r5, r0
 800bcaa:	4608      	mov	r0, r1
 800bcac:	4611      	mov	r1, r2
 800bcae:	2200      	movs	r2, #0
 800bcb0:	6022      	str	r2, [r4, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f000 f828 	bl	800bd08 <_read>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_read_r+0x1e>
 800bcbc:	6823      	ldr	r3, [r4, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_read_r+0x1e>
 800bcc0:	602b      	str	r3, [r5, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	200023d0 	.word	0x200023d0

0800bcc8 <_close>:
 800bcc8:	4b02      	ldr	r3, [pc, #8]	; (800bcd4 <_close+0xc>)
 800bcca:	2258      	movs	r2, #88	; 0x58
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd2:	4770      	bx	lr
 800bcd4:	200023d0 	.word	0x200023d0

0800bcd8 <_fstat>:
 800bcd8:	4b02      	ldr	r3, [pc, #8]	; (800bce4 <_fstat+0xc>)
 800bcda:	2258      	movs	r2, #88	; 0x58
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	f04f 30ff 	mov.w	r0, #4294967295
 800bce2:	4770      	bx	lr
 800bce4:	200023d0 	.word	0x200023d0

0800bce8 <_isatty>:
 800bce8:	4b02      	ldr	r3, [pc, #8]	; (800bcf4 <_isatty+0xc>)
 800bcea:	2258      	movs	r2, #88	; 0x58
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	2000      	movs	r0, #0
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	200023d0 	.word	0x200023d0

0800bcf8 <_lseek>:
 800bcf8:	4b02      	ldr	r3, [pc, #8]	; (800bd04 <_lseek+0xc>)
 800bcfa:	2258      	movs	r2, #88	; 0x58
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800bd02:	4770      	bx	lr
 800bd04:	200023d0 	.word	0x200023d0

0800bd08 <_read>:
 800bd08:	4b02      	ldr	r3, [pc, #8]	; (800bd14 <_read+0xc>)
 800bd0a:	2258      	movs	r2, #88	; 0x58
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd12:	4770      	bx	lr
 800bd14:	200023d0 	.word	0x200023d0

0800bd18 <_sbrk>:
 800bd18:	4b04      	ldr	r3, [pc, #16]	; (800bd2c <_sbrk+0x14>)
 800bd1a:	6819      	ldr	r1, [r3, #0]
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	b909      	cbnz	r1, 800bd24 <_sbrk+0xc>
 800bd20:	4903      	ldr	r1, [pc, #12]	; (800bd30 <_sbrk+0x18>)
 800bd22:	6019      	str	r1, [r3, #0]
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	4402      	add	r2, r0
 800bd28:	601a      	str	r2, [r3, #0]
 800bd2a:	4770      	bx	lr
 800bd2c:	200002f0 	.word	0x200002f0
 800bd30:	200023d4 	.word	0x200023d4

0800bd34 <_write>:
 800bd34:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <_write+0xc>)
 800bd36:	2258      	movs	r2, #88	; 0x58
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3e:	4770      	bx	lr
 800bd40:	200023d0 	.word	0x200023d0

0800bd44 <_init>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr

0800bd50 <_fini>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	bf00      	nop
 800bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd56:	bc08      	pop	{r3}
 800bd58:	469e      	mov	lr, r3
 800bd5a:	4770      	bx	lr
